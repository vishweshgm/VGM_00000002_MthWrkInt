
QPS_00000038_ThreePhaseBatteryCharger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e98  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08026e98  08026e98  00036e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080001c4  080001c4  00040628  2**0
                  CONTENTS
  4 .ARM          00000008  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080001cc  080001cc  00040628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080001cc  080001cc  000101cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000628  20000000  08027494  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000066e4  20000628  08027abc  00040628  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006d0c  08027abc  00046d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040628  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a268  00000000  00000000  00040658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007298  00000000  00000000  0007a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002290  00000000  00000000  00081b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002010  00000000  00000000  00083de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d142  00000000  00000000  00085df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003091a  00000000  00000000  000b2f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3b39  00000000  00000000  000e3854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d738d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a168  00000000  00000000  001d73e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000628 	.word	0x20000628
 801001c:	00000000 	.word	0x00000000
 8010020:	08026e80 	.word	0x08026e80

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	2000062c 	.word	0x2000062c
 801003c:	08026e80 	.word	0x08026e80

08010040 <strlen>:
 8010040:	4603      	mov	r3, r0
 8010042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010046:	2a00      	cmp	r2, #0
 8010048:	d1fb      	bne.n	8010042 <strlen+0x2>
 801004a:	1a18      	subs	r0, r3, r0
 801004c:	3801      	subs	r0, #1
 801004e:	4770      	bx	lr

08010050 <memchr>:
 8010050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010054:	2a10      	cmp	r2, #16
 8010056:	db2b      	blt.n	80100b0 <memchr+0x60>
 8010058:	f010 0f07 	tst.w	r0, #7
 801005c:	d008      	beq.n	8010070 <memchr+0x20>
 801005e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010062:	3a01      	subs	r2, #1
 8010064:	428b      	cmp	r3, r1
 8010066:	d02d      	beq.n	80100c4 <memchr+0x74>
 8010068:	f010 0f07 	tst.w	r0, #7
 801006c:	b342      	cbz	r2, 80100c0 <memchr+0x70>
 801006e:	d1f6      	bne.n	801005e <memchr+0xe>
 8010070:	b4f0      	push	{r4, r5, r6, r7}
 8010072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801007a:	f022 0407 	bic.w	r4, r2, #7
 801007e:	f07f 0700 	mvns.w	r7, #0
 8010082:	2300      	movs	r3, #0
 8010084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010088:	3c08      	subs	r4, #8
 801008a:	ea85 0501 	eor.w	r5, r5, r1
 801008e:	ea86 0601 	eor.w	r6, r6, r1
 8010092:	fa85 f547 	uadd8	r5, r5, r7
 8010096:	faa3 f587 	sel	r5, r3, r7
 801009a:	fa86 f647 	uadd8	r6, r6, r7
 801009e:	faa5 f687 	sel	r6, r5, r7
 80100a2:	b98e      	cbnz	r6, 80100c8 <memchr+0x78>
 80100a4:	d1ee      	bne.n	8010084 <memchr+0x34>
 80100a6:	bcf0      	pop	{r4, r5, r6, r7}
 80100a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80100ac:	f002 0207 	and.w	r2, r2, #7
 80100b0:	b132      	cbz	r2, 80100c0 <memchr+0x70>
 80100b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80100b6:	3a01      	subs	r2, #1
 80100b8:	ea83 0301 	eor.w	r3, r3, r1
 80100bc:	b113      	cbz	r3, 80100c4 <memchr+0x74>
 80100be:	d1f8      	bne.n	80100b2 <memchr+0x62>
 80100c0:	2000      	movs	r0, #0
 80100c2:	4770      	bx	lr
 80100c4:	3801      	subs	r0, #1
 80100c6:	4770      	bx	lr
 80100c8:	2d00      	cmp	r5, #0
 80100ca:	bf06      	itte	eq
 80100cc:	4635      	moveq	r5, r6
 80100ce:	3803      	subeq	r0, #3
 80100d0:	3807      	subne	r0, #7
 80100d2:	f015 0f01 	tst.w	r5, #1
 80100d6:	d107      	bne.n	80100e8 <memchr+0x98>
 80100d8:	3001      	adds	r0, #1
 80100da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80100de:	bf02      	ittt	eq
 80100e0:	3001      	addeq	r0, #1
 80100e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80100e6:	3001      	addeq	r0, #1
 80100e8:	bcf0      	pop	{r4, r5, r6, r7}
 80100ea:	3801      	subs	r0, #1
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop

080100f0 <__aeabi_drsub>:
 80100f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80100f4:	e002      	b.n	80100fc <__adddf3>
 80100f6:	bf00      	nop

080100f8 <__aeabi_dsub>:
 80100f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080100fc <__adddf3>:
 80100fc:	b530      	push	{r4, r5, lr}
 80100fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010106:	ea94 0f05 	teq	r4, r5
 801010a:	bf08      	it	eq
 801010c:	ea90 0f02 	teqeq	r0, r2
 8010110:	bf1f      	itttt	ne
 8010112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010116:	ea55 0c02 	orrsne.w	ip, r5, r2
 801011a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801011e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010122:	f000 80e2 	beq.w	80102ea <__adddf3+0x1ee>
 8010126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801012a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801012e:	bfb8      	it	lt
 8010130:	426d      	neglt	r5, r5
 8010132:	dd0c      	ble.n	801014e <__adddf3+0x52>
 8010134:	442c      	add	r4, r5
 8010136:	ea80 0202 	eor.w	r2, r0, r2
 801013a:	ea81 0303 	eor.w	r3, r1, r3
 801013e:	ea82 0000 	eor.w	r0, r2, r0
 8010142:	ea83 0101 	eor.w	r1, r3, r1
 8010146:	ea80 0202 	eor.w	r2, r0, r2
 801014a:	ea81 0303 	eor.w	r3, r1, r3
 801014e:	2d36      	cmp	r5, #54	; 0x36
 8010150:	bf88      	it	hi
 8010152:	bd30      	pophi	{r4, r5, pc}
 8010154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801015c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010164:	d002      	beq.n	801016c <__adddf3+0x70>
 8010166:	4240      	negs	r0, r0
 8010168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801016c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010178:	d002      	beq.n	8010180 <__adddf3+0x84>
 801017a:	4252      	negs	r2, r2
 801017c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010180:	ea94 0f05 	teq	r4, r5
 8010184:	f000 80a7 	beq.w	80102d6 <__adddf3+0x1da>
 8010188:	f1a4 0401 	sub.w	r4, r4, #1
 801018c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010190:	db0d      	blt.n	80101ae <__adddf3+0xb2>
 8010192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010196:	fa22 f205 	lsr.w	r2, r2, r5
 801019a:	1880      	adds	r0, r0, r2
 801019c:	f141 0100 	adc.w	r1, r1, #0
 80101a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80101a4:	1880      	adds	r0, r0, r2
 80101a6:	fa43 f305 	asr.w	r3, r3, r5
 80101aa:	4159      	adcs	r1, r3
 80101ac:	e00e      	b.n	80101cc <__adddf3+0xd0>
 80101ae:	f1a5 0520 	sub.w	r5, r5, #32
 80101b2:	f10e 0e20 	add.w	lr, lr, #32
 80101b6:	2a01      	cmp	r2, #1
 80101b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80101bc:	bf28      	it	cs
 80101be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80101c2:	fa43 f305 	asr.w	r3, r3, r5
 80101c6:	18c0      	adds	r0, r0, r3
 80101c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80101cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80101d0:	d507      	bpl.n	80101e2 <__adddf3+0xe6>
 80101d2:	f04f 0e00 	mov.w	lr, #0
 80101d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80101da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80101de:	eb6e 0101 	sbc.w	r1, lr, r1
 80101e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80101e6:	d31b      	bcc.n	8010220 <__adddf3+0x124>
 80101e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80101ec:	d30c      	bcc.n	8010208 <__adddf3+0x10c>
 80101ee:	0849      	lsrs	r1, r1, #1
 80101f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80101f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80101f8:	f104 0401 	add.w	r4, r4, #1
 80101fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8010204:	f080 809a 	bcs.w	801033c <__adddf3+0x240>
 8010208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801020c:	bf08      	it	eq
 801020e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010212:	f150 0000 	adcs.w	r0, r0, #0
 8010216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801021a:	ea41 0105 	orr.w	r1, r1, r5
 801021e:	bd30      	pop	{r4, r5, pc}
 8010220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010224:	4140      	adcs	r0, r0
 8010226:	eb41 0101 	adc.w	r1, r1, r1
 801022a:	3c01      	subs	r4, #1
 801022c:	bf28      	it	cs
 801022e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8010232:	d2e9      	bcs.n	8010208 <__adddf3+0x10c>
 8010234:	f091 0f00 	teq	r1, #0
 8010238:	bf04      	itt	eq
 801023a:	4601      	moveq	r1, r0
 801023c:	2000      	moveq	r0, #0
 801023e:	fab1 f381 	clz	r3, r1
 8010242:	bf08      	it	eq
 8010244:	3320      	addeq	r3, #32
 8010246:	f1a3 030b 	sub.w	r3, r3, #11
 801024a:	f1b3 0220 	subs.w	r2, r3, #32
 801024e:	da0c      	bge.n	801026a <__adddf3+0x16e>
 8010250:	320c      	adds	r2, #12
 8010252:	dd08      	ble.n	8010266 <__adddf3+0x16a>
 8010254:	f102 0c14 	add.w	ip, r2, #20
 8010258:	f1c2 020c 	rsb	r2, r2, #12
 801025c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010260:	fa21 f102 	lsr.w	r1, r1, r2
 8010264:	e00c      	b.n	8010280 <__adddf3+0x184>
 8010266:	f102 0214 	add.w	r2, r2, #20
 801026a:	bfd8      	it	le
 801026c:	f1c2 0c20 	rsble	ip, r2, #32
 8010270:	fa01 f102 	lsl.w	r1, r1, r2
 8010274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010278:	bfdc      	itt	le
 801027a:	ea41 010c 	orrle.w	r1, r1, ip
 801027e:	4090      	lslle	r0, r2
 8010280:	1ae4      	subs	r4, r4, r3
 8010282:	bfa2      	ittt	ge
 8010284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010288:	4329      	orrge	r1, r5
 801028a:	bd30      	popge	{r4, r5, pc}
 801028c:	ea6f 0404 	mvn.w	r4, r4
 8010290:	3c1f      	subs	r4, #31
 8010292:	da1c      	bge.n	80102ce <__adddf3+0x1d2>
 8010294:	340c      	adds	r4, #12
 8010296:	dc0e      	bgt.n	80102b6 <__adddf3+0x1ba>
 8010298:	f104 0414 	add.w	r4, r4, #20
 801029c:	f1c4 0220 	rsb	r2, r4, #32
 80102a0:	fa20 f004 	lsr.w	r0, r0, r4
 80102a4:	fa01 f302 	lsl.w	r3, r1, r2
 80102a8:	ea40 0003 	orr.w	r0, r0, r3
 80102ac:	fa21 f304 	lsr.w	r3, r1, r4
 80102b0:	ea45 0103 	orr.w	r1, r5, r3
 80102b4:	bd30      	pop	{r4, r5, pc}
 80102b6:	f1c4 040c 	rsb	r4, r4, #12
 80102ba:	f1c4 0220 	rsb	r2, r4, #32
 80102be:	fa20 f002 	lsr.w	r0, r0, r2
 80102c2:	fa01 f304 	lsl.w	r3, r1, r4
 80102c6:	ea40 0003 	orr.w	r0, r0, r3
 80102ca:	4629      	mov	r1, r5
 80102cc:	bd30      	pop	{r4, r5, pc}
 80102ce:	fa21 f004 	lsr.w	r0, r1, r4
 80102d2:	4629      	mov	r1, r5
 80102d4:	bd30      	pop	{r4, r5, pc}
 80102d6:	f094 0f00 	teq	r4, #0
 80102da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80102de:	bf06      	itte	eq
 80102e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80102e4:	3401      	addeq	r4, #1
 80102e6:	3d01      	subne	r5, #1
 80102e8:	e74e      	b.n	8010188 <__adddf3+0x8c>
 80102ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80102ee:	bf18      	it	ne
 80102f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102f4:	d029      	beq.n	801034a <__adddf3+0x24e>
 80102f6:	ea94 0f05 	teq	r4, r5
 80102fa:	bf08      	it	eq
 80102fc:	ea90 0f02 	teqeq	r0, r2
 8010300:	d005      	beq.n	801030e <__adddf3+0x212>
 8010302:	ea54 0c00 	orrs.w	ip, r4, r0
 8010306:	bf04      	itt	eq
 8010308:	4619      	moveq	r1, r3
 801030a:	4610      	moveq	r0, r2
 801030c:	bd30      	pop	{r4, r5, pc}
 801030e:	ea91 0f03 	teq	r1, r3
 8010312:	bf1e      	ittt	ne
 8010314:	2100      	movne	r1, #0
 8010316:	2000      	movne	r0, #0
 8010318:	bd30      	popne	{r4, r5, pc}
 801031a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801031e:	d105      	bne.n	801032c <__adddf3+0x230>
 8010320:	0040      	lsls	r0, r0, #1
 8010322:	4149      	adcs	r1, r1
 8010324:	bf28      	it	cs
 8010326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801032a:	bd30      	pop	{r4, r5, pc}
 801032c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010330:	bf3c      	itt	cc
 8010332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8010336:	bd30      	popcc	{r4, r5, pc}
 8010338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801033c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010344:	f04f 0000 	mov.w	r0, #0
 8010348:	bd30      	pop	{r4, r5, pc}
 801034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801034e:	bf1a      	itte	ne
 8010350:	4619      	movne	r1, r3
 8010352:	4610      	movne	r0, r2
 8010354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010358:	bf1c      	itt	ne
 801035a:	460b      	movne	r3, r1
 801035c:	4602      	movne	r2, r0
 801035e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010362:	bf06      	itte	eq
 8010364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010368:	ea91 0f03 	teqeq	r1, r3
 801036c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010370:	bd30      	pop	{r4, r5, pc}
 8010372:	bf00      	nop

08010374 <__aeabi_ui2d>:
 8010374:	f090 0f00 	teq	r0, #0
 8010378:	bf04      	itt	eq
 801037a:	2100      	moveq	r1, #0
 801037c:	4770      	bxeq	lr
 801037e:	b530      	push	{r4, r5, lr}
 8010380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010388:	f04f 0500 	mov.w	r5, #0
 801038c:	f04f 0100 	mov.w	r1, #0
 8010390:	e750      	b.n	8010234 <__adddf3+0x138>
 8010392:	bf00      	nop

08010394 <__aeabi_i2d>:
 8010394:	f090 0f00 	teq	r0, #0
 8010398:	bf04      	itt	eq
 801039a:	2100      	moveq	r1, #0
 801039c:	4770      	bxeq	lr
 801039e:	b530      	push	{r4, r5, lr}
 80103a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80103a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80103a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80103ac:	bf48      	it	mi
 80103ae:	4240      	negmi	r0, r0
 80103b0:	f04f 0100 	mov.w	r1, #0
 80103b4:	e73e      	b.n	8010234 <__adddf3+0x138>
 80103b6:	bf00      	nop

080103b8 <__aeabi_f2d>:
 80103b8:	0042      	lsls	r2, r0, #1
 80103ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80103be:	ea4f 0131 	mov.w	r1, r1, rrx
 80103c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80103c6:	bf1f      	itttt	ne
 80103c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80103cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80103d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80103d4:	4770      	bxne	lr
 80103d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80103da:	bf08      	it	eq
 80103dc:	4770      	bxeq	lr
 80103de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80103e2:	bf04      	itt	eq
 80103e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80103e8:	4770      	bxeq	lr
 80103ea:	b530      	push	{r4, r5, lr}
 80103ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80103f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80103f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80103f8:	e71c      	b.n	8010234 <__adddf3+0x138>
 80103fa:	bf00      	nop

080103fc <__aeabi_ul2d>:
 80103fc:	ea50 0201 	orrs.w	r2, r0, r1
 8010400:	bf08      	it	eq
 8010402:	4770      	bxeq	lr
 8010404:	b530      	push	{r4, r5, lr}
 8010406:	f04f 0500 	mov.w	r5, #0
 801040a:	e00a      	b.n	8010422 <__aeabi_l2d+0x16>

0801040c <__aeabi_l2d>:
 801040c:	ea50 0201 	orrs.w	r2, r0, r1
 8010410:	bf08      	it	eq
 8010412:	4770      	bxeq	lr
 8010414:	b530      	push	{r4, r5, lr}
 8010416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801041a:	d502      	bpl.n	8010422 <__aeabi_l2d+0x16>
 801041c:	4240      	negs	r0, r0
 801041e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801042a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801042e:	f43f aed8 	beq.w	80101e2 <__adddf3+0xe6>
 8010432:	f04f 0203 	mov.w	r2, #3
 8010436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801043a:	bf18      	it	ne
 801043c:	3203      	addne	r2, #3
 801043e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010442:	bf18      	it	ne
 8010444:	3203      	addne	r2, #3
 8010446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801044a:	f1c2 0320 	rsb	r3, r2, #32
 801044e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010452:	fa20 f002 	lsr.w	r0, r0, r2
 8010456:	fa01 fe03 	lsl.w	lr, r1, r3
 801045a:	ea40 000e 	orr.w	r0, r0, lr
 801045e:	fa21 f102 	lsr.w	r1, r1, r2
 8010462:	4414      	add	r4, r2
 8010464:	e6bd      	b.n	80101e2 <__adddf3+0xe6>
 8010466:	bf00      	nop

08010468 <__aeabi_dmul>:
 8010468:	b570      	push	{r4, r5, r6, lr}
 801046a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801046e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010476:	bf1d      	ittte	ne
 8010478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801047c:	ea94 0f0c 	teqne	r4, ip
 8010480:	ea95 0f0c 	teqne	r5, ip
 8010484:	f000 f8de 	bleq	8010644 <__aeabi_dmul+0x1dc>
 8010488:	442c      	add	r4, r5
 801048a:	ea81 0603 	eor.w	r6, r1, r3
 801048e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801049a:	bf18      	it	ne
 801049c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80104a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80104a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80104a8:	d038      	beq.n	801051c <__aeabi_dmul+0xb4>
 80104aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80104ae:	f04f 0500 	mov.w	r5, #0
 80104b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80104b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80104ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80104be:	f04f 0600 	mov.w	r6, #0
 80104c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80104c6:	f09c 0f00 	teq	ip, #0
 80104ca:	bf18      	it	ne
 80104cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80104d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80104d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80104d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80104dc:	d204      	bcs.n	80104e8 <__aeabi_dmul+0x80>
 80104de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80104e2:	416d      	adcs	r5, r5
 80104e4:	eb46 0606 	adc.w	r6, r6, r6
 80104e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80104ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80104f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80104f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80104f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80104fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010500:	bf88      	it	hi
 8010502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010506:	d81e      	bhi.n	8010546 <__aeabi_dmul+0xde>
 8010508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801050c:	bf08      	it	eq
 801050e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8010512:	f150 0000 	adcs.w	r0, r0, #0
 8010516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801051a:	bd70      	pop	{r4, r5, r6, pc}
 801051c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010520:	ea46 0101 	orr.w	r1, r6, r1
 8010524:	ea40 0002 	orr.w	r0, r0, r2
 8010528:	ea81 0103 	eor.w	r1, r1, r3
 801052c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010530:	bfc2      	ittt	gt
 8010532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801053a:	bd70      	popgt	{r4, r5, r6, pc}
 801053c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010540:	f04f 0e00 	mov.w	lr, #0
 8010544:	3c01      	subs	r4, #1
 8010546:	f300 80ab 	bgt.w	80106a0 <__aeabi_dmul+0x238>
 801054a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801054e:	bfde      	ittt	le
 8010550:	2000      	movle	r0, #0
 8010552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010556:	bd70      	pople	{r4, r5, r6, pc}
 8010558:	f1c4 0400 	rsb	r4, r4, #0
 801055c:	3c20      	subs	r4, #32
 801055e:	da35      	bge.n	80105cc <__aeabi_dmul+0x164>
 8010560:	340c      	adds	r4, #12
 8010562:	dc1b      	bgt.n	801059c <__aeabi_dmul+0x134>
 8010564:	f104 0414 	add.w	r4, r4, #20
 8010568:	f1c4 0520 	rsb	r5, r4, #32
 801056c:	fa00 f305 	lsl.w	r3, r0, r5
 8010570:	fa20 f004 	lsr.w	r0, r0, r4
 8010574:	fa01 f205 	lsl.w	r2, r1, r5
 8010578:	ea40 0002 	orr.w	r0, r0, r2
 801057c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010588:	fa21 f604 	lsr.w	r6, r1, r4
 801058c:	eb42 0106 	adc.w	r1, r2, r6
 8010590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010594:	bf08      	it	eq
 8010596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801059a:	bd70      	pop	{r4, r5, r6, pc}
 801059c:	f1c4 040c 	rsb	r4, r4, #12
 80105a0:	f1c4 0520 	rsb	r5, r4, #32
 80105a4:	fa00 f304 	lsl.w	r3, r0, r4
 80105a8:	fa20 f005 	lsr.w	r0, r0, r5
 80105ac:	fa01 f204 	lsl.w	r2, r1, r4
 80105b0:	ea40 0002 	orr.w	r0, r0, r2
 80105b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80105b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80105bc:	f141 0100 	adc.w	r1, r1, #0
 80105c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80105c4:	bf08      	it	eq
 80105c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80105ca:	bd70      	pop	{r4, r5, r6, pc}
 80105cc:	f1c4 0520 	rsb	r5, r4, #32
 80105d0:	fa00 f205 	lsl.w	r2, r0, r5
 80105d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80105d8:	fa20 f304 	lsr.w	r3, r0, r4
 80105dc:	fa01 f205 	lsl.w	r2, r1, r5
 80105e0:	ea43 0302 	orr.w	r3, r3, r2
 80105e4:	fa21 f004 	lsr.w	r0, r1, r4
 80105e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80105ec:	fa21 f204 	lsr.w	r2, r1, r4
 80105f0:	ea20 0002 	bic.w	r0, r0, r2
 80105f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80105f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80105fc:	bf08      	it	eq
 80105fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010602:	bd70      	pop	{r4, r5, r6, pc}
 8010604:	f094 0f00 	teq	r4, #0
 8010608:	d10f      	bne.n	801062a <__aeabi_dmul+0x1c2>
 801060a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801060e:	0040      	lsls	r0, r0, #1
 8010610:	eb41 0101 	adc.w	r1, r1, r1
 8010614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010618:	bf08      	it	eq
 801061a:	3c01      	subeq	r4, #1
 801061c:	d0f7      	beq.n	801060e <__aeabi_dmul+0x1a6>
 801061e:	ea41 0106 	orr.w	r1, r1, r6
 8010622:	f095 0f00 	teq	r5, #0
 8010626:	bf18      	it	ne
 8010628:	4770      	bxne	lr
 801062a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801062e:	0052      	lsls	r2, r2, #1
 8010630:	eb43 0303 	adc.w	r3, r3, r3
 8010634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010638:	bf08      	it	eq
 801063a:	3d01      	subeq	r5, #1
 801063c:	d0f7      	beq.n	801062e <__aeabi_dmul+0x1c6>
 801063e:	ea43 0306 	orr.w	r3, r3, r6
 8010642:	4770      	bx	lr
 8010644:	ea94 0f0c 	teq	r4, ip
 8010648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801064c:	bf18      	it	ne
 801064e:	ea95 0f0c 	teqne	r5, ip
 8010652:	d00c      	beq.n	801066e <__aeabi_dmul+0x206>
 8010654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010658:	bf18      	it	ne
 801065a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801065e:	d1d1      	bne.n	8010604 <__aeabi_dmul+0x19c>
 8010660:	ea81 0103 	eor.w	r1, r1, r3
 8010664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010668:	f04f 0000 	mov.w	r0, #0
 801066c:	bd70      	pop	{r4, r5, r6, pc}
 801066e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010672:	bf06      	itte	eq
 8010674:	4610      	moveq	r0, r2
 8010676:	4619      	moveq	r1, r3
 8010678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801067c:	d019      	beq.n	80106b2 <__aeabi_dmul+0x24a>
 801067e:	ea94 0f0c 	teq	r4, ip
 8010682:	d102      	bne.n	801068a <__aeabi_dmul+0x222>
 8010684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010688:	d113      	bne.n	80106b2 <__aeabi_dmul+0x24a>
 801068a:	ea95 0f0c 	teq	r5, ip
 801068e:	d105      	bne.n	801069c <__aeabi_dmul+0x234>
 8010690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010694:	bf1c      	itt	ne
 8010696:	4610      	movne	r0, r2
 8010698:	4619      	movne	r1, r3
 801069a:	d10a      	bne.n	80106b2 <__aeabi_dmul+0x24a>
 801069c:	ea81 0103 	eor.w	r1, r1, r3
 80106a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80106a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80106a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80106ac:	f04f 0000 	mov.w	r0, #0
 80106b0:	bd70      	pop	{r4, r5, r6, pc}
 80106b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80106b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80106ba:	bd70      	pop	{r4, r5, r6, pc}

080106bc <__aeabi_ddiv>:
 80106bc:	b570      	push	{r4, r5, r6, lr}
 80106be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80106c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80106c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80106ca:	bf1d      	ittte	ne
 80106cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80106d0:	ea94 0f0c 	teqne	r4, ip
 80106d4:	ea95 0f0c 	teqne	r5, ip
 80106d8:	f000 f8a7 	bleq	801082a <__aeabi_ddiv+0x16e>
 80106dc:	eba4 0405 	sub.w	r4, r4, r5
 80106e0:	ea81 0e03 	eor.w	lr, r1, r3
 80106e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80106e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80106ec:	f000 8088 	beq.w	8010800 <__aeabi_ddiv+0x144>
 80106f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80106f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80106f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80106fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8010704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8010708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801070c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8010710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8010714:	429d      	cmp	r5, r3
 8010716:	bf08      	it	eq
 8010718:	4296      	cmpeq	r6, r2
 801071a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801071e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8010722:	d202      	bcs.n	801072a <__aeabi_ddiv+0x6e>
 8010724:	085b      	lsrs	r3, r3, #1
 8010726:	ea4f 0232 	mov.w	r2, r2, rrx
 801072a:	1ab6      	subs	r6, r6, r2
 801072c:	eb65 0503 	sbc.w	r5, r5, r3
 8010730:	085b      	lsrs	r3, r3, #1
 8010732:	ea4f 0232 	mov.w	r2, r2, rrx
 8010736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801073a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801073e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010746:	bf22      	ittt	cs
 8010748:	1ab6      	subcs	r6, r6, r2
 801074a:	4675      	movcs	r5, lr
 801074c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010750:	085b      	lsrs	r3, r3, #1
 8010752:	ea4f 0232 	mov.w	r2, r2, rrx
 8010756:	ebb6 0e02 	subs.w	lr, r6, r2
 801075a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801075e:	bf22      	ittt	cs
 8010760:	1ab6      	subcs	r6, r6, r2
 8010762:	4675      	movcs	r5, lr
 8010764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010768:	085b      	lsrs	r3, r3, #1
 801076a:	ea4f 0232 	mov.w	r2, r2, rrx
 801076e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010776:	bf22      	ittt	cs
 8010778:	1ab6      	subcs	r6, r6, r2
 801077a:	4675      	movcs	r5, lr
 801077c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010780:	085b      	lsrs	r3, r3, #1
 8010782:	ea4f 0232 	mov.w	r2, r2, rrx
 8010786:	ebb6 0e02 	subs.w	lr, r6, r2
 801078a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801078e:	bf22      	ittt	cs
 8010790:	1ab6      	subcs	r6, r6, r2
 8010792:	4675      	movcs	r5, lr
 8010794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010798:	ea55 0e06 	orrs.w	lr, r5, r6
 801079c:	d018      	beq.n	80107d0 <__aeabi_ddiv+0x114>
 801079e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80107a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80107a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80107aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80107ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80107b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80107b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80107ba:	d1c0      	bne.n	801073e <__aeabi_ddiv+0x82>
 80107bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107c0:	d10b      	bne.n	80107da <__aeabi_ddiv+0x11e>
 80107c2:	ea41 0100 	orr.w	r1, r1, r0
 80107c6:	f04f 0000 	mov.w	r0, #0
 80107ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80107ce:	e7b6      	b.n	801073e <__aeabi_ddiv+0x82>
 80107d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107d4:	bf04      	itt	eq
 80107d6:	4301      	orreq	r1, r0
 80107d8:	2000      	moveq	r0, #0
 80107da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80107de:	bf88      	it	hi
 80107e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80107e4:	f63f aeaf 	bhi.w	8010546 <__aeabi_dmul+0xde>
 80107e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80107ec:	bf04      	itt	eq
 80107ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80107f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80107f6:	f150 0000 	adcs.w	r0, r0, #0
 80107fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80107fe:	bd70      	pop	{r4, r5, r6, pc}
 8010800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8010804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8010808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801080c:	bfc2      	ittt	gt
 801080e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010816:	bd70      	popgt	{r4, r5, r6, pc}
 8010818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801081c:	f04f 0e00 	mov.w	lr, #0
 8010820:	3c01      	subs	r4, #1
 8010822:	e690      	b.n	8010546 <__aeabi_dmul+0xde>
 8010824:	ea45 0e06 	orr.w	lr, r5, r6
 8010828:	e68d      	b.n	8010546 <__aeabi_dmul+0xde>
 801082a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801082e:	ea94 0f0c 	teq	r4, ip
 8010832:	bf08      	it	eq
 8010834:	ea95 0f0c 	teqeq	r5, ip
 8010838:	f43f af3b 	beq.w	80106b2 <__aeabi_dmul+0x24a>
 801083c:	ea94 0f0c 	teq	r4, ip
 8010840:	d10a      	bne.n	8010858 <__aeabi_ddiv+0x19c>
 8010842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010846:	f47f af34 	bne.w	80106b2 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	f47f af25 	bne.w	801069c <__aeabi_dmul+0x234>
 8010852:	4610      	mov	r0, r2
 8010854:	4619      	mov	r1, r3
 8010856:	e72c      	b.n	80106b2 <__aeabi_dmul+0x24a>
 8010858:	ea95 0f0c 	teq	r5, ip
 801085c:	d106      	bne.n	801086c <__aeabi_ddiv+0x1b0>
 801085e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010862:	f43f aefd 	beq.w	8010660 <__aeabi_dmul+0x1f8>
 8010866:	4610      	mov	r0, r2
 8010868:	4619      	mov	r1, r3
 801086a:	e722      	b.n	80106b2 <__aeabi_dmul+0x24a>
 801086c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010870:	bf18      	it	ne
 8010872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010876:	f47f aec5 	bne.w	8010604 <__aeabi_dmul+0x19c>
 801087a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801087e:	f47f af0d 	bne.w	801069c <__aeabi_dmul+0x234>
 8010882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010886:	f47f aeeb 	bne.w	8010660 <__aeabi_dmul+0x1f8>
 801088a:	e712      	b.n	80106b2 <__aeabi_dmul+0x24a>

0801088c <__gedf2>:
 801088c:	f04f 3cff 	mov.w	ip, #4294967295
 8010890:	e006      	b.n	80108a0 <__cmpdf2+0x4>
 8010892:	bf00      	nop

08010894 <__ledf2>:
 8010894:	f04f 0c01 	mov.w	ip, #1
 8010898:	e002      	b.n	80108a0 <__cmpdf2+0x4>
 801089a:	bf00      	nop

0801089c <__cmpdf2>:
 801089c:	f04f 0c01 	mov.w	ip, #1
 80108a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80108a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80108a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80108ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80108b0:	bf18      	it	ne
 80108b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80108b6:	d01b      	beq.n	80108f0 <__cmpdf2+0x54>
 80108b8:	b001      	add	sp, #4
 80108ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80108be:	bf0c      	ite	eq
 80108c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80108c4:	ea91 0f03 	teqne	r1, r3
 80108c8:	bf02      	ittt	eq
 80108ca:	ea90 0f02 	teqeq	r0, r2
 80108ce:	2000      	moveq	r0, #0
 80108d0:	4770      	bxeq	lr
 80108d2:	f110 0f00 	cmn.w	r0, #0
 80108d6:	ea91 0f03 	teq	r1, r3
 80108da:	bf58      	it	pl
 80108dc:	4299      	cmppl	r1, r3
 80108de:	bf08      	it	eq
 80108e0:	4290      	cmpeq	r0, r2
 80108e2:	bf2c      	ite	cs
 80108e4:	17d8      	asrcs	r0, r3, #31
 80108e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80108ea:	f040 0001 	orr.w	r0, r0, #1
 80108ee:	4770      	bx	lr
 80108f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80108f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80108f8:	d102      	bne.n	8010900 <__cmpdf2+0x64>
 80108fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80108fe:	d107      	bne.n	8010910 <__cmpdf2+0x74>
 8010900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010908:	d1d6      	bne.n	80108b8 <__cmpdf2+0x1c>
 801090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801090e:	d0d3      	beq.n	80108b8 <__cmpdf2+0x1c>
 8010910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop

08010918 <__aeabi_cdrcmple>:
 8010918:	4684      	mov	ip, r0
 801091a:	4610      	mov	r0, r2
 801091c:	4662      	mov	r2, ip
 801091e:	468c      	mov	ip, r1
 8010920:	4619      	mov	r1, r3
 8010922:	4663      	mov	r3, ip
 8010924:	e000      	b.n	8010928 <__aeabi_cdcmpeq>
 8010926:	bf00      	nop

08010928 <__aeabi_cdcmpeq>:
 8010928:	b501      	push	{r0, lr}
 801092a:	f7ff ffb7 	bl	801089c <__cmpdf2>
 801092e:	2800      	cmp	r0, #0
 8010930:	bf48      	it	mi
 8010932:	f110 0f00 	cmnmi.w	r0, #0
 8010936:	bd01      	pop	{r0, pc}

08010938 <__aeabi_dcmpeq>:
 8010938:	f84d ed08 	str.w	lr, [sp, #-8]!
 801093c:	f7ff fff4 	bl	8010928 <__aeabi_cdcmpeq>
 8010940:	bf0c      	ite	eq
 8010942:	2001      	moveq	r0, #1
 8010944:	2000      	movne	r0, #0
 8010946:	f85d fb08 	ldr.w	pc, [sp], #8
 801094a:	bf00      	nop

0801094c <__aeabi_dcmplt>:
 801094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010950:	f7ff ffea 	bl	8010928 <__aeabi_cdcmpeq>
 8010954:	bf34      	ite	cc
 8010956:	2001      	movcc	r0, #1
 8010958:	2000      	movcs	r0, #0
 801095a:	f85d fb08 	ldr.w	pc, [sp], #8
 801095e:	bf00      	nop

08010960 <__aeabi_dcmple>:
 8010960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010964:	f7ff ffe0 	bl	8010928 <__aeabi_cdcmpeq>
 8010968:	bf94      	ite	ls
 801096a:	2001      	movls	r0, #1
 801096c:	2000      	movhi	r0, #0
 801096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010972:	bf00      	nop

08010974 <__aeabi_dcmpge>:
 8010974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010978:	f7ff ffce 	bl	8010918 <__aeabi_cdrcmple>
 801097c:	bf94      	ite	ls
 801097e:	2001      	movls	r0, #1
 8010980:	2000      	movhi	r0, #0
 8010982:	f85d fb08 	ldr.w	pc, [sp], #8
 8010986:	bf00      	nop

08010988 <__aeabi_dcmpgt>:
 8010988:	f84d ed08 	str.w	lr, [sp, #-8]!
 801098c:	f7ff ffc4 	bl	8010918 <__aeabi_cdrcmple>
 8010990:	bf34      	ite	cc
 8010992:	2001      	movcc	r0, #1
 8010994:	2000      	movcs	r0, #0
 8010996:	f85d fb08 	ldr.w	pc, [sp], #8
 801099a:	bf00      	nop

0801099c <__aeabi_dcmpun>:
 801099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80109a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80109a4:	d102      	bne.n	80109ac <__aeabi_dcmpun+0x10>
 80109a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80109aa:	d10a      	bne.n	80109c2 <__aeabi_dcmpun+0x26>
 80109ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80109b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80109b4:	d102      	bne.n	80109bc <__aeabi_dcmpun+0x20>
 80109b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80109ba:	d102      	bne.n	80109c2 <__aeabi_dcmpun+0x26>
 80109bc:	f04f 0000 	mov.w	r0, #0
 80109c0:	4770      	bx	lr
 80109c2:	f04f 0001 	mov.w	r0, #1
 80109c6:	4770      	bx	lr

080109c8 <__aeabi_d2iz>:
 80109c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80109cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80109d0:	d215      	bcs.n	80109fe <__aeabi_d2iz+0x36>
 80109d2:	d511      	bpl.n	80109f8 <__aeabi_d2iz+0x30>
 80109d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80109d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80109dc:	d912      	bls.n	8010a04 <__aeabi_d2iz+0x3c>
 80109de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80109e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80109e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80109ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80109ee:	fa23 f002 	lsr.w	r0, r3, r2
 80109f2:	bf18      	it	ne
 80109f4:	4240      	negne	r0, r0
 80109f6:	4770      	bx	lr
 80109f8:	f04f 0000 	mov.w	r0, #0
 80109fc:	4770      	bx	lr
 80109fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010a02:	d105      	bne.n	8010a10 <__aeabi_d2iz+0x48>
 8010a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010a08:	bf08      	it	eq
 8010a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010a0e:	4770      	bx	lr
 8010a10:	f04f 0000 	mov.w	r0, #0
 8010a14:	4770      	bx	lr
 8010a16:	bf00      	nop

08010a18 <__aeabi_d2uiz>:
 8010a18:	004a      	lsls	r2, r1, #1
 8010a1a:	d211      	bcs.n	8010a40 <__aeabi_d2uiz+0x28>
 8010a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010a20:	d211      	bcs.n	8010a46 <__aeabi_d2uiz+0x2e>
 8010a22:	d50d      	bpl.n	8010a40 <__aeabi_d2uiz+0x28>
 8010a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010a2c:	d40e      	bmi.n	8010a4c <__aeabi_d2uiz+0x34>
 8010a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8010a3e:	4770      	bx	lr
 8010a40:	f04f 0000 	mov.w	r0, #0
 8010a44:	4770      	bx	lr
 8010a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010a4a:	d102      	bne.n	8010a52 <__aeabi_d2uiz+0x3a>
 8010a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a50:	4770      	bx	lr
 8010a52:	f04f 0000 	mov.w	r0, #0
 8010a56:	4770      	bx	lr

08010a58 <__aeabi_d2f>:
 8010a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010a60:	bf24      	itt	cs
 8010a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010a6a:	d90d      	bls.n	8010a88 <__aeabi_d2f+0x30>
 8010a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010a80:	bf08      	it	eq
 8010a82:	f020 0001 	biceq.w	r0, r0, #1
 8010a86:	4770      	bx	lr
 8010a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010a8c:	d121      	bne.n	8010ad2 <__aeabi_d2f+0x7a>
 8010a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010a92:	bfbc      	itt	lt
 8010a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010a98:	4770      	bxlt	lr
 8010a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010aa2:	f1c2 0218 	rsb	r2, r2, #24
 8010aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8010aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8010aae:	fa20 f002 	lsr.w	r0, r0, r2
 8010ab2:	bf18      	it	ne
 8010ab4:	f040 0001 	orrne.w	r0, r0, #1
 8010ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010ac4:	ea40 000c 	orr.w	r0, r0, ip
 8010ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8010acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010ad0:	e7cc      	b.n	8010a6c <__aeabi_d2f+0x14>
 8010ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010ad6:	d107      	bne.n	8010ae8 <__aeabi_d2f+0x90>
 8010ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010adc:	bf1e      	ittt	ne
 8010ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010ae6:	4770      	bxne	lr
 8010ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop

08010af8 <__aeabi_uldivmod>:
 8010af8:	b953      	cbnz	r3, 8010b10 <__aeabi_uldivmod+0x18>
 8010afa:	b94a      	cbnz	r2, 8010b10 <__aeabi_uldivmod+0x18>
 8010afc:	2900      	cmp	r1, #0
 8010afe:	bf08      	it	eq
 8010b00:	2800      	cmpeq	r0, #0
 8010b02:	bf1c      	itt	ne
 8010b04:	f04f 31ff 	movne.w	r1, #4294967295
 8010b08:	f04f 30ff 	movne.w	r0, #4294967295
 8010b0c:	f000 b96e 	b.w	8010dec <__aeabi_idiv0>
 8010b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8010b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010b18:	f000 f806 	bl	8010b28 <__udivmoddi4>
 8010b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b24:	b004      	add	sp, #16
 8010b26:	4770      	bx	lr

08010b28 <__udivmoddi4>:
 8010b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b2c:	9d08      	ldr	r5, [sp, #32]
 8010b2e:	4604      	mov	r4, r0
 8010b30:	468c      	mov	ip, r1
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	f040 8083 	bne.w	8010c3e <__udivmoddi4+0x116>
 8010b38:	428a      	cmp	r2, r1
 8010b3a:	4617      	mov	r7, r2
 8010b3c:	d947      	bls.n	8010bce <__udivmoddi4+0xa6>
 8010b3e:	fab2 f282 	clz	r2, r2
 8010b42:	b142      	cbz	r2, 8010b56 <__udivmoddi4+0x2e>
 8010b44:	f1c2 0020 	rsb	r0, r2, #32
 8010b48:	fa24 f000 	lsr.w	r0, r4, r0
 8010b4c:	4091      	lsls	r1, r2
 8010b4e:	4097      	lsls	r7, r2
 8010b50:	ea40 0c01 	orr.w	ip, r0, r1
 8010b54:	4094      	lsls	r4, r2
 8010b56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8010b5a:	0c23      	lsrs	r3, r4, #16
 8010b5c:	fbbc f6f8 	udiv	r6, ip, r8
 8010b60:	fa1f fe87 	uxth.w	lr, r7
 8010b64:	fb08 c116 	mls	r1, r8, r6, ip
 8010b68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010b6c:	fb06 f10e 	mul.w	r1, r6, lr
 8010b70:	4299      	cmp	r1, r3
 8010b72:	d909      	bls.n	8010b88 <__udivmoddi4+0x60>
 8010b74:	18fb      	adds	r3, r7, r3
 8010b76:	f106 30ff 	add.w	r0, r6, #4294967295
 8010b7a:	f080 8119 	bcs.w	8010db0 <__udivmoddi4+0x288>
 8010b7e:	4299      	cmp	r1, r3
 8010b80:	f240 8116 	bls.w	8010db0 <__udivmoddi4+0x288>
 8010b84:	3e02      	subs	r6, #2
 8010b86:	443b      	add	r3, r7
 8010b88:	1a5b      	subs	r3, r3, r1
 8010b8a:	b2a4      	uxth	r4, r4
 8010b8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8010b90:	fb08 3310 	mls	r3, r8, r0, r3
 8010b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010b98:	fb00 fe0e 	mul.w	lr, r0, lr
 8010b9c:	45a6      	cmp	lr, r4
 8010b9e:	d909      	bls.n	8010bb4 <__udivmoddi4+0x8c>
 8010ba0:	193c      	adds	r4, r7, r4
 8010ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ba6:	f080 8105 	bcs.w	8010db4 <__udivmoddi4+0x28c>
 8010baa:	45a6      	cmp	lr, r4
 8010bac:	f240 8102 	bls.w	8010db4 <__udivmoddi4+0x28c>
 8010bb0:	3802      	subs	r0, #2
 8010bb2:	443c      	add	r4, r7
 8010bb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010bb8:	eba4 040e 	sub.w	r4, r4, lr
 8010bbc:	2600      	movs	r6, #0
 8010bbe:	b11d      	cbz	r5, 8010bc8 <__udivmoddi4+0xa0>
 8010bc0:	40d4      	lsrs	r4, r2
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e9c5 4300 	strd	r4, r3, [r5]
 8010bc8:	4631      	mov	r1, r6
 8010bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bce:	b902      	cbnz	r2, 8010bd2 <__udivmoddi4+0xaa>
 8010bd0:	deff      	udf	#255	; 0xff
 8010bd2:	fab2 f282 	clz	r2, r2
 8010bd6:	2a00      	cmp	r2, #0
 8010bd8:	d150      	bne.n	8010c7c <__udivmoddi4+0x154>
 8010bda:	1bcb      	subs	r3, r1, r7
 8010bdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010be0:	fa1f f887 	uxth.w	r8, r7
 8010be4:	2601      	movs	r6, #1
 8010be6:	fbb3 fcfe 	udiv	ip, r3, lr
 8010bea:	0c21      	lsrs	r1, r4, #16
 8010bec:	fb0e 331c 	mls	r3, lr, ip, r3
 8010bf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010bf4:	fb08 f30c 	mul.w	r3, r8, ip
 8010bf8:	428b      	cmp	r3, r1
 8010bfa:	d907      	bls.n	8010c0c <__udivmoddi4+0xe4>
 8010bfc:	1879      	adds	r1, r7, r1
 8010bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8010c02:	d202      	bcs.n	8010c0a <__udivmoddi4+0xe2>
 8010c04:	428b      	cmp	r3, r1
 8010c06:	f200 80e9 	bhi.w	8010ddc <__udivmoddi4+0x2b4>
 8010c0a:	4684      	mov	ip, r0
 8010c0c:	1ac9      	subs	r1, r1, r3
 8010c0e:	b2a3      	uxth	r3, r4
 8010c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8010c14:	fb0e 1110 	mls	r1, lr, r0, r1
 8010c18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8010c1c:	fb08 f800 	mul.w	r8, r8, r0
 8010c20:	45a0      	cmp	r8, r4
 8010c22:	d907      	bls.n	8010c34 <__udivmoddi4+0x10c>
 8010c24:	193c      	adds	r4, r7, r4
 8010c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c2a:	d202      	bcs.n	8010c32 <__udivmoddi4+0x10a>
 8010c2c:	45a0      	cmp	r8, r4
 8010c2e:	f200 80d9 	bhi.w	8010de4 <__udivmoddi4+0x2bc>
 8010c32:	4618      	mov	r0, r3
 8010c34:	eba4 0408 	sub.w	r4, r4, r8
 8010c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8010c3c:	e7bf      	b.n	8010bbe <__udivmoddi4+0x96>
 8010c3e:	428b      	cmp	r3, r1
 8010c40:	d909      	bls.n	8010c56 <__udivmoddi4+0x12e>
 8010c42:	2d00      	cmp	r5, #0
 8010c44:	f000 80b1 	beq.w	8010daa <__udivmoddi4+0x282>
 8010c48:	2600      	movs	r6, #0
 8010c4a:	e9c5 0100 	strd	r0, r1, [r5]
 8010c4e:	4630      	mov	r0, r6
 8010c50:	4631      	mov	r1, r6
 8010c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c56:	fab3 f683 	clz	r6, r3
 8010c5a:	2e00      	cmp	r6, #0
 8010c5c:	d14a      	bne.n	8010cf4 <__udivmoddi4+0x1cc>
 8010c5e:	428b      	cmp	r3, r1
 8010c60:	d302      	bcc.n	8010c68 <__udivmoddi4+0x140>
 8010c62:	4282      	cmp	r2, r0
 8010c64:	f200 80b8 	bhi.w	8010dd8 <__udivmoddi4+0x2b0>
 8010c68:	1a84      	subs	r4, r0, r2
 8010c6a:	eb61 0103 	sbc.w	r1, r1, r3
 8010c6e:	2001      	movs	r0, #1
 8010c70:	468c      	mov	ip, r1
 8010c72:	2d00      	cmp	r5, #0
 8010c74:	d0a8      	beq.n	8010bc8 <__udivmoddi4+0xa0>
 8010c76:	e9c5 4c00 	strd	r4, ip, [r5]
 8010c7a:	e7a5      	b.n	8010bc8 <__udivmoddi4+0xa0>
 8010c7c:	f1c2 0320 	rsb	r3, r2, #32
 8010c80:	fa20 f603 	lsr.w	r6, r0, r3
 8010c84:	4097      	lsls	r7, r2
 8010c86:	fa01 f002 	lsl.w	r0, r1, r2
 8010c8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010c8e:	40d9      	lsrs	r1, r3
 8010c90:	4330      	orrs	r0, r6
 8010c92:	0c03      	lsrs	r3, r0, #16
 8010c94:	fbb1 f6fe 	udiv	r6, r1, lr
 8010c98:	fa1f f887 	uxth.w	r8, r7
 8010c9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8010ca0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010ca4:	fb06 f108 	mul.w	r1, r6, r8
 8010ca8:	4299      	cmp	r1, r3
 8010caa:	fa04 f402 	lsl.w	r4, r4, r2
 8010cae:	d909      	bls.n	8010cc4 <__udivmoddi4+0x19c>
 8010cb0:	18fb      	adds	r3, r7, r3
 8010cb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8010cb6:	f080 808d 	bcs.w	8010dd4 <__udivmoddi4+0x2ac>
 8010cba:	4299      	cmp	r1, r3
 8010cbc:	f240 808a 	bls.w	8010dd4 <__udivmoddi4+0x2ac>
 8010cc0:	3e02      	subs	r6, #2
 8010cc2:	443b      	add	r3, r7
 8010cc4:	1a5b      	subs	r3, r3, r1
 8010cc6:	b281      	uxth	r1, r0
 8010cc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8010ccc:	fb0e 3310 	mls	r3, lr, r0, r3
 8010cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010cd4:	fb00 f308 	mul.w	r3, r0, r8
 8010cd8:	428b      	cmp	r3, r1
 8010cda:	d907      	bls.n	8010cec <__udivmoddi4+0x1c4>
 8010cdc:	1879      	adds	r1, r7, r1
 8010cde:	f100 3cff 	add.w	ip, r0, #4294967295
 8010ce2:	d273      	bcs.n	8010dcc <__udivmoddi4+0x2a4>
 8010ce4:	428b      	cmp	r3, r1
 8010ce6:	d971      	bls.n	8010dcc <__udivmoddi4+0x2a4>
 8010ce8:	3802      	subs	r0, #2
 8010cea:	4439      	add	r1, r7
 8010cec:	1acb      	subs	r3, r1, r3
 8010cee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8010cf2:	e778      	b.n	8010be6 <__udivmoddi4+0xbe>
 8010cf4:	f1c6 0c20 	rsb	ip, r6, #32
 8010cf8:	fa03 f406 	lsl.w	r4, r3, r6
 8010cfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8010d00:	431c      	orrs	r4, r3
 8010d02:	fa20 f70c 	lsr.w	r7, r0, ip
 8010d06:	fa01 f306 	lsl.w	r3, r1, r6
 8010d0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8010d0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8010d12:	431f      	orrs	r7, r3
 8010d14:	0c3b      	lsrs	r3, r7, #16
 8010d16:	fbb1 f9fe 	udiv	r9, r1, lr
 8010d1a:	fa1f f884 	uxth.w	r8, r4
 8010d1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8010d22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8010d26:	fb09 fa08 	mul.w	sl, r9, r8
 8010d2a:	458a      	cmp	sl, r1
 8010d2c:	fa02 f206 	lsl.w	r2, r2, r6
 8010d30:	fa00 f306 	lsl.w	r3, r0, r6
 8010d34:	d908      	bls.n	8010d48 <__udivmoddi4+0x220>
 8010d36:	1861      	adds	r1, r4, r1
 8010d38:	f109 30ff 	add.w	r0, r9, #4294967295
 8010d3c:	d248      	bcs.n	8010dd0 <__udivmoddi4+0x2a8>
 8010d3e:	458a      	cmp	sl, r1
 8010d40:	d946      	bls.n	8010dd0 <__udivmoddi4+0x2a8>
 8010d42:	f1a9 0902 	sub.w	r9, r9, #2
 8010d46:	4421      	add	r1, r4
 8010d48:	eba1 010a 	sub.w	r1, r1, sl
 8010d4c:	b2bf      	uxth	r7, r7
 8010d4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8010d52:	fb0e 1110 	mls	r1, lr, r0, r1
 8010d56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8010d5a:	fb00 f808 	mul.w	r8, r0, r8
 8010d5e:	45b8      	cmp	r8, r7
 8010d60:	d907      	bls.n	8010d72 <__udivmoddi4+0x24a>
 8010d62:	19e7      	adds	r7, r4, r7
 8010d64:	f100 31ff 	add.w	r1, r0, #4294967295
 8010d68:	d22e      	bcs.n	8010dc8 <__udivmoddi4+0x2a0>
 8010d6a:	45b8      	cmp	r8, r7
 8010d6c:	d92c      	bls.n	8010dc8 <__udivmoddi4+0x2a0>
 8010d6e:	3802      	subs	r0, #2
 8010d70:	4427      	add	r7, r4
 8010d72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010d76:	eba7 0708 	sub.w	r7, r7, r8
 8010d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8010d7e:	454f      	cmp	r7, r9
 8010d80:	46c6      	mov	lr, r8
 8010d82:	4649      	mov	r1, r9
 8010d84:	d31a      	bcc.n	8010dbc <__udivmoddi4+0x294>
 8010d86:	d017      	beq.n	8010db8 <__udivmoddi4+0x290>
 8010d88:	b15d      	cbz	r5, 8010da2 <__udivmoddi4+0x27a>
 8010d8a:	ebb3 020e 	subs.w	r2, r3, lr
 8010d8e:	eb67 0701 	sbc.w	r7, r7, r1
 8010d92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8010d96:	40f2      	lsrs	r2, r6
 8010d98:	ea4c 0202 	orr.w	r2, ip, r2
 8010d9c:	40f7      	lsrs	r7, r6
 8010d9e:	e9c5 2700 	strd	r2, r7, [r5]
 8010da2:	2600      	movs	r6, #0
 8010da4:	4631      	mov	r1, r6
 8010da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010daa:	462e      	mov	r6, r5
 8010dac:	4628      	mov	r0, r5
 8010dae:	e70b      	b.n	8010bc8 <__udivmoddi4+0xa0>
 8010db0:	4606      	mov	r6, r0
 8010db2:	e6e9      	b.n	8010b88 <__udivmoddi4+0x60>
 8010db4:	4618      	mov	r0, r3
 8010db6:	e6fd      	b.n	8010bb4 <__udivmoddi4+0x8c>
 8010db8:	4543      	cmp	r3, r8
 8010dba:	d2e5      	bcs.n	8010d88 <__udivmoddi4+0x260>
 8010dbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8010dc0:	eb69 0104 	sbc.w	r1, r9, r4
 8010dc4:	3801      	subs	r0, #1
 8010dc6:	e7df      	b.n	8010d88 <__udivmoddi4+0x260>
 8010dc8:	4608      	mov	r0, r1
 8010dca:	e7d2      	b.n	8010d72 <__udivmoddi4+0x24a>
 8010dcc:	4660      	mov	r0, ip
 8010dce:	e78d      	b.n	8010cec <__udivmoddi4+0x1c4>
 8010dd0:	4681      	mov	r9, r0
 8010dd2:	e7b9      	b.n	8010d48 <__udivmoddi4+0x220>
 8010dd4:	4666      	mov	r6, ip
 8010dd6:	e775      	b.n	8010cc4 <__udivmoddi4+0x19c>
 8010dd8:	4630      	mov	r0, r6
 8010dda:	e74a      	b.n	8010c72 <__udivmoddi4+0x14a>
 8010ddc:	f1ac 0c02 	sub.w	ip, ip, #2
 8010de0:	4439      	add	r1, r7
 8010de2:	e713      	b.n	8010c0c <__udivmoddi4+0xe4>
 8010de4:	3802      	subs	r0, #2
 8010de6:	443c      	add	r4, r7
 8010de8:	e724      	b.n	8010c34 <__udivmoddi4+0x10c>
 8010dea:	bf00      	nop

08010dec <__aeabi_idiv0>:
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop

08010df0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8010df0:	b480      	push	{r7}
 8010df2:	b085      	sub	sp, #20
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	60b9      	str	r1, [r7, #8]
 8010dfa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	4a07      	ldr	r2, [pc, #28]	; (8010e1c <vApplicationGetIdleTaskMemory+0x2c>)
 8010e00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	4a06      	ldr	r2, [pc, #24]	; (8010e20 <vApplicationGetIdleTaskMemory+0x30>)
 8010e06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2280      	movs	r2, #128	; 0x80
 8010e0c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8010e0e:	bf00      	nop
 8010e10:	3714      	adds	r7, #20
 8010e12:	46bd      	mov	sp, r7
 8010e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop
 8010e1c:	20000644 	.word	0x20000644
 8010e20:	20000698 	.word	0x20000698

08010e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010e24:	b5b0      	push	{r4, r5, r7, lr}
 8010e26:	b0a4      	sub	sp, #144	; 0x90
 8010e28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010e2a:	f001 faa9 	bl	8012380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010e2e:	f000 f895 	bl	8010f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010e32:	f000 fc43 	bl	80116bc <MX_GPIO_Init>
  MX_DMA_Init();
 8010e36:	f000 fc21 	bl	801167c <MX_DMA_Init>
  MX_ADC1_Init();
 8010e3a:	f000 f901 	bl	8011040 <MX_ADC1_Init>
  MX_I2C1_Init();
 8010e3e:	f000 f97f 	bl	8011140 <MX_I2C1_Init>
  MX_TIM2_Init();
 8010e42:	f000 f9ab 	bl	801119c <MX_TIM2_Init>
  MX_TIM3_Init();
 8010e46:	f000 f9f5 	bl	8011234 <MX_TIM3_Init>
  MX_TIM4_Init();
 8010e4a:	f000 fa41 	bl	80112d0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8010e4e:	f000 fa8d 	bl	801136c <MX_TIM5_Init>
  MX_TIM6_Init();
 8010e52:	f000 fad9 	bl	8011408 <MX_TIM6_Init>
  MX_TIM7_Init();
 8010e56:	f000 fb0d 	bl	8011474 <MX_TIM7_Init>
  MX_TIM8_Init();
 8010e5a:	f000 fb41 	bl	80114e0 <MX_TIM8_Init>
  MX_UART5_Init();
 8010e5e:	f000 fb8f 	bl	8011580 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8010e62:	f000 fbb7 	bl	80115d4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8010e66:	f000 fbdf 	bl	8011628 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8010e6a:	f012 fb67 	bl	802353c <MX_USB_DEVICE_Init>
  SM_ECUInit();
 8010e6e:	f00c f9e9 	bl	801d244 <SM_ECUInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8010e72:	4b30      	ldr	r3, [pc, #192]	; (8010f34 <main+0x110>)
 8010e74:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8010e78:	461d      	mov	r5, r3
 8010e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8010e86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010e8a:	2100      	movs	r1, #0
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f011 f8f1 	bl	8022074 <osThreadCreate>
 8010e92:	4603      	mov	r3, r0
 8010e94:	4a28      	ldr	r2, [pc, #160]	; (8010f38 <main+0x114>)
 8010e96:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityHigh, 0, 512);
 8010e98:	4b28      	ldr	r3, [pc, #160]	; (8010f3c <main+0x118>)
 8010e9a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8010e9e:	461d      	mov	r5, r3
 8010ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ea4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010ea8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 8010eac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010eb0:	2100      	movs	r1, #0
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f011 f8de 	bl	8022074 <osThreadCreate>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	4a21      	ldr	r2, [pc, #132]	; (8010f40 <main+0x11c>)
 8010ebc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task50ms */
  osThreadDef(Task50ms, Task_50ms, osPriorityHigh, 0, 512);
 8010ebe:	4b21      	ldr	r3, [pc, #132]	; (8010f44 <main+0x120>)
 8010ec0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8010ec4:	461d      	mov	r5, r3
 8010ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010eca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task50msHandle = osThreadCreate(osThread(Task50ms), NULL);
 8010ed2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010ed6:	2100      	movs	r1, #0
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f011 f8cb 	bl	8022074 <osThreadCreate>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	4a19      	ldr	r2, [pc, #100]	; (8010f48 <main+0x124>)
 8010ee2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskStateMachin */
  osThreadDef(TaskStateMachin, Task_StateMachine, osPriorityHigh, 0, 512);
 8010ee4:	4b19      	ldr	r3, [pc, #100]	; (8010f4c <main+0x128>)
 8010ee6:	f107 0420 	add.w	r4, r7, #32
 8010eea:	461d      	mov	r5, r3
 8010eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010ef4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskStateMachinHandle = osThreadCreate(osThread(TaskStateMachin), NULL);
 8010ef8:	f107 0320 	add.w	r3, r7, #32
 8010efc:	2100      	movs	r1, #0
 8010efe:	4618      	mov	r0, r3
 8010f00:	f011 f8b8 	bl	8022074 <osThreadCreate>
 8010f04:	4603      	mov	r3, r0
 8010f06:	4a12      	ldr	r2, [pc, #72]	; (8010f50 <main+0x12c>)
 8010f08:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDisplay */
  osThreadDef(TaskDisplay, Task_Display, osPriorityHigh, 0, 512);
 8010f0a:	4b12      	ldr	r3, [pc, #72]	; (8010f54 <main+0x130>)
 8010f0c:	1d3c      	adds	r4, r7, #4
 8010f0e:	461d      	mov	r5, r3
 8010f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010f18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDisplayHandle = osThreadCreate(osThread(TaskDisplay), NULL);
 8010f1c:	1d3b      	adds	r3, r7, #4
 8010f1e:	2100      	movs	r1, #0
 8010f20:	4618      	mov	r0, r3
 8010f22:	f011 f8a7 	bl	8022074 <osThreadCreate>
 8010f26:	4603      	mov	r3, r0
 8010f28:	4a0b      	ldr	r2, [pc, #44]	; (8010f58 <main+0x134>)
 8010f2a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8010f2c:	f011 f89b 	bl	8022066 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8010f30:	e7fe      	b.n	8010f30 <main+0x10c>
 8010f32:	bf00      	nop
 8010f34:	08026ed8 	.word	0x08026ed8
 8010f38:	200048cc 	.word	0x200048cc
 8010f3c:	08026ef4 	.word	0x08026ef4
 8010f40:	20004b1c 	.word	0x20004b1c
 8010f44:	08026f10 	.word	0x08026f10
 8010f48:	200049fc 	.word	0x200049fc
 8010f4c:	08026f2c 	.word	0x08026f2c
 8010f50:	200048d0 	.word	0x200048d0
 8010f54:	08026f48 	.word	0x08026f48
 8010f58:	20004bc4 	.word	0x20004bc4

08010f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b094      	sub	sp, #80	; 0x50
 8010f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010f62:	f107 031c 	add.w	r3, r7, #28
 8010f66:	2234      	movs	r2, #52	; 0x34
 8010f68:	2100      	movs	r1, #0
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f013 f904 	bl	8024178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010f70:	f107 0308 	add.w	r3, r7, #8
 8010f74:	2200      	movs	r2, #0
 8010f76:	601a      	str	r2, [r3, #0]
 8010f78:	605a      	str	r2, [r3, #4]
 8010f7a:	609a      	str	r2, [r3, #8]
 8010f7c:	60da      	str	r2, [r3, #12]
 8010f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010f80:	2300      	movs	r3, #0
 8010f82:	607b      	str	r3, [r7, #4]
 8010f84:	4b2c      	ldr	r3, [pc, #176]	; (8011038 <SystemClock_Config+0xdc>)
 8010f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f88:	4a2b      	ldr	r2, [pc, #172]	; (8011038 <SystemClock_Config+0xdc>)
 8010f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8010f90:	4b29      	ldr	r3, [pc, #164]	; (8011038 <SystemClock_Config+0xdc>)
 8010f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010f98:	607b      	str	r3, [r7, #4]
 8010f9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	603b      	str	r3, [r7, #0]
 8010fa0:	4b26      	ldr	r3, [pc, #152]	; (801103c <SystemClock_Config+0xe0>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	4a25      	ldr	r2, [pc, #148]	; (801103c <SystemClock_Config+0xe0>)
 8010fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010faa:	6013      	str	r3, [r2, #0]
 8010fac:	4b23      	ldr	r3, [pc, #140]	; (801103c <SystemClock_Config+0xe0>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010fb4:	603b      	str	r3, [r7, #0]
 8010fb6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010fc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010fc2:	2302      	movs	r3, #2
 8010fc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010fca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8010fcc:	2304      	movs	r3, #4
 8010fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8010fd0:	23b4      	movs	r3, #180	; 0xb4
 8010fd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010fd4:	2302      	movs	r3, #2
 8010fd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8010fd8:	2303      	movs	r3, #3
 8010fda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8010fdc:	2302      	movs	r3, #2
 8010fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010fe0:	f107 031c 	add.w	r3, r7, #28
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f005 ff29 	bl	8016e3c <HAL_RCC_OscConfig>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d001      	beq.n	8010ff4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8010ff0:	f000 fd54 	bl	8011a9c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8010ff4:	f005 f8aa 	bl	801614c <HAL_PWREx_EnableOverDrive>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d001      	beq.n	8011002 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8010ffe:	f000 fd4d 	bl	8011a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011002:	230f      	movs	r3, #15
 8011004:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011006:	2302      	movs	r3, #2
 8011008:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801100a:	2300      	movs	r3, #0
 801100c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801100e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8011012:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8011014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011018:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801101a:	f107 0308 	add.w	r3, r7, #8
 801101e:	2105      	movs	r1, #5
 8011020:	4618      	mov	r0, r3
 8011022:	f005 f8e3 	bl	80161ec <HAL_RCC_ClockConfig>
 8011026:	4603      	mov	r3, r0
 8011028:	2b00      	cmp	r3, #0
 801102a:	d001      	beq.n	8011030 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 801102c:	f000 fd36 	bl	8011a9c <Error_Handler>
  }
}
 8011030:	bf00      	nop
 8011032:	3750      	adds	r7, #80	; 0x50
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	40023800 	.word	0x40023800
 801103c:	40007000 	.word	0x40007000

08011040 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8011046:	463b      	mov	r3, r7
 8011048:	2200      	movs	r2, #0
 801104a:	601a      	str	r2, [r3, #0]
 801104c:	605a      	str	r2, [r3, #4]
 801104e:	609a      	str	r2, [r3, #8]
 8011050:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8011052:	4b39      	ldr	r3, [pc, #228]	; (8011138 <MX_ADC1_Init+0xf8>)
 8011054:	4a39      	ldr	r2, [pc, #228]	; (801113c <MX_ADC1_Init+0xfc>)
 8011056:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8011058:	4b37      	ldr	r3, [pc, #220]	; (8011138 <MX_ADC1_Init+0xf8>)
 801105a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801105e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8011060:	4b35      	ldr	r3, [pc, #212]	; (8011138 <MX_ADC1_Init+0xf8>)
 8011062:	2200      	movs	r2, #0
 8011064:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8011066:	4b34      	ldr	r3, [pc, #208]	; (8011138 <MX_ADC1_Init+0xf8>)
 8011068:	2201      	movs	r2, #1
 801106a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 801106c:	4b32      	ldr	r3, [pc, #200]	; (8011138 <MX_ADC1_Init+0xf8>)
 801106e:	2200      	movs	r2, #0
 8011070:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8011072:	4b31      	ldr	r3, [pc, #196]	; (8011138 <MX_ADC1_Init+0xf8>)
 8011074:	2200      	movs	r2, #0
 8011076:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801107a:	4b2f      	ldr	r3, [pc, #188]	; (8011138 <MX_ADC1_Init+0xf8>)
 801107c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011080:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8011082:	4b2d      	ldr	r3, [pc, #180]	; (8011138 <MX_ADC1_Init+0xf8>)
 8011084:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8011088:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801108a:	4b2b      	ldr	r3, [pc, #172]	; (8011138 <MX_ADC1_Init+0xf8>)
 801108c:	2200      	movs	r2, #0
 801108e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8011090:	4b29      	ldr	r3, [pc, #164]	; (8011138 <MX_ADC1_Init+0xf8>)
 8011092:	2204      	movs	r2, #4
 8011094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8011096:	4b28      	ldr	r3, [pc, #160]	; (8011138 <MX_ADC1_Init+0xf8>)
 8011098:	2201      	movs	r2, #1
 801109a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801109e:	4b26      	ldr	r3, [pc, #152]	; (8011138 <MX_ADC1_Init+0xf8>)
 80110a0:	2201      	movs	r2, #1
 80110a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80110a4:	4824      	ldr	r0, [pc, #144]	; (8011138 <MX_ADC1_Init+0xf8>)
 80110a6:	f001 f9d1 	bl	801244c <HAL_ADC_Init>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d001      	beq.n	80110b4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80110b0:	f000 fcf4 	bl	8011a9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80110b4:	2300      	movs	r3, #0
 80110b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80110b8:	2301      	movs	r3, #1
 80110ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80110bc:	2300      	movs	r3, #0
 80110be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80110c0:	463b      	mov	r3, r7
 80110c2:	4619      	mov	r1, r3
 80110c4:	481c      	ldr	r0, [pc, #112]	; (8011138 <MX_ADC1_Init+0xf8>)
 80110c6:	f001 fb29 	bl	801271c <HAL_ADC_ConfigChannel>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d001      	beq.n	80110d4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80110d0:	f000 fce4 	bl	8011a9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80110d4:	2301      	movs	r3, #1
 80110d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80110d8:	2302      	movs	r3, #2
 80110da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80110dc:	2301      	movs	r3, #1
 80110de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80110e0:	463b      	mov	r3, r7
 80110e2:	4619      	mov	r1, r3
 80110e4:	4814      	ldr	r0, [pc, #80]	; (8011138 <MX_ADC1_Init+0xf8>)
 80110e6:	f001 fb19 	bl	801271c <HAL_ADC_ConfigChannel>
 80110ea:	4603      	mov	r3, r0
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d001      	beq.n	80110f4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80110f0:	f000 fcd4 	bl	8011a9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80110f4:	2302      	movs	r3, #2
 80110f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80110f8:	2303      	movs	r3, #3
 80110fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80110fc:	2300      	movs	r3, #0
 80110fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011100:	463b      	mov	r3, r7
 8011102:	4619      	mov	r1, r3
 8011104:	480c      	ldr	r0, [pc, #48]	; (8011138 <MX_ADC1_Init+0xf8>)
 8011106:	f001 fb09 	bl	801271c <HAL_ADC_ConfigChannel>
 801110a:	4603      	mov	r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	d001      	beq.n	8011114 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8011110:	f000 fcc4 	bl	8011a9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8011114:	2303      	movs	r3, #3
 8011116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8011118:	2304      	movs	r3, #4
 801111a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801111c:	463b      	mov	r3, r7
 801111e:	4619      	mov	r1, r3
 8011120:	4805      	ldr	r0, [pc, #20]	; (8011138 <MX_ADC1_Init+0xf8>)
 8011122:	f001 fafb 	bl	801271c <HAL_ADC_ConfigChannel>
 8011126:	4603      	mov	r3, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	d001      	beq.n	8011130 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 801112c:	f000 fcb6 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8011130:	bf00      	nop
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	20004ad4 	.word	0x20004ad4
 801113c:	40012000 	.word	0x40012000

08011140 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011144:	4b13      	ldr	r3, [pc, #76]	; (8011194 <MX_I2C1_Init+0x54>)
 8011146:	4a14      	ldr	r2, [pc, #80]	; (8011198 <MX_I2C1_Init+0x58>)
 8011148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 801114a:	4b12      	ldr	r3, [pc, #72]	; (8011194 <MX_I2C1_Init+0x54>)
 801114c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011150:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011152:	4b10      	ldr	r3, [pc, #64]	; (8011194 <MX_I2C1_Init+0x54>)
 8011154:	2200      	movs	r2, #0
 8011156:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011158:	4b0e      	ldr	r3, [pc, #56]	; (8011194 <MX_I2C1_Init+0x54>)
 801115a:	2200      	movs	r2, #0
 801115c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801115e:	4b0d      	ldr	r3, [pc, #52]	; (8011194 <MX_I2C1_Init+0x54>)
 8011160:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011164:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011166:	4b0b      	ldr	r3, [pc, #44]	; (8011194 <MX_I2C1_Init+0x54>)
 8011168:	2200      	movs	r2, #0
 801116a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801116c:	4b09      	ldr	r3, [pc, #36]	; (8011194 <MX_I2C1_Init+0x54>)
 801116e:	2200      	movs	r2, #0
 8011170:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011172:	4b08      	ldr	r3, [pc, #32]	; (8011194 <MX_I2C1_Init+0x54>)
 8011174:	2200      	movs	r2, #0
 8011176:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011178:	4b06      	ldr	r3, [pc, #24]	; (8011194 <MX_I2C1_Init+0x54>)
 801117a:	2200      	movs	r2, #0
 801117c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801117e:	4805      	ldr	r0, [pc, #20]	; (8011194 <MX_I2C1_Init+0x54>)
 8011180:	f002 fe56 	bl	8013e30 <HAL_I2C_Init>
 8011184:	4603      	mov	r3, r0
 8011186:	2b00      	cmp	r3, #0
 8011188:	d001      	beq.n	801118e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 801118a:	f000 fc87 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801118e:	bf00      	nop
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	200049a8 	.word	0x200049a8
 8011198:	40005400 	.word	0x40005400

0801119c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b086      	sub	sp, #24
 80111a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80111a2:	f107 0308 	add.w	r3, r7, #8
 80111a6:	2200      	movs	r2, #0
 80111a8:	601a      	str	r2, [r3, #0]
 80111aa:	605a      	str	r2, [r3, #4]
 80111ac:	609a      	str	r2, [r3, #8]
 80111ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80111b0:	463b      	mov	r3, r7
 80111b2:	2200      	movs	r2, #0
 80111b4:	601a      	str	r2, [r3, #0]
 80111b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80111b8:	4b1d      	ldr	r3, [pc, #116]	; (8011230 <MX_TIM2_Init+0x94>)
 80111ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80111be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80111c0:	4b1b      	ldr	r3, [pc, #108]	; (8011230 <MX_TIM2_Init+0x94>)
 80111c2:	2203      	movs	r2, #3
 80111c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80111c6:	4b1a      	ldr	r3, [pc, #104]	; (8011230 <MX_TIM2_Init+0x94>)
 80111c8:	2200      	movs	r2, #0
 80111ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2250;
 80111cc:	4b18      	ldr	r3, [pc, #96]	; (8011230 <MX_TIM2_Init+0x94>)
 80111ce:	f640 02ca 	movw	r2, #2250	; 0x8ca
 80111d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80111d4:	4b16      	ldr	r3, [pc, #88]	; (8011230 <MX_TIM2_Init+0x94>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80111da:	4b15      	ldr	r3, [pc, #84]	; (8011230 <MX_TIM2_Init+0x94>)
 80111dc:	2200      	movs	r2, #0
 80111de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80111e0:	4813      	ldr	r0, [pc, #76]	; (8011230 <MX_TIM2_Init+0x94>)
 80111e2:	f006 f8c9 	bl	8017378 <HAL_TIM_Base_Init>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d001      	beq.n	80111f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80111ec:	f000 fc56 	bl	8011a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80111f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80111f6:	f107 0308 	add.w	r3, r7, #8
 80111fa:	4619      	mov	r1, r3
 80111fc:	480c      	ldr	r0, [pc, #48]	; (8011230 <MX_TIM2_Init+0x94>)
 80111fe:	f006 faeb 	bl	80177d8 <HAL_TIM_ConfigClockSource>
 8011202:	4603      	mov	r3, r0
 8011204:	2b00      	cmp	r3, #0
 8011206:	d001      	beq.n	801120c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8011208:	f000 fc48 	bl	8011a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801120c:	2320      	movs	r3, #32
 801120e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011210:	2300      	movs	r3, #0
 8011212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8011214:	463b      	mov	r3, r7
 8011216:	4619      	mov	r1, r3
 8011218:	4805      	ldr	r0, [pc, #20]	; (8011230 <MX_TIM2_Init+0x94>)
 801121a:	f006 fd07 	bl	8017c2c <HAL_TIMEx_MasterConfigSynchronization>
 801121e:	4603      	mov	r3, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	d001      	beq.n	8011228 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8011224:	f000 fc3a 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8011228:	bf00      	nop
 801122a:	3718      	adds	r7, #24
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	20004c10 	.word	0x20004c10

08011234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b086      	sub	sp, #24
 8011238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801123a:	f107 0308 	add.w	r3, r7, #8
 801123e:	2200      	movs	r2, #0
 8011240:	601a      	str	r2, [r3, #0]
 8011242:	605a      	str	r2, [r3, #4]
 8011244:	609a      	str	r2, [r3, #8]
 8011246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011248:	463b      	mov	r3, r7
 801124a:	2200      	movs	r2, #0
 801124c:	601a      	str	r2, [r3, #0]
 801124e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8011250:	4b1d      	ldr	r3, [pc, #116]	; (80112c8 <MX_TIM3_Init+0x94>)
 8011252:	4a1e      	ldr	r2, [pc, #120]	; (80112cc <MX_TIM3_Init+0x98>)
 8011254:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8011256:	4b1c      	ldr	r3, [pc, #112]	; (80112c8 <MX_TIM3_Init+0x94>)
 8011258:	2201      	movs	r2, #1
 801125a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801125c:	4b1a      	ldr	r3, [pc, #104]	; (80112c8 <MX_TIM3_Init+0x94>)
 801125e:	2200      	movs	r2, #0
 8011260:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 45000;
 8011262:	4b19      	ldr	r3, [pc, #100]	; (80112c8 <MX_TIM3_Init+0x94>)
 8011264:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8011268:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801126a:	4b17      	ldr	r3, [pc, #92]	; (80112c8 <MX_TIM3_Init+0x94>)
 801126c:	2200      	movs	r2, #0
 801126e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011270:	4b15      	ldr	r3, [pc, #84]	; (80112c8 <MX_TIM3_Init+0x94>)
 8011272:	2200      	movs	r2, #0
 8011274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8011276:	4814      	ldr	r0, [pc, #80]	; (80112c8 <MX_TIM3_Init+0x94>)
 8011278:	f006 f87e 	bl	8017378 <HAL_TIM_Base_Init>
 801127c:	4603      	mov	r3, r0
 801127e:	2b00      	cmp	r3, #0
 8011280:	d001      	beq.n	8011286 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8011282:	f000 fc0b 	bl	8011a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801128a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801128c:	f107 0308 	add.w	r3, r7, #8
 8011290:	4619      	mov	r1, r3
 8011292:	480d      	ldr	r0, [pc, #52]	; (80112c8 <MX_TIM3_Init+0x94>)
 8011294:	f006 faa0 	bl	80177d8 <HAL_TIM_ConfigClockSource>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	d001      	beq.n	80112a2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 801129e:	f000 fbfd 	bl	8011a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80112a2:	2300      	movs	r3, #0
 80112a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80112a6:	2300      	movs	r3, #0
 80112a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80112aa:	463b      	mov	r3, r7
 80112ac:	4619      	mov	r1, r3
 80112ae:	4806      	ldr	r0, [pc, #24]	; (80112c8 <MX_TIM3_Init+0x94>)
 80112b0:	f006 fcbc 	bl	8017c2c <HAL_TIMEx_MasterConfigSynchronization>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d001      	beq.n	80112be <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80112ba:	f000 fbef 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80112be:	bf00      	nop
 80112c0:	3718      	adds	r7, #24
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	20004a48 	.word	0x20004a48
 80112cc:	40000400 	.word	0x40000400

080112d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b086      	sub	sp, #24
 80112d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80112d6:	f107 0308 	add.w	r3, r7, #8
 80112da:	2200      	movs	r2, #0
 80112dc:	601a      	str	r2, [r3, #0]
 80112de:	605a      	str	r2, [r3, #4]
 80112e0:	609a      	str	r2, [r3, #8]
 80112e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80112e4:	463b      	mov	r3, r7
 80112e6:	2200      	movs	r2, #0
 80112e8:	601a      	str	r2, [r3, #0]
 80112ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80112ec:	4b1d      	ldr	r3, [pc, #116]	; (8011364 <MX_TIM4_Init+0x94>)
 80112ee:	4a1e      	ldr	r2, [pc, #120]	; (8011368 <MX_TIM4_Init+0x98>)
 80112f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80112f2:	4b1c      	ldr	r3, [pc, #112]	; (8011364 <MX_TIM4_Init+0x94>)
 80112f4:	224f      	movs	r2, #79	; 0x4f
 80112f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80112f8:	4b1a      	ldr	r3, [pc, #104]	; (8011364 <MX_TIM4_Init+0x94>)
 80112fa:	2200      	movs	r2, #0
 80112fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80112fe:	4b19      	ldr	r3, [pc, #100]	; (8011364 <MX_TIM4_Init+0x94>)
 8011300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011304:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011306:	4b17      	ldr	r3, [pc, #92]	; (8011364 <MX_TIM4_Init+0x94>)
 8011308:	2200      	movs	r2, #0
 801130a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801130c:	4b15      	ldr	r3, [pc, #84]	; (8011364 <MX_TIM4_Init+0x94>)
 801130e:	2200      	movs	r2, #0
 8011310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8011312:	4814      	ldr	r0, [pc, #80]	; (8011364 <MX_TIM4_Init+0x94>)
 8011314:	f006 f830 	bl	8017378 <HAL_TIM_Base_Init>
 8011318:	4603      	mov	r3, r0
 801131a:	2b00      	cmp	r3, #0
 801131c:	d001      	beq.n	8011322 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 801131e:	f000 fbbd 	bl	8011a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8011328:	f107 0308 	add.w	r3, r7, #8
 801132c:	4619      	mov	r1, r3
 801132e:	480d      	ldr	r0, [pc, #52]	; (8011364 <MX_TIM4_Init+0x94>)
 8011330:	f006 fa52 	bl	80177d8 <HAL_TIM_ConfigClockSource>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d001      	beq.n	801133e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 801133a:	f000 fbaf 	bl	8011a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801133e:	2300      	movs	r3, #0
 8011340:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011342:	2300      	movs	r3, #0
 8011344:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8011346:	463b      	mov	r3, r7
 8011348:	4619      	mov	r1, r3
 801134a:	4806      	ldr	r0, [pc, #24]	; (8011364 <MX_TIM4_Init+0x94>)
 801134c:	f006 fc6e 	bl	8017c2c <HAL_TIMEx_MasterConfigSynchronization>
 8011350:	4603      	mov	r3, r0
 8011352:	2b00      	cmp	r3, #0
 8011354:	d001      	beq.n	801135a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8011356:	f000 fba1 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 801135a:	bf00      	nop
 801135c:	3718      	adds	r7, #24
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	2000491c 	.word	0x2000491c
 8011368:	40000800 	.word	0x40000800

0801136c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b086      	sub	sp, #24
 8011370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011372:	f107 0308 	add.w	r3, r7, #8
 8011376:	2200      	movs	r2, #0
 8011378:	601a      	str	r2, [r3, #0]
 801137a:	605a      	str	r2, [r3, #4]
 801137c:	609a      	str	r2, [r3, #8]
 801137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011380:	463b      	mov	r3, r7
 8011382:	2200      	movs	r2, #0
 8011384:	601a      	str	r2, [r3, #0]
 8011386:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8011388:	4b1d      	ldr	r3, [pc, #116]	; (8011400 <MX_TIM5_Init+0x94>)
 801138a:	4a1e      	ldr	r2, [pc, #120]	; (8011404 <MX_TIM5_Init+0x98>)
 801138c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 89;
 801138e:	4b1c      	ldr	r3, [pc, #112]	; (8011400 <MX_TIM5_Init+0x94>)
 8011390:	2259      	movs	r2, #89	; 0x59
 8011392:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011394:	4b1a      	ldr	r3, [pc, #104]	; (8011400 <MX_TIM5_Init+0x94>)
 8011396:	2200      	movs	r2, #0
 8011398:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 801139a:	4b19      	ldr	r3, [pc, #100]	; (8011400 <MX_TIM5_Init+0x94>)
 801139c:	f04f 32ff 	mov.w	r2, #4294967295
 80113a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80113a2:	4b17      	ldr	r3, [pc, #92]	; (8011400 <MX_TIM5_Init+0x94>)
 80113a4:	2200      	movs	r2, #0
 80113a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80113a8:	4b15      	ldr	r3, [pc, #84]	; (8011400 <MX_TIM5_Init+0x94>)
 80113aa:	2200      	movs	r2, #0
 80113ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80113ae:	4814      	ldr	r0, [pc, #80]	; (8011400 <MX_TIM5_Init+0x94>)
 80113b0:	f005 ffe2 	bl	8017378 <HAL_TIM_Base_Init>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d001      	beq.n	80113be <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80113ba:	f000 fb6f 	bl	8011a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80113be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80113c4:	f107 0308 	add.w	r3, r7, #8
 80113c8:	4619      	mov	r1, r3
 80113ca:	480d      	ldr	r0, [pc, #52]	; (8011400 <MX_TIM5_Init+0x94>)
 80113cc:	f006 fa04 	bl	80177d8 <HAL_TIM_ConfigClockSource>
 80113d0:	4603      	mov	r3, r0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d001      	beq.n	80113da <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80113d6:	f000 fb61 	bl	8011a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80113da:	2300      	movs	r3, #0
 80113dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80113de:	2300      	movs	r3, #0
 80113e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80113e2:	463b      	mov	r3, r7
 80113e4:	4619      	mov	r1, r3
 80113e6:	4806      	ldr	r0, [pc, #24]	; (8011400 <MX_TIM5_Init+0x94>)
 80113e8:	f006 fc20 	bl	8017c2c <HAL_TIMEx_MasterConfigSynchronization>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d001      	beq.n	80113f6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80113f2:	f000 fb53 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80113f6:	bf00      	nop
 80113f8:	3718      	adds	r7, #24
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	20004a00 	.word	0x20004a00
 8011404:	40000c00 	.word	0x40000c00

08011408 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801140e:	463b      	mov	r3, r7
 8011410:	2200      	movs	r2, #0
 8011412:	601a      	str	r2, [r3, #0]
 8011414:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8011416:	4b15      	ldr	r3, [pc, #84]	; (801146c <MX_TIM6_Init+0x64>)
 8011418:	4a15      	ldr	r2, [pc, #84]	; (8011470 <MX_TIM6_Init+0x68>)
 801141a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 801141c:	4b13      	ldr	r3, [pc, #76]	; (801146c <MX_TIM6_Init+0x64>)
 801141e:	2259      	movs	r2, #89	; 0x59
 8011420:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011422:	4b12      	ldr	r3, [pc, #72]	; (801146c <MX_TIM6_Init+0x64>)
 8011424:	2200      	movs	r2, #0
 8011426:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8011428:	4b10      	ldr	r3, [pc, #64]	; (801146c <MX_TIM6_Init+0x64>)
 801142a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801142e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011430:	4b0e      	ldr	r3, [pc, #56]	; (801146c <MX_TIM6_Init+0x64>)
 8011432:	2200      	movs	r2, #0
 8011434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8011436:	480d      	ldr	r0, [pc, #52]	; (801146c <MX_TIM6_Init+0x64>)
 8011438:	f005 ff9e 	bl	8017378 <HAL_TIM_Base_Init>
 801143c:	4603      	mov	r3, r0
 801143e:	2b00      	cmp	r3, #0
 8011440:	d001      	beq.n	8011446 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8011442:	f000 fb2b 	bl	8011a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011446:	2300      	movs	r3, #0
 8011448:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801144a:	2300      	movs	r3, #0
 801144c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801144e:	463b      	mov	r3, r7
 8011450:	4619      	mov	r1, r3
 8011452:	4806      	ldr	r0, [pc, #24]	; (801146c <MX_TIM6_Init+0x64>)
 8011454:	f006 fbea 	bl	8017c2c <HAL_TIMEx_MasterConfigSynchronization>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	d001      	beq.n	8011462 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 801145e:	f000 fb1d 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8011462:	bf00      	nop
 8011464:	3708      	adds	r7, #8
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	20004bc8 	.word	0x20004bc8
 8011470:	40001000 	.word	0x40001000

08011474 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801147a:	463b      	mov	r3, r7
 801147c:	2200      	movs	r2, #0
 801147e:	601a      	str	r2, [r3, #0]
 8011480:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8011482:	4b15      	ldr	r3, [pc, #84]	; (80114d8 <MX_TIM7_Init+0x64>)
 8011484:	4a15      	ldr	r2, [pc, #84]	; (80114dc <MX_TIM7_Init+0x68>)
 8011486:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8011488:	4b13      	ldr	r3, [pc, #76]	; (80114d8 <MX_TIM7_Init+0x64>)
 801148a:	2259      	movs	r2, #89	; 0x59
 801148c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801148e:	4b12      	ldr	r3, [pc, #72]	; (80114d8 <MX_TIM7_Init+0x64>)
 8011490:	2200      	movs	r2, #0
 8011492:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8011494:	4b10      	ldr	r3, [pc, #64]	; (80114d8 <MX_TIM7_Init+0x64>)
 8011496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801149a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801149c:	4b0e      	ldr	r3, [pc, #56]	; (80114d8 <MX_TIM7_Init+0x64>)
 801149e:	2200      	movs	r2, #0
 80114a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80114a2:	480d      	ldr	r0, [pc, #52]	; (80114d8 <MX_TIM7_Init+0x64>)
 80114a4:	f005 ff68 	bl	8017378 <HAL_TIM_Base_Init>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d001      	beq.n	80114b2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80114ae:	f000 faf5 	bl	8011a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80114b2:	2300      	movs	r3, #0
 80114b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80114b6:	2300      	movs	r3, #0
 80114b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80114ba:	463b      	mov	r3, r7
 80114bc:	4619      	mov	r1, r3
 80114be:	4806      	ldr	r0, [pc, #24]	; (80114d8 <MX_TIM7_Init+0x64>)
 80114c0:	f006 fbb4 	bl	8017c2c <HAL_TIMEx_MasterConfigSynchronization>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d001      	beq.n	80114ce <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80114ca:	f000 fae7 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80114ce:	bf00      	nop
 80114d0:	3708      	adds	r7, #8
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	20004c58 	.word	0x20004c58
 80114dc:	40001400 	.word	0x40001400

080114e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80114e6:	f107 0308 	add.w	r3, r7, #8
 80114ea:	2200      	movs	r2, #0
 80114ec:	601a      	str	r2, [r3, #0]
 80114ee:	605a      	str	r2, [r3, #4]
 80114f0:	609a      	str	r2, [r3, #8]
 80114f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80114f4:	463b      	mov	r3, r7
 80114f6:	2200      	movs	r2, #0
 80114f8:	601a      	str	r2, [r3, #0]
 80114fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80114fc:	4b1e      	ldr	r3, [pc, #120]	; (8011578 <MX_TIM8_Init+0x98>)
 80114fe:	4a1f      	ldr	r2, [pc, #124]	; (801157c <MX_TIM8_Init+0x9c>)
 8011500:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 8011502:	4b1d      	ldr	r3, [pc, #116]	; (8011578 <MX_TIM8_Init+0x98>)
 8011504:	22b3      	movs	r2, #179	; 0xb3
 8011506:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011508:	4b1b      	ldr	r3, [pc, #108]	; (8011578 <MX_TIM8_Init+0x98>)
 801150a:	2200      	movs	r2, #0
 801150c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 801150e:	4b1a      	ldr	r3, [pc, #104]	; (8011578 <MX_TIM8_Init+0x98>)
 8011510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011514:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011516:	4b18      	ldr	r3, [pc, #96]	; (8011578 <MX_TIM8_Init+0x98>)
 8011518:	2200      	movs	r2, #0
 801151a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 801151c:	4b16      	ldr	r3, [pc, #88]	; (8011578 <MX_TIM8_Init+0x98>)
 801151e:	2200      	movs	r2, #0
 8011520:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011522:	4b15      	ldr	r3, [pc, #84]	; (8011578 <MX_TIM8_Init+0x98>)
 8011524:	2200      	movs	r2, #0
 8011526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8011528:	4813      	ldr	r0, [pc, #76]	; (8011578 <MX_TIM8_Init+0x98>)
 801152a:	f005 ff25 	bl	8017378 <HAL_TIM_Base_Init>
 801152e:	4603      	mov	r3, r0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d001      	beq.n	8011538 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8011534:	f000 fab2 	bl	8011a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801153c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801153e:	f107 0308 	add.w	r3, r7, #8
 8011542:	4619      	mov	r1, r3
 8011544:	480c      	ldr	r0, [pc, #48]	; (8011578 <MX_TIM8_Init+0x98>)
 8011546:	f006 f947 	bl	80177d8 <HAL_TIM_ConfigClockSource>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d001      	beq.n	8011554 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8011550:	f000 faa4 	bl	8011a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011554:	2300      	movs	r3, #0
 8011556:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011558:	2300      	movs	r3, #0
 801155a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801155c:	463b      	mov	r3, r7
 801155e:	4619      	mov	r1, r3
 8011560:	4805      	ldr	r0, [pc, #20]	; (8011578 <MX_TIM8_Init+0x98>)
 8011562:	f006 fb63 	bl	8017c2c <HAL_TIMEx_MasterConfigSynchronization>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	d001      	beq.n	8011570 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 801156c:	f000 fa96 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8011570:	bf00      	nop
 8011572:	3718      	adds	r7, #24
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}
 8011578:	200048d4 	.word	0x200048d4
 801157c:	40010400 	.word	0x40010400

08011580 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8011584:	4b11      	ldr	r3, [pc, #68]	; (80115cc <MX_UART5_Init+0x4c>)
 8011586:	4a12      	ldr	r2, [pc, #72]	; (80115d0 <MX_UART5_Init+0x50>)
 8011588:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 801158a:	4b10      	ldr	r3, [pc, #64]	; (80115cc <MX_UART5_Init+0x4c>)
 801158c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011590:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8011592:	4b0e      	ldr	r3, [pc, #56]	; (80115cc <MX_UART5_Init+0x4c>)
 8011594:	2200      	movs	r2, #0
 8011596:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8011598:	4b0c      	ldr	r3, [pc, #48]	; (80115cc <MX_UART5_Init+0x4c>)
 801159a:	2200      	movs	r2, #0
 801159c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 801159e:	4b0b      	ldr	r3, [pc, #44]	; (80115cc <MX_UART5_Init+0x4c>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80115a4:	4b09      	ldr	r3, [pc, #36]	; (80115cc <MX_UART5_Init+0x4c>)
 80115a6:	220c      	movs	r2, #12
 80115a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80115aa:	4b08      	ldr	r3, [pc, #32]	; (80115cc <MX_UART5_Init+0x4c>)
 80115ac:	2200      	movs	r2, #0
 80115ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80115b0:	4b06      	ldr	r3, [pc, #24]	; (80115cc <MX_UART5_Init+0x4c>)
 80115b2:	2200      	movs	r2, #0
 80115b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80115b6:	4805      	ldr	r0, [pc, #20]	; (80115cc <MX_UART5_Init+0x4c>)
 80115b8:	f006 fbc8 	bl	8017d4c <HAL_UART_Init>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d001      	beq.n	80115c6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80115c2:	f000 fa6b 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80115c6:	bf00      	nop
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	20004a90 	.word	0x20004a90
 80115d0:	40005000 	.word	0x40005000

080115d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80115d8:	4b11      	ldr	r3, [pc, #68]	; (8011620 <MX_USART1_UART_Init+0x4c>)
 80115da:	4a12      	ldr	r2, [pc, #72]	; (8011624 <MX_USART1_UART_Init+0x50>)
 80115dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80115de:	4b10      	ldr	r3, [pc, #64]	; (8011620 <MX_USART1_UART_Init+0x4c>)
 80115e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80115e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80115e6:	4b0e      	ldr	r3, [pc, #56]	; (8011620 <MX_USART1_UART_Init+0x4c>)
 80115e8:	2200      	movs	r2, #0
 80115ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80115ec:	4b0c      	ldr	r3, [pc, #48]	; (8011620 <MX_USART1_UART_Init+0x4c>)
 80115ee:	2200      	movs	r2, #0
 80115f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80115f2:	4b0b      	ldr	r3, [pc, #44]	; (8011620 <MX_USART1_UART_Init+0x4c>)
 80115f4:	2200      	movs	r2, #0
 80115f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80115f8:	4b09      	ldr	r3, [pc, #36]	; (8011620 <MX_USART1_UART_Init+0x4c>)
 80115fa:	220c      	movs	r2, #12
 80115fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80115fe:	4b08      	ldr	r3, [pc, #32]	; (8011620 <MX_USART1_UART_Init+0x4c>)
 8011600:	2200      	movs	r2, #0
 8011602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8011604:	4b06      	ldr	r3, [pc, #24]	; (8011620 <MX_USART1_UART_Init+0x4c>)
 8011606:	2200      	movs	r2, #0
 8011608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801160a:	4805      	ldr	r0, [pc, #20]	; (8011620 <MX_USART1_UART_Init+0x4c>)
 801160c:	f006 fb9e 	bl	8017d4c <HAL_UART_Init>
 8011610:	4603      	mov	r3, r0
 8011612:	2b00      	cmp	r3, #0
 8011614:	d001      	beq.n	801161a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8011616:	f000 fa41 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801161a:	bf00      	nop
 801161c:	bd80      	pop	{r7, pc}
 801161e:	bf00      	nop
 8011620:	20004b20 	.word	0x20004b20
 8011624:	40011000 	.word	0x40011000

08011628 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 801162c:	4b11      	ldr	r3, [pc, #68]	; (8011674 <MX_USART3_UART_Init+0x4c>)
 801162e:	4a12      	ldr	r2, [pc, #72]	; (8011678 <MX_USART3_UART_Init+0x50>)
 8011630:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8011632:	4b10      	ldr	r3, [pc, #64]	; (8011674 <MX_USART3_UART_Init+0x4c>)
 8011634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011638:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801163a:	4b0e      	ldr	r3, [pc, #56]	; (8011674 <MX_USART3_UART_Init+0x4c>)
 801163c:	2200      	movs	r2, #0
 801163e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8011640:	4b0c      	ldr	r3, [pc, #48]	; (8011674 <MX_USART3_UART_Init+0x4c>)
 8011642:	2200      	movs	r2, #0
 8011644:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8011646:	4b0b      	ldr	r3, [pc, #44]	; (8011674 <MX_USART3_UART_Init+0x4c>)
 8011648:	2200      	movs	r2, #0
 801164a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 801164c:	4b09      	ldr	r3, [pc, #36]	; (8011674 <MX_USART3_UART_Init+0x4c>)
 801164e:	220c      	movs	r2, #12
 8011650:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011652:	4b08      	ldr	r3, [pc, #32]	; (8011674 <MX_USART3_UART_Init+0x4c>)
 8011654:	2200      	movs	r2, #0
 8011656:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8011658:	4b06      	ldr	r3, [pc, #24]	; (8011674 <MX_USART3_UART_Init+0x4c>)
 801165a:	2200      	movs	r2, #0
 801165c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801165e:	4805      	ldr	r0, [pc, #20]	; (8011674 <MX_USART3_UART_Init+0x4c>)
 8011660:	f006 fb74 	bl	8017d4c <HAL_UART_Init>
 8011664:	4603      	mov	r3, r0
 8011666:	2b00      	cmp	r3, #0
 8011668:	d001      	beq.n	801166e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 801166a:	f000 fa17 	bl	8011a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 801166e:	bf00      	nop
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	20004964 	.word	0x20004964
 8011678:	40004800 	.word	0x40004800

0801167c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b082      	sub	sp, #8
 8011680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8011682:	2300      	movs	r3, #0
 8011684:	607b      	str	r3, [r7, #4]
 8011686:	4b0c      	ldr	r3, [pc, #48]	; (80116b8 <MX_DMA_Init+0x3c>)
 8011688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801168a:	4a0b      	ldr	r2, [pc, #44]	; (80116b8 <MX_DMA_Init+0x3c>)
 801168c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011690:	6313      	str	r3, [r2, #48]	; 0x30
 8011692:	4b09      	ldr	r3, [pc, #36]	; (80116b8 <MX_DMA_Init+0x3c>)
 8011694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801169a:	607b      	str	r3, [r7, #4]
 801169c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 801169e:	2200      	movs	r2, #0
 80116a0:	2105      	movs	r1, #5
 80116a2:	2038      	movs	r0, #56	; 0x38
 80116a4:	f001 fba2 	bl	8012dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80116a8:	2038      	movs	r0, #56	; 0x38
 80116aa:	f001 fbbb 	bl	8012e24 <HAL_NVIC_EnableIRQ>

}
 80116ae:	bf00      	nop
 80116b0:	3708      	adds	r7, #8
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	40023800 	.word	0x40023800

080116bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b08a      	sub	sp, #40	; 0x28
 80116c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80116c2:	f107 0314 	add.w	r3, r7, #20
 80116c6:	2200      	movs	r2, #0
 80116c8:	601a      	str	r2, [r3, #0]
 80116ca:	605a      	str	r2, [r3, #4]
 80116cc:	609a      	str	r2, [r3, #8]
 80116ce:	60da      	str	r2, [r3, #12]
 80116d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80116d2:	2300      	movs	r3, #0
 80116d4:	613b      	str	r3, [r7, #16]
 80116d6:	4b69      	ldr	r3, [pc, #420]	; (801187c <MX_GPIO_Init+0x1c0>)
 80116d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116da:	4a68      	ldr	r2, [pc, #416]	; (801187c <MX_GPIO_Init+0x1c0>)
 80116dc:	f043 0304 	orr.w	r3, r3, #4
 80116e0:	6313      	str	r3, [r2, #48]	; 0x30
 80116e2:	4b66      	ldr	r3, [pc, #408]	; (801187c <MX_GPIO_Init+0x1c0>)
 80116e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e6:	f003 0304 	and.w	r3, r3, #4
 80116ea:	613b      	str	r3, [r7, #16]
 80116ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80116ee:	2300      	movs	r3, #0
 80116f0:	60fb      	str	r3, [r7, #12]
 80116f2:	4b62      	ldr	r3, [pc, #392]	; (801187c <MX_GPIO_Init+0x1c0>)
 80116f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f6:	4a61      	ldr	r2, [pc, #388]	; (801187c <MX_GPIO_Init+0x1c0>)
 80116f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116fc:	6313      	str	r3, [r2, #48]	; 0x30
 80116fe:	4b5f      	ldr	r3, [pc, #380]	; (801187c <MX_GPIO_Init+0x1c0>)
 8011700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011706:	60fb      	str	r3, [r7, #12]
 8011708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801170a:	2300      	movs	r3, #0
 801170c:	60bb      	str	r3, [r7, #8]
 801170e:	4b5b      	ldr	r3, [pc, #364]	; (801187c <MX_GPIO_Init+0x1c0>)
 8011710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011712:	4a5a      	ldr	r2, [pc, #360]	; (801187c <MX_GPIO_Init+0x1c0>)
 8011714:	f043 0301 	orr.w	r3, r3, #1
 8011718:	6313      	str	r3, [r2, #48]	; 0x30
 801171a:	4b58      	ldr	r3, [pc, #352]	; (801187c <MX_GPIO_Init+0x1c0>)
 801171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801171e:	f003 0301 	and.w	r3, r3, #1
 8011722:	60bb      	str	r3, [r7, #8]
 8011724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011726:	2300      	movs	r3, #0
 8011728:	607b      	str	r3, [r7, #4]
 801172a:	4b54      	ldr	r3, [pc, #336]	; (801187c <MX_GPIO_Init+0x1c0>)
 801172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801172e:	4a53      	ldr	r2, [pc, #332]	; (801187c <MX_GPIO_Init+0x1c0>)
 8011730:	f043 0302 	orr.w	r3, r3, #2
 8011734:	6313      	str	r3, [r2, #48]	; 0x30
 8011736:	4b51      	ldr	r3, [pc, #324]	; (801187c <MX_GPIO_Init+0x1c0>)
 8011738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801173a:	f003 0302 	and.w	r3, r3, #2
 801173e:	607b      	str	r3, [r7, #4]
 8011740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011742:	2300      	movs	r3, #0
 8011744:	603b      	str	r3, [r7, #0]
 8011746:	4b4d      	ldr	r3, [pc, #308]	; (801187c <MX_GPIO_Init+0x1c0>)
 8011748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801174a:	4a4c      	ldr	r2, [pc, #304]	; (801187c <MX_GPIO_Init+0x1c0>)
 801174c:	f043 0308 	orr.w	r3, r3, #8
 8011750:	6313      	str	r3, [r2, #48]	; 0x30
 8011752:	4b4a      	ldr	r3, [pc, #296]	; (801187c <MX_GPIO_Init+0x1c0>)
 8011754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011756:	f003 0308 	and.w	r3, r3, #8
 801175a:	603b      	str	r3, [r7, #0]
 801175c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uC_RS485_RE_Pin|uC_G2T_Pin|uC_G3T_Pin, GPIO_PIN_RESET);
 801175e:	2200      	movs	r2, #0
 8011760:	f648 0120 	movw	r1, #34848	; 0x8820
 8011764:	4846      	ldr	r0, [pc, #280]	; (8011880 <MX_GPIO_Init+0x1c4>)
 8011766:	f002 fb17 	bl	8013d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, uC_TransistorSwitch6_Pin|uC_LedOnBoard_Pin|uC_G1T_Pin|uC_RS485_DE_Pin, GPIO_PIN_RESET);
 801176a:	2200      	movs	r2, #0
 801176c:	f242 01a2 	movw	r1, #8354	; 0x20a2
 8011770:	4844      	ldr	r0, [pc, #272]	; (8011884 <MX_GPIO_Init+0x1c8>)
 8011772:	f002 fb11 	bl	8013d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, uC_Buzzer_Pin|uC_TransistorSwitch4_Pin|uC_Relay_Pin, GPIO_PIN_RESET);
 8011776:	2200      	movs	r2, #0
 8011778:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 801177c:	4842      	ldr	r0, [pc, #264]	; (8011888 <MX_GPIO_Init+0x1cc>)
 801177e:	f002 fb0b 	bl	8013d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : uC_BattteryReverse_Pin uC_CapBank_Pin */
  GPIO_InitStruct.Pin = uC_BattteryReverse_Pin|uC_CapBank_Pin;
 8011782:	f242 0310 	movw	r3, #8208	; 0x2010
 8011786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011788:	2300      	movs	r3, #0
 801178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801178c:	2300      	movs	r3, #0
 801178e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011790:	f107 0314 	add.w	r3, r7, #20
 8011794:	4619      	mov	r1, r3
 8011796:	483c      	ldr	r0, [pc, #240]	; (8011888 <MX_GPIO_Init+0x1cc>)
 8011798:	f002 f952 	bl	8013a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : uC_RS485_RE_Pin */
  GPIO_InitStruct.Pin = uC_RS485_RE_Pin;
 801179c:	2320      	movs	r3, #32
 801179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80117a0:	2301      	movs	r3, #1
 80117a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117a4:	2300      	movs	r3, #0
 80117a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80117a8:	2300      	movs	r3, #0
 80117aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uC_RS485_RE_GPIO_Port, &GPIO_InitStruct);
 80117ac:	f107 0314 	add.w	r3, r7, #20
 80117b0:	4619      	mov	r1, r3
 80117b2:	4833      	ldr	r0, [pc, #204]	; (8011880 <MX_GPIO_Init+0x1c4>)
 80117b4:	f002 f944 	bl	8013a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ZC1_Pin uC_ZC2_Pin uC_ZC3_Pin */
  GPIO_InitStruct.Pin = uC_ZC1_Pin|uC_ZC2_Pin|uC_ZC3_Pin;
 80117b8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80117bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80117be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80117c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117c4:	2300      	movs	r3, #0
 80117c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117c8:	f107 0314 	add.w	r3, r7, #20
 80117cc:	4619      	mov	r1, r3
 80117ce:	482c      	ldr	r0, [pc, #176]	; (8011880 <MX_GPIO_Init+0x1c4>)
 80117d0:	f002 f936 	bl	8013a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_TransistorSwitch6_Pin uC_LedOnBoard_Pin uC_RS485_DE_Pin */
  GPIO_InitStruct.Pin = uC_TransistorSwitch6_Pin|uC_LedOnBoard_Pin|uC_RS485_DE_Pin;
 80117d4:	f242 0382 	movw	r3, #8322	; 0x2082
 80117d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80117da:	2301      	movs	r3, #1
 80117dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117de:	2300      	movs	r3, #0
 80117e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80117e2:	2300      	movs	r3, #0
 80117e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80117e6:	f107 0314 	add.w	r3, r7, #20
 80117ea:	4619      	mov	r1, r3
 80117ec:	4825      	ldr	r0, [pc, #148]	; (8011884 <MX_GPIO_Init+0x1c8>)
 80117ee:	f002 f927 	bl	8013a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_Buzzer_Pin uC_TransistorSwitch4_Pin uC_Relay_Pin */
  GPIO_InitStruct.Pin = uC_Buzzer_Pin|uC_TransistorSwitch4_Pin|uC_Relay_Pin;
 80117f2:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80117f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80117f8:	2301      	movs	r3, #1
 80117fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117fc:	2300      	movs	r3, #0
 80117fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011800:	2300      	movs	r3, #0
 8011802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011804:	f107 0314 	add.w	r3, r7, #20
 8011808:	4619      	mov	r1, r3
 801180a:	481f      	ldr	r0, [pc, #124]	; (8011888 <MX_GPIO_Init+0x1cc>)
 801180c:	f002 f918 	bl	8013a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_G2T_Pin uC_G3T_Pin */
  GPIO_InitStruct.Pin = uC_G2T_Pin|uC_G3T_Pin;
 8011810:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8011814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011816:	2301      	movs	r3, #1
 8011818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801181a:	2300      	movs	r3, #0
 801181c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801181e:	2302      	movs	r3, #2
 8011820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011822:	f107 0314 	add.w	r3, r7, #20
 8011826:	4619      	mov	r1, r3
 8011828:	4815      	ldr	r0, [pc, #84]	; (8011880 <MX_GPIO_Init+0x1c4>)
 801182a:	f002 f909 	bl	8013a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : uC_G1T_Pin */
  GPIO_InitStruct.Pin = uC_G1T_Pin;
 801182e:	2320      	movs	r3, #32
 8011830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011832:	2301      	movs	r3, #1
 8011834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011836:	2300      	movs	r3, #0
 8011838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801183a:	2302      	movs	r3, #2
 801183c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uC_G1T_GPIO_Port, &GPIO_InitStruct);
 801183e:	f107 0314 	add.w	r3, r7, #20
 8011842:	4619      	mov	r1, r3
 8011844:	480f      	ldr	r0, [pc, #60]	; (8011884 <MX_GPIO_Init+0x1c8>)
 8011846:	f002 f8fb 	bl	8013a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : uC_SCRTemp_Pin */
  GPIO_InitStruct.Pin = uC_SCRTemp_Pin;
 801184a:	2340      	movs	r3, #64	; 0x40
 801184c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801184e:	2300      	movs	r3, #0
 8011850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011852:	2302      	movs	r3, #2
 8011854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uC_SCRTemp_GPIO_Port, &GPIO_InitStruct);
 8011856:	f107 0314 	add.w	r3, r7, #20
 801185a:	4619      	mov	r1, r3
 801185c:	4809      	ldr	r0, [pc, #36]	; (8011884 <MX_GPIO_Init+0x1c8>)
 801185e:	f002 f8ef 	bl	8013a40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8011862:	2200      	movs	r2, #0
 8011864:	2105      	movs	r1, #5
 8011866:	2017      	movs	r0, #23
 8011868:	f001 fac0 	bl	8012dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801186c:	2017      	movs	r0, #23
 801186e:	f001 fad9 	bl	8012e24 <HAL_NVIC_EnableIRQ>

}
 8011872:	bf00      	nop
 8011874:	3728      	adds	r7, #40	; 0x28
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
 801187a:	bf00      	nop
 801187c:	40023800 	.word	0x40023800
 8011880:	40020000 	.word	0x40020000
 8011884:	40020400 	.word	0x40020400
 8011888:	40020800 	.word	0x40020800

0801188c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8011894:	f011 fe52 	bl	802353c <MX_USB_DEVICE_Init>
	static uint32_t ApplDbg_TaskSCRTrigger_RunCounter_old = 0;
	static uint32_t ApplDbg_TaskDisplay_RunCounter_old = 0;
  /* Infinite loop */
  for(;;)
  {
	  if(ApplDbg_TaskDisplay_RunCounter!=ApplDbg_TaskDisplay_RunCounter_old){
 8011898:	4b16      	ldr	r3, [pc, #88]	; (80118f4 <StartDefaultTask+0x68>)
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	4b16      	ldr	r3, [pc, #88]	; (80118f8 <StartDefaultTask+0x6c>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d0f9      	beq.n	8011898 <StartDefaultTask+0xc>
		  ApplDbg_TaskDisplay_RunCounter_old = ApplDbg_TaskDisplay_RunCounter;
 80118a4:	4b13      	ldr	r3, [pc, #76]	; (80118f4 <StartDefaultTask+0x68>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	4a13      	ldr	r2, [pc, #76]	; (80118f8 <StartDefaultTask+0x6c>)
 80118aa:	6013      	str	r3, [r2, #0]
		  if((ApplDbg_Task10ms_RunCounter_old != ApplDbg_Task10ms_RunCounter) && \
 80118ac:	4b13      	ldr	r3, [pc, #76]	; (80118fc <StartDefaultTask+0x70>)
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	4b13      	ldr	r3, [pc, #76]	; (8011900 <StartDefaultTask+0x74>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d0ef      	beq.n	8011898 <StartDefaultTask+0xc>
				  (ApplDbg_Task50ms_RunCounter_old != ApplDbg_Task50ms_RunCounter) && \
 80118b8:	4b12      	ldr	r3, [pc, #72]	; (8011904 <StartDefaultTask+0x78>)
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	4b12      	ldr	r3, [pc, #72]	; (8011908 <StartDefaultTask+0x7c>)
 80118be:	681b      	ldr	r3, [r3, #0]
		  if((ApplDbg_Task10ms_RunCounter_old != ApplDbg_Task10ms_RunCounter) && \
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d0e9      	beq.n	8011898 <StartDefaultTask+0xc>
				  (ApplDbg_TaskSCRTrigger_RunCounter_old != ApplDbg_TaskSCRTrigger_RunCounter)){
 80118c4:	4b11      	ldr	r3, [pc, #68]	; (801190c <StartDefaultTask+0x80>)
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	4b11      	ldr	r3, [pc, #68]	; (8011910 <StartDefaultTask+0x84>)
 80118ca:	681b      	ldr	r3, [r3, #0]
				  (ApplDbg_Task50ms_RunCounter_old != ApplDbg_Task50ms_RunCounter) && \
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d0e3      	beq.n	8011898 <StartDefaultTask+0xc>
			  ApplDbg_TaskSCRTrigger_RunCounter_old = ApplDbg_TaskSCRTrigger_RunCounter;
 80118d0:	4b0f      	ldr	r3, [pc, #60]	; (8011910 <StartDefaultTask+0x84>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4a0d      	ldr	r2, [pc, #52]	; (801190c <StartDefaultTask+0x80>)
 80118d6:	6013      	str	r3, [r2, #0]
			  ApplDbg_Task50ms_RunCounter_old = ApplDbg_Task50ms_RunCounter;
 80118d8:	4b0b      	ldr	r3, [pc, #44]	; (8011908 <StartDefaultTask+0x7c>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	4a09      	ldr	r2, [pc, #36]	; (8011904 <StartDefaultTask+0x78>)
 80118de:	6013      	str	r3, [r2, #0]
			  ApplDbg_Task10ms_RunCounter_old = ApplDbg_Task10ms_RunCounter;
 80118e0:	4b07      	ldr	r3, [pc, #28]	; (8011900 <StartDefaultTask+0x74>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	4a05      	ldr	r2, [pc, #20]	; (80118fc <StartDefaultTask+0x70>)
 80118e6:	6013      	str	r3, [r2, #0]
			  ONBOARDLED_TOGGLE();
 80118e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80118ec:	4809      	ldr	r0, [pc, #36]	; (8011914 <StartDefaultTask+0x88>)
 80118ee:	f002 fa6c 	bl	8013dca <HAL_GPIO_TogglePin>
	  if(ApplDbg_TaskDisplay_RunCounter!=ApplDbg_TaskDisplay_RunCounter_old){
 80118f2:	e7d1      	b.n	8011898 <StartDefaultTask+0xc>
 80118f4:	200008a4 	.word	0x200008a4
 80118f8:	200008a8 	.word	0x200008a8
 80118fc:	200008ac 	.word	0x200008ac
 8011900:	20000898 	.word	0x20000898
 8011904:	200008b0 	.word	0x200008b0
 8011908:	2000089c 	.word	0x2000089c
 801190c:	200008b4 	.word	0x200008b4
 8011910:	200008a0 	.word	0x200008a0
 8011914:	40020400 	.word	0x40020400

08011918 <Task_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
	static uint32_t FnclocalDbg_Task10ms_RunCounter = 0;
	static TickType_t Task_10ms_pxPreviousWakeTime;
  /* Infinite loop */
  for(;;)
  {
	  SM_10msTask();
 8011920:	f00c fdad 	bl	801e47e <SM_10msTask>
		FnclocalDbg_Task10ms_RunCounter++;
 8011924:	4b0a      	ldr	r3, [pc, #40]	; (8011950 <Task_10ms+0x38>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	3301      	adds	r3, #1
 801192a:	4a09      	ldr	r2, [pc, #36]	; (8011950 <Task_10ms+0x38>)
 801192c:	6013      	str	r3, [r2, #0]
		if(FnclocalDbg_Task10ms_RunCounter>=100){
 801192e:	4b08      	ldr	r3, [pc, #32]	; (8011950 <Task_10ms+0x38>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2b63      	cmp	r3, #99	; 0x63
 8011934:	d907      	bls.n	8011946 <Task_10ms+0x2e>
			FnclocalDbg_Task10ms_RunCounter = 0;
 8011936:	4b06      	ldr	r3, [pc, #24]	; (8011950 <Task_10ms+0x38>)
 8011938:	2200      	movs	r2, #0
 801193a:	601a      	str	r2, [r3, #0]
			ApplDbg_Task10ms_RunCounter++;
 801193c:	4b05      	ldr	r3, [pc, #20]	; (8011954 <Task_10ms+0x3c>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	3301      	adds	r3, #1
 8011942:	4a04      	ldr	r2, [pc, #16]	; (8011954 <Task_10ms+0x3c>)
 8011944:	6013      	str	r3, [r2, #0]
		}
		vTaskDelayUntil(&Task_10ms_pxPreviousWakeTime, 10);
 8011946:	210a      	movs	r1, #10
 8011948:	4803      	ldr	r0, [pc, #12]	; (8011958 <Task_10ms+0x40>)
 801194a:	f010 fe27 	bl	802259c <vTaskDelayUntil>
	  SM_10msTask();
 801194e:	e7e7      	b.n	8011920 <Task_10ms+0x8>
 8011950:	200008b8 	.word	0x200008b8
 8011954:	20000898 	.word	0x20000898
 8011958:	200008bc 	.word	0x200008bc

0801195c <Task_50ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_50ms */
void Task_50ms(void const * argument)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
static uint32_t FnclocalDbg_Task50ms_RunCounter = 0;
static TickType_t Task_50ms_pxPreviousWakeTime;
  /* Infinite loop */
  for(;;)
  {
	  RunDiagnostics();
 8011964:	f008 fe4c 	bl	801a600 <RunDiagnostics>
	  FnclocalDbg_Task50ms_RunCounter++;
 8011968:	4b0a      	ldr	r3, [pc, #40]	; (8011994 <Task_50ms+0x38>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	3301      	adds	r3, #1
 801196e:	4a09      	ldr	r2, [pc, #36]	; (8011994 <Task_50ms+0x38>)
 8011970:	6013      	str	r3, [r2, #0]
	  if(FnclocalDbg_Task50ms_RunCounter>=20){
 8011972:	4b08      	ldr	r3, [pc, #32]	; (8011994 <Task_50ms+0x38>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b13      	cmp	r3, #19
 8011978:	d907      	bls.n	801198a <Task_50ms+0x2e>
		  FnclocalDbg_Task50ms_RunCounter = 0;
 801197a:	4b06      	ldr	r3, [pc, #24]	; (8011994 <Task_50ms+0x38>)
 801197c:	2200      	movs	r2, #0
 801197e:	601a      	str	r2, [r3, #0]
		  ApplDbg_Task50ms_RunCounter++;
 8011980:	4b05      	ldr	r3, [pc, #20]	; (8011998 <Task_50ms+0x3c>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	3301      	adds	r3, #1
 8011986:	4a04      	ldr	r2, [pc, #16]	; (8011998 <Task_50ms+0x3c>)
 8011988:	6013      	str	r3, [r2, #0]
	  }
	  vTaskDelayUntil(&Task_50ms_pxPreviousWakeTime, 50);
 801198a:	2132      	movs	r1, #50	; 0x32
 801198c:	4803      	ldr	r0, [pc, #12]	; (801199c <Task_50ms+0x40>)
 801198e:	f010 fe05 	bl	802259c <vTaskDelayUntil>
	  RunDiagnostics();
 8011992:	e7e7      	b.n	8011964 <Task_50ms+0x8>
 8011994:	200008c0 	.word	0x200008c0
 8011998:	2000089c 	.word	0x2000089c
 801199c:	200008c4 	.word	0x200008c4

080119a0 <Task_StateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_StateMachine */
void Task_StateMachine(void const * argument)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_StateMachine */
static uint32_t FnclocalDbg_TaskSCRTrigger_RunCounter = 0;
static TickType_t Task_SCRTrigger_pxPreviousWakeTime;
uint8_t loopms = 50;
 80119a8:	2332      	movs	r3, #50	; 0x32
 80119aa:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  loopms = 50;
 80119ac:	2332      	movs	r3, #50	; 0x32
 80119ae:	73fb      	strb	r3, [r7, #15]
	  SM_ListenFromDisplay(loopms);
 80119b0:	7bfb      	ldrb	r3, [r7, #15]
 80119b2:	4618      	mov	r0, r3
 80119b4:	f00b fcb6 	bl	801d324 <SM_ListenFromDisplay>
	  SM_StateMachineHandler(loopms);
 80119b8:	7bfb      	ldrb	r3, [r7, #15]
 80119ba:	4618      	mov	r0, r3
 80119bc:	f00b fcec 	bl	801d398 <SM_StateMachineHandler>
	  SM_SpeakToDisplay(loopms);
 80119c0:	7bfb      	ldrb	r3, [r7, #15]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f00c fd4e 	bl	801e464 <SM_SpeakToDisplay>

	  FnclocalDbg_TaskSCRTrigger_RunCounter++;
 80119c8:	4b0e      	ldr	r3, [pc, #56]	; (8011a04 <Task_StateMachine+0x64>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	3301      	adds	r3, #1
 80119ce:	4a0d      	ldr	r2, [pc, #52]	; (8011a04 <Task_StateMachine+0x64>)
 80119d0:	6013      	str	r3, [r2, #0]
	  if(FnclocalDbg_TaskSCRTrigger_RunCounter>=(1000/loopms)){
 80119d2:	7bfb      	ldrb	r3, [r7, #15]
 80119d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80119d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80119dc:	461a      	mov	r2, r3
 80119de:	4b09      	ldr	r3, [pc, #36]	; (8011a04 <Task_StateMachine+0x64>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d807      	bhi.n	80119f6 <Task_StateMachine+0x56>
		  FnclocalDbg_TaskSCRTrigger_RunCounter = 0;
 80119e6:	4b07      	ldr	r3, [pc, #28]	; (8011a04 <Task_StateMachine+0x64>)
 80119e8:	2200      	movs	r2, #0
 80119ea:	601a      	str	r2, [r3, #0]
		  ApplDbg_TaskSCRTrigger_RunCounter++;
 80119ec:	4b06      	ldr	r3, [pc, #24]	; (8011a08 <Task_StateMachine+0x68>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	3301      	adds	r3, #1
 80119f2:	4a05      	ldr	r2, [pc, #20]	; (8011a08 <Task_StateMachine+0x68>)
 80119f4:	6013      	str	r3, [r2, #0]
	  }
	  vTaskDelayUntil(&Task_SCRTrigger_pxPreviousWakeTime, loopms);
 80119f6:	7bfb      	ldrb	r3, [r7, #15]
 80119f8:	4619      	mov	r1, r3
 80119fa:	4804      	ldr	r0, [pc, #16]	; (8011a0c <Task_StateMachine+0x6c>)
 80119fc:	f010 fdce 	bl	802259c <vTaskDelayUntil>
	  loopms = 50;
 8011a00:	e7d4      	b.n	80119ac <Task_StateMachine+0xc>
 8011a02:	bf00      	nop
 8011a04:	200008c8 	.word	0x200008c8
 8011a08:	200008a0 	.word	0x200008a0
 8011a0c:	200008cc 	.word	0x200008cc

08011a10 <Task_Display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Display */
void Task_Display(void const * argument)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b084      	sub	sp, #16
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Display */
	static uint32_t FnclocalDbg_TaskDisplay_RunCounter = 0;
	static TickType_t xLastWakeTime;
	uint8_t lopspeedms = 250;
 8011a18:	23fa      	movs	r3, #250	; 0xfa
 8011a1a:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
//	  DisplayLoop(lopspeedms);
//	  vishwaModbusLoop();
//	  SerialCommunication(lopspeedms);
	  FnclocalDbg_TaskDisplay_RunCounter++;
 8011a1c:	4b12      	ldr	r3, [pc, #72]	; (8011a68 <Task_Display+0x58>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	3301      	adds	r3, #1
 8011a22:	4a11      	ldr	r2, [pc, #68]	; (8011a68 <Task_Display+0x58>)
 8011a24:	6013      	str	r3, [r2, #0]
	  if(FnclocalDbg_TaskDisplay_RunCounter>=(1000/lopspeedms)){
 8011a26:	7bfb      	ldrb	r3, [r7, #15]
 8011a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011a2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8011a30:	461a      	mov	r2, r3
 8011a32:	4b0d      	ldr	r3, [pc, #52]	; (8011a68 <Task_Display+0x58>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d807      	bhi.n	8011a4a <Task_Display+0x3a>
		  FnclocalDbg_TaskDisplay_RunCounter = 0;
 8011a3a:	4b0b      	ldr	r3, [pc, #44]	; (8011a68 <Task_Display+0x58>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	601a      	str	r2, [r3, #0]
		  ApplDbg_TaskDisplay_RunCounter++;
 8011a40:	4b0a      	ldr	r3, [pc, #40]	; (8011a6c <Task_Display+0x5c>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3301      	adds	r3, #1
 8011a46:	4a09      	ldr	r2, [pc, #36]	; (8011a6c <Task_Display+0x5c>)
 8011a48:	6013      	str	r3, [r2, #0]
	  }
	    vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(lopspeedms));
 8011a4a:	7bfb      	ldrb	r3, [r7, #15]
 8011a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011a50:	fb02 f303 	mul.w	r3, r2, r3
 8011a54:	4a06      	ldr	r2, [pc, #24]	; (8011a70 <Task_Display+0x60>)
 8011a56:	fba2 2303 	umull	r2, r3, r2, r3
 8011a5a:	099b      	lsrs	r3, r3, #6
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	4805      	ldr	r0, [pc, #20]	; (8011a74 <Task_Display+0x64>)
 8011a60:	f010 fd9c 	bl	802259c <vTaskDelayUntil>
	  FnclocalDbg_TaskDisplay_RunCounter++;
 8011a64:	e7da      	b.n	8011a1c <Task_Display+0xc>
 8011a66:	bf00      	nop
 8011a68:	200008d0 	.word	0x200008d0
 8011a6c:	200008a4 	.word	0x200008a4
 8011a70:	10624dd3 	.word	0x10624dd3
 8011a74:	200008d4 	.word	0x200008d4

08011a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	4a04      	ldr	r2, [pc, #16]	; (8011a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8011a86:	4293      	cmp	r3, r2
 8011a88:	d101      	bne.n	8011a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8011a8a:	f000 fc9b 	bl	80123c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011a8e:	bf00      	nop
 8011a90:	3708      	adds	r7, #8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
 8011a96:	bf00      	nop
 8011a98:	40010000 	.word	0x40010000

08011a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011aa0:	b672      	cpsid	i
}
 8011aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011aa4:	e7fe      	b.n	8011aa4 <Error_Handler+0x8>
	...

08011aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011aae:	2300      	movs	r3, #0
 8011ab0:	607b      	str	r3, [r7, #4]
 8011ab2:	4b12      	ldr	r3, [pc, #72]	; (8011afc <HAL_MspInit+0x54>)
 8011ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ab6:	4a11      	ldr	r2, [pc, #68]	; (8011afc <HAL_MspInit+0x54>)
 8011ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011abc:	6453      	str	r3, [r2, #68]	; 0x44
 8011abe:	4b0f      	ldr	r3, [pc, #60]	; (8011afc <HAL_MspInit+0x54>)
 8011ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ac6:	607b      	str	r3, [r7, #4]
 8011ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011aca:	2300      	movs	r3, #0
 8011acc:	603b      	str	r3, [r7, #0]
 8011ace:	4b0b      	ldr	r3, [pc, #44]	; (8011afc <HAL_MspInit+0x54>)
 8011ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ad2:	4a0a      	ldr	r2, [pc, #40]	; (8011afc <HAL_MspInit+0x54>)
 8011ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8011ada:	4b08      	ldr	r3, [pc, #32]	; (8011afc <HAL_MspInit+0x54>)
 8011adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011ae2:	603b      	str	r3, [r7, #0]
 8011ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	210f      	movs	r1, #15
 8011aea:	f06f 0001 	mvn.w	r0, #1
 8011aee:	f001 f97d 	bl	8012dec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011af2:	bf00      	nop
 8011af4:	3708      	adds	r7, #8
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	40023800 	.word	0x40023800

08011b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b08a      	sub	sp, #40	; 0x28
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b08:	f107 0314 	add.w	r3, r7, #20
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	601a      	str	r2, [r3, #0]
 8011b10:	605a      	str	r2, [r3, #4]
 8011b12:	609a      	str	r2, [r3, #8]
 8011b14:	60da      	str	r2, [r3, #12]
 8011b16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	4a2f      	ldr	r2, [pc, #188]	; (8011bdc <HAL_ADC_MspInit+0xdc>)
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	d157      	bne.n	8011bd2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8011b22:	2300      	movs	r3, #0
 8011b24:	613b      	str	r3, [r7, #16]
 8011b26:	4b2e      	ldr	r3, [pc, #184]	; (8011be0 <HAL_ADC_MspInit+0xe0>)
 8011b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b2a:	4a2d      	ldr	r2, [pc, #180]	; (8011be0 <HAL_ADC_MspInit+0xe0>)
 8011b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b30:	6453      	str	r3, [r2, #68]	; 0x44
 8011b32:	4b2b      	ldr	r3, [pc, #172]	; (8011be0 <HAL_ADC_MspInit+0xe0>)
 8011b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b3a:	613b      	str	r3, [r7, #16]
 8011b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b3e:	2300      	movs	r3, #0
 8011b40:	60fb      	str	r3, [r7, #12]
 8011b42:	4b27      	ldr	r3, [pc, #156]	; (8011be0 <HAL_ADC_MspInit+0xe0>)
 8011b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b46:	4a26      	ldr	r2, [pc, #152]	; (8011be0 <HAL_ADC_MspInit+0xe0>)
 8011b48:	f043 0301 	orr.w	r3, r3, #1
 8011b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8011b4e:	4b24      	ldr	r3, [pc, #144]	; (8011be0 <HAL_ADC_MspInit+0xe0>)
 8011b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b52:	f003 0301 	and.w	r3, r3, #1
 8011b56:	60fb      	str	r3, [r7, #12]
 8011b58:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8011b5a:	230f      	movs	r3, #15
 8011b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011b5e:	2303      	movs	r3, #3
 8011b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b62:	2300      	movs	r3, #0
 8011b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b66:	f107 0314 	add.w	r3, r7, #20
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	481d      	ldr	r0, [pc, #116]	; (8011be4 <HAL_ADC_MspInit+0xe4>)
 8011b6e:	f001 ff67 	bl	8013a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8011b72:	4b1d      	ldr	r3, [pc, #116]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011b74:	4a1d      	ldr	r2, [pc, #116]	; (8011bec <HAL_ADC_MspInit+0xec>)
 8011b76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8011b78:	4b1b      	ldr	r3, [pc, #108]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011b7e:	4b1a      	ldr	r3, [pc, #104]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011b80:	2200      	movs	r2, #0
 8011b82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8011b84:	4b18      	ldr	r3, [pc, #96]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011b86:	2200      	movs	r2, #0
 8011b88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8011b8a:	4b17      	ldr	r3, [pc, #92]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011b90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8011b92:	4b15      	ldr	r3, [pc, #84]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011b9a:	4b13      	ldr	r3, [pc, #76]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011b9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011ba0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8011ba2:	4b11      	ldr	r3, [pc, #68]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ba8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8011baa:	4b0f      	ldr	r3, [pc, #60]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011bac:	2200      	movs	r2, #0
 8011bae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8011bb0:	4b0d      	ldr	r3, [pc, #52]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8011bb6:	480c      	ldr	r0, [pc, #48]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011bb8:	f001 f942 	bl	8012e40 <HAL_DMA_Init>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d001      	beq.n	8011bc6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8011bc2:	f7ff ff6b 	bl	8011a9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4a07      	ldr	r2, [pc, #28]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011bca:	639a      	str	r2, [r3, #56]	; 0x38
 8011bcc:	4a06      	ldr	r2, [pc, #24]	; (8011be8 <HAL_ADC_MspInit+0xe8>)
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8011bd2:	bf00      	nop
 8011bd4:	3728      	adds	r7, #40	; 0x28
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	40012000 	.word	0x40012000
 8011be0:	40023800 	.word	0x40023800
 8011be4:	40020000 	.word	0x40020000
 8011be8:	20004b64 	.word	0x20004b64
 8011bec:	40026410 	.word	0x40026410

08011bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b08a      	sub	sp, #40	; 0x28
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011bf8:	f107 0314 	add.w	r3, r7, #20
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	601a      	str	r2, [r3, #0]
 8011c00:	605a      	str	r2, [r3, #4]
 8011c02:	609a      	str	r2, [r3, #8]
 8011c04:	60da      	str	r2, [r3, #12]
 8011c06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4a19      	ldr	r2, [pc, #100]	; (8011c74 <HAL_I2C_MspInit+0x84>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d12c      	bne.n	8011c6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011c12:	2300      	movs	r3, #0
 8011c14:	613b      	str	r3, [r7, #16]
 8011c16:	4b18      	ldr	r3, [pc, #96]	; (8011c78 <HAL_I2C_MspInit+0x88>)
 8011c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c1a:	4a17      	ldr	r2, [pc, #92]	; (8011c78 <HAL_I2C_MspInit+0x88>)
 8011c1c:	f043 0302 	orr.w	r3, r3, #2
 8011c20:	6313      	str	r3, [r2, #48]	; 0x30
 8011c22:	4b15      	ldr	r3, [pc, #84]	; (8011c78 <HAL_I2C_MspInit+0x88>)
 8011c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c26:	f003 0302 	and.w	r3, r3, #2
 8011c2a:	613b      	str	r3, [r7, #16]
 8011c2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8011c2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011c34:	2312      	movs	r3, #18
 8011c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c3c:	2303      	movs	r3, #3
 8011c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011c40:	2304      	movs	r3, #4
 8011c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011c44:	f107 0314 	add.w	r3, r7, #20
 8011c48:	4619      	mov	r1, r3
 8011c4a:	480c      	ldr	r0, [pc, #48]	; (8011c7c <HAL_I2C_MspInit+0x8c>)
 8011c4c:	f001 fef8 	bl	8013a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011c50:	2300      	movs	r3, #0
 8011c52:	60fb      	str	r3, [r7, #12]
 8011c54:	4b08      	ldr	r3, [pc, #32]	; (8011c78 <HAL_I2C_MspInit+0x88>)
 8011c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c58:	4a07      	ldr	r2, [pc, #28]	; (8011c78 <HAL_I2C_MspInit+0x88>)
 8011c5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8011c60:	4b05      	ldr	r3, [pc, #20]	; (8011c78 <HAL_I2C_MspInit+0x88>)
 8011c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011c68:	60fb      	str	r3, [r7, #12]
 8011c6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8011c6c:	bf00      	nop
 8011c6e:	3728      	adds	r7, #40	; 0x28
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	40005400 	.word	0x40005400
 8011c78:	40023800 	.word	0x40023800
 8011c7c:	40020400 	.word	0x40020400

08011c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b08a      	sub	sp, #40	; 0x28
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c90:	d10e      	bne.n	8011cb0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8011c92:	2300      	movs	r3, #0
 8011c94:	627b      	str	r3, [r7, #36]	; 0x24
 8011c96:	4b54      	ldr	r3, [pc, #336]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c9a:	4a53      	ldr	r2, [pc, #332]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011c9c:	f043 0301 	orr.w	r3, r3, #1
 8011ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8011ca2:	4b51      	ldr	r3, [pc, #324]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ca6:	f003 0301 	and.w	r3, r3, #1
 8011caa:	627b      	str	r3, [r7, #36]	; 0x24
 8011cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8011cae:	e096      	b.n	8011dde <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM3)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4a4d      	ldr	r2, [pc, #308]	; (8011dec <HAL_TIM_Base_MspInit+0x16c>)
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	d116      	bne.n	8011ce8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011cba:	2300      	movs	r3, #0
 8011cbc:	623b      	str	r3, [r7, #32]
 8011cbe:	4b4a      	ldr	r3, [pc, #296]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cc2:	4a49      	ldr	r2, [pc, #292]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011cc4:	f043 0302 	orr.w	r3, r3, #2
 8011cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8011cca:	4b47      	ldr	r3, [pc, #284]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cce:	f003 0302 	and.w	r3, r3, #2
 8011cd2:	623b      	str	r3, [r7, #32]
 8011cd4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	2105      	movs	r1, #5
 8011cda:	201d      	movs	r0, #29
 8011cdc:	f001 f886 	bl	8012dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8011ce0:	201d      	movs	r0, #29
 8011ce2:	f001 f89f 	bl	8012e24 <HAL_NVIC_EnableIRQ>
}
 8011ce6:	e07a      	b.n	8011dde <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM4)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4a40      	ldr	r2, [pc, #256]	; (8011df0 <HAL_TIM_Base_MspInit+0x170>)
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	d10e      	bne.n	8011d10 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	61fb      	str	r3, [r7, #28]
 8011cf6:	4b3c      	ldr	r3, [pc, #240]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cfa:	4a3b      	ldr	r2, [pc, #236]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011cfc:	f043 0304 	orr.w	r3, r3, #4
 8011d00:	6413      	str	r3, [r2, #64]	; 0x40
 8011d02:	4b39      	ldr	r3, [pc, #228]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d06:	f003 0304 	and.w	r3, r3, #4
 8011d0a:	61fb      	str	r3, [r7, #28]
 8011d0c:	69fb      	ldr	r3, [r7, #28]
}
 8011d0e:	e066      	b.n	8011dde <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM5)
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4a37      	ldr	r2, [pc, #220]	; (8011df4 <HAL_TIM_Base_MspInit+0x174>)
 8011d16:	4293      	cmp	r3, r2
 8011d18:	d116      	bne.n	8011d48 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	61bb      	str	r3, [r7, #24]
 8011d1e:	4b32      	ldr	r3, [pc, #200]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d22:	4a31      	ldr	r2, [pc, #196]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011d24:	f043 0308 	orr.w	r3, r3, #8
 8011d28:	6413      	str	r3, [r2, #64]	; 0x40
 8011d2a:	4b2f      	ldr	r3, [pc, #188]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d2e:	f003 0308 	and.w	r3, r3, #8
 8011d32:	61bb      	str	r3, [r7, #24]
 8011d34:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8011d36:	2200      	movs	r2, #0
 8011d38:	2105      	movs	r1, #5
 8011d3a:	2032      	movs	r0, #50	; 0x32
 8011d3c:	f001 f856 	bl	8012dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8011d40:	2032      	movs	r0, #50	; 0x32
 8011d42:	f001 f86f 	bl	8012e24 <HAL_NVIC_EnableIRQ>
}
 8011d46:	e04a      	b.n	8011dde <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM6)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4a2a      	ldr	r2, [pc, #168]	; (8011df8 <HAL_TIM_Base_MspInit+0x178>)
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	d116      	bne.n	8011d80 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8011d52:	2300      	movs	r3, #0
 8011d54:	617b      	str	r3, [r7, #20]
 8011d56:	4b24      	ldr	r3, [pc, #144]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d5a:	4a23      	ldr	r2, [pc, #140]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011d5c:	f043 0310 	orr.w	r3, r3, #16
 8011d60:	6413      	str	r3, [r2, #64]	; 0x40
 8011d62:	4b21      	ldr	r3, [pc, #132]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d66:	f003 0310 	and.w	r3, r3, #16
 8011d6a:	617b      	str	r3, [r7, #20]
 8011d6c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8011d6e:	2200      	movs	r2, #0
 8011d70:	2105      	movs	r1, #5
 8011d72:	2036      	movs	r0, #54	; 0x36
 8011d74:	f001 f83a 	bl	8012dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011d78:	2036      	movs	r0, #54	; 0x36
 8011d7a:	f001 f853 	bl	8012e24 <HAL_NVIC_EnableIRQ>
}
 8011d7e:	e02e      	b.n	8011dde <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM7)
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	4a1d      	ldr	r2, [pc, #116]	; (8011dfc <HAL_TIM_Base_MspInit+0x17c>)
 8011d86:	4293      	cmp	r3, r2
 8011d88:	d116      	bne.n	8011db8 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	613b      	str	r3, [r7, #16]
 8011d8e:	4b16      	ldr	r3, [pc, #88]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d92:	4a15      	ldr	r2, [pc, #84]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011d94:	f043 0320 	orr.w	r3, r3, #32
 8011d98:	6413      	str	r3, [r2, #64]	; 0x40
 8011d9a:	4b13      	ldr	r3, [pc, #76]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d9e:	f003 0320 	and.w	r3, r3, #32
 8011da2:	613b      	str	r3, [r7, #16]
 8011da4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8011da6:	2200      	movs	r2, #0
 8011da8:	2105      	movs	r1, #5
 8011daa:	2037      	movs	r0, #55	; 0x37
 8011dac:	f001 f81e 	bl	8012dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8011db0:	2037      	movs	r0, #55	; 0x37
 8011db2:	f001 f837 	bl	8012e24 <HAL_NVIC_EnableIRQ>
}
 8011db6:	e012      	b.n	8011dde <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM8)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	4a10      	ldr	r2, [pc, #64]	; (8011e00 <HAL_TIM_Base_MspInit+0x180>)
 8011dbe:	4293      	cmp	r3, r2
 8011dc0:	d10d      	bne.n	8011dde <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	60fb      	str	r3, [r7, #12]
 8011dc6:	4b08      	ldr	r3, [pc, #32]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dca:	4a07      	ldr	r2, [pc, #28]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011dcc:	f043 0302 	orr.w	r3, r3, #2
 8011dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8011dd2:	4b05      	ldr	r3, [pc, #20]	; (8011de8 <HAL_TIM_Base_MspInit+0x168>)
 8011dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dd6:	f003 0302 	and.w	r3, r3, #2
 8011dda:	60fb      	str	r3, [r7, #12]
 8011ddc:	68fb      	ldr	r3, [r7, #12]
}
 8011dde:	bf00      	nop
 8011de0:	3728      	adds	r7, #40	; 0x28
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop
 8011de8:	40023800 	.word	0x40023800
 8011dec:	40000400 	.word	0x40000400
 8011df0:	40000800 	.word	0x40000800
 8011df4:	40000c00 	.word	0x40000c00
 8011df8:	40001000 	.word	0x40001000
 8011dfc:	40001400 	.word	0x40001400
 8011e00:	40010400 	.word	0x40010400

08011e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b090      	sub	sp, #64	; 0x40
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011e10:	2200      	movs	r2, #0
 8011e12:	601a      	str	r2, [r3, #0]
 8011e14:	605a      	str	r2, [r3, #4]
 8011e16:	609a      	str	r2, [r3, #8]
 8011e18:	60da      	str	r2, [r3, #12]
 8011e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	4a6e      	ldr	r2, [pc, #440]	; (8011fdc <HAL_UART_MspInit+0x1d8>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d153      	bne.n	8011ece <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8011e26:	2300      	movs	r3, #0
 8011e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e2a:	4b6d      	ldr	r3, [pc, #436]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e2e:	4a6c      	ldr	r2, [pc, #432]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e34:	6413      	str	r3, [r2, #64]	; 0x40
 8011e36:	4b6a      	ldr	r3, [pc, #424]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e40:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011e42:	2300      	movs	r3, #0
 8011e44:	627b      	str	r3, [r7, #36]	; 0x24
 8011e46:	4b66      	ldr	r3, [pc, #408]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e4a:	4a65      	ldr	r2, [pc, #404]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011e4c:	f043 0304 	orr.w	r3, r3, #4
 8011e50:	6313      	str	r3, [r2, #48]	; 0x30
 8011e52:	4b63      	ldr	r3, [pc, #396]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e56:	f003 0304 	and.w	r3, r3, #4
 8011e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8011e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011e5e:	2300      	movs	r3, #0
 8011e60:	623b      	str	r3, [r7, #32]
 8011e62:	4b5f      	ldr	r3, [pc, #380]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e66:	4a5e      	ldr	r2, [pc, #376]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011e68:	f043 0308 	orr.w	r3, r3, #8
 8011e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8011e6e:	4b5c      	ldr	r3, [pc, #368]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e72:	f003 0308 	and.w	r3, r3, #8
 8011e76:	623b      	str	r3, [r7, #32]
 8011e78:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8011e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e80:	2302      	movs	r3, #2
 8011e82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e84:	2300      	movs	r3, #0
 8011e86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e88:	2303      	movs	r3, #3
 8011e8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8011e8c:	2308      	movs	r3, #8
 8011e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011e94:	4619      	mov	r1, r3
 8011e96:	4853      	ldr	r0, [pc, #332]	; (8011fe4 <HAL_UART_MspInit+0x1e0>)
 8011e98:	f001 fdd2 	bl	8013a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011e9c:	2304      	movs	r3, #4
 8011e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ea0:	2302      	movs	r3, #2
 8011ea2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ea8:	2303      	movs	r3, #3
 8011eaa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8011eac:	2308      	movs	r3, #8
 8011eae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	484c      	ldr	r0, [pc, #304]	; (8011fe8 <HAL_UART_MspInit+0x1e4>)
 8011eb8:	f001 fdc2 	bl	8013a40 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	2105      	movs	r1, #5
 8011ec0:	2035      	movs	r0, #53	; 0x35
 8011ec2:	f000 ff93 	bl	8012dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8011ec6:	2035      	movs	r0, #53	; 0x35
 8011ec8:	f000 ffac 	bl	8012e24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8011ecc:	e082      	b.n	8011fd4 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4a46      	ldr	r2, [pc, #280]	; (8011fec <HAL_UART_MspInit+0x1e8>)
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	d12d      	bne.n	8011f34 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8011ed8:	2300      	movs	r3, #0
 8011eda:	61fb      	str	r3, [r7, #28]
 8011edc:	4b40      	ldr	r3, [pc, #256]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ee0:	4a3f      	ldr	r2, [pc, #252]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011ee2:	f043 0310 	orr.w	r3, r3, #16
 8011ee6:	6453      	str	r3, [r2, #68]	; 0x44
 8011ee8:	4b3d      	ldr	r3, [pc, #244]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eec:	f003 0310 	and.w	r3, r3, #16
 8011ef0:	61fb      	str	r3, [r7, #28]
 8011ef2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	61bb      	str	r3, [r7, #24]
 8011ef8:	4b39      	ldr	r3, [pc, #228]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011efc:	4a38      	ldr	r2, [pc, #224]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011efe:	f043 0301 	orr.w	r3, r3, #1
 8011f02:	6313      	str	r3, [r2, #48]	; 0x30
 8011f04:	4b36      	ldr	r3, [pc, #216]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f08:	f003 0301 	and.w	r3, r3, #1
 8011f0c:	61bb      	str	r3, [r7, #24]
 8011f0e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011f10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8011f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f16:	2302      	movs	r3, #2
 8011f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f1e:	2303      	movs	r3, #3
 8011f20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011f22:	2307      	movs	r3, #7
 8011f24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	4830      	ldr	r0, [pc, #192]	; (8011ff0 <HAL_UART_MspInit+0x1ec>)
 8011f2e:	f001 fd87 	bl	8013a40 <HAL_GPIO_Init>
}
 8011f32:	e04f      	b.n	8011fd4 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART3)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4a2e      	ldr	r2, [pc, #184]	; (8011ff4 <HAL_UART_MspInit+0x1f0>)
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d14a      	bne.n	8011fd4 <HAL_UART_MspInit+0x1d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8011f3e:	2300      	movs	r3, #0
 8011f40:	617b      	str	r3, [r7, #20]
 8011f42:	4b27      	ldr	r3, [pc, #156]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f46:	4a26      	ldr	r2, [pc, #152]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8011f4e:	4b24      	ldr	r3, [pc, #144]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011f56:	617b      	str	r3, [r7, #20]
 8011f58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	613b      	str	r3, [r7, #16]
 8011f5e:	4b20      	ldr	r3, [pc, #128]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f62:	4a1f      	ldr	r2, [pc, #124]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011f64:	f043 0304 	orr.w	r3, r3, #4
 8011f68:	6313      	str	r3, [r2, #48]	; 0x30
 8011f6a:	4b1d      	ldr	r3, [pc, #116]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f6e:	f003 0304 	and.w	r3, r3, #4
 8011f72:	613b      	str	r3, [r7, #16]
 8011f74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011f76:	2300      	movs	r3, #0
 8011f78:	60fb      	str	r3, [r7, #12]
 8011f7a:	4b19      	ldr	r3, [pc, #100]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f7e:	4a18      	ldr	r2, [pc, #96]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011f80:	f043 0302 	orr.w	r3, r3, #2
 8011f84:	6313      	str	r3, [r2, #48]	; 0x30
 8011f86:	4b16      	ldr	r3, [pc, #88]	; (8011fe0 <HAL_UART_MspInit+0x1dc>)
 8011f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f8a:	f003 0302 	and.w	r3, r3, #2
 8011f8e:	60fb      	str	r3, [r7, #12]
 8011f90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8011f92:	2320      	movs	r3, #32
 8011f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f96:	2302      	movs	r3, #2
 8011f98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f9e:	2303      	movs	r3, #3
 8011fa0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8011fa2:	2307      	movs	r3, #7
 8011fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011faa:	4619      	mov	r1, r3
 8011fac:	480d      	ldr	r0, [pc, #52]	; (8011fe4 <HAL_UART_MspInit+0x1e0>)
 8011fae:	f001 fd47 	bl	8013a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8011fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fb8:	2302      	movs	r3, #2
 8011fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011fc0:	2303      	movs	r3, #3
 8011fc2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8011fc4:	2307      	movs	r3, #7
 8011fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011fcc:	4619      	mov	r1, r3
 8011fce:	480a      	ldr	r0, [pc, #40]	; (8011ff8 <HAL_UART_MspInit+0x1f4>)
 8011fd0:	f001 fd36 	bl	8013a40 <HAL_GPIO_Init>
}
 8011fd4:	bf00      	nop
 8011fd6:	3740      	adds	r7, #64	; 0x40
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}
 8011fdc:	40005000 	.word	0x40005000
 8011fe0:	40023800 	.word	0x40023800
 8011fe4:	40020800 	.word	0x40020800
 8011fe8:	40020c00 	.word	0x40020c00
 8011fec:	40011000 	.word	0x40011000
 8011ff0:	40020000 	.word	0x40020000
 8011ff4:	40004800 	.word	0x40004800
 8011ff8:	40020400 	.word	0x40020400

08011ffc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b08c      	sub	sp, #48	; 0x30
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8012004:	2300      	movs	r3, #0
 8012006:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8012008:	2300      	movs	r3, #0
 801200a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 801200c:	2200      	movs	r2, #0
 801200e:	6879      	ldr	r1, [r7, #4]
 8012010:	2019      	movs	r0, #25
 8012012:	f000 feeb 	bl	8012dec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8012016:	2019      	movs	r0, #25
 8012018:	f000 ff04 	bl	8012e24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 801201c:	2300      	movs	r3, #0
 801201e:	60fb      	str	r3, [r7, #12]
 8012020:	4b1f      	ldr	r3, [pc, #124]	; (80120a0 <HAL_InitTick+0xa4>)
 8012022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012024:	4a1e      	ldr	r2, [pc, #120]	; (80120a0 <HAL_InitTick+0xa4>)
 8012026:	f043 0301 	orr.w	r3, r3, #1
 801202a:	6453      	str	r3, [r2, #68]	; 0x44
 801202c:	4b1c      	ldr	r3, [pc, #112]	; (80120a0 <HAL_InitTick+0xa4>)
 801202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012030:	f003 0301 	and.w	r3, r3, #1
 8012034:	60fb      	str	r3, [r7, #12]
 8012036:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012038:	f107 0210 	add.w	r2, r7, #16
 801203c:	f107 0314 	add.w	r3, r7, #20
 8012040:	4611      	mov	r1, r2
 8012042:	4618      	mov	r0, r3
 8012044:	f004 f9ec 	bl	8016420 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8012048:	f004 f9d6 	bl	80163f8 <HAL_RCC_GetPCLK2Freq>
 801204c:	4603      	mov	r3, r0
 801204e:	005b      	lsls	r3, r3, #1
 8012050:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012054:	4a13      	ldr	r2, [pc, #76]	; (80120a4 <HAL_InitTick+0xa8>)
 8012056:	fba2 2303 	umull	r2, r3, r2, r3
 801205a:	0c9b      	lsrs	r3, r3, #18
 801205c:	3b01      	subs	r3, #1
 801205e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8012060:	4b11      	ldr	r3, [pc, #68]	; (80120a8 <HAL_InitTick+0xac>)
 8012062:	4a12      	ldr	r2, [pc, #72]	; (80120ac <HAL_InitTick+0xb0>)
 8012064:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8012066:	4b10      	ldr	r3, [pc, #64]	; (80120a8 <HAL_InitTick+0xac>)
 8012068:	f240 32e7 	movw	r2, #999	; 0x3e7
 801206c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801206e:	4a0e      	ldr	r2, [pc, #56]	; (80120a8 <HAL_InitTick+0xac>)
 8012070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012072:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012074:	4b0c      	ldr	r3, [pc, #48]	; (80120a8 <HAL_InitTick+0xac>)
 8012076:	2200      	movs	r2, #0
 8012078:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801207a:	4b0b      	ldr	r3, [pc, #44]	; (80120a8 <HAL_InitTick+0xac>)
 801207c:	2200      	movs	r2, #0
 801207e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8012080:	4809      	ldr	r0, [pc, #36]	; (80120a8 <HAL_InitTick+0xac>)
 8012082:	f005 f979 	bl	8017378 <HAL_TIM_Base_Init>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	d104      	bne.n	8012096 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 801208c:	4806      	ldr	r0, [pc, #24]	; (80120a8 <HAL_InitTick+0xac>)
 801208e:	f005 fa2b 	bl	80174e8 <HAL_TIM_Base_Start_IT>
 8012092:	4603      	mov	r3, r0
 8012094:	e000      	b.n	8012098 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8012096:	2301      	movs	r3, #1
}
 8012098:	4618      	mov	r0, r3
 801209a:	3730      	adds	r7, #48	; 0x30
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	40023800 	.word	0x40023800
 80120a4:	431bde83 	.word	0x431bde83
 80120a8:	20004ca0 	.word	0x20004ca0
 80120ac:	40010000 	.word	0x40010000

080120b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80120b0:	b480      	push	{r7}
 80120b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80120b4:	e7fe      	b.n	80120b4 <NMI_Handler+0x4>

080120b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80120b6:	b480      	push	{r7}
 80120b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80120ba:	e7fe      	b.n	80120ba <HardFault_Handler+0x4>

080120bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80120bc:	b480      	push	{r7}
 80120be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80120c0:	e7fe      	b.n	80120c0 <MemManage_Handler+0x4>

080120c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80120c2:	b480      	push	{r7}
 80120c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80120c6:	e7fe      	b.n	80120c6 <BusFault_Handler+0x4>

080120c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80120c8:	b480      	push	{r7}
 80120ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80120cc:	e7fe      	b.n	80120cc <UsageFault_Handler+0x4>

080120ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80120ce:	b480      	push	{r7}
 80120d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80120d2:	bf00      	nop
 80120d4:	46bd      	mov	sp, r7
 80120d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120da:	4770      	bx	lr

080120dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80120e0:	2040      	movs	r0, #64	; 0x40
 80120e2:	f001 fe8d 	bl	8013e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80120e6:	2080      	movs	r0, #128	; 0x80
 80120e8:	f001 fe8a 	bl	8013e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80120ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80120f0:	f001 fe86 	bl	8013e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80120f4:	bf00      	nop
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80120fc:	4802      	ldr	r0, [pc, #8]	; (8012108 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80120fe:	f005 fa63 	bl	80175c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8012102:	bf00      	nop
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	20004ca0 	.word	0x20004ca0

0801210c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 801210c:	b480      	push	{r7}
 801210e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM3_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8012110:	bf00      	nop
 8012112:	46bd      	mov	sp, r7
 8012114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012118:	4770      	bx	lr

0801211a <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 801211a:	b580      	push	{r7, lr}
 801211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	TIM5_Callback();
 801211e:	f00c fd8b 	bl	801ec38 <TIM5_Callback>
  /* USER CODE END TIM5_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim5);
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8012122:	bf00      	nop
 8012124:	bd80      	pop	{r7, pc}
	...

08012128 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 801212c:	4802      	ldr	r0, [pc, #8]	; (8012138 <UART5_IRQHandler+0x10>)
 801212e:	f006 f86b 	bl	8018208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8012132:	bf00      	nop
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	20004a90 	.word	0x20004a90

0801213c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	TIM6_Callback();
 8012140:	f00c fdec 	bl	801ed1c <TIM6_Callback>
  /* USER CODE END TIM6_DAC_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8012144:	bf00      	nop
 8012146:	bd80      	pop	{r7, pc}

08012148 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	TIM7_Callback();
 801214c:	f00c fe5c 	bl	801ee08 <TIM7_Callback>
  /* USER CODE END TIM7_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim7);
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8012150:	bf00      	nop
 8012152:	bd80      	pop	{r7, pc}

08012154 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8012158:	4802      	ldr	r0, [pc, #8]	; (8012164 <DMA2_Stream0_IRQHandler+0x10>)
 801215a:	f001 f809 	bl	8013170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 801215e:	bf00      	nop
 8012160:	bd80      	pop	{r7, pc}
 8012162:	bf00      	nop
 8012164:	20004b64 	.word	0x20004b64

08012168 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 801216c:	4802      	ldr	r0, [pc, #8]	; (8012178 <OTG_HS_IRQHandler+0x10>)
 801216e:	f002 ff75 	bl	801505c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8012172:	bf00      	nop
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	200068f4 	.word	0x200068f4

0801217c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801217c:	b480      	push	{r7}
 801217e:	af00      	add	r7, sp, #0
	return 1;
 8012180:	2301      	movs	r3, #1
}
 8012182:	4618      	mov	r0, r3
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr

0801218c <_kill>:

int _kill(int pid, int sig)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8012196:	f011 ff99 	bl	80240cc <__errno>
 801219a:	4603      	mov	r3, r0
 801219c:	2216      	movs	r2, #22
 801219e:	601a      	str	r2, [r3, #0]
	return -1;
 80121a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3708      	adds	r7, #8
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <_exit>:

void _exit (int status)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80121b4:	f04f 31ff 	mov.w	r1, #4294967295
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f7ff ffe7 	bl	801218c <_kill>
	while (1) {}		/* Make sure we hang here */
 80121be:	e7fe      	b.n	80121be <_exit+0x12>

080121c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b086      	sub	sp, #24
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80121cc:	2300      	movs	r3, #0
 80121ce:	617b      	str	r3, [r7, #20]
 80121d0:	e00a      	b.n	80121e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80121d2:	f3af 8000 	nop.w
 80121d6:	4601      	mov	r1, r0
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	1c5a      	adds	r2, r3, #1
 80121dc:	60ba      	str	r2, [r7, #8]
 80121de:	b2ca      	uxtb	r2, r1
 80121e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	3301      	adds	r3, #1
 80121e6:	617b      	str	r3, [r7, #20]
 80121e8:	697a      	ldr	r2, [r7, #20]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	dbf0      	blt.n	80121d2 <_read+0x12>
	}

return len;
 80121f0:	687b      	ldr	r3, [r7, #4]
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3718      	adds	r7, #24
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}

080121fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80121fa:	b580      	push	{r7, lr}
 80121fc:	b086      	sub	sp, #24
 80121fe:	af00      	add	r7, sp, #0
 8012200:	60f8      	str	r0, [r7, #12]
 8012202:	60b9      	str	r1, [r7, #8]
 8012204:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012206:	2300      	movs	r3, #0
 8012208:	617b      	str	r3, [r7, #20]
 801220a:	e009      	b.n	8012220 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	1c5a      	adds	r2, r3, #1
 8012210:	60ba      	str	r2, [r7, #8]
 8012212:	781b      	ldrb	r3, [r3, #0]
 8012214:	4618      	mov	r0, r3
 8012216:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	3301      	adds	r3, #1
 801221e:	617b      	str	r3, [r7, #20]
 8012220:	697a      	ldr	r2, [r7, #20]
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	429a      	cmp	r2, r3
 8012226:	dbf1      	blt.n	801220c <_write+0x12>
	}
	return len;
 8012228:	687b      	ldr	r3, [r7, #4]
}
 801222a:	4618      	mov	r0, r3
 801222c:	3718      	adds	r7, #24
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}

08012232 <_close>:

int _close(int file)
{
 8012232:	b480      	push	{r7}
 8012234:	b083      	sub	sp, #12
 8012236:	af00      	add	r7, sp, #0
 8012238:	6078      	str	r0, [r7, #4]
	return -1;
 801223a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801223e:	4618      	mov	r0, r3
 8012240:	370c      	adds	r7, #12
 8012242:	46bd      	mov	sp, r7
 8012244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012248:	4770      	bx	lr

0801224a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801224a:	b480      	push	{r7}
 801224c:	b083      	sub	sp, #12
 801224e:	af00      	add	r7, sp, #0
 8012250:	6078      	str	r0, [r7, #4]
 8012252:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801225a:	605a      	str	r2, [r3, #4]
	return 0;
 801225c:	2300      	movs	r3, #0
}
 801225e:	4618      	mov	r0, r3
 8012260:	370c      	adds	r7, #12
 8012262:	46bd      	mov	sp, r7
 8012264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012268:	4770      	bx	lr

0801226a <_isatty>:

int _isatty(int file)
{
 801226a:	b480      	push	{r7}
 801226c:	b083      	sub	sp, #12
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]
	return 1;
 8012272:	2301      	movs	r3, #1
}
 8012274:	4618      	mov	r0, r3
 8012276:	370c      	adds	r7, #12
 8012278:	46bd      	mov	sp, r7
 801227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227e:	4770      	bx	lr

08012280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012280:	b480      	push	{r7}
 8012282:	b085      	sub	sp, #20
 8012284:	af00      	add	r7, sp, #0
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	607a      	str	r2, [r7, #4]
	return 0;
 801228c:	2300      	movs	r3, #0
}
 801228e:	4618      	mov	r0, r3
 8012290:	3714      	adds	r7, #20
 8012292:	46bd      	mov	sp, r7
 8012294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012298:	4770      	bx	lr
	...

0801229c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b086      	sub	sp, #24
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80122a4:	4a14      	ldr	r2, [pc, #80]	; (80122f8 <_sbrk+0x5c>)
 80122a6:	4b15      	ldr	r3, [pc, #84]	; (80122fc <_sbrk+0x60>)
 80122a8:	1ad3      	subs	r3, r2, r3
 80122aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80122b0:	4b13      	ldr	r3, [pc, #76]	; (8012300 <_sbrk+0x64>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d102      	bne.n	80122be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80122b8:	4b11      	ldr	r3, [pc, #68]	; (8012300 <_sbrk+0x64>)
 80122ba:	4a12      	ldr	r2, [pc, #72]	; (8012304 <_sbrk+0x68>)
 80122bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80122be:	4b10      	ldr	r3, [pc, #64]	; (8012300 <_sbrk+0x64>)
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	4413      	add	r3, r2
 80122c6:	693a      	ldr	r2, [r7, #16]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d207      	bcs.n	80122dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80122cc:	f011 fefe 	bl	80240cc <__errno>
 80122d0:	4603      	mov	r3, r0
 80122d2:	220c      	movs	r2, #12
 80122d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80122d6:	f04f 33ff 	mov.w	r3, #4294967295
 80122da:	e009      	b.n	80122f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80122dc:	4b08      	ldr	r3, [pc, #32]	; (8012300 <_sbrk+0x64>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80122e2:	4b07      	ldr	r3, [pc, #28]	; (8012300 <_sbrk+0x64>)
 80122e4:	681a      	ldr	r2, [r3, #0]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	4413      	add	r3, r2
 80122ea:	4a05      	ldr	r2, [pc, #20]	; (8012300 <_sbrk+0x64>)
 80122ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80122ee:	68fb      	ldr	r3, [r7, #12]
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3718      	adds	r7, #24
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	20020000 	.word	0x20020000
 80122fc:	00000400 	.word	0x00000400
 8012300:	200008d8 	.word	0x200008d8
 8012304:	20006d10 	.word	0x20006d10

08012308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012308:	b480      	push	{r7}
 801230a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801230c:	4b06      	ldr	r3, [pc, #24]	; (8012328 <SystemInit+0x20>)
 801230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012312:	4a05      	ldr	r2, [pc, #20]	; (8012328 <SystemInit+0x20>)
 8012314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801231c:	bf00      	nop
 801231e:	46bd      	mov	sp, r7
 8012320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012324:	4770      	bx	lr
 8012326:	bf00      	nop
 8012328:	e000ed00 	.word	0xe000ed00

0801232c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801232c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012330:	480d      	ldr	r0, [pc, #52]	; (8012368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8012332:	490e      	ldr	r1, [pc, #56]	; (801236c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8012334:	4a0e      	ldr	r2, [pc, #56]	; (8012370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8012336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012338:	e002      	b.n	8012340 <LoopCopyDataInit>

0801233a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801233a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801233c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801233e:	3304      	adds	r3, #4

08012340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012344:	d3f9      	bcc.n	801233a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012346:	4a0b      	ldr	r2, [pc, #44]	; (8012374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8012348:	4c0b      	ldr	r4, [pc, #44]	; (8012378 <LoopFillZerobss+0x26>)
  movs r3, #0
 801234a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801234c:	e001      	b.n	8012352 <LoopFillZerobss>

0801234e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801234e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012350:	3204      	adds	r2, #4

08012352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012354:	d3fb      	bcc.n	801234e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8012356:	f7ff ffd7 	bl	8012308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801235a:	f011 febd 	bl	80240d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801235e:	f7fe fd61 	bl	8010e24 <main>
  bx  lr    
 8012362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8012368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801236c:	20000628 	.word	0x20000628
  ldr r2, =_sidata
 8012370:	08027494 	.word	0x08027494
  ldr r2, =_sbss
 8012374:	20000628 	.word	0x20000628
  ldr r4, =_ebss
 8012378:	20006d0c 	.word	0x20006d0c

0801237c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801237c:	e7fe      	b.n	801237c <ADC_IRQHandler>
	...

08012380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012384:	4b0e      	ldr	r3, [pc, #56]	; (80123c0 <HAL_Init+0x40>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	4a0d      	ldr	r2, [pc, #52]	; (80123c0 <HAL_Init+0x40>)
 801238a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801238e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8012390:	4b0b      	ldr	r3, [pc, #44]	; (80123c0 <HAL_Init+0x40>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	4a0a      	ldr	r2, [pc, #40]	; (80123c0 <HAL_Init+0x40>)
 8012396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801239a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801239c:	4b08      	ldr	r3, [pc, #32]	; (80123c0 <HAL_Init+0x40>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	4a07      	ldr	r2, [pc, #28]	; (80123c0 <HAL_Init+0x40>)
 80123a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80123a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80123a8:	2003      	movs	r0, #3
 80123aa:	f000 fd14 	bl	8012dd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80123ae:	200f      	movs	r0, #15
 80123b0:	f7ff fe24 	bl	8011ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80123b4:	f7ff fb78 	bl	8011aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80123b8:	2300      	movs	r3, #0
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	40023c00 	.word	0x40023c00

080123c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80123c4:	b480      	push	{r7}
 80123c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80123c8:	4b06      	ldr	r3, [pc, #24]	; (80123e4 <HAL_IncTick+0x20>)
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	461a      	mov	r2, r3
 80123ce:	4b06      	ldr	r3, [pc, #24]	; (80123e8 <HAL_IncTick+0x24>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	4413      	add	r3, r2
 80123d4:	4a04      	ldr	r2, [pc, #16]	; (80123e8 <HAL_IncTick+0x24>)
 80123d6:	6013      	str	r3, [r2, #0]
}
 80123d8:	bf00      	nop
 80123da:	46bd      	mov	sp, r7
 80123dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e0:	4770      	bx	lr
 80123e2:	bf00      	nop
 80123e4:	20000008 	.word	0x20000008
 80123e8:	20004ce8 	.word	0x20004ce8

080123ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80123ec:	b480      	push	{r7}
 80123ee:	af00      	add	r7, sp, #0
  return uwTick;
 80123f0:	4b03      	ldr	r3, [pc, #12]	; (8012400 <HAL_GetTick+0x14>)
 80123f2:	681b      	ldr	r3, [r3, #0]
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	46bd      	mov	sp, r7
 80123f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop
 8012400:	20004ce8 	.word	0x20004ce8

08012404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801240c:	f7ff ffee 	bl	80123ec <HAL_GetTick>
 8012410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	f1b3 3fff 	cmp.w	r3, #4294967295
 801241c:	d005      	beq.n	801242a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801241e:	4b0a      	ldr	r3, [pc, #40]	; (8012448 <HAL_Delay+0x44>)
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	461a      	mov	r2, r3
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	4413      	add	r3, r2
 8012428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801242a:	bf00      	nop
 801242c:	f7ff ffde 	bl	80123ec <HAL_GetTick>
 8012430:	4602      	mov	r2, r0
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	1ad3      	subs	r3, r2, r3
 8012436:	68fa      	ldr	r2, [r7, #12]
 8012438:	429a      	cmp	r2, r3
 801243a:	d8f7      	bhi.n	801242c <HAL_Delay+0x28>
  {
  }
}
 801243c:	bf00      	nop
 801243e:	bf00      	nop
 8012440:	3710      	adds	r7, #16
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
 8012446:	bf00      	nop
 8012448:	20000008 	.word	0x20000008

0801244c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012454:	2300      	movs	r3, #0
 8012456:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d101      	bne.n	8012462 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801245e:	2301      	movs	r3, #1
 8012460:	e033      	b.n	80124ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012466:	2b00      	cmp	r3, #0
 8012468:	d109      	bne.n	801247e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f7ff fb48 	bl	8011b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2200      	movs	r2, #0
 801247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012482:	f003 0310 	and.w	r3, r3, #16
 8012486:	2b00      	cmp	r3, #0
 8012488:	d118      	bne.n	80124bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801248e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8012492:	f023 0302 	bic.w	r3, r3, #2
 8012496:	f043 0202 	orr.w	r2, r3, #2
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f000 fa6e 	bl	8012980 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2200      	movs	r2, #0
 80124a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124ae:	f023 0303 	bic.w	r3, r3, #3
 80124b2:	f043 0201 	orr.w	r2, r3, #1
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	641a      	str	r2, [r3, #64]	; 0x40
 80124ba:	e001      	b.n	80124c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80124bc:	2301      	movs	r3, #1
 80124be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2200      	movs	r2, #0
 80124c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80124c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3710      	adds	r7, #16
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
	...

080124d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b086      	sub	sp, #24
 80124d8:	af00      	add	r7, sp, #0
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	60b9      	str	r1, [r7, #8]
 80124de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80124e0:	2300      	movs	r3, #0
 80124e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80124ea:	2b01      	cmp	r3, #1
 80124ec:	d101      	bne.n	80124f2 <HAL_ADC_Start_DMA+0x1e>
 80124ee:	2302      	movs	r3, #2
 80124f0:	e0e9      	b.n	80126c6 <HAL_ADC_Start_DMA+0x1f2>
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2201      	movs	r2, #1
 80124f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	f003 0301 	and.w	r3, r3, #1
 8012504:	2b01      	cmp	r3, #1
 8012506:	d018      	beq.n	801253a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	689a      	ldr	r2, [r3, #8]
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	f042 0201 	orr.w	r2, r2, #1
 8012516:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8012518:	4b6d      	ldr	r3, [pc, #436]	; (80126d0 <HAL_ADC_Start_DMA+0x1fc>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	4a6d      	ldr	r2, [pc, #436]	; (80126d4 <HAL_ADC_Start_DMA+0x200>)
 801251e:	fba2 2303 	umull	r2, r3, r2, r3
 8012522:	0c9a      	lsrs	r2, r3, #18
 8012524:	4613      	mov	r3, r2
 8012526:	005b      	lsls	r3, r3, #1
 8012528:	4413      	add	r3, r2
 801252a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801252c:	e002      	b.n	8012534 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	3b01      	subs	r3, #1
 8012532:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d1f9      	bne.n	801252e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	689b      	ldr	r3, [r3, #8]
 8012540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012548:	d107      	bne.n	801255a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	689a      	ldr	r2, [r3, #8]
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012558:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	689b      	ldr	r3, [r3, #8]
 8012560:	f003 0301 	and.w	r3, r3, #1
 8012564:	2b01      	cmp	r3, #1
 8012566:	f040 80a1 	bne.w	80126ac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801256e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8012572:	f023 0301 	bic.w	r3, r3, #1
 8012576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012588:	2b00      	cmp	r3, #0
 801258a:	d007      	beq.n	801259c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012590:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8012594:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80125a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125a8:	d106      	bne.n	80125b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125ae:	f023 0206 	bic.w	r2, r3, #6
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	645a      	str	r2, [r3, #68]	; 0x44
 80125b6:	e002      	b.n	80125be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	2200      	movs	r2, #0
 80125bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2200      	movs	r2, #0
 80125c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80125c6:	4b44      	ldr	r3, [pc, #272]	; (80126d8 <HAL_ADC_Start_DMA+0x204>)
 80125c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125ce:	4a43      	ldr	r2, [pc, #268]	; (80126dc <HAL_ADC_Start_DMA+0x208>)
 80125d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125d6:	4a42      	ldr	r2, [pc, #264]	; (80126e0 <HAL_ADC_Start_DMA+0x20c>)
 80125d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125de:	4a41      	ldr	r2, [pc, #260]	; (80126e4 <HAL_ADC_Start_DMA+0x210>)
 80125e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80125ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	685a      	ldr	r2, [r3, #4]
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80125fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	689a      	ldr	r2, [r3, #8]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801260a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	334c      	adds	r3, #76	; 0x4c
 8012616:	4619      	mov	r1, r3
 8012618:	68ba      	ldr	r2, [r7, #8]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f000 fcbe 	bl	8012f9c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	f003 031f 	and.w	r3, r3, #31
 8012628:	2b00      	cmp	r3, #0
 801262a:	d12a      	bne.n	8012682 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4a2d      	ldr	r2, [pc, #180]	; (80126e8 <HAL_ADC_Start_DMA+0x214>)
 8012632:	4293      	cmp	r3, r2
 8012634:	d015      	beq.n	8012662 <HAL_ADC_Start_DMA+0x18e>
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4a2c      	ldr	r2, [pc, #176]	; (80126ec <HAL_ADC_Start_DMA+0x218>)
 801263c:	4293      	cmp	r3, r2
 801263e:	d105      	bne.n	801264c <HAL_ADC_Start_DMA+0x178>
 8012640:	4b25      	ldr	r3, [pc, #148]	; (80126d8 <HAL_ADC_Start_DMA+0x204>)
 8012642:	685b      	ldr	r3, [r3, #4]
 8012644:	f003 031f 	and.w	r3, r3, #31
 8012648:	2b00      	cmp	r3, #0
 801264a:	d00a      	beq.n	8012662 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4a27      	ldr	r2, [pc, #156]	; (80126f0 <HAL_ADC_Start_DMA+0x21c>)
 8012652:	4293      	cmp	r3, r2
 8012654:	d136      	bne.n	80126c4 <HAL_ADC_Start_DMA+0x1f0>
 8012656:	4b20      	ldr	r3, [pc, #128]	; (80126d8 <HAL_ADC_Start_DMA+0x204>)
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	f003 0310 	and.w	r3, r3, #16
 801265e:	2b00      	cmp	r3, #0
 8012660:	d130      	bne.n	80126c4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	689b      	ldr	r3, [r3, #8]
 8012668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801266c:	2b00      	cmp	r3, #0
 801266e:	d129      	bne.n	80126c4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	689a      	ldr	r2, [r3, #8]
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801267e:	609a      	str	r2, [r3, #8]
 8012680:	e020      	b.n	80126c4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	4a18      	ldr	r2, [pc, #96]	; (80126e8 <HAL_ADC_Start_DMA+0x214>)
 8012688:	4293      	cmp	r3, r2
 801268a:	d11b      	bne.n	80126c4 <HAL_ADC_Start_DMA+0x1f0>
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	689b      	ldr	r3, [r3, #8]
 8012692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012696:	2b00      	cmp	r3, #0
 8012698:	d114      	bne.n	80126c4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	689a      	ldr	r2, [r3, #8]
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80126a8:	609a      	str	r2, [r3, #8]
 80126aa:	e00b      	b.n	80126c4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126b0:	f043 0210 	orr.w	r2, r3, #16
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126bc:	f043 0201 	orr.w	r2, r3, #1
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3718      	adds	r7, #24
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	20000000 	.word	0x20000000
 80126d4:	431bde83 	.word	0x431bde83
 80126d8:	40012300 	.word	0x40012300
 80126dc:	08012b79 	.word	0x08012b79
 80126e0:	08012c33 	.word	0x08012c33
 80126e4:	08012c4f 	.word	0x08012c4f
 80126e8:	40012000 	.word	0x40012000
 80126ec:	40012100 	.word	0x40012100
 80126f0:	40012200 	.word	0x40012200

080126f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80126f4:	b480      	push	{r7}
 80126f6:	b083      	sub	sp, #12
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80126fc:	bf00      	nop
 80126fe:	370c      	adds	r7, #12
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr

08012708 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8012708:	b480      	push	{r7}
 801270a:	b083      	sub	sp, #12
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8012710:	bf00      	nop
 8012712:	370c      	adds	r7, #12
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr

0801271c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801271c:	b480      	push	{r7}
 801271e:	b085      	sub	sp, #20
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8012726:	2300      	movs	r3, #0
 8012728:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012730:	2b01      	cmp	r3, #1
 8012732:	d101      	bne.n	8012738 <HAL_ADC_ConfigChannel+0x1c>
 8012734:	2302      	movs	r3, #2
 8012736:	e113      	b.n	8012960 <HAL_ADC_ConfigChannel+0x244>
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2201      	movs	r2, #1
 801273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2b09      	cmp	r3, #9
 8012746:	d925      	bls.n	8012794 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	68d9      	ldr	r1, [r3, #12]
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	b29b      	uxth	r3, r3
 8012754:	461a      	mov	r2, r3
 8012756:	4613      	mov	r3, r2
 8012758:	005b      	lsls	r3, r3, #1
 801275a:	4413      	add	r3, r2
 801275c:	3b1e      	subs	r3, #30
 801275e:	2207      	movs	r2, #7
 8012760:	fa02 f303 	lsl.w	r3, r2, r3
 8012764:	43da      	mvns	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	400a      	ands	r2, r1
 801276c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	68d9      	ldr	r1, [r3, #12]
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	689a      	ldr	r2, [r3, #8]
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	b29b      	uxth	r3, r3
 801277e:	4618      	mov	r0, r3
 8012780:	4603      	mov	r3, r0
 8012782:	005b      	lsls	r3, r3, #1
 8012784:	4403      	add	r3, r0
 8012786:	3b1e      	subs	r3, #30
 8012788:	409a      	lsls	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	430a      	orrs	r2, r1
 8012790:	60da      	str	r2, [r3, #12]
 8012792:	e022      	b.n	80127da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	6919      	ldr	r1, [r3, #16]
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	b29b      	uxth	r3, r3
 80127a0:	461a      	mov	r2, r3
 80127a2:	4613      	mov	r3, r2
 80127a4:	005b      	lsls	r3, r3, #1
 80127a6:	4413      	add	r3, r2
 80127a8:	2207      	movs	r2, #7
 80127aa:	fa02 f303 	lsl.w	r3, r2, r3
 80127ae:	43da      	mvns	r2, r3
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	400a      	ands	r2, r1
 80127b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	6919      	ldr	r1, [r3, #16]
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	689a      	ldr	r2, [r3, #8]
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	4618      	mov	r0, r3
 80127ca:	4603      	mov	r3, r0
 80127cc:	005b      	lsls	r3, r3, #1
 80127ce:	4403      	add	r3, r0
 80127d0:	409a      	lsls	r2, r3
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	430a      	orrs	r2, r1
 80127d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	685b      	ldr	r3, [r3, #4]
 80127de:	2b06      	cmp	r3, #6
 80127e0:	d824      	bhi.n	801282c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	685a      	ldr	r2, [r3, #4]
 80127ec:	4613      	mov	r3, r2
 80127ee:	009b      	lsls	r3, r3, #2
 80127f0:	4413      	add	r3, r2
 80127f2:	3b05      	subs	r3, #5
 80127f4:	221f      	movs	r2, #31
 80127f6:	fa02 f303 	lsl.w	r3, r2, r3
 80127fa:	43da      	mvns	r2, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	400a      	ands	r2, r1
 8012802:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	b29b      	uxth	r3, r3
 8012810:	4618      	mov	r0, r3
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	685a      	ldr	r2, [r3, #4]
 8012816:	4613      	mov	r3, r2
 8012818:	009b      	lsls	r3, r3, #2
 801281a:	4413      	add	r3, r2
 801281c:	3b05      	subs	r3, #5
 801281e:	fa00 f203 	lsl.w	r2, r0, r3
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	430a      	orrs	r2, r1
 8012828:	635a      	str	r2, [r3, #52]	; 0x34
 801282a:	e04c      	b.n	80128c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	2b0c      	cmp	r3, #12
 8012832:	d824      	bhi.n	801287e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	685a      	ldr	r2, [r3, #4]
 801283e:	4613      	mov	r3, r2
 8012840:	009b      	lsls	r3, r3, #2
 8012842:	4413      	add	r3, r2
 8012844:	3b23      	subs	r3, #35	; 0x23
 8012846:	221f      	movs	r2, #31
 8012848:	fa02 f303 	lsl.w	r3, r2, r3
 801284c:	43da      	mvns	r2, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	400a      	ands	r2, r1
 8012854:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	b29b      	uxth	r3, r3
 8012862:	4618      	mov	r0, r3
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	685a      	ldr	r2, [r3, #4]
 8012868:	4613      	mov	r3, r2
 801286a:	009b      	lsls	r3, r3, #2
 801286c:	4413      	add	r3, r2
 801286e:	3b23      	subs	r3, #35	; 0x23
 8012870:	fa00 f203 	lsl.w	r2, r0, r3
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	430a      	orrs	r2, r1
 801287a:	631a      	str	r2, [r3, #48]	; 0x30
 801287c:	e023      	b.n	80128c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	685a      	ldr	r2, [r3, #4]
 8012888:	4613      	mov	r3, r2
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	4413      	add	r3, r2
 801288e:	3b41      	subs	r3, #65	; 0x41
 8012890:	221f      	movs	r2, #31
 8012892:	fa02 f303 	lsl.w	r3, r2, r3
 8012896:	43da      	mvns	r2, r3
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	400a      	ands	r2, r1
 801289e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	4618      	mov	r0, r3
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	685a      	ldr	r2, [r3, #4]
 80128b2:	4613      	mov	r3, r2
 80128b4:	009b      	lsls	r3, r3, #2
 80128b6:	4413      	add	r3, r2
 80128b8:	3b41      	subs	r3, #65	; 0x41
 80128ba:	fa00 f203 	lsl.w	r2, r0, r3
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	430a      	orrs	r2, r1
 80128c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80128c6:	4b29      	ldr	r3, [pc, #164]	; (801296c <HAL_ADC_ConfigChannel+0x250>)
 80128c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4a28      	ldr	r2, [pc, #160]	; (8012970 <HAL_ADC_ConfigChannel+0x254>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d10f      	bne.n	80128f4 <HAL_ADC_ConfigChannel+0x1d8>
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	2b12      	cmp	r3, #18
 80128da:	d10b      	bne.n	80128f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	4a1d      	ldr	r2, [pc, #116]	; (8012970 <HAL_ADC_ConfigChannel+0x254>)
 80128fa:	4293      	cmp	r3, r2
 80128fc:	d12b      	bne.n	8012956 <HAL_ADC_ConfigChannel+0x23a>
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	4a1c      	ldr	r2, [pc, #112]	; (8012974 <HAL_ADC_ConfigChannel+0x258>)
 8012904:	4293      	cmp	r3, r2
 8012906:	d003      	beq.n	8012910 <HAL_ADC_ConfigChannel+0x1f4>
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	2b11      	cmp	r3, #17
 801290e:	d122      	bne.n	8012956 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	4a11      	ldr	r2, [pc, #68]	; (8012974 <HAL_ADC_ConfigChannel+0x258>)
 801292e:	4293      	cmp	r3, r2
 8012930:	d111      	bne.n	8012956 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8012932:	4b11      	ldr	r3, [pc, #68]	; (8012978 <HAL_ADC_ConfigChannel+0x25c>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4a11      	ldr	r2, [pc, #68]	; (801297c <HAL_ADC_ConfigChannel+0x260>)
 8012938:	fba2 2303 	umull	r2, r3, r2, r3
 801293c:	0c9a      	lsrs	r2, r3, #18
 801293e:	4613      	mov	r3, r2
 8012940:	009b      	lsls	r3, r3, #2
 8012942:	4413      	add	r3, r2
 8012944:	005b      	lsls	r3, r3, #1
 8012946:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8012948:	e002      	b.n	8012950 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	3b01      	subs	r3, #1
 801294e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d1f9      	bne.n	801294a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2200      	movs	r2, #0
 801295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	3714      	adds	r7, #20
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr
 801296c:	40012300 	.word	0x40012300
 8012970:	40012000 	.word	0x40012000
 8012974:	10000012 	.word	0x10000012
 8012978:	20000000 	.word	0x20000000
 801297c:	431bde83 	.word	0x431bde83

08012980 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8012980:	b480      	push	{r7}
 8012982:	b085      	sub	sp, #20
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8012988:	4b79      	ldr	r3, [pc, #484]	; (8012b70 <ADC_Init+0x1f0>)
 801298a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	685a      	ldr	r2, [r3, #4]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	431a      	orrs	r2, r3
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	685a      	ldr	r2, [r3, #4]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80129b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	6859      	ldr	r1, [r3, #4]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	691b      	ldr	r3, [r3, #16]
 80129c0:	021a      	lsls	r2, r3, #8
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	430a      	orrs	r2, r1
 80129c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	685a      	ldr	r2, [r3, #4]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80129d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	6859      	ldr	r1, [r3, #4]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	689a      	ldr	r2, [r3, #8]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	430a      	orrs	r2, r1
 80129ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	689a      	ldr	r2, [r3, #8]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80129fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	6899      	ldr	r1, [r3, #8]
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	68da      	ldr	r2, [r3, #12]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	430a      	orrs	r2, r1
 8012a0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a12:	4a58      	ldr	r2, [pc, #352]	; (8012b74 <ADC_Init+0x1f4>)
 8012a14:	4293      	cmp	r3, r2
 8012a16:	d022      	beq.n	8012a5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	689a      	ldr	r2, [r3, #8]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8012a26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	6899      	ldr	r1, [r3, #8]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	430a      	orrs	r2, r1
 8012a38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	689a      	ldr	r2, [r3, #8]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012a48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	6899      	ldr	r1, [r3, #8]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	430a      	orrs	r2, r1
 8012a5a:	609a      	str	r2, [r3, #8]
 8012a5c:	e00f      	b.n	8012a7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	689a      	ldr	r2, [r3, #8]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8012a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	689a      	ldr	r2, [r3, #8]
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012a7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	689a      	ldr	r2, [r3, #8]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f022 0202 	bic.w	r2, r2, #2
 8012a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	6899      	ldr	r1, [r3, #8]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	7e1b      	ldrb	r3, [r3, #24]
 8012a98:	005a      	lsls	r2, r3, #1
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	430a      	orrs	r2, r1
 8012aa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d01b      	beq.n	8012ae4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	685a      	ldr	r2, [r3, #4]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012aba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	685a      	ldr	r2, [r3, #4]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8012aca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	6859      	ldr	r1, [r3, #4]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ad6:	3b01      	subs	r3, #1
 8012ad8:	035a      	lsls	r2, r3, #13
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	430a      	orrs	r2, r1
 8012ae0:	605a      	str	r2, [r3, #4]
 8012ae2:	e007      	b.n	8012af4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	685a      	ldr	r2, [r3, #4]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012af2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8012b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	69db      	ldr	r3, [r3, #28]
 8012b0e:	3b01      	subs	r3, #1
 8012b10:	051a      	lsls	r2, r3, #20
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	430a      	orrs	r2, r1
 8012b18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	689a      	ldr	r2, [r3, #8]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	6899      	ldr	r1, [r3, #8]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b36:	025a      	lsls	r2, r3, #9
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	430a      	orrs	r2, r1
 8012b3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	689a      	ldr	r2, [r3, #8]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	6899      	ldr	r1, [r3, #8]
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	695b      	ldr	r3, [r3, #20]
 8012b5a:	029a      	lsls	r2, r3, #10
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	430a      	orrs	r2, r1
 8012b62:	609a      	str	r2, [r3, #8]
}
 8012b64:	bf00      	nop
 8012b66:	3714      	adds	r7, #20
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr
 8012b70:	40012300 	.word	0x40012300
 8012b74:	0f000001 	.word	0x0f000001

08012b78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d13c      	bne.n	8012c0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	689b      	ldr	r3, [r3, #8]
 8012ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d12b      	bne.n	8012c04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d127      	bne.n	8012c04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d006      	beq.n	8012bd0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d119      	bne.n	8012c04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	685a      	ldr	r2, [r3, #4]
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	f022 0220 	bic.w	r2, r2, #32
 8012bde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012be4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d105      	bne.n	8012c04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bfc:	f043 0201 	orr.w	r2, r3, #1
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8012c04:	68f8      	ldr	r0, [r7, #12]
 8012c06:	f00d fc1d 	bl	8020444 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8012c0a:	e00e      	b.n	8012c2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c10:	f003 0310 	and.w	r3, r3, #16
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d003      	beq.n	8012c20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8012c18:	68f8      	ldr	r0, [r7, #12]
 8012c1a:	f7ff fd75 	bl	8012708 <HAL_ADC_ErrorCallback>
}
 8012c1e:	e004      	b.n	8012c2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	4798      	blx	r3
}
 8012c2a:	bf00      	nop
 8012c2c:	3710      	adds	r7, #16
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd80      	pop	{r7, pc}

08012c32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8012c32:	b580      	push	{r7, lr}
 8012c34:	b084      	sub	sp, #16
 8012c36:	af00      	add	r7, sp, #0
 8012c38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8012c40:	68f8      	ldr	r0, [r7, #12]
 8012c42:	f7ff fd57 	bl	80126f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8012c46:	bf00      	nop
 8012c48:	3710      	adds	r7, #16
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}

08012c4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8012c4e:	b580      	push	{r7, lr}
 8012c50:	b084      	sub	sp, #16
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2240      	movs	r2, #64	; 0x40
 8012c60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c66:	f043 0204 	orr.w	r2, r3, #4
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8012c6e:	68f8      	ldr	r0, [r7, #12]
 8012c70:	f7ff fd4a 	bl	8012708 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8012c74:	bf00      	nop
 8012c76:	3710      	adds	r7, #16
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}

08012c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b085      	sub	sp, #20
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f003 0307 	and.w	r3, r3, #7
 8012c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012c8c:	4b0c      	ldr	r3, [pc, #48]	; (8012cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012c92:	68ba      	ldr	r2, [r7, #8]
 8012c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012c98:	4013      	ands	r3, r2
 8012c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012cae:	4a04      	ldr	r2, [pc, #16]	; (8012cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	60d3      	str	r3, [r2, #12]
}
 8012cb4:	bf00      	nop
 8012cb6:	3714      	adds	r7, #20
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	e000ed00 	.word	0xe000ed00

08012cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012cc8:	4b04      	ldr	r3, [pc, #16]	; (8012cdc <__NVIC_GetPriorityGrouping+0x18>)
 8012cca:	68db      	ldr	r3, [r3, #12]
 8012ccc:	0a1b      	lsrs	r3, r3, #8
 8012cce:	f003 0307 	and.w	r3, r3, #7
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cda:	4770      	bx	lr
 8012cdc:	e000ed00 	.word	0xe000ed00

08012ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	db0b      	blt.n	8012d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012cf2:	79fb      	ldrb	r3, [r7, #7]
 8012cf4:	f003 021f 	and.w	r2, r3, #31
 8012cf8:	4907      	ldr	r1, [pc, #28]	; (8012d18 <__NVIC_EnableIRQ+0x38>)
 8012cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cfe:	095b      	lsrs	r3, r3, #5
 8012d00:	2001      	movs	r0, #1
 8012d02:	fa00 f202 	lsl.w	r2, r0, r2
 8012d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012d0a:	bf00      	nop
 8012d0c:	370c      	adds	r7, #12
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop
 8012d18:	e000e100 	.word	0xe000e100

08012d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	4603      	mov	r3, r0
 8012d24:	6039      	str	r1, [r7, #0]
 8012d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	db0a      	blt.n	8012d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	b2da      	uxtb	r2, r3
 8012d34:	490c      	ldr	r1, [pc, #48]	; (8012d68 <__NVIC_SetPriority+0x4c>)
 8012d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d3a:	0112      	lsls	r2, r2, #4
 8012d3c:	b2d2      	uxtb	r2, r2
 8012d3e:	440b      	add	r3, r1
 8012d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012d44:	e00a      	b.n	8012d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	b2da      	uxtb	r2, r3
 8012d4a:	4908      	ldr	r1, [pc, #32]	; (8012d6c <__NVIC_SetPriority+0x50>)
 8012d4c:	79fb      	ldrb	r3, [r7, #7]
 8012d4e:	f003 030f 	and.w	r3, r3, #15
 8012d52:	3b04      	subs	r3, #4
 8012d54:	0112      	lsls	r2, r2, #4
 8012d56:	b2d2      	uxtb	r2, r2
 8012d58:	440b      	add	r3, r1
 8012d5a:	761a      	strb	r2, [r3, #24]
}
 8012d5c:	bf00      	nop
 8012d5e:	370c      	adds	r7, #12
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr
 8012d68:	e000e100 	.word	0xe000e100
 8012d6c:	e000ed00 	.word	0xe000ed00

08012d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012d70:	b480      	push	{r7}
 8012d72:	b089      	sub	sp, #36	; 0x24
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	f003 0307 	and.w	r3, r3, #7
 8012d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	f1c3 0307 	rsb	r3, r3, #7
 8012d8a:	2b04      	cmp	r3, #4
 8012d8c:	bf28      	it	cs
 8012d8e:	2304      	movcs	r3, #4
 8012d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012d92:	69fb      	ldr	r3, [r7, #28]
 8012d94:	3304      	adds	r3, #4
 8012d96:	2b06      	cmp	r3, #6
 8012d98:	d902      	bls.n	8012da0 <NVIC_EncodePriority+0x30>
 8012d9a:	69fb      	ldr	r3, [r7, #28]
 8012d9c:	3b03      	subs	r3, #3
 8012d9e:	e000      	b.n	8012da2 <NVIC_EncodePriority+0x32>
 8012da0:	2300      	movs	r3, #0
 8012da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012da4:	f04f 32ff 	mov.w	r2, #4294967295
 8012da8:	69bb      	ldr	r3, [r7, #24]
 8012daa:	fa02 f303 	lsl.w	r3, r2, r3
 8012dae:	43da      	mvns	r2, r3
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	401a      	ands	r2, r3
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012db8:	f04f 31ff 	mov.w	r1, #4294967295
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8012dc2:	43d9      	mvns	r1, r3
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012dc8:	4313      	orrs	r3, r2
         );
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3724      	adds	r7, #36	; 0x24
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd4:	4770      	bx	lr

08012dd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012dd6:	b580      	push	{r7, lr}
 8012dd8:	b082      	sub	sp, #8
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f7ff ff4c 	bl	8012c7c <__NVIC_SetPriorityGrouping>
}
 8012de4:	bf00      	nop
 8012de6:	3708      	adds	r7, #8
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}

08012dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b086      	sub	sp, #24
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	4603      	mov	r3, r0
 8012df4:	60b9      	str	r1, [r7, #8]
 8012df6:	607a      	str	r2, [r7, #4]
 8012df8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8012dfe:	f7ff ff61 	bl	8012cc4 <__NVIC_GetPriorityGrouping>
 8012e02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	68b9      	ldr	r1, [r7, #8]
 8012e08:	6978      	ldr	r0, [r7, #20]
 8012e0a:	f7ff ffb1 	bl	8012d70 <NVIC_EncodePriority>
 8012e0e:	4602      	mov	r2, r0
 8012e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e14:	4611      	mov	r1, r2
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7ff ff80 	bl	8012d1c <__NVIC_SetPriority>
}
 8012e1c:	bf00      	nop
 8012e1e:	3718      	adds	r7, #24
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7ff ff54 	bl	8012ce0 <__NVIC_EnableIRQ>
}
 8012e38:	bf00      	nop
 8012e3a:	3708      	adds	r7, #8
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b086      	sub	sp, #24
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8012e4c:	f7ff face 	bl	80123ec <HAL_GetTick>
 8012e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d101      	bne.n	8012e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8012e58:	2301      	movs	r3, #1
 8012e5a:	e099      	b.n	8012f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2202      	movs	r2, #2
 8012e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2200      	movs	r2, #0
 8012e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	681a      	ldr	r2, [r3, #0]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	f022 0201 	bic.w	r2, r2, #1
 8012e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012e7c:	e00f      	b.n	8012e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012e7e:	f7ff fab5 	bl	80123ec <HAL_GetTick>
 8012e82:	4602      	mov	r2, r0
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	2b05      	cmp	r3, #5
 8012e8a:	d908      	bls.n	8012e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2220      	movs	r2, #32
 8012e90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2203      	movs	r2, #3
 8012e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8012e9a:	2303      	movs	r3, #3
 8012e9c:	e078      	b.n	8012f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f003 0301 	and.w	r3, r3, #1
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d1e8      	bne.n	8012e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012eb4:	697a      	ldr	r2, [r7, #20]
 8012eb6:	4b38      	ldr	r3, [pc, #224]	; (8012f98 <HAL_DMA_Init+0x158>)
 8012eb8:	4013      	ands	r3, r2
 8012eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	685a      	ldr	r2, [r3, #4]
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	689b      	ldr	r3, [r3, #8]
 8012ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	691b      	ldr	r3, [r3, #16]
 8012ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	699b      	ldr	r3, [r3, #24]
 8012edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6a1b      	ldr	r3, [r3, #32]
 8012ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012eea:	697a      	ldr	r2, [r7, #20]
 8012eec:	4313      	orrs	r3, r2
 8012eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ef4:	2b04      	cmp	r3, #4
 8012ef6:	d107      	bne.n	8012f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f00:	4313      	orrs	r3, r2
 8012f02:	697a      	ldr	r2, [r7, #20]
 8012f04:	4313      	orrs	r3, r2
 8012f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	697a      	ldr	r2, [r7, #20]
 8012f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	695b      	ldr	r3, [r3, #20]
 8012f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	f023 0307 	bic.w	r3, r3, #7
 8012f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f24:	697a      	ldr	r2, [r7, #20]
 8012f26:	4313      	orrs	r3, r2
 8012f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f2e:	2b04      	cmp	r3, #4
 8012f30:	d117      	bne.n	8012f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f36:	697a      	ldr	r2, [r7, #20]
 8012f38:	4313      	orrs	r3, r2
 8012f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d00e      	beq.n	8012f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f000 fb01 	bl	801354c <DMA_CheckFifoParam>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d008      	beq.n	8012f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2240      	movs	r2, #64	; 0x40
 8012f54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2201      	movs	r2, #1
 8012f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8012f5e:	2301      	movs	r3, #1
 8012f60:	e016      	b.n	8012f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	697a      	ldr	r2, [r7, #20]
 8012f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 fab8 	bl	80134e0 <DMA_CalcBaseAndBitshift>
 8012f70:	4603      	mov	r3, r0
 8012f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f78:	223f      	movs	r2, #63	; 0x3f
 8012f7a:	409a      	lsls	r2, r3
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2200      	movs	r2, #0
 8012f84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2201      	movs	r2, #1
 8012f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8012f8e:	2300      	movs	r3, #0
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3718      	adds	r7, #24
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	f010803f 	.word	0xf010803f

08012f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b086      	sub	sp, #24
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	60f8      	str	r0, [r7, #12]
 8012fa4:	60b9      	str	r1, [r7, #8]
 8012fa6:	607a      	str	r2, [r7, #4]
 8012fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012faa:	2300      	movs	r3, #0
 8012fac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012fba:	2b01      	cmp	r3, #1
 8012fbc:	d101      	bne.n	8012fc2 <HAL_DMA_Start_IT+0x26>
 8012fbe:	2302      	movs	r3, #2
 8012fc0:	e040      	b.n	8013044 <HAL_DMA_Start_IT+0xa8>
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012fd0:	b2db      	uxtb	r3, r3
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	d12f      	bne.n	8013036 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2202      	movs	r2, #2
 8012fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	687a      	ldr	r2, [r7, #4]
 8012fe8:	68b9      	ldr	r1, [r7, #8]
 8012fea:	68f8      	ldr	r0, [r7, #12]
 8012fec:	f000 fa4a 	bl	8013484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ff4:	223f      	movs	r2, #63	; 0x3f
 8012ff6:	409a      	lsls	r2, r3
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	681a      	ldr	r2, [r3, #0]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	f042 0216 	orr.w	r2, r2, #22
 801300a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013010:	2b00      	cmp	r3, #0
 8013012:	d007      	beq.n	8013024 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	681a      	ldr	r2, [r3, #0]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	f042 0208 	orr.w	r2, r2, #8
 8013022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	681a      	ldr	r2, [r3, #0]
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	f042 0201 	orr.w	r2, r2, #1
 8013032:	601a      	str	r2, [r3, #0]
 8013034:	e005      	b.n	8013042 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2200      	movs	r2, #0
 801303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801303e:	2302      	movs	r3, #2
 8013040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8013042:	7dfb      	ldrb	r3, [r7, #23]
}
 8013044:	4618      	mov	r0, r3
 8013046:	3718      	adds	r7, #24
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013058:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801305a:	f7ff f9c7 	bl	80123ec <HAL_GetTick>
 801305e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013066:	b2db      	uxtb	r3, r3
 8013068:	2b02      	cmp	r3, #2
 801306a:	d008      	beq.n	801307e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2280      	movs	r2, #128	; 0x80
 8013070:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2200      	movs	r2, #0
 8013076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801307a:	2301      	movs	r3, #1
 801307c:	e052      	b.n	8013124 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	f022 0216 	bic.w	r2, r2, #22
 801308c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	695a      	ldr	r2, [r3, #20]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801309c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d103      	bne.n	80130ae <HAL_DMA_Abort+0x62>
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d007      	beq.n	80130be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	681a      	ldr	r2, [r3, #0]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	f022 0208 	bic.w	r2, r2, #8
 80130bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	681a      	ldr	r2, [r3, #0]
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	f022 0201 	bic.w	r2, r2, #1
 80130cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80130ce:	e013      	b.n	80130f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80130d0:	f7ff f98c 	bl	80123ec <HAL_GetTick>
 80130d4:	4602      	mov	r2, r0
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	1ad3      	subs	r3, r2, r3
 80130da:	2b05      	cmp	r3, #5
 80130dc:	d90c      	bls.n	80130f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2220      	movs	r2, #32
 80130e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2203      	movs	r2, #3
 80130e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2200      	movs	r2, #0
 80130f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80130f4:	2303      	movs	r3, #3
 80130f6:	e015      	b.n	8013124 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	f003 0301 	and.w	r3, r3, #1
 8013102:	2b00      	cmp	r3, #0
 8013104:	d1e4      	bne.n	80130d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801310a:	223f      	movs	r2, #63	; 0x3f
 801310c:	409a      	lsls	r2, r3
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2201      	movs	r2, #1
 8013116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2200      	movs	r2, #0
 801311e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8013122:	2300      	movs	r3, #0
}
 8013124:	4618      	mov	r0, r3
 8013126:	3710      	adds	r7, #16
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}

0801312c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801312c:	b480      	push	{r7}
 801312e:	b083      	sub	sp, #12
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801313a:	b2db      	uxtb	r3, r3
 801313c:	2b02      	cmp	r3, #2
 801313e:	d004      	beq.n	801314a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2280      	movs	r2, #128	; 0x80
 8013144:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8013146:	2301      	movs	r3, #1
 8013148:	e00c      	b.n	8013164 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2205      	movs	r2, #5
 801314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	f022 0201 	bic.w	r2, r2, #1
 8013160:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8013162:	2300      	movs	r3, #0
}
 8013164:	4618      	mov	r0, r3
 8013166:	370c      	adds	r7, #12
 8013168:	46bd      	mov	sp, r7
 801316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316e:	4770      	bx	lr

08013170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b086      	sub	sp, #24
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8013178:	2300      	movs	r3, #0
 801317a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801317c:	4b92      	ldr	r3, [pc, #584]	; (80133c8 <HAL_DMA_IRQHandler+0x258>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	4a92      	ldr	r2, [pc, #584]	; (80133cc <HAL_DMA_IRQHandler+0x25c>)
 8013182:	fba2 2303 	umull	r2, r3, r2, r3
 8013186:	0a9b      	lsrs	r3, r3, #10
 8013188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801318e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801319a:	2208      	movs	r2, #8
 801319c:	409a      	lsls	r2, r3
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	4013      	ands	r3, r2
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d01a      	beq.n	80131dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	f003 0304 	and.w	r3, r3, #4
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d013      	beq.n	80131dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	681a      	ldr	r2, [r3, #0]
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	f022 0204 	bic.w	r2, r2, #4
 80131c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131c8:	2208      	movs	r2, #8
 80131ca:	409a      	lsls	r2, r3
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131d4:	f043 0201 	orr.w	r2, r3, #1
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131e0:	2201      	movs	r2, #1
 80131e2:	409a      	lsls	r2, r3
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	4013      	ands	r3, r2
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d012      	beq.n	8013212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	695b      	ldr	r3, [r3, #20]
 80131f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d00b      	beq.n	8013212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131fe:	2201      	movs	r2, #1
 8013200:	409a      	lsls	r2, r3
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801320a:	f043 0202 	orr.w	r2, r3, #2
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013216:	2204      	movs	r2, #4
 8013218:	409a      	lsls	r2, r3
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	4013      	ands	r3, r2
 801321e:	2b00      	cmp	r3, #0
 8013220:	d012      	beq.n	8013248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	f003 0302 	and.w	r3, r3, #2
 801322c:	2b00      	cmp	r3, #0
 801322e:	d00b      	beq.n	8013248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013234:	2204      	movs	r2, #4
 8013236:	409a      	lsls	r2, r3
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013240:	f043 0204 	orr.w	r2, r3, #4
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801324c:	2210      	movs	r2, #16
 801324e:	409a      	lsls	r2, r3
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	4013      	ands	r3, r2
 8013254:	2b00      	cmp	r3, #0
 8013256:	d043      	beq.n	80132e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	f003 0308 	and.w	r3, r3, #8
 8013262:	2b00      	cmp	r3, #0
 8013264:	d03c      	beq.n	80132e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801326a:	2210      	movs	r2, #16
 801326c:	409a      	lsls	r2, r3
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801327c:	2b00      	cmp	r3, #0
 801327e:	d018      	beq.n	80132b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801328a:	2b00      	cmp	r3, #0
 801328c:	d108      	bne.n	80132a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013292:	2b00      	cmp	r3, #0
 8013294:	d024      	beq.n	80132e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	4798      	blx	r3
 801329e:	e01f      	b.n	80132e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d01b      	beq.n	80132e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	4798      	blx	r3
 80132b0:	e016      	b.n	80132e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d107      	bne.n	80132d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	681a      	ldr	r2, [r3, #0]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f022 0208 	bic.w	r2, r2, #8
 80132ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d003      	beq.n	80132e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132e4:	2220      	movs	r2, #32
 80132e6:	409a      	lsls	r2, r3
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	4013      	ands	r3, r2
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f000 808e 	beq.w	801340e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f003 0310 	and.w	r3, r3, #16
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	f000 8086 	beq.w	801340e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013306:	2220      	movs	r2, #32
 8013308:	409a      	lsls	r2, r3
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013314:	b2db      	uxtb	r3, r3
 8013316:	2b05      	cmp	r3, #5
 8013318:	d136      	bne.n	8013388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	681a      	ldr	r2, [r3, #0]
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	f022 0216 	bic.w	r2, r2, #22
 8013328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	695a      	ldr	r2, [r3, #20]
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801333e:	2b00      	cmp	r3, #0
 8013340:	d103      	bne.n	801334a <HAL_DMA_IRQHandler+0x1da>
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013346:	2b00      	cmp	r3, #0
 8013348:	d007      	beq.n	801335a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	681a      	ldr	r2, [r3, #0]
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	f022 0208 	bic.w	r2, r2, #8
 8013358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801335e:	223f      	movs	r2, #63	; 0x3f
 8013360:	409a      	lsls	r2, r3
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2201      	movs	r2, #1
 801336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2200      	movs	r2, #0
 8013372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801337a:	2b00      	cmp	r3, #0
 801337c:	d07d      	beq.n	801347a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	4798      	blx	r3
        }
        return;
 8013386:	e078      	b.n	801347a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013392:	2b00      	cmp	r3, #0
 8013394:	d01c      	beq.n	80133d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d108      	bne.n	80133b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d030      	beq.n	801340e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	4798      	blx	r3
 80133b4:	e02b      	b.n	801340e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d027      	beq.n	801340e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	4798      	blx	r3
 80133c6:	e022      	b.n	801340e <HAL_DMA_IRQHandler+0x29e>
 80133c8:	20000000 	.word	0x20000000
 80133cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d10f      	bne.n	80133fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	681a      	ldr	r2, [r3, #0]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f022 0210 	bic.w	r2, r2, #16
 80133ec:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2201      	movs	r2, #1
 80133f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2200      	movs	r2, #0
 80133fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013402:	2b00      	cmp	r3, #0
 8013404:	d003      	beq.n	801340e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013412:	2b00      	cmp	r3, #0
 8013414:	d032      	beq.n	801347c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801341a:	f003 0301 	and.w	r3, r3, #1
 801341e:	2b00      	cmp	r3, #0
 8013420:	d022      	beq.n	8013468 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2205      	movs	r2, #5
 8013426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	f022 0201 	bic.w	r2, r2, #1
 8013438:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	3301      	adds	r3, #1
 801343e:	60bb      	str	r3, [r7, #8]
 8013440:	697a      	ldr	r2, [r7, #20]
 8013442:	429a      	cmp	r2, r3
 8013444:	d307      	bcc.n	8013456 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f003 0301 	and.w	r3, r3, #1
 8013450:	2b00      	cmp	r3, #0
 8013452:	d1f2      	bne.n	801343a <HAL_DMA_IRQHandler+0x2ca>
 8013454:	e000      	b.n	8013458 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8013456:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2201      	movs	r2, #1
 801345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2200      	movs	r2, #0
 8013464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801346c:	2b00      	cmp	r3, #0
 801346e:	d005      	beq.n	801347c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	4798      	blx	r3
 8013478:	e000      	b.n	801347c <HAL_DMA_IRQHandler+0x30c>
        return;
 801347a:	bf00      	nop
    }
  }
}
 801347c:	3718      	adds	r7, #24
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop

08013484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013484:	b480      	push	{r7}
 8013486:	b085      	sub	sp, #20
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
 8013490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	681a      	ldr	r2, [r3, #0]
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80134a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	683a      	ldr	r2, [r7, #0]
 80134a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	2b40      	cmp	r3, #64	; 0x40
 80134b0:	d108      	bne.n	80134c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	68ba      	ldr	r2, [r7, #8]
 80134c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80134c2:	e007      	b.n	80134d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	68ba      	ldr	r2, [r7, #8]
 80134ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	687a      	ldr	r2, [r7, #4]
 80134d2:	60da      	str	r2, [r3, #12]
}
 80134d4:	bf00      	nop
 80134d6:	3714      	adds	r7, #20
 80134d8:	46bd      	mov	sp, r7
 80134da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134de:	4770      	bx	lr

080134e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80134e0:	b480      	push	{r7}
 80134e2:	b085      	sub	sp, #20
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	3b10      	subs	r3, #16
 80134f0:	4a14      	ldr	r2, [pc, #80]	; (8013544 <DMA_CalcBaseAndBitshift+0x64>)
 80134f2:	fba2 2303 	umull	r2, r3, r2, r3
 80134f6:	091b      	lsrs	r3, r3, #4
 80134f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80134fa:	4a13      	ldr	r2, [pc, #76]	; (8013548 <DMA_CalcBaseAndBitshift+0x68>)
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	4413      	add	r3, r2
 8013500:	781b      	ldrb	r3, [r3, #0]
 8013502:	461a      	mov	r2, r3
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	2b03      	cmp	r3, #3
 801350c:	d909      	bls.n	8013522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8013516:	f023 0303 	bic.w	r3, r3, #3
 801351a:	1d1a      	adds	r2, r3, #4
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	659a      	str	r2, [r3, #88]	; 0x58
 8013520:	e007      	b.n	8013532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801352a:	f023 0303 	bic.w	r3, r3, #3
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8013536:	4618      	mov	r0, r3
 8013538:	3714      	adds	r7, #20
 801353a:	46bd      	mov	sp, r7
 801353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013540:	4770      	bx	lr
 8013542:	bf00      	nop
 8013544:	aaaaaaab 	.word	0xaaaaaaab
 8013548:	080270a8 	.word	0x080270a8

0801354c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801354c:	b480      	push	{r7}
 801354e:	b085      	sub	sp, #20
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013554:	2300      	movs	r3, #0
 8013556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801355c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	699b      	ldr	r3, [r3, #24]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d11f      	bne.n	80135a6 <DMA_CheckFifoParam+0x5a>
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	2b03      	cmp	r3, #3
 801356a:	d856      	bhi.n	801361a <DMA_CheckFifoParam+0xce>
 801356c:	a201      	add	r2, pc, #4	; (adr r2, 8013574 <DMA_CheckFifoParam+0x28>)
 801356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013572:	bf00      	nop
 8013574:	08013585 	.word	0x08013585
 8013578:	08013597 	.word	0x08013597
 801357c:	08013585 	.word	0x08013585
 8013580:	0801361b 	.word	0x0801361b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801358c:	2b00      	cmp	r3, #0
 801358e:	d046      	beq.n	801361e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8013590:	2301      	movs	r3, #1
 8013592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013594:	e043      	b.n	801361e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801359a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801359e:	d140      	bne.n	8013622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80135a0:	2301      	movs	r3, #1
 80135a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80135a4:	e03d      	b.n	8013622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	699b      	ldr	r3, [r3, #24]
 80135aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80135ae:	d121      	bne.n	80135f4 <DMA_CheckFifoParam+0xa8>
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	2b03      	cmp	r3, #3
 80135b4:	d837      	bhi.n	8013626 <DMA_CheckFifoParam+0xda>
 80135b6:	a201      	add	r2, pc, #4	; (adr r2, 80135bc <DMA_CheckFifoParam+0x70>)
 80135b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135bc:	080135cd 	.word	0x080135cd
 80135c0:	080135d3 	.word	0x080135d3
 80135c4:	080135cd 	.word	0x080135cd
 80135c8:	080135e5 	.word	0x080135e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80135cc:	2301      	movs	r3, #1
 80135ce:	73fb      	strb	r3, [r7, #15]
      break;
 80135d0:	e030      	b.n	8013634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d025      	beq.n	801362a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80135de:	2301      	movs	r3, #1
 80135e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80135e2:	e022      	b.n	801362a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80135ec:	d11f      	bne.n	801362e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80135ee:	2301      	movs	r3, #1
 80135f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80135f2:	e01c      	b.n	801362e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	2b02      	cmp	r3, #2
 80135f8:	d903      	bls.n	8013602 <DMA_CheckFifoParam+0xb6>
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	2b03      	cmp	r3, #3
 80135fe:	d003      	beq.n	8013608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8013600:	e018      	b.n	8013634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8013602:	2301      	movs	r3, #1
 8013604:	73fb      	strb	r3, [r7, #15]
      break;
 8013606:	e015      	b.n	8013634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801360c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013610:	2b00      	cmp	r3, #0
 8013612:	d00e      	beq.n	8013632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8013614:	2301      	movs	r3, #1
 8013616:	73fb      	strb	r3, [r7, #15]
      break;
 8013618:	e00b      	b.n	8013632 <DMA_CheckFifoParam+0xe6>
      break;
 801361a:	bf00      	nop
 801361c:	e00a      	b.n	8013634 <DMA_CheckFifoParam+0xe8>
      break;
 801361e:	bf00      	nop
 8013620:	e008      	b.n	8013634 <DMA_CheckFifoParam+0xe8>
      break;
 8013622:	bf00      	nop
 8013624:	e006      	b.n	8013634 <DMA_CheckFifoParam+0xe8>
      break;
 8013626:	bf00      	nop
 8013628:	e004      	b.n	8013634 <DMA_CheckFifoParam+0xe8>
      break;
 801362a:	bf00      	nop
 801362c:	e002      	b.n	8013634 <DMA_CheckFifoParam+0xe8>
      break;   
 801362e:	bf00      	nop
 8013630:	e000      	b.n	8013634 <DMA_CheckFifoParam+0xe8>
      break;
 8013632:	bf00      	nop
    }
  } 
  
  return status; 
 8013634:	7bfb      	ldrb	r3, [r7, #15]
}
 8013636:	4618      	mov	r0, r3
 8013638:	3714      	adds	r7, #20
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr
 8013642:	bf00      	nop

08013644 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b086      	sub	sp, #24
 8013648:	af00      	add	r7, sp, #0
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013652:	2301      	movs	r3, #1
 8013654:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013656:	4b23      	ldr	r3, [pc, #140]	; (80136e4 <HAL_FLASH_Program+0xa0>)
 8013658:	7e1b      	ldrb	r3, [r3, #24]
 801365a:	2b01      	cmp	r3, #1
 801365c:	d101      	bne.n	8013662 <HAL_FLASH_Program+0x1e>
 801365e:	2302      	movs	r3, #2
 8013660:	e03b      	b.n	80136da <HAL_FLASH_Program+0x96>
 8013662:	4b20      	ldr	r3, [pc, #128]	; (80136e4 <HAL_FLASH_Program+0xa0>)
 8013664:	2201      	movs	r2, #1
 8013666:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013668:	f24c 3050 	movw	r0, #50000	; 0xc350
 801366c:	f000 f860 	bl	8013730 <FLASH_WaitForLastOperation>
 8013670:	4603      	mov	r3, r0
 8013672:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8013674:	7dfb      	ldrb	r3, [r7, #23]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d12b      	bne.n	80136d2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d105      	bne.n	801368c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8013680:	783b      	ldrb	r3, [r7, #0]
 8013682:	4619      	mov	r1, r3
 8013684:	68b8      	ldr	r0, [r7, #8]
 8013686:	f000 f90b 	bl	80138a0 <FLASH_Program_Byte>
 801368a:	e016      	b.n	80136ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	2b01      	cmp	r3, #1
 8013690:	d105      	bne.n	801369e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8013692:	883b      	ldrh	r3, [r7, #0]
 8013694:	4619      	mov	r1, r3
 8013696:	68b8      	ldr	r0, [r7, #8]
 8013698:	f000 f8de 	bl	8013858 <FLASH_Program_HalfWord>
 801369c:	e00d      	b.n	80136ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	2b02      	cmp	r3, #2
 80136a2:	d105      	bne.n	80136b0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	4619      	mov	r1, r3
 80136a8:	68b8      	ldr	r0, [r7, #8]
 80136aa:	f000 f8b3 	bl	8013814 <FLASH_Program_Word>
 80136ae:	e004      	b.n	80136ba <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80136b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136b4:	68b8      	ldr	r0, [r7, #8]
 80136b6:	f000 f87b 	bl	80137b0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80136ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80136be:	f000 f837 	bl	8013730 <FLASH_WaitForLastOperation>
 80136c2:	4603      	mov	r3, r0
 80136c4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80136c6:	4b08      	ldr	r3, [pc, #32]	; (80136e8 <HAL_FLASH_Program+0xa4>)
 80136c8:	691b      	ldr	r3, [r3, #16]
 80136ca:	4a07      	ldr	r2, [pc, #28]	; (80136e8 <HAL_FLASH_Program+0xa4>)
 80136cc:	f023 0301 	bic.w	r3, r3, #1
 80136d0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80136d2:	4b04      	ldr	r3, [pc, #16]	; (80136e4 <HAL_FLASH_Program+0xa0>)
 80136d4:	2200      	movs	r2, #0
 80136d6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80136d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3718      	adds	r7, #24
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	20004cec 	.word	0x20004cec
 80136e8:	40023c00 	.word	0x40023c00

080136ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80136f2:	2300      	movs	r3, #0
 80136f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80136f6:	4b0b      	ldr	r3, [pc, #44]	; (8013724 <HAL_FLASH_Unlock+0x38>)
 80136f8:	691b      	ldr	r3, [r3, #16]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	da0b      	bge.n	8013716 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80136fe:	4b09      	ldr	r3, [pc, #36]	; (8013724 <HAL_FLASH_Unlock+0x38>)
 8013700:	4a09      	ldr	r2, [pc, #36]	; (8013728 <HAL_FLASH_Unlock+0x3c>)
 8013702:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8013704:	4b07      	ldr	r3, [pc, #28]	; (8013724 <HAL_FLASH_Unlock+0x38>)
 8013706:	4a09      	ldr	r2, [pc, #36]	; (801372c <HAL_FLASH_Unlock+0x40>)
 8013708:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801370a:	4b06      	ldr	r3, [pc, #24]	; (8013724 <HAL_FLASH_Unlock+0x38>)
 801370c:	691b      	ldr	r3, [r3, #16]
 801370e:	2b00      	cmp	r3, #0
 8013710:	da01      	bge.n	8013716 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8013712:	2301      	movs	r3, #1
 8013714:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8013716:	79fb      	ldrb	r3, [r7, #7]
}
 8013718:	4618      	mov	r0, r3
 801371a:	370c      	adds	r7, #12
 801371c:	46bd      	mov	sp, r7
 801371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013722:	4770      	bx	lr
 8013724:	40023c00 	.word	0x40023c00
 8013728:	45670123 	.word	0x45670123
 801372c:	cdef89ab 	.word	0xcdef89ab

08013730 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8013730:	b580      	push	{r7, lr}
 8013732:	b084      	sub	sp, #16
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013738:	2300      	movs	r3, #0
 801373a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801373c:	4b1a      	ldr	r3, [pc, #104]	; (80137a8 <FLASH_WaitForLastOperation+0x78>)
 801373e:	2200      	movs	r2, #0
 8013740:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8013742:	f7fe fe53 	bl	80123ec <HAL_GetTick>
 8013746:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8013748:	e010      	b.n	801376c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013750:	d00c      	beq.n	801376c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d007      	beq.n	8013768 <FLASH_WaitForLastOperation+0x38>
 8013758:	f7fe fe48 	bl	80123ec <HAL_GetTick>
 801375c:	4602      	mov	r2, r0
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	1ad3      	subs	r3, r2, r3
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	429a      	cmp	r2, r3
 8013766:	d201      	bcs.n	801376c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8013768:	2303      	movs	r3, #3
 801376a:	e019      	b.n	80137a0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801376c:	4b0f      	ldr	r3, [pc, #60]	; (80137ac <FLASH_WaitForLastOperation+0x7c>)
 801376e:	68db      	ldr	r3, [r3, #12]
 8013770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013774:	2b00      	cmp	r3, #0
 8013776:	d1e8      	bne.n	801374a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8013778:	4b0c      	ldr	r3, [pc, #48]	; (80137ac <FLASH_WaitForLastOperation+0x7c>)
 801377a:	68db      	ldr	r3, [r3, #12]
 801377c:	f003 0301 	and.w	r3, r3, #1
 8013780:	2b00      	cmp	r3, #0
 8013782:	d002      	beq.n	801378a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8013784:	4b09      	ldr	r3, [pc, #36]	; (80137ac <FLASH_WaitForLastOperation+0x7c>)
 8013786:	2201      	movs	r2, #1
 8013788:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801378a:	4b08      	ldr	r3, [pc, #32]	; (80137ac <FLASH_WaitForLastOperation+0x7c>)
 801378c:	68db      	ldr	r3, [r3, #12]
 801378e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8013792:	2b00      	cmp	r3, #0
 8013794:	d003      	beq.n	801379e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8013796:	f000 f8a5 	bl	80138e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801379a:	2301      	movs	r3, #1
 801379c:	e000      	b.n	80137a0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801379e:	2300      	movs	r3, #0
  
}  
 80137a0:	4618      	mov	r0, r3
 80137a2:	3710      	adds	r7, #16
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	20004cec 	.word	0x20004cec
 80137ac:	40023c00 	.word	0x40023c00

080137b0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80137b0:	b480      	push	{r7}
 80137b2:	b085      	sub	sp, #20
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	60f8      	str	r0, [r7, #12]
 80137b8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80137bc:	4b14      	ldr	r3, [pc, #80]	; (8013810 <FLASH_Program_DoubleWord+0x60>)
 80137be:	691b      	ldr	r3, [r3, #16]
 80137c0:	4a13      	ldr	r2, [pc, #76]	; (8013810 <FLASH_Program_DoubleWord+0x60>)
 80137c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80137c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80137c8:	4b11      	ldr	r3, [pc, #68]	; (8013810 <FLASH_Program_DoubleWord+0x60>)
 80137ca:	691b      	ldr	r3, [r3, #16]
 80137cc:	4a10      	ldr	r2, [pc, #64]	; (8013810 <FLASH_Program_DoubleWord+0x60>)
 80137ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80137d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80137d4:	4b0e      	ldr	r3, [pc, #56]	; (8013810 <FLASH_Program_DoubleWord+0x60>)
 80137d6:	691b      	ldr	r3, [r3, #16]
 80137d8:	4a0d      	ldr	r2, [pc, #52]	; (8013810 <FLASH_Program_DoubleWord+0x60>)
 80137da:	f043 0301 	orr.w	r3, r3, #1
 80137de:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	683a      	ldr	r2, [r7, #0]
 80137e4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80137e6:	f3bf 8f6f 	isb	sy
}
 80137ea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80137ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80137f0:	f04f 0200 	mov.w	r2, #0
 80137f4:	f04f 0300 	mov.w	r3, #0
 80137f8:	000a      	movs	r2, r1
 80137fa:	2300      	movs	r3, #0
 80137fc:	68f9      	ldr	r1, [r7, #12]
 80137fe:	3104      	adds	r1, #4
 8013800:	4613      	mov	r3, r2
 8013802:	600b      	str	r3, [r1, #0]
}
 8013804:	bf00      	nop
 8013806:	3714      	adds	r7, #20
 8013808:	46bd      	mov	sp, r7
 801380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380e:	4770      	bx	lr
 8013810:	40023c00 	.word	0x40023c00

08013814 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801381e:	4b0d      	ldr	r3, [pc, #52]	; (8013854 <FLASH_Program_Word+0x40>)
 8013820:	691b      	ldr	r3, [r3, #16]
 8013822:	4a0c      	ldr	r2, [pc, #48]	; (8013854 <FLASH_Program_Word+0x40>)
 8013824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013828:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801382a:	4b0a      	ldr	r3, [pc, #40]	; (8013854 <FLASH_Program_Word+0x40>)
 801382c:	691b      	ldr	r3, [r3, #16]
 801382e:	4a09      	ldr	r2, [pc, #36]	; (8013854 <FLASH_Program_Word+0x40>)
 8013830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013834:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013836:	4b07      	ldr	r3, [pc, #28]	; (8013854 <FLASH_Program_Word+0x40>)
 8013838:	691b      	ldr	r3, [r3, #16]
 801383a:	4a06      	ldr	r2, [pc, #24]	; (8013854 <FLASH_Program_Word+0x40>)
 801383c:	f043 0301 	orr.w	r3, r3, #1
 8013840:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	683a      	ldr	r2, [r7, #0]
 8013846:	601a      	str	r2, [r3, #0]
}
 8013848:	bf00      	nop
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr
 8013854:	40023c00 	.word	0x40023c00

08013858 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8013858:	b480      	push	{r7}
 801385a:	b083      	sub	sp, #12
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	460b      	mov	r3, r1
 8013862:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013864:	4b0d      	ldr	r3, [pc, #52]	; (801389c <FLASH_Program_HalfWord+0x44>)
 8013866:	691b      	ldr	r3, [r3, #16]
 8013868:	4a0c      	ldr	r2, [pc, #48]	; (801389c <FLASH_Program_HalfWord+0x44>)
 801386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801386e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8013870:	4b0a      	ldr	r3, [pc, #40]	; (801389c <FLASH_Program_HalfWord+0x44>)
 8013872:	691b      	ldr	r3, [r3, #16]
 8013874:	4a09      	ldr	r2, [pc, #36]	; (801389c <FLASH_Program_HalfWord+0x44>)
 8013876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801387a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801387c:	4b07      	ldr	r3, [pc, #28]	; (801389c <FLASH_Program_HalfWord+0x44>)
 801387e:	691b      	ldr	r3, [r3, #16]
 8013880:	4a06      	ldr	r2, [pc, #24]	; (801389c <FLASH_Program_HalfWord+0x44>)
 8013882:	f043 0301 	orr.w	r3, r3, #1
 8013886:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	887a      	ldrh	r2, [r7, #2]
 801388c:	801a      	strh	r2, [r3, #0]
}
 801388e:	bf00      	nop
 8013890:	370c      	adds	r7, #12
 8013892:	46bd      	mov	sp, r7
 8013894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013898:	4770      	bx	lr
 801389a:	bf00      	nop
 801389c:	40023c00 	.word	0x40023c00

080138a0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80138a0:	b480      	push	{r7}
 80138a2:	b083      	sub	sp, #12
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	460b      	mov	r3, r1
 80138aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80138ac:	4b0c      	ldr	r3, [pc, #48]	; (80138e0 <FLASH_Program_Byte+0x40>)
 80138ae:	691b      	ldr	r3, [r3, #16]
 80138b0:	4a0b      	ldr	r2, [pc, #44]	; (80138e0 <FLASH_Program_Byte+0x40>)
 80138b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80138b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80138b8:	4b09      	ldr	r3, [pc, #36]	; (80138e0 <FLASH_Program_Byte+0x40>)
 80138ba:	4a09      	ldr	r2, [pc, #36]	; (80138e0 <FLASH_Program_Byte+0x40>)
 80138bc:	691b      	ldr	r3, [r3, #16]
 80138be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80138c0:	4b07      	ldr	r3, [pc, #28]	; (80138e0 <FLASH_Program_Byte+0x40>)
 80138c2:	691b      	ldr	r3, [r3, #16]
 80138c4:	4a06      	ldr	r2, [pc, #24]	; (80138e0 <FLASH_Program_Byte+0x40>)
 80138c6:	f043 0301 	orr.w	r3, r3, #1
 80138ca:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	78fa      	ldrb	r2, [r7, #3]
 80138d0:	701a      	strb	r2, [r3, #0]
}
 80138d2:	bf00      	nop
 80138d4:	370c      	adds	r7, #12
 80138d6:	46bd      	mov	sp, r7
 80138d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138dc:	4770      	bx	lr
 80138de:	bf00      	nop
 80138e0:	40023c00 	.word	0x40023c00

080138e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80138e4:	b480      	push	{r7}
 80138e6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80138e8:	4b2f      	ldr	r3, [pc, #188]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 80138ea:	68db      	ldr	r3, [r3, #12]
 80138ec:	f003 0310 	and.w	r3, r3, #16
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d008      	beq.n	8013906 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80138f4:	4b2d      	ldr	r3, [pc, #180]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 80138f6:	69db      	ldr	r3, [r3, #28]
 80138f8:	f043 0310 	orr.w	r3, r3, #16
 80138fc:	4a2b      	ldr	r2, [pc, #172]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 80138fe:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8013900:	4b29      	ldr	r3, [pc, #164]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 8013902:	2210      	movs	r2, #16
 8013904:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8013906:	4b28      	ldr	r3, [pc, #160]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	f003 0320 	and.w	r3, r3, #32
 801390e:	2b00      	cmp	r3, #0
 8013910:	d008      	beq.n	8013924 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8013912:	4b26      	ldr	r3, [pc, #152]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 8013914:	69db      	ldr	r3, [r3, #28]
 8013916:	f043 0308 	orr.w	r3, r3, #8
 801391a:	4a24      	ldr	r2, [pc, #144]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 801391c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801391e:	4b22      	ldr	r3, [pc, #136]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 8013920:	2220      	movs	r2, #32
 8013922:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8013924:	4b20      	ldr	r3, [pc, #128]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801392c:	2b00      	cmp	r3, #0
 801392e:	d008      	beq.n	8013942 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8013930:	4b1e      	ldr	r3, [pc, #120]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 8013932:	69db      	ldr	r3, [r3, #28]
 8013934:	f043 0304 	orr.w	r3, r3, #4
 8013938:	4a1c      	ldr	r2, [pc, #112]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 801393a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801393c:	4b1a      	ldr	r3, [pc, #104]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 801393e:	2240      	movs	r2, #64	; 0x40
 8013940:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8013942:	4b19      	ldr	r3, [pc, #100]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 8013944:	68db      	ldr	r3, [r3, #12]
 8013946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801394a:	2b00      	cmp	r3, #0
 801394c:	d008      	beq.n	8013960 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801394e:	4b17      	ldr	r3, [pc, #92]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 8013950:	69db      	ldr	r3, [r3, #28]
 8013952:	f043 0302 	orr.w	r3, r3, #2
 8013956:	4a15      	ldr	r2, [pc, #84]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 8013958:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801395a:	4b13      	ldr	r3, [pc, #76]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 801395c:	2280      	movs	r2, #128	; 0x80
 801395e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8013960:	4b11      	ldr	r3, [pc, #68]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013968:	2b00      	cmp	r3, #0
 801396a:	d009      	beq.n	8013980 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801396c:	4b0f      	ldr	r3, [pc, #60]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 801396e:	69db      	ldr	r3, [r3, #28]
 8013970:	f043 0301 	orr.w	r3, r3, #1
 8013974:	4a0d      	ldr	r2, [pc, #52]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 8013976:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8013978:	4b0b      	ldr	r3, [pc, #44]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 801397a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801397e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8013980:	4b09      	ldr	r3, [pc, #36]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 8013982:	68db      	ldr	r3, [r3, #12]
 8013984:	f003 0302 	and.w	r3, r3, #2
 8013988:	2b00      	cmp	r3, #0
 801398a:	d008      	beq.n	801399e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801398c:	4b07      	ldr	r3, [pc, #28]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 801398e:	69db      	ldr	r3, [r3, #28]
 8013990:	f043 0320 	orr.w	r3, r3, #32
 8013994:	4a05      	ldr	r2, [pc, #20]	; (80139ac <FLASH_SetErrorCode+0xc8>)
 8013996:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8013998:	4b03      	ldr	r3, [pc, #12]	; (80139a8 <FLASH_SetErrorCode+0xc4>)
 801399a:	2202      	movs	r2, #2
 801399c:	60da      	str	r2, [r3, #12]
  }
}
 801399e:	bf00      	nop
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr
 80139a8:	40023c00 	.word	0x40023c00
 80139ac:	20004cec 	.word	0x20004cec

080139b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80139b0:	b480      	push	{r7}
 80139b2:	b085      	sub	sp, #20
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	460b      	mov	r3, r1
 80139ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80139bc:	2300      	movs	r3, #0
 80139be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80139c0:	78fb      	ldrb	r3, [r7, #3]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d102      	bne.n	80139cc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80139c6:	2300      	movs	r3, #0
 80139c8:	60fb      	str	r3, [r7, #12]
 80139ca:	e010      	b.n	80139ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80139cc:	78fb      	ldrb	r3, [r7, #3]
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	d103      	bne.n	80139da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80139d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139d6:	60fb      	str	r3, [r7, #12]
 80139d8:	e009      	b.n	80139ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80139da:	78fb      	ldrb	r3, [r7, #3]
 80139dc:	2b02      	cmp	r3, #2
 80139de:	d103      	bne.n	80139e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80139e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80139e4:	60fb      	str	r3, [r7, #12]
 80139e6:	e002      	b.n	80139ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80139e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80139ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80139ee:	4b13      	ldr	r3, [pc, #76]	; (8013a3c <FLASH_Erase_Sector+0x8c>)
 80139f0:	691b      	ldr	r3, [r3, #16]
 80139f2:	4a12      	ldr	r2, [pc, #72]	; (8013a3c <FLASH_Erase_Sector+0x8c>)
 80139f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80139f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80139fa:	4b10      	ldr	r3, [pc, #64]	; (8013a3c <FLASH_Erase_Sector+0x8c>)
 80139fc:	691a      	ldr	r2, [r3, #16]
 80139fe:	490f      	ldr	r1, [pc, #60]	; (8013a3c <FLASH_Erase_Sector+0x8c>)
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	4313      	orrs	r3, r2
 8013a04:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8013a06:	4b0d      	ldr	r3, [pc, #52]	; (8013a3c <FLASH_Erase_Sector+0x8c>)
 8013a08:	691b      	ldr	r3, [r3, #16]
 8013a0a:	4a0c      	ldr	r2, [pc, #48]	; (8013a3c <FLASH_Erase_Sector+0x8c>)
 8013a0c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8013a10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8013a12:	4b0a      	ldr	r3, [pc, #40]	; (8013a3c <FLASH_Erase_Sector+0x8c>)
 8013a14:	691a      	ldr	r2, [r3, #16]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	00db      	lsls	r3, r3, #3
 8013a1a:	4313      	orrs	r3, r2
 8013a1c:	4a07      	ldr	r2, [pc, #28]	; (8013a3c <FLASH_Erase_Sector+0x8c>)
 8013a1e:	f043 0302 	orr.w	r3, r3, #2
 8013a22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8013a24:	4b05      	ldr	r3, [pc, #20]	; (8013a3c <FLASH_Erase_Sector+0x8c>)
 8013a26:	691b      	ldr	r3, [r3, #16]
 8013a28:	4a04      	ldr	r2, [pc, #16]	; (8013a3c <FLASH_Erase_Sector+0x8c>)
 8013a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013a2e:	6113      	str	r3, [r2, #16]
}
 8013a30:	bf00      	nop
 8013a32:	3714      	adds	r7, #20
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr
 8013a3c:	40023c00 	.word	0x40023c00

08013a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013a40:	b480      	push	{r7}
 8013a42:	b089      	sub	sp, #36	; 0x24
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8013a52:	2300      	movs	r3, #0
 8013a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013a56:	2300      	movs	r3, #0
 8013a58:	61fb      	str	r3, [r7, #28]
 8013a5a:	e165      	b.n	8013d28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	69fb      	ldr	r3, [r7, #28]
 8013a60:	fa02 f303 	lsl.w	r3, r2, r3
 8013a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8013a66:	683b      	ldr	r3, [r7, #0]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	697a      	ldr	r2, [r7, #20]
 8013a6c:	4013      	ands	r3, r2
 8013a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8013a70:	693a      	ldr	r2, [r7, #16]
 8013a72:	697b      	ldr	r3, [r7, #20]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	f040 8154 	bne.w	8013d22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	f003 0303 	and.w	r3, r3, #3
 8013a82:	2b01      	cmp	r3, #1
 8013a84:	d005      	beq.n	8013a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	685b      	ldr	r3, [r3, #4]
 8013a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8013a8e:	2b02      	cmp	r3, #2
 8013a90:	d130      	bne.n	8013af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	689b      	ldr	r3, [r3, #8]
 8013a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8013a98:	69fb      	ldr	r3, [r7, #28]
 8013a9a:	005b      	lsls	r3, r3, #1
 8013a9c:	2203      	movs	r2, #3
 8013a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8013aa2:	43db      	mvns	r3, r3
 8013aa4:	69ba      	ldr	r2, [r7, #24]
 8013aa6:	4013      	ands	r3, r2
 8013aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	68da      	ldr	r2, [r3, #12]
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	005b      	lsls	r3, r3, #1
 8013ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ab6:	69ba      	ldr	r2, [r7, #24]
 8013ab8:	4313      	orrs	r3, r2
 8013aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	69ba      	ldr	r2, [r7, #24]
 8013ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	685b      	ldr	r3, [r3, #4]
 8013ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8013ac8:	2201      	movs	r2, #1
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	fa02 f303 	lsl.w	r3, r2, r3
 8013ad0:	43db      	mvns	r3, r3
 8013ad2:	69ba      	ldr	r2, [r7, #24]
 8013ad4:	4013      	ands	r3, r2
 8013ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	091b      	lsrs	r3, r3, #4
 8013ade:	f003 0201 	and.w	r2, r3, #1
 8013ae2:	69fb      	ldr	r3, [r7, #28]
 8013ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8013ae8:	69ba      	ldr	r2, [r7, #24]
 8013aea:	4313      	orrs	r3, r2
 8013aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	69ba      	ldr	r2, [r7, #24]
 8013af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	f003 0303 	and.w	r3, r3, #3
 8013afc:	2b03      	cmp	r3, #3
 8013afe:	d017      	beq.n	8013b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	005b      	lsls	r3, r3, #1
 8013b0a:	2203      	movs	r2, #3
 8013b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8013b10:	43db      	mvns	r3, r3
 8013b12:	69ba      	ldr	r2, [r7, #24]
 8013b14:	4013      	ands	r3, r2
 8013b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	689a      	ldr	r2, [r3, #8]
 8013b1c:	69fb      	ldr	r3, [r7, #28]
 8013b1e:	005b      	lsls	r3, r3, #1
 8013b20:	fa02 f303 	lsl.w	r3, r2, r3
 8013b24:	69ba      	ldr	r2, [r7, #24]
 8013b26:	4313      	orrs	r3, r2
 8013b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	69ba      	ldr	r2, [r7, #24]
 8013b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	685b      	ldr	r3, [r3, #4]
 8013b34:	f003 0303 	and.w	r3, r3, #3
 8013b38:	2b02      	cmp	r3, #2
 8013b3a:	d123      	bne.n	8013b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013b3c:	69fb      	ldr	r3, [r7, #28]
 8013b3e:	08da      	lsrs	r2, r3, #3
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	3208      	adds	r2, #8
 8013b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	f003 0307 	and.w	r3, r3, #7
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	220f      	movs	r2, #15
 8013b54:	fa02 f303 	lsl.w	r3, r2, r3
 8013b58:	43db      	mvns	r3, r3
 8013b5a:	69ba      	ldr	r2, [r7, #24]
 8013b5c:	4013      	ands	r3, r2
 8013b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	691a      	ldr	r2, [r3, #16]
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	f003 0307 	and.w	r3, r3, #7
 8013b6a:	009b      	lsls	r3, r3, #2
 8013b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8013b70:	69ba      	ldr	r2, [r7, #24]
 8013b72:	4313      	orrs	r3, r2
 8013b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	08da      	lsrs	r2, r3, #3
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	3208      	adds	r2, #8
 8013b7e:	69b9      	ldr	r1, [r7, #24]
 8013b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8013b8a:	69fb      	ldr	r3, [r7, #28]
 8013b8c:	005b      	lsls	r3, r3, #1
 8013b8e:	2203      	movs	r2, #3
 8013b90:	fa02 f303 	lsl.w	r3, r2, r3
 8013b94:	43db      	mvns	r3, r3
 8013b96:	69ba      	ldr	r2, [r7, #24]
 8013b98:	4013      	ands	r3, r2
 8013b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	f003 0203 	and.w	r2, r3, #3
 8013ba4:	69fb      	ldr	r3, [r7, #28]
 8013ba6:	005b      	lsls	r3, r3, #1
 8013ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8013bac:	69ba      	ldr	r2, [r7, #24]
 8013bae:	4313      	orrs	r3, r2
 8013bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	69ba      	ldr	r2, [r7, #24]
 8013bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	685b      	ldr	r3, [r3, #4]
 8013bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	f000 80ae 	beq.w	8013d22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	60fb      	str	r3, [r7, #12]
 8013bca:	4b5d      	ldr	r3, [pc, #372]	; (8013d40 <HAL_GPIO_Init+0x300>)
 8013bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bce:	4a5c      	ldr	r2, [pc, #368]	; (8013d40 <HAL_GPIO_Init+0x300>)
 8013bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8013bd6:	4b5a      	ldr	r3, [pc, #360]	; (8013d40 <HAL_GPIO_Init+0x300>)
 8013bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013bde:	60fb      	str	r3, [r7, #12]
 8013be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8013be2:	4a58      	ldr	r2, [pc, #352]	; (8013d44 <HAL_GPIO_Init+0x304>)
 8013be4:	69fb      	ldr	r3, [r7, #28]
 8013be6:	089b      	lsrs	r3, r3, #2
 8013be8:	3302      	adds	r3, #2
 8013bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8013bf0:	69fb      	ldr	r3, [r7, #28]
 8013bf2:	f003 0303 	and.w	r3, r3, #3
 8013bf6:	009b      	lsls	r3, r3, #2
 8013bf8:	220f      	movs	r2, #15
 8013bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8013bfe:	43db      	mvns	r3, r3
 8013c00:	69ba      	ldr	r2, [r7, #24]
 8013c02:	4013      	ands	r3, r2
 8013c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	4a4f      	ldr	r2, [pc, #316]	; (8013d48 <HAL_GPIO_Init+0x308>)
 8013c0a:	4293      	cmp	r3, r2
 8013c0c:	d025      	beq.n	8013c5a <HAL_GPIO_Init+0x21a>
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	4a4e      	ldr	r2, [pc, #312]	; (8013d4c <HAL_GPIO_Init+0x30c>)
 8013c12:	4293      	cmp	r3, r2
 8013c14:	d01f      	beq.n	8013c56 <HAL_GPIO_Init+0x216>
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	4a4d      	ldr	r2, [pc, #308]	; (8013d50 <HAL_GPIO_Init+0x310>)
 8013c1a:	4293      	cmp	r3, r2
 8013c1c:	d019      	beq.n	8013c52 <HAL_GPIO_Init+0x212>
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	4a4c      	ldr	r2, [pc, #304]	; (8013d54 <HAL_GPIO_Init+0x314>)
 8013c22:	4293      	cmp	r3, r2
 8013c24:	d013      	beq.n	8013c4e <HAL_GPIO_Init+0x20e>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	4a4b      	ldr	r2, [pc, #300]	; (8013d58 <HAL_GPIO_Init+0x318>)
 8013c2a:	4293      	cmp	r3, r2
 8013c2c:	d00d      	beq.n	8013c4a <HAL_GPIO_Init+0x20a>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	4a4a      	ldr	r2, [pc, #296]	; (8013d5c <HAL_GPIO_Init+0x31c>)
 8013c32:	4293      	cmp	r3, r2
 8013c34:	d007      	beq.n	8013c46 <HAL_GPIO_Init+0x206>
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	4a49      	ldr	r2, [pc, #292]	; (8013d60 <HAL_GPIO_Init+0x320>)
 8013c3a:	4293      	cmp	r3, r2
 8013c3c:	d101      	bne.n	8013c42 <HAL_GPIO_Init+0x202>
 8013c3e:	2306      	movs	r3, #6
 8013c40:	e00c      	b.n	8013c5c <HAL_GPIO_Init+0x21c>
 8013c42:	2307      	movs	r3, #7
 8013c44:	e00a      	b.n	8013c5c <HAL_GPIO_Init+0x21c>
 8013c46:	2305      	movs	r3, #5
 8013c48:	e008      	b.n	8013c5c <HAL_GPIO_Init+0x21c>
 8013c4a:	2304      	movs	r3, #4
 8013c4c:	e006      	b.n	8013c5c <HAL_GPIO_Init+0x21c>
 8013c4e:	2303      	movs	r3, #3
 8013c50:	e004      	b.n	8013c5c <HAL_GPIO_Init+0x21c>
 8013c52:	2302      	movs	r3, #2
 8013c54:	e002      	b.n	8013c5c <HAL_GPIO_Init+0x21c>
 8013c56:	2301      	movs	r3, #1
 8013c58:	e000      	b.n	8013c5c <HAL_GPIO_Init+0x21c>
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	69fa      	ldr	r2, [r7, #28]
 8013c5e:	f002 0203 	and.w	r2, r2, #3
 8013c62:	0092      	lsls	r2, r2, #2
 8013c64:	4093      	lsls	r3, r2
 8013c66:	69ba      	ldr	r2, [r7, #24]
 8013c68:	4313      	orrs	r3, r2
 8013c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013c6c:	4935      	ldr	r1, [pc, #212]	; (8013d44 <HAL_GPIO_Init+0x304>)
 8013c6e:	69fb      	ldr	r3, [r7, #28]
 8013c70:	089b      	lsrs	r3, r3, #2
 8013c72:	3302      	adds	r3, #2
 8013c74:	69ba      	ldr	r2, [r7, #24]
 8013c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013c7a:	4b3a      	ldr	r3, [pc, #232]	; (8013d64 <HAL_GPIO_Init+0x324>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013c80:	693b      	ldr	r3, [r7, #16]
 8013c82:	43db      	mvns	r3, r3
 8013c84:	69ba      	ldr	r2, [r7, #24]
 8013c86:	4013      	ands	r3, r2
 8013c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d003      	beq.n	8013c9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8013c96:	69ba      	ldr	r2, [r7, #24]
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	4313      	orrs	r3, r2
 8013c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8013c9e:	4a31      	ldr	r2, [pc, #196]	; (8013d64 <HAL_GPIO_Init+0x324>)
 8013ca0:	69bb      	ldr	r3, [r7, #24]
 8013ca2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8013ca4:	4b2f      	ldr	r3, [pc, #188]	; (8013d64 <HAL_GPIO_Init+0x324>)
 8013ca6:	685b      	ldr	r3, [r3, #4]
 8013ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	43db      	mvns	r3, r3
 8013cae:	69ba      	ldr	r2, [r7, #24]
 8013cb0:	4013      	ands	r3, r2
 8013cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d003      	beq.n	8013cc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8013cc0:	69ba      	ldr	r2, [r7, #24]
 8013cc2:	693b      	ldr	r3, [r7, #16]
 8013cc4:	4313      	orrs	r3, r2
 8013cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8013cc8:	4a26      	ldr	r2, [pc, #152]	; (8013d64 <HAL_GPIO_Init+0x324>)
 8013cca:	69bb      	ldr	r3, [r7, #24]
 8013ccc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013cce:	4b25      	ldr	r3, [pc, #148]	; (8013d64 <HAL_GPIO_Init+0x324>)
 8013cd0:	689b      	ldr	r3, [r3, #8]
 8013cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	43db      	mvns	r3, r3
 8013cd8:	69ba      	ldr	r2, [r7, #24]
 8013cda:	4013      	ands	r3, r2
 8013cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	685b      	ldr	r3, [r3, #4]
 8013ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d003      	beq.n	8013cf2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8013cea:	69ba      	ldr	r2, [r7, #24]
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	4313      	orrs	r3, r2
 8013cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8013cf2:	4a1c      	ldr	r2, [pc, #112]	; (8013d64 <HAL_GPIO_Init+0x324>)
 8013cf4:	69bb      	ldr	r3, [r7, #24]
 8013cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013cf8:	4b1a      	ldr	r3, [pc, #104]	; (8013d64 <HAL_GPIO_Init+0x324>)
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	43db      	mvns	r3, r3
 8013d02:	69ba      	ldr	r2, [r7, #24]
 8013d04:	4013      	ands	r3, r2
 8013d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	685b      	ldr	r3, [r3, #4]
 8013d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d003      	beq.n	8013d1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8013d14:	69ba      	ldr	r2, [r7, #24]
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	4313      	orrs	r3, r2
 8013d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8013d1c:	4a11      	ldr	r2, [pc, #68]	; (8013d64 <HAL_GPIO_Init+0x324>)
 8013d1e:	69bb      	ldr	r3, [r7, #24]
 8013d20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	3301      	adds	r3, #1
 8013d26:	61fb      	str	r3, [r7, #28]
 8013d28:	69fb      	ldr	r3, [r7, #28]
 8013d2a:	2b0f      	cmp	r3, #15
 8013d2c:	f67f ae96 	bls.w	8013a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013d30:	bf00      	nop
 8013d32:	bf00      	nop
 8013d34:	3724      	adds	r7, #36	; 0x24
 8013d36:	46bd      	mov	sp, r7
 8013d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3c:	4770      	bx	lr
 8013d3e:	bf00      	nop
 8013d40:	40023800 	.word	0x40023800
 8013d44:	40013800 	.word	0x40013800
 8013d48:	40020000 	.word	0x40020000
 8013d4c:	40020400 	.word	0x40020400
 8013d50:	40020800 	.word	0x40020800
 8013d54:	40020c00 	.word	0x40020c00
 8013d58:	40021000 	.word	0x40021000
 8013d5c:	40021400 	.word	0x40021400
 8013d60:	40021800 	.word	0x40021800
 8013d64:	40013c00 	.word	0x40013c00

08013d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b085      	sub	sp, #20
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	460b      	mov	r3, r1
 8013d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	691a      	ldr	r2, [r3, #16]
 8013d78:	887b      	ldrh	r3, [r7, #2]
 8013d7a:	4013      	ands	r3, r2
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d002      	beq.n	8013d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8013d80:	2301      	movs	r3, #1
 8013d82:	73fb      	strb	r3, [r7, #15]
 8013d84:	e001      	b.n	8013d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013d86:	2300      	movs	r3, #0
 8013d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3714      	adds	r7, #20
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr

08013d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013d98:	b480      	push	{r7}
 8013d9a:	b083      	sub	sp, #12
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	460b      	mov	r3, r1
 8013da2:	807b      	strh	r3, [r7, #2]
 8013da4:	4613      	mov	r3, r2
 8013da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013da8:	787b      	ldrb	r3, [r7, #1]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d003      	beq.n	8013db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013dae:	887a      	ldrh	r2, [r7, #2]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8013db4:	e003      	b.n	8013dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8013db6:	887b      	ldrh	r3, [r7, #2]
 8013db8:	041a      	lsls	r2, r3, #16
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	619a      	str	r2, [r3, #24]
}
 8013dbe:	bf00      	nop
 8013dc0:	370c      	adds	r7, #12
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc8:	4770      	bx	lr

08013dca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8013dca:	b480      	push	{r7}
 8013dcc:	b085      	sub	sp, #20
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	6078      	str	r0, [r7, #4]
 8013dd2:	460b      	mov	r3, r1
 8013dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	695b      	ldr	r3, [r3, #20]
 8013dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8013ddc:	887a      	ldrh	r2, [r7, #2]
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	4013      	ands	r3, r2
 8013de2:	041a      	lsls	r2, r3, #16
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	43d9      	mvns	r1, r3
 8013de8:	887b      	ldrh	r3, [r7, #2]
 8013dea:	400b      	ands	r3, r1
 8013dec:	431a      	orrs	r2, r3
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	619a      	str	r2, [r3, #24]
}
 8013df2:	bf00      	nop
 8013df4:	3714      	adds	r7, #20
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr
	...

08013e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b082      	sub	sp, #8
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	4603      	mov	r3, r0
 8013e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8013e0a:	4b08      	ldr	r3, [pc, #32]	; (8013e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013e0c:	695a      	ldr	r2, [r3, #20]
 8013e0e:	88fb      	ldrh	r3, [r7, #6]
 8013e10:	4013      	ands	r3, r2
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d006      	beq.n	8013e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013e16:	4a05      	ldr	r2, [pc, #20]	; (8013e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013e18:	88fb      	ldrh	r3, [r7, #6]
 8013e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013e1c:	88fb      	ldrh	r3, [r7, #6]
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f00a fb34 	bl	801e48c <HAL_GPIO_EXTI_Callback>
  }
}
 8013e24:	bf00      	nop
 8013e26:	3708      	adds	r7, #8
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	40013c00 	.word	0x40013c00

08013e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b084      	sub	sp, #16
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d101      	bne.n	8013e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013e3e:	2301      	movs	r3, #1
 8013e40:	e12b      	b.n	801409a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d106      	bne.n	8013e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	2200      	movs	r2, #0
 8013e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f7fd feca 	bl	8011bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2224      	movs	r2, #36	; 0x24
 8013e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	f022 0201 	bic.w	r2, r2, #1
 8013e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	681a      	ldr	r2, [r3, #0]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8013e94:	f002 fa9c 	bl	80163d0 <HAL_RCC_GetPCLK1Freq>
 8013e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	685b      	ldr	r3, [r3, #4]
 8013e9e:	4a81      	ldr	r2, [pc, #516]	; (80140a4 <HAL_I2C_Init+0x274>)
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	d807      	bhi.n	8013eb4 <HAL_I2C_Init+0x84>
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	4a80      	ldr	r2, [pc, #512]	; (80140a8 <HAL_I2C_Init+0x278>)
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	bf94      	ite	ls
 8013eac:	2301      	movls	r3, #1
 8013eae:	2300      	movhi	r3, #0
 8013eb0:	b2db      	uxtb	r3, r3
 8013eb2:	e006      	b.n	8013ec2 <HAL_I2C_Init+0x92>
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	4a7d      	ldr	r2, [pc, #500]	; (80140ac <HAL_I2C_Init+0x27c>)
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	bf94      	ite	ls
 8013ebc:	2301      	movls	r3, #1
 8013ebe:	2300      	movhi	r3, #0
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d001      	beq.n	8013eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	e0e7      	b.n	801409a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	4a78      	ldr	r2, [pc, #480]	; (80140b0 <HAL_I2C_Init+0x280>)
 8013ece:	fba2 2303 	umull	r2, r3, r2, r3
 8013ed2:	0c9b      	lsrs	r3, r3, #18
 8013ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	68ba      	ldr	r2, [r7, #8]
 8013ee6:	430a      	orrs	r2, r1
 8013ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	6a1b      	ldr	r3, [r3, #32]
 8013ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	685b      	ldr	r3, [r3, #4]
 8013ef8:	4a6a      	ldr	r2, [pc, #424]	; (80140a4 <HAL_I2C_Init+0x274>)
 8013efa:	4293      	cmp	r3, r2
 8013efc:	d802      	bhi.n	8013f04 <HAL_I2C_Init+0xd4>
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	3301      	adds	r3, #1
 8013f02:	e009      	b.n	8013f18 <HAL_I2C_Init+0xe8>
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013f0a:	fb02 f303 	mul.w	r3, r2, r3
 8013f0e:	4a69      	ldr	r2, [pc, #420]	; (80140b4 <HAL_I2C_Init+0x284>)
 8013f10:	fba2 2303 	umull	r2, r3, r2, r3
 8013f14:	099b      	lsrs	r3, r3, #6
 8013f16:	3301      	adds	r3, #1
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	6812      	ldr	r2, [r2, #0]
 8013f1c:	430b      	orrs	r3, r1
 8013f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	69db      	ldr	r3, [r3, #28]
 8013f26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8013f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	685b      	ldr	r3, [r3, #4]
 8013f32:	495c      	ldr	r1, [pc, #368]	; (80140a4 <HAL_I2C_Init+0x274>)
 8013f34:	428b      	cmp	r3, r1
 8013f36:	d819      	bhi.n	8013f6c <HAL_I2C_Init+0x13c>
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	1e59      	subs	r1, r3, #1
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	685b      	ldr	r3, [r3, #4]
 8013f40:	005b      	lsls	r3, r3, #1
 8013f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8013f46:	1c59      	adds	r1, r3, #1
 8013f48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8013f4c:	400b      	ands	r3, r1
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d00a      	beq.n	8013f68 <HAL_I2C_Init+0x138>
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	1e59      	subs	r1, r3, #1
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	005b      	lsls	r3, r3, #1
 8013f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8013f60:	3301      	adds	r3, #1
 8013f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013f66:	e051      	b.n	801400c <HAL_I2C_Init+0x1dc>
 8013f68:	2304      	movs	r3, #4
 8013f6a:	e04f      	b.n	801400c <HAL_I2C_Init+0x1dc>
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	689b      	ldr	r3, [r3, #8]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d111      	bne.n	8013f98 <HAL_I2C_Init+0x168>
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	1e58      	subs	r0, r3, #1
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6859      	ldr	r1, [r3, #4]
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	005b      	lsls	r3, r3, #1
 8013f80:	440b      	add	r3, r1
 8013f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8013f86:	3301      	adds	r3, #1
 8013f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	bf0c      	ite	eq
 8013f90:	2301      	moveq	r3, #1
 8013f92:	2300      	movne	r3, #0
 8013f94:	b2db      	uxtb	r3, r3
 8013f96:	e012      	b.n	8013fbe <HAL_I2C_Init+0x18e>
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	1e58      	subs	r0, r3, #1
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	6859      	ldr	r1, [r3, #4]
 8013fa0:	460b      	mov	r3, r1
 8013fa2:	009b      	lsls	r3, r3, #2
 8013fa4:	440b      	add	r3, r1
 8013fa6:	0099      	lsls	r1, r3, #2
 8013fa8:	440b      	add	r3, r1
 8013faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8013fae:	3301      	adds	r3, #1
 8013fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	bf0c      	ite	eq
 8013fb8:	2301      	moveq	r3, #1
 8013fba:	2300      	movne	r3, #0
 8013fbc:	b2db      	uxtb	r3, r3
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d001      	beq.n	8013fc6 <HAL_I2C_Init+0x196>
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	e022      	b.n	801400c <HAL_I2C_Init+0x1dc>
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	689b      	ldr	r3, [r3, #8]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d10e      	bne.n	8013fec <HAL_I2C_Init+0x1bc>
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	1e58      	subs	r0, r3, #1
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6859      	ldr	r1, [r3, #4]
 8013fd6:	460b      	mov	r3, r1
 8013fd8:	005b      	lsls	r3, r3, #1
 8013fda:	440b      	add	r3, r1
 8013fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013fea:	e00f      	b.n	801400c <HAL_I2C_Init+0x1dc>
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	1e58      	subs	r0, r3, #1
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6859      	ldr	r1, [r3, #4]
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	440b      	add	r3, r1
 8013ffa:	0099      	lsls	r1, r3, #2
 8013ffc:	440b      	add	r3, r1
 8013ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8014002:	3301      	adds	r3, #1
 8014004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801400c:	6879      	ldr	r1, [r7, #4]
 801400e:	6809      	ldr	r1, [r1, #0]
 8014010:	4313      	orrs	r3, r2
 8014012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	69da      	ldr	r2, [r3, #28]
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6a1b      	ldr	r3, [r3, #32]
 8014026:	431a      	orrs	r2, r3
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	430a      	orrs	r2, r1
 801402e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	689b      	ldr	r3, [r3, #8]
 8014036:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801403a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	6911      	ldr	r1, [r2, #16]
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	68d2      	ldr	r2, [r2, #12]
 8014046:	4311      	orrs	r1, r2
 8014048:	687a      	ldr	r2, [r7, #4]
 801404a:	6812      	ldr	r2, [r2, #0]
 801404c:	430b      	orrs	r3, r1
 801404e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	68db      	ldr	r3, [r3, #12]
 8014056:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	695a      	ldr	r2, [r3, #20]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	699b      	ldr	r3, [r3, #24]
 8014062:	431a      	orrs	r2, r3
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	430a      	orrs	r2, r1
 801406a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	681a      	ldr	r2, [r3, #0]
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	f042 0201 	orr.w	r2, r2, #1
 801407a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2200      	movs	r2, #0
 8014080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2220      	movs	r2, #32
 8014086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2200      	movs	r2, #0
 801408e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2200      	movs	r2, #0
 8014094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014098:	2300      	movs	r3, #0
}
 801409a:	4618      	mov	r0, r3
 801409c:	3710      	adds	r7, #16
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}
 80140a2:	bf00      	nop
 80140a4:	000186a0 	.word	0x000186a0
 80140a8:	001e847f 	.word	0x001e847f
 80140ac:	003d08ff 	.word	0x003d08ff
 80140b0:	431bde83 	.word	0x431bde83
 80140b4:	10624dd3 	.word	0x10624dd3

080140b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b088      	sub	sp, #32
 80140bc:	af02      	add	r7, sp, #8
 80140be:	60f8      	str	r0, [r7, #12]
 80140c0:	4608      	mov	r0, r1
 80140c2:	4611      	mov	r1, r2
 80140c4:	461a      	mov	r2, r3
 80140c6:	4603      	mov	r3, r0
 80140c8:	817b      	strh	r3, [r7, #10]
 80140ca:	460b      	mov	r3, r1
 80140cc:	813b      	strh	r3, [r7, #8]
 80140ce:	4613      	mov	r3, r2
 80140d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80140d2:	f7fe f98b 	bl	80123ec <HAL_GetTick>
 80140d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140de:	b2db      	uxtb	r3, r3
 80140e0:	2b20      	cmp	r3, #32
 80140e2:	f040 80d9 	bne.w	8014298 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	9300      	str	r3, [sp, #0]
 80140ea:	2319      	movs	r3, #25
 80140ec:	2201      	movs	r2, #1
 80140ee:	496d      	ldr	r1, [pc, #436]	; (80142a4 <HAL_I2C_Mem_Write+0x1ec>)
 80140f0:	68f8      	ldr	r0, [r7, #12]
 80140f2:	f000 fc7f 	bl	80149f4 <I2C_WaitOnFlagUntilTimeout>
 80140f6:	4603      	mov	r3, r0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d001      	beq.n	8014100 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80140fc:	2302      	movs	r3, #2
 80140fe:	e0cc      	b.n	801429a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014106:	2b01      	cmp	r3, #1
 8014108:	d101      	bne.n	801410e <HAL_I2C_Mem_Write+0x56>
 801410a:	2302      	movs	r3, #2
 801410c:	e0c5      	b.n	801429a <HAL_I2C_Mem_Write+0x1e2>
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2201      	movs	r2, #1
 8014112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	f003 0301 	and.w	r3, r3, #1
 8014120:	2b01      	cmp	r3, #1
 8014122:	d007      	beq.n	8014134 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	681a      	ldr	r2, [r3, #0]
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	f042 0201 	orr.w	r2, r2, #1
 8014132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	681a      	ldr	r2, [r3, #0]
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	2221      	movs	r2, #33	; 0x21
 8014148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2240      	movs	r2, #64	; 0x40
 8014150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2200      	movs	r2, #0
 8014158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	6a3a      	ldr	r2, [r7, #32]
 801415e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801416a:	b29a      	uxth	r2, r3
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	4a4d      	ldr	r2, [pc, #308]	; (80142a8 <HAL_I2C_Mem_Write+0x1f0>)
 8014174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8014176:	88f8      	ldrh	r0, [r7, #6]
 8014178:	893a      	ldrh	r2, [r7, #8]
 801417a:	8979      	ldrh	r1, [r7, #10]
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	9301      	str	r3, [sp, #4]
 8014180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014182:	9300      	str	r3, [sp, #0]
 8014184:	4603      	mov	r3, r0
 8014186:	68f8      	ldr	r0, [r7, #12]
 8014188:	f000 fab6 	bl	80146f8 <I2C_RequestMemoryWrite>
 801418c:	4603      	mov	r3, r0
 801418e:	2b00      	cmp	r3, #0
 8014190:	d052      	beq.n	8014238 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8014192:	2301      	movs	r3, #1
 8014194:	e081      	b.n	801429a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014196:	697a      	ldr	r2, [r7, #20]
 8014198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801419a:	68f8      	ldr	r0, [r7, #12]
 801419c:	f000 fd00 	bl	8014ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 80141a0:	4603      	mov	r3, r0
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00d      	beq.n	80141c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141aa:	2b04      	cmp	r3, #4
 80141ac:	d107      	bne.n	80141be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	681a      	ldr	r2, [r3, #0]
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80141bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80141be:	2301      	movs	r3, #1
 80141c0:	e06b      	b.n	801429a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c6:	781a      	ldrb	r2, [r3, #0]
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141d2:	1c5a      	adds	r2, r3, #1
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141dc:	3b01      	subs	r3, #1
 80141de:	b29a      	uxth	r2, r3
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80141e8:	b29b      	uxth	r3, r3
 80141ea:	3b01      	subs	r3, #1
 80141ec:	b29a      	uxth	r2, r3
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	695b      	ldr	r3, [r3, #20]
 80141f8:	f003 0304 	and.w	r3, r3, #4
 80141fc:	2b04      	cmp	r3, #4
 80141fe:	d11b      	bne.n	8014238 <HAL_I2C_Mem_Write+0x180>
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014204:	2b00      	cmp	r3, #0
 8014206:	d017      	beq.n	8014238 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801420c:	781a      	ldrb	r2, [r3, #0]
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014218:	1c5a      	adds	r2, r3, #1
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014222:	3b01      	subs	r3, #1
 8014224:	b29a      	uxth	r2, r3
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801422e:	b29b      	uxth	r3, r3
 8014230:	3b01      	subs	r3, #1
 8014232:	b29a      	uxth	r2, r3
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801423c:	2b00      	cmp	r3, #0
 801423e:	d1aa      	bne.n	8014196 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014240:	697a      	ldr	r2, [r7, #20]
 8014242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014244:	68f8      	ldr	r0, [r7, #12]
 8014246:	f000 fcec 	bl	8014c22 <I2C_WaitOnBTFFlagUntilTimeout>
 801424a:	4603      	mov	r3, r0
 801424c:	2b00      	cmp	r3, #0
 801424e:	d00d      	beq.n	801426c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014254:	2b04      	cmp	r3, #4
 8014256:	d107      	bne.n	8014268 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	681a      	ldr	r2, [r3, #0]
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014266:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8014268:	2301      	movs	r3, #1
 801426a:	e016      	b.n	801429a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	681a      	ldr	r2, [r3, #0]
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801427a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	2220      	movs	r2, #32
 8014280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	2200      	movs	r2, #0
 8014288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	2200      	movs	r2, #0
 8014290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8014294:	2300      	movs	r3, #0
 8014296:	e000      	b.n	801429a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8014298:	2302      	movs	r3, #2
  }
}
 801429a:	4618      	mov	r0, r3
 801429c:	3718      	adds	r7, #24
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
 80142a2:	bf00      	nop
 80142a4:	00100002 	.word	0x00100002
 80142a8:	ffff0000 	.word	0xffff0000

080142ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b08c      	sub	sp, #48	; 0x30
 80142b0:	af02      	add	r7, sp, #8
 80142b2:	60f8      	str	r0, [r7, #12]
 80142b4:	4608      	mov	r0, r1
 80142b6:	4611      	mov	r1, r2
 80142b8:	461a      	mov	r2, r3
 80142ba:	4603      	mov	r3, r0
 80142bc:	817b      	strh	r3, [r7, #10]
 80142be:	460b      	mov	r3, r1
 80142c0:	813b      	strh	r3, [r7, #8]
 80142c2:	4613      	mov	r3, r2
 80142c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80142c6:	f7fe f891 	bl	80123ec <HAL_GetTick>
 80142ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	2b20      	cmp	r3, #32
 80142d6:	f040 8208 	bne.w	80146ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80142da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142dc:	9300      	str	r3, [sp, #0]
 80142de:	2319      	movs	r3, #25
 80142e0:	2201      	movs	r2, #1
 80142e2:	497b      	ldr	r1, [pc, #492]	; (80144d0 <HAL_I2C_Mem_Read+0x224>)
 80142e4:	68f8      	ldr	r0, [r7, #12]
 80142e6:	f000 fb85 	bl	80149f4 <I2C_WaitOnFlagUntilTimeout>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d001      	beq.n	80142f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80142f0:	2302      	movs	r3, #2
 80142f2:	e1fb      	b.n	80146ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80142fa:	2b01      	cmp	r3, #1
 80142fc:	d101      	bne.n	8014302 <HAL_I2C_Mem_Read+0x56>
 80142fe:	2302      	movs	r3, #2
 8014300:	e1f4      	b.n	80146ec <HAL_I2C_Mem_Read+0x440>
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	2201      	movs	r2, #1
 8014306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	f003 0301 	and.w	r3, r3, #1
 8014314:	2b01      	cmp	r3, #1
 8014316:	d007      	beq.n	8014328 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	681a      	ldr	r2, [r3, #0]
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	f042 0201 	orr.w	r2, r2, #1
 8014326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	681a      	ldr	r2, [r3, #0]
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	2222      	movs	r2, #34	; 0x22
 801433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	2240      	movs	r2, #64	; 0x40
 8014344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2200      	movs	r2, #0
 801434c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801435e:	b29a      	uxth	r2, r3
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	4a5b      	ldr	r2, [pc, #364]	; (80144d4 <HAL_I2C_Mem_Read+0x228>)
 8014368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801436a:	88f8      	ldrh	r0, [r7, #6]
 801436c:	893a      	ldrh	r2, [r7, #8]
 801436e:	8979      	ldrh	r1, [r7, #10]
 8014370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014372:	9301      	str	r3, [sp, #4]
 8014374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014376:	9300      	str	r3, [sp, #0]
 8014378:	4603      	mov	r3, r0
 801437a:	68f8      	ldr	r0, [r7, #12]
 801437c:	f000 fa52 	bl	8014824 <I2C_RequestMemoryRead>
 8014380:	4603      	mov	r3, r0
 8014382:	2b00      	cmp	r3, #0
 8014384:	d001      	beq.n	801438a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8014386:	2301      	movs	r3, #1
 8014388:	e1b0      	b.n	80146ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801438e:	2b00      	cmp	r3, #0
 8014390:	d113      	bne.n	80143ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014392:	2300      	movs	r3, #0
 8014394:	623b      	str	r3, [r7, #32]
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	695b      	ldr	r3, [r3, #20]
 801439c:	623b      	str	r3, [r7, #32]
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	699b      	ldr	r3, [r3, #24]
 80143a4:	623b      	str	r3, [r7, #32]
 80143a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	681a      	ldr	r2, [r3, #0]
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80143b6:	601a      	str	r2, [r3, #0]
 80143b8:	e184      	b.n	80146c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143be:	2b01      	cmp	r3, #1
 80143c0:	d11b      	bne.n	80143fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	681a      	ldr	r2, [r3, #0]
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80143d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80143d2:	2300      	movs	r3, #0
 80143d4:	61fb      	str	r3, [r7, #28]
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	695b      	ldr	r3, [r3, #20]
 80143dc:	61fb      	str	r3, [r7, #28]
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	699b      	ldr	r3, [r3, #24]
 80143e4:	61fb      	str	r3, [r7, #28]
 80143e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	681a      	ldr	r2, [r3, #0]
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80143f6:	601a      	str	r2, [r3, #0]
 80143f8:	e164      	b.n	80146c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143fe:	2b02      	cmp	r3, #2
 8014400:	d11b      	bne.n	801443a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014410:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	681a      	ldr	r2, [r3, #0]
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014422:	2300      	movs	r3, #0
 8014424:	61bb      	str	r3, [r7, #24]
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	695b      	ldr	r3, [r3, #20]
 801442c:	61bb      	str	r3, [r7, #24]
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	699b      	ldr	r3, [r3, #24]
 8014434:	61bb      	str	r3, [r7, #24]
 8014436:	69bb      	ldr	r3, [r7, #24]
 8014438:	e144      	b.n	80146c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801443a:	2300      	movs	r3, #0
 801443c:	617b      	str	r3, [r7, #20]
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	695b      	ldr	r3, [r3, #20]
 8014444:	617b      	str	r3, [r7, #20]
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	699b      	ldr	r3, [r3, #24]
 801444c:	617b      	str	r3, [r7, #20]
 801444e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8014450:	e138      	b.n	80146c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014456:	2b03      	cmp	r3, #3
 8014458:	f200 80f1 	bhi.w	801463e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014460:	2b01      	cmp	r3, #1
 8014462:	d123      	bne.n	80144ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014468:	68f8      	ldr	r0, [r7, #12]
 801446a:	f000 fc1b 	bl	8014ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 801446e:	4603      	mov	r3, r0
 8014470:	2b00      	cmp	r3, #0
 8014472:	d001      	beq.n	8014478 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8014474:	2301      	movs	r3, #1
 8014476:	e139      	b.n	80146ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	691a      	ldr	r2, [r3, #16]
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014482:	b2d2      	uxtb	r2, r2
 8014484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801448a:	1c5a      	adds	r2, r3, #1
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014494:	3b01      	subs	r3, #1
 8014496:	b29a      	uxth	r2, r3
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	3b01      	subs	r3, #1
 80144a4:	b29a      	uxth	r2, r3
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80144aa:	e10b      	b.n	80146c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144b0:	2b02      	cmp	r3, #2
 80144b2:	d14e      	bne.n	8014552 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80144b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b6:	9300      	str	r3, [sp, #0]
 80144b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ba:	2200      	movs	r2, #0
 80144bc:	4906      	ldr	r1, [pc, #24]	; (80144d8 <HAL_I2C_Mem_Read+0x22c>)
 80144be:	68f8      	ldr	r0, [r7, #12]
 80144c0:	f000 fa98 	bl	80149f4 <I2C_WaitOnFlagUntilTimeout>
 80144c4:	4603      	mov	r3, r0
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d008      	beq.n	80144dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80144ca:	2301      	movs	r3, #1
 80144cc:	e10e      	b.n	80146ec <HAL_I2C_Mem_Read+0x440>
 80144ce:	bf00      	nop
 80144d0:	00100002 	.word	0x00100002
 80144d4:	ffff0000 	.word	0xffff0000
 80144d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	681a      	ldr	r2, [r3, #0]
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80144ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	691a      	ldr	r2, [r3, #16]
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144f6:	b2d2      	uxtb	r2, r2
 80144f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144fe:	1c5a      	adds	r2, r3, #1
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014508:	3b01      	subs	r3, #1
 801450a:	b29a      	uxth	r2, r3
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014514:	b29b      	uxth	r3, r3
 8014516:	3b01      	subs	r3, #1
 8014518:	b29a      	uxth	r2, r3
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	691a      	ldr	r2, [r3, #16]
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014528:	b2d2      	uxtb	r2, r2
 801452a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014530:	1c5a      	adds	r2, r3, #1
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801453a:	3b01      	subs	r3, #1
 801453c:	b29a      	uxth	r2, r3
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014546:	b29b      	uxth	r3, r3
 8014548:	3b01      	subs	r3, #1
 801454a:	b29a      	uxth	r2, r3
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014550:	e0b8      	b.n	80146c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014554:	9300      	str	r3, [sp, #0]
 8014556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014558:	2200      	movs	r2, #0
 801455a:	4966      	ldr	r1, [pc, #408]	; (80146f4 <HAL_I2C_Mem_Read+0x448>)
 801455c:	68f8      	ldr	r0, [r7, #12]
 801455e:	f000 fa49 	bl	80149f4 <I2C_WaitOnFlagUntilTimeout>
 8014562:	4603      	mov	r3, r0
 8014564:	2b00      	cmp	r3, #0
 8014566:	d001      	beq.n	801456c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8014568:	2301      	movs	r3, #1
 801456a:	e0bf      	b.n	80146ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	681a      	ldr	r2, [r3, #0]
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801457a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	691a      	ldr	r2, [r3, #16]
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014586:	b2d2      	uxtb	r2, r2
 8014588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801458e:	1c5a      	adds	r2, r3, #1
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014598:	3b01      	subs	r3, #1
 801459a:	b29a      	uxth	r2, r3
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80145a4:	b29b      	uxth	r3, r3
 80145a6:	3b01      	subs	r3, #1
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80145ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145b0:	9300      	str	r3, [sp, #0]
 80145b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145b4:	2200      	movs	r2, #0
 80145b6:	494f      	ldr	r1, [pc, #316]	; (80146f4 <HAL_I2C_Mem_Read+0x448>)
 80145b8:	68f8      	ldr	r0, [r7, #12]
 80145ba:	f000 fa1b 	bl	80149f4 <I2C_WaitOnFlagUntilTimeout>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d001      	beq.n	80145c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80145c4:	2301      	movs	r3, #1
 80145c6:	e091      	b.n	80146ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	681a      	ldr	r2, [r3, #0]
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80145d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	691a      	ldr	r2, [r3, #16]
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145e2:	b2d2      	uxtb	r2, r2
 80145e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ea:	1c5a      	adds	r2, r3, #1
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80145f4:	3b01      	subs	r3, #1
 80145f6:	b29a      	uxth	r2, r3
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014600:	b29b      	uxth	r3, r3
 8014602:	3b01      	subs	r3, #1
 8014604:	b29a      	uxth	r2, r3
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	691a      	ldr	r2, [r3, #16]
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014614:	b2d2      	uxtb	r2, r2
 8014616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801461c:	1c5a      	adds	r2, r3, #1
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014626:	3b01      	subs	r3, #1
 8014628:	b29a      	uxth	r2, r3
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014632:	b29b      	uxth	r3, r3
 8014634:	3b01      	subs	r3, #1
 8014636:	b29a      	uxth	r2, r3
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801463c:	e042      	b.n	80146c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801463e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014640:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014642:	68f8      	ldr	r0, [r7, #12]
 8014644:	f000 fb2e 	bl	8014ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	d001      	beq.n	8014652 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 801464e:	2301      	movs	r3, #1
 8014650:	e04c      	b.n	80146ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	691a      	ldr	r2, [r3, #16]
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801465c:	b2d2      	uxtb	r2, r2
 801465e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014664:	1c5a      	adds	r2, r3, #1
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801466e:	3b01      	subs	r3, #1
 8014670:	b29a      	uxth	r2, r3
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801467a:	b29b      	uxth	r3, r3
 801467c:	3b01      	subs	r3, #1
 801467e:	b29a      	uxth	r2, r3
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	695b      	ldr	r3, [r3, #20]
 801468a:	f003 0304 	and.w	r3, r3, #4
 801468e:	2b04      	cmp	r3, #4
 8014690:	d118      	bne.n	80146c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	691a      	ldr	r2, [r3, #16]
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801469c:	b2d2      	uxtb	r2, r2
 801469e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146a4:	1c5a      	adds	r2, r3, #1
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146ae:	3b01      	subs	r3, #1
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80146ba:	b29b      	uxth	r3, r3
 80146bc:	3b01      	subs	r3, #1
 80146be:	b29a      	uxth	r2, r3
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	f47f aec2 	bne.w	8014452 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	2220      	movs	r2, #32
 80146d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	2200      	movs	r2, #0
 80146da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	2200      	movs	r2, #0
 80146e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80146e6:	2300      	movs	r3, #0
 80146e8:	e000      	b.n	80146ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80146ea:	2302      	movs	r3, #2
  }
}
 80146ec:	4618      	mov	r0, r3
 80146ee:	3728      	adds	r7, #40	; 0x28
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	00010004 	.word	0x00010004

080146f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b088      	sub	sp, #32
 80146fc:	af02      	add	r7, sp, #8
 80146fe:	60f8      	str	r0, [r7, #12]
 8014700:	4608      	mov	r0, r1
 8014702:	4611      	mov	r1, r2
 8014704:	461a      	mov	r2, r3
 8014706:	4603      	mov	r3, r0
 8014708:	817b      	strh	r3, [r7, #10]
 801470a:	460b      	mov	r3, r1
 801470c:	813b      	strh	r3, [r7, #8]
 801470e:	4613      	mov	r3, r2
 8014710:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	681a      	ldr	r2, [r3, #0]
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014720:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8014722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014724:	9300      	str	r3, [sp, #0]
 8014726:	6a3b      	ldr	r3, [r7, #32]
 8014728:	2200      	movs	r2, #0
 801472a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801472e:	68f8      	ldr	r0, [r7, #12]
 8014730:	f000 f960 	bl	80149f4 <I2C_WaitOnFlagUntilTimeout>
 8014734:	4603      	mov	r3, r0
 8014736:	2b00      	cmp	r3, #0
 8014738:	d00d      	beq.n	8014756 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014748:	d103      	bne.n	8014752 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014750:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8014752:	2303      	movs	r3, #3
 8014754:	e05f      	b.n	8014816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8014756:	897b      	ldrh	r3, [r7, #10]
 8014758:	b2db      	uxtb	r3, r3
 801475a:	461a      	mov	r2, r3
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8014764:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8014766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014768:	6a3a      	ldr	r2, [r7, #32]
 801476a:	492d      	ldr	r1, [pc, #180]	; (8014820 <I2C_RequestMemoryWrite+0x128>)
 801476c:	68f8      	ldr	r0, [r7, #12]
 801476e:	f000 f998 	bl	8014aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014772:	4603      	mov	r3, r0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d001      	beq.n	801477c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8014778:	2301      	movs	r3, #1
 801477a:	e04c      	b.n	8014816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801477c:	2300      	movs	r3, #0
 801477e:	617b      	str	r3, [r7, #20]
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	695b      	ldr	r3, [r3, #20]
 8014786:	617b      	str	r3, [r7, #20]
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	699b      	ldr	r3, [r3, #24]
 801478e:	617b      	str	r3, [r7, #20]
 8014790:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014794:	6a39      	ldr	r1, [r7, #32]
 8014796:	68f8      	ldr	r0, [r7, #12]
 8014798:	f000 fa02 	bl	8014ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 801479c:	4603      	mov	r3, r0
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d00d      	beq.n	80147be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147a6:	2b04      	cmp	r3, #4
 80147a8:	d107      	bne.n	80147ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	681a      	ldr	r2, [r3, #0]
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80147b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80147ba:	2301      	movs	r3, #1
 80147bc:	e02b      	b.n	8014816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80147be:	88fb      	ldrh	r3, [r7, #6]
 80147c0:	2b01      	cmp	r3, #1
 80147c2:	d105      	bne.n	80147d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80147c4:	893b      	ldrh	r3, [r7, #8]
 80147c6:	b2da      	uxtb	r2, r3
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	611a      	str	r2, [r3, #16]
 80147ce:	e021      	b.n	8014814 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80147d0:	893b      	ldrh	r3, [r7, #8]
 80147d2:	0a1b      	lsrs	r3, r3, #8
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	b2da      	uxtb	r2, r3
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80147de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147e0:	6a39      	ldr	r1, [r7, #32]
 80147e2:	68f8      	ldr	r0, [r7, #12]
 80147e4:	f000 f9dc 	bl	8014ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 80147e8:	4603      	mov	r3, r0
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d00d      	beq.n	801480a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147f2:	2b04      	cmp	r3, #4
 80147f4:	d107      	bne.n	8014806 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	681a      	ldr	r2, [r3, #0]
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014804:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8014806:	2301      	movs	r3, #1
 8014808:	e005      	b.n	8014816 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801480a:	893b      	ldrh	r3, [r7, #8]
 801480c:	b2da      	uxtb	r2, r3
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8014814:	2300      	movs	r3, #0
}
 8014816:	4618      	mov	r0, r3
 8014818:	3718      	adds	r7, #24
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop
 8014820:	00010002 	.word	0x00010002

08014824 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b088      	sub	sp, #32
 8014828:	af02      	add	r7, sp, #8
 801482a:	60f8      	str	r0, [r7, #12]
 801482c:	4608      	mov	r0, r1
 801482e:	4611      	mov	r1, r2
 8014830:	461a      	mov	r2, r3
 8014832:	4603      	mov	r3, r0
 8014834:	817b      	strh	r3, [r7, #10]
 8014836:	460b      	mov	r3, r1
 8014838:	813b      	strh	r3, [r7, #8]
 801483a:	4613      	mov	r3, r2
 801483c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801484c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	681a      	ldr	r2, [r3, #0]
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801485c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	6a3b      	ldr	r3, [r7, #32]
 8014864:	2200      	movs	r2, #0
 8014866:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801486a:	68f8      	ldr	r0, [r7, #12]
 801486c:	f000 f8c2 	bl	80149f4 <I2C_WaitOnFlagUntilTimeout>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d00d      	beq.n	8014892 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014884:	d103      	bne.n	801488e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	f44f 7200 	mov.w	r2, #512	; 0x200
 801488c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801488e:	2303      	movs	r3, #3
 8014890:	e0aa      	b.n	80149e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8014892:	897b      	ldrh	r3, [r7, #10]
 8014894:	b2db      	uxtb	r3, r3
 8014896:	461a      	mov	r2, r3
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80148a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80148a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a4:	6a3a      	ldr	r2, [r7, #32]
 80148a6:	4952      	ldr	r1, [pc, #328]	; (80149f0 <I2C_RequestMemoryRead+0x1cc>)
 80148a8:	68f8      	ldr	r0, [r7, #12]
 80148aa:	f000 f8fa 	bl	8014aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80148ae:	4603      	mov	r3, r0
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d001      	beq.n	80148b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80148b4:	2301      	movs	r3, #1
 80148b6:	e097      	b.n	80149e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80148b8:	2300      	movs	r3, #0
 80148ba:	617b      	str	r3, [r7, #20]
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	695b      	ldr	r3, [r3, #20]
 80148c2:	617b      	str	r3, [r7, #20]
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	699b      	ldr	r3, [r3, #24]
 80148ca:	617b      	str	r3, [r7, #20]
 80148cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80148ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148d0:	6a39      	ldr	r1, [r7, #32]
 80148d2:	68f8      	ldr	r0, [r7, #12]
 80148d4:	f000 f964 	bl	8014ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 80148d8:	4603      	mov	r3, r0
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d00d      	beq.n	80148fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148e2:	2b04      	cmp	r3, #4
 80148e4:	d107      	bne.n	80148f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	681a      	ldr	r2, [r3, #0]
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80148f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80148f6:	2301      	movs	r3, #1
 80148f8:	e076      	b.n	80149e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80148fa:	88fb      	ldrh	r3, [r7, #6]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d105      	bne.n	801490c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8014900:	893b      	ldrh	r3, [r7, #8]
 8014902:	b2da      	uxtb	r2, r3
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	611a      	str	r2, [r3, #16]
 801490a:	e021      	b.n	8014950 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801490c:	893b      	ldrh	r3, [r7, #8]
 801490e:	0a1b      	lsrs	r3, r3, #8
 8014910:	b29b      	uxth	r3, r3
 8014912:	b2da      	uxtb	r2, r3
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801491a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801491c:	6a39      	ldr	r1, [r7, #32]
 801491e:	68f8      	ldr	r0, [r7, #12]
 8014920:	f000 f93e 	bl	8014ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 8014924:	4603      	mov	r3, r0
 8014926:	2b00      	cmp	r3, #0
 8014928:	d00d      	beq.n	8014946 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801492e:	2b04      	cmp	r3, #4
 8014930:	d107      	bne.n	8014942 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	681a      	ldr	r2, [r3, #0]
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014940:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8014942:	2301      	movs	r3, #1
 8014944:	e050      	b.n	80149e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8014946:	893b      	ldrh	r3, [r7, #8]
 8014948:	b2da      	uxtb	r2, r3
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014952:	6a39      	ldr	r1, [r7, #32]
 8014954:	68f8      	ldr	r0, [r7, #12]
 8014956:	f000 f923 	bl	8014ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 801495a:	4603      	mov	r3, r0
 801495c:	2b00      	cmp	r3, #0
 801495e:	d00d      	beq.n	801497c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014964:	2b04      	cmp	r3, #4
 8014966:	d107      	bne.n	8014978 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	681a      	ldr	r2, [r3, #0]
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014976:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8014978:	2301      	movs	r3, #1
 801497a:	e035      	b.n	80149e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	681a      	ldr	r2, [r3, #0]
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801498a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801498e:	9300      	str	r3, [sp, #0]
 8014990:	6a3b      	ldr	r3, [r7, #32]
 8014992:	2200      	movs	r2, #0
 8014994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8014998:	68f8      	ldr	r0, [r7, #12]
 801499a:	f000 f82b 	bl	80149f4 <I2C_WaitOnFlagUntilTimeout>
 801499e:	4603      	mov	r3, r0
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d00d      	beq.n	80149c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149b2:	d103      	bne.n	80149bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80149ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80149bc:	2303      	movs	r3, #3
 80149be:	e013      	b.n	80149e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80149c0:	897b      	ldrh	r3, [r7, #10]
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	f043 0301 	orr.w	r3, r3, #1
 80149c8:	b2da      	uxtb	r2, r3
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80149d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d2:	6a3a      	ldr	r2, [r7, #32]
 80149d4:	4906      	ldr	r1, [pc, #24]	; (80149f0 <I2C_RequestMemoryRead+0x1cc>)
 80149d6:	68f8      	ldr	r0, [r7, #12]
 80149d8:	f000 f863 	bl	8014aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d001      	beq.n	80149e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80149e2:	2301      	movs	r3, #1
 80149e4:	e000      	b.n	80149e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80149e6:	2300      	movs	r3, #0
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3718      	adds	r7, #24
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	00010002 	.word	0x00010002

080149f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b084      	sub	sp, #16
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	60f8      	str	r0, [r7, #12]
 80149fc:	60b9      	str	r1, [r7, #8]
 80149fe:	603b      	str	r3, [r7, #0]
 8014a00:	4613      	mov	r3, r2
 8014a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014a04:	e025      	b.n	8014a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a0c:	d021      	beq.n	8014a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014a0e:	f7fd fced 	bl	80123ec <HAL_GetTick>
 8014a12:	4602      	mov	r2, r0
 8014a14:	69bb      	ldr	r3, [r7, #24]
 8014a16:	1ad3      	subs	r3, r2, r3
 8014a18:	683a      	ldr	r2, [r7, #0]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d302      	bcc.n	8014a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d116      	bne.n	8014a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	2200      	movs	r2, #0
 8014a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	2220      	movs	r2, #32
 8014a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	2200      	movs	r2, #0
 8014a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a3e:	f043 0220 	orr.w	r2, r3, #32
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014a4e:	2301      	movs	r3, #1
 8014a50:	e023      	b.n	8014a9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	0c1b      	lsrs	r3, r3, #16
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	2b01      	cmp	r3, #1
 8014a5a:	d10d      	bne.n	8014a78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	695b      	ldr	r3, [r3, #20]
 8014a62:	43da      	mvns	r2, r3
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	4013      	ands	r3, r2
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	bf0c      	ite	eq
 8014a6e:	2301      	moveq	r3, #1
 8014a70:	2300      	movne	r3, #0
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	461a      	mov	r2, r3
 8014a76:	e00c      	b.n	8014a92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	699b      	ldr	r3, [r3, #24]
 8014a7e:	43da      	mvns	r2, r3
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	4013      	ands	r3, r2
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	bf0c      	ite	eq
 8014a8a:	2301      	moveq	r3, #1
 8014a8c:	2300      	movne	r3, #0
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	461a      	mov	r2, r3
 8014a92:	79fb      	ldrb	r3, [r7, #7]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d0b6      	beq.n	8014a06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014a98:	2300      	movs	r3, #0
}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	3710      	adds	r7, #16
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}

08014aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8014aa2:	b580      	push	{r7, lr}
 8014aa4:	b084      	sub	sp, #16
 8014aa6:	af00      	add	r7, sp, #0
 8014aa8:	60f8      	str	r0, [r7, #12]
 8014aaa:	60b9      	str	r1, [r7, #8]
 8014aac:	607a      	str	r2, [r7, #4]
 8014aae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014ab0:	e051      	b.n	8014b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	695b      	ldr	r3, [r3, #20]
 8014ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ac0:	d123      	bne.n	8014b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	681a      	ldr	r2, [r3, #0]
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014ad0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014ada:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	2200      	movs	r2, #0
 8014ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	2220      	movs	r2, #32
 8014ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	2200      	movs	r2, #0
 8014aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014af6:	f043 0204 	orr.w	r2, r3, #4
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2200      	movs	r2, #0
 8014b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014b06:	2301      	movs	r3, #1
 8014b08:	e046      	b.n	8014b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b10:	d021      	beq.n	8014b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014b12:	f7fd fc6b 	bl	80123ec <HAL_GetTick>
 8014b16:	4602      	mov	r2, r0
 8014b18:	683b      	ldr	r3, [r7, #0]
 8014b1a:	1ad3      	subs	r3, r2, r3
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d302      	bcc.n	8014b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d116      	bne.n	8014b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	2220      	movs	r2, #32
 8014b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b42:	f043 0220 	orr.w	r2, r3, #32
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014b52:	2301      	movs	r3, #1
 8014b54:	e020      	b.n	8014b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	0c1b      	lsrs	r3, r3, #16
 8014b5a:	b2db      	uxtb	r3, r3
 8014b5c:	2b01      	cmp	r3, #1
 8014b5e:	d10c      	bne.n	8014b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	695b      	ldr	r3, [r3, #20]
 8014b66:	43da      	mvns	r2, r3
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	4013      	ands	r3, r2
 8014b6c:	b29b      	uxth	r3, r3
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	bf14      	ite	ne
 8014b72:	2301      	movne	r3, #1
 8014b74:	2300      	moveq	r3, #0
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	e00b      	b.n	8014b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	699b      	ldr	r3, [r3, #24]
 8014b80:	43da      	mvns	r2, r3
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	4013      	ands	r3, r2
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	bf14      	ite	ne
 8014b8c:	2301      	movne	r3, #1
 8014b8e:	2300      	moveq	r3, #0
 8014b90:	b2db      	uxtb	r3, r3
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d18d      	bne.n	8014ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8014b96:	2300      	movs	r3, #0
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3710      	adds	r7, #16
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b084      	sub	sp, #16
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	60f8      	str	r0, [r7, #12]
 8014ba8:	60b9      	str	r1, [r7, #8]
 8014baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014bac:	e02d      	b.n	8014c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8014bae:	68f8      	ldr	r0, [r7, #12]
 8014bb0:	f000 f8ce 	bl	8014d50 <I2C_IsAcknowledgeFailed>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d001      	beq.n	8014bbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8014bba:	2301      	movs	r3, #1
 8014bbc:	e02d      	b.n	8014c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bc4:	d021      	beq.n	8014c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014bc6:	f7fd fc11 	bl	80123ec <HAL_GetTick>
 8014bca:	4602      	mov	r2, r0
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	1ad3      	subs	r3, r2, r3
 8014bd0:	68ba      	ldr	r2, [r7, #8]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d302      	bcc.n	8014bdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d116      	bne.n	8014c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2200      	movs	r2, #0
 8014be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	2220      	movs	r2, #32
 8014be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	2200      	movs	r2, #0
 8014bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bf6:	f043 0220 	orr.w	r2, r3, #32
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2200      	movs	r2, #0
 8014c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014c06:	2301      	movs	r3, #1
 8014c08:	e007      	b.n	8014c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	695b      	ldr	r3, [r3, #20]
 8014c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c14:	2b80      	cmp	r3, #128	; 0x80
 8014c16:	d1ca      	bne.n	8014bae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014c18:	2300      	movs	r3, #0
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3710      	adds	r7, #16
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}

08014c22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014c22:	b580      	push	{r7, lr}
 8014c24:	b084      	sub	sp, #16
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	60f8      	str	r0, [r7, #12]
 8014c2a:	60b9      	str	r1, [r7, #8]
 8014c2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8014c2e:	e02d      	b.n	8014c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8014c30:	68f8      	ldr	r0, [r7, #12]
 8014c32:	f000 f88d 	bl	8014d50 <I2C_IsAcknowledgeFailed>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d001      	beq.n	8014c40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	e02d      	b.n	8014c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014c40:	68bb      	ldr	r3, [r7, #8]
 8014c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c46:	d021      	beq.n	8014c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014c48:	f7fd fbd0 	bl	80123ec <HAL_GetTick>
 8014c4c:	4602      	mov	r2, r0
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	1ad3      	subs	r3, r2, r3
 8014c52:	68ba      	ldr	r2, [r7, #8]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d302      	bcc.n	8014c5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d116      	bne.n	8014c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2200      	movs	r2, #0
 8014c62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2220      	movs	r2, #32
 8014c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c78:	f043 0220 	orr.w	r2, r3, #32
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	2200      	movs	r2, #0
 8014c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014c88:	2301      	movs	r3, #1
 8014c8a:	e007      	b.n	8014c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	695b      	ldr	r3, [r3, #20]
 8014c92:	f003 0304 	and.w	r3, r3, #4
 8014c96:	2b04      	cmp	r3, #4
 8014c98:	d1ca      	bne.n	8014c30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014c9a:	2300      	movs	r3, #0
}
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	3710      	adds	r7, #16
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b084      	sub	sp, #16
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	60f8      	str	r0, [r7, #12]
 8014cac:	60b9      	str	r1, [r7, #8]
 8014cae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014cb0:	e042      	b.n	8014d38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	695b      	ldr	r3, [r3, #20]
 8014cb8:	f003 0310 	and.w	r3, r3, #16
 8014cbc:	2b10      	cmp	r3, #16
 8014cbe:	d119      	bne.n	8014cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	f06f 0210 	mvn.w	r2, #16
 8014cc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2200      	movs	r2, #0
 8014cce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	2220      	movs	r2, #32
 8014cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	2200      	movs	r2, #0
 8014cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	e029      	b.n	8014d48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014cf4:	f7fd fb7a 	bl	80123ec <HAL_GetTick>
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	1ad3      	subs	r3, r2, r3
 8014cfe:	68ba      	ldr	r2, [r7, #8]
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d302      	bcc.n	8014d0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d116      	bne.n	8014d38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	2220      	movs	r2, #32
 8014d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d24:	f043 0220 	orr.w	r2, r3, #32
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014d34:	2301      	movs	r3, #1
 8014d36:	e007      	b.n	8014d48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	695b      	ldr	r3, [r3, #20]
 8014d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014d42:	2b40      	cmp	r3, #64	; 0x40
 8014d44:	d1b5      	bne.n	8014cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8014d46:	2300      	movs	r3, #0
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3710      	adds	r7, #16
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8014d50:	b480      	push	{r7}
 8014d52:	b083      	sub	sp, #12
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	695b      	ldr	r3, [r3, #20]
 8014d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d66:	d11b      	bne.n	8014da0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014d70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2200      	movs	r2, #0
 8014d76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2220      	movs	r2, #32
 8014d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2200      	movs	r2, #0
 8014d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d8c:	f043 0204 	orr.w	r2, r3, #4
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2200      	movs	r2, #0
 8014d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	e000      	b.n	8014da2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8014da0:	2300      	movs	r3, #0
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	370c      	adds	r7, #12
 8014da6:	46bd      	mov	sp, r7
 8014da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dac:	4770      	bx	lr

08014dae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8014dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014db0:	b08f      	sub	sp, #60	; 0x3c
 8014db2:	af0a      	add	r7, sp, #40	; 0x28
 8014db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d101      	bne.n	8014dc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8014dbc:	2301      	movs	r3, #1
 8014dbe:	e116      	b.n	8014fee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8014dcc:	b2db      	uxtb	r3, r3
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d106      	bne.n	8014de0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f00e fdc6 	bl	802396c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	2203      	movs	r2, #3
 8014de4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d102      	bne.n	8014dfa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2200      	movs	r2, #0
 8014df8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f004 f99f 	bl	8019142 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	603b      	str	r3, [r7, #0]
 8014e0a:	687e      	ldr	r6, [r7, #4]
 8014e0c:	466d      	mov	r5, sp
 8014e0e:	f106 0410 	add.w	r4, r6, #16
 8014e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014e1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014e1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8014e22:	1d33      	adds	r3, r6, #4
 8014e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014e26:	6838      	ldr	r0, [r7, #0]
 8014e28:	f004 f876 	bl	8018f18 <USB_CoreInit>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d005      	beq.n	8014e3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2202      	movs	r2, #2
 8014e36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	e0d7      	b.n	8014fee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	2100      	movs	r1, #0
 8014e44:	4618      	mov	r0, r3
 8014e46:	f004 f98d 	bl	8019164 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	73fb      	strb	r3, [r7, #15]
 8014e4e:	e04a      	b.n	8014ee6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8014e50:	7bfa      	ldrb	r2, [r7, #15]
 8014e52:	6879      	ldr	r1, [r7, #4]
 8014e54:	4613      	mov	r3, r2
 8014e56:	00db      	lsls	r3, r3, #3
 8014e58:	1a9b      	subs	r3, r3, r2
 8014e5a:	009b      	lsls	r3, r3, #2
 8014e5c:	440b      	add	r3, r1
 8014e5e:	333d      	adds	r3, #61	; 0x3d
 8014e60:	2201      	movs	r2, #1
 8014e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8014e64:	7bfa      	ldrb	r2, [r7, #15]
 8014e66:	6879      	ldr	r1, [r7, #4]
 8014e68:	4613      	mov	r3, r2
 8014e6a:	00db      	lsls	r3, r3, #3
 8014e6c:	1a9b      	subs	r3, r3, r2
 8014e6e:	009b      	lsls	r3, r3, #2
 8014e70:	440b      	add	r3, r1
 8014e72:	333c      	adds	r3, #60	; 0x3c
 8014e74:	7bfa      	ldrb	r2, [r7, #15]
 8014e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8014e78:	7bfa      	ldrb	r2, [r7, #15]
 8014e7a:	7bfb      	ldrb	r3, [r7, #15]
 8014e7c:	b298      	uxth	r0, r3
 8014e7e:	6879      	ldr	r1, [r7, #4]
 8014e80:	4613      	mov	r3, r2
 8014e82:	00db      	lsls	r3, r3, #3
 8014e84:	1a9b      	subs	r3, r3, r2
 8014e86:	009b      	lsls	r3, r3, #2
 8014e88:	440b      	add	r3, r1
 8014e8a:	3342      	adds	r3, #66	; 0x42
 8014e8c:	4602      	mov	r2, r0
 8014e8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8014e90:	7bfa      	ldrb	r2, [r7, #15]
 8014e92:	6879      	ldr	r1, [r7, #4]
 8014e94:	4613      	mov	r3, r2
 8014e96:	00db      	lsls	r3, r3, #3
 8014e98:	1a9b      	subs	r3, r3, r2
 8014e9a:	009b      	lsls	r3, r3, #2
 8014e9c:	440b      	add	r3, r1
 8014e9e:	333f      	adds	r3, #63	; 0x3f
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8014ea4:	7bfa      	ldrb	r2, [r7, #15]
 8014ea6:	6879      	ldr	r1, [r7, #4]
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	00db      	lsls	r3, r3, #3
 8014eac:	1a9b      	subs	r3, r3, r2
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	440b      	add	r3, r1
 8014eb2:	3344      	adds	r3, #68	; 0x44
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8014eb8:	7bfa      	ldrb	r2, [r7, #15]
 8014eba:	6879      	ldr	r1, [r7, #4]
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	00db      	lsls	r3, r3, #3
 8014ec0:	1a9b      	subs	r3, r3, r2
 8014ec2:	009b      	lsls	r3, r3, #2
 8014ec4:	440b      	add	r3, r1
 8014ec6:	3348      	adds	r3, #72	; 0x48
 8014ec8:	2200      	movs	r2, #0
 8014eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8014ecc:	7bfa      	ldrb	r2, [r7, #15]
 8014ece:	6879      	ldr	r1, [r7, #4]
 8014ed0:	4613      	mov	r3, r2
 8014ed2:	00db      	lsls	r3, r3, #3
 8014ed4:	1a9b      	subs	r3, r3, r2
 8014ed6:	009b      	lsls	r3, r3, #2
 8014ed8:	440b      	add	r3, r1
 8014eda:	3350      	adds	r3, #80	; 0x50
 8014edc:	2200      	movs	r2, #0
 8014ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8014ee0:	7bfb      	ldrb	r3, [r7, #15]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	73fb      	strb	r3, [r7, #15]
 8014ee6:	7bfa      	ldrb	r2, [r7, #15]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	685b      	ldr	r3, [r3, #4]
 8014eec:	429a      	cmp	r2, r3
 8014eee:	d3af      	bcc.n	8014e50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	73fb      	strb	r3, [r7, #15]
 8014ef4:	e044      	b.n	8014f80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8014ef6:	7bfa      	ldrb	r2, [r7, #15]
 8014ef8:	6879      	ldr	r1, [r7, #4]
 8014efa:	4613      	mov	r3, r2
 8014efc:	00db      	lsls	r3, r3, #3
 8014efe:	1a9b      	subs	r3, r3, r2
 8014f00:	009b      	lsls	r3, r3, #2
 8014f02:	440b      	add	r3, r1
 8014f04:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8014f08:	2200      	movs	r2, #0
 8014f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8014f0c:	7bfa      	ldrb	r2, [r7, #15]
 8014f0e:	6879      	ldr	r1, [r7, #4]
 8014f10:	4613      	mov	r3, r2
 8014f12:	00db      	lsls	r3, r3, #3
 8014f14:	1a9b      	subs	r3, r3, r2
 8014f16:	009b      	lsls	r3, r3, #2
 8014f18:	440b      	add	r3, r1
 8014f1a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8014f1e:	7bfa      	ldrb	r2, [r7, #15]
 8014f20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8014f22:	7bfa      	ldrb	r2, [r7, #15]
 8014f24:	6879      	ldr	r1, [r7, #4]
 8014f26:	4613      	mov	r3, r2
 8014f28:	00db      	lsls	r3, r3, #3
 8014f2a:	1a9b      	subs	r3, r3, r2
 8014f2c:	009b      	lsls	r3, r3, #2
 8014f2e:	440b      	add	r3, r1
 8014f30:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014f34:	2200      	movs	r2, #0
 8014f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8014f38:	7bfa      	ldrb	r2, [r7, #15]
 8014f3a:	6879      	ldr	r1, [r7, #4]
 8014f3c:	4613      	mov	r3, r2
 8014f3e:	00db      	lsls	r3, r3, #3
 8014f40:	1a9b      	subs	r3, r3, r2
 8014f42:	009b      	lsls	r3, r3, #2
 8014f44:	440b      	add	r3, r1
 8014f46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8014f4e:	7bfa      	ldrb	r2, [r7, #15]
 8014f50:	6879      	ldr	r1, [r7, #4]
 8014f52:	4613      	mov	r3, r2
 8014f54:	00db      	lsls	r3, r3, #3
 8014f56:	1a9b      	subs	r3, r3, r2
 8014f58:	009b      	lsls	r3, r3, #2
 8014f5a:	440b      	add	r3, r1
 8014f5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014f60:	2200      	movs	r2, #0
 8014f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8014f64:	7bfa      	ldrb	r2, [r7, #15]
 8014f66:	6879      	ldr	r1, [r7, #4]
 8014f68:	4613      	mov	r3, r2
 8014f6a:	00db      	lsls	r3, r3, #3
 8014f6c:	1a9b      	subs	r3, r3, r2
 8014f6e:	009b      	lsls	r3, r3, #2
 8014f70:	440b      	add	r3, r1
 8014f72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8014f76:	2200      	movs	r2, #0
 8014f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8014f7a:	7bfb      	ldrb	r3, [r7, #15]
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	73fb      	strb	r3, [r7, #15]
 8014f80:	7bfa      	ldrb	r2, [r7, #15]
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	685b      	ldr	r3, [r3, #4]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d3b5      	bcc.n	8014ef6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	603b      	str	r3, [r7, #0]
 8014f90:	687e      	ldr	r6, [r7, #4]
 8014f92:	466d      	mov	r5, sp
 8014f94:	f106 0410 	add.w	r4, r6, #16
 8014f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014fa4:	e885 0003 	stmia.w	r5, {r0, r1}
 8014fa8:	1d33      	adds	r3, r6, #4
 8014faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014fac:	6838      	ldr	r0, [r7, #0]
 8014fae:	f004 f925 	bl	80191fc <USB_DevInit>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d005      	beq.n	8014fc4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2202      	movs	r2, #2
 8014fbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	e014      	b.n	8014fee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2201      	movs	r2, #1
 8014fd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fd8:	2b01      	cmp	r3, #1
 8014fda:	d102      	bne.n	8014fe2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f001 f891 	bl	8016104 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f005 f994 	bl	801a314 <USB_DevDisconnect>

  return HAL_OK;
 8014fec:	2300      	movs	r3, #0
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3714      	adds	r7, #20
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ff6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8014ff6:	b580      	push	{r7, lr}
 8014ff8:	b084      	sub	sp, #16
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801500a:	2b01      	cmp	r3, #1
 801500c:	d101      	bne.n	8015012 <HAL_PCD_Start+0x1c>
 801500e:	2302      	movs	r3, #2
 8015010:	e020      	b.n	8015054 <HAL_PCD_Start+0x5e>
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2201      	movs	r2, #1
 8015016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801501e:	2b01      	cmp	r3, #1
 8015020:	d109      	bne.n	8015036 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8015026:	2b01      	cmp	r3, #1
 8015028:	d005      	beq.n	8015036 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801502e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	4618      	mov	r0, r3
 801503c:	f004 f870 	bl	8019120 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	4618      	mov	r0, r3
 8015046:	f005 f944 	bl	801a2d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2200      	movs	r2, #0
 801504e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8015052:	2300      	movs	r3, #0
}
 8015054:	4618      	mov	r0, r3
 8015056:	3710      	adds	r7, #16
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}

0801505c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801505c:	b590      	push	{r4, r7, lr}
 801505e:	b08d      	sub	sp, #52	; 0x34
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801506a:	6a3b      	ldr	r3, [r7, #32]
 801506c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	4618      	mov	r0, r3
 8015074:	f005 fa02 	bl	801a47c <USB_GetMode>
 8015078:	4603      	mov	r3, r0
 801507a:	2b00      	cmp	r3, #0
 801507c:	f040 83ca 	bne.w	8015814 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	4618      	mov	r0, r3
 8015086:	f005 f966 	bl	801a356 <USB_ReadInterrupts>
 801508a:	4603      	mov	r3, r0
 801508c:	2b00      	cmp	r3, #0
 801508e:	f000 83c0 	beq.w	8015812 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	4618      	mov	r0, r3
 8015098:	f005 f95d 	bl	801a356 <USB_ReadInterrupts>
 801509c:	4603      	mov	r3, r0
 801509e:	f003 0302 	and.w	r3, r3, #2
 80150a2:	2b02      	cmp	r3, #2
 80150a4:	d107      	bne.n	80150b6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	695a      	ldr	r2, [r3, #20]
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	f002 0202 	and.w	r2, r2, #2
 80150b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	4618      	mov	r0, r3
 80150bc:	f005 f94b 	bl	801a356 <USB_ReadInterrupts>
 80150c0:	4603      	mov	r3, r0
 80150c2:	f003 0310 	and.w	r3, r3, #16
 80150c6:	2b10      	cmp	r3, #16
 80150c8:	d161      	bne.n	801518e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	699a      	ldr	r2, [r3, #24]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f022 0210 	bic.w	r2, r2, #16
 80150d8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80150da:	6a3b      	ldr	r3, [r7, #32]
 80150dc:	6a1b      	ldr	r3, [r3, #32]
 80150de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80150e0:	69bb      	ldr	r3, [r7, #24]
 80150e2:	f003 020f 	and.w	r2, r3, #15
 80150e6:	4613      	mov	r3, r2
 80150e8:	00db      	lsls	r3, r3, #3
 80150ea:	1a9b      	subs	r3, r3, r2
 80150ec:	009b      	lsls	r3, r3, #2
 80150ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	4413      	add	r3, r2
 80150f6:	3304      	adds	r3, #4
 80150f8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80150fa:	69bb      	ldr	r3, [r7, #24]
 80150fc:	0c5b      	lsrs	r3, r3, #17
 80150fe:	f003 030f 	and.w	r3, r3, #15
 8015102:	2b02      	cmp	r3, #2
 8015104:	d124      	bne.n	8015150 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8015106:	69ba      	ldr	r2, [r7, #24]
 8015108:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 801510c:	4013      	ands	r3, r2
 801510e:	2b00      	cmp	r3, #0
 8015110:	d035      	beq.n	801517e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8015116:	69bb      	ldr	r3, [r7, #24]
 8015118:	091b      	lsrs	r3, r3, #4
 801511a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801511c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015120:	b29b      	uxth	r3, r3
 8015122:	461a      	mov	r2, r3
 8015124:	6a38      	ldr	r0, [r7, #32]
 8015126:	f004 ff82 	bl	801a02e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	68da      	ldr	r2, [r3, #12]
 801512e:	69bb      	ldr	r3, [r7, #24]
 8015130:	091b      	lsrs	r3, r3, #4
 8015132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015136:	441a      	add	r2, r3
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	699a      	ldr	r2, [r3, #24]
 8015140:	69bb      	ldr	r3, [r7, #24]
 8015142:	091b      	lsrs	r3, r3, #4
 8015144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015148:	441a      	add	r2, r3
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	619a      	str	r2, [r3, #24]
 801514e:	e016      	b.n	801517e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8015150:	69bb      	ldr	r3, [r7, #24]
 8015152:	0c5b      	lsrs	r3, r3, #17
 8015154:	f003 030f 	and.w	r3, r3, #15
 8015158:	2b06      	cmp	r3, #6
 801515a:	d110      	bne.n	801517e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015162:	2208      	movs	r2, #8
 8015164:	4619      	mov	r1, r3
 8015166:	6a38      	ldr	r0, [r7, #32]
 8015168:	f004 ff61 	bl	801a02e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	699a      	ldr	r2, [r3, #24]
 8015170:	69bb      	ldr	r3, [r7, #24]
 8015172:	091b      	lsrs	r3, r3, #4
 8015174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015178:	441a      	add	r2, r3
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	699a      	ldr	r2, [r3, #24]
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	f042 0210 	orr.w	r2, r2, #16
 801518c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	4618      	mov	r0, r3
 8015194:	f005 f8df 	bl	801a356 <USB_ReadInterrupts>
 8015198:	4603      	mov	r3, r0
 801519a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801519e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80151a2:	d16e      	bne.n	8015282 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80151a4:	2300      	movs	r3, #0
 80151a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	4618      	mov	r0, r3
 80151ae:	f005 f8e5 	bl	801a37c <USB_ReadDevAllOutEpInterrupt>
 80151b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80151b4:	e062      	b.n	801527c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80151b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b8:	f003 0301 	and.w	r3, r3, #1
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d057      	beq.n	8015270 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151c6:	b2d2      	uxtb	r2, r2
 80151c8:	4611      	mov	r1, r2
 80151ca:	4618      	mov	r0, r3
 80151cc:	f005 f90a 	bl	801a3e4 <USB_ReadDevOutEPInterrupt>
 80151d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80151d2:	693b      	ldr	r3, [r7, #16]
 80151d4:	f003 0301 	and.w	r3, r3, #1
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d00c      	beq.n	80151f6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80151dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151de:	015a      	lsls	r2, r3, #5
 80151e0:	69fb      	ldr	r3, [r7, #28]
 80151e2:	4413      	add	r3, r2
 80151e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80151e8:	461a      	mov	r2, r3
 80151ea:	2301      	movs	r3, #1
 80151ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80151ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	f000 fddd 	bl	8015db0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80151f6:	693b      	ldr	r3, [r7, #16]
 80151f8:	f003 0308 	and.w	r3, r3, #8
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d00c      	beq.n	801521a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8015200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015202:	015a      	lsls	r2, r3, #5
 8015204:	69fb      	ldr	r3, [r7, #28]
 8015206:	4413      	add	r3, r2
 8015208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801520c:	461a      	mov	r2, r3
 801520e:	2308      	movs	r3, #8
 8015210:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8015212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015214:	6878      	ldr	r0, [r7, #4]
 8015216:	f000 fed7 	bl	8015fc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801521a:	693b      	ldr	r3, [r7, #16]
 801521c:	f003 0310 	and.w	r3, r3, #16
 8015220:	2b00      	cmp	r3, #0
 8015222:	d008      	beq.n	8015236 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8015224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015226:	015a      	lsls	r2, r3, #5
 8015228:	69fb      	ldr	r3, [r7, #28]
 801522a:	4413      	add	r3, r2
 801522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015230:	461a      	mov	r2, r3
 8015232:	2310      	movs	r3, #16
 8015234:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8015236:	693b      	ldr	r3, [r7, #16]
 8015238:	f003 0320 	and.w	r3, r3, #32
 801523c:	2b00      	cmp	r3, #0
 801523e:	d008      	beq.n	8015252 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8015240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015242:	015a      	lsls	r2, r3, #5
 8015244:	69fb      	ldr	r3, [r7, #28]
 8015246:	4413      	add	r3, r2
 8015248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801524c:	461a      	mov	r2, r3
 801524e:	2320      	movs	r3, #32
 8015250:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8015252:	693b      	ldr	r3, [r7, #16]
 8015254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015258:	2b00      	cmp	r3, #0
 801525a:	d009      	beq.n	8015270 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525e:	015a      	lsls	r2, r3, #5
 8015260:	69fb      	ldr	r3, [r7, #28]
 8015262:	4413      	add	r3, r2
 8015264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015268:	461a      	mov	r2, r3
 801526a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801526e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8015270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015272:	3301      	adds	r3, #1
 8015274:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8015276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015278:	085b      	lsrs	r3, r3, #1
 801527a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801527e:	2b00      	cmp	r3, #0
 8015280:	d199      	bne.n	80151b6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	4618      	mov	r0, r3
 8015288:	f005 f865 	bl	801a356 <USB_ReadInterrupts>
 801528c:	4603      	mov	r3, r0
 801528e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015292:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015296:	f040 80c0 	bne.w	801541a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	4618      	mov	r0, r3
 80152a0:	f005 f886 	bl	801a3b0 <USB_ReadDevAllInEpInterrupt>
 80152a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80152a6:	2300      	movs	r3, #0
 80152a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80152aa:	e0b2      	b.n	8015412 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80152ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ae:	f003 0301 	and.w	r3, r3, #1
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f000 80a7 	beq.w	8015406 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152be:	b2d2      	uxtb	r2, r2
 80152c0:	4611      	mov	r1, r2
 80152c2:	4618      	mov	r0, r3
 80152c4:	f005 f8ac 	bl	801a420 <USB_ReadDevInEPInterrupt>
 80152c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	f003 0301 	and.w	r3, r3, #1
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d057      	beq.n	8015384 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80152d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d6:	f003 030f 	and.w	r3, r3, #15
 80152da:	2201      	movs	r2, #1
 80152dc:	fa02 f303 	lsl.w	r3, r2, r3
 80152e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80152e2:	69fb      	ldr	r3, [r7, #28]
 80152e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	43db      	mvns	r3, r3
 80152ee:	69f9      	ldr	r1, [r7, #28]
 80152f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80152f4:	4013      	ands	r3, r2
 80152f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80152f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152fa:	015a      	lsls	r2, r3, #5
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	4413      	add	r3, r2
 8015300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015304:	461a      	mov	r2, r3
 8015306:	2301      	movs	r3, #1
 8015308:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	691b      	ldr	r3, [r3, #16]
 801530e:	2b01      	cmp	r3, #1
 8015310:	d132      	bne.n	8015378 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8015312:	6879      	ldr	r1, [r7, #4]
 8015314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015316:	4613      	mov	r3, r2
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	1a9b      	subs	r3, r3, r2
 801531c:	009b      	lsls	r3, r3, #2
 801531e:	440b      	add	r3, r1
 8015320:	3348      	adds	r3, #72	; 0x48
 8015322:	6819      	ldr	r1, [r3, #0]
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015328:	4613      	mov	r3, r2
 801532a:	00db      	lsls	r3, r3, #3
 801532c:	1a9b      	subs	r3, r3, r2
 801532e:	009b      	lsls	r3, r3, #2
 8015330:	4403      	add	r3, r0
 8015332:	3344      	adds	r3, #68	; 0x44
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	4419      	add	r1, r3
 8015338:	6878      	ldr	r0, [r7, #4]
 801533a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801533c:	4613      	mov	r3, r2
 801533e:	00db      	lsls	r3, r3, #3
 8015340:	1a9b      	subs	r3, r3, r2
 8015342:	009b      	lsls	r3, r3, #2
 8015344:	4403      	add	r3, r0
 8015346:	3348      	adds	r3, #72	; 0x48
 8015348:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534c:	2b00      	cmp	r3, #0
 801534e:	d113      	bne.n	8015378 <HAL_PCD_IRQHandler+0x31c>
 8015350:	6879      	ldr	r1, [r7, #4]
 8015352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015354:	4613      	mov	r3, r2
 8015356:	00db      	lsls	r3, r3, #3
 8015358:	1a9b      	subs	r3, r3, r2
 801535a:	009b      	lsls	r3, r3, #2
 801535c:	440b      	add	r3, r1
 801535e:	3350      	adds	r3, #80	; 0x50
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d108      	bne.n	8015378 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6818      	ldr	r0, [r3, #0]
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015370:	461a      	mov	r2, r3
 8015372:	2101      	movs	r1, #1
 8015374:	f005 f8b4 	bl	801a4e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8015378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801537a:	b2db      	uxtb	r3, r3
 801537c:	4619      	mov	r1, r3
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	f00e fb93 	bl	8023aaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	f003 0308 	and.w	r3, r3, #8
 801538a:	2b00      	cmp	r3, #0
 801538c:	d008      	beq.n	80153a0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015390:	015a      	lsls	r2, r3, #5
 8015392:	69fb      	ldr	r3, [r7, #28]
 8015394:	4413      	add	r3, r2
 8015396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801539a:	461a      	mov	r2, r3
 801539c:	2308      	movs	r3, #8
 801539e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	f003 0310 	and.w	r3, r3, #16
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d008      	beq.n	80153bc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80153aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ac:	015a      	lsls	r2, r3, #5
 80153ae:	69fb      	ldr	r3, [r7, #28]
 80153b0:	4413      	add	r3, r2
 80153b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153b6:	461a      	mov	r2, r3
 80153b8:	2310      	movs	r3, #16
 80153ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d008      	beq.n	80153d8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80153c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c8:	015a      	lsls	r2, r3, #5
 80153ca:	69fb      	ldr	r3, [r7, #28]
 80153cc:	4413      	add	r3, r2
 80153ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153d2:	461a      	mov	r2, r3
 80153d4:	2340      	movs	r3, #64	; 0x40
 80153d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	f003 0302 	and.w	r3, r3, #2
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d008      	beq.n	80153f4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80153e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e4:	015a      	lsls	r2, r3, #5
 80153e6:	69fb      	ldr	r3, [r7, #28]
 80153e8:	4413      	add	r3, r2
 80153ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153ee:	461a      	mov	r2, r3
 80153f0:	2302      	movs	r3, #2
 80153f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d003      	beq.n	8015406 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80153fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f000 fc48 	bl	8015c96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8015406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015408:	3301      	adds	r3, #1
 801540a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801540e:	085b      	lsrs	r3, r3, #1
 8015410:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8015412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015414:	2b00      	cmp	r3, #0
 8015416:	f47f af49 	bne.w	80152ac <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	4618      	mov	r0, r3
 8015420:	f004 ff99 	bl	801a356 <USB_ReadInterrupts>
 8015424:	4603      	mov	r3, r0
 8015426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801542a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801542e:	d122      	bne.n	8015476 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8015430:	69fb      	ldr	r3, [r7, #28]
 8015432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015436:	685b      	ldr	r3, [r3, #4]
 8015438:	69fa      	ldr	r2, [r7, #28]
 801543a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801543e:	f023 0301 	bic.w	r3, r3, #1
 8015442:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801544a:	2b01      	cmp	r3, #1
 801544c:	d108      	bne.n	8015460 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2200      	movs	r2, #0
 8015452:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8015456:	2100      	movs	r1, #0
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f00e fd7b 	bl	8023f54 <HAL_PCDEx_LPM_Callback>
 801545e:	e002      	b.n	8015466 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f00e fb99 	bl	8023b98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	695a      	ldr	r2, [r3, #20]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8015474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	4618      	mov	r0, r3
 801547c:	f004 ff6b 	bl	801a356 <USB_ReadInterrupts>
 8015480:	4603      	mov	r3, r0
 8015482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801548a:	d112      	bne.n	80154b2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015492:	689b      	ldr	r3, [r3, #8]
 8015494:	f003 0301 	and.w	r3, r3, #1
 8015498:	2b01      	cmp	r3, #1
 801549a:	d102      	bne.n	80154a2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f00e fb55 	bl	8023b4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	695a      	ldr	r2, [r3, #20]
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80154b0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f004 ff4d 	bl	801a356 <USB_ReadInterrupts>
 80154bc:	4603      	mov	r3, r0
 80154be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80154c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80154c6:	d121      	bne.n	801550c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	695a      	ldr	r2, [r3, #20]
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80154d6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d111      	bne.n	8015506 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	2201      	movs	r2, #1
 80154e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80154f0:	089b      	lsrs	r3, r3, #2
 80154f2:	f003 020f 	and.w	r2, r3, #15
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80154fc:	2101      	movs	r1, #1
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f00e fd28 	bl	8023f54 <HAL_PCDEx_LPM_Callback>
 8015504:	e002      	b.n	801550c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f00e fb20 	bl	8023b4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	4618      	mov	r0, r3
 8015512:	f004 ff20 	bl	801a356 <USB_ReadInterrupts>
 8015516:	4603      	mov	r3, r0
 8015518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801551c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015520:	f040 80c7 	bne.w	80156b2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801552a:	685b      	ldr	r3, [r3, #4]
 801552c:	69fa      	ldr	r2, [r7, #28]
 801552e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015532:	f023 0301 	bic.w	r3, r3, #1
 8015536:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2110      	movs	r1, #16
 801553e:	4618      	mov	r0, r3
 8015540:	f003 ffba 	bl	80194b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015544:	2300      	movs	r3, #0
 8015546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015548:	e056      	b.n	80155f8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801554c:	015a      	lsls	r2, r3, #5
 801554e:	69fb      	ldr	r3, [r7, #28]
 8015550:	4413      	add	r3, r2
 8015552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015556:	461a      	mov	r2, r3
 8015558:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801555c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015560:	015a      	lsls	r2, r3, #5
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	4413      	add	r3, r2
 8015566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801556e:	0151      	lsls	r1, r2, #5
 8015570:	69fa      	ldr	r2, [r7, #28]
 8015572:	440a      	add	r2, r1
 8015574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015578:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801557c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015580:	015a      	lsls	r2, r3, #5
 8015582:	69fb      	ldr	r3, [r7, #28]
 8015584:	4413      	add	r3, r2
 8015586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801558e:	0151      	lsls	r1, r2, #5
 8015590:	69fa      	ldr	r2, [r7, #28]
 8015592:	440a      	add	r2, r1
 8015594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015598:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801559c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155a0:	015a      	lsls	r2, r3, #5
 80155a2:	69fb      	ldr	r3, [r7, #28]
 80155a4:	4413      	add	r3, r2
 80155a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155aa:	461a      	mov	r2, r3
 80155ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80155b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80155b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b4:	015a      	lsls	r2, r3, #5
 80155b6:	69fb      	ldr	r3, [r7, #28]
 80155b8:	4413      	add	r3, r2
 80155ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155c2:	0151      	lsls	r1, r2, #5
 80155c4:	69fa      	ldr	r2, [r7, #28]
 80155c6:	440a      	add	r2, r1
 80155c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80155cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80155d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80155d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d4:	015a      	lsls	r2, r3, #5
 80155d6:	69fb      	ldr	r3, [r7, #28]
 80155d8:	4413      	add	r3, r2
 80155da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155e2:	0151      	lsls	r1, r2, #5
 80155e4:	69fa      	ldr	r2, [r7, #28]
 80155e6:	440a      	add	r2, r1
 80155e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80155ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80155f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80155f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155f4:	3301      	adds	r3, #1
 80155f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	685b      	ldr	r3, [r3, #4]
 80155fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155fe:	429a      	cmp	r2, r3
 8015600:	d3a3      	bcc.n	801554a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8015602:	69fb      	ldr	r3, [r7, #28]
 8015604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015608:	69db      	ldr	r3, [r3, #28]
 801560a:	69fa      	ldr	r2, [r7, #28]
 801560c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015610:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8015614:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801561a:	2b00      	cmp	r3, #0
 801561c:	d016      	beq.n	801564c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801561e:	69fb      	ldr	r3, [r7, #28]
 8015620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015628:	69fa      	ldr	r2, [r7, #28]
 801562a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801562e:	f043 030b 	orr.w	r3, r3, #11
 8015632:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8015636:	69fb      	ldr	r3, [r7, #28]
 8015638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801563c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801563e:	69fa      	ldr	r2, [r7, #28]
 8015640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015644:	f043 030b 	orr.w	r3, r3, #11
 8015648:	6453      	str	r3, [r2, #68]	; 0x44
 801564a:	e015      	b.n	8015678 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801564c:	69fb      	ldr	r3, [r7, #28]
 801564e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015652:	695b      	ldr	r3, [r3, #20]
 8015654:	69fa      	ldr	r2, [r7, #28]
 8015656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801565a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801565e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8015662:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8015664:	69fb      	ldr	r3, [r7, #28]
 8015666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801566a:	691b      	ldr	r3, [r3, #16]
 801566c:	69fa      	ldr	r2, [r7, #28]
 801566e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015672:	f043 030b 	orr.w	r3, r3, #11
 8015676:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8015678:	69fb      	ldr	r3, [r7, #28]
 801567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	69fa      	ldr	r2, [r7, #28]
 8015682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015686:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801568a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	6818      	ldr	r0, [r3, #0]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	691b      	ldr	r3, [r3, #16]
 8015694:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801569c:	461a      	mov	r2, r3
 801569e:	f004 ff1f 	bl	801a4e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	695a      	ldr	r2, [r3, #20]
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80156b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	4618      	mov	r0, r3
 80156b8:	f004 fe4d 	bl	801a356 <USB_ReadInterrupts>
 80156bc:	4603      	mov	r3, r0
 80156be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80156c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80156c6:	d124      	bne.n	8015712 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	4618      	mov	r0, r3
 80156ce:	f004 fee3 	bl	801a498 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	4618      	mov	r0, r3
 80156d8:	f003 ff4b 	bl	8019572 <USB_GetDevSpeed>
 80156dc:	4603      	mov	r3, r0
 80156de:	461a      	mov	r2, r3
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681c      	ldr	r4, [r3, #0]
 80156e8:	f000 fe66 	bl	80163b8 <HAL_RCC_GetHCLKFreq>
 80156ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	461a      	mov	r2, r3
 80156f6:	4620      	mov	r0, r4
 80156f8:	f003 fc70 	bl	8018fdc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f00e f9fc 	bl	8023afa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	695a      	ldr	r2, [r3, #20]
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8015710:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	4618      	mov	r0, r3
 8015718:	f004 fe1d 	bl	801a356 <USB_ReadInterrupts>
 801571c:	4603      	mov	r3, r0
 801571e:	f003 0308 	and.w	r3, r3, #8
 8015722:	2b08      	cmp	r3, #8
 8015724:	d10a      	bne.n	801573c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	f00e f9d9 	bl	8023ade <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	695a      	ldr	r2, [r3, #20]
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	f002 0208 	and.w	r2, r2, #8
 801573a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	4618      	mov	r0, r3
 8015742:	f004 fe08 	bl	801a356 <USB_ReadInterrupts>
 8015746:	4603      	mov	r3, r0
 8015748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801574c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015750:	d10f      	bne.n	8015772 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8015752:	2300      	movs	r3, #0
 8015754:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8015756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015758:	b2db      	uxtb	r3, r3
 801575a:	4619      	mov	r1, r3
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f00e fa3b 	bl	8023bd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	695a      	ldr	r2, [r3, #20]
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8015770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	4618      	mov	r0, r3
 8015778:	f004 fded 	bl	801a356 <USB_ReadInterrupts>
 801577c:	4603      	mov	r3, r0
 801577e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015786:	d10f      	bne.n	80157a8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8015788:	2300      	movs	r3, #0
 801578a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801578e:	b2db      	uxtb	r3, r3
 8015790:	4619      	mov	r1, r3
 8015792:	6878      	ldr	r0, [r7, #4]
 8015794:	f00e fa0e 	bl	8023bb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	695a      	ldr	r2, [r3, #20]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80157a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	4618      	mov	r0, r3
 80157ae:	f004 fdd2 	bl	801a356 <USB_ReadInterrupts>
 80157b2:	4603      	mov	r3, r0
 80157b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80157b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80157bc:	d10a      	bne.n	80157d4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f00e fa1c 	bl	8023bfc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	695a      	ldr	r2, [r3, #20]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80157d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	4618      	mov	r0, r3
 80157da:	f004 fdbc 	bl	801a356 <USB_ReadInterrupts>
 80157de:	4603      	mov	r3, r0
 80157e0:	f003 0304 	and.w	r3, r3, #4
 80157e4:	2b04      	cmp	r3, #4
 80157e6:	d115      	bne.n	8015814 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	685b      	ldr	r3, [r3, #4]
 80157ee:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80157f0:	69bb      	ldr	r3, [r7, #24]
 80157f2:	f003 0304 	and.w	r3, r3, #4
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d002      	beq.n	8015800 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f00e fa0c 	bl	8023c18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	6859      	ldr	r1, [r3, #4]
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	69ba      	ldr	r2, [r7, #24]
 801580c:	430a      	orrs	r2, r1
 801580e:	605a      	str	r2, [r3, #4]
 8015810:	e000      	b.n	8015814 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8015812:	bf00      	nop
    }
  }
}
 8015814:	3734      	adds	r7, #52	; 0x34
 8015816:	46bd      	mov	sp, r7
 8015818:	bd90      	pop	{r4, r7, pc}

0801581a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801581a:	b580      	push	{r7, lr}
 801581c:	b082      	sub	sp, #8
 801581e:	af00      	add	r7, sp, #0
 8015820:	6078      	str	r0, [r7, #4]
 8015822:	460b      	mov	r3, r1
 8015824:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801582c:	2b01      	cmp	r3, #1
 801582e:	d101      	bne.n	8015834 <HAL_PCD_SetAddress+0x1a>
 8015830:	2302      	movs	r3, #2
 8015832:	e013      	b.n	801585c <HAL_PCD_SetAddress+0x42>
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2201      	movs	r2, #1
 8015838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	78fa      	ldrb	r2, [r7, #3]
 8015840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	78fa      	ldrb	r2, [r7, #3]
 801584a:	4611      	mov	r1, r2
 801584c:	4618      	mov	r0, r3
 801584e:	f004 fd1a 	bl	801a286 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2200      	movs	r2, #0
 8015856:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801585a:	2300      	movs	r3, #0
}
 801585c:	4618      	mov	r0, r3
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b084      	sub	sp, #16
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
 801586c:	4608      	mov	r0, r1
 801586e:	4611      	mov	r1, r2
 8015870:	461a      	mov	r2, r3
 8015872:	4603      	mov	r3, r0
 8015874:	70fb      	strb	r3, [r7, #3]
 8015876:	460b      	mov	r3, r1
 8015878:	803b      	strh	r3, [r7, #0]
 801587a:	4613      	mov	r3, r2
 801587c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801587e:	2300      	movs	r3, #0
 8015880:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8015882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015886:	2b00      	cmp	r3, #0
 8015888:	da0f      	bge.n	80158aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801588a:	78fb      	ldrb	r3, [r7, #3]
 801588c:	f003 020f 	and.w	r2, r3, #15
 8015890:	4613      	mov	r3, r2
 8015892:	00db      	lsls	r3, r3, #3
 8015894:	1a9b      	subs	r3, r3, r2
 8015896:	009b      	lsls	r3, r3, #2
 8015898:	3338      	adds	r3, #56	; 0x38
 801589a:	687a      	ldr	r2, [r7, #4]
 801589c:	4413      	add	r3, r2
 801589e:	3304      	adds	r3, #4
 80158a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	2201      	movs	r2, #1
 80158a6:	705a      	strb	r2, [r3, #1]
 80158a8:	e00f      	b.n	80158ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80158aa:	78fb      	ldrb	r3, [r7, #3]
 80158ac:	f003 020f 	and.w	r2, r3, #15
 80158b0:	4613      	mov	r3, r2
 80158b2:	00db      	lsls	r3, r3, #3
 80158b4:	1a9b      	subs	r3, r3, r2
 80158b6:	009b      	lsls	r3, r3, #2
 80158b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80158bc:	687a      	ldr	r2, [r7, #4]
 80158be:	4413      	add	r3, r2
 80158c0:	3304      	adds	r3, #4
 80158c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	2200      	movs	r2, #0
 80158c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80158ca:	78fb      	ldrb	r3, [r7, #3]
 80158cc:	f003 030f 	and.w	r3, r3, #15
 80158d0:	b2da      	uxtb	r2, r3
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80158d6:	883a      	ldrh	r2, [r7, #0]
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	78ba      	ldrb	r2, [r7, #2]
 80158e0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	785b      	ldrb	r3, [r3, #1]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d004      	beq.n	80158f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	b29a      	uxth	r2, r3
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80158f4:	78bb      	ldrb	r3, [r7, #2]
 80158f6:	2b02      	cmp	r3, #2
 80158f8:	d102      	bne.n	8015900 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	2200      	movs	r2, #0
 80158fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8015906:	2b01      	cmp	r3, #1
 8015908:	d101      	bne.n	801590e <HAL_PCD_EP_Open+0xaa>
 801590a:	2302      	movs	r3, #2
 801590c:	e00e      	b.n	801592c <HAL_PCD_EP_Open+0xc8>
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2201      	movs	r2, #1
 8015912:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	68f9      	ldr	r1, [r7, #12]
 801591c:	4618      	mov	r0, r3
 801591e:	f003 fe4d 	bl	80195bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2200      	movs	r2, #0
 8015926:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801592a:	7afb      	ldrb	r3, [r7, #11]
}
 801592c:	4618      	mov	r0, r3
 801592e:	3710      	adds	r7, #16
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	460b      	mov	r3, r1
 801593e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8015940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015944:	2b00      	cmp	r3, #0
 8015946:	da0f      	bge.n	8015968 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015948:	78fb      	ldrb	r3, [r7, #3]
 801594a:	f003 020f 	and.w	r2, r3, #15
 801594e:	4613      	mov	r3, r2
 8015950:	00db      	lsls	r3, r3, #3
 8015952:	1a9b      	subs	r3, r3, r2
 8015954:	009b      	lsls	r3, r3, #2
 8015956:	3338      	adds	r3, #56	; 0x38
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	4413      	add	r3, r2
 801595c:	3304      	adds	r3, #4
 801595e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	2201      	movs	r2, #1
 8015964:	705a      	strb	r2, [r3, #1]
 8015966:	e00f      	b.n	8015988 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8015968:	78fb      	ldrb	r3, [r7, #3]
 801596a:	f003 020f 	and.w	r2, r3, #15
 801596e:	4613      	mov	r3, r2
 8015970:	00db      	lsls	r3, r3, #3
 8015972:	1a9b      	subs	r3, r3, r2
 8015974:	009b      	lsls	r3, r3, #2
 8015976:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801597a:	687a      	ldr	r2, [r7, #4]
 801597c:	4413      	add	r3, r2
 801597e:	3304      	adds	r3, #4
 8015980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	2200      	movs	r2, #0
 8015986:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8015988:	78fb      	ldrb	r3, [r7, #3]
 801598a:	f003 030f 	and.w	r3, r3, #15
 801598e:	b2da      	uxtb	r2, r3
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801599a:	2b01      	cmp	r3, #1
 801599c:	d101      	bne.n	80159a2 <HAL_PCD_EP_Close+0x6e>
 801599e:	2302      	movs	r3, #2
 80159a0:	e00e      	b.n	80159c0 <HAL_PCD_EP_Close+0x8c>
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2201      	movs	r2, #1
 80159a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	68f9      	ldr	r1, [r7, #12]
 80159b0:	4618      	mov	r0, r3
 80159b2:	f003 fe8b 	bl	80196cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	2200      	movs	r2, #0
 80159ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80159be:	2300      	movs	r3, #0
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b086      	sub	sp, #24
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	60f8      	str	r0, [r7, #12]
 80159d0:	607a      	str	r2, [r7, #4]
 80159d2:	603b      	str	r3, [r7, #0]
 80159d4:	460b      	mov	r3, r1
 80159d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80159d8:	7afb      	ldrb	r3, [r7, #11]
 80159da:	f003 020f 	and.w	r2, r3, #15
 80159de:	4613      	mov	r3, r2
 80159e0:	00db      	lsls	r3, r3, #3
 80159e2:	1a9b      	subs	r3, r3, r2
 80159e4:	009b      	lsls	r3, r3, #2
 80159e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80159ea:	68fa      	ldr	r2, [r7, #12]
 80159ec:	4413      	add	r3, r2
 80159ee:	3304      	adds	r3, #4
 80159f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	687a      	ldr	r2, [r7, #4]
 80159f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	683a      	ldr	r2, [r7, #0]
 80159fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80159fe:	697b      	ldr	r3, [r7, #20]
 8015a00:	2200      	movs	r2, #0
 8015a02:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	2200      	movs	r2, #0
 8015a08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8015a0a:	7afb      	ldrb	r3, [r7, #11]
 8015a0c:	f003 030f 	and.w	r3, r3, #15
 8015a10:	b2da      	uxtb	r2, r3
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	691b      	ldr	r3, [r3, #16]
 8015a1a:	2b01      	cmp	r3, #1
 8015a1c:	d102      	bne.n	8015a24 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8015a1e:	687a      	ldr	r2, [r7, #4]
 8015a20:	697b      	ldr	r3, [r7, #20]
 8015a22:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8015a24:	7afb      	ldrb	r3, [r7, #11]
 8015a26:	f003 030f 	and.w	r3, r3, #15
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d109      	bne.n	8015a42 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	6818      	ldr	r0, [r3, #0]
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	691b      	ldr	r3, [r3, #16]
 8015a36:	b2db      	uxtb	r3, r3
 8015a38:	461a      	mov	r2, r3
 8015a3a:	6979      	ldr	r1, [r7, #20]
 8015a3c:	f004 f966 	bl	8019d0c <USB_EP0StartXfer>
 8015a40:	e008      	b.n	8015a54 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	6818      	ldr	r0, [r3, #0]
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	691b      	ldr	r3, [r3, #16]
 8015a4a:	b2db      	uxtb	r3, r3
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	6979      	ldr	r1, [r7, #20]
 8015a50:	f003 ff18 	bl	8019884 <USB_EPStartXfer>
  }

  return HAL_OK;
 8015a54:	2300      	movs	r3, #0
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3718      	adds	r7, #24
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}

08015a5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8015a5e:	b480      	push	{r7}
 8015a60:	b083      	sub	sp, #12
 8015a62:	af00      	add	r7, sp, #0
 8015a64:	6078      	str	r0, [r7, #4]
 8015a66:	460b      	mov	r3, r1
 8015a68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8015a6a:	78fb      	ldrb	r3, [r7, #3]
 8015a6c:	f003 020f 	and.w	r2, r3, #15
 8015a70:	6879      	ldr	r1, [r7, #4]
 8015a72:	4613      	mov	r3, r2
 8015a74:	00db      	lsls	r3, r3, #3
 8015a76:	1a9b      	subs	r3, r3, r2
 8015a78:	009b      	lsls	r3, r3, #2
 8015a7a:	440b      	add	r3, r1
 8015a7c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015a80:	681b      	ldr	r3, [r3, #0]
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	370c      	adds	r7, #12
 8015a86:	46bd      	mov	sp, r7
 8015a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8c:	4770      	bx	lr

08015a8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8015a8e:	b580      	push	{r7, lr}
 8015a90:	b086      	sub	sp, #24
 8015a92:	af00      	add	r7, sp, #0
 8015a94:	60f8      	str	r0, [r7, #12]
 8015a96:	607a      	str	r2, [r7, #4]
 8015a98:	603b      	str	r3, [r7, #0]
 8015a9a:	460b      	mov	r3, r1
 8015a9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015a9e:	7afb      	ldrb	r3, [r7, #11]
 8015aa0:	f003 020f 	and.w	r2, r3, #15
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	00db      	lsls	r3, r3, #3
 8015aa8:	1a9b      	subs	r3, r3, r2
 8015aaa:	009b      	lsls	r3, r3, #2
 8015aac:	3338      	adds	r3, #56	; 0x38
 8015aae:	68fa      	ldr	r2, [r7, #12]
 8015ab0:	4413      	add	r3, r2
 8015ab2:	3304      	adds	r3, #4
 8015ab4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	683a      	ldr	r2, [r7, #0]
 8015ac0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8015ac2:	697b      	ldr	r3, [r7, #20]
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	2201      	movs	r2, #1
 8015acc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8015ace:	7afb      	ldrb	r3, [r7, #11]
 8015ad0:	f003 030f 	and.w	r3, r3, #15
 8015ad4:	b2da      	uxtb	r2, r3
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	691b      	ldr	r3, [r3, #16]
 8015ade:	2b01      	cmp	r3, #1
 8015ae0:	d102      	bne.n	8015ae8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8015ae2:	687a      	ldr	r2, [r7, #4]
 8015ae4:	697b      	ldr	r3, [r7, #20]
 8015ae6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8015ae8:	7afb      	ldrb	r3, [r7, #11]
 8015aea:	f003 030f 	and.w	r3, r3, #15
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d109      	bne.n	8015b06 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	6818      	ldr	r0, [r3, #0]
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	691b      	ldr	r3, [r3, #16]
 8015afa:	b2db      	uxtb	r3, r3
 8015afc:	461a      	mov	r2, r3
 8015afe:	6979      	ldr	r1, [r7, #20]
 8015b00:	f004 f904 	bl	8019d0c <USB_EP0StartXfer>
 8015b04:	e008      	b.n	8015b18 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	6818      	ldr	r0, [r3, #0]
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	691b      	ldr	r3, [r3, #16]
 8015b0e:	b2db      	uxtb	r3, r3
 8015b10:	461a      	mov	r2, r3
 8015b12:	6979      	ldr	r1, [r7, #20]
 8015b14:	f003 feb6 	bl	8019884 <USB_EPStartXfer>
  }

  return HAL_OK;
 8015b18:	2300      	movs	r3, #0
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	3718      	adds	r7, #24
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}

08015b22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8015b22:	b580      	push	{r7, lr}
 8015b24:	b084      	sub	sp, #16
 8015b26:	af00      	add	r7, sp, #0
 8015b28:	6078      	str	r0, [r7, #4]
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8015b2e:	78fb      	ldrb	r3, [r7, #3]
 8015b30:	f003 020f 	and.w	r2, r3, #15
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	685b      	ldr	r3, [r3, #4]
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	d901      	bls.n	8015b40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	e050      	b.n	8015be2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8015b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	da0f      	bge.n	8015b68 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015b48:	78fb      	ldrb	r3, [r7, #3]
 8015b4a:	f003 020f 	and.w	r2, r3, #15
 8015b4e:	4613      	mov	r3, r2
 8015b50:	00db      	lsls	r3, r3, #3
 8015b52:	1a9b      	subs	r3, r3, r2
 8015b54:	009b      	lsls	r3, r3, #2
 8015b56:	3338      	adds	r3, #56	; 0x38
 8015b58:	687a      	ldr	r2, [r7, #4]
 8015b5a:	4413      	add	r3, r2
 8015b5c:	3304      	adds	r3, #4
 8015b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	2201      	movs	r2, #1
 8015b64:	705a      	strb	r2, [r3, #1]
 8015b66:	e00d      	b.n	8015b84 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8015b68:	78fa      	ldrb	r2, [r7, #3]
 8015b6a:	4613      	mov	r3, r2
 8015b6c:	00db      	lsls	r3, r3, #3
 8015b6e:	1a9b      	subs	r3, r3, r2
 8015b70:	009b      	lsls	r3, r3, #2
 8015b72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8015b76:	687a      	ldr	r2, [r7, #4]
 8015b78:	4413      	add	r3, r2
 8015b7a:	3304      	adds	r3, #4
 8015b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	2200      	movs	r2, #0
 8015b82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	2201      	movs	r2, #1
 8015b88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8015b8a:	78fb      	ldrb	r3, [r7, #3]
 8015b8c:	f003 030f 	and.w	r3, r3, #15
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8015b9c:	2b01      	cmp	r3, #1
 8015b9e:	d101      	bne.n	8015ba4 <HAL_PCD_EP_SetStall+0x82>
 8015ba0:	2302      	movs	r3, #2
 8015ba2:	e01e      	b.n	8015be2 <HAL_PCD_EP_SetStall+0xc0>
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2201      	movs	r2, #1
 8015ba8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	68f9      	ldr	r1, [r7, #12]
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	f004 fa93 	bl	801a0de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8015bb8:	78fb      	ldrb	r3, [r7, #3]
 8015bba:	f003 030f 	and.w	r3, r3, #15
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d10a      	bne.n	8015bd8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6818      	ldr	r0, [r3, #0]
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	691b      	ldr	r3, [r3, #16]
 8015bca:	b2d9      	uxtb	r1, r3
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015bd2:	461a      	mov	r2, r3
 8015bd4:	f004 fc84 	bl	801a4e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8015be0:	2300      	movs	r3, #0
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3710      	adds	r7, #16
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}

08015bea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8015bea:	b580      	push	{r7, lr}
 8015bec:	b084      	sub	sp, #16
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
 8015bf2:	460b      	mov	r3, r1
 8015bf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8015bf6:	78fb      	ldrb	r3, [r7, #3]
 8015bf8:	f003 020f 	and.w	r2, r3, #15
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	685b      	ldr	r3, [r3, #4]
 8015c00:	429a      	cmp	r2, r3
 8015c02:	d901      	bls.n	8015c08 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8015c04:	2301      	movs	r3, #1
 8015c06:	e042      	b.n	8015c8e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8015c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	da0f      	bge.n	8015c30 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015c10:	78fb      	ldrb	r3, [r7, #3]
 8015c12:	f003 020f 	and.w	r2, r3, #15
 8015c16:	4613      	mov	r3, r2
 8015c18:	00db      	lsls	r3, r3, #3
 8015c1a:	1a9b      	subs	r3, r3, r2
 8015c1c:	009b      	lsls	r3, r3, #2
 8015c1e:	3338      	adds	r3, #56	; 0x38
 8015c20:	687a      	ldr	r2, [r7, #4]
 8015c22:	4413      	add	r3, r2
 8015c24:	3304      	adds	r3, #4
 8015c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	2201      	movs	r2, #1
 8015c2c:	705a      	strb	r2, [r3, #1]
 8015c2e:	e00f      	b.n	8015c50 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8015c30:	78fb      	ldrb	r3, [r7, #3]
 8015c32:	f003 020f 	and.w	r2, r3, #15
 8015c36:	4613      	mov	r3, r2
 8015c38:	00db      	lsls	r3, r3, #3
 8015c3a:	1a9b      	subs	r3, r3, r2
 8015c3c:	009b      	lsls	r3, r3, #2
 8015c3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	4413      	add	r3, r2
 8015c46:	3304      	adds	r3, #4
 8015c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	2200      	movs	r2, #0
 8015c54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8015c56:	78fb      	ldrb	r3, [r7, #3]
 8015c58:	f003 030f 	and.w	r3, r3, #15
 8015c5c:	b2da      	uxtb	r2, r3
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8015c68:	2b01      	cmp	r3, #1
 8015c6a:	d101      	bne.n	8015c70 <HAL_PCD_EP_ClrStall+0x86>
 8015c6c:	2302      	movs	r3, #2
 8015c6e:	e00e      	b.n	8015c8e <HAL_PCD_EP_ClrStall+0xa4>
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	2201      	movs	r2, #1
 8015c74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	68f9      	ldr	r1, [r7, #12]
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f004 fa9b 	bl	801a1ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	2200      	movs	r2, #0
 8015c88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8015c8c:	2300      	movs	r3, #0
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	3710      	adds	r7, #16
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}

08015c96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8015c96:	b580      	push	{r7, lr}
 8015c98:	b08a      	sub	sp, #40	; 0x28
 8015c9a:	af02      	add	r7, sp, #8
 8015c9c:	6078      	str	r0, [r7, #4]
 8015c9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8015caa:	683a      	ldr	r2, [r7, #0]
 8015cac:	4613      	mov	r3, r2
 8015cae:	00db      	lsls	r3, r3, #3
 8015cb0:	1a9b      	subs	r3, r3, r2
 8015cb2:	009b      	lsls	r3, r3, #2
 8015cb4:	3338      	adds	r3, #56	; 0x38
 8015cb6:	687a      	ldr	r2, [r7, #4]
 8015cb8:	4413      	add	r3, r2
 8015cba:	3304      	adds	r3, #4
 8015cbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	699a      	ldr	r2, [r3, #24]
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	695b      	ldr	r3, [r3, #20]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d901      	bls.n	8015cce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8015cca:	2301      	movs	r3, #1
 8015ccc:	e06c      	b.n	8015da8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	695a      	ldr	r2, [r3, #20]
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	699b      	ldr	r3, [r3, #24]
 8015cd6:	1ad3      	subs	r3, r2, r3
 8015cd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	689b      	ldr	r3, [r3, #8]
 8015cde:	69fa      	ldr	r2, [r7, #28]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d902      	bls.n	8015cea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	689b      	ldr	r3, [r3, #8]
 8015ce8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8015cea:	69fb      	ldr	r3, [r7, #28]
 8015cec:	3303      	adds	r3, #3
 8015cee:	089b      	lsrs	r3, r3, #2
 8015cf0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8015cf2:	e02b      	b.n	8015d4c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	695a      	ldr	r2, [r3, #20]
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	699b      	ldr	r3, [r3, #24]
 8015cfc:	1ad3      	subs	r3, r2, r3
 8015cfe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	689b      	ldr	r3, [r3, #8]
 8015d04:	69fa      	ldr	r2, [r7, #28]
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d902      	bls.n	8015d10 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	689b      	ldr	r3, [r3, #8]
 8015d0e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8015d10:	69fb      	ldr	r3, [r7, #28]
 8015d12:	3303      	adds	r3, #3
 8015d14:	089b      	lsrs	r3, r3, #2
 8015d16:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	68d9      	ldr	r1, [r3, #12]
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	b2da      	uxtb	r2, r3
 8015d20:	69fb      	ldr	r3, [r7, #28]
 8015d22:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8015d28:	b2db      	uxtb	r3, r3
 8015d2a:	9300      	str	r3, [sp, #0]
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	6978      	ldr	r0, [r7, #20]
 8015d30:	f004 f93f 	bl	8019fb2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	68da      	ldr	r2, [r3, #12]
 8015d38:	69fb      	ldr	r3, [r7, #28]
 8015d3a:	441a      	add	r2, r3
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	699a      	ldr	r2, [r3, #24]
 8015d44:	69fb      	ldr	r3, [r7, #28]
 8015d46:	441a      	add	r2, r3
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	015a      	lsls	r2, r3, #5
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	4413      	add	r3, r2
 8015d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d58:	699b      	ldr	r3, [r3, #24]
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	69ba      	ldr	r2, [r7, #24]
 8015d5e:	429a      	cmp	r2, r3
 8015d60:	d809      	bhi.n	8015d76 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	699a      	ldr	r2, [r3, #24]
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d203      	bcs.n	8015d76 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	695b      	ldr	r3, [r3, #20]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d1be      	bne.n	8015cf4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	695a      	ldr	r2, [r3, #20]
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	699b      	ldr	r3, [r3, #24]
 8015d7e:	429a      	cmp	r2, r3
 8015d80:	d811      	bhi.n	8015da6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	f003 030f 	and.w	r3, r3, #15
 8015d88:	2201      	movs	r2, #1
 8015d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8015d8e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8015d90:	693b      	ldr	r3, [r7, #16]
 8015d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	43db      	mvns	r3, r3
 8015d9c:	6939      	ldr	r1, [r7, #16]
 8015d9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015da2:	4013      	ands	r3, r2
 8015da4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8015da6:	2300      	movs	r3, #0
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3720      	adds	r7, #32
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}

08015db0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b086      	sub	sp, #24
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
 8015db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	333c      	adds	r3, #60	; 0x3c
 8015dc8:	3304      	adds	r3, #4
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	015a      	lsls	r2, r3, #5
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	4413      	add	r3, r2
 8015dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015dda:	689b      	ldr	r3, [r3, #8]
 8015ddc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	691b      	ldr	r3, [r3, #16]
 8015de2:	2b01      	cmp	r3, #1
 8015de4:	f040 80a0 	bne.w	8015f28 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	f003 0308 	and.w	r3, r3, #8
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d015      	beq.n	8015e1e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	4a72      	ldr	r2, [pc, #456]	; (8015fc0 <PCD_EP_OutXfrComplete_int+0x210>)
 8015df6:	4293      	cmp	r3, r2
 8015df8:	f240 80dd 	bls.w	8015fb6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8015dfc:	68bb      	ldr	r3, [r7, #8]
 8015dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	f000 80d7 	beq.w	8015fb6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	015a      	lsls	r2, r3, #5
 8015e0c:	693b      	ldr	r3, [r7, #16]
 8015e0e:	4413      	add	r3, r2
 8015e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e14:	461a      	mov	r2, r3
 8015e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015e1a:	6093      	str	r3, [r2, #8]
 8015e1c:	e0cb      	b.n	8015fb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	f003 0320 	and.w	r3, r3, #32
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d009      	beq.n	8015e3c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8015e28:	683b      	ldr	r3, [r7, #0]
 8015e2a:	015a      	lsls	r2, r3, #5
 8015e2c:	693b      	ldr	r3, [r7, #16]
 8015e2e:	4413      	add	r3, r2
 8015e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e34:	461a      	mov	r2, r3
 8015e36:	2320      	movs	r3, #32
 8015e38:	6093      	str	r3, [r2, #8]
 8015e3a:	e0bc      	b.n	8015fb6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8015e3c:	68bb      	ldr	r3, [r7, #8]
 8015e3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	f040 80b7 	bne.w	8015fb6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	4a5d      	ldr	r2, [pc, #372]	; (8015fc0 <PCD_EP_OutXfrComplete_int+0x210>)
 8015e4c:	4293      	cmp	r3, r2
 8015e4e:	d90f      	bls.n	8015e70 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d00a      	beq.n	8015e70 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	015a      	lsls	r2, r3, #5
 8015e5e:	693b      	ldr	r3, [r7, #16]
 8015e60:	4413      	add	r3, r2
 8015e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e66:	461a      	mov	r2, r3
 8015e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015e6c:	6093      	str	r3, [r2, #8]
 8015e6e:	e0a2      	b.n	8015fb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8015e70:	6879      	ldr	r1, [r7, #4]
 8015e72:	683a      	ldr	r2, [r7, #0]
 8015e74:	4613      	mov	r3, r2
 8015e76:	00db      	lsls	r3, r3, #3
 8015e78:	1a9b      	subs	r3, r3, r2
 8015e7a:	009b      	lsls	r3, r3, #2
 8015e7c:	440b      	add	r3, r1
 8015e7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8015e82:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	0159      	lsls	r1, r3, #5
 8015e88:	693b      	ldr	r3, [r7, #16]
 8015e8a:	440b      	add	r3, r1
 8015e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e90:	691b      	ldr	r3, [r3, #16]
 8015e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8015e96:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	683a      	ldr	r2, [r7, #0]
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	00db      	lsls	r3, r3, #3
 8015ea0:	1a9b      	subs	r3, r3, r2
 8015ea2:	009b      	lsls	r3, r3, #2
 8015ea4:	4403      	add	r3, r0
 8015ea6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015eaa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8015eac:	6879      	ldr	r1, [r7, #4]
 8015eae:	683a      	ldr	r2, [r7, #0]
 8015eb0:	4613      	mov	r3, r2
 8015eb2:	00db      	lsls	r3, r3, #3
 8015eb4:	1a9b      	subs	r3, r3, r2
 8015eb6:	009b      	lsls	r3, r3, #2
 8015eb8:	440b      	add	r3, r1
 8015eba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015ebe:	6819      	ldr	r1, [r3, #0]
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	683a      	ldr	r2, [r7, #0]
 8015ec4:	4613      	mov	r3, r2
 8015ec6:	00db      	lsls	r3, r3, #3
 8015ec8:	1a9b      	subs	r3, r3, r2
 8015eca:	009b      	lsls	r3, r3, #2
 8015ecc:	4403      	add	r3, r0
 8015ece:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	4419      	add	r1, r3
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	683a      	ldr	r2, [r7, #0]
 8015eda:	4613      	mov	r3, r2
 8015edc:	00db      	lsls	r3, r3, #3
 8015ede:	1a9b      	subs	r3, r3, r2
 8015ee0:	009b      	lsls	r3, r3, #2
 8015ee2:	4403      	add	r3, r0
 8015ee4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015ee8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d114      	bne.n	8015f1a <PCD_EP_OutXfrComplete_int+0x16a>
 8015ef0:	6879      	ldr	r1, [r7, #4]
 8015ef2:	683a      	ldr	r2, [r7, #0]
 8015ef4:	4613      	mov	r3, r2
 8015ef6:	00db      	lsls	r3, r3, #3
 8015ef8:	1a9b      	subs	r3, r3, r2
 8015efa:	009b      	lsls	r3, r3, #2
 8015efc:	440b      	add	r3, r1
 8015efe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d108      	bne.n	8015f1a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	6818      	ldr	r0, [r3, #0]
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015f12:	461a      	mov	r2, r3
 8015f14:	2101      	movs	r1, #1
 8015f16:	f004 fae3 	bl	801a4e0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	b2db      	uxtb	r3, r3
 8015f1e:	4619      	mov	r1, r3
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f00d fda7 	bl	8023a74 <HAL_PCD_DataOutStageCallback>
 8015f26:	e046      	b.n	8015fb6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	4a26      	ldr	r2, [pc, #152]	; (8015fc4 <PCD_EP_OutXfrComplete_int+0x214>)
 8015f2c:	4293      	cmp	r3, r2
 8015f2e:	d124      	bne.n	8015f7a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d00a      	beq.n	8015f50 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	015a      	lsls	r2, r3, #5
 8015f3e:	693b      	ldr	r3, [r7, #16]
 8015f40:	4413      	add	r3, r2
 8015f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f46:	461a      	mov	r2, r3
 8015f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015f4c:	6093      	str	r3, [r2, #8]
 8015f4e:	e032      	b.n	8015fb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8015f50:	68bb      	ldr	r3, [r7, #8]
 8015f52:	f003 0320 	and.w	r3, r3, #32
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d008      	beq.n	8015f6c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	015a      	lsls	r2, r3, #5
 8015f5e:	693b      	ldr	r3, [r7, #16]
 8015f60:	4413      	add	r3, r2
 8015f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f66:	461a      	mov	r2, r3
 8015f68:	2320      	movs	r3, #32
 8015f6a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	b2db      	uxtb	r3, r3
 8015f70:	4619      	mov	r1, r3
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f00d fd7e 	bl	8023a74 <HAL_PCD_DataOutStageCallback>
 8015f78:	e01d      	b.n	8015fb6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d114      	bne.n	8015faa <PCD_EP_OutXfrComplete_int+0x1fa>
 8015f80:	6879      	ldr	r1, [r7, #4]
 8015f82:	683a      	ldr	r2, [r7, #0]
 8015f84:	4613      	mov	r3, r2
 8015f86:	00db      	lsls	r3, r3, #3
 8015f88:	1a9b      	subs	r3, r3, r2
 8015f8a:	009b      	lsls	r3, r3, #2
 8015f8c:	440b      	add	r3, r1
 8015f8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d108      	bne.n	8015faa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	6818      	ldr	r0, [r3, #0]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015fa2:	461a      	mov	r2, r3
 8015fa4:	2100      	movs	r1, #0
 8015fa6:	f004 fa9b 	bl	801a4e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	4619      	mov	r1, r3
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f00d fd5f 	bl	8023a74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8015fb6:	2300      	movs	r3, #0
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	3718      	adds	r7, #24
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}
 8015fc0:	4f54300a 	.word	0x4f54300a
 8015fc4:	4f54310a 	.word	0x4f54310a

08015fc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b086      	sub	sp, #24
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
 8015fd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	333c      	adds	r3, #60	; 0x3c
 8015fe0:	3304      	adds	r3, #4
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	015a      	lsls	r2, r3, #5
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	4413      	add	r3, r2
 8015fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ff2:	689b      	ldr	r3, [r3, #8]
 8015ff4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	4a15      	ldr	r2, [pc, #84]	; (8016050 <PCD_EP_OutSetupPacket_int+0x88>)
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	d90e      	bls.n	801601c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8015ffe:	68bb      	ldr	r3, [r7, #8]
 8016000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8016004:	2b00      	cmp	r3, #0
 8016006:	d009      	beq.n	801601c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8016008:	683b      	ldr	r3, [r7, #0]
 801600a:	015a      	lsls	r2, r3, #5
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	4413      	add	r3, r2
 8016010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016014:	461a      	mov	r2, r3
 8016016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801601a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	f00d fd17 	bl	8023a50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	4a0a      	ldr	r2, [pc, #40]	; (8016050 <PCD_EP_OutSetupPacket_int+0x88>)
 8016026:	4293      	cmp	r3, r2
 8016028:	d90c      	bls.n	8016044 <PCD_EP_OutSetupPacket_int+0x7c>
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	691b      	ldr	r3, [r3, #16]
 801602e:	2b01      	cmp	r3, #1
 8016030:	d108      	bne.n	8016044 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6818      	ldr	r0, [r3, #0]
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801603c:	461a      	mov	r2, r3
 801603e:	2101      	movs	r1, #1
 8016040:	f004 fa4e 	bl	801a4e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8016044:	2300      	movs	r3, #0
}
 8016046:	4618      	mov	r0, r3
 8016048:	3718      	adds	r7, #24
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}
 801604e:	bf00      	nop
 8016050:	4f54300a 	.word	0x4f54300a

08016054 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8016054:	b480      	push	{r7}
 8016056:	b085      	sub	sp, #20
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	460b      	mov	r3, r1
 801605e:	70fb      	strb	r3, [r7, #3]
 8016060:	4613      	mov	r3, r2
 8016062:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801606a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801606c:	78fb      	ldrb	r3, [r7, #3]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d107      	bne.n	8016082 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8016072:	883b      	ldrh	r3, [r7, #0]
 8016074:	0419      	lsls	r1, r3, #16
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	68ba      	ldr	r2, [r7, #8]
 801607c:	430a      	orrs	r2, r1
 801607e:	629a      	str	r2, [r3, #40]	; 0x28
 8016080:	e028      	b.n	80160d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016088:	0c1b      	lsrs	r3, r3, #16
 801608a:	68ba      	ldr	r2, [r7, #8]
 801608c:	4413      	add	r3, r2
 801608e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8016090:	2300      	movs	r3, #0
 8016092:	73fb      	strb	r3, [r7, #15]
 8016094:	e00d      	b.n	80160b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681a      	ldr	r2, [r3, #0]
 801609a:	7bfb      	ldrb	r3, [r7, #15]
 801609c:	3340      	adds	r3, #64	; 0x40
 801609e:	009b      	lsls	r3, r3, #2
 80160a0:	4413      	add	r3, r2
 80160a2:	685b      	ldr	r3, [r3, #4]
 80160a4:	0c1b      	lsrs	r3, r3, #16
 80160a6:	68ba      	ldr	r2, [r7, #8]
 80160a8:	4413      	add	r3, r2
 80160aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80160ac:	7bfb      	ldrb	r3, [r7, #15]
 80160ae:	3301      	adds	r3, #1
 80160b0:	73fb      	strb	r3, [r7, #15]
 80160b2:	7bfa      	ldrb	r2, [r7, #15]
 80160b4:	78fb      	ldrb	r3, [r7, #3]
 80160b6:	3b01      	subs	r3, #1
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d3ec      	bcc.n	8016096 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80160bc:	883b      	ldrh	r3, [r7, #0]
 80160be:	0418      	lsls	r0, r3, #16
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	6819      	ldr	r1, [r3, #0]
 80160c4:	78fb      	ldrb	r3, [r7, #3]
 80160c6:	3b01      	subs	r3, #1
 80160c8:	68ba      	ldr	r2, [r7, #8]
 80160ca:	4302      	orrs	r2, r0
 80160cc:	3340      	adds	r3, #64	; 0x40
 80160ce:	009b      	lsls	r3, r3, #2
 80160d0:	440b      	add	r3, r1
 80160d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80160d4:	2300      	movs	r3, #0
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3714      	adds	r7, #20
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr

080160e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80160e2:	b480      	push	{r7}
 80160e4:	b083      	sub	sp, #12
 80160e6:	af00      	add	r7, sp, #0
 80160e8:	6078      	str	r0, [r7, #4]
 80160ea:	460b      	mov	r3, r1
 80160ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	887a      	ldrh	r2, [r7, #2]
 80160f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80160f6:	2300      	movs	r3, #0
}
 80160f8:	4618      	mov	r0, r3
 80160fa:	370c      	adds	r7, #12
 80160fc:	46bd      	mov	sp, r7
 80160fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016102:	4770      	bx	lr

08016104 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8016104:	b480      	push	{r7}
 8016106:	b085      	sub	sp, #20
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2201      	movs	r2, #1
 8016116:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	2200      	movs	r2, #0
 801611e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	699b      	ldr	r3, [r3, #24]
 8016126:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016136:	f043 0303 	orr.w	r3, r3, #3
 801613a:	68fa      	ldr	r2, [r7, #12]
 801613c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801613e:	2300      	movs	r3, #0
}
 8016140:	4618      	mov	r0, r3
 8016142:	3714      	adds	r7, #20
 8016144:	46bd      	mov	sp, r7
 8016146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614a:	4770      	bx	lr

0801614c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b082      	sub	sp, #8
 8016150:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8016152:	2300      	movs	r3, #0
 8016154:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8016156:	2300      	movs	r3, #0
 8016158:	603b      	str	r3, [r7, #0]
 801615a:	4b20      	ldr	r3, [pc, #128]	; (80161dc <HAL_PWREx_EnableOverDrive+0x90>)
 801615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801615e:	4a1f      	ldr	r2, [pc, #124]	; (80161dc <HAL_PWREx_EnableOverDrive+0x90>)
 8016160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016164:	6413      	str	r3, [r2, #64]	; 0x40
 8016166:	4b1d      	ldr	r3, [pc, #116]	; (80161dc <HAL_PWREx_EnableOverDrive+0x90>)
 8016168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801616a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801616e:	603b      	str	r3, [r7, #0]
 8016170:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8016172:	4b1b      	ldr	r3, [pc, #108]	; (80161e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8016174:	2201      	movs	r2, #1
 8016176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016178:	f7fc f938 	bl	80123ec <HAL_GetTick>
 801617c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801617e:	e009      	b.n	8016194 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8016180:	f7fc f934 	bl	80123ec <HAL_GetTick>
 8016184:	4602      	mov	r2, r0
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	1ad3      	subs	r3, r2, r3
 801618a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801618e:	d901      	bls.n	8016194 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8016190:	2303      	movs	r3, #3
 8016192:	e01f      	b.n	80161d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8016194:	4b13      	ldr	r3, [pc, #76]	; (80161e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801619c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80161a0:	d1ee      	bne.n	8016180 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80161a2:	4b11      	ldr	r3, [pc, #68]	; (80161e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80161a4:	2201      	movs	r2, #1
 80161a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80161a8:	f7fc f920 	bl	80123ec <HAL_GetTick>
 80161ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80161ae:	e009      	b.n	80161c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80161b0:	f7fc f91c 	bl	80123ec <HAL_GetTick>
 80161b4:	4602      	mov	r2, r0
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	1ad3      	subs	r3, r2, r3
 80161ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80161be:	d901      	bls.n	80161c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80161c0:	2303      	movs	r3, #3
 80161c2:	e007      	b.n	80161d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80161c4:	4b07      	ldr	r3, [pc, #28]	; (80161e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80161c6:	685b      	ldr	r3, [r3, #4]
 80161c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80161cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80161d0:	d1ee      	bne.n	80161b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80161d2:	2300      	movs	r3, #0
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3708      	adds	r7, #8
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}
 80161dc:	40023800 	.word	0x40023800
 80161e0:	420e0040 	.word	0x420e0040
 80161e4:	40007000 	.word	0x40007000
 80161e8:	420e0044 	.word	0x420e0044

080161ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b084      	sub	sp, #16
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
 80161f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d101      	bne.n	8016200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80161fc:	2301      	movs	r3, #1
 80161fe:	e0cc      	b.n	801639a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8016200:	4b68      	ldr	r3, [pc, #416]	; (80163a4 <HAL_RCC_ClockConfig+0x1b8>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	f003 030f 	and.w	r3, r3, #15
 8016208:	683a      	ldr	r2, [r7, #0]
 801620a:	429a      	cmp	r2, r3
 801620c:	d90c      	bls.n	8016228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801620e:	4b65      	ldr	r3, [pc, #404]	; (80163a4 <HAL_RCC_ClockConfig+0x1b8>)
 8016210:	683a      	ldr	r2, [r7, #0]
 8016212:	b2d2      	uxtb	r2, r2
 8016214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016216:	4b63      	ldr	r3, [pc, #396]	; (80163a4 <HAL_RCC_ClockConfig+0x1b8>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	f003 030f 	and.w	r3, r3, #15
 801621e:	683a      	ldr	r2, [r7, #0]
 8016220:	429a      	cmp	r2, r3
 8016222:	d001      	beq.n	8016228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8016224:	2301      	movs	r3, #1
 8016226:	e0b8      	b.n	801639a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	f003 0302 	and.w	r3, r3, #2
 8016230:	2b00      	cmp	r3, #0
 8016232:	d020      	beq.n	8016276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	f003 0304 	and.w	r3, r3, #4
 801623c:	2b00      	cmp	r3, #0
 801623e:	d005      	beq.n	801624c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8016240:	4b59      	ldr	r3, [pc, #356]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016242:	689b      	ldr	r3, [r3, #8]
 8016244:	4a58      	ldr	r2, [pc, #352]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801624a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	f003 0308 	and.w	r3, r3, #8
 8016254:	2b00      	cmp	r3, #0
 8016256:	d005      	beq.n	8016264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8016258:	4b53      	ldr	r3, [pc, #332]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 801625a:	689b      	ldr	r3, [r3, #8]
 801625c:	4a52      	ldr	r2, [pc, #328]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 801625e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8016262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016264:	4b50      	ldr	r3, [pc, #320]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016266:	689b      	ldr	r3, [r3, #8]
 8016268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	689b      	ldr	r3, [r3, #8]
 8016270:	494d      	ldr	r1, [pc, #308]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016272:	4313      	orrs	r3, r2
 8016274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	f003 0301 	and.w	r3, r3, #1
 801627e:	2b00      	cmp	r3, #0
 8016280:	d044      	beq.n	801630c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	685b      	ldr	r3, [r3, #4]
 8016286:	2b01      	cmp	r3, #1
 8016288:	d107      	bne.n	801629a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801628a:	4b47      	ldr	r3, [pc, #284]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016292:	2b00      	cmp	r3, #0
 8016294:	d119      	bne.n	80162ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016296:	2301      	movs	r3, #1
 8016298:	e07f      	b.n	801639a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	685b      	ldr	r3, [r3, #4]
 801629e:	2b02      	cmp	r3, #2
 80162a0:	d003      	beq.n	80162aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80162a6:	2b03      	cmp	r3, #3
 80162a8:	d107      	bne.n	80162ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80162aa:	4b3f      	ldr	r3, [pc, #252]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d109      	bne.n	80162ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80162b6:	2301      	movs	r3, #1
 80162b8:	e06f      	b.n	801639a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80162ba:	4b3b      	ldr	r3, [pc, #236]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	f003 0302 	and.w	r3, r3, #2
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d101      	bne.n	80162ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80162c6:	2301      	movs	r3, #1
 80162c8:	e067      	b.n	801639a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80162ca:	4b37      	ldr	r3, [pc, #220]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 80162cc:	689b      	ldr	r3, [r3, #8]
 80162ce:	f023 0203 	bic.w	r2, r3, #3
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	685b      	ldr	r3, [r3, #4]
 80162d6:	4934      	ldr	r1, [pc, #208]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 80162d8:	4313      	orrs	r3, r2
 80162da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80162dc:	f7fc f886 	bl	80123ec <HAL_GetTick>
 80162e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80162e2:	e00a      	b.n	80162fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80162e4:	f7fc f882 	bl	80123ec <HAL_GetTick>
 80162e8:	4602      	mov	r2, r0
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	1ad3      	subs	r3, r2, r3
 80162ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80162f2:	4293      	cmp	r3, r2
 80162f4:	d901      	bls.n	80162fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80162f6:	2303      	movs	r3, #3
 80162f8:	e04f      	b.n	801639a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80162fa:	4b2b      	ldr	r3, [pc, #172]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 80162fc:	689b      	ldr	r3, [r3, #8]
 80162fe:	f003 020c 	and.w	r2, r3, #12
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	009b      	lsls	r3, r3, #2
 8016308:	429a      	cmp	r2, r3
 801630a:	d1eb      	bne.n	80162e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801630c:	4b25      	ldr	r3, [pc, #148]	; (80163a4 <HAL_RCC_ClockConfig+0x1b8>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	f003 030f 	and.w	r3, r3, #15
 8016314:	683a      	ldr	r2, [r7, #0]
 8016316:	429a      	cmp	r2, r3
 8016318:	d20c      	bcs.n	8016334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801631a:	4b22      	ldr	r3, [pc, #136]	; (80163a4 <HAL_RCC_ClockConfig+0x1b8>)
 801631c:	683a      	ldr	r2, [r7, #0]
 801631e:	b2d2      	uxtb	r2, r2
 8016320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016322:	4b20      	ldr	r3, [pc, #128]	; (80163a4 <HAL_RCC_ClockConfig+0x1b8>)
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	f003 030f 	and.w	r3, r3, #15
 801632a:	683a      	ldr	r2, [r7, #0]
 801632c:	429a      	cmp	r2, r3
 801632e:	d001      	beq.n	8016334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8016330:	2301      	movs	r3, #1
 8016332:	e032      	b.n	801639a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	f003 0304 	and.w	r3, r3, #4
 801633c:	2b00      	cmp	r3, #0
 801633e:	d008      	beq.n	8016352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016340:	4b19      	ldr	r3, [pc, #100]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016342:	689b      	ldr	r3, [r3, #8]
 8016344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	68db      	ldr	r3, [r3, #12]
 801634c:	4916      	ldr	r1, [pc, #88]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 801634e:	4313      	orrs	r3, r2
 8016350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	f003 0308 	and.w	r3, r3, #8
 801635a:	2b00      	cmp	r3, #0
 801635c:	d009      	beq.n	8016372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801635e:	4b12      	ldr	r3, [pc, #72]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016360:	689b      	ldr	r3, [r3, #8]
 8016362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	691b      	ldr	r3, [r3, #16]
 801636a:	00db      	lsls	r3, r3, #3
 801636c:	490e      	ldr	r1, [pc, #56]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 801636e:	4313      	orrs	r3, r2
 8016370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8016372:	f000 fbb1 	bl	8016ad8 <HAL_RCC_GetSysClockFreq>
 8016376:	4602      	mov	r2, r0
 8016378:	4b0b      	ldr	r3, [pc, #44]	; (80163a8 <HAL_RCC_ClockConfig+0x1bc>)
 801637a:	689b      	ldr	r3, [r3, #8]
 801637c:	091b      	lsrs	r3, r3, #4
 801637e:	f003 030f 	and.w	r3, r3, #15
 8016382:	490a      	ldr	r1, [pc, #40]	; (80163ac <HAL_RCC_ClockConfig+0x1c0>)
 8016384:	5ccb      	ldrb	r3, [r1, r3]
 8016386:	fa22 f303 	lsr.w	r3, r2, r3
 801638a:	4a09      	ldr	r2, [pc, #36]	; (80163b0 <HAL_RCC_ClockConfig+0x1c4>)
 801638c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801638e:	4b09      	ldr	r3, [pc, #36]	; (80163b4 <HAL_RCC_ClockConfig+0x1c8>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	4618      	mov	r0, r3
 8016394:	f7fb fe32 	bl	8011ffc <HAL_InitTick>

  return HAL_OK;
 8016398:	2300      	movs	r3, #0
}
 801639a:	4618      	mov	r0, r3
 801639c:	3710      	adds	r7, #16
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}
 80163a2:	bf00      	nop
 80163a4:	40023c00 	.word	0x40023c00
 80163a8:	40023800 	.word	0x40023800
 80163ac:	08027090 	.word	0x08027090
 80163b0:	20000000 	.word	0x20000000
 80163b4:	20000004 	.word	0x20000004

080163b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80163b8:	b480      	push	{r7}
 80163ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80163bc:	4b03      	ldr	r3, [pc, #12]	; (80163cc <HAL_RCC_GetHCLKFreq+0x14>)
 80163be:	681b      	ldr	r3, [r3, #0]
}
 80163c0:	4618      	mov	r0, r3
 80163c2:	46bd      	mov	sp, r7
 80163c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c8:	4770      	bx	lr
 80163ca:	bf00      	nop
 80163cc:	20000000 	.word	0x20000000

080163d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80163d4:	f7ff fff0 	bl	80163b8 <HAL_RCC_GetHCLKFreq>
 80163d8:	4602      	mov	r2, r0
 80163da:	4b05      	ldr	r3, [pc, #20]	; (80163f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80163dc:	689b      	ldr	r3, [r3, #8]
 80163de:	0a9b      	lsrs	r3, r3, #10
 80163e0:	f003 0307 	and.w	r3, r3, #7
 80163e4:	4903      	ldr	r1, [pc, #12]	; (80163f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80163e6:	5ccb      	ldrb	r3, [r1, r3]
 80163e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	bd80      	pop	{r7, pc}
 80163f0:	40023800 	.word	0x40023800
 80163f4:	080270a0 	.word	0x080270a0

080163f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80163fc:	f7ff ffdc 	bl	80163b8 <HAL_RCC_GetHCLKFreq>
 8016400:	4602      	mov	r2, r0
 8016402:	4b05      	ldr	r3, [pc, #20]	; (8016418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8016404:	689b      	ldr	r3, [r3, #8]
 8016406:	0b5b      	lsrs	r3, r3, #13
 8016408:	f003 0307 	and.w	r3, r3, #7
 801640c:	4903      	ldr	r1, [pc, #12]	; (801641c <HAL_RCC_GetPCLK2Freq+0x24>)
 801640e:	5ccb      	ldrb	r3, [r1, r3]
 8016410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016414:	4618      	mov	r0, r3
 8016416:	bd80      	pop	{r7, pc}
 8016418:	40023800 	.word	0x40023800
 801641c:	080270a0 	.word	0x080270a0

08016420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016420:	b480      	push	{r7}
 8016422:	b083      	sub	sp, #12
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
 8016428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	220f      	movs	r2, #15
 801642e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016430:	4b12      	ldr	r3, [pc, #72]	; (801647c <HAL_RCC_GetClockConfig+0x5c>)
 8016432:	689b      	ldr	r3, [r3, #8]
 8016434:	f003 0203 	and.w	r2, r3, #3
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801643c:	4b0f      	ldr	r3, [pc, #60]	; (801647c <HAL_RCC_GetClockConfig+0x5c>)
 801643e:	689b      	ldr	r3, [r3, #8]
 8016440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016448:	4b0c      	ldr	r3, [pc, #48]	; (801647c <HAL_RCC_GetClockConfig+0x5c>)
 801644a:	689b      	ldr	r3, [r3, #8]
 801644c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016454:	4b09      	ldr	r3, [pc, #36]	; (801647c <HAL_RCC_GetClockConfig+0x5c>)
 8016456:	689b      	ldr	r3, [r3, #8]
 8016458:	08db      	lsrs	r3, r3, #3
 801645a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8016462:	4b07      	ldr	r3, [pc, #28]	; (8016480 <HAL_RCC_GetClockConfig+0x60>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	f003 020f 	and.w	r2, r3, #15
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	601a      	str	r2, [r3, #0]
}
 801646e:	bf00      	nop
 8016470:	370c      	adds	r7, #12
 8016472:	46bd      	mov	sp, r7
 8016474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016478:	4770      	bx	lr
 801647a:	bf00      	nop
 801647c:	40023800 	.word	0x40023800
 8016480:	40023c00 	.word	0x40023c00

08016484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b08c      	sub	sp, #48	; 0x30
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801648c:	2300      	movs	r3, #0
 801648e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8016490:	2300      	movs	r3, #0
 8016492:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8016494:	2300      	movs	r3, #0
 8016496:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8016498:	2300      	movs	r3, #0
 801649a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801649c:	2300      	movs	r3, #0
 801649e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80164a0:	2300      	movs	r3, #0
 80164a2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80164a4:	2300      	movs	r3, #0
 80164a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80164a8:	2300      	movs	r3, #0
 80164aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80164ac:	2300      	movs	r3, #0
 80164ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	f003 0301 	and.w	r3, r3, #1
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d010      	beq.n	80164de <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80164bc:	4b6f      	ldr	r3, [pc, #444]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80164be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80164c2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164ca:	496c      	ldr	r1, [pc, #432]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80164cc:	4313      	orrs	r3, r2
 80164ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d101      	bne.n	80164de <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80164da:	2301      	movs	r3, #1
 80164dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	f003 0302 	and.w	r3, r3, #2
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d010      	beq.n	801650c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80164ea:	4b64      	ldr	r3, [pc, #400]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80164ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80164f0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80164f8:	4960      	ldr	r1, [pc, #384]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80164fa:	4313      	orrs	r3, r2
 80164fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016504:	2b00      	cmp	r3, #0
 8016506:	d101      	bne.n	801650c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8016508:	2301      	movs	r3, #1
 801650a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	f003 0304 	and.w	r3, r3, #4
 8016514:	2b00      	cmp	r3, #0
 8016516:	d017      	beq.n	8016548 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8016518:	4b58      	ldr	r3, [pc, #352]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801651a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801651e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016526:	4955      	ldr	r1, [pc, #340]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8016528:	4313      	orrs	r3, r2
 801652a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016536:	d101      	bne.n	801653c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8016538:	2301      	movs	r3, #1
 801653a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016540:	2b00      	cmp	r3, #0
 8016542:	d101      	bne.n	8016548 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8016544:	2301      	movs	r3, #1
 8016546:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	f003 0308 	and.w	r3, r3, #8
 8016550:	2b00      	cmp	r3, #0
 8016552:	d017      	beq.n	8016584 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8016554:	4b49      	ldr	r3, [pc, #292]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8016556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801655a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016562:	4946      	ldr	r1, [pc, #280]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8016564:	4313      	orrs	r3, r2
 8016566:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801656e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8016572:	d101      	bne.n	8016578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8016574:	2301      	movs	r3, #1
 8016576:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801657c:	2b00      	cmp	r3, #0
 801657e:	d101      	bne.n	8016584 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8016580:	2301      	movs	r3, #1
 8016582:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	f003 0320 	and.w	r3, r3, #32
 801658c:	2b00      	cmp	r3, #0
 801658e:	f000 808a 	beq.w	80166a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8016592:	2300      	movs	r3, #0
 8016594:	60bb      	str	r3, [r7, #8]
 8016596:	4b39      	ldr	r3, [pc, #228]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8016598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801659a:	4a38      	ldr	r2, [pc, #224]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801659c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80165a0:	6413      	str	r3, [r2, #64]	; 0x40
 80165a2:	4b36      	ldr	r3, [pc, #216]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80165a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80165aa:	60bb      	str	r3, [r7, #8]
 80165ac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80165ae:	4b34      	ldr	r3, [pc, #208]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	4a33      	ldr	r2, [pc, #204]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80165b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80165b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80165ba:	f7fb ff17 	bl	80123ec <HAL_GetTick>
 80165be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80165c0:	e008      	b.n	80165d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80165c2:	f7fb ff13 	bl	80123ec <HAL_GetTick>
 80165c6:	4602      	mov	r2, r0
 80165c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ca:	1ad3      	subs	r3, r2, r3
 80165cc:	2b02      	cmp	r3, #2
 80165ce:	d901      	bls.n	80165d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80165d0:	2303      	movs	r3, #3
 80165d2:	e278      	b.n	8016ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80165d4:	4b2a      	ldr	r3, [pc, #168]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d0f0      	beq.n	80165c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80165e0:	4b26      	ldr	r3, [pc, #152]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80165e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80165e8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80165ea:	6a3b      	ldr	r3, [r7, #32]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d02f      	beq.n	8016650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80165f8:	6a3a      	ldr	r2, [r7, #32]
 80165fa:	429a      	cmp	r2, r3
 80165fc:	d028      	beq.n	8016650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80165fe:	4b1f      	ldr	r3, [pc, #124]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8016600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016606:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8016608:	4b1e      	ldr	r3, [pc, #120]	; (8016684 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801660a:	2201      	movs	r2, #1
 801660c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801660e:	4b1d      	ldr	r3, [pc, #116]	; (8016684 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8016610:	2200      	movs	r2, #0
 8016612:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8016614:	4a19      	ldr	r2, [pc, #100]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8016616:	6a3b      	ldr	r3, [r7, #32]
 8016618:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801661a:	4b18      	ldr	r3, [pc, #96]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801661c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801661e:	f003 0301 	and.w	r3, r3, #1
 8016622:	2b01      	cmp	r3, #1
 8016624:	d114      	bne.n	8016650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8016626:	f7fb fee1 	bl	80123ec <HAL_GetTick>
 801662a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801662c:	e00a      	b.n	8016644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801662e:	f7fb fedd 	bl	80123ec <HAL_GetTick>
 8016632:	4602      	mov	r2, r0
 8016634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016636:	1ad3      	subs	r3, r2, r3
 8016638:	f241 3288 	movw	r2, #5000	; 0x1388
 801663c:	4293      	cmp	r3, r2
 801663e:	d901      	bls.n	8016644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8016640:	2303      	movs	r3, #3
 8016642:	e240      	b.n	8016ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016644:	4b0d      	ldr	r3, [pc, #52]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8016646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016648:	f003 0302 	and.w	r3, r3, #2
 801664c:	2b00      	cmp	r3, #0
 801664e:	d0ee      	beq.n	801662e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801665c:	d114      	bne.n	8016688 <HAL_RCCEx_PeriphCLKConfig+0x204>
 801665e:	4b07      	ldr	r3, [pc, #28]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8016660:	689b      	ldr	r3, [r3, #8]
 8016662:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801666a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801666e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016672:	4902      	ldr	r1, [pc, #8]	; (801667c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8016674:	4313      	orrs	r3, r2
 8016676:	608b      	str	r3, [r1, #8]
 8016678:	e00c      	b.n	8016694 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801667a:	bf00      	nop
 801667c:	40023800 	.word	0x40023800
 8016680:	40007000 	.word	0x40007000
 8016684:	42470e40 	.word	0x42470e40
 8016688:	4b4a      	ldr	r3, [pc, #296]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801668a:	689b      	ldr	r3, [r3, #8]
 801668c:	4a49      	ldr	r2, [pc, #292]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801668e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8016692:	6093      	str	r3, [r2, #8]
 8016694:	4b47      	ldr	r3, [pc, #284]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8016696:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801669c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80166a0:	4944      	ldr	r1, [pc, #272]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80166a2:	4313      	orrs	r3, r2
 80166a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	f003 0310 	and.w	r3, r3, #16
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d004      	beq.n	80166bc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80166b8:	4b3f      	ldr	r3, [pc, #252]	; (80167b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80166ba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d00a      	beq.n	80166de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80166c8:	4b3a      	ldr	r3, [pc, #232]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80166ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80166ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80166d6:	4937      	ldr	r1, [pc, #220]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80166d8:	4313      	orrs	r3, r2
 80166da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d00a      	beq.n	8016700 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80166ea:	4b32      	ldr	r3, [pc, #200]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80166ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80166f0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80166f8:	492e      	ldr	r1, [pc, #184]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80166fa:	4313      	orrs	r3, r2
 80166fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016708:	2b00      	cmp	r3, #0
 801670a:	d011      	beq.n	8016730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801670c:	4b29      	ldr	r3, [pc, #164]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801670e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016712:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801671a:	4926      	ldr	r1, [pc, #152]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801671c:	4313      	orrs	r3, r2
 801671e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801672a:	d101      	bne.n	8016730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801672c:	2301      	movs	r3, #1
 801672e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016738:	2b00      	cmp	r3, #0
 801673a:	d00a      	beq.n	8016752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801673c:	4b1d      	ldr	r3, [pc, #116]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801673e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016742:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801674a:	491a      	ldr	r1, [pc, #104]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801674c:	4313      	orrs	r3, r2
 801674e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801675a:	2b00      	cmp	r3, #0
 801675c:	d011      	beq.n	8016782 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801675e:	4b15      	ldr	r3, [pc, #84]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8016760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016764:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801676c:	4911      	ldr	r1, [pc, #68]	; (80167b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801676e:	4313      	orrs	r3, r2
 8016770:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801677c:	d101      	bne.n	8016782 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801677e:	2301      	movs	r3, #1
 8016780:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8016782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016784:	2b01      	cmp	r3, #1
 8016786:	d005      	beq.n	8016794 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016790:	f040 80ff 	bne.w	8016992 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8016794:	4b09      	ldr	r3, [pc, #36]	; (80167bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016796:	2200      	movs	r2, #0
 8016798:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801679a:	f7fb fe27 	bl	80123ec <HAL_GetTick>
 801679e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80167a0:	e00e      	b.n	80167c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80167a2:	f7fb fe23 	bl	80123ec <HAL_GetTick>
 80167a6:	4602      	mov	r2, r0
 80167a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167aa:	1ad3      	subs	r3, r2, r3
 80167ac:	2b02      	cmp	r3, #2
 80167ae:	d907      	bls.n	80167c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80167b0:	2303      	movs	r3, #3
 80167b2:	e188      	b.n	8016ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80167b4:	40023800 	.word	0x40023800
 80167b8:	424711e0 	.word	0x424711e0
 80167bc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80167c0:	4b7e      	ldr	r3, [pc, #504]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d1ea      	bne.n	80167a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	f003 0301 	and.w	r3, r3, #1
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d003      	beq.n	80167e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d009      	beq.n	80167f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d028      	beq.n	801683e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d124      	bne.n	801683e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80167f4:	4b71      	ldr	r3, [pc, #452]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80167f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80167fa:	0c1b      	lsrs	r3, r3, #16
 80167fc:	f003 0303 	and.w	r3, r3, #3
 8016800:	3301      	adds	r3, #1
 8016802:	005b      	lsls	r3, r3, #1
 8016804:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8016806:	4b6d      	ldr	r3, [pc, #436]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8016808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801680c:	0e1b      	lsrs	r3, r3, #24
 801680e:	f003 030f 	and.w	r3, r3, #15
 8016812:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	685a      	ldr	r2, [r3, #4]
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	689b      	ldr	r3, [r3, #8]
 801681c:	019b      	lsls	r3, r3, #6
 801681e:	431a      	orrs	r2, r3
 8016820:	69fb      	ldr	r3, [r7, #28]
 8016822:	085b      	lsrs	r3, r3, #1
 8016824:	3b01      	subs	r3, #1
 8016826:	041b      	lsls	r3, r3, #16
 8016828:	431a      	orrs	r2, r3
 801682a:	69bb      	ldr	r3, [r7, #24]
 801682c:	061b      	lsls	r3, r3, #24
 801682e:	431a      	orrs	r2, r3
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	695b      	ldr	r3, [r3, #20]
 8016834:	071b      	lsls	r3, r3, #28
 8016836:	4961      	ldr	r1, [pc, #388]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8016838:	4313      	orrs	r3, r2
 801683a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	f003 0304 	and.w	r3, r3, #4
 8016846:	2b00      	cmp	r3, #0
 8016848:	d004      	beq.n	8016854 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801684e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016852:	d00a      	beq.n	801686a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801685c:	2b00      	cmp	r3, #0
 801685e:	d035      	beq.n	80168cc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8016868:	d130      	bne.n	80168cc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801686a:	4b54      	ldr	r3, [pc, #336]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801686c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016870:	0c1b      	lsrs	r3, r3, #16
 8016872:	f003 0303 	and.w	r3, r3, #3
 8016876:	3301      	adds	r3, #1
 8016878:	005b      	lsls	r3, r3, #1
 801687a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801687c:	4b4f      	ldr	r3, [pc, #316]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801687e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016882:	0f1b      	lsrs	r3, r3, #28
 8016884:	f003 0307 	and.w	r3, r3, #7
 8016888:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	685a      	ldr	r2, [r3, #4]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	689b      	ldr	r3, [r3, #8]
 8016892:	019b      	lsls	r3, r3, #6
 8016894:	431a      	orrs	r2, r3
 8016896:	69fb      	ldr	r3, [r7, #28]
 8016898:	085b      	lsrs	r3, r3, #1
 801689a:	3b01      	subs	r3, #1
 801689c:	041b      	lsls	r3, r3, #16
 801689e:	431a      	orrs	r2, r3
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	691b      	ldr	r3, [r3, #16]
 80168a4:	061b      	lsls	r3, r3, #24
 80168a6:	431a      	orrs	r2, r3
 80168a8:	697b      	ldr	r3, [r7, #20]
 80168aa:	071b      	lsls	r3, r3, #28
 80168ac:	4943      	ldr	r1, [pc, #268]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80168ae:	4313      	orrs	r3, r2
 80168b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80168b4:	4b41      	ldr	r3, [pc, #260]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80168b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80168ba:	f023 021f 	bic.w	r2, r3, #31
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168c2:	3b01      	subs	r3, #1
 80168c4:	493d      	ldr	r1, [pc, #244]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80168c6:	4313      	orrs	r3, r2
 80168c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d029      	beq.n	801692c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80168dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80168e0:	d124      	bne.n	801692c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80168e2:	4b36      	ldr	r3, [pc, #216]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80168e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80168e8:	0c1b      	lsrs	r3, r3, #16
 80168ea:	f003 0303 	and.w	r3, r3, #3
 80168ee:	3301      	adds	r3, #1
 80168f0:	005b      	lsls	r3, r3, #1
 80168f2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80168f4:	4b31      	ldr	r3, [pc, #196]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80168f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80168fa:	0f1b      	lsrs	r3, r3, #28
 80168fc:	f003 0307 	and.w	r3, r3, #7
 8016900:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	685a      	ldr	r2, [r3, #4]
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	689b      	ldr	r3, [r3, #8]
 801690a:	019b      	lsls	r3, r3, #6
 801690c:	431a      	orrs	r2, r3
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	68db      	ldr	r3, [r3, #12]
 8016912:	085b      	lsrs	r3, r3, #1
 8016914:	3b01      	subs	r3, #1
 8016916:	041b      	lsls	r3, r3, #16
 8016918:	431a      	orrs	r2, r3
 801691a:	69bb      	ldr	r3, [r7, #24]
 801691c:	061b      	lsls	r3, r3, #24
 801691e:	431a      	orrs	r2, r3
 8016920:	697b      	ldr	r3, [r7, #20]
 8016922:	071b      	lsls	r3, r3, #28
 8016924:	4925      	ldr	r1, [pc, #148]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8016926:	4313      	orrs	r3, r2
 8016928:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016934:	2b00      	cmp	r3, #0
 8016936:	d016      	beq.n	8016966 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	685a      	ldr	r2, [r3, #4]
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	689b      	ldr	r3, [r3, #8]
 8016940:	019b      	lsls	r3, r3, #6
 8016942:	431a      	orrs	r2, r3
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	68db      	ldr	r3, [r3, #12]
 8016948:	085b      	lsrs	r3, r3, #1
 801694a:	3b01      	subs	r3, #1
 801694c:	041b      	lsls	r3, r3, #16
 801694e:	431a      	orrs	r2, r3
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	691b      	ldr	r3, [r3, #16]
 8016954:	061b      	lsls	r3, r3, #24
 8016956:	431a      	orrs	r2, r3
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	695b      	ldr	r3, [r3, #20]
 801695c:	071b      	lsls	r3, r3, #28
 801695e:	4917      	ldr	r1, [pc, #92]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8016960:	4313      	orrs	r3, r2
 8016962:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8016966:	4b16      	ldr	r3, [pc, #88]	; (80169c0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8016968:	2201      	movs	r2, #1
 801696a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801696c:	f7fb fd3e 	bl	80123ec <HAL_GetTick>
 8016970:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8016972:	e008      	b.n	8016986 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8016974:	f7fb fd3a 	bl	80123ec <HAL_GetTick>
 8016978:	4602      	mov	r2, r0
 801697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801697c:	1ad3      	subs	r3, r2, r3
 801697e:	2b02      	cmp	r3, #2
 8016980:	d901      	bls.n	8016986 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8016982:	2303      	movs	r3, #3
 8016984:	e09f      	b.n	8016ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8016986:	4b0d      	ldr	r3, [pc, #52]	; (80169bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801698e:	2b00      	cmp	r3, #0
 8016990:	d0f0      	beq.n	8016974 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8016992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016994:	2b01      	cmp	r3, #1
 8016996:	f040 8095 	bne.w	8016ac4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801699a:	4b0a      	ldr	r3, [pc, #40]	; (80169c4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801699c:	2200      	movs	r2, #0
 801699e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80169a0:	f7fb fd24 	bl	80123ec <HAL_GetTick>
 80169a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80169a6:	e00f      	b.n	80169c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80169a8:	f7fb fd20 	bl	80123ec <HAL_GetTick>
 80169ac:	4602      	mov	r2, r0
 80169ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b0:	1ad3      	subs	r3, r2, r3
 80169b2:	2b02      	cmp	r3, #2
 80169b4:	d908      	bls.n	80169c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80169b6:	2303      	movs	r3, #3
 80169b8:	e085      	b.n	8016ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80169ba:	bf00      	nop
 80169bc:	40023800 	.word	0x40023800
 80169c0:	42470068 	.word	0x42470068
 80169c4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80169c8:	4b41      	ldr	r3, [pc, #260]	; (8016ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80169d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80169d4:	d0e8      	beq.n	80169a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	f003 0304 	and.w	r3, r3, #4
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d003      	beq.n	80169ea <HAL_RCCEx_PeriphCLKConfig+0x566>
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d009      	beq.n	80169fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d02b      	beq.n	8016a4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d127      	bne.n	8016a4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80169fe:	4b34      	ldr	r3, [pc, #208]	; (8016ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8016a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a04:	0c1b      	lsrs	r3, r3, #16
 8016a06:	f003 0303 	and.w	r3, r3, #3
 8016a0a:	3301      	adds	r3, #1
 8016a0c:	005b      	lsls	r3, r3, #1
 8016a0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	699a      	ldr	r2, [r3, #24]
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	69db      	ldr	r3, [r3, #28]
 8016a18:	019b      	lsls	r3, r3, #6
 8016a1a:	431a      	orrs	r2, r3
 8016a1c:	693b      	ldr	r3, [r7, #16]
 8016a1e:	085b      	lsrs	r3, r3, #1
 8016a20:	3b01      	subs	r3, #1
 8016a22:	041b      	lsls	r3, r3, #16
 8016a24:	431a      	orrs	r2, r3
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a2a:	061b      	lsls	r3, r3, #24
 8016a2c:	4928      	ldr	r1, [pc, #160]	; (8016ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8016a2e:	4313      	orrs	r3, r2
 8016a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8016a34:	4b26      	ldr	r3, [pc, #152]	; (8016ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8016a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016a3a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a42:	3b01      	subs	r3, #1
 8016a44:	021b      	lsls	r3, r3, #8
 8016a46:	4922      	ldr	r1, [pc, #136]	; (8016ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8016a48:	4313      	orrs	r3, r2
 8016a4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d01d      	beq.n	8016a96 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8016a62:	d118      	bne.n	8016a96 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8016a64:	4b1a      	ldr	r3, [pc, #104]	; (8016ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8016a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a6a:	0e1b      	lsrs	r3, r3, #24
 8016a6c:	f003 030f 	and.w	r3, r3, #15
 8016a70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	699a      	ldr	r2, [r3, #24]
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	69db      	ldr	r3, [r3, #28]
 8016a7a:	019b      	lsls	r3, r3, #6
 8016a7c:	431a      	orrs	r2, r3
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	6a1b      	ldr	r3, [r3, #32]
 8016a82:	085b      	lsrs	r3, r3, #1
 8016a84:	3b01      	subs	r3, #1
 8016a86:	041b      	lsls	r3, r3, #16
 8016a88:	431a      	orrs	r2, r3
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	061b      	lsls	r3, r3, #24
 8016a8e:	4910      	ldr	r1, [pc, #64]	; (8016ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8016a90:	4313      	orrs	r3, r2
 8016a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8016a96:	4b0f      	ldr	r3, [pc, #60]	; (8016ad4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8016a98:	2201      	movs	r2, #1
 8016a9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8016a9c:	f7fb fca6 	bl	80123ec <HAL_GetTick>
 8016aa0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8016aa2:	e008      	b.n	8016ab6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8016aa4:	f7fb fca2 	bl	80123ec <HAL_GetTick>
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aac:	1ad3      	subs	r3, r2, r3
 8016aae:	2b02      	cmp	r3, #2
 8016ab0:	d901      	bls.n	8016ab6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8016ab2:	2303      	movs	r3, #3
 8016ab4:	e007      	b.n	8016ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8016ab6:	4b06      	ldr	r3, [pc, #24]	; (8016ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016ac2:	d1ef      	bne.n	8016aa4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8016ac4:	2300      	movs	r3, #0
}
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	3730      	adds	r7, #48	; 0x30
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd80      	pop	{r7, pc}
 8016ace:	bf00      	nop
 8016ad0:	40023800 	.word	0x40023800
 8016ad4:	42470070 	.word	0x42470070

08016ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016adc:	b088      	sub	sp, #32
 8016ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8016aec:	2300      	movs	r3, #0
 8016aee:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8016af0:	2300      	movs	r3, #0
 8016af2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016af4:	4bce      	ldr	r3, [pc, #824]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016af6:	689b      	ldr	r3, [r3, #8]
 8016af8:	f003 030c 	and.w	r3, r3, #12
 8016afc:	2b0c      	cmp	r3, #12
 8016afe:	f200 818d 	bhi.w	8016e1c <HAL_RCC_GetSysClockFreq+0x344>
 8016b02:	a201      	add	r2, pc, #4	; (adr r2, 8016b08 <HAL_RCC_GetSysClockFreq+0x30>)
 8016b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b08:	08016b3d 	.word	0x08016b3d
 8016b0c:	08016e1d 	.word	0x08016e1d
 8016b10:	08016e1d 	.word	0x08016e1d
 8016b14:	08016e1d 	.word	0x08016e1d
 8016b18:	08016b43 	.word	0x08016b43
 8016b1c:	08016e1d 	.word	0x08016e1d
 8016b20:	08016e1d 	.word	0x08016e1d
 8016b24:	08016e1d 	.word	0x08016e1d
 8016b28:	08016b49 	.word	0x08016b49
 8016b2c:	08016e1d 	.word	0x08016e1d
 8016b30:	08016e1d 	.word	0x08016e1d
 8016b34:	08016e1d 	.word	0x08016e1d
 8016b38:	08016cbd 	.word	0x08016cbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8016b3c:	4bbd      	ldr	r3, [pc, #756]	; (8016e34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8016b3e:	61bb      	str	r3, [r7, #24]
       break;
 8016b40:	e16f      	b.n	8016e22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8016b42:	4bbd      	ldr	r3, [pc, #756]	; (8016e38 <HAL_RCC_GetSysClockFreq+0x360>)
 8016b44:	61bb      	str	r3, [r7, #24]
      break;
 8016b46:	e16c      	b.n	8016e22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016b48:	4bb9      	ldr	r3, [pc, #740]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016b4a:	685b      	ldr	r3, [r3, #4]
 8016b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016b50:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8016b52:	4bb7      	ldr	r3, [pc, #732]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d053      	beq.n	8016c06 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016b5e:	4bb4      	ldr	r3, [pc, #720]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016b60:	685b      	ldr	r3, [r3, #4]
 8016b62:	099b      	lsrs	r3, r3, #6
 8016b64:	461a      	mov	r2, r3
 8016b66:	f04f 0300 	mov.w	r3, #0
 8016b6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016b6e:	f04f 0100 	mov.w	r1, #0
 8016b72:	ea02 0400 	and.w	r4, r2, r0
 8016b76:	603c      	str	r4, [r7, #0]
 8016b78:	400b      	ands	r3, r1
 8016b7a:	607b      	str	r3, [r7, #4]
 8016b7c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8016b80:	4620      	mov	r0, r4
 8016b82:	4629      	mov	r1, r5
 8016b84:	f04f 0200 	mov.w	r2, #0
 8016b88:	f04f 0300 	mov.w	r3, #0
 8016b8c:	014b      	lsls	r3, r1, #5
 8016b8e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8016b92:	0142      	lsls	r2, r0, #5
 8016b94:	4610      	mov	r0, r2
 8016b96:	4619      	mov	r1, r3
 8016b98:	4623      	mov	r3, r4
 8016b9a:	1ac0      	subs	r0, r0, r3
 8016b9c:	462b      	mov	r3, r5
 8016b9e:	eb61 0103 	sbc.w	r1, r1, r3
 8016ba2:	f04f 0200 	mov.w	r2, #0
 8016ba6:	f04f 0300 	mov.w	r3, #0
 8016baa:	018b      	lsls	r3, r1, #6
 8016bac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8016bb0:	0182      	lsls	r2, r0, #6
 8016bb2:	1a12      	subs	r2, r2, r0
 8016bb4:	eb63 0301 	sbc.w	r3, r3, r1
 8016bb8:	f04f 0000 	mov.w	r0, #0
 8016bbc:	f04f 0100 	mov.w	r1, #0
 8016bc0:	00d9      	lsls	r1, r3, #3
 8016bc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016bc6:	00d0      	lsls	r0, r2, #3
 8016bc8:	4602      	mov	r2, r0
 8016bca:	460b      	mov	r3, r1
 8016bcc:	4621      	mov	r1, r4
 8016bce:	1852      	adds	r2, r2, r1
 8016bd0:	4629      	mov	r1, r5
 8016bd2:	eb43 0101 	adc.w	r1, r3, r1
 8016bd6:	460b      	mov	r3, r1
 8016bd8:	f04f 0000 	mov.w	r0, #0
 8016bdc:	f04f 0100 	mov.w	r1, #0
 8016be0:	0259      	lsls	r1, r3, #9
 8016be2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8016be6:	0250      	lsls	r0, r2, #9
 8016be8:	4602      	mov	r2, r0
 8016bea:	460b      	mov	r3, r1
 8016bec:	4610      	mov	r0, r2
 8016bee:	4619      	mov	r1, r3
 8016bf0:	697b      	ldr	r3, [r7, #20]
 8016bf2:	461a      	mov	r2, r3
 8016bf4:	f04f 0300 	mov.w	r3, #0
 8016bf8:	f7f9 ff7e 	bl	8010af8 <__aeabi_uldivmod>
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	460b      	mov	r3, r1
 8016c00:	4613      	mov	r3, r2
 8016c02:	61fb      	str	r3, [r7, #28]
 8016c04:	e04c      	b.n	8016ca0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016c06:	4b8a      	ldr	r3, [pc, #552]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	099b      	lsrs	r3, r3, #6
 8016c0c:	461a      	mov	r2, r3
 8016c0e:	f04f 0300 	mov.w	r3, #0
 8016c12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016c16:	f04f 0100 	mov.w	r1, #0
 8016c1a:	ea02 0a00 	and.w	sl, r2, r0
 8016c1e:	ea03 0b01 	and.w	fp, r3, r1
 8016c22:	4650      	mov	r0, sl
 8016c24:	4659      	mov	r1, fp
 8016c26:	f04f 0200 	mov.w	r2, #0
 8016c2a:	f04f 0300 	mov.w	r3, #0
 8016c2e:	014b      	lsls	r3, r1, #5
 8016c30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8016c34:	0142      	lsls	r2, r0, #5
 8016c36:	4610      	mov	r0, r2
 8016c38:	4619      	mov	r1, r3
 8016c3a:	ebb0 000a 	subs.w	r0, r0, sl
 8016c3e:	eb61 010b 	sbc.w	r1, r1, fp
 8016c42:	f04f 0200 	mov.w	r2, #0
 8016c46:	f04f 0300 	mov.w	r3, #0
 8016c4a:	018b      	lsls	r3, r1, #6
 8016c4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8016c50:	0182      	lsls	r2, r0, #6
 8016c52:	1a12      	subs	r2, r2, r0
 8016c54:	eb63 0301 	sbc.w	r3, r3, r1
 8016c58:	f04f 0000 	mov.w	r0, #0
 8016c5c:	f04f 0100 	mov.w	r1, #0
 8016c60:	00d9      	lsls	r1, r3, #3
 8016c62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016c66:	00d0      	lsls	r0, r2, #3
 8016c68:	4602      	mov	r2, r0
 8016c6a:	460b      	mov	r3, r1
 8016c6c:	eb12 020a 	adds.w	r2, r2, sl
 8016c70:	eb43 030b 	adc.w	r3, r3, fp
 8016c74:	f04f 0000 	mov.w	r0, #0
 8016c78:	f04f 0100 	mov.w	r1, #0
 8016c7c:	0299      	lsls	r1, r3, #10
 8016c7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8016c82:	0290      	lsls	r0, r2, #10
 8016c84:	4602      	mov	r2, r0
 8016c86:	460b      	mov	r3, r1
 8016c88:	4610      	mov	r0, r2
 8016c8a:	4619      	mov	r1, r3
 8016c8c:	697b      	ldr	r3, [r7, #20]
 8016c8e:	461a      	mov	r2, r3
 8016c90:	f04f 0300 	mov.w	r3, #0
 8016c94:	f7f9 ff30 	bl	8010af8 <__aeabi_uldivmod>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	460b      	mov	r3, r1
 8016c9c:	4613      	mov	r3, r2
 8016c9e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8016ca0:	4b63      	ldr	r3, [pc, #396]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	0c1b      	lsrs	r3, r3, #16
 8016ca6:	f003 0303 	and.w	r3, r3, #3
 8016caa:	3301      	adds	r3, #1
 8016cac:	005b      	lsls	r3, r3, #1
 8016cae:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8016cb0:	69fa      	ldr	r2, [r7, #28]
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8016cb8:	61bb      	str	r3, [r7, #24]
      break;
 8016cba:	e0b2      	b.n	8016e22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016cbc:	4b5c      	ldr	r3, [pc, #368]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016cbe:	685b      	ldr	r3, [r3, #4]
 8016cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016cc4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8016cc6:	4b5a      	ldr	r3, [pc, #360]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d04d      	beq.n	8016d6e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016cd2:	4b57      	ldr	r3, [pc, #348]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016cd4:	685b      	ldr	r3, [r3, #4]
 8016cd6:	099b      	lsrs	r3, r3, #6
 8016cd8:	461a      	mov	r2, r3
 8016cda:	f04f 0300 	mov.w	r3, #0
 8016cde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016ce2:	f04f 0100 	mov.w	r1, #0
 8016ce6:	ea02 0800 	and.w	r8, r2, r0
 8016cea:	ea03 0901 	and.w	r9, r3, r1
 8016cee:	4640      	mov	r0, r8
 8016cf0:	4649      	mov	r1, r9
 8016cf2:	f04f 0200 	mov.w	r2, #0
 8016cf6:	f04f 0300 	mov.w	r3, #0
 8016cfa:	014b      	lsls	r3, r1, #5
 8016cfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8016d00:	0142      	lsls	r2, r0, #5
 8016d02:	4610      	mov	r0, r2
 8016d04:	4619      	mov	r1, r3
 8016d06:	ebb0 0008 	subs.w	r0, r0, r8
 8016d0a:	eb61 0109 	sbc.w	r1, r1, r9
 8016d0e:	f04f 0200 	mov.w	r2, #0
 8016d12:	f04f 0300 	mov.w	r3, #0
 8016d16:	018b      	lsls	r3, r1, #6
 8016d18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8016d1c:	0182      	lsls	r2, r0, #6
 8016d1e:	1a12      	subs	r2, r2, r0
 8016d20:	eb63 0301 	sbc.w	r3, r3, r1
 8016d24:	f04f 0000 	mov.w	r0, #0
 8016d28:	f04f 0100 	mov.w	r1, #0
 8016d2c:	00d9      	lsls	r1, r3, #3
 8016d2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016d32:	00d0      	lsls	r0, r2, #3
 8016d34:	4602      	mov	r2, r0
 8016d36:	460b      	mov	r3, r1
 8016d38:	eb12 0208 	adds.w	r2, r2, r8
 8016d3c:	eb43 0309 	adc.w	r3, r3, r9
 8016d40:	f04f 0000 	mov.w	r0, #0
 8016d44:	f04f 0100 	mov.w	r1, #0
 8016d48:	0259      	lsls	r1, r3, #9
 8016d4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8016d4e:	0250      	lsls	r0, r2, #9
 8016d50:	4602      	mov	r2, r0
 8016d52:	460b      	mov	r3, r1
 8016d54:	4610      	mov	r0, r2
 8016d56:	4619      	mov	r1, r3
 8016d58:	697b      	ldr	r3, [r7, #20]
 8016d5a:	461a      	mov	r2, r3
 8016d5c:	f04f 0300 	mov.w	r3, #0
 8016d60:	f7f9 feca 	bl	8010af8 <__aeabi_uldivmod>
 8016d64:	4602      	mov	r2, r0
 8016d66:	460b      	mov	r3, r1
 8016d68:	4613      	mov	r3, r2
 8016d6a:	61fb      	str	r3, [r7, #28]
 8016d6c:	e04a      	b.n	8016e04 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016d6e:	4b30      	ldr	r3, [pc, #192]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016d70:	685b      	ldr	r3, [r3, #4]
 8016d72:	099b      	lsrs	r3, r3, #6
 8016d74:	461a      	mov	r2, r3
 8016d76:	f04f 0300 	mov.w	r3, #0
 8016d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016d7e:	f04f 0100 	mov.w	r1, #0
 8016d82:	ea02 0400 	and.w	r4, r2, r0
 8016d86:	ea03 0501 	and.w	r5, r3, r1
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	4629      	mov	r1, r5
 8016d8e:	f04f 0200 	mov.w	r2, #0
 8016d92:	f04f 0300 	mov.w	r3, #0
 8016d96:	014b      	lsls	r3, r1, #5
 8016d98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8016d9c:	0142      	lsls	r2, r0, #5
 8016d9e:	4610      	mov	r0, r2
 8016da0:	4619      	mov	r1, r3
 8016da2:	1b00      	subs	r0, r0, r4
 8016da4:	eb61 0105 	sbc.w	r1, r1, r5
 8016da8:	f04f 0200 	mov.w	r2, #0
 8016dac:	f04f 0300 	mov.w	r3, #0
 8016db0:	018b      	lsls	r3, r1, #6
 8016db2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8016db6:	0182      	lsls	r2, r0, #6
 8016db8:	1a12      	subs	r2, r2, r0
 8016dba:	eb63 0301 	sbc.w	r3, r3, r1
 8016dbe:	f04f 0000 	mov.w	r0, #0
 8016dc2:	f04f 0100 	mov.w	r1, #0
 8016dc6:	00d9      	lsls	r1, r3, #3
 8016dc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016dcc:	00d0      	lsls	r0, r2, #3
 8016dce:	4602      	mov	r2, r0
 8016dd0:	460b      	mov	r3, r1
 8016dd2:	1912      	adds	r2, r2, r4
 8016dd4:	eb45 0303 	adc.w	r3, r5, r3
 8016dd8:	f04f 0000 	mov.w	r0, #0
 8016ddc:	f04f 0100 	mov.w	r1, #0
 8016de0:	0299      	lsls	r1, r3, #10
 8016de2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8016de6:	0290      	lsls	r0, r2, #10
 8016de8:	4602      	mov	r2, r0
 8016dea:	460b      	mov	r3, r1
 8016dec:	4610      	mov	r0, r2
 8016dee:	4619      	mov	r1, r3
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	461a      	mov	r2, r3
 8016df4:	f04f 0300 	mov.w	r3, #0
 8016df8:	f7f9 fe7e 	bl	8010af8 <__aeabi_uldivmod>
 8016dfc:	4602      	mov	r2, r0
 8016dfe:	460b      	mov	r3, r1
 8016e00:	4613      	mov	r3, r2
 8016e02:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8016e04:	4b0a      	ldr	r3, [pc, #40]	; (8016e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8016e06:	685b      	ldr	r3, [r3, #4]
 8016e08:	0f1b      	lsrs	r3, r3, #28
 8016e0a:	f003 0307 	and.w	r3, r3, #7
 8016e0e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8016e10:	69fa      	ldr	r2, [r7, #28]
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8016e18:	61bb      	str	r3, [r7, #24]
      break;
 8016e1a:	e002      	b.n	8016e22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8016e1c:	4b05      	ldr	r3, [pc, #20]	; (8016e34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8016e1e:	61bb      	str	r3, [r7, #24]
      break;
 8016e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8016e22:	69bb      	ldr	r3, [r7, #24]
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3720      	adds	r7, #32
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016e2e:	bf00      	nop
 8016e30:	40023800 	.word	0x40023800
 8016e34:	00f42400 	.word	0x00f42400
 8016e38:	007a1200 	.word	0x007a1200

08016e3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b086      	sub	sp, #24
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d101      	bne.n	8016e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	e28d      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	f003 0301 	and.w	r3, r3, #1
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	f000 8083 	beq.w	8016f62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8016e5c:	4b94      	ldr	r3, [pc, #592]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016e5e:	689b      	ldr	r3, [r3, #8]
 8016e60:	f003 030c 	and.w	r3, r3, #12
 8016e64:	2b04      	cmp	r3, #4
 8016e66:	d019      	beq.n	8016e9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8016e68:	4b91      	ldr	r3, [pc, #580]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016e6a:	689b      	ldr	r3, [r3, #8]
 8016e6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8016e70:	2b08      	cmp	r3, #8
 8016e72:	d106      	bne.n	8016e82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8016e74:	4b8e      	ldr	r3, [pc, #568]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8016e80:	d00c      	beq.n	8016e9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016e82:	4b8b      	ldr	r3, [pc, #556]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016e84:	689b      	ldr	r3, [r3, #8]
 8016e86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8016e8a:	2b0c      	cmp	r3, #12
 8016e8c:	d112      	bne.n	8016eb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016e8e:	4b88      	ldr	r3, [pc, #544]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8016e9a:	d10b      	bne.n	8016eb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016e9c:	4b84      	ldr	r3, [pc, #528]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d05b      	beq.n	8016f60 <HAL_RCC_OscConfig+0x124>
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	685b      	ldr	r3, [r3, #4]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d157      	bne.n	8016f60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	e25a      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	685b      	ldr	r3, [r3, #4]
 8016eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ebc:	d106      	bne.n	8016ecc <HAL_RCC_OscConfig+0x90>
 8016ebe:	4b7c      	ldr	r3, [pc, #496]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	4a7b      	ldr	r2, [pc, #492]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016ec8:	6013      	str	r3, [r2, #0]
 8016eca:	e01d      	b.n	8016f08 <HAL_RCC_OscConfig+0xcc>
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8016ed4:	d10c      	bne.n	8016ef0 <HAL_RCC_OscConfig+0xb4>
 8016ed6:	4b76      	ldr	r3, [pc, #472]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	4a75      	ldr	r2, [pc, #468]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016ee0:	6013      	str	r3, [r2, #0]
 8016ee2:	4b73      	ldr	r3, [pc, #460]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	4a72      	ldr	r2, [pc, #456]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016eec:	6013      	str	r3, [r2, #0]
 8016eee:	e00b      	b.n	8016f08 <HAL_RCC_OscConfig+0xcc>
 8016ef0:	4b6f      	ldr	r3, [pc, #444]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	4a6e      	ldr	r2, [pc, #440]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016efa:	6013      	str	r3, [r2, #0]
 8016efc:	4b6c      	ldr	r3, [pc, #432]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	4a6b      	ldr	r2, [pc, #428]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	685b      	ldr	r3, [r3, #4]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d013      	beq.n	8016f38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016f10:	f7fb fa6c 	bl	80123ec <HAL_GetTick>
 8016f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016f16:	e008      	b.n	8016f2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016f18:	f7fb fa68 	bl	80123ec <HAL_GetTick>
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	1ad3      	subs	r3, r2, r3
 8016f22:	2b64      	cmp	r3, #100	; 0x64
 8016f24:	d901      	bls.n	8016f2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8016f26:	2303      	movs	r3, #3
 8016f28:	e21f      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016f2a:	4b61      	ldr	r3, [pc, #388]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d0f0      	beq.n	8016f18 <HAL_RCC_OscConfig+0xdc>
 8016f36:	e014      	b.n	8016f62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016f38:	f7fb fa58 	bl	80123ec <HAL_GetTick>
 8016f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8016f3e:	e008      	b.n	8016f52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016f40:	f7fb fa54 	bl	80123ec <HAL_GetTick>
 8016f44:	4602      	mov	r2, r0
 8016f46:	693b      	ldr	r3, [r7, #16]
 8016f48:	1ad3      	subs	r3, r2, r3
 8016f4a:	2b64      	cmp	r3, #100	; 0x64
 8016f4c:	d901      	bls.n	8016f52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8016f4e:	2303      	movs	r3, #3
 8016f50:	e20b      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8016f52:	4b57      	ldr	r3, [pc, #348]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d1f0      	bne.n	8016f40 <HAL_RCC_OscConfig+0x104>
 8016f5e:	e000      	b.n	8016f62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	f003 0302 	and.w	r3, r3, #2
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d06f      	beq.n	801704e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8016f6e:	4b50      	ldr	r3, [pc, #320]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016f70:	689b      	ldr	r3, [r3, #8]
 8016f72:	f003 030c 	and.w	r3, r3, #12
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d017      	beq.n	8016faa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8016f7a:	4b4d      	ldr	r3, [pc, #308]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016f7c:	689b      	ldr	r3, [r3, #8]
 8016f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8016f82:	2b08      	cmp	r3, #8
 8016f84:	d105      	bne.n	8016f92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8016f86:	4b4a      	ldr	r3, [pc, #296]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016f88:	685b      	ldr	r3, [r3, #4]
 8016f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d00b      	beq.n	8016faa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016f92:	4b47      	ldr	r3, [pc, #284]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016f94:	689b      	ldr	r3, [r3, #8]
 8016f96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8016f9a:	2b0c      	cmp	r3, #12
 8016f9c:	d11c      	bne.n	8016fd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016f9e:	4b44      	ldr	r3, [pc, #272]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d116      	bne.n	8016fd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8016faa:	4b41      	ldr	r3, [pc, #260]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	f003 0302 	and.w	r3, r3, #2
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d005      	beq.n	8016fc2 <HAL_RCC_OscConfig+0x186>
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	68db      	ldr	r3, [r3, #12]
 8016fba:	2b01      	cmp	r3, #1
 8016fbc:	d001      	beq.n	8016fc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	e1d3      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016fc2:	4b3b      	ldr	r3, [pc, #236]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	691b      	ldr	r3, [r3, #16]
 8016fce:	00db      	lsls	r3, r3, #3
 8016fd0:	4937      	ldr	r1, [pc, #220]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8016fd2:	4313      	orrs	r3, r2
 8016fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8016fd6:	e03a      	b.n	801704e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	68db      	ldr	r3, [r3, #12]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d020      	beq.n	8017022 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016fe0:	4b34      	ldr	r3, [pc, #208]	; (80170b4 <HAL_RCC_OscConfig+0x278>)
 8016fe2:	2201      	movs	r2, #1
 8016fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016fe6:	f7fb fa01 	bl	80123ec <HAL_GetTick>
 8016fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016fec:	e008      	b.n	8017000 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016fee:	f7fb f9fd 	bl	80123ec <HAL_GetTick>
 8016ff2:	4602      	mov	r2, r0
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	1ad3      	subs	r3, r2, r3
 8016ff8:	2b02      	cmp	r3, #2
 8016ffa:	d901      	bls.n	8017000 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8016ffc:	2303      	movs	r3, #3
 8016ffe:	e1b4      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017000:	4b2b      	ldr	r3, [pc, #172]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	f003 0302 	and.w	r3, r3, #2
 8017008:	2b00      	cmp	r3, #0
 801700a:	d0f0      	beq.n	8016fee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801700c:	4b28      	ldr	r3, [pc, #160]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	691b      	ldr	r3, [r3, #16]
 8017018:	00db      	lsls	r3, r3, #3
 801701a:	4925      	ldr	r1, [pc, #148]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 801701c:	4313      	orrs	r3, r2
 801701e:	600b      	str	r3, [r1, #0]
 8017020:	e015      	b.n	801704e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017022:	4b24      	ldr	r3, [pc, #144]	; (80170b4 <HAL_RCC_OscConfig+0x278>)
 8017024:	2200      	movs	r2, #0
 8017026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017028:	f7fb f9e0 	bl	80123ec <HAL_GetTick>
 801702c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801702e:	e008      	b.n	8017042 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017030:	f7fb f9dc 	bl	80123ec <HAL_GetTick>
 8017034:	4602      	mov	r2, r0
 8017036:	693b      	ldr	r3, [r7, #16]
 8017038:	1ad3      	subs	r3, r2, r3
 801703a:	2b02      	cmp	r3, #2
 801703c:	d901      	bls.n	8017042 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801703e:	2303      	movs	r3, #3
 8017040:	e193      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017042:	4b1b      	ldr	r3, [pc, #108]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	f003 0302 	and.w	r3, r3, #2
 801704a:	2b00      	cmp	r3, #0
 801704c:	d1f0      	bne.n	8017030 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	f003 0308 	and.w	r3, r3, #8
 8017056:	2b00      	cmp	r3, #0
 8017058:	d036      	beq.n	80170c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	695b      	ldr	r3, [r3, #20]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d016      	beq.n	8017090 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017062:	4b15      	ldr	r3, [pc, #84]	; (80170b8 <HAL_RCC_OscConfig+0x27c>)
 8017064:	2201      	movs	r2, #1
 8017066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017068:	f7fb f9c0 	bl	80123ec <HAL_GetTick>
 801706c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801706e:	e008      	b.n	8017082 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017070:	f7fb f9bc 	bl	80123ec <HAL_GetTick>
 8017074:	4602      	mov	r2, r0
 8017076:	693b      	ldr	r3, [r7, #16]
 8017078:	1ad3      	subs	r3, r2, r3
 801707a:	2b02      	cmp	r3, #2
 801707c:	d901      	bls.n	8017082 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801707e:	2303      	movs	r3, #3
 8017080:	e173      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017082:	4b0b      	ldr	r3, [pc, #44]	; (80170b0 <HAL_RCC_OscConfig+0x274>)
 8017084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017086:	f003 0302 	and.w	r3, r3, #2
 801708a:	2b00      	cmp	r3, #0
 801708c:	d0f0      	beq.n	8017070 <HAL_RCC_OscConfig+0x234>
 801708e:	e01b      	b.n	80170c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017090:	4b09      	ldr	r3, [pc, #36]	; (80170b8 <HAL_RCC_OscConfig+0x27c>)
 8017092:	2200      	movs	r2, #0
 8017094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017096:	f7fb f9a9 	bl	80123ec <HAL_GetTick>
 801709a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801709c:	e00e      	b.n	80170bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801709e:	f7fb f9a5 	bl	80123ec <HAL_GetTick>
 80170a2:	4602      	mov	r2, r0
 80170a4:	693b      	ldr	r3, [r7, #16]
 80170a6:	1ad3      	subs	r3, r2, r3
 80170a8:	2b02      	cmp	r3, #2
 80170aa:	d907      	bls.n	80170bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80170ac:	2303      	movs	r3, #3
 80170ae:	e15c      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
 80170b0:	40023800 	.word	0x40023800
 80170b4:	42470000 	.word	0x42470000
 80170b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80170bc:	4b8a      	ldr	r3, [pc, #552]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80170be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170c0:	f003 0302 	and.w	r3, r3, #2
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d1ea      	bne.n	801709e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	f003 0304 	and.w	r3, r3, #4
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	f000 8097 	beq.w	8017204 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80170d6:	2300      	movs	r3, #0
 80170d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80170da:	4b83      	ldr	r3, [pc, #524]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80170dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d10f      	bne.n	8017106 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80170e6:	2300      	movs	r3, #0
 80170e8:	60bb      	str	r3, [r7, #8]
 80170ea:	4b7f      	ldr	r3, [pc, #508]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80170ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ee:	4a7e      	ldr	r2, [pc, #504]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80170f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80170f4:	6413      	str	r3, [r2, #64]	; 0x40
 80170f6:	4b7c      	ldr	r3, [pc, #496]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80170f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80170fe:	60bb      	str	r3, [r7, #8]
 8017100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017102:	2301      	movs	r3, #1
 8017104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017106:	4b79      	ldr	r3, [pc, #484]	; (80172ec <HAL_RCC_OscConfig+0x4b0>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801710e:	2b00      	cmp	r3, #0
 8017110:	d118      	bne.n	8017144 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017112:	4b76      	ldr	r3, [pc, #472]	; (80172ec <HAL_RCC_OscConfig+0x4b0>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	4a75      	ldr	r2, [pc, #468]	; (80172ec <HAL_RCC_OscConfig+0x4b0>)
 8017118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801711c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801711e:	f7fb f965 	bl	80123ec <HAL_GetTick>
 8017122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017124:	e008      	b.n	8017138 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017126:	f7fb f961 	bl	80123ec <HAL_GetTick>
 801712a:	4602      	mov	r2, r0
 801712c:	693b      	ldr	r3, [r7, #16]
 801712e:	1ad3      	subs	r3, r2, r3
 8017130:	2b02      	cmp	r3, #2
 8017132:	d901      	bls.n	8017138 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8017134:	2303      	movs	r3, #3
 8017136:	e118      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017138:	4b6c      	ldr	r3, [pc, #432]	; (80172ec <HAL_RCC_OscConfig+0x4b0>)
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017140:	2b00      	cmp	r3, #0
 8017142:	d0f0      	beq.n	8017126 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	689b      	ldr	r3, [r3, #8]
 8017148:	2b01      	cmp	r3, #1
 801714a:	d106      	bne.n	801715a <HAL_RCC_OscConfig+0x31e>
 801714c:	4b66      	ldr	r3, [pc, #408]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 801714e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017150:	4a65      	ldr	r2, [pc, #404]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 8017152:	f043 0301 	orr.w	r3, r3, #1
 8017156:	6713      	str	r3, [r2, #112]	; 0x70
 8017158:	e01c      	b.n	8017194 <HAL_RCC_OscConfig+0x358>
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	689b      	ldr	r3, [r3, #8]
 801715e:	2b05      	cmp	r3, #5
 8017160:	d10c      	bne.n	801717c <HAL_RCC_OscConfig+0x340>
 8017162:	4b61      	ldr	r3, [pc, #388]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 8017164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017166:	4a60      	ldr	r2, [pc, #384]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 8017168:	f043 0304 	orr.w	r3, r3, #4
 801716c:	6713      	str	r3, [r2, #112]	; 0x70
 801716e:	4b5e      	ldr	r3, [pc, #376]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 8017170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017172:	4a5d      	ldr	r2, [pc, #372]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 8017174:	f043 0301 	orr.w	r3, r3, #1
 8017178:	6713      	str	r3, [r2, #112]	; 0x70
 801717a:	e00b      	b.n	8017194 <HAL_RCC_OscConfig+0x358>
 801717c:	4b5a      	ldr	r3, [pc, #360]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 801717e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017180:	4a59      	ldr	r2, [pc, #356]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 8017182:	f023 0301 	bic.w	r3, r3, #1
 8017186:	6713      	str	r3, [r2, #112]	; 0x70
 8017188:	4b57      	ldr	r3, [pc, #348]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 801718a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801718c:	4a56      	ldr	r2, [pc, #344]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 801718e:	f023 0304 	bic.w	r3, r3, #4
 8017192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	689b      	ldr	r3, [r3, #8]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d015      	beq.n	80171c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801719c:	f7fb f926 	bl	80123ec <HAL_GetTick>
 80171a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80171a2:	e00a      	b.n	80171ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80171a4:	f7fb f922 	bl	80123ec <HAL_GetTick>
 80171a8:	4602      	mov	r2, r0
 80171aa:	693b      	ldr	r3, [r7, #16]
 80171ac:	1ad3      	subs	r3, r2, r3
 80171ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80171b2:	4293      	cmp	r3, r2
 80171b4:	d901      	bls.n	80171ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80171b6:	2303      	movs	r3, #3
 80171b8:	e0d7      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80171ba:	4b4b      	ldr	r3, [pc, #300]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80171bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171be:	f003 0302 	and.w	r3, r3, #2
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d0ee      	beq.n	80171a4 <HAL_RCC_OscConfig+0x368>
 80171c6:	e014      	b.n	80171f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80171c8:	f7fb f910 	bl	80123ec <HAL_GetTick>
 80171cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80171ce:	e00a      	b.n	80171e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80171d0:	f7fb f90c 	bl	80123ec <HAL_GetTick>
 80171d4:	4602      	mov	r2, r0
 80171d6:	693b      	ldr	r3, [r7, #16]
 80171d8:	1ad3      	subs	r3, r2, r3
 80171da:	f241 3288 	movw	r2, #5000	; 0x1388
 80171de:	4293      	cmp	r3, r2
 80171e0:	d901      	bls.n	80171e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80171e2:	2303      	movs	r3, #3
 80171e4:	e0c1      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80171e6:	4b40      	ldr	r3, [pc, #256]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80171e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171ea:	f003 0302 	and.w	r3, r3, #2
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d1ee      	bne.n	80171d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80171f2:	7dfb      	ldrb	r3, [r7, #23]
 80171f4:	2b01      	cmp	r3, #1
 80171f6:	d105      	bne.n	8017204 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80171f8:	4b3b      	ldr	r3, [pc, #236]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80171fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171fc:	4a3a      	ldr	r2, [pc, #232]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80171fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	699b      	ldr	r3, [r3, #24]
 8017208:	2b00      	cmp	r3, #0
 801720a:	f000 80ad 	beq.w	8017368 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801720e:	4b36      	ldr	r3, [pc, #216]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 8017210:	689b      	ldr	r3, [r3, #8]
 8017212:	f003 030c 	and.w	r3, r3, #12
 8017216:	2b08      	cmp	r3, #8
 8017218:	d060      	beq.n	80172dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	699b      	ldr	r3, [r3, #24]
 801721e:	2b02      	cmp	r3, #2
 8017220:	d145      	bne.n	80172ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017222:	4b33      	ldr	r3, [pc, #204]	; (80172f0 <HAL_RCC_OscConfig+0x4b4>)
 8017224:	2200      	movs	r2, #0
 8017226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017228:	f7fb f8e0 	bl	80123ec <HAL_GetTick>
 801722c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801722e:	e008      	b.n	8017242 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017230:	f7fb f8dc 	bl	80123ec <HAL_GetTick>
 8017234:	4602      	mov	r2, r0
 8017236:	693b      	ldr	r3, [r7, #16]
 8017238:	1ad3      	subs	r3, r2, r3
 801723a:	2b02      	cmp	r3, #2
 801723c:	d901      	bls.n	8017242 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801723e:	2303      	movs	r3, #3
 8017240:	e093      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017242:	4b29      	ldr	r3, [pc, #164]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801724a:	2b00      	cmp	r3, #0
 801724c:	d1f0      	bne.n	8017230 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	69da      	ldr	r2, [r3, #28]
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	6a1b      	ldr	r3, [r3, #32]
 8017256:	431a      	orrs	r2, r3
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801725c:	019b      	lsls	r3, r3, #6
 801725e:	431a      	orrs	r2, r3
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017264:	085b      	lsrs	r3, r3, #1
 8017266:	3b01      	subs	r3, #1
 8017268:	041b      	lsls	r3, r3, #16
 801726a:	431a      	orrs	r2, r3
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017270:	061b      	lsls	r3, r3, #24
 8017272:	431a      	orrs	r2, r3
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017278:	071b      	lsls	r3, r3, #28
 801727a:	491b      	ldr	r1, [pc, #108]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 801727c:	4313      	orrs	r3, r2
 801727e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017280:	4b1b      	ldr	r3, [pc, #108]	; (80172f0 <HAL_RCC_OscConfig+0x4b4>)
 8017282:	2201      	movs	r2, #1
 8017284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017286:	f7fb f8b1 	bl	80123ec <HAL_GetTick>
 801728a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801728c:	e008      	b.n	80172a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801728e:	f7fb f8ad 	bl	80123ec <HAL_GetTick>
 8017292:	4602      	mov	r2, r0
 8017294:	693b      	ldr	r3, [r7, #16]
 8017296:	1ad3      	subs	r3, r2, r3
 8017298:	2b02      	cmp	r3, #2
 801729a:	d901      	bls.n	80172a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801729c:	2303      	movs	r3, #3
 801729e:	e064      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80172a0:	4b11      	ldr	r3, [pc, #68]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d0f0      	beq.n	801728e <HAL_RCC_OscConfig+0x452>
 80172ac:	e05c      	b.n	8017368 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80172ae:	4b10      	ldr	r3, [pc, #64]	; (80172f0 <HAL_RCC_OscConfig+0x4b4>)
 80172b0:	2200      	movs	r2, #0
 80172b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80172b4:	f7fb f89a 	bl	80123ec <HAL_GetTick>
 80172b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80172ba:	e008      	b.n	80172ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80172bc:	f7fb f896 	bl	80123ec <HAL_GetTick>
 80172c0:	4602      	mov	r2, r0
 80172c2:	693b      	ldr	r3, [r7, #16]
 80172c4:	1ad3      	subs	r3, r2, r3
 80172c6:	2b02      	cmp	r3, #2
 80172c8:	d901      	bls.n	80172ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80172ca:	2303      	movs	r3, #3
 80172cc:	e04d      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80172ce:	4b06      	ldr	r3, [pc, #24]	; (80172e8 <HAL_RCC_OscConfig+0x4ac>)
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d1f0      	bne.n	80172bc <HAL_RCC_OscConfig+0x480>
 80172da:	e045      	b.n	8017368 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	699b      	ldr	r3, [r3, #24]
 80172e0:	2b01      	cmp	r3, #1
 80172e2:	d107      	bne.n	80172f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80172e4:	2301      	movs	r3, #1
 80172e6:	e040      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
 80172e8:	40023800 	.word	0x40023800
 80172ec:	40007000 	.word	0x40007000
 80172f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80172f4:	4b1f      	ldr	r3, [pc, #124]	; (8017374 <HAL_RCC_OscConfig+0x538>)
 80172f6:	685b      	ldr	r3, [r3, #4]
 80172f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	699b      	ldr	r3, [r3, #24]
 80172fe:	2b01      	cmp	r3, #1
 8017300:	d030      	beq.n	8017364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801730c:	429a      	cmp	r2, r3
 801730e:	d129      	bne.n	8017364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801731a:	429a      	cmp	r2, r3
 801731c:	d122      	bne.n	8017364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801731e:	68fa      	ldr	r2, [r7, #12]
 8017320:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8017324:	4013      	ands	r3, r2
 8017326:	687a      	ldr	r2, [r7, #4]
 8017328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801732a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801732c:	4293      	cmp	r3, r2
 801732e:	d119      	bne.n	8017364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801733a:	085b      	lsrs	r3, r3, #1
 801733c:	3b01      	subs	r3, #1
 801733e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017340:	429a      	cmp	r2, r3
 8017342:	d10f      	bne.n	8017364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801734e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017350:	429a      	cmp	r2, r3
 8017352:	d107      	bne.n	8017364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801735e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8017360:	429a      	cmp	r2, r3
 8017362:	d001      	beq.n	8017368 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8017364:	2301      	movs	r3, #1
 8017366:	e000      	b.n	801736a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8017368:	2300      	movs	r3, #0
}
 801736a:	4618      	mov	r0, r3
 801736c:	3718      	adds	r7, #24
 801736e:	46bd      	mov	sp, r7
 8017370:	bd80      	pop	{r7, pc}
 8017372:	bf00      	nop
 8017374:	40023800 	.word	0x40023800

08017378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d101      	bne.n	801738a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8017386:	2301      	movs	r3, #1
 8017388:	e041      	b.n	801740e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017390:	b2db      	uxtb	r3, r3
 8017392:	2b00      	cmp	r3, #0
 8017394:	d106      	bne.n	80173a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	2200      	movs	r2, #0
 801739a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801739e:	6878      	ldr	r0, [r7, #4]
 80173a0:	f7fa fc6e 	bl	8011c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	2202      	movs	r2, #2
 80173a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	681a      	ldr	r2, [r3, #0]
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	3304      	adds	r3, #4
 80173b4:	4619      	mov	r1, r3
 80173b6:	4610      	mov	r0, r2
 80173b8:	f000 fafe 	bl	80179b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	2201      	movs	r2, #1
 80173c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	2201      	movs	r2, #1
 80173c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2201      	movs	r2, #1
 80173d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	2201      	movs	r2, #1
 80173d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2201      	movs	r2, #1
 80173e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2201      	movs	r2, #1
 80173e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	2201      	movs	r2, #1
 80173f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	2201      	movs	r2, #1
 80173f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	2201      	movs	r2, #1
 8017400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2201      	movs	r2, #1
 8017408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801740c:	2300      	movs	r3, #0
}
 801740e:	4618      	mov	r0, r3
 8017410:	3708      	adds	r7, #8
 8017412:	46bd      	mov	sp, r7
 8017414:	bd80      	pop	{r7, pc}
	...

08017418 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8017418:	b480      	push	{r7}
 801741a:	b085      	sub	sp, #20
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017426:	b2db      	uxtb	r3, r3
 8017428:	2b01      	cmp	r3, #1
 801742a:	d001      	beq.n	8017430 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801742c:	2301      	movs	r3, #1
 801742e:	e046      	b.n	80174be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2202      	movs	r2, #2
 8017434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	4a23      	ldr	r2, [pc, #140]	; (80174cc <HAL_TIM_Base_Start+0xb4>)
 801743e:	4293      	cmp	r3, r2
 8017440:	d022      	beq.n	8017488 <HAL_TIM_Base_Start+0x70>
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801744a:	d01d      	beq.n	8017488 <HAL_TIM_Base_Start+0x70>
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	4a1f      	ldr	r2, [pc, #124]	; (80174d0 <HAL_TIM_Base_Start+0xb8>)
 8017452:	4293      	cmp	r3, r2
 8017454:	d018      	beq.n	8017488 <HAL_TIM_Base_Start+0x70>
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	4a1e      	ldr	r2, [pc, #120]	; (80174d4 <HAL_TIM_Base_Start+0xbc>)
 801745c:	4293      	cmp	r3, r2
 801745e:	d013      	beq.n	8017488 <HAL_TIM_Base_Start+0x70>
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	4a1c      	ldr	r2, [pc, #112]	; (80174d8 <HAL_TIM_Base_Start+0xc0>)
 8017466:	4293      	cmp	r3, r2
 8017468:	d00e      	beq.n	8017488 <HAL_TIM_Base_Start+0x70>
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	4a1b      	ldr	r2, [pc, #108]	; (80174dc <HAL_TIM_Base_Start+0xc4>)
 8017470:	4293      	cmp	r3, r2
 8017472:	d009      	beq.n	8017488 <HAL_TIM_Base_Start+0x70>
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	4a19      	ldr	r2, [pc, #100]	; (80174e0 <HAL_TIM_Base_Start+0xc8>)
 801747a:	4293      	cmp	r3, r2
 801747c:	d004      	beq.n	8017488 <HAL_TIM_Base_Start+0x70>
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	4a18      	ldr	r2, [pc, #96]	; (80174e4 <HAL_TIM_Base_Start+0xcc>)
 8017484:	4293      	cmp	r3, r2
 8017486:	d111      	bne.n	80174ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	689b      	ldr	r3, [r3, #8]
 801748e:	f003 0307 	and.w	r3, r3, #7
 8017492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	2b06      	cmp	r3, #6
 8017498:	d010      	beq.n	80174bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	681a      	ldr	r2, [r3, #0]
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	f042 0201 	orr.w	r2, r2, #1
 80174a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80174aa:	e007      	b.n	80174bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	681a      	ldr	r2, [r3, #0]
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	f042 0201 	orr.w	r2, r2, #1
 80174ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80174bc:	2300      	movs	r3, #0
}
 80174be:	4618      	mov	r0, r3
 80174c0:	3714      	adds	r7, #20
 80174c2:	46bd      	mov	sp, r7
 80174c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c8:	4770      	bx	lr
 80174ca:	bf00      	nop
 80174cc:	40010000 	.word	0x40010000
 80174d0:	40000400 	.word	0x40000400
 80174d4:	40000800 	.word	0x40000800
 80174d8:	40000c00 	.word	0x40000c00
 80174dc:	40010400 	.word	0x40010400
 80174e0:	40014000 	.word	0x40014000
 80174e4:	40001800 	.word	0x40001800

080174e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80174e8:	b480      	push	{r7}
 80174ea:	b085      	sub	sp, #20
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80174f6:	b2db      	uxtb	r3, r3
 80174f8:	2b01      	cmp	r3, #1
 80174fa:	d001      	beq.n	8017500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80174fc:	2301      	movs	r3, #1
 80174fe:	e04e      	b.n	801759e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2202      	movs	r2, #2
 8017504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	68da      	ldr	r2, [r3, #12]
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	f042 0201 	orr.w	r2, r2, #1
 8017516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	4a23      	ldr	r2, [pc, #140]	; (80175ac <HAL_TIM_Base_Start_IT+0xc4>)
 801751e:	4293      	cmp	r3, r2
 8017520:	d022      	beq.n	8017568 <HAL_TIM_Base_Start_IT+0x80>
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801752a:	d01d      	beq.n	8017568 <HAL_TIM_Base_Start_IT+0x80>
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	4a1f      	ldr	r2, [pc, #124]	; (80175b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8017532:	4293      	cmp	r3, r2
 8017534:	d018      	beq.n	8017568 <HAL_TIM_Base_Start_IT+0x80>
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	4a1e      	ldr	r2, [pc, #120]	; (80175b4 <HAL_TIM_Base_Start_IT+0xcc>)
 801753c:	4293      	cmp	r3, r2
 801753e:	d013      	beq.n	8017568 <HAL_TIM_Base_Start_IT+0x80>
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	4a1c      	ldr	r2, [pc, #112]	; (80175b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8017546:	4293      	cmp	r3, r2
 8017548:	d00e      	beq.n	8017568 <HAL_TIM_Base_Start_IT+0x80>
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	4a1b      	ldr	r2, [pc, #108]	; (80175bc <HAL_TIM_Base_Start_IT+0xd4>)
 8017550:	4293      	cmp	r3, r2
 8017552:	d009      	beq.n	8017568 <HAL_TIM_Base_Start_IT+0x80>
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	4a19      	ldr	r2, [pc, #100]	; (80175c0 <HAL_TIM_Base_Start_IT+0xd8>)
 801755a:	4293      	cmp	r3, r2
 801755c:	d004      	beq.n	8017568 <HAL_TIM_Base_Start_IT+0x80>
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	4a18      	ldr	r2, [pc, #96]	; (80175c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8017564:	4293      	cmp	r3, r2
 8017566:	d111      	bne.n	801758c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	689b      	ldr	r3, [r3, #8]
 801756e:	f003 0307 	and.w	r3, r3, #7
 8017572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	2b06      	cmp	r3, #6
 8017578:	d010      	beq.n	801759c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	681a      	ldr	r2, [r3, #0]
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	f042 0201 	orr.w	r2, r2, #1
 8017588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801758a:	e007      	b.n	801759c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	681a      	ldr	r2, [r3, #0]
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	f042 0201 	orr.w	r2, r2, #1
 801759a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801759c:	2300      	movs	r3, #0
}
 801759e:	4618      	mov	r0, r3
 80175a0:	3714      	adds	r7, #20
 80175a2:	46bd      	mov	sp, r7
 80175a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a8:	4770      	bx	lr
 80175aa:	bf00      	nop
 80175ac:	40010000 	.word	0x40010000
 80175b0:	40000400 	.word	0x40000400
 80175b4:	40000800 	.word	0x40000800
 80175b8:	40000c00 	.word	0x40000c00
 80175bc:	40010400 	.word	0x40010400
 80175c0:	40014000 	.word	0x40014000
 80175c4:	40001800 	.word	0x40001800

080175c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b082      	sub	sp, #8
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	691b      	ldr	r3, [r3, #16]
 80175d6:	f003 0302 	and.w	r3, r3, #2
 80175da:	2b02      	cmp	r3, #2
 80175dc:	d122      	bne.n	8017624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	68db      	ldr	r3, [r3, #12]
 80175e4:	f003 0302 	and.w	r3, r3, #2
 80175e8:	2b02      	cmp	r3, #2
 80175ea:	d11b      	bne.n	8017624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	f06f 0202 	mvn.w	r2, #2
 80175f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	2201      	movs	r2, #1
 80175fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	699b      	ldr	r3, [r3, #24]
 8017602:	f003 0303 	and.w	r3, r3, #3
 8017606:	2b00      	cmp	r3, #0
 8017608:	d003      	beq.n	8017612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801760a:	6878      	ldr	r0, [r7, #4]
 801760c:	f000 f9b5 	bl	801797a <HAL_TIM_IC_CaptureCallback>
 8017610:	e005      	b.n	801761e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	f000 f9a7 	bl	8017966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017618:	6878      	ldr	r0, [r7, #4]
 801761a:	f000 f9b8 	bl	801798e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	2200      	movs	r2, #0
 8017622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	691b      	ldr	r3, [r3, #16]
 801762a:	f003 0304 	and.w	r3, r3, #4
 801762e:	2b04      	cmp	r3, #4
 8017630:	d122      	bne.n	8017678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	68db      	ldr	r3, [r3, #12]
 8017638:	f003 0304 	and.w	r3, r3, #4
 801763c:	2b04      	cmp	r3, #4
 801763e:	d11b      	bne.n	8017678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	f06f 0204 	mvn.w	r2, #4
 8017648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	2202      	movs	r2, #2
 801764e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	699b      	ldr	r3, [r3, #24]
 8017656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801765a:	2b00      	cmp	r3, #0
 801765c:	d003      	beq.n	8017666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801765e:	6878      	ldr	r0, [r7, #4]
 8017660:	f000 f98b 	bl	801797a <HAL_TIM_IC_CaptureCallback>
 8017664:	e005      	b.n	8017672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f000 f97d 	bl	8017966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801766c:	6878      	ldr	r0, [r7, #4]
 801766e:	f000 f98e 	bl	801798e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	2200      	movs	r2, #0
 8017676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	691b      	ldr	r3, [r3, #16]
 801767e:	f003 0308 	and.w	r3, r3, #8
 8017682:	2b08      	cmp	r3, #8
 8017684:	d122      	bne.n	80176cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	68db      	ldr	r3, [r3, #12]
 801768c:	f003 0308 	and.w	r3, r3, #8
 8017690:	2b08      	cmp	r3, #8
 8017692:	d11b      	bne.n	80176cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	f06f 0208 	mvn.w	r2, #8
 801769c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2204      	movs	r2, #4
 80176a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	69db      	ldr	r3, [r3, #28]
 80176aa:	f003 0303 	and.w	r3, r3, #3
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d003      	beq.n	80176ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80176b2:	6878      	ldr	r0, [r7, #4]
 80176b4:	f000 f961 	bl	801797a <HAL_TIM_IC_CaptureCallback>
 80176b8:	e005      	b.n	80176c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80176ba:	6878      	ldr	r0, [r7, #4]
 80176bc:	f000 f953 	bl	8017966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f000 f964 	bl	801798e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	2200      	movs	r2, #0
 80176ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	691b      	ldr	r3, [r3, #16]
 80176d2:	f003 0310 	and.w	r3, r3, #16
 80176d6:	2b10      	cmp	r3, #16
 80176d8:	d122      	bne.n	8017720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	68db      	ldr	r3, [r3, #12]
 80176e0:	f003 0310 	and.w	r3, r3, #16
 80176e4:	2b10      	cmp	r3, #16
 80176e6:	d11b      	bne.n	8017720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	f06f 0210 	mvn.w	r2, #16
 80176f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	2208      	movs	r2, #8
 80176f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	69db      	ldr	r3, [r3, #28]
 80176fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017702:	2b00      	cmp	r3, #0
 8017704:	d003      	beq.n	801770e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	f000 f937 	bl	801797a <HAL_TIM_IC_CaptureCallback>
 801770c:	e005      	b.n	801771a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801770e:	6878      	ldr	r0, [r7, #4]
 8017710:	f000 f929 	bl	8017966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f000 f93a 	bl	801798e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	2200      	movs	r2, #0
 801771e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	691b      	ldr	r3, [r3, #16]
 8017726:	f003 0301 	and.w	r3, r3, #1
 801772a:	2b01      	cmp	r3, #1
 801772c:	d10e      	bne.n	801774c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	68db      	ldr	r3, [r3, #12]
 8017734:	f003 0301 	and.w	r3, r3, #1
 8017738:	2b01      	cmp	r3, #1
 801773a:	d107      	bne.n	801774c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	f06f 0201 	mvn.w	r2, #1
 8017744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8017746:	6878      	ldr	r0, [r7, #4]
 8017748:	f7fa f996 	bl	8011a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	691b      	ldr	r3, [r3, #16]
 8017752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017756:	2b80      	cmp	r3, #128	; 0x80
 8017758:	d10e      	bne.n	8017778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	68db      	ldr	r3, [r3, #12]
 8017760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017764:	2b80      	cmp	r3, #128	; 0x80
 8017766:	d107      	bne.n	8017778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8017770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8017772:	6878      	ldr	r0, [r7, #4]
 8017774:	f000 fae0 	bl	8017d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	691b      	ldr	r3, [r3, #16]
 801777e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017782:	2b40      	cmp	r3, #64	; 0x40
 8017784:	d10e      	bne.n	80177a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	68db      	ldr	r3, [r3, #12]
 801778c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017790:	2b40      	cmp	r3, #64	; 0x40
 8017792:	d107      	bne.n	80177a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801779c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f000 f8ff 	bl	80179a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	691b      	ldr	r3, [r3, #16]
 80177aa:	f003 0320 	and.w	r3, r3, #32
 80177ae:	2b20      	cmp	r3, #32
 80177b0:	d10e      	bne.n	80177d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	68db      	ldr	r3, [r3, #12]
 80177b8:	f003 0320 	and.w	r3, r3, #32
 80177bc:	2b20      	cmp	r3, #32
 80177be:	d107      	bne.n	80177d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	f06f 0220 	mvn.w	r2, #32
 80177c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80177ca:	6878      	ldr	r0, [r7, #4]
 80177cc:	f000 faaa 	bl	8017d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80177d0:	bf00      	nop
 80177d2:	3708      	adds	r7, #8
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b084      	sub	sp, #16
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80177e2:	2300      	movs	r3, #0
 80177e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80177ec:	2b01      	cmp	r3, #1
 80177ee:	d101      	bne.n	80177f4 <HAL_TIM_ConfigClockSource+0x1c>
 80177f0:	2302      	movs	r3, #2
 80177f2:	e0b4      	b.n	801795e <HAL_TIM_ConfigClockSource+0x186>
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	2201      	movs	r2, #1
 80177f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	2202      	movs	r2, #2
 8017800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	689b      	ldr	r3, [r3, #8]
 801780a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801780c:	68bb      	ldr	r3, [r7, #8]
 801780e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8017812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017814:	68bb      	ldr	r3, [r7, #8]
 8017816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801781a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	68ba      	ldr	r2, [r7, #8]
 8017822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801782c:	d03e      	beq.n	80178ac <HAL_TIM_ConfigClockSource+0xd4>
 801782e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017832:	f200 8087 	bhi.w	8017944 <HAL_TIM_ConfigClockSource+0x16c>
 8017836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801783a:	f000 8086 	beq.w	801794a <HAL_TIM_ConfigClockSource+0x172>
 801783e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017842:	d87f      	bhi.n	8017944 <HAL_TIM_ConfigClockSource+0x16c>
 8017844:	2b70      	cmp	r3, #112	; 0x70
 8017846:	d01a      	beq.n	801787e <HAL_TIM_ConfigClockSource+0xa6>
 8017848:	2b70      	cmp	r3, #112	; 0x70
 801784a:	d87b      	bhi.n	8017944 <HAL_TIM_ConfigClockSource+0x16c>
 801784c:	2b60      	cmp	r3, #96	; 0x60
 801784e:	d050      	beq.n	80178f2 <HAL_TIM_ConfigClockSource+0x11a>
 8017850:	2b60      	cmp	r3, #96	; 0x60
 8017852:	d877      	bhi.n	8017944 <HAL_TIM_ConfigClockSource+0x16c>
 8017854:	2b50      	cmp	r3, #80	; 0x50
 8017856:	d03c      	beq.n	80178d2 <HAL_TIM_ConfigClockSource+0xfa>
 8017858:	2b50      	cmp	r3, #80	; 0x50
 801785a:	d873      	bhi.n	8017944 <HAL_TIM_ConfigClockSource+0x16c>
 801785c:	2b40      	cmp	r3, #64	; 0x40
 801785e:	d058      	beq.n	8017912 <HAL_TIM_ConfigClockSource+0x13a>
 8017860:	2b40      	cmp	r3, #64	; 0x40
 8017862:	d86f      	bhi.n	8017944 <HAL_TIM_ConfigClockSource+0x16c>
 8017864:	2b30      	cmp	r3, #48	; 0x30
 8017866:	d064      	beq.n	8017932 <HAL_TIM_ConfigClockSource+0x15a>
 8017868:	2b30      	cmp	r3, #48	; 0x30
 801786a:	d86b      	bhi.n	8017944 <HAL_TIM_ConfigClockSource+0x16c>
 801786c:	2b20      	cmp	r3, #32
 801786e:	d060      	beq.n	8017932 <HAL_TIM_ConfigClockSource+0x15a>
 8017870:	2b20      	cmp	r3, #32
 8017872:	d867      	bhi.n	8017944 <HAL_TIM_ConfigClockSource+0x16c>
 8017874:	2b00      	cmp	r3, #0
 8017876:	d05c      	beq.n	8017932 <HAL_TIM_ConfigClockSource+0x15a>
 8017878:	2b10      	cmp	r3, #16
 801787a:	d05a      	beq.n	8017932 <HAL_TIM_ConfigClockSource+0x15a>
 801787c:	e062      	b.n	8017944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	6818      	ldr	r0, [r3, #0]
 8017882:	683b      	ldr	r3, [r7, #0]
 8017884:	6899      	ldr	r1, [r3, #8]
 8017886:	683b      	ldr	r3, [r7, #0]
 8017888:	685a      	ldr	r2, [r3, #4]
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	68db      	ldr	r3, [r3, #12]
 801788e:	f000 f9ad 	bl	8017bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	689b      	ldr	r3, [r3, #8]
 8017898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801789a:	68bb      	ldr	r3, [r7, #8]
 801789c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80178a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	68ba      	ldr	r2, [r7, #8]
 80178a8:	609a      	str	r2, [r3, #8]
      break;
 80178aa:	e04f      	b.n	801794c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	6818      	ldr	r0, [r3, #0]
 80178b0:	683b      	ldr	r3, [r7, #0]
 80178b2:	6899      	ldr	r1, [r3, #8]
 80178b4:	683b      	ldr	r3, [r7, #0]
 80178b6:	685a      	ldr	r2, [r3, #4]
 80178b8:	683b      	ldr	r3, [r7, #0]
 80178ba:	68db      	ldr	r3, [r3, #12]
 80178bc:	f000 f996 	bl	8017bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	689a      	ldr	r2, [r3, #8]
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80178ce:	609a      	str	r2, [r3, #8]
      break;
 80178d0:	e03c      	b.n	801794c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	6818      	ldr	r0, [r3, #0]
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	6859      	ldr	r1, [r3, #4]
 80178da:	683b      	ldr	r3, [r7, #0]
 80178dc:	68db      	ldr	r3, [r3, #12]
 80178de:	461a      	mov	r2, r3
 80178e0:	f000 f90a 	bl	8017af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	2150      	movs	r1, #80	; 0x50
 80178ea:	4618      	mov	r0, r3
 80178ec:	f000 f963 	bl	8017bb6 <TIM_ITRx_SetConfig>
      break;
 80178f0:	e02c      	b.n	801794c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	6818      	ldr	r0, [r3, #0]
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	6859      	ldr	r1, [r3, #4]
 80178fa:	683b      	ldr	r3, [r7, #0]
 80178fc:	68db      	ldr	r3, [r3, #12]
 80178fe:	461a      	mov	r2, r3
 8017900:	f000 f929 	bl	8017b56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	2160      	movs	r1, #96	; 0x60
 801790a:	4618      	mov	r0, r3
 801790c:	f000 f953 	bl	8017bb6 <TIM_ITRx_SetConfig>
      break;
 8017910:	e01c      	b.n	801794c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	6818      	ldr	r0, [r3, #0]
 8017916:	683b      	ldr	r3, [r7, #0]
 8017918:	6859      	ldr	r1, [r3, #4]
 801791a:	683b      	ldr	r3, [r7, #0]
 801791c:	68db      	ldr	r3, [r3, #12]
 801791e:	461a      	mov	r2, r3
 8017920:	f000 f8ea 	bl	8017af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	2140      	movs	r1, #64	; 0x40
 801792a:	4618      	mov	r0, r3
 801792c:	f000 f943 	bl	8017bb6 <TIM_ITRx_SetConfig>
      break;
 8017930:	e00c      	b.n	801794c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	681a      	ldr	r2, [r3, #0]
 8017936:	683b      	ldr	r3, [r7, #0]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	4619      	mov	r1, r3
 801793c:	4610      	mov	r0, r2
 801793e:	f000 f93a 	bl	8017bb6 <TIM_ITRx_SetConfig>
      break;
 8017942:	e003      	b.n	801794c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8017944:	2301      	movs	r3, #1
 8017946:	73fb      	strb	r3, [r7, #15]
      break;
 8017948:	e000      	b.n	801794c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801794a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	2201      	movs	r2, #1
 8017950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2200      	movs	r2, #0
 8017958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801795c:	7bfb      	ldrb	r3, [r7, #15]
}
 801795e:	4618      	mov	r0, r3
 8017960:	3710      	adds	r7, #16
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}

08017966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017966:	b480      	push	{r7}
 8017968:	b083      	sub	sp, #12
 801796a:	af00      	add	r7, sp, #0
 801796c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801796e:	bf00      	nop
 8017970:	370c      	adds	r7, #12
 8017972:	46bd      	mov	sp, r7
 8017974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017978:	4770      	bx	lr

0801797a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801797a:	b480      	push	{r7}
 801797c:	b083      	sub	sp, #12
 801797e:	af00      	add	r7, sp, #0
 8017980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017982:	bf00      	nop
 8017984:	370c      	adds	r7, #12
 8017986:	46bd      	mov	sp, r7
 8017988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801798c:	4770      	bx	lr

0801798e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801798e:	b480      	push	{r7}
 8017990:	b083      	sub	sp, #12
 8017992:	af00      	add	r7, sp, #0
 8017994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017996:	bf00      	nop
 8017998:	370c      	adds	r7, #12
 801799a:	46bd      	mov	sp, r7
 801799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a0:	4770      	bx	lr

080179a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80179a2:	b480      	push	{r7}
 80179a4:	b083      	sub	sp, #12
 80179a6:	af00      	add	r7, sp, #0
 80179a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80179aa:	bf00      	nop
 80179ac:	370c      	adds	r7, #12
 80179ae:	46bd      	mov	sp, r7
 80179b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b4:	4770      	bx	lr
	...

080179b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80179b8:	b480      	push	{r7}
 80179ba:	b085      	sub	sp, #20
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
 80179c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	4a40      	ldr	r2, [pc, #256]	; (8017acc <TIM_Base_SetConfig+0x114>)
 80179cc:	4293      	cmp	r3, r2
 80179ce:	d013      	beq.n	80179f8 <TIM_Base_SetConfig+0x40>
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80179d6:	d00f      	beq.n	80179f8 <TIM_Base_SetConfig+0x40>
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	4a3d      	ldr	r2, [pc, #244]	; (8017ad0 <TIM_Base_SetConfig+0x118>)
 80179dc:	4293      	cmp	r3, r2
 80179de:	d00b      	beq.n	80179f8 <TIM_Base_SetConfig+0x40>
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	4a3c      	ldr	r2, [pc, #240]	; (8017ad4 <TIM_Base_SetConfig+0x11c>)
 80179e4:	4293      	cmp	r3, r2
 80179e6:	d007      	beq.n	80179f8 <TIM_Base_SetConfig+0x40>
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	4a3b      	ldr	r2, [pc, #236]	; (8017ad8 <TIM_Base_SetConfig+0x120>)
 80179ec:	4293      	cmp	r3, r2
 80179ee:	d003      	beq.n	80179f8 <TIM_Base_SetConfig+0x40>
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	4a3a      	ldr	r2, [pc, #232]	; (8017adc <TIM_Base_SetConfig+0x124>)
 80179f4:	4293      	cmp	r3, r2
 80179f6:	d108      	bne.n	8017a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80179fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017a00:	683b      	ldr	r3, [r7, #0]
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	68fa      	ldr	r2, [r7, #12]
 8017a06:	4313      	orrs	r3, r2
 8017a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	4a2f      	ldr	r2, [pc, #188]	; (8017acc <TIM_Base_SetConfig+0x114>)
 8017a0e:	4293      	cmp	r3, r2
 8017a10:	d02b      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017a18:	d027      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	4a2c      	ldr	r2, [pc, #176]	; (8017ad0 <TIM_Base_SetConfig+0x118>)
 8017a1e:	4293      	cmp	r3, r2
 8017a20:	d023      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	4a2b      	ldr	r2, [pc, #172]	; (8017ad4 <TIM_Base_SetConfig+0x11c>)
 8017a26:	4293      	cmp	r3, r2
 8017a28:	d01f      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	4a2a      	ldr	r2, [pc, #168]	; (8017ad8 <TIM_Base_SetConfig+0x120>)
 8017a2e:	4293      	cmp	r3, r2
 8017a30:	d01b      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	4a29      	ldr	r2, [pc, #164]	; (8017adc <TIM_Base_SetConfig+0x124>)
 8017a36:	4293      	cmp	r3, r2
 8017a38:	d017      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	4a28      	ldr	r2, [pc, #160]	; (8017ae0 <TIM_Base_SetConfig+0x128>)
 8017a3e:	4293      	cmp	r3, r2
 8017a40:	d013      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	4a27      	ldr	r2, [pc, #156]	; (8017ae4 <TIM_Base_SetConfig+0x12c>)
 8017a46:	4293      	cmp	r3, r2
 8017a48:	d00f      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	4a26      	ldr	r2, [pc, #152]	; (8017ae8 <TIM_Base_SetConfig+0x130>)
 8017a4e:	4293      	cmp	r3, r2
 8017a50:	d00b      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	4a25      	ldr	r2, [pc, #148]	; (8017aec <TIM_Base_SetConfig+0x134>)
 8017a56:	4293      	cmp	r3, r2
 8017a58:	d007      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	4a24      	ldr	r2, [pc, #144]	; (8017af0 <TIM_Base_SetConfig+0x138>)
 8017a5e:	4293      	cmp	r3, r2
 8017a60:	d003      	beq.n	8017a6a <TIM_Base_SetConfig+0xb2>
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	4a23      	ldr	r2, [pc, #140]	; (8017af4 <TIM_Base_SetConfig+0x13c>)
 8017a66:	4293      	cmp	r3, r2
 8017a68:	d108      	bne.n	8017a7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017a72:	683b      	ldr	r3, [r7, #0]
 8017a74:	68db      	ldr	r3, [r3, #12]
 8017a76:	68fa      	ldr	r2, [r7, #12]
 8017a78:	4313      	orrs	r3, r2
 8017a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8017a82:	683b      	ldr	r3, [r7, #0]
 8017a84:	695b      	ldr	r3, [r3, #20]
 8017a86:	4313      	orrs	r3, r2
 8017a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	68fa      	ldr	r2, [r7, #12]
 8017a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017a90:	683b      	ldr	r3, [r7, #0]
 8017a92:	689a      	ldr	r2, [r3, #8]
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017a98:	683b      	ldr	r3, [r7, #0]
 8017a9a:	681a      	ldr	r2, [r3, #0]
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	4a0a      	ldr	r2, [pc, #40]	; (8017acc <TIM_Base_SetConfig+0x114>)
 8017aa4:	4293      	cmp	r3, r2
 8017aa6:	d003      	beq.n	8017ab0 <TIM_Base_SetConfig+0xf8>
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	4a0c      	ldr	r2, [pc, #48]	; (8017adc <TIM_Base_SetConfig+0x124>)
 8017aac:	4293      	cmp	r3, r2
 8017aae:	d103      	bne.n	8017ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	691a      	ldr	r2, [r3, #16]
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2201      	movs	r2, #1
 8017abc:	615a      	str	r2, [r3, #20]
}
 8017abe:	bf00      	nop
 8017ac0:	3714      	adds	r7, #20
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac8:	4770      	bx	lr
 8017aca:	bf00      	nop
 8017acc:	40010000 	.word	0x40010000
 8017ad0:	40000400 	.word	0x40000400
 8017ad4:	40000800 	.word	0x40000800
 8017ad8:	40000c00 	.word	0x40000c00
 8017adc:	40010400 	.word	0x40010400
 8017ae0:	40014000 	.word	0x40014000
 8017ae4:	40014400 	.word	0x40014400
 8017ae8:	40014800 	.word	0x40014800
 8017aec:	40001800 	.word	0x40001800
 8017af0:	40001c00 	.word	0x40001c00
 8017af4:	40002000 	.word	0x40002000

08017af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017af8:	b480      	push	{r7}
 8017afa:	b087      	sub	sp, #28
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	60f8      	str	r0, [r7, #12]
 8017b00:	60b9      	str	r1, [r7, #8]
 8017b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	6a1b      	ldr	r3, [r3, #32]
 8017b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	6a1b      	ldr	r3, [r3, #32]
 8017b0e:	f023 0201 	bic.w	r2, r3, #1
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	699b      	ldr	r3, [r3, #24]
 8017b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017b1c:	693b      	ldr	r3, [r7, #16]
 8017b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	011b      	lsls	r3, r3, #4
 8017b28:	693a      	ldr	r2, [r7, #16]
 8017b2a:	4313      	orrs	r3, r2
 8017b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017b2e:	697b      	ldr	r3, [r7, #20]
 8017b30:	f023 030a 	bic.w	r3, r3, #10
 8017b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017b36:	697a      	ldr	r2, [r7, #20]
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	4313      	orrs	r3, r2
 8017b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	693a      	ldr	r2, [r7, #16]
 8017b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	697a      	ldr	r2, [r7, #20]
 8017b48:	621a      	str	r2, [r3, #32]
}
 8017b4a:	bf00      	nop
 8017b4c:	371c      	adds	r7, #28
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b54:	4770      	bx	lr

08017b56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017b56:	b480      	push	{r7}
 8017b58:	b087      	sub	sp, #28
 8017b5a:	af00      	add	r7, sp, #0
 8017b5c:	60f8      	str	r0, [r7, #12]
 8017b5e:	60b9      	str	r1, [r7, #8]
 8017b60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	6a1b      	ldr	r3, [r3, #32]
 8017b66:	f023 0210 	bic.w	r2, r3, #16
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	699b      	ldr	r3, [r3, #24]
 8017b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	6a1b      	ldr	r3, [r3, #32]
 8017b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017b7a:	697b      	ldr	r3, [r7, #20]
 8017b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8017b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	031b      	lsls	r3, r3, #12
 8017b86:	697a      	ldr	r2, [r7, #20]
 8017b88:	4313      	orrs	r3, r2
 8017b8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017b8c:	693b      	ldr	r3, [r7, #16]
 8017b8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8017b92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017b94:	68bb      	ldr	r3, [r7, #8]
 8017b96:	011b      	lsls	r3, r3, #4
 8017b98:	693a      	ldr	r2, [r7, #16]
 8017b9a:	4313      	orrs	r3, r2
 8017b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	697a      	ldr	r2, [r7, #20]
 8017ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	693a      	ldr	r2, [r7, #16]
 8017ba8:	621a      	str	r2, [r3, #32]
}
 8017baa:	bf00      	nop
 8017bac:	371c      	adds	r7, #28
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb4:	4770      	bx	lr

08017bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017bb6:	b480      	push	{r7}
 8017bb8:	b085      	sub	sp, #20
 8017bba:	af00      	add	r7, sp, #0
 8017bbc:	6078      	str	r0, [r7, #4]
 8017bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	689b      	ldr	r3, [r3, #8]
 8017bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017bce:	683a      	ldr	r2, [r7, #0]
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	4313      	orrs	r3, r2
 8017bd4:	f043 0307 	orr.w	r3, r3, #7
 8017bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	68fa      	ldr	r2, [r7, #12]
 8017bde:	609a      	str	r2, [r3, #8]
}
 8017be0:	bf00      	nop
 8017be2:	3714      	adds	r7, #20
 8017be4:	46bd      	mov	sp, r7
 8017be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bea:	4770      	bx	lr

08017bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017bec:	b480      	push	{r7}
 8017bee:	b087      	sub	sp, #28
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	60f8      	str	r0, [r7, #12]
 8017bf4:	60b9      	str	r1, [r7, #8]
 8017bf6:	607a      	str	r2, [r7, #4]
 8017bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	689b      	ldr	r3, [r3, #8]
 8017bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017c00:	697b      	ldr	r3, [r7, #20]
 8017c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8017c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017c08:	683b      	ldr	r3, [r7, #0]
 8017c0a:	021a      	lsls	r2, r3, #8
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	431a      	orrs	r2, r3
 8017c10:	68bb      	ldr	r3, [r7, #8]
 8017c12:	4313      	orrs	r3, r2
 8017c14:	697a      	ldr	r2, [r7, #20]
 8017c16:	4313      	orrs	r3, r2
 8017c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	697a      	ldr	r2, [r7, #20]
 8017c1e:	609a      	str	r2, [r3, #8]
}
 8017c20:	bf00      	nop
 8017c22:	371c      	adds	r7, #28
 8017c24:	46bd      	mov	sp, r7
 8017c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2a:	4770      	bx	lr

08017c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017c2c:	b480      	push	{r7}
 8017c2e:	b085      	sub	sp, #20
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
 8017c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017c3c:	2b01      	cmp	r3, #1
 8017c3e:	d101      	bne.n	8017c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017c40:	2302      	movs	r3, #2
 8017c42:	e05a      	b.n	8017cfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	2201      	movs	r2, #1
 8017c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	2202      	movs	r2, #2
 8017c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	685b      	ldr	r3, [r3, #4]
 8017c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	689b      	ldr	r3, [r3, #8]
 8017c62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017c6c:	683b      	ldr	r3, [r7, #0]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	68fa      	ldr	r2, [r7, #12]
 8017c72:	4313      	orrs	r3, r2
 8017c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	68fa      	ldr	r2, [r7, #12]
 8017c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	4a21      	ldr	r2, [pc, #132]	; (8017d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8017c84:	4293      	cmp	r3, r2
 8017c86:	d022      	beq.n	8017cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017c90:	d01d      	beq.n	8017cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	4a1d      	ldr	r2, [pc, #116]	; (8017d0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8017c98:	4293      	cmp	r3, r2
 8017c9a:	d018      	beq.n	8017cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	4a1b      	ldr	r2, [pc, #108]	; (8017d10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8017ca2:	4293      	cmp	r3, r2
 8017ca4:	d013      	beq.n	8017cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	4a1a      	ldr	r2, [pc, #104]	; (8017d14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8017cac:	4293      	cmp	r3, r2
 8017cae:	d00e      	beq.n	8017cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	4a18      	ldr	r2, [pc, #96]	; (8017d18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8017cb6:	4293      	cmp	r3, r2
 8017cb8:	d009      	beq.n	8017cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	4a17      	ldr	r2, [pc, #92]	; (8017d1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8017cc0:	4293      	cmp	r3, r2
 8017cc2:	d004      	beq.n	8017cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	4a15      	ldr	r2, [pc, #84]	; (8017d20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8017cca:	4293      	cmp	r3, r2
 8017ccc:	d10c      	bne.n	8017ce8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017cce:	68bb      	ldr	r3, [r7, #8]
 8017cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017cd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017cd6:	683b      	ldr	r3, [r7, #0]
 8017cd8:	685b      	ldr	r3, [r3, #4]
 8017cda:	68ba      	ldr	r2, [r7, #8]
 8017cdc:	4313      	orrs	r3, r2
 8017cde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	68ba      	ldr	r2, [r7, #8]
 8017ce6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	2201      	movs	r2, #1
 8017cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017cf8:	2300      	movs	r3, #0
}
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	3714      	adds	r7, #20
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d04:	4770      	bx	lr
 8017d06:	bf00      	nop
 8017d08:	40010000 	.word	0x40010000
 8017d0c:	40000400 	.word	0x40000400
 8017d10:	40000800 	.word	0x40000800
 8017d14:	40000c00 	.word	0x40000c00
 8017d18:	40010400 	.word	0x40010400
 8017d1c:	40014000 	.word	0x40014000
 8017d20:	40001800 	.word	0x40001800

08017d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017d24:	b480      	push	{r7}
 8017d26:	b083      	sub	sp, #12
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017d2c:	bf00      	nop
 8017d2e:	370c      	adds	r7, #12
 8017d30:	46bd      	mov	sp, r7
 8017d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d36:	4770      	bx	lr

08017d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017d38:	b480      	push	{r7}
 8017d3a:	b083      	sub	sp, #12
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017d40:	bf00      	nop
 8017d42:	370c      	adds	r7, #12
 8017d44:	46bd      	mov	sp, r7
 8017d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d4a:	4770      	bx	lr

08017d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b082      	sub	sp, #8
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d101      	bne.n	8017d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017d5a:	2301      	movs	r3, #1
 8017d5c:	e03f      	b.n	8017dde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017d64:	b2db      	uxtb	r3, r3
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d106      	bne.n	8017d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017d72:	6878      	ldr	r0, [r7, #4]
 8017d74:	f7fa f846 	bl	8011e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	2224      	movs	r2, #36	; 0x24
 8017d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	68da      	ldr	r2, [r3, #12]
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8017d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8017d90:	6878      	ldr	r0, [r7, #4]
 8017d92:	f000 fef9 	bl	8018b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	691a      	ldr	r2, [r3, #16]
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8017da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	695a      	ldr	r2, [r3, #20]
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8017db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	68da      	ldr	r2, [r3, #12]
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8017dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	2200      	movs	r2, #0
 8017dca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	2220      	movs	r2, #32
 8017dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	2220      	movs	r2, #32
 8017dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8017ddc:	2300      	movs	r3, #0
}
 8017dde:	4618      	mov	r0, r3
 8017de0:	3708      	adds	r7, #8
 8017de2:	46bd      	mov	sp, r7
 8017de4:	bd80      	pop	{r7, pc}

08017de6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017de6:	b580      	push	{r7, lr}
 8017de8:	b08a      	sub	sp, #40	; 0x28
 8017dea:	af02      	add	r7, sp, #8
 8017dec:	60f8      	str	r0, [r7, #12]
 8017dee:	60b9      	str	r1, [r7, #8]
 8017df0:	603b      	str	r3, [r7, #0]
 8017df2:	4613      	mov	r3, r2
 8017df4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8017df6:	2300      	movs	r3, #0
 8017df8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017e00:	b2db      	uxtb	r3, r3
 8017e02:	2b20      	cmp	r3, #32
 8017e04:	d17c      	bne.n	8017f00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017e06:	68bb      	ldr	r3, [r7, #8]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d002      	beq.n	8017e12 <HAL_UART_Transmit+0x2c>
 8017e0c:	88fb      	ldrh	r3, [r7, #6]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d101      	bne.n	8017e16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8017e12:	2301      	movs	r3, #1
 8017e14:	e075      	b.n	8017f02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017e1c:	2b01      	cmp	r3, #1
 8017e1e:	d101      	bne.n	8017e24 <HAL_UART_Transmit+0x3e>
 8017e20:	2302      	movs	r3, #2
 8017e22:	e06e      	b.n	8017f02 <HAL_UART_Transmit+0x11c>
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	2201      	movs	r2, #1
 8017e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	2221      	movs	r2, #33	; 0x21
 8017e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017e3a:	f7fa fad7 	bl	80123ec <HAL_GetTick>
 8017e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	88fa      	ldrh	r2, [r7, #6]
 8017e44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	88fa      	ldrh	r2, [r7, #6]
 8017e4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	689b      	ldr	r3, [r3, #8]
 8017e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017e54:	d108      	bne.n	8017e68 <HAL_UART_Transmit+0x82>
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	691b      	ldr	r3, [r3, #16]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d104      	bne.n	8017e68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8017e5e:	2300      	movs	r3, #0
 8017e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8017e62:	68bb      	ldr	r3, [r7, #8]
 8017e64:	61bb      	str	r3, [r7, #24]
 8017e66:	e003      	b.n	8017e70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8017e68:	68bb      	ldr	r3, [r7, #8]
 8017e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	2200      	movs	r2, #0
 8017e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8017e78:	e02a      	b.n	8017ed0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017e7a:	683b      	ldr	r3, [r7, #0]
 8017e7c:	9300      	str	r3, [sp, #0]
 8017e7e:	697b      	ldr	r3, [r7, #20]
 8017e80:	2200      	movs	r2, #0
 8017e82:	2180      	movs	r1, #128	; 0x80
 8017e84:	68f8      	ldr	r0, [r7, #12]
 8017e86:	f000 fc77 	bl	8018778 <UART_WaitOnFlagUntilTimeout>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d001      	beq.n	8017e94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8017e90:	2303      	movs	r3, #3
 8017e92:	e036      	b.n	8017f02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8017e94:	69fb      	ldr	r3, [r7, #28]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d10b      	bne.n	8017eb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017e9a:	69bb      	ldr	r3, [r7, #24]
 8017e9c:	881b      	ldrh	r3, [r3, #0]
 8017e9e:	461a      	mov	r2, r3
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017ea8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8017eaa:	69bb      	ldr	r3, [r7, #24]
 8017eac:	3302      	adds	r3, #2
 8017eae:	61bb      	str	r3, [r7, #24]
 8017eb0:	e007      	b.n	8017ec2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	781a      	ldrb	r2, [r3, #0]
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8017ebc:	69fb      	ldr	r3, [r7, #28]
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017ec6:	b29b      	uxth	r3, r3
 8017ec8:	3b01      	subs	r3, #1
 8017eca:	b29a      	uxth	r2, r3
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017ed4:	b29b      	uxth	r3, r3
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d1cf      	bne.n	8017e7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	9300      	str	r3, [sp, #0]
 8017ede:	697b      	ldr	r3, [r7, #20]
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	2140      	movs	r1, #64	; 0x40
 8017ee4:	68f8      	ldr	r0, [r7, #12]
 8017ee6:	f000 fc47 	bl	8018778 <UART_WaitOnFlagUntilTimeout>
 8017eea:	4603      	mov	r3, r0
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d001      	beq.n	8017ef4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8017ef0:	2303      	movs	r3, #3
 8017ef2:	e006      	b.n	8017f02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	2220      	movs	r2, #32
 8017ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8017efc:	2300      	movs	r3, #0
 8017efe:	e000      	b.n	8017f02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8017f00:	2302      	movs	r3, #2
  }
}
 8017f02:	4618      	mov	r0, r3
 8017f04:	3720      	adds	r7, #32
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd80      	pop	{r7, pc}

08017f0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017f0a:	b580      	push	{r7, lr}
 8017f0c:	b08a      	sub	sp, #40	; 0x28
 8017f0e:	af02      	add	r7, sp, #8
 8017f10:	60f8      	str	r0, [r7, #12]
 8017f12:	60b9      	str	r1, [r7, #8]
 8017f14:	603b      	str	r3, [r7, #0]
 8017f16:	4613      	mov	r3, r2
 8017f18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017f24:	b2db      	uxtb	r3, r3
 8017f26:	2b20      	cmp	r3, #32
 8017f28:	f040 808c 	bne.w	8018044 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017f2c:	68bb      	ldr	r3, [r7, #8]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d002      	beq.n	8017f38 <HAL_UART_Receive+0x2e>
 8017f32:	88fb      	ldrh	r3, [r7, #6]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d101      	bne.n	8017f3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8017f38:	2301      	movs	r3, #1
 8017f3a:	e084      	b.n	8018046 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017f42:	2b01      	cmp	r3, #1
 8017f44:	d101      	bne.n	8017f4a <HAL_UART_Receive+0x40>
 8017f46:	2302      	movs	r3, #2
 8017f48:	e07d      	b.n	8018046 <HAL_UART_Receive+0x13c>
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	2200      	movs	r2, #0
 8017f56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	2222      	movs	r2, #34	; 0x22
 8017f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	2200      	movs	r2, #0
 8017f64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017f66:	f7fa fa41 	bl	80123ec <HAL_GetTick>
 8017f6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	88fa      	ldrh	r2, [r7, #6]
 8017f70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	88fa      	ldrh	r2, [r7, #6]
 8017f76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	689b      	ldr	r3, [r3, #8]
 8017f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f80:	d108      	bne.n	8017f94 <HAL_UART_Receive+0x8a>
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	691b      	ldr	r3, [r3, #16]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d104      	bne.n	8017f94 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8017f8e:	68bb      	ldr	r3, [r7, #8]
 8017f90:	61bb      	str	r3, [r7, #24]
 8017f92:	e003      	b.n	8017f9c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017f98:	2300      	movs	r3, #0
 8017f9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8017fa4:	e043      	b.n	801802e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8017fa6:	683b      	ldr	r3, [r7, #0]
 8017fa8:	9300      	str	r3, [sp, #0]
 8017faa:	697b      	ldr	r3, [r7, #20]
 8017fac:	2200      	movs	r2, #0
 8017fae:	2120      	movs	r1, #32
 8017fb0:	68f8      	ldr	r0, [r7, #12]
 8017fb2:	f000 fbe1 	bl	8018778 <UART_WaitOnFlagUntilTimeout>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d001      	beq.n	8017fc0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8017fbc:	2303      	movs	r3, #3
 8017fbe:	e042      	b.n	8018046 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8017fc0:	69fb      	ldr	r3, [r7, #28]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d10c      	bne.n	8017fe0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	685b      	ldr	r3, [r3, #4]
 8017fcc:	b29b      	uxth	r3, r3
 8017fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017fd2:	b29a      	uxth	r2, r3
 8017fd4:	69bb      	ldr	r3, [r7, #24]
 8017fd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8017fd8:	69bb      	ldr	r3, [r7, #24]
 8017fda:	3302      	adds	r3, #2
 8017fdc:	61bb      	str	r3, [r7, #24]
 8017fde:	e01f      	b.n	8018020 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	689b      	ldr	r3, [r3, #8]
 8017fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017fe8:	d007      	beq.n	8017ffa <HAL_UART_Receive+0xf0>
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	689b      	ldr	r3, [r3, #8]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d10a      	bne.n	8018008 <HAL_UART_Receive+0xfe>
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	691b      	ldr	r3, [r3, #16]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d106      	bne.n	8018008 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	685b      	ldr	r3, [r3, #4]
 8018000:	b2da      	uxtb	r2, r3
 8018002:	69fb      	ldr	r3, [r7, #28]
 8018004:	701a      	strb	r2, [r3, #0]
 8018006:	e008      	b.n	801801a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	685b      	ldr	r3, [r3, #4]
 801800e:	b2db      	uxtb	r3, r3
 8018010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018014:	b2da      	uxtb	r2, r3
 8018016:	69fb      	ldr	r3, [r7, #28]
 8018018:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 801801a:	69fb      	ldr	r3, [r7, #28]
 801801c:	3301      	adds	r3, #1
 801801e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018024:	b29b      	uxth	r3, r3
 8018026:	3b01      	subs	r3, #1
 8018028:	b29a      	uxth	r2, r3
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018032:	b29b      	uxth	r3, r3
 8018034:	2b00      	cmp	r3, #0
 8018036:	d1b6      	bne.n	8017fa6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	2220      	movs	r2, #32
 801803c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8018040:	2300      	movs	r3, #0
 8018042:	e000      	b.n	8018046 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8018044:	2302      	movs	r3, #2
  }
}
 8018046:	4618      	mov	r0, r3
 8018048:	3720      	adds	r7, #32
 801804a:	46bd      	mov	sp, r7
 801804c:	bd80      	pop	{r7, pc}

0801804e <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 801804e:	b580      	push	{r7, lr}
 8018050:	b088      	sub	sp, #32
 8018052:	af00      	add	r7, sp, #0
 8018054:	60f8      	str	r0, [r7, #12]
 8018056:	60b9      	str	r1, [r7, #8]
 8018058:	603b      	str	r3, [r7, #0]
 801805a:	4613      	mov	r3, r2
 801805c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018064:	b2db      	uxtb	r3, r3
 8018066:	2b20      	cmp	r3, #32
 8018068:	f040 80c9 	bne.w	80181fe <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 801806c:	68bb      	ldr	r3, [r7, #8]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d002      	beq.n	8018078 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8018072:	88fb      	ldrh	r3, [r7, #6]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d101      	bne.n	801807c <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8018078:	2301      	movs	r3, #1
 801807a:	e0c1      	b.n	8018200 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018082:	2b01      	cmp	r3, #1
 8018084:	d101      	bne.n	801808a <HAL_UARTEx_ReceiveToIdle+0x3c>
 8018086:	2302      	movs	r3, #2
 8018088:	e0ba      	b.n	8018200 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	2201      	movs	r2, #1
 801808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	2200      	movs	r2, #0
 8018096:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	2222      	movs	r2, #34	; 0x22
 801809c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	2201      	movs	r2, #1
 80180a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80180a6:	f7fa f9a1 	bl	80123ec <HAL_GetTick>
 80180aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	88fa      	ldrh	r2, [r7, #6]
 80180b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	88fa      	ldrh	r2, [r7, #6]
 80180b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	689b      	ldr	r3, [r3, #8]
 80180bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80180c0:	d108      	bne.n	80180d4 <HAL_UARTEx_ReceiveToIdle+0x86>
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	691b      	ldr	r3, [r3, #16]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d104      	bne.n	80180d4 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 80180ca:	2300      	movs	r3, #0
 80180cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80180ce:	68bb      	ldr	r3, [r7, #8]
 80180d0:	61bb      	str	r3, [r7, #24]
 80180d2:	e003      	b.n	80180dc <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 80180d4:	68bb      	ldr	r3, [r7, #8]
 80180d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80180d8:	2300      	movs	r3, #0
 80180da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	2200      	movs	r2, #0
 80180e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	2200      	movs	r2, #0
 80180e8:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80180ea:	e074      	b.n	80181d6 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	f003 0310 	and.w	r3, r3, #16
 80180f6:	2b10      	cmp	r3, #16
 80180f8:	d114      	bne.n	8018124 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80180fa:	2300      	movs	r3, #0
 80180fc:	613b      	str	r3, [r7, #16]
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	613b      	str	r3, [r7, #16]
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	685b      	ldr	r3, [r3, #4]
 801810c:	613b      	str	r3, [r7, #16]
 801810e:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8018110:	683b      	ldr	r3, [r7, #0]
 8018112:	881b      	ldrh	r3, [r3, #0]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d005      	beq.n	8018124 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	2220      	movs	r2, #32
 801811c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 8018120:	2300      	movs	r3, #0
 8018122:	e06d      	b.n	8018200 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	f003 0320 	and.w	r3, r3, #32
 801812e:	2b20      	cmp	r3, #32
 8018130:	d13c      	bne.n	80181ac <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 8018132:	69fb      	ldr	r3, [r7, #28]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d10c      	bne.n	8018152 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	685b      	ldr	r3, [r3, #4]
 801813e:	b29b      	uxth	r3, r3
 8018140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018144:	b29a      	uxth	r2, r3
 8018146:	69bb      	ldr	r3, [r7, #24]
 8018148:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 801814a:	69bb      	ldr	r3, [r7, #24]
 801814c:	3302      	adds	r3, #2
 801814e:	61bb      	str	r3, [r7, #24]
 8018150:	e01f      	b.n	8018192 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	689b      	ldr	r3, [r3, #8]
 8018156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801815a:	d007      	beq.n	801816c <HAL_UARTEx_ReceiveToIdle+0x11e>
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	689b      	ldr	r3, [r3, #8]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d10a      	bne.n	801817a <HAL_UARTEx_ReceiveToIdle+0x12c>
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	691b      	ldr	r3, [r3, #16]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d106      	bne.n	801817a <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	685b      	ldr	r3, [r3, #4]
 8018172:	b2da      	uxtb	r2, r3
 8018174:	69fb      	ldr	r3, [r7, #28]
 8018176:	701a      	strb	r2, [r3, #0]
 8018178:	e008      	b.n	801818c <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	685b      	ldr	r3, [r3, #4]
 8018180:	b2db      	uxtb	r3, r3
 8018182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018186:	b2da      	uxtb	r2, r3
 8018188:	69fb      	ldr	r3, [r7, #28]
 801818a:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 801818c:	69fb      	ldr	r3, [r7, #28]
 801818e:	3301      	adds	r3, #1
 8018190:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8018192:	683b      	ldr	r3, [r7, #0]
 8018194:	881b      	ldrh	r3, [r3, #0]
 8018196:	3301      	adds	r3, #1
 8018198:	b29a      	uxth	r2, r3
 801819a:	683b      	ldr	r3, [r7, #0]
 801819c:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80181a2:	b29b      	uxth	r3, r3
 80181a4:	3b01      	subs	r3, #1
 80181a6:	b29a      	uxth	r2, r3
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80181ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181b2:	d010      	beq.n	80181d6 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80181b4:	f7fa f91a 	bl	80123ec <HAL_GetTick>
 80181b8:	4602      	mov	r2, r0
 80181ba:	697b      	ldr	r3, [r7, #20]
 80181bc:	1ad3      	subs	r3, r2, r3
 80181be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80181c0:	429a      	cmp	r2, r3
 80181c2:	d302      	bcc.n	80181ca <HAL_UARTEx_ReceiveToIdle+0x17c>
 80181c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d105      	bne.n	80181d6 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	2220      	movs	r2, #32
 80181ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 80181d2:	2303      	movs	r3, #3
 80181d4:	e014      	b.n	8018200 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80181da:	b29b      	uxth	r3, r3
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d185      	bne.n	80180ec <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80181e8:	b29b      	uxth	r3, r3
 80181ea:	1ad3      	subs	r3, r2, r3
 80181ec:	b29a      	uxth	r2, r3
 80181ee:	683b      	ldr	r3, [r7, #0]
 80181f0:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	2220      	movs	r2, #32
 80181f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80181fa:	2300      	movs	r3, #0
 80181fc:	e000      	b.n	8018200 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 80181fe:	2302      	movs	r3, #2
  }
}
 8018200:	4618      	mov	r0, r3
 8018202:	3720      	adds	r7, #32
 8018204:	46bd      	mov	sp, r7
 8018206:	bd80      	pop	{r7, pc}

08018208 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b0ba      	sub	sp, #232	; 0xe8
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	68db      	ldr	r3, [r3, #12]
 8018220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	695b      	ldr	r3, [r3, #20]
 801822a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801822e:	2300      	movs	r3, #0
 8018230:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8018234:	2300      	movs	r3, #0
 8018236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801823a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801823e:	f003 030f 	and.w	r3, r3, #15
 8018242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8018246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801824a:	2b00      	cmp	r3, #0
 801824c:	d10f      	bne.n	801826e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801824e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018252:	f003 0320 	and.w	r3, r3, #32
 8018256:	2b00      	cmp	r3, #0
 8018258:	d009      	beq.n	801826e <HAL_UART_IRQHandler+0x66>
 801825a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801825e:	f003 0320 	and.w	r3, r3, #32
 8018262:	2b00      	cmp	r3, #0
 8018264:	d003      	beq.n	801826e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	f000 fbd3 	bl	8018a12 <UART_Receive_IT>
      return;
 801826c:	e256      	b.n	801871c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801826e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018272:	2b00      	cmp	r3, #0
 8018274:	f000 80de 	beq.w	8018434 <HAL_UART_IRQHandler+0x22c>
 8018278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801827c:	f003 0301 	and.w	r3, r3, #1
 8018280:	2b00      	cmp	r3, #0
 8018282:	d106      	bne.n	8018292 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8018284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018288:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801828c:	2b00      	cmp	r3, #0
 801828e:	f000 80d1 	beq.w	8018434 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8018292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018296:	f003 0301 	and.w	r3, r3, #1
 801829a:	2b00      	cmp	r3, #0
 801829c:	d00b      	beq.n	80182b6 <HAL_UART_IRQHandler+0xae>
 801829e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80182a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d005      	beq.n	80182b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182ae:	f043 0201 	orr.w	r2, r3, #1
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80182b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80182ba:	f003 0304 	and.w	r3, r3, #4
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d00b      	beq.n	80182da <HAL_UART_IRQHandler+0xd2>
 80182c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80182c6:	f003 0301 	and.w	r3, r3, #1
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d005      	beq.n	80182da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182d2:	f043 0202 	orr.w	r2, r3, #2
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80182da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80182de:	f003 0302 	and.w	r3, r3, #2
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d00b      	beq.n	80182fe <HAL_UART_IRQHandler+0xf6>
 80182e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80182ea:	f003 0301 	and.w	r3, r3, #1
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d005      	beq.n	80182fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182f6:	f043 0204 	orr.w	r2, r3, #4
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80182fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018302:	f003 0308 	and.w	r3, r3, #8
 8018306:	2b00      	cmp	r3, #0
 8018308:	d011      	beq.n	801832e <HAL_UART_IRQHandler+0x126>
 801830a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801830e:	f003 0320 	and.w	r3, r3, #32
 8018312:	2b00      	cmp	r3, #0
 8018314:	d105      	bne.n	8018322 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8018316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801831a:	f003 0301 	and.w	r3, r3, #1
 801831e:	2b00      	cmp	r3, #0
 8018320:	d005      	beq.n	801832e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018326:	f043 0208 	orr.w	r2, r3, #8
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018332:	2b00      	cmp	r3, #0
 8018334:	f000 81ed 	beq.w	8018712 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8018338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801833c:	f003 0320 	and.w	r3, r3, #32
 8018340:	2b00      	cmp	r3, #0
 8018342:	d008      	beq.n	8018356 <HAL_UART_IRQHandler+0x14e>
 8018344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018348:	f003 0320 	and.w	r3, r3, #32
 801834c:	2b00      	cmp	r3, #0
 801834e:	d002      	beq.n	8018356 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8018350:	6878      	ldr	r0, [r7, #4]
 8018352:	f000 fb5e 	bl	8018a12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	695b      	ldr	r3, [r3, #20]
 801835c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018360:	2b40      	cmp	r3, #64	; 0x40
 8018362:	bf0c      	ite	eq
 8018364:	2301      	moveq	r3, #1
 8018366:	2300      	movne	r3, #0
 8018368:	b2db      	uxtb	r3, r3
 801836a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018372:	f003 0308 	and.w	r3, r3, #8
 8018376:	2b00      	cmp	r3, #0
 8018378:	d103      	bne.n	8018382 <HAL_UART_IRQHandler+0x17a>
 801837a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801837e:	2b00      	cmp	r3, #0
 8018380:	d04f      	beq.n	8018422 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8018382:	6878      	ldr	r0, [r7, #4]
 8018384:	f000 fa66 	bl	8018854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	695b      	ldr	r3, [r3, #20]
 801838e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018392:	2b40      	cmp	r3, #64	; 0x40
 8018394:	d141      	bne.n	801841a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	3314      	adds	r3, #20
 801839c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80183a4:	e853 3f00 	ldrex	r3, [r3]
 80183a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80183ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80183b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80183b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	3314      	adds	r3, #20
 80183be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80183c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80183c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80183ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80183d2:	e841 2300 	strex	r3, r2, [r1]
 80183d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80183da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d1d9      	bne.n	8018396 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d013      	beq.n	8018412 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183ee:	4a7d      	ldr	r2, [pc, #500]	; (80185e4 <HAL_UART_IRQHandler+0x3dc>)
 80183f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7fa fe98 	bl	801312c <HAL_DMA_Abort_IT>
 80183fc:	4603      	mov	r3, r0
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d016      	beq.n	8018430 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018408:	687a      	ldr	r2, [r7, #4]
 801840a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801840c:	4610      	mov	r0, r2
 801840e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018410:	e00e      	b.n	8018430 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018412:	6878      	ldr	r0, [r7, #4]
 8018414:	f000 f99a 	bl	801874c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018418:	e00a      	b.n	8018430 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801841a:	6878      	ldr	r0, [r7, #4]
 801841c:	f000 f996 	bl	801874c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018420:	e006      	b.n	8018430 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018422:	6878      	ldr	r0, [r7, #4]
 8018424:	f000 f992 	bl	801874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	2200      	movs	r2, #0
 801842c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801842e:	e170      	b.n	8018712 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018430:	bf00      	nop
    return;
 8018432:	e16e      	b.n	8018712 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018438:	2b01      	cmp	r3, #1
 801843a:	f040 814a 	bne.w	80186d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801843e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018442:	f003 0310 	and.w	r3, r3, #16
 8018446:	2b00      	cmp	r3, #0
 8018448:	f000 8143 	beq.w	80186d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801844c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018450:	f003 0310 	and.w	r3, r3, #16
 8018454:	2b00      	cmp	r3, #0
 8018456:	f000 813c 	beq.w	80186d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801845a:	2300      	movs	r3, #0
 801845c:	60bb      	str	r3, [r7, #8]
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	60bb      	str	r3, [r7, #8]
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	685b      	ldr	r3, [r3, #4]
 801846c:	60bb      	str	r3, [r7, #8]
 801846e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	695b      	ldr	r3, [r3, #20]
 8018476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801847a:	2b40      	cmp	r3, #64	; 0x40
 801847c:	f040 80b4 	bne.w	80185e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	685b      	ldr	r3, [r3, #4]
 8018488:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801848c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8018490:	2b00      	cmp	r3, #0
 8018492:	f000 8140 	beq.w	8018716 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801849a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801849e:	429a      	cmp	r2, r3
 80184a0:	f080 8139 	bcs.w	8018716 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80184aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184b0:	69db      	ldr	r3, [r3, #28]
 80184b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80184b6:	f000 8088 	beq.w	80185ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	330c      	adds	r3, #12
 80184c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80184c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80184c8:	e853 3f00 	ldrex	r3, [r3]
 80184cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80184d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80184d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80184d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	330c      	adds	r3, #12
 80184e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80184e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80184ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80184f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80184f6:	e841 2300 	strex	r3, r2, [r1]
 80184fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80184fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018502:	2b00      	cmp	r3, #0
 8018504:	d1d9      	bne.n	80184ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	3314      	adds	r3, #20
 801850c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801850e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018510:	e853 3f00 	ldrex	r3, [r3]
 8018514:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8018516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018518:	f023 0301 	bic.w	r3, r3, #1
 801851c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	3314      	adds	r3, #20
 8018526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801852a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801852e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018530:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8018532:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018536:	e841 2300 	strex	r3, r2, [r1]
 801853a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801853c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801853e:	2b00      	cmp	r3, #0
 8018540:	d1e1      	bne.n	8018506 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	3314      	adds	r3, #20
 8018548:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801854a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801854c:	e853 3f00 	ldrex	r3, [r3]
 8018550:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8018552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	3314      	adds	r3, #20
 8018562:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8018566:	66fa      	str	r2, [r7, #108]	; 0x6c
 8018568:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801856a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801856c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801856e:	e841 2300 	strex	r3, r2, [r1]
 8018572:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8018574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018576:	2b00      	cmp	r3, #0
 8018578:	d1e3      	bne.n	8018542 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	2220      	movs	r2, #32
 801857e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	2200      	movs	r2, #0
 8018586:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	330c      	adds	r3, #12
 801858e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018592:	e853 3f00 	ldrex	r3, [r3]
 8018596:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8018598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801859a:	f023 0310 	bic.w	r3, r3, #16
 801859e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	330c      	adds	r3, #12
 80185a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80185ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80185ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80185b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80185b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80185b4:	e841 2300 	strex	r3, r2, [r1]
 80185b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80185ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d1e3      	bne.n	8018588 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185c4:	4618      	mov	r0, r3
 80185c6:	f7fa fd41 	bl	801304c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80185d2:	b29b      	uxth	r3, r3
 80185d4:	1ad3      	subs	r3, r2, r3
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	4619      	mov	r1, r3
 80185da:	6878      	ldr	r0, [r7, #4]
 80185dc:	f000 f8c0 	bl	8018760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80185e0:	e099      	b.n	8018716 <HAL_UART_IRQHandler+0x50e>
 80185e2:	bf00      	nop
 80185e4:	0801891b 	.word	0x0801891b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80185f0:	b29b      	uxth	r3, r3
 80185f2:	1ad3      	subs	r3, r2, r3
 80185f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	2b00      	cmp	r3, #0
 8018600:	f000 808b 	beq.w	801871a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8018604:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8018608:	2b00      	cmp	r3, #0
 801860a:	f000 8086 	beq.w	801871a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	330c      	adds	r3, #12
 8018614:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018618:	e853 3f00 	ldrex	r3, [r3]
 801861c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801861e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018624:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	330c      	adds	r3, #12
 801862e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8018632:	647a      	str	r2, [r7, #68]	; 0x44
 8018634:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018636:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801863a:	e841 2300 	strex	r3, r2, [r1]
 801863e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018642:	2b00      	cmp	r3, #0
 8018644:	d1e3      	bne.n	801860e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	3314      	adds	r3, #20
 801864c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018650:	e853 3f00 	ldrex	r3, [r3]
 8018654:	623b      	str	r3, [r7, #32]
   return(result);
 8018656:	6a3b      	ldr	r3, [r7, #32]
 8018658:	f023 0301 	bic.w	r3, r3, #1
 801865c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	3314      	adds	r3, #20
 8018666:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801866a:	633a      	str	r2, [r7, #48]	; 0x30
 801866c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801866e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018672:	e841 2300 	strex	r3, r2, [r1]
 8018676:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801867a:	2b00      	cmp	r3, #0
 801867c:	d1e3      	bne.n	8018646 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	2220      	movs	r2, #32
 8018682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	2200      	movs	r2, #0
 801868a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	330c      	adds	r3, #12
 8018692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018694:	693b      	ldr	r3, [r7, #16]
 8018696:	e853 3f00 	ldrex	r3, [r3]
 801869a:	60fb      	str	r3, [r7, #12]
   return(result);
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	f023 0310 	bic.w	r3, r3, #16
 80186a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	330c      	adds	r3, #12
 80186ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80186b0:	61fa      	str	r2, [r7, #28]
 80186b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186b4:	69b9      	ldr	r1, [r7, #24]
 80186b6:	69fa      	ldr	r2, [r7, #28]
 80186b8:	e841 2300 	strex	r3, r2, [r1]
 80186bc:	617b      	str	r3, [r7, #20]
   return(result);
 80186be:	697b      	ldr	r3, [r7, #20]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d1e3      	bne.n	801868c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80186c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80186c8:	4619      	mov	r1, r3
 80186ca:	6878      	ldr	r0, [r7, #4]
 80186cc:	f000 f848 	bl	8018760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80186d0:	e023      	b.n	801871a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80186d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80186d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d009      	beq.n	80186f2 <HAL_UART_IRQHandler+0x4ea>
 80186de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80186e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d003      	beq.n	80186f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80186ea:	6878      	ldr	r0, [r7, #4]
 80186ec:	f000 f929 	bl	8018942 <UART_Transmit_IT>
    return;
 80186f0:	e014      	b.n	801871c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80186f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80186f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d00e      	beq.n	801871c <HAL_UART_IRQHandler+0x514>
 80186fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018706:	2b00      	cmp	r3, #0
 8018708:	d008      	beq.n	801871c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801870a:	6878      	ldr	r0, [r7, #4]
 801870c:	f000 f969 	bl	80189e2 <UART_EndTransmit_IT>
    return;
 8018710:	e004      	b.n	801871c <HAL_UART_IRQHandler+0x514>
    return;
 8018712:	bf00      	nop
 8018714:	e002      	b.n	801871c <HAL_UART_IRQHandler+0x514>
      return;
 8018716:	bf00      	nop
 8018718:	e000      	b.n	801871c <HAL_UART_IRQHandler+0x514>
      return;
 801871a:	bf00      	nop
  }
}
 801871c:	37e8      	adds	r7, #232	; 0xe8
 801871e:	46bd      	mov	sp, r7
 8018720:	bd80      	pop	{r7, pc}
 8018722:	bf00      	nop

08018724 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018724:	b480      	push	{r7}
 8018726:	b083      	sub	sp, #12
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801872c:	bf00      	nop
 801872e:	370c      	adds	r7, #12
 8018730:	46bd      	mov	sp, r7
 8018732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018736:	4770      	bx	lr

08018738 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8018738:	b480      	push	{r7}
 801873a:	b083      	sub	sp, #12
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8018740:	bf00      	nop
 8018742:	370c      	adds	r7, #12
 8018744:	46bd      	mov	sp, r7
 8018746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874a:	4770      	bx	lr

0801874c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801874c:	b480      	push	{r7}
 801874e:	b083      	sub	sp, #12
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8018754:	bf00      	nop
 8018756:	370c      	adds	r7, #12
 8018758:	46bd      	mov	sp, r7
 801875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801875e:	4770      	bx	lr

08018760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018760:	b480      	push	{r7}
 8018762:	b083      	sub	sp, #12
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
 8018768:	460b      	mov	r3, r1
 801876a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801876c:	bf00      	nop
 801876e:	370c      	adds	r7, #12
 8018770:	46bd      	mov	sp, r7
 8018772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018776:	4770      	bx	lr

08018778 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b090      	sub	sp, #64	; 0x40
 801877c:	af00      	add	r7, sp, #0
 801877e:	60f8      	str	r0, [r7, #12]
 8018780:	60b9      	str	r1, [r7, #8]
 8018782:	603b      	str	r3, [r7, #0]
 8018784:	4613      	mov	r3, r2
 8018786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018788:	e050      	b.n	801882c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801878a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801878c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018790:	d04c      	beq.n	801882c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8018792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018794:	2b00      	cmp	r3, #0
 8018796:	d007      	beq.n	80187a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8018798:	f7f9 fe28 	bl	80123ec <HAL_GetTick>
 801879c:	4602      	mov	r2, r0
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	1ad3      	subs	r3, r2, r3
 80187a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80187a4:	429a      	cmp	r2, r3
 80187a6:	d241      	bcs.n	801882c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	330c      	adds	r3, #12
 80187ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b2:	e853 3f00 	ldrex	r3, [r3]
 80187b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80187b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80187be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	330c      	adds	r3, #12
 80187c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80187c8:	637a      	str	r2, [r7, #52]	; 0x34
 80187ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80187ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80187d0:	e841 2300 	strex	r3, r2, [r1]
 80187d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80187d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d1e5      	bne.n	80187a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	3314      	adds	r3, #20
 80187e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187e4:	697b      	ldr	r3, [r7, #20]
 80187e6:	e853 3f00 	ldrex	r3, [r3]
 80187ea:	613b      	str	r3, [r7, #16]
   return(result);
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	f023 0301 	bic.w	r3, r3, #1
 80187f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	3314      	adds	r3, #20
 80187fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80187fc:	623a      	str	r2, [r7, #32]
 80187fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018800:	69f9      	ldr	r1, [r7, #28]
 8018802:	6a3a      	ldr	r2, [r7, #32]
 8018804:	e841 2300 	strex	r3, r2, [r1]
 8018808:	61bb      	str	r3, [r7, #24]
   return(result);
 801880a:	69bb      	ldr	r3, [r7, #24]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d1e5      	bne.n	80187dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	2220      	movs	r2, #32
 8018814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	2220      	movs	r2, #32
 801881c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	2200      	movs	r2, #0
 8018824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8018828:	2303      	movs	r3, #3
 801882a:	e00f      	b.n	801884c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	681a      	ldr	r2, [r3, #0]
 8018832:	68bb      	ldr	r3, [r7, #8]
 8018834:	4013      	ands	r3, r2
 8018836:	68ba      	ldr	r2, [r7, #8]
 8018838:	429a      	cmp	r2, r3
 801883a:	bf0c      	ite	eq
 801883c:	2301      	moveq	r3, #1
 801883e:	2300      	movne	r3, #0
 8018840:	b2db      	uxtb	r3, r3
 8018842:	461a      	mov	r2, r3
 8018844:	79fb      	ldrb	r3, [r7, #7]
 8018846:	429a      	cmp	r2, r3
 8018848:	d09f      	beq.n	801878a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801884a:	2300      	movs	r3, #0
}
 801884c:	4618      	mov	r0, r3
 801884e:	3740      	adds	r7, #64	; 0x40
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018854:	b480      	push	{r7}
 8018856:	b095      	sub	sp, #84	; 0x54
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	330c      	adds	r3, #12
 8018862:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018866:	e853 3f00 	ldrex	r3, [r3]
 801886a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801886e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	330c      	adds	r3, #12
 801887a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801887c:	643a      	str	r2, [r7, #64]	; 0x40
 801887e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018884:	e841 2300 	strex	r3, r2, [r1]
 8018888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801888c:	2b00      	cmp	r3, #0
 801888e:	d1e5      	bne.n	801885c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	3314      	adds	r3, #20
 8018896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018898:	6a3b      	ldr	r3, [r7, #32]
 801889a:	e853 3f00 	ldrex	r3, [r3]
 801889e:	61fb      	str	r3, [r7, #28]
   return(result);
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	f023 0301 	bic.w	r3, r3, #1
 80188a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	3314      	adds	r3, #20
 80188ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80188b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80188b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80188b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80188b8:	e841 2300 	strex	r3, r2, [r1]
 80188bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80188be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d1e5      	bne.n	8018890 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188c8:	2b01      	cmp	r3, #1
 80188ca:	d119      	bne.n	8018900 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	330c      	adds	r3, #12
 80188d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	e853 3f00 	ldrex	r3, [r3]
 80188da:	60bb      	str	r3, [r7, #8]
   return(result);
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	f023 0310 	bic.w	r3, r3, #16
 80188e2:	647b      	str	r3, [r7, #68]	; 0x44
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	330c      	adds	r3, #12
 80188ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80188ec:	61ba      	str	r2, [r7, #24]
 80188ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188f0:	6979      	ldr	r1, [r7, #20]
 80188f2:	69ba      	ldr	r2, [r7, #24]
 80188f4:	e841 2300 	strex	r3, r2, [r1]
 80188f8:	613b      	str	r3, [r7, #16]
   return(result);
 80188fa:	693b      	ldr	r3, [r7, #16]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d1e5      	bne.n	80188cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	2220      	movs	r2, #32
 8018904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	2200      	movs	r2, #0
 801890c:	631a      	str	r2, [r3, #48]	; 0x30
}
 801890e:	bf00      	nop
 8018910:	3754      	adds	r7, #84	; 0x54
 8018912:	46bd      	mov	sp, r7
 8018914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018918:	4770      	bx	lr

0801891a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801891a:	b580      	push	{r7, lr}
 801891c:	b084      	sub	sp, #16
 801891e:	af00      	add	r7, sp, #0
 8018920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018926:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	2200      	movs	r2, #0
 801892c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	2200      	movs	r2, #0
 8018932:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8018934:	68f8      	ldr	r0, [r7, #12]
 8018936:	f7ff ff09 	bl	801874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801893a:	bf00      	nop
 801893c:	3710      	adds	r7, #16
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}

08018942 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8018942:	b480      	push	{r7}
 8018944:	b085      	sub	sp, #20
 8018946:	af00      	add	r7, sp, #0
 8018948:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018950:	b2db      	uxtb	r3, r3
 8018952:	2b21      	cmp	r3, #33	; 0x21
 8018954:	d13e      	bne.n	80189d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	689b      	ldr	r3, [r3, #8]
 801895a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801895e:	d114      	bne.n	801898a <UART_Transmit_IT+0x48>
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	691b      	ldr	r3, [r3, #16]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d110      	bne.n	801898a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	6a1b      	ldr	r3, [r3, #32]
 801896c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	881b      	ldrh	r3, [r3, #0]
 8018972:	461a      	mov	r2, r3
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801897c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	6a1b      	ldr	r3, [r3, #32]
 8018982:	1c9a      	adds	r2, r3, #2
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	621a      	str	r2, [r3, #32]
 8018988:	e008      	b.n	801899c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	6a1b      	ldr	r3, [r3, #32]
 801898e:	1c59      	adds	r1, r3, #1
 8018990:	687a      	ldr	r2, [r7, #4]
 8018992:	6211      	str	r1, [r2, #32]
 8018994:	781a      	ldrb	r2, [r3, #0]
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80189a0:	b29b      	uxth	r3, r3
 80189a2:	3b01      	subs	r3, #1
 80189a4:	b29b      	uxth	r3, r3
 80189a6:	687a      	ldr	r2, [r7, #4]
 80189a8:	4619      	mov	r1, r3
 80189aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d10f      	bne.n	80189d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	68da      	ldr	r2, [r3, #12]
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80189be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	68da      	ldr	r2, [r3, #12]
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80189ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80189d0:	2300      	movs	r3, #0
 80189d2:	e000      	b.n	80189d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80189d4:	2302      	movs	r3, #2
  }
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	3714      	adds	r7, #20
 80189da:	46bd      	mov	sp, r7
 80189dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e0:	4770      	bx	lr

080189e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80189e2:	b580      	push	{r7, lr}
 80189e4:	b082      	sub	sp, #8
 80189e6:	af00      	add	r7, sp, #0
 80189e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	68da      	ldr	r2, [r3, #12]
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80189f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	2220      	movs	r2, #32
 80189fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8018a02:	6878      	ldr	r0, [r7, #4]
 8018a04:	f7ff fe8e 	bl	8018724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8018a08:	2300      	movs	r3, #0
}
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	3708      	adds	r7, #8
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	bd80      	pop	{r7, pc}

08018a12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8018a12:	b580      	push	{r7, lr}
 8018a14:	b08c      	sub	sp, #48	; 0x30
 8018a16:	af00      	add	r7, sp, #0
 8018a18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018a20:	b2db      	uxtb	r3, r3
 8018a22:	2b22      	cmp	r3, #34	; 0x22
 8018a24:	f040 80ab 	bne.w	8018b7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	689b      	ldr	r3, [r3, #8]
 8018a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018a30:	d117      	bne.n	8018a62 <UART_Receive_IT+0x50>
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	691b      	ldr	r3, [r3, #16]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d113      	bne.n	8018a62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	685b      	ldr	r3, [r3, #4]
 8018a4a:	b29b      	uxth	r3, r3
 8018a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018a50:	b29a      	uxth	r2, r3
 8018a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a5a:	1c9a      	adds	r2, r3, #2
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8018a60:	e026      	b.n	8018ab0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	689b      	ldr	r3, [r3, #8]
 8018a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018a74:	d007      	beq.n	8018a86 <UART_Receive_IT+0x74>
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	689b      	ldr	r3, [r3, #8]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d10a      	bne.n	8018a94 <UART_Receive_IT+0x82>
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	691b      	ldr	r3, [r3, #16]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d106      	bne.n	8018a94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	685b      	ldr	r3, [r3, #4]
 8018a8c:	b2da      	uxtb	r2, r3
 8018a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a90:	701a      	strb	r2, [r3, #0]
 8018a92:	e008      	b.n	8018aa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	685b      	ldr	r3, [r3, #4]
 8018a9a:	b2db      	uxtb	r3, r3
 8018a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018aa0:	b2da      	uxtb	r2, r3
 8018aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018aaa:	1c5a      	adds	r2, r3, #1
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018ab4:	b29b      	uxth	r3, r3
 8018ab6:	3b01      	subs	r3, #1
 8018ab8:	b29b      	uxth	r3, r3
 8018aba:	687a      	ldr	r2, [r7, #4]
 8018abc:	4619      	mov	r1, r3
 8018abe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d15a      	bne.n	8018b7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	68da      	ldr	r2, [r3, #12]
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	f022 0220 	bic.w	r2, r2, #32
 8018ad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	68da      	ldr	r2, [r3, #12]
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	695a      	ldr	r2, [r3, #20]
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	f022 0201 	bic.w	r2, r2, #1
 8018af2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	2220      	movs	r2, #32
 8018af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b00:	2b01      	cmp	r3, #1
 8018b02:	d135      	bne.n	8018b70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2200      	movs	r2, #0
 8018b08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	330c      	adds	r3, #12
 8018b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018b12:	697b      	ldr	r3, [r7, #20]
 8018b14:	e853 3f00 	ldrex	r3, [r3]
 8018b18:	613b      	str	r3, [r7, #16]
   return(result);
 8018b1a:	693b      	ldr	r3, [r7, #16]
 8018b1c:	f023 0310 	bic.w	r3, r3, #16
 8018b20:	627b      	str	r3, [r7, #36]	; 0x24
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	330c      	adds	r3, #12
 8018b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b2a:	623a      	str	r2, [r7, #32]
 8018b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b2e:	69f9      	ldr	r1, [r7, #28]
 8018b30:	6a3a      	ldr	r2, [r7, #32]
 8018b32:	e841 2300 	strex	r3, r2, [r1]
 8018b36:	61bb      	str	r3, [r7, #24]
   return(result);
 8018b38:	69bb      	ldr	r3, [r7, #24]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d1e5      	bne.n	8018b0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	f003 0310 	and.w	r3, r3, #16
 8018b48:	2b10      	cmp	r3, #16
 8018b4a:	d10a      	bne.n	8018b62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	60fb      	str	r3, [r7, #12]
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	60fb      	str	r3, [r7, #12]
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	685b      	ldr	r3, [r3, #4]
 8018b5e:	60fb      	str	r3, [r7, #12]
 8018b60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8018b66:	4619      	mov	r1, r3
 8018b68:	6878      	ldr	r0, [r7, #4]
 8018b6a:	f7ff fdf9 	bl	8018760 <HAL_UARTEx_RxEventCallback>
 8018b6e:	e002      	b.n	8018b76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8018b70:	6878      	ldr	r0, [r7, #4]
 8018b72:	f7ff fde1 	bl	8018738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8018b76:	2300      	movs	r3, #0
 8018b78:	e002      	b.n	8018b80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	e000      	b.n	8018b80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8018b7e:	2302      	movs	r3, #2
  }
}
 8018b80:	4618      	mov	r0, r3
 8018b82:	3730      	adds	r7, #48	; 0x30
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bd80      	pop	{r7, pc}

08018b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b8c:	b09f      	sub	sp, #124	; 0x7c
 8018b8e:	af00      	add	r7, sp, #0
 8018b90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	691b      	ldr	r3, [r3, #16]
 8018b98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8018b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b9e:	68d9      	ldr	r1, [r3, #12]
 8018ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018ba2:	681a      	ldr	r2, [r3, #0]
 8018ba4:	ea40 0301 	orr.w	r3, r0, r1
 8018ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8018baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bac:	689a      	ldr	r2, [r3, #8]
 8018bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bb0:	691b      	ldr	r3, [r3, #16]
 8018bb2:	431a      	orrs	r2, r3
 8018bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bb6:	695b      	ldr	r3, [r3, #20]
 8018bb8:	431a      	orrs	r2, r3
 8018bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bbc:	69db      	ldr	r3, [r3, #28]
 8018bbe:	4313      	orrs	r3, r2
 8018bc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8018bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	68db      	ldr	r3, [r3, #12]
 8018bc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8018bcc:	f021 010c 	bic.w	r1, r1, #12
 8018bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bd2:	681a      	ldr	r2, [r3, #0]
 8018bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018bd6:	430b      	orrs	r3, r1
 8018bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8018bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	695b      	ldr	r3, [r3, #20]
 8018be0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8018be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018be6:	6999      	ldr	r1, [r3, #24]
 8018be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bea:	681a      	ldr	r2, [r3, #0]
 8018bec:	ea40 0301 	orr.w	r3, r0, r1
 8018bf0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8018bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bf4:	681a      	ldr	r2, [r3, #0]
 8018bf6:	4bc5      	ldr	r3, [pc, #788]	; (8018f0c <UART_SetConfig+0x384>)
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d004      	beq.n	8018c06 <UART_SetConfig+0x7e>
 8018bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bfe:	681a      	ldr	r2, [r3, #0]
 8018c00:	4bc3      	ldr	r3, [pc, #780]	; (8018f10 <UART_SetConfig+0x388>)
 8018c02:	429a      	cmp	r2, r3
 8018c04:	d103      	bne.n	8018c0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018c06:	f7fd fbf7 	bl	80163f8 <HAL_RCC_GetPCLK2Freq>
 8018c0a:	6778      	str	r0, [r7, #116]	; 0x74
 8018c0c:	e002      	b.n	8018c14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8018c0e:	f7fd fbdf 	bl	80163d0 <HAL_RCC_GetPCLK1Freq>
 8018c12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c16:	69db      	ldr	r3, [r3, #28]
 8018c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018c1c:	f040 80b6 	bne.w	8018d8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018c22:	461c      	mov	r4, r3
 8018c24:	f04f 0500 	mov.w	r5, #0
 8018c28:	4622      	mov	r2, r4
 8018c2a:	462b      	mov	r3, r5
 8018c2c:	1891      	adds	r1, r2, r2
 8018c2e:	6439      	str	r1, [r7, #64]	; 0x40
 8018c30:	415b      	adcs	r3, r3
 8018c32:	647b      	str	r3, [r7, #68]	; 0x44
 8018c34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018c38:	1912      	adds	r2, r2, r4
 8018c3a:	eb45 0303 	adc.w	r3, r5, r3
 8018c3e:	f04f 0000 	mov.w	r0, #0
 8018c42:	f04f 0100 	mov.w	r1, #0
 8018c46:	00d9      	lsls	r1, r3, #3
 8018c48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018c4c:	00d0      	lsls	r0, r2, #3
 8018c4e:	4602      	mov	r2, r0
 8018c50:	460b      	mov	r3, r1
 8018c52:	1911      	adds	r1, r2, r4
 8018c54:	6639      	str	r1, [r7, #96]	; 0x60
 8018c56:	416b      	adcs	r3, r5
 8018c58:	667b      	str	r3, [r7, #100]	; 0x64
 8018c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c5c:	685b      	ldr	r3, [r3, #4]
 8018c5e:	461a      	mov	r2, r3
 8018c60:	f04f 0300 	mov.w	r3, #0
 8018c64:	1891      	adds	r1, r2, r2
 8018c66:	63b9      	str	r1, [r7, #56]	; 0x38
 8018c68:	415b      	adcs	r3, r3
 8018c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8018c70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8018c74:	f7f7 ff40 	bl	8010af8 <__aeabi_uldivmod>
 8018c78:	4602      	mov	r2, r0
 8018c7a:	460b      	mov	r3, r1
 8018c7c:	4ba5      	ldr	r3, [pc, #660]	; (8018f14 <UART_SetConfig+0x38c>)
 8018c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8018c82:	095b      	lsrs	r3, r3, #5
 8018c84:	011e      	lsls	r6, r3, #4
 8018c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018c88:	461c      	mov	r4, r3
 8018c8a:	f04f 0500 	mov.w	r5, #0
 8018c8e:	4622      	mov	r2, r4
 8018c90:	462b      	mov	r3, r5
 8018c92:	1891      	adds	r1, r2, r2
 8018c94:	6339      	str	r1, [r7, #48]	; 0x30
 8018c96:	415b      	adcs	r3, r3
 8018c98:	637b      	str	r3, [r7, #52]	; 0x34
 8018c9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8018c9e:	1912      	adds	r2, r2, r4
 8018ca0:	eb45 0303 	adc.w	r3, r5, r3
 8018ca4:	f04f 0000 	mov.w	r0, #0
 8018ca8:	f04f 0100 	mov.w	r1, #0
 8018cac:	00d9      	lsls	r1, r3, #3
 8018cae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018cb2:	00d0      	lsls	r0, r2, #3
 8018cb4:	4602      	mov	r2, r0
 8018cb6:	460b      	mov	r3, r1
 8018cb8:	1911      	adds	r1, r2, r4
 8018cba:	65b9      	str	r1, [r7, #88]	; 0x58
 8018cbc:	416b      	adcs	r3, r5
 8018cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018cc2:	685b      	ldr	r3, [r3, #4]
 8018cc4:	461a      	mov	r2, r3
 8018cc6:	f04f 0300 	mov.w	r3, #0
 8018cca:	1891      	adds	r1, r2, r2
 8018ccc:	62b9      	str	r1, [r7, #40]	; 0x28
 8018cce:	415b      	adcs	r3, r3
 8018cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018cd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8018cda:	f7f7 ff0d 	bl	8010af8 <__aeabi_uldivmod>
 8018cde:	4602      	mov	r2, r0
 8018ce0:	460b      	mov	r3, r1
 8018ce2:	4b8c      	ldr	r3, [pc, #560]	; (8018f14 <UART_SetConfig+0x38c>)
 8018ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8018ce8:	095b      	lsrs	r3, r3, #5
 8018cea:	2164      	movs	r1, #100	; 0x64
 8018cec:	fb01 f303 	mul.w	r3, r1, r3
 8018cf0:	1ad3      	subs	r3, r2, r3
 8018cf2:	00db      	lsls	r3, r3, #3
 8018cf4:	3332      	adds	r3, #50	; 0x32
 8018cf6:	4a87      	ldr	r2, [pc, #540]	; (8018f14 <UART_SetConfig+0x38c>)
 8018cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8018cfc:	095b      	lsrs	r3, r3, #5
 8018cfe:	005b      	lsls	r3, r3, #1
 8018d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018d04:	441e      	add	r6, r3
 8018d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018d08:	4618      	mov	r0, r3
 8018d0a:	f04f 0100 	mov.w	r1, #0
 8018d0e:	4602      	mov	r2, r0
 8018d10:	460b      	mov	r3, r1
 8018d12:	1894      	adds	r4, r2, r2
 8018d14:	623c      	str	r4, [r7, #32]
 8018d16:	415b      	adcs	r3, r3
 8018d18:	627b      	str	r3, [r7, #36]	; 0x24
 8018d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018d1e:	1812      	adds	r2, r2, r0
 8018d20:	eb41 0303 	adc.w	r3, r1, r3
 8018d24:	f04f 0400 	mov.w	r4, #0
 8018d28:	f04f 0500 	mov.w	r5, #0
 8018d2c:	00dd      	lsls	r5, r3, #3
 8018d2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8018d32:	00d4      	lsls	r4, r2, #3
 8018d34:	4622      	mov	r2, r4
 8018d36:	462b      	mov	r3, r5
 8018d38:	1814      	adds	r4, r2, r0
 8018d3a:	653c      	str	r4, [r7, #80]	; 0x50
 8018d3c:	414b      	adcs	r3, r1
 8018d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8018d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018d42:	685b      	ldr	r3, [r3, #4]
 8018d44:	461a      	mov	r2, r3
 8018d46:	f04f 0300 	mov.w	r3, #0
 8018d4a:	1891      	adds	r1, r2, r2
 8018d4c:	61b9      	str	r1, [r7, #24]
 8018d4e:	415b      	adcs	r3, r3
 8018d50:	61fb      	str	r3, [r7, #28]
 8018d52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018d56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8018d5a:	f7f7 fecd 	bl	8010af8 <__aeabi_uldivmod>
 8018d5e:	4602      	mov	r2, r0
 8018d60:	460b      	mov	r3, r1
 8018d62:	4b6c      	ldr	r3, [pc, #432]	; (8018f14 <UART_SetConfig+0x38c>)
 8018d64:	fba3 1302 	umull	r1, r3, r3, r2
 8018d68:	095b      	lsrs	r3, r3, #5
 8018d6a:	2164      	movs	r1, #100	; 0x64
 8018d6c:	fb01 f303 	mul.w	r3, r1, r3
 8018d70:	1ad3      	subs	r3, r2, r3
 8018d72:	00db      	lsls	r3, r3, #3
 8018d74:	3332      	adds	r3, #50	; 0x32
 8018d76:	4a67      	ldr	r2, [pc, #412]	; (8018f14 <UART_SetConfig+0x38c>)
 8018d78:	fba2 2303 	umull	r2, r3, r2, r3
 8018d7c:	095b      	lsrs	r3, r3, #5
 8018d7e:	f003 0207 	and.w	r2, r3, #7
 8018d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	4432      	add	r2, r6
 8018d88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8018d8a:	e0b9      	b.n	8018f00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018d8e:	461c      	mov	r4, r3
 8018d90:	f04f 0500 	mov.w	r5, #0
 8018d94:	4622      	mov	r2, r4
 8018d96:	462b      	mov	r3, r5
 8018d98:	1891      	adds	r1, r2, r2
 8018d9a:	6139      	str	r1, [r7, #16]
 8018d9c:	415b      	adcs	r3, r3
 8018d9e:	617b      	str	r3, [r7, #20]
 8018da0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018da4:	1912      	adds	r2, r2, r4
 8018da6:	eb45 0303 	adc.w	r3, r5, r3
 8018daa:	f04f 0000 	mov.w	r0, #0
 8018dae:	f04f 0100 	mov.w	r1, #0
 8018db2:	00d9      	lsls	r1, r3, #3
 8018db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018db8:	00d0      	lsls	r0, r2, #3
 8018dba:	4602      	mov	r2, r0
 8018dbc:	460b      	mov	r3, r1
 8018dbe:	eb12 0804 	adds.w	r8, r2, r4
 8018dc2:	eb43 0905 	adc.w	r9, r3, r5
 8018dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018dc8:	685b      	ldr	r3, [r3, #4]
 8018dca:	4618      	mov	r0, r3
 8018dcc:	f04f 0100 	mov.w	r1, #0
 8018dd0:	f04f 0200 	mov.w	r2, #0
 8018dd4:	f04f 0300 	mov.w	r3, #0
 8018dd8:	008b      	lsls	r3, r1, #2
 8018dda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8018dde:	0082      	lsls	r2, r0, #2
 8018de0:	4640      	mov	r0, r8
 8018de2:	4649      	mov	r1, r9
 8018de4:	f7f7 fe88 	bl	8010af8 <__aeabi_uldivmod>
 8018de8:	4602      	mov	r2, r0
 8018dea:	460b      	mov	r3, r1
 8018dec:	4b49      	ldr	r3, [pc, #292]	; (8018f14 <UART_SetConfig+0x38c>)
 8018dee:	fba3 2302 	umull	r2, r3, r3, r2
 8018df2:	095b      	lsrs	r3, r3, #5
 8018df4:	011e      	lsls	r6, r3, #4
 8018df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018df8:	4618      	mov	r0, r3
 8018dfa:	f04f 0100 	mov.w	r1, #0
 8018dfe:	4602      	mov	r2, r0
 8018e00:	460b      	mov	r3, r1
 8018e02:	1894      	adds	r4, r2, r2
 8018e04:	60bc      	str	r4, [r7, #8]
 8018e06:	415b      	adcs	r3, r3
 8018e08:	60fb      	str	r3, [r7, #12]
 8018e0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018e0e:	1812      	adds	r2, r2, r0
 8018e10:	eb41 0303 	adc.w	r3, r1, r3
 8018e14:	f04f 0400 	mov.w	r4, #0
 8018e18:	f04f 0500 	mov.w	r5, #0
 8018e1c:	00dd      	lsls	r5, r3, #3
 8018e1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8018e22:	00d4      	lsls	r4, r2, #3
 8018e24:	4622      	mov	r2, r4
 8018e26:	462b      	mov	r3, r5
 8018e28:	1814      	adds	r4, r2, r0
 8018e2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8018e2c:	414b      	adcs	r3, r1
 8018e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018e32:	685b      	ldr	r3, [r3, #4]
 8018e34:	4618      	mov	r0, r3
 8018e36:	f04f 0100 	mov.w	r1, #0
 8018e3a:	f04f 0200 	mov.w	r2, #0
 8018e3e:	f04f 0300 	mov.w	r3, #0
 8018e42:	008b      	lsls	r3, r1, #2
 8018e44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8018e48:	0082      	lsls	r2, r0, #2
 8018e4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8018e4e:	f7f7 fe53 	bl	8010af8 <__aeabi_uldivmod>
 8018e52:	4602      	mov	r2, r0
 8018e54:	460b      	mov	r3, r1
 8018e56:	4b2f      	ldr	r3, [pc, #188]	; (8018f14 <UART_SetConfig+0x38c>)
 8018e58:	fba3 1302 	umull	r1, r3, r3, r2
 8018e5c:	095b      	lsrs	r3, r3, #5
 8018e5e:	2164      	movs	r1, #100	; 0x64
 8018e60:	fb01 f303 	mul.w	r3, r1, r3
 8018e64:	1ad3      	subs	r3, r2, r3
 8018e66:	011b      	lsls	r3, r3, #4
 8018e68:	3332      	adds	r3, #50	; 0x32
 8018e6a:	4a2a      	ldr	r2, [pc, #168]	; (8018f14 <UART_SetConfig+0x38c>)
 8018e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8018e70:	095b      	lsrs	r3, r3, #5
 8018e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018e76:	441e      	add	r6, r3
 8018e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	f04f 0100 	mov.w	r1, #0
 8018e80:	4602      	mov	r2, r0
 8018e82:	460b      	mov	r3, r1
 8018e84:	1894      	adds	r4, r2, r2
 8018e86:	603c      	str	r4, [r7, #0]
 8018e88:	415b      	adcs	r3, r3
 8018e8a:	607b      	str	r3, [r7, #4]
 8018e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018e90:	1812      	adds	r2, r2, r0
 8018e92:	eb41 0303 	adc.w	r3, r1, r3
 8018e96:	f04f 0400 	mov.w	r4, #0
 8018e9a:	f04f 0500 	mov.w	r5, #0
 8018e9e:	00dd      	lsls	r5, r3, #3
 8018ea0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8018ea4:	00d4      	lsls	r4, r2, #3
 8018ea6:	4622      	mov	r2, r4
 8018ea8:	462b      	mov	r3, r5
 8018eaa:	eb12 0a00 	adds.w	sl, r2, r0
 8018eae:	eb43 0b01 	adc.w	fp, r3, r1
 8018eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018eb4:	685b      	ldr	r3, [r3, #4]
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f04f 0100 	mov.w	r1, #0
 8018ebc:	f04f 0200 	mov.w	r2, #0
 8018ec0:	f04f 0300 	mov.w	r3, #0
 8018ec4:	008b      	lsls	r3, r1, #2
 8018ec6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8018eca:	0082      	lsls	r2, r0, #2
 8018ecc:	4650      	mov	r0, sl
 8018ece:	4659      	mov	r1, fp
 8018ed0:	f7f7 fe12 	bl	8010af8 <__aeabi_uldivmod>
 8018ed4:	4602      	mov	r2, r0
 8018ed6:	460b      	mov	r3, r1
 8018ed8:	4b0e      	ldr	r3, [pc, #56]	; (8018f14 <UART_SetConfig+0x38c>)
 8018eda:	fba3 1302 	umull	r1, r3, r3, r2
 8018ede:	095b      	lsrs	r3, r3, #5
 8018ee0:	2164      	movs	r1, #100	; 0x64
 8018ee2:	fb01 f303 	mul.w	r3, r1, r3
 8018ee6:	1ad3      	subs	r3, r2, r3
 8018ee8:	011b      	lsls	r3, r3, #4
 8018eea:	3332      	adds	r3, #50	; 0x32
 8018eec:	4a09      	ldr	r2, [pc, #36]	; (8018f14 <UART_SetConfig+0x38c>)
 8018eee:	fba2 2303 	umull	r2, r3, r2, r3
 8018ef2:	095b      	lsrs	r3, r3, #5
 8018ef4:	f003 020f 	and.w	r2, r3, #15
 8018ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	4432      	add	r2, r6
 8018efe:	609a      	str	r2, [r3, #8]
}
 8018f00:	bf00      	nop
 8018f02:	377c      	adds	r7, #124	; 0x7c
 8018f04:	46bd      	mov	sp, r7
 8018f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f0a:	bf00      	nop
 8018f0c:	40011000 	.word	0x40011000
 8018f10:	40011400 	.word	0x40011400
 8018f14:	51eb851f 	.word	0x51eb851f

08018f18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018f18:	b084      	sub	sp, #16
 8018f1a:	b580      	push	{r7, lr}
 8018f1c:	b084      	sub	sp, #16
 8018f1e:	af00      	add	r7, sp, #0
 8018f20:	6078      	str	r0, [r7, #4]
 8018f22:	f107 001c 	add.w	r0, r7, #28
 8018f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8018f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f2c:	2b01      	cmp	r3, #1
 8018f2e:	d122      	bne.n	8018f76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	68db      	ldr	r3, [r3, #12]
 8018f40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8018f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018f48:	687a      	ldr	r2, [r7, #4]
 8018f4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	68db      	ldr	r3, [r3, #12]
 8018f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8018f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018f5a:	2b01      	cmp	r3, #1
 8018f5c:	d105      	bne.n	8018f6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	68db      	ldr	r3, [r3, #12]
 8018f62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018f6a:	6878      	ldr	r0, [r7, #4]
 8018f6c:	f001 fb16 	bl	801a59c <USB_CoreReset>
 8018f70:	4603      	mov	r3, r0
 8018f72:	73fb      	strb	r3, [r7, #15]
 8018f74:	e01a      	b.n	8018fac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	68db      	ldr	r3, [r3, #12]
 8018f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018f82:	6878      	ldr	r0, [r7, #4]
 8018f84:	f001 fb0a 	bl	801a59c <USB_CoreReset>
 8018f88:	4603      	mov	r3, r0
 8018f8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8018f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d106      	bne.n	8018fa0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8018f9e:	e005      	b.n	8018fac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8018fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fae:	2b01      	cmp	r3, #1
 8018fb0:	d10b      	bne.n	8018fca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	689b      	ldr	r3, [r3, #8]
 8018fb6:	f043 0206 	orr.w	r2, r3, #6
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	689b      	ldr	r3, [r3, #8]
 8018fc2:	f043 0220 	orr.w	r2, r3, #32
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8018fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8018fcc:	4618      	mov	r0, r3
 8018fce:	3710      	adds	r7, #16
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018fd6:	b004      	add	sp, #16
 8018fd8:	4770      	bx	lr
	...

08018fdc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8018fdc:	b480      	push	{r7}
 8018fde:	b087      	sub	sp, #28
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	60f8      	str	r0, [r7, #12]
 8018fe4:	60b9      	str	r1, [r7, #8]
 8018fe6:	4613      	mov	r3, r2
 8018fe8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8018fea:	79fb      	ldrb	r3, [r7, #7]
 8018fec:	2b02      	cmp	r3, #2
 8018fee:	d165      	bne.n	80190bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8018ff0:	68bb      	ldr	r3, [r7, #8]
 8018ff2:	4a41      	ldr	r2, [pc, #260]	; (80190f8 <USB_SetTurnaroundTime+0x11c>)
 8018ff4:	4293      	cmp	r3, r2
 8018ff6:	d906      	bls.n	8019006 <USB_SetTurnaroundTime+0x2a>
 8018ff8:	68bb      	ldr	r3, [r7, #8]
 8018ffa:	4a40      	ldr	r2, [pc, #256]	; (80190fc <USB_SetTurnaroundTime+0x120>)
 8018ffc:	4293      	cmp	r3, r2
 8018ffe:	d202      	bcs.n	8019006 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8019000:	230f      	movs	r3, #15
 8019002:	617b      	str	r3, [r7, #20]
 8019004:	e062      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8019006:	68bb      	ldr	r3, [r7, #8]
 8019008:	4a3c      	ldr	r2, [pc, #240]	; (80190fc <USB_SetTurnaroundTime+0x120>)
 801900a:	4293      	cmp	r3, r2
 801900c:	d306      	bcc.n	801901c <USB_SetTurnaroundTime+0x40>
 801900e:	68bb      	ldr	r3, [r7, #8]
 8019010:	4a3b      	ldr	r2, [pc, #236]	; (8019100 <USB_SetTurnaroundTime+0x124>)
 8019012:	4293      	cmp	r3, r2
 8019014:	d202      	bcs.n	801901c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8019016:	230e      	movs	r3, #14
 8019018:	617b      	str	r3, [r7, #20]
 801901a:	e057      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801901c:	68bb      	ldr	r3, [r7, #8]
 801901e:	4a38      	ldr	r2, [pc, #224]	; (8019100 <USB_SetTurnaroundTime+0x124>)
 8019020:	4293      	cmp	r3, r2
 8019022:	d306      	bcc.n	8019032 <USB_SetTurnaroundTime+0x56>
 8019024:	68bb      	ldr	r3, [r7, #8]
 8019026:	4a37      	ldr	r2, [pc, #220]	; (8019104 <USB_SetTurnaroundTime+0x128>)
 8019028:	4293      	cmp	r3, r2
 801902a:	d202      	bcs.n	8019032 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801902c:	230d      	movs	r3, #13
 801902e:	617b      	str	r3, [r7, #20]
 8019030:	e04c      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8019032:	68bb      	ldr	r3, [r7, #8]
 8019034:	4a33      	ldr	r2, [pc, #204]	; (8019104 <USB_SetTurnaroundTime+0x128>)
 8019036:	4293      	cmp	r3, r2
 8019038:	d306      	bcc.n	8019048 <USB_SetTurnaroundTime+0x6c>
 801903a:	68bb      	ldr	r3, [r7, #8]
 801903c:	4a32      	ldr	r2, [pc, #200]	; (8019108 <USB_SetTurnaroundTime+0x12c>)
 801903e:	4293      	cmp	r3, r2
 8019040:	d802      	bhi.n	8019048 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8019042:	230c      	movs	r3, #12
 8019044:	617b      	str	r3, [r7, #20]
 8019046:	e041      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8019048:	68bb      	ldr	r3, [r7, #8]
 801904a:	4a2f      	ldr	r2, [pc, #188]	; (8019108 <USB_SetTurnaroundTime+0x12c>)
 801904c:	4293      	cmp	r3, r2
 801904e:	d906      	bls.n	801905e <USB_SetTurnaroundTime+0x82>
 8019050:	68bb      	ldr	r3, [r7, #8]
 8019052:	4a2e      	ldr	r2, [pc, #184]	; (801910c <USB_SetTurnaroundTime+0x130>)
 8019054:	4293      	cmp	r3, r2
 8019056:	d802      	bhi.n	801905e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8019058:	230b      	movs	r3, #11
 801905a:	617b      	str	r3, [r7, #20]
 801905c:	e036      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801905e:	68bb      	ldr	r3, [r7, #8]
 8019060:	4a2a      	ldr	r2, [pc, #168]	; (801910c <USB_SetTurnaroundTime+0x130>)
 8019062:	4293      	cmp	r3, r2
 8019064:	d906      	bls.n	8019074 <USB_SetTurnaroundTime+0x98>
 8019066:	68bb      	ldr	r3, [r7, #8]
 8019068:	4a29      	ldr	r2, [pc, #164]	; (8019110 <USB_SetTurnaroundTime+0x134>)
 801906a:	4293      	cmp	r3, r2
 801906c:	d802      	bhi.n	8019074 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801906e:	230a      	movs	r3, #10
 8019070:	617b      	str	r3, [r7, #20]
 8019072:	e02b      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	4a26      	ldr	r2, [pc, #152]	; (8019110 <USB_SetTurnaroundTime+0x134>)
 8019078:	4293      	cmp	r3, r2
 801907a:	d906      	bls.n	801908a <USB_SetTurnaroundTime+0xae>
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	4a25      	ldr	r2, [pc, #148]	; (8019114 <USB_SetTurnaroundTime+0x138>)
 8019080:	4293      	cmp	r3, r2
 8019082:	d202      	bcs.n	801908a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8019084:	2309      	movs	r3, #9
 8019086:	617b      	str	r3, [r7, #20]
 8019088:	e020      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801908a:	68bb      	ldr	r3, [r7, #8]
 801908c:	4a21      	ldr	r2, [pc, #132]	; (8019114 <USB_SetTurnaroundTime+0x138>)
 801908e:	4293      	cmp	r3, r2
 8019090:	d306      	bcc.n	80190a0 <USB_SetTurnaroundTime+0xc4>
 8019092:	68bb      	ldr	r3, [r7, #8]
 8019094:	4a20      	ldr	r2, [pc, #128]	; (8019118 <USB_SetTurnaroundTime+0x13c>)
 8019096:	4293      	cmp	r3, r2
 8019098:	d802      	bhi.n	80190a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801909a:	2308      	movs	r3, #8
 801909c:	617b      	str	r3, [r7, #20]
 801909e:	e015      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	4a1d      	ldr	r2, [pc, #116]	; (8019118 <USB_SetTurnaroundTime+0x13c>)
 80190a4:	4293      	cmp	r3, r2
 80190a6:	d906      	bls.n	80190b6 <USB_SetTurnaroundTime+0xda>
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	4a1c      	ldr	r2, [pc, #112]	; (801911c <USB_SetTurnaroundTime+0x140>)
 80190ac:	4293      	cmp	r3, r2
 80190ae:	d202      	bcs.n	80190b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80190b0:	2307      	movs	r3, #7
 80190b2:	617b      	str	r3, [r7, #20]
 80190b4:	e00a      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80190b6:	2306      	movs	r3, #6
 80190b8:	617b      	str	r3, [r7, #20]
 80190ba:	e007      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80190bc:	79fb      	ldrb	r3, [r7, #7]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d102      	bne.n	80190c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80190c2:	2309      	movs	r3, #9
 80190c4:	617b      	str	r3, [r7, #20]
 80190c6:	e001      	b.n	80190cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80190c8:	2309      	movs	r3, #9
 80190ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	68db      	ldr	r3, [r3, #12]
 80190d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	68da      	ldr	r2, [r3, #12]
 80190dc:	697b      	ldr	r3, [r7, #20]
 80190de:	029b      	lsls	r3, r3, #10
 80190e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80190e4:	431a      	orrs	r2, r3
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80190ea:	2300      	movs	r3, #0
}
 80190ec:	4618      	mov	r0, r3
 80190ee:	371c      	adds	r7, #28
 80190f0:	46bd      	mov	sp, r7
 80190f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f6:	4770      	bx	lr
 80190f8:	00d8acbf 	.word	0x00d8acbf
 80190fc:	00e4e1c0 	.word	0x00e4e1c0
 8019100:	00f42400 	.word	0x00f42400
 8019104:	01067380 	.word	0x01067380
 8019108:	011a499f 	.word	0x011a499f
 801910c:	01312cff 	.word	0x01312cff
 8019110:	014ca43f 	.word	0x014ca43f
 8019114:	016e3600 	.word	0x016e3600
 8019118:	01a6ab1f 	.word	0x01a6ab1f
 801911c:	01e84800 	.word	0x01e84800

08019120 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8019120:	b480      	push	{r7}
 8019122:	b083      	sub	sp, #12
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	689b      	ldr	r3, [r3, #8]
 801912c:	f043 0201 	orr.w	r2, r3, #1
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8019134:	2300      	movs	r3, #0
}
 8019136:	4618      	mov	r0, r3
 8019138:	370c      	adds	r7, #12
 801913a:	46bd      	mov	sp, r7
 801913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019140:	4770      	bx	lr

08019142 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8019142:	b480      	push	{r7}
 8019144:	b083      	sub	sp, #12
 8019146:	af00      	add	r7, sp, #0
 8019148:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	689b      	ldr	r3, [r3, #8]
 801914e:	f023 0201 	bic.w	r2, r3, #1
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8019156:	2300      	movs	r3, #0
}
 8019158:	4618      	mov	r0, r3
 801915a:	370c      	adds	r7, #12
 801915c:	46bd      	mov	sp, r7
 801915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019162:	4770      	bx	lr

08019164 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8019164:	b580      	push	{r7, lr}
 8019166:	b084      	sub	sp, #16
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
 801916c:	460b      	mov	r3, r1
 801916e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8019170:	2300      	movs	r3, #0
 8019172:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	68db      	ldr	r3, [r3, #12]
 8019178:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8019180:	78fb      	ldrb	r3, [r7, #3]
 8019182:	2b01      	cmp	r3, #1
 8019184:	d115      	bne.n	80191b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	68db      	ldr	r3, [r3, #12]
 801918a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8019192:	2001      	movs	r0, #1
 8019194:	f7f9 f936 	bl	8012404 <HAL_Delay>
      ms++;
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	3301      	adds	r3, #1
 801919c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801919e:	6878      	ldr	r0, [r7, #4]
 80191a0:	f001 f96c 	bl	801a47c <USB_GetMode>
 80191a4:	4603      	mov	r3, r0
 80191a6:	2b01      	cmp	r3, #1
 80191a8:	d01e      	beq.n	80191e8 <USB_SetCurrentMode+0x84>
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	2b31      	cmp	r3, #49	; 0x31
 80191ae:	d9f0      	bls.n	8019192 <USB_SetCurrentMode+0x2e>
 80191b0:	e01a      	b.n	80191e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80191b2:	78fb      	ldrb	r3, [r7, #3]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d115      	bne.n	80191e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	68db      	ldr	r3, [r3, #12]
 80191bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80191c4:	2001      	movs	r0, #1
 80191c6:	f7f9 f91d 	bl	8012404 <HAL_Delay>
      ms++;
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	3301      	adds	r3, #1
 80191ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80191d0:	6878      	ldr	r0, [r7, #4]
 80191d2:	f001 f953 	bl	801a47c <USB_GetMode>
 80191d6:	4603      	mov	r3, r0
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d005      	beq.n	80191e8 <USB_SetCurrentMode+0x84>
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	2b31      	cmp	r3, #49	; 0x31
 80191e0:	d9f0      	bls.n	80191c4 <USB_SetCurrentMode+0x60>
 80191e2:	e001      	b.n	80191e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80191e4:	2301      	movs	r3, #1
 80191e6:	e005      	b.n	80191f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	2b32      	cmp	r3, #50	; 0x32
 80191ec:	d101      	bne.n	80191f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80191ee:	2301      	movs	r3, #1
 80191f0:	e000      	b.n	80191f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80191f2:	2300      	movs	r3, #0
}
 80191f4:	4618      	mov	r0, r3
 80191f6:	3710      	adds	r7, #16
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}

080191fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80191fc:	b084      	sub	sp, #16
 80191fe:	b580      	push	{r7, lr}
 8019200:	b086      	sub	sp, #24
 8019202:	af00      	add	r7, sp, #0
 8019204:	6078      	str	r0, [r7, #4]
 8019206:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801920a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801920e:	2300      	movs	r3, #0
 8019210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8019216:	2300      	movs	r3, #0
 8019218:	613b      	str	r3, [r7, #16]
 801921a:	e009      	b.n	8019230 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801921c:	687a      	ldr	r2, [r7, #4]
 801921e:	693b      	ldr	r3, [r7, #16]
 8019220:	3340      	adds	r3, #64	; 0x40
 8019222:	009b      	lsls	r3, r3, #2
 8019224:	4413      	add	r3, r2
 8019226:	2200      	movs	r2, #0
 8019228:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801922a:	693b      	ldr	r3, [r7, #16]
 801922c:	3301      	adds	r3, #1
 801922e:	613b      	str	r3, [r7, #16]
 8019230:	693b      	ldr	r3, [r7, #16]
 8019232:	2b0e      	cmp	r3, #14
 8019234:	d9f2      	bls.n	801921c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8019236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019238:	2b00      	cmp	r3, #0
 801923a:	d11c      	bne.n	8019276 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019242:	685b      	ldr	r3, [r3, #4]
 8019244:	68fa      	ldr	r2, [r7, #12]
 8019246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801924a:	f043 0302 	orr.w	r3, r3, #2
 801924e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019254:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	601a      	str	r2, [r3, #0]
 8019274:	e005      	b.n	8019282 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801927a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019288:	461a      	mov	r2, r3
 801928a:	2300      	movs	r3, #0
 801928c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019294:	4619      	mov	r1, r3
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801929c:	461a      	mov	r2, r3
 801929e:	680b      	ldr	r3, [r1, #0]
 80192a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80192a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192a4:	2b01      	cmp	r3, #1
 80192a6:	d10c      	bne.n	80192c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80192a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d104      	bne.n	80192b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80192ae:	2100      	movs	r1, #0
 80192b0:	6878      	ldr	r0, [r7, #4]
 80192b2:	f000 f945 	bl	8019540 <USB_SetDevSpeed>
 80192b6:	e008      	b.n	80192ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80192b8:	2101      	movs	r1, #1
 80192ba:	6878      	ldr	r0, [r7, #4]
 80192bc:	f000 f940 	bl	8019540 <USB_SetDevSpeed>
 80192c0:	e003      	b.n	80192ca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80192c2:	2103      	movs	r1, #3
 80192c4:	6878      	ldr	r0, [r7, #4]
 80192c6:	f000 f93b 	bl	8019540 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80192ca:	2110      	movs	r1, #16
 80192cc:	6878      	ldr	r0, [r7, #4]
 80192ce:	f000 f8f3 	bl	80194b8 <USB_FlushTxFifo>
 80192d2:	4603      	mov	r3, r0
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d001      	beq.n	80192dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80192d8:	2301      	movs	r3, #1
 80192da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80192dc:	6878      	ldr	r0, [r7, #4]
 80192de:	f000 f90f 	bl	8019500 <USB_FlushRxFifo>
 80192e2:	4603      	mov	r3, r0
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d001      	beq.n	80192ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80192e8:	2301      	movs	r3, #1
 80192ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80192f2:	461a      	mov	r2, r3
 80192f4:	2300      	movs	r3, #0
 80192f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80192fe:	461a      	mov	r2, r3
 8019300:	2300      	movs	r3, #0
 8019302:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801930a:	461a      	mov	r2, r3
 801930c:	2300      	movs	r3, #0
 801930e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019310:	2300      	movs	r3, #0
 8019312:	613b      	str	r3, [r7, #16]
 8019314:	e043      	b.n	801939e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8019316:	693b      	ldr	r3, [r7, #16]
 8019318:	015a      	lsls	r2, r3, #5
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	4413      	add	r3, r2
 801931e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801932c:	d118      	bne.n	8019360 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801932e:	693b      	ldr	r3, [r7, #16]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d10a      	bne.n	801934a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8019334:	693b      	ldr	r3, [r7, #16]
 8019336:	015a      	lsls	r2, r3, #5
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	4413      	add	r3, r2
 801933c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019340:	461a      	mov	r2, r3
 8019342:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8019346:	6013      	str	r3, [r2, #0]
 8019348:	e013      	b.n	8019372 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801934a:	693b      	ldr	r3, [r7, #16]
 801934c:	015a      	lsls	r2, r3, #5
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	4413      	add	r3, r2
 8019352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019356:	461a      	mov	r2, r3
 8019358:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801935c:	6013      	str	r3, [r2, #0]
 801935e:	e008      	b.n	8019372 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8019360:	693b      	ldr	r3, [r7, #16]
 8019362:	015a      	lsls	r2, r3, #5
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	4413      	add	r3, r2
 8019368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801936c:	461a      	mov	r2, r3
 801936e:	2300      	movs	r3, #0
 8019370:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8019372:	693b      	ldr	r3, [r7, #16]
 8019374:	015a      	lsls	r2, r3, #5
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	4413      	add	r3, r2
 801937a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801937e:	461a      	mov	r2, r3
 8019380:	2300      	movs	r3, #0
 8019382:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8019384:	693b      	ldr	r3, [r7, #16]
 8019386:	015a      	lsls	r2, r3, #5
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	4413      	add	r3, r2
 801938c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019390:	461a      	mov	r2, r3
 8019392:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8019396:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019398:	693b      	ldr	r3, [r7, #16]
 801939a:	3301      	adds	r3, #1
 801939c:	613b      	str	r3, [r7, #16]
 801939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a0:	693a      	ldr	r2, [r7, #16]
 80193a2:	429a      	cmp	r2, r3
 80193a4:	d3b7      	bcc.n	8019316 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80193a6:	2300      	movs	r3, #0
 80193a8:	613b      	str	r3, [r7, #16]
 80193aa:	e043      	b.n	8019434 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80193ac:	693b      	ldr	r3, [r7, #16]
 80193ae:	015a      	lsls	r2, r3, #5
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	4413      	add	r3, r2
 80193b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80193be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80193c2:	d118      	bne.n	80193f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80193c4:	693b      	ldr	r3, [r7, #16]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d10a      	bne.n	80193e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80193ca:	693b      	ldr	r3, [r7, #16]
 80193cc:	015a      	lsls	r2, r3, #5
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	4413      	add	r3, r2
 80193d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80193d6:	461a      	mov	r2, r3
 80193d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80193dc:	6013      	str	r3, [r2, #0]
 80193de:	e013      	b.n	8019408 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80193e0:	693b      	ldr	r3, [r7, #16]
 80193e2:	015a      	lsls	r2, r3, #5
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	4413      	add	r3, r2
 80193e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80193ec:	461a      	mov	r2, r3
 80193ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80193f2:	6013      	str	r3, [r2, #0]
 80193f4:	e008      	b.n	8019408 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80193f6:	693b      	ldr	r3, [r7, #16]
 80193f8:	015a      	lsls	r2, r3, #5
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	4413      	add	r3, r2
 80193fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019402:	461a      	mov	r2, r3
 8019404:	2300      	movs	r3, #0
 8019406:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8019408:	693b      	ldr	r3, [r7, #16]
 801940a:	015a      	lsls	r2, r3, #5
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	4413      	add	r3, r2
 8019410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019414:	461a      	mov	r2, r3
 8019416:	2300      	movs	r3, #0
 8019418:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801941a:	693b      	ldr	r3, [r7, #16]
 801941c:	015a      	lsls	r2, r3, #5
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	4413      	add	r3, r2
 8019422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019426:	461a      	mov	r2, r3
 8019428:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801942c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801942e:	693b      	ldr	r3, [r7, #16]
 8019430:	3301      	adds	r3, #1
 8019432:	613b      	str	r3, [r7, #16]
 8019434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019436:	693a      	ldr	r2, [r7, #16]
 8019438:	429a      	cmp	r2, r3
 801943a:	d3b7      	bcc.n	80193ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019442:	691b      	ldr	r3, [r3, #16]
 8019444:	68fa      	ldr	r2, [r7, #12]
 8019446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801944a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801944e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	2200      	movs	r2, #0
 8019454:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801945c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019460:	2b00      	cmp	r3, #0
 8019462:	d105      	bne.n	8019470 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	699b      	ldr	r3, [r3, #24]
 8019468:	f043 0210 	orr.w	r2, r3, #16
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	699a      	ldr	r2, [r3, #24]
 8019474:	4b0f      	ldr	r3, [pc, #60]	; (80194b4 <USB_DevInit+0x2b8>)
 8019476:	4313      	orrs	r3, r2
 8019478:	687a      	ldr	r2, [r7, #4]
 801947a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801947e:	2b00      	cmp	r3, #0
 8019480:	d005      	beq.n	801948e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	699b      	ldr	r3, [r3, #24]
 8019486:	f043 0208 	orr.w	r2, r3, #8
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801948e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019490:	2b01      	cmp	r3, #1
 8019492:	d107      	bne.n	80194a4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	699b      	ldr	r3, [r3, #24]
 8019498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801949c:	f043 0304 	orr.w	r3, r3, #4
 80194a0:	687a      	ldr	r2, [r7, #4]
 80194a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80194a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3718      	adds	r7, #24
 80194aa:	46bd      	mov	sp, r7
 80194ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80194b0:	b004      	add	sp, #16
 80194b2:	4770      	bx	lr
 80194b4:	803c3800 	.word	0x803c3800

080194b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80194b8:	b480      	push	{r7}
 80194ba:	b085      	sub	sp, #20
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
 80194c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80194c2:	2300      	movs	r3, #0
 80194c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	019b      	lsls	r3, r3, #6
 80194ca:	f043 0220 	orr.w	r2, r3, #32
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	3301      	adds	r3, #1
 80194d6:	60fb      	str	r3, [r7, #12]
 80194d8:	4a08      	ldr	r2, [pc, #32]	; (80194fc <USB_FlushTxFifo+0x44>)
 80194da:	4293      	cmp	r3, r2
 80194dc:	d901      	bls.n	80194e2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80194de:	2303      	movs	r3, #3
 80194e0:	e006      	b.n	80194f0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	691b      	ldr	r3, [r3, #16]
 80194e6:	f003 0320 	and.w	r3, r3, #32
 80194ea:	2b20      	cmp	r3, #32
 80194ec:	d0f1      	beq.n	80194d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80194ee:	2300      	movs	r3, #0
}
 80194f0:	4618      	mov	r0, r3
 80194f2:	3714      	adds	r7, #20
 80194f4:	46bd      	mov	sp, r7
 80194f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194fa:	4770      	bx	lr
 80194fc:	00030d40 	.word	0x00030d40

08019500 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8019500:	b480      	push	{r7}
 8019502:	b085      	sub	sp, #20
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019508:	2300      	movs	r3, #0
 801950a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2210      	movs	r2, #16
 8019510:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	3301      	adds	r3, #1
 8019516:	60fb      	str	r3, [r7, #12]
 8019518:	4a08      	ldr	r2, [pc, #32]	; (801953c <USB_FlushRxFifo+0x3c>)
 801951a:	4293      	cmp	r3, r2
 801951c:	d901      	bls.n	8019522 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801951e:	2303      	movs	r3, #3
 8019520:	e006      	b.n	8019530 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	691b      	ldr	r3, [r3, #16]
 8019526:	f003 0310 	and.w	r3, r3, #16
 801952a:	2b10      	cmp	r3, #16
 801952c:	d0f1      	beq.n	8019512 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801952e:	2300      	movs	r3, #0
}
 8019530:	4618      	mov	r0, r3
 8019532:	3714      	adds	r7, #20
 8019534:	46bd      	mov	sp, r7
 8019536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801953a:	4770      	bx	lr
 801953c:	00030d40 	.word	0x00030d40

08019540 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8019540:	b480      	push	{r7}
 8019542:	b085      	sub	sp, #20
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
 8019548:	460b      	mov	r3, r1
 801954a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019556:	681a      	ldr	r2, [r3, #0]
 8019558:	78fb      	ldrb	r3, [r7, #3]
 801955a:	68f9      	ldr	r1, [r7, #12]
 801955c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019560:	4313      	orrs	r3, r2
 8019562:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8019564:	2300      	movs	r3, #0
}
 8019566:	4618      	mov	r0, r3
 8019568:	3714      	adds	r7, #20
 801956a:	46bd      	mov	sp, r7
 801956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019570:	4770      	bx	lr

08019572 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8019572:	b480      	push	{r7}
 8019574:	b087      	sub	sp, #28
 8019576:	af00      	add	r7, sp, #0
 8019578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801957e:	693b      	ldr	r3, [r7, #16]
 8019580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019584:	689b      	ldr	r3, [r3, #8]
 8019586:	f003 0306 	and.w	r3, r3, #6
 801958a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d102      	bne.n	8019598 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8019592:	2300      	movs	r3, #0
 8019594:	75fb      	strb	r3, [r7, #23]
 8019596:	e00a      	b.n	80195ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	2b02      	cmp	r3, #2
 801959c:	d002      	beq.n	80195a4 <USB_GetDevSpeed+0x32>
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	2b06      	cmp	r3, #6
 80195a2:	d102      	bne.n	80195aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80195a4:	2302      	movs	r3, #2
 80195a6:	75fb      	strb	r3, [r7, #23]
 80195a8:	e001      	b.n	80195ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80195aa:	230f      	movs	r3, #15
 80195ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80195ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80195b0:	4618      	mov	r0, r3
 80195b2:	371c      	adds	r7, #28
 80195b4:	46bd      	mov	sp, r7
 80195b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ba:	4770      	bx	lr

080195bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80195bc:	b480      	push	{r7}
 80195be:	b085      	sub	sp, #20
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
 80195c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	781b      	ldrb	r3, [r3, #0]
 80195ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	785b      	ldrb	r3, [r3, #1]
 80195d4:	2b01      	cmp	r3, #1
 80195d6:	d13a      	bne.n	801964e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80195de:	69da      	ldr	r2, [r3, #28]
 80195e0:	683b      	ldr	r3, [r7, #0]
 80195e2:	781b      	ldrb	r3, [r3, #0]
 80195e4:	f003 030f 	and.w	r3, r3, #15
 80195e8:	2101      	movs	r1, #1
 80195ea:	fa01 f303 	lsl.w	r3, r1, r3
 80195ee:	b29b      	uxth	r3, r3
 80195f0:	68f9      	ldr	r1, [r7, #12]
 80195f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80195f6:	4313      	orrs	r3, r2
 80195f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80195fa:	68bb      	ldr	r3, [r7, #8]
 80195fc:	015a      	lsls	r2, r3, #5
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	4413      	add	r3, r2
 8019602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801960c:	2b00      	cmp	r3, #0
 801960e:	d155      	bne.n	80196bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019610:	68bb      	ldr	r3, [r7, #8]
 8019612:	015a      	lsls	r2, r3, #5
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	4413      	add	r3, r2
 8019618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801961c:	681a      	ldr	r2, [r3, #0]
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	689b      	ldr	r3, [r3, #8]
 8019622:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	78db      	ldrb	r3, [r3, #3]
 801962a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801962c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801962e:	68bb      	ldr	r3, [r7, #8]
 8019630:	059b      	lsls	r3, r3, #22
 8019632:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019634:	4313      	orrs	r3, r2
 8019636:	68ba      	ldr	r2, [r7, #8]
 8019638:	0151      	lsls	r1, r2, #5
 801963a:	68fa      	ldr	r2, [r7, #12]
 801963c:	440a      	add	r2, r1
 801963e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801964a:	6013      	str	r3, [r2, #0]
 801964c:	e036      	b.n	80196bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019654:	69da      	ldr	r2, [r3, #28]
 8019656:	683b      	ldr	r3, [r7, #0]
 8019658:	781b      	ldrb	r3, [r3, #0]
 801965a:	f003 030f 	and.w	r3, r3, #15
 801965e:	2101      	movs	r1, #1
 8019660:	fa01 f303 	lsl.w	r3, r1, r3
 8019664:	041b      	lsls	r3, r3, #16
 8019666:	68f9      	ldr	r1, [r7, #12]
 8019668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801966c:	4313      	orrs	r3, r2
 801966e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	015a      	lsls	r2, r3, #5
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	4413      	add	r3, r2
 8019678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019682:	2b00      	cmp	r3, #0
 8019684:	d11a      	bne.n	80196bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8019686:	68bb      	ldr	r3, [r7, #8]
 8019688:	015a      	lsls	r2, r3, #5
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	4413      	add	r3, r2
 801968e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019692:	681a      	ldr	r2, [r3, #0]
 8019694:	683b      	ldr	r3, [r7, #0]
 8019696:	689b      	ldr	r3, [r3, #8]
 8019698:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	78db      	ldrb	r3, [r3, #3]
 80196a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80196a2:	430b      	orrs	r3, r1
 80196a4:	4313      	orrs	r3, r2
 80196a6:	68ba      	ldr	r2, [r7, #8]
 80196a8:	0151      	lsls	r1, r2, #5
 80196aa:	68fa      	ldr	r2, [r7, #12]
 80196ac:	440a      	add	r2, r1
 80196ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80196b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80196b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80196ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80196bc:	2300      	movs	r3, #0
}
 80196be:	4618      	mov	r0, r3
 80196c0:	3714      	adds	r7, #20
 80196c2:	46bd      	mov	sp, r7
 80196c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c8:	4770      	bx	lr
	...

080196cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80196cc:	b480      	push	{r7}
 80196ce:	b085      	sub	sp, #20
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	6078      	str	r0, [r7, #4]
 80196d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	781b      	ldrb	r3, [r3, #0]
 80196de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80196e0:	683b      	ldr	r3, [r7, #0]
 80196e2:	785b      	ldrb	r3, [r3, #1]
 80196e4:	2b01      	cmp	r3, #1
 80196e6:	d161      	bne.n	80197ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80196e8:	68bb      	ldr	r3, [r7, #8]
 80196ea:	015a      	lsls	r2, r3, #5
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	4413      	add	r3, r2
 80196f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80196fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80196fe:	d11f      	bne.n	8019740 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8019700:	68bb      	ldr	r3, [r7, #8]
 8019702:	015a      	lsls	r2, r3, #5
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	4413      	add	r3, r2
 8019708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	68ba      	ldr	r2, [r7, #8]
 8019710:	0151      	lsls	r1, r2, #5
 8019712:	68fa      	ldr	r2, [r7, #12]
 8019714:	440a      	add	r2, r1
 8019716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801971a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801971e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8019720:	68bb      	ldr	r3, [r7, #8]
 8019722:	015a      	lsls	r2, r3, #5
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	4413      	add	r3, r2
 8019728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	68ba      	ldr	r2, [r7, #8]
 8019730:	0151      	lsls	r1, r2, #5
 8019732:	68fa      	ldr	r2, [r7, #12]
 8019734:	440a      	add	r2, r1
 8019736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801973a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801973e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019748:	683b      	ldr	r3, [r7, #0]
 801974a:	781b      	ldrb	r3, [r3, #0]
 801974c:	f003 030f 	and.w	r3, r3, #15
 8019750:	2101      	movs	r1, #1
 8019752:	fa01 f303 	lsl.w	r3, r1, r3
 8019756:	b29b      	uxth	r3, r3
 8019758:	43db      	mvns	r3, r3
 801975a:	68f9      	ldr	r1, [r7, #12]
 801975c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019760:	4013      	ands	r3, r2
 8019762:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801976a:	69da      	ldr	r2, [r3, #28]
 801976c:	683b      	ldr	r3, [r7, #0]
 801976e:	781b      	ldrb	r3, [r3, #0]
 8019770:	f003 030f 	and.w	r3, r3, #15
 8019774:	2101      	movs	r1, #1
 8019776:	fa01 f303 	lsl.w	r3, r1, r3
 801977a:	b29b      	uxth	r3, r3
 801977c:	43db      	mvns	r3, r3
 801977e:	68f9      	ldr	r1, [r7, #12]
 8019780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019784:	4013      	ands	r3, r2
 8019786:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8019788:	68bb      	ldr	r3, [r7, #8]
 801978a:	015a      	lsls	r2, r3, #5
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	4413      	add	r3, r2
 8019790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019794:	681a      	ldr	r2, [r3, #0]
 8019796:	68bb      	ldr	r3, [r7, #8]
 8019798:	0159      	lsls	r1, r3, #5
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	440b      	add	r3, r1
 801979e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80197a2:	4619      	mov	r1, r3
 80197a4:	4b35      	ldr	r3, [pc, #212]	; (801987c <USB_DeactivateEndpoint+0x1b0>)
 80197a6:	4013      	ands	r3, r2
 80197a8:	600b      	str	r3, [r1, #0]
 80197aa:	e060      	b.n	801986e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80197ac:	68bb      	ldr	r3, [r7, #8]
 80197ae:	015a      	lsls	r2, r3, #5
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	4413      	add	r3, r2
 80197b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80197be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80197c2:	d11f      	bne.n	8019804 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	015a      	lsls	r2, r3, #5
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	4413      	add	r3, r2
 80197cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	68ba      	ldr	r2, [r7, #8]
 80197d4:	0151      	lsls	r1, r2, #5
 80197d6:	68fa      	ldr	r2, [r7, #12]
 80197d8:	440a      	add	r2, r1
 80197da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80197de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80197e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80197e4:	68bb      	ldr	r3, [r7, #8]
 80197e6:	015a      	lsls	r2, r3, #5
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	4413      	add	r3, r2
 80197ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	68ba      	ldr	r2, [r7, #8]
 80197f4:	0151      	lsls	r1, r2, #5
 80197f6:	68fa      	ldr	r2, [r7, #12]
 80197f8:	440a      	add	r2, r1
 80197fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80197fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019802:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801980a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801980c:	683b      	ldr	r3, [r7, #0]
 801980e:	781b      	ldrb	r3, [r3, #0]
 8019810:	f003 030f 	and.w	r3, r3, #15
 8019814:	2101      	movs	r1, #1
 8019816:	fa01 f303 	lsl.w	r3, r1, r3
 801981a:	041b      	lsls	r3, r3, #16
 801981c:	43db      	mvns	r3, r3
 801981e:	68f9      	ldr	r1, [r7, #12]
 8019820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019824:	4013      	ands	r3, r2
 8019826:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801982e:	69da      	ldr	r2, [r3, #28]
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	781b      	ldrb	r3, [r3, #0]
 8019834:	f003 030f 	and.w	r3, r3, #15
 8019838:	2101      	movs	r1, #1
 801983a:	fa01 f303 	lsl.w	r3, r1, r3
 801983e:	041b      	lsls	r3, r3, #16
 8019840:	43db      	mvns	r3, r3
 8019842:	68f9      	ldr	r1, [r7, #12]
 8019844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019848:	4013      	ands	r3, r2
 801984a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801984c:	68bb      	ldr	r3, [r7, #8]
 801984e:	015a      	lsls	r2, r3, #5
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	4413      	add	r3, r2
 8019854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019858:	681a      	ldr	r2, [r3, #0]
 801985a:	68bb      	ldr	r3, [r7, #8]
 801985c:	0159      	lsls	r1, r3, #5
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	440b      	add	r3, r1
 8019862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019866:	4619      	mov	r1, r3
 8019868:	4b05      	ldr	r3, [pc, #20]	; (8019880 <USB_DeactivateEndpoint+0x1b4>)
 801986a:	4013      	ands	r3, r2
 801986c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801986e:	2300      	movs	r3, #0
}
 8019870:	4618      	mov	r0, r3
 8019872:	3714      	adds	r7, #20
 8019874:	46bd      	mov	sp, r7
 8019876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801987a:	4770      	bx	lr
 801987c:	ec337800 	.word	0xec337800
 8019880:	eff37800 	.word	0xeff37800

08019884 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b08a      	sub	sp, #40	; 0x28
 8019888:	af02      	add	r7, sp, #8
 801988a:	60f8      	str	r0, [r7, #12]
 801988c:	60b9      	str	r1, [r7, #8]
 801988e:	4613      	mov	r3, r2
 8019890:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	781b      	ldrb	r3, [r3, #0]
 801989a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801989c:	68bb      	ldr	r3, [r7, #8]
 801989e:	785b      	ldrb	r3, [r3, #1]
 80198a0:	2b01      	cmp	r3, #1
 80198a2:	f040 815c 	bne.w	8019b5e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80198a6:	68bb      	ldr	r3, [r7, #8]
 80198a8:	695b      	ldr	r3, [r3, #20]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d132      	bne.n	8019914 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80198ae:	69bb      	ldr	r3, [r7, #24]
 80198b0:	015a      	lsls	r2, r3, #5
 80198b2:	69fb      	ldr	r3, [r7, #28]
 80198b4:	4413      	add	r3, r2
 80198b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198ba:	691b      	ldr	r3, [r3, #16]
 80198bc:	69ba      	ldr	r2, [r7, #24]
 80198be:	0151      	lsls	r1, r2, #5
 80198c0:	69fa      	ldr	r2, [r7, #28]
 80198c2:	440a      	add	r2, r1
 80198c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80198c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80198cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80198d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80198d2:	69bb      	ldr	r3, [r7, #24]
 80198d4:	015a      	lsls	r2, r3, #5
 80198d6:	69fb      	ldr	r3, [r7, #28]
 80198d8:	4413      	add	r3, r2
 80198da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198de:	691b      	ldr	r3, [r3, #16]
 80198e0:	69ba      	ldr	r2, [r7, #24]
 80198e2:	0151      	lsls	r1, r2, #5
 80198e4:	69fa      	ldr	r2, [r7, #28]
 80198e6:	440a      	add	r2, r1
 80198e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80198ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80198f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80198f2:	69bb      	ldr	r3, [r7, #24]
 80198f4:	015a      	lsls	r2, r3, #5
 80198f6:	69fb      	ldr	r3, [r7, #28]
 80198f8:	4413      	add	r3, r2
 80198fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198fe:	691b      	ldr	r3, [r3, #16]
 8019900:	69ba      	ldr	r2, [r7, #24]
 8019902:	0151      	lsls	r1, r2, #5
 8019904:	69fa      	ldr	r2, [r7, #28]
 8019906:	440a      	add	r2, r1
 8019908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801990c:	0cdb      	lsrs	r3, r3, #19
 801990e:	04db      	lsls	r3, r3, #19
 8019910:	6113      	str	r3, [r2, #16]
 8019912:	e074      	b.n	80199fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019914:	69bb      	ldr	r3, [r7, #24]
 8019916:	015a      	lsls	r2, r3, #5
 8019918:	69fb      	ldr	r3, [r7, #28]
 801991a:	4413      	add	r3, r2
 801991c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019920:	691b      	ldr	r3, [r3, #16]
 8019922:	69ba      	ldr	r2, [r7, #24]
 8019924:	0151      	lsls	r1, r2, #5
 8019926:	69fa      	ldr	r2, [r7, #28]
 8019928:	440a      	add	r2, r1
 801992a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801992e:	0cdb      	lsrs	r3, r3, #19
 8019930:	04db      	lsls	r3, r3, #19
 8019932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8019934:	69bb      	ldr	r3, [r7, #24]
 8019936:	015a      	lsls	r2, r3, #5
 8019938:	69fb      	ldr	r3, [r7, #28]
 801993a:	4413      	add	r3, r2
 801993c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019940:	691b      	ldr	r3, [r3, #16]
 8019942:	69ba      	ldr	r2, [r7, #24]
 8019944:	0151      	lsls	r1, r2, #5
 8019946:	69fa      	ldr	r2, [r7, #28]
 8019948:	440a      	add	r2, r1
 801994a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801994e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8019952:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8019956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8019958:	69bb      	ldr	r3, [r7, #24]
 801995a:	015a      	lsls	r2, r3, #5
 801995c:	69fb      	ldr	r3, [r7, #28]
 801995e:	4413      	add	r3, r2
 8019960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019964:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	6959      	ldr	r1, [r3, #20]
 801996a:	68bb      	ldr	r3, [r7, #8]
 801996c:	689b      	ldr	r3, [r3, #8]
 801996e:	440b      	add	r3, r1
 8019970:	1e59      	subs	r1, r3, #1
 8019972:	68bb      	ldr	r3, [r7, #8]
 8019974:	689b      	ldr	r3, [r3, #8]
 8019976:	fbb1 f3f3 	udiv	r3, r1, r3
 801997a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801997c:	4b9d      	ldr	r3, [pc, #628]	; (8019bf4 <USB_EPStartXfer+0x370>)
 801997e:	400b      	ands	r3, r1
 8019980:	69b9      	ldr	r1, [r7, #24]
 8019982:	0148      	lsls	r0, r1, #5
 8019984:	69f9      	ldr	r1, [r7, #28]
 8019986:	4401      	add	r1, r0
 8019988:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801998c:	4313      	orrs	r3, r2
 801998e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8019990:	69bb      	ldr	r3, [r7, #24]
 8019992:	015a      	lsls	r2, r3, #5
 8019994:	69fb      	ldr	r3, [r7, #28]
 8019996:	4413      	add	r3, r2
 8019998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801999c:	691a      	ldr	r2, [r3, #16]
 801999e:	68bb      	ldr	r3, [r7, #8]
 80199a0:	695b      	ldr	r3, [r3, #20]
 80199a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80199a6:	69b9      	ldr	r1, [r7, #24]
 80199a8:	0148      	lsls	r0, r1, #5
 80199aa:	69f9      	ldr	r1, [r7, #28]
 80199ac:	4401      	add	r1, r0
 80199ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80199b2:	4313      	orrs	r3, r2
 80199b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80199b6:	68bb      	ldr	r3, [r7, #8]
 80199b8:	78db      	ldrb	r3, [r3, #3]
 80199ba:	2b01      	cmp	r3, #1
 80199bc:	d11f      	bne.n	80199fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80199be:	69bb      	ldr	r3, [r7, #24]
 80199c0:	015a      	lsls	r2, r3, #5
 80199c2:	69fb      	ldr	r3, [r7, #28]
 80199c4:	4413      	add	r3, r2
 80199c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199ca:	691b      	ldr	r3, [r3, #16]
 80199cc:	69ba      	ldr	r2, [r7, #24]
 80199ce:	0151      	lsls	r1, r2, #5
 80199d0:	69fa      	ldr	r2, [r7, #28]
 80199d2:	440a      	add	r2, r1
 80199d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80199d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80199dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80199de:	69bb      	ldr	r3, [r7, #24]
 80199e0:	015a      	lsls	r2, r3, #5
 80199e2:	69fb      	ldr	r3, [r7, #28]
 80199e4:	4413      	add	r3, r2
 80199e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199ea:	691b      	ldr	r3, [r3, #16]
 80199ec:	69ba      	ldr	r2, [r7, #24]
 80199ee:	0151      	lsls	r1, r2, #5
 80199f0:	69fa      	ldr	r2, [r7, #28]
 80199f2:	440a      	add	r2, r1
 80199f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80199f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80199fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80199fe:	79fb      	ldrb	r3, [r7, #7]
 8019a00:	2b01      	cmp	r3, #1
 8019a02:	d14b      	bne.n	8019a9c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8019a04:	68bb      	ldr	r3, [r7, #8]
 8019a06:	691b      	ldr	r3, [r3, #16]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d009      	beq.n	8019a20 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8019a0c:	69bb      	ldr	r3, [r7, #24]
 8019a0e:	015a      	lsls	r2, r3, #5
 8019a10:	69fb      	ldr	r3, [r7, #28]
 8019a12:	4413      	add	r3, r2
 8019a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a18:	461a      	mov	r2, r3
 8019a1a:	68bb      	ldr	r3, [r7, #8]
 8019a1c:	691b      	ldr	r3, [r3, #16]
 8019a1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8019a20:	68bb      	ldr	r3, [r7, #8]
 8019a22:	78db      	ldrb	r3, [r3, #3]
 8019a24:	2b01      	cmp	r3, #1
 8019a26:	d128      	bne.n	8019a7a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8019a28:	69fb      	ldr	r3, [r7, #28]
 8019a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019a2e:	689b      	ldr	r3, [r3, #8]
 8019a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d110      	bne.n	8019a5a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8019a38:	69bb      	ldr	r3, [r7, #24]
 8019a3a:	015a      	lsls	r2, r3, #5
 8019a3c:	69fb      	ldr	r3, [r7, #28]
 8019a3e:	4413      	add	r3, r2
 8019a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	69ba      	ldr	r2, [r7, #24]
 8019a48:	0151      	lsls	r1, r2, #5
 8019a4a:	69fa      	ldr	r2, [r7, #28]
 8019a4c:	440a      	add	r2, r1
 8019a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019a52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8019a56:	6013      	str	r3, [r2, #0]
 8019a58:	e00f      	b.n	8019a7a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8019a5a:	69bb      	ldr	r3, [r7, #24]
 8019a5c:	015a      	lsls	r2, r3, #5
 8019a5e:	69fb      	ldr	r3, [r7, #28]
 8019a60:	4413      	add	r3, r2
 8019a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	69ba      	ldr	r2, [r7, #24]
 8019a6a:	0151      	lsls	r1, r2, #5
 8019a6c:	69fa      	ldr	r2, [r7, #28]
 8019a6e:	440a      	add	r2, r1
 8019a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019a78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019a7a:	69bb      	ldr	r3, [r7, #24]
 8019a7c:	015a      	lsls	r2, r3, #5
 8019a7e:	69fb      	ldr	r3, [r7, #28]
 8019a80:	4413      	add	r3, r2
 8019a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	69ba      	ldr	r2, [r7, #24]
 8019a8a:	0151      	lsls	r1, r2, #5
 8019a8c:	69fa      	ldr	r2, [r7, #28]
 8019a8e:	440a      	add	r2, r1
 8019a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019a94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019a98:	6013      	str	r3, [r2, #0]
 8019a9a:	e12f      	b.n	8019cfc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019a9c:	69bb      	ldr	r3, [r7, #24]
 8019a9e:	015a      	lsls	r2, r3, #5
 8019aa0:	69fb      	ldr	r3, [r7, #28]
 8019aa2:	4413      	add	r3, r2
 8019aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	69ba      	ldr	r2, [r7, #24]
 8019aac:	0151      	lsls	r1, r2, #5
 8019aae:	69fa      	ldr	r2, [r7, #28]
 8019ab0:	440a      	add	r2, r1
 8019ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019ab6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019aba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019abc:	68bb      	ldr	r3, [r7, #8]
 8019abe:	78db      	ldrb	r3, [r3, #3]
 8019ac0:	2b01      	cmp	r3, #1
 8019ac2:	d015      	beq.n	8019af0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8019ac4:	68bb      	ldr	r3, [r7, #8]
 8019ac6:	695b      	ldr	r3, [r3, #20]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	f000 8117 	beq.w	8019cfc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8019ace:	69fb      	ldr	r3, [r7, #28]
 8019ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019ad6:	68bb      	ldr	r3, [r7, #8]
 8019ad8:	781b      	ldrb	r3, [r3, #0]
 8019ada:	f003 030f 	and.w	r3, r3, #15
 8019ade:	2101      	movs	r1, #1
 8019ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8019ae4:	69f9      	ldr	r1, [r7, #28]
 8019ae6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019aea:	4313      	orrs	r3, r2
 8019aec:	634b      	str	r3, [r1, #52]	; 0x34
 8019aee:	e105      	b.n	8019cfc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8019af0:	69fb      	ldr	r3, [r7, #28]
 8019af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019af6:	689b      	ldr	r3, [r3, #8]
 8019af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d110      	bne.n	8019b22 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8019b00:	69bb      	ldr	r3, [r7, #24]
 8019b02:	015a      	lsls	r2, r3, #5
 8019b04:	69fb      	ldr	r3, [r7, #28]
 8019b06:	4413      	add	r3, r2
 8019b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	69ba      	ldr	r2, [r7, #24]
 8019b10:	0151      	lsls	r1, r2, #5
 8019b12:	69fa      	ldr	r2, [r7, #28]
 8019b14:	440a      	add	r2, r1
 8019b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019b1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8019b1e:	6013      	str	r3, [r2, #0]
 8019b20:	e00f      	b.n	8019b42 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8019b22:	69bb      	ldr	r3, [r7, #24]
 8019b24:	015a      	lsls	r2, r3, #5
 8019b26:	69fb      	ldr	r3, [r7, #28]
 8019b28:	4413      	add	r3, r2
 8019b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	69ba      	ldr	r2, [r7, #24]
 8019b32:	0151      	lsls	r1, r2, #5
 8019b34:	69fa      	ldr	r2, [r7, #28]
 8019b36:	440a      	add	r2, r1
 8019b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019b40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8019b42:	68bb      	ldr	r3, [r7, #8]
 8019b44:	68d9      	ldr	r1, [r3, #12]
 8019b46:	68bb      	ldr	r3, [r7, #8]
 8019b48:	781a      	ldrb	r2, [r3, #0]
 8019b4a:	68bb      	ldr	r3, [r7, #8]
 8019b4c:	695b      	ldr	r3, [r3, #20]
 8019b4e:	b298      	uxth	r0, r3
 8019b50:	79fb      	ldrb	r3, [r7, #7]
 8019b52:	9300      	str	r3, [sp, #0]
 8019b54:	4603      	mov	r3, r0
 8019b56:	68f8      	ldr	r0, [r7, #12]
 8019b58:	f000 fa2b 	bl	8019fb2 <USB_WritePacket>
 8019b5c:	e0ce      	b.n	8019cfc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8019b5e:	69bb      	ldr	r3, [r7, #24]
 8019b60:	015a      	lsls	r2, r3, #5
 8019b62:	69fb      	ldr	r3, [r7, #28]
 8019b64:	4413      	add	r3, r2
 8019b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b6a:	691b      	ldr	r3, [r3, #16]
 8019b6c:	69ba      	ldr	r2, [r7, #24]
 8019b6e:	0151      	lsls	r1, r2, #5
 8019b70:	69fa      	ldr	r2, [r7, #28]
 8019b72:	440a      	add	r2, r1
 8019b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019b78:	0cdb      	lsrs	r3, r3, #19
 8019b7a:	04db      	lsls	r3, r3, #19
 8019b7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8019b7e:	69bb      	ldr	r3, [r7, #24]
 8019b80:	015a      	lsls	r2, r3, #5
 8019b82:	69fb      	ldr	r3, [r7, #28]
 8019b84:	4413      	add	r3, r2
 8019b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b8a:	691b      	ldr	r3, [r3, #16]
 8019b8c:	69ba      	ldr	r2, [r7, #24]
 8019b8e:	0151      	lsls	r1, r2, #5
 8019b90:	69fa      	ldr	r2, [r7, #28]
 8019b92:	440a      	add	r2, r1
 8019b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019b98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8019b9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8019ba0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	695b      	ldr	r3, [r3, #20]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d126      	bne.n	8019bf8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8019baa:	69bb      	ldr	r3, [r7, #24]
 8019bac:	015a      	lsls	r2, r3, #5
 8019bae:	69fb      	ldr	r3, [r7, #28]
 8019bb0:	4413      	add	r3, r2
 8019bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019bb6:	691a      	ldr	r2, [r3, #16]
 8019bb8:	68bb      	ldr	r3, [r7, #8]
 8019bba:	689b      	ldr	r3, [r3, #8]
 8019bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019bc0:	69b9      	ldr	r1, [r7, #24]
 8019bc2:	0148      	lsls	r0, r1, #5
 8019bc4:	69f9      	ldr	r1, [r7, #28]
 8019bc6:	4401      	add	r1, r0
 8019bc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019bcc:	4313      	orrs	r3, r2
 8019bce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8019bd0:	69bb      	ldr	r3, [r7, #24]
 8019bd2:	015a      	lsls	r2, r3, #5
 8019bd4:	69fb      	ldr	r3, [r7, #28]
 8019bd6:	4413      	add	r3, r2
 8019bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019bdc:	691b      	ldr	r3, [r3, #16]
 8019bde:	69ba      	ldr	r2, [r7, #24]
 8019be0:	0151      	lsls	r1, r2, #5
 8019be2:	69fa      	ldr	r2, [r7, #28]
 8019be4:	440a      	add	r2, r1
 8019be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019bea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019bee:	6113      	str	r3, [r2, #16]
 8019bf0:	e036      	b.n	8019c60 <USB_EPStartXfer+0x3dc>
 8019bf2:	bf00      	nop
 8019bf4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8019bf8:	68bb      	ldr	r3, [r7, #8]
 8019bfa:	695a      	ldr	r2, [r3, #20]
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	689b      	ldr	r3, [r3, #8]
 8019c00:	4413      	add	r3, r2
 8019c02:	1e5a      	subs	r2, r3, #1
 8019c04:	68bb      	ldr	r3, [r7, #8]
 8019c06:	689b      	ldr	r3, [r3, #8]
 8019c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c0c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8019c0e:	69bb      	ldr	r3, [r7, #24]
 8019c10:	015a      	lsls	r2, r3, #5
 8019c12:	69fb      	ldr	r3, [r7, #28]
 8019c14:	4413      	add	r3, r2
 8019c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c1a:	691a      	ldr	r2, [r3, #16]
 8019c1c:	8afb      	ldrh	r3, [r7, #22]
 8019c1e:	04d9      	lsls	r1, r3, #19
 8019c20:	4b39      	ldr	r3, [pc, #228]	; (8019d08 <USB_EPStartXfer+0x484>)
 8019c22:	400b      	ands	r3, r1
 8019c24:	69b9      	ldr	r1, [r7, #24]
 8019c26:	0148      	lsls	r0, r1, #5
 8019c28:	69f9      	ldr	r1, [r7, #28]
 8019c2a:	4401      	add	r1, r0
 8019c2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019c30:	4313      	orrs	r3, r2
 8019c32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8019c34:	69bb      	ldr	r3, [r7, #24]
 8019c36:	015a      	lsls	r2, r3, #5
 8019c38:	69fb      	ldr	r3, [r7, #28]
 8019c3a:	4413      	add	r3, r2
 8019c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c40:	691a      	ldr	r2, [r3, #16]
 8019c42:	68bb      	ldr	r3, [r7, #8]
 8019c44:	689b      	ldr	r3, [r3, #8]
 8019c46:	8af9      	ldrh	r1, [r7, #22]
 8019c48:	fb01 f303 	mul.w	r3, r1, r3
 8019c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019c50:	69b9      	ldr	r1, [r7, #24]
 8019c52:	0148      	lsls	r0, r1, #5
 8019c54:	69f9      	ldr	r1, [r7, #28]
 8019c56:	4401      	add	r1, r0
 8019c58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019c5c:	4313      	orrs	r3, r2
 8019c5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8019c60:	79fb      	ldrb	r3, [r7, #7]
 8019c62:	2b01      	cmp	r3, #1
 8019c64:	d10d      	bne.n	8019c82 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8019c66:	68bb      	ldr	r3, [r7, #8]
 8019c68:	68db      	ldr	r3, [r3, #12]
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d009      	beq.n	8019c82 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	68d9      	ldr	r1, [r3, #12]
 8019c72:	69bb      	ldr	r3, [r7, #24]
 8019c74:	015a      	lsls	r2, r3, #5
 8019c76:	69fb      	ldr	r3, [r7, #28]
 8019c78:	4413      	add	r3, r2
 8019c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c7e:	460a      	mov	r2, r1
 8019c80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8019c82:	68bb      	ldr	r3, [r7, #8]
 8019c84:	78db      	ldrb	r3, [r3, #3]
 8019c86:	2b01      	cmp	r3, #1
 8019c88:	d128      	bne.n	8019cdc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8019c8a:	69fb      	ldr	r3, [r7, #28]
 8019c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019c90:	689b      	ldr	r3, [r3, #8]
 8019c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d110      	bne.n	8019cbc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8019c9a:	69bb      	ldr	r3, [r7, #24]
 8019c9c:	015a      	lsls	r2, r3, #5
 8019c9e:	69fb      	ldr	r3, [r7, #28]
 8019ca0:	4413      	add	r3, r2
 8019ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	69ba      	ldr	r2, [r7, #24]
 8019caa:	0151      	lsls	r1, r2, #5
 8019cac:	69fa      	ldr	r2, [r7, #28]
 8019cae:	440a      	add	r2, r1
 8019cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019cb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8019cb8:	6013      	str	r3, [r2, #0]
 8019cba:	e00f      	b.n	8019cdc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8019cbc:	69bb      	ldr	r3, [r7, #24]
 8019cbe:	015a      	lsls	r2, r3, #5
 8019cc0:	69fb      	ldr	r3, [r7, #28]
 8019cc2:	4413      	add	r3, r2
 8019cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	69ba      	ldr	r2, [r7, #24]
 8019ccc:	0151      	lsls	r1, r2, #5
 8019cce:	69fa      	ldr	r2, [r7, #28]
 8019cd0:	440a      	add	r2, r1
 8019cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019cda:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8019cdc:	69bb      	ldr	r3, [r7, #24]
 8019cde:	015a      	lsls	r2, r3, #5
 8019ce0:	69fb      	ldr	r3, [r7, #28]
 8019ce2:	4413      	add	r3, r2
 8019ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	69ba      	ldr	r2, [r7, #24]
 8019cec:	0151      	lsls	r1, r2, #5
 8019cee:	69fa      	ldr	r2, [r7, #28]
 8019cf0:	440a      	add	r2, r1
 8019cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019cf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019cfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019cfc:	2300      	movs	r3, #0
}
 8019cfe:	4618      	mov	r0, r3
 8019d00:	3720      	adds	r7, #32
 8019d02:	46bd      	mov	sp, r7
 8019d04:	bd80      	pop	{r7, pc}
 8019d06:	bf00      	nop
 8019d08:	1ff80000 	.word	0x1ff80000

08019d0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8019d0c:	b480      	push	{r7}
 8019d0e:	b087      	sub	sp, #28
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	60f8      	str	r0, [r7, #12]
 8019d14:	60b9      	str	r1, [r7, #8]
 8019d16:	4613      	mov	r3, r2
 8019d18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8019d1e:	68bb      	ldr	r3, [r7, #8]
 8019d20:	781b      	ldrb	r3, [r3, #0]
 8019d22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019d24:	68bb      	ldr	r3, [r7, #8]
 8019d26:	785b      	ldrb	r3, [r3, #1]
 8019d28:	2b01      	cmp	r3, #1
 8019d2a:	f040 80cd 	bne.w	8019ec8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8019d2e:	68bb      	ldr	r3, [r7, #8]
 8019d30:	695b      	ldr	r3, [r3, #20]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d132      	bne.n	8019d9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8019d36:	693b      	ldr	r3, [r7, #16]
 8019d38:	015a      	lsls	r2, r3, #5
 8019d3a:	697b      	ldr	r3, [r7, #20]
 8019d3c:	4413      	add	r3, r2
 8019d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d42:	691b      	ldr	r3, [r3, #16]
 8019d44:	693a      	ldr	r2, [r7, #16]
 8019d46:	0151      	lsls	r1, r2, #5
 8019d48:	697a      	ldr	r2, [r7, #20]
 8019d4a:	440a      	add	r2, r1
 8019d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019d50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8019d54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8019d58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8019d5a:	693b      	ldr	r3, [r7, #16]
 8019d5c:	015a      	lsls	r2, r3, #5
 8019d5e:	697b      	ldr	r3, [r7, #20]
 8019d60:	4413      	add	r3, r2
 8019d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d66:	691b      	ldr	r3, [r3, #16]
 8019d68:	693a      	ldr	r2, [r7, #16]
 8019d6a:	0151      	lsls	r1, r2, #5
 8019d6c:	697a      	ldr	r2, [r7, #20]
 8019d6e:	440a      	add	r2, r1
 8019d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019d78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019d7a:	693b      	ldr	r3, [r7, #16]
 8019d7c:	015a      	lsls	r2, r3, #5
 8019d7e:	697b      	ldr	r3, [r7, #20]
 8019d80:	4413      	add	r3, r2
 8019d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d86:	691b      	ldr	r3, [r3, #16]
 8019d88:	693a      	ldr	r2, [r7, #16]
 8019d8a:	0151      	lsls	r1, r2, #5
 8019d8c:	697a      	ldr	r2, [r7, #20]
 8019d8e:	440a      	add	r2, r1
 8019d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019d94:	0cdb      	lsrs	r3, r3, #19
 8019d96:	04db      	lsls	r3, r3, #19
 8019d98:	6113      	str	r3, [r2, #16]
 8019d9a:	e04e      	b.n	8019e3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019d9c:	693b      	ldr	r3, [r7, #16]
 8019d9e:	015a      	lsls	r2, r3, #5
 8019da0:	697b      	ldr	r3, [r7, #20]
 8019da2:	4413      	add	r3, r2
 8019da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019da8:	691b      	ldr	r3, [r3, #16]
 8019daa:	693a      	ldr	r2, [r7, #16]
 8019dac:	0151      	lsls	r1, r2, #5
 8019dae:	697a      	ldr	r2, [r7, #20]
 8019db0:	440a      	add	r2, r1
 8019db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019db6:	0cdb      	lsrs	r3, r3, #19
 8019db8:	04db      	lsls	r3, r3, #19
 8019dba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8019dbc:	693b      	ldr	r3, [r7, #16]
 8019dbe:	015a      	lsls	r2, r3, #5
 8019dc0:	697b      	ldr	r3, [r7, #20]
 8019dc2:	4413      	add	r3, r2
 8019dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019dc8:	691b      	ldr	r3, [r3, #16]
 8019dca:	693a      	ldr	r2, [r7, #16]
 8019dcc:	0151      	lsls	r1, r2, #5
 8019dce:	697a      	ldr	r2, [r7, #20]
 8019dd0:	440a      	add	r2, r1
 8019dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019dd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8019dda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8019dde:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8019de0:	68bb      	ldr	r3, [r7, #8]
 8019de2:	695a      	ldr	r2, [r3, #20]
 8019de4:	68bb      	ldr	r3, [r7, #8]
 8019de6:	689b      	ldr	r3, [r3, #8]
 8019de8:	429a      	cmp	r2, r3
 8019dea:	d903      	bls.n	8019df4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8019dec:	68bb      	ldr	r3, [r7, #8]
 8019dee:	689a      	ldr	r2, [r3, #8]
 8019df0:	68bb      	ldr	r3, [r7, #8]
 8019df2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8019df4:	693b      	ldr	r3, [r7, #16]
 8019df6:	015a      	lsls	r2, r3, #5
 8019df8:	697b      	ldr	r3, [r7, #20]
 8019dfa:	4413      	add	r3, r2
 8019dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e00:	691b      	ldr	r3, [r3, #16]
 8019e02:	693a      	ldr	r2, [r7, #16]
 8019e04:	0151      	lsls	r1, r2, #5
 8019e06:	697a      	ldr	r2, [r7, #20]
 8019e08:	440a      	add	r2, r1
 8019e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019e0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019e12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8019e14:	693b      	ldr	r3, [r7, #16]
 8019e16:	015a      	lsls	r2, r3, #5
 8019e18:	697b      	ldr	r3, [r7, #20]
 8019e1a:	4413      	add	r3, r2
 8019e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e20:	691a      	ldr	r2, [r3, #16]
 8019e22:	68bb      	ldr	r3, [r7, #8]
 8019e24:	695b      	ldr	r3, [r3, #20]
 8019e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019e2a:	6939      	ldr	r1, [r7, #16]
 8019e2c:	0148      	lsls	r0, r1, #5
 8019e2e:	6979      	ldr	r1, [r7, #20]
 8019e30:	4401      	add	r1, r0
 8019e32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8019e36:	4313      	orrs	r3, r2
 8019e38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8019e3a:	79fb      	ldrb	r3, [r7, #7]
 8019e3c:	2b01      	cmp	r3, #1
 8019e3e:	d11e      	bne.n	8019e7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8019e40:	68bb      	ldr	r3, [r7, #8]
 8019e42:	691b      	ldr	r3, [r3, #16]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d009      	beq.n	8019e5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8019e48:	693b      	ldr	r3, [r7, #16]
 8019e4a:	015a      	lsls	r2, r3, #5
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	4413      	add	r3, r2
 8019e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e54:	461a      	mov	r2, r3
 8019e56:	68bb      	ldr	r3, [r7, #8]
 8019e58:	691b      	ldr	r3, [r3, #16]
 8019e5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019e5c:	693b      	ldr	r3, [r7, #16]
 8019e5e:	015a      	lsls	r2, r3, #5
 8019e60:	697b      	ldr	r3, [r7, #20]
 8019e62:	4413      	add	r3, r2
 8019e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	693a      	ldr	r2, [r7, #16]
 8019e6c:	0151      	lsls	r1, r2, #5
 8019e6e:	697a      	ldr	r2, [r7, #20]
 8019e70:	440a      	add	r2, r1
 8019e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019e76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019e7a:	6013      	str	r3, [r2, #0]
 8019e7c:	e092      	b.n	8019fa4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019e7e:	693b      	ldr	r3, [r7, #16]
 8019e80:	015a      	lsls	r2, r3, #5
 8019e82:	697b      	ldr	r3, [r7, #20]
 8019e84:	4413      	add	r3, r2
 8019e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	693a      	ldr	r2, [r7, #16]
 8019e8e:	0151      	lsls	r1, r2, #5
 8019e90:	697a      	ldr	r2, [r7, #20]
 8019e92:	440a      	add	r2, r1
 8019e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019e98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019e9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8019e9e:	68bb      	ldr	r3, [r7, #8]
 8019ea0:	695b      	ldr	r3, [r3, #20]
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d07e      	beq.n	8019fa4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8019ea6:	697b      	ldr	r3, [r7, #20]
 8019ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019eae:	68bb      	ldr	r3, [r7, #8]
 8019eb0:	781b      	ldrb	r3, [r3, #0]
 8019eb2:	f003 030f 	and.w	r3, r3, #15
 8019eb6:	2101      	movs	r1, #1
 8019eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8019ebc:	6979      	ldr	r1, [r7, #20]
 8019ebe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019ec2:	4313      	orrs	r3, r2
 8019ec4:	634b      	str	r3, [r1, #52]	; 0x34
 8019ec6:	e06d      	b.n	8019fa4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8019ec8:	693b      	ldr	r3, [r7, #16]
 8019eca:	015a      	lsls	r2, r3, #5
 8019ecc:	697b      	ldr	r3, [r7, #20]
 8019ece:	4413      	add	r3, r2
 8019ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ed4:	691b      	ldr	r3, [r3, #16]
 8019ed6:	693a      	ldr	r2, [r7, #16]
 8019ed8:	0151      	lsls	r1, r2, #5
 8019eda:	697a      	ldr	r2, [r7, #20]
 8019edc:	440a      	add	r2, r1
 8019ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019ee2:	0cdb      	lsrs	r3, r3, #19
 8019ee4:	04db      	lsls	r3, r3, #19
 8019ee6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8019ee8:	693b      	ldr	r3, [r7, #16]
 8019eea:	015a      	lsls	r2, r3, #5
 8019eec:	697b      	ldr	r3, [r7, #20]
 8019eee:	4413      	add	r3, r2
 8019ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ef4:	691b      	ldr	r3, [r3, #16]
 8019ef6:	693a      	ldr	r2, [r7, #16]
 8019ef8:	0151      	lsls	r1, r2, #5
 8019efa:	697a      	ldr	r2, [r7, #20]
 8019efc:	440a      	add	r2, r1
 8019efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019f02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8019f06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8019f0a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8019f0c:	68bb      	ldr	r3, [r7, #8]
 8019f0e:	695b      	ldr	r3, [r3, #20]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d003      	beq.n	8019f1c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8019f14:	68bb      	ldr	r3, [r7, #8]
 8019f16:	689a      	ldr	r2, [r3, #8]
 8019f18:	68bb      	ldr	r3, [r7, #8]
 8019f1a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8019f1c:	693b      	ldr	r3, [r7, #16]
 8019f1e:	015a      	lsls	r2, r3, #5
 8019f20:	697b      	ldr	r3, [r7, #20]
 8019f22:	4413      	add	r3, r2
 8019f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f28:	691b      	ldr	r3, [r3, #16]
 8019f2a:	693a      	ldr	r2, [r7, #16]
 8019f2c:	0151      	lsls	r1, r2, #5
 8019f2e:	697a      	ldr	r2, [r7, #20]
 8019f30:	440a      	add	r2, r1
 8019f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019f36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019f3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8019f3c:	693b      	ldr	r3, [r7, #16]
 8019f3e:	015a      	lsls	r2, r3, #5
 8019f40:	697b      	ldr	r3, [r7, #20]
 8019f42:	4413      	add	r3, r2
 8019f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f48:	691a      	ldr	r2, [r3, #16]
 8019f4a:	68bb      	ldr	r3, [r7, #8]
 8019f4c:	689b      	ldr	r3, [r3, #8]
 8019f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019f52:	6939      	ldr	r1, [r7, #16]
 8019f54:	0148      	lsls	r0, r1, #5
 8019f56:	6979      	ldr	r1, [r7, #20]
 8019f58:	4401      	add	r1, r0
 8019f5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019f5e:	4313      	orrs	r3, r2
 8019f60:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8019f62:	79fb      	ldrb	r3, [r7, #7]
 8019f64:	2b01      	cmp	r3, #1
 8019f66:	d10d      	bne.n	8019f84 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8019f68:	68bb      	ldr	r3, [r7, #8]
 8019f6a:	68db      	ldr	r3, [r3, #12]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d009      	beq.n	8019f84 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8019f70:	68bb      	ldr	r3, [r7, #8]
 8019f72:	68d9      	ldr	r1, [r3, #12]
 8019f74:	693b      	ldr	r3, [r7, #16]
 8019f76:	015a      	lsls	r2, r3, #5
 8019f78:	697b      	ldr	r3, [r7, #20]
 8019f7a:	4413      	add	r3, r2
 8019f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f80:	460a      	mov	r2, r1
 8019f82:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8019f84:	693b      	ldr	r3, [r7, #16]
 8019f86:	015a      	lsls	r2, r3, #5
 8019f88:	697b      	ldr	r3, [r7, #20]
 8019f8a:	4413      	add	r3, r2
 8019f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	693a      	ldr	r2, [r7, #16]
 8019f94:	0151      	lsls	r1, r2, #5
 8019f96:	697a      	ldr	r2, [r7, #20]
 8019f98:	440a      	add	r2, r1
 8019f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019fa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019fa4:	2300      	movs	r3, #0
}
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	371c      	adds	r7, #28
 8019faa:	46bd      	mov	sp, r7
 8019fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb0:	4770      	bx	lr

08019fb2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8019fb2:	b480      	push	{r7}
 8019fb4:	b089      	sub	sp, #36	; 0x24
 8019fb6:	af00      	add	r7, sp, #0
 8019fb8:	60f8      	str	r0, [r7, #12]
 8019fba:	60b9      	str	r1, [r7, #8]
 8019fbc:	4611      	mov	r1, r2
 8019fbe:	461a      	mov	r2, r3
 8019fc0:	460b      	mov	r3, r1
 8019fc2:	71fb      	strb	r3, [r7, #7]
 8019fc4:	4613      	mov	r3, r2
 8019fc6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8019fcc:	68bb      	ldr	r3, [r7, #8]
 8019fce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8019fd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d123      	bne.n	801a020 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8019fd8:	88bb      	ldrh	r3, [r7, #4]
 8019fda:	3303      	adds	r3, #3
 8019fdc:	089b      	lsrs	r3, r3, #2
 8019fde:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	61bb      	str	r3, [r7, #24]
 8019fe4:	e018      	b.n	801a018 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8019fe6:	79fb      	ldrb	r3, [r7, #7]
 8019fe8:	031a      	lsls	r2, r3, #12
 8019fea:	697b      	ldr	r3, [r7, #20]
 8019fec:	4413      	add	r3, r2
 8019fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019ff2:	461a      	mov	r2, r3
 8019ff4:	69fb      	ldr	r3, [r7, #28]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8019ffa:	69fb      	ldr	r3, [r7, #28]
 8019ffc:	3301      	adds	r3, #1
 8019ffe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801a000:	69fb      	ldr	r3, [r7, #28]
 801a002:	3301      	adds	r3, #1
 801a004:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801a006:	69fb      	ldr	r3, [r7, #28]
 801a008:	3301      	adds	r3, #1
 801a00a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801a00c:	69fb      	ldr	r3, [r7, #28]
 801a00e:	3301      	adds	r3, #1
 801a010:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801a012:	69bb      	ldr	r3, [r7, #24]
 801a014:	3301      	adds	r3, #1
 801a016:	61bb      	str	r3, [r7, #24]
 801a018:	69ba      	ldr	r2, [r7, #24]
 801a01a:	693b      	ldr	r3, [r7, #16]
 801a01c:	429a      	cmp	r2, r3
 801a01e:	d3e2      	bcc.n	8019fe6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801a020:	2300      	movs	r3, #0
}
 801a022:	4618      	mov	r0, r3
 801a024:	3724      	adds	r7, #36	; 0x24
 801a026:	46bd      	mov	sp, r7
 801a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a02c:	4770      	bx	lr

0801a02e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801a02e:	b480      	push	{r7}
 801a030:	b08b      	sub	sp, #44	; 0x2c
 801a032:	af00      	add	r7, sp, #0
 801a034:	60f8      	str	r0, [r7, #12]
 801a036:	60b9      	str	r1, [r7, #8]
 801a038:	4613      	mov	r3, r2
 801a03a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801a040:	68bb      	ldr	r3, [r7, #8]
 801a042:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801a044:	88fb      	ldrh	r3, [r7, #6]
 801a046:	089b      	lsrs	r3, r3, #2
 801a048:	b29b      	uxth	r3, r3
 801a04a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801a04c:	88fb      	ldrh	r3, [r7, #6]
 801a04e:	f003 0303 	and.w	r3, r3, #3
 801a052:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801a054:	2300      	movs	r3, #0
 801a056:	623b      	str	r3, [r7, #32]
 801a058:	e014      	b.n	801a084 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801a05a:	69bb      	ldr	r3, [r7, #24]
 801a05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a060:	681a      	ldr	r2, [r3, #0]
 801a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a064:	601a      	str	r2, [r3, #0]
    pDest++;
 801a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a068:	3301      	adds	r3, #1
 801a06a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a06e:	3301      	adds	r3, #1
 801a070:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a074:	3301      	adds	r3, #1
 801a076:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a07a:	3301      	adds	r3, #1
 801a07c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801a07e:	6a3b      	ldr	r3, [r7, #32]
 801a080:	3301      	adds	r3, #1
 801a082:	623b      	str	r3, [r7, #32]
 801a084:	6a3a      	ldr	r2, [r7, #32]
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	429a      	cmp	r2, r3
 801a08a:	d3e6      	bcc.n	801a05a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801a08c:	8bfb      	ldrh	r3, [r7, #30]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d01e      	beq.n	801a0d0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801a092:	2300      	movs	r3, #0
 801a094:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801a096:	69bb      	ldr	r3, [r7, #24]
 801a098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a09c:	461a      	mov	r2, r3
 801a09e:	f107 0310 	add.w	r3, r7, #16
 801a0a2:	6812      	ldr	r2, [r2, #0]
 801a0a4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801a0a6:	693a      	ldr	r2, [r7, #16]
 801a0a8:	6a3b      	ldr	r3, [r7, #32]
 801a0aa:	b2db      	uxtb	r3, r3
 801a0ac:	00db      	lsls	r3, r3, #3
 801a0ae:	fa22 f303 	lsr.w	r3, r2, r3
 801a0b2:	b2da      	uxtb	r2, r3
 801a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0b6:	701a      	strb	r2, [r3, #0]
      i++;
 801a0b8:	6a3b      	ldr	r3, [r7, #32]
 801a0ba:	3301      	adds	r3, #1
 801a0bc:	623b      	str	r3, [r7, #32]
      pDest++;
 801a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0c0:	3301      	adds	r3, #1
 801a0c2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801a0c4:	8bfb      	ldrh	r3, [r7, #30]
 801a0c6:	3b01      	subs	r3, #1
 801a0c8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801a0ca:	8bfb      	ldrh	r3, [r7, #30]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d1ea      	bne.n	801a0a6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	372c      	adds	r7, #44	; 0x2c
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0dc:	4770      	bx	lr

0801a0de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801a0de:	b480      	push	{r7}
 801a0e0:	b085      	sub	sp, #20
 801a0e2:	af00      	add	r7, sp, #0
 801a0e4:	6078      	str	r0, [r7, #4]
 801a0e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801a0ec:	683b      	ldr	r3, [r7, #0]
 801a0ee:	781b      	ldrb	r3, [r3, #0]
 801a0f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801a0f2:	683b      	ldr	r3, [r7, #0]
 801a0f4:	785b      	ldrb	r3, [r3, #1]
 801a0f6:	2b01      	cmp	r3, #1
 801a0f8:	d12c      	bne.n	801a154 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801a0fa:	68bb      	ldr	r3, [r7, #8]
 801a0fc:	015a      	lsls	r2, r3, #5
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	4413      	add	r3, r2
 801a102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	db12      	blt.n	801a132 <USB_EPSetStall+0x54>
 801a10c:	68bb      	ldr	r3, [r7, #8]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d00f      	beq.n	801a132 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801a112:	68bb      	ldr	r3, [r7, #8]
 801a114:	015a      	lsls	r2, r3, #5
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	4413      	add	r3, r2
 801a11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	68ba      	ldr	r2, [r7, #8]
 801a122:	0151      	lsls	r1, r2, #5
 801a124:	68fa      	ldr	r2, [r7, #12]
 801a126:	440a      	add	r2, r1
 801a128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a12c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801a130:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801a132:	68bb      	ldr	r3, [r7, #8]
 801a134:	015a      	lsls	r2, r3, #5
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	4413      	add	r3, r2
 801a13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	68ba      	ldr	r2, [r7, #8]
 801a142:	0151      	lsls	r1, r2, #5
 801a144:	68fa      	ldr	r2, [r7, #12]
 801a146:	440a      	add	r2, r1
 801a148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a14c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801a150:	6013      	str	r3, [r2, #0]
 801a152:	e02b      	b.n	801a1ac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801a154:	68bb      	ldr	r3, [r7, #8]
 801a156:	015a      	lsls	r2, r3, #5
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	4413      	add	r3, r2
 801a15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	2b00      	cmp	r3, #0
 801a164:	db12      	blt.n	801a18c <USB_EPSetStall+0xae>
 801a166:	68bb      	ldr	r3, [r7, #8]
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d00f      	beq.n	801a18c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801a16c:	68bb      	ldr	r3, [r7, #8]
 801a16e:	015a      	lsls	r2, r3, #5
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	4413      	add	r3, r2
 801a174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	68ba      	ldr	r2, [r7, #8]
 801a17c:	0151      	lsls	r1, r2, #5
 801a17e:	68fa      	ldr	r2, [r7, #12]
 801a180:	440a      	add	r2, r1
 801a182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801a18a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801a18c:	68bb      	ldr	r3, [r7, #8]
 801a18e:	015a      	lsls	r2, r3, #5
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	4413      	add	r3, r2
 801a194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	68ba      	ldr	r2, [r7, #8]
 801a19c:	0151      	lsls	r1, r2, #5
 801a19e:	68fa      	ldr	r2, [r7, #12]
 801a1a0:	440a      	add	r2, r1
 801a1a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a1a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801a1aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801a1ac:	2300      	movs	r3, #0
}
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	3714      	adds	r7, #20
 801a1b2:	46bd      	mov	sp, r7
 801a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b8:	4770      	bx	lr

0801a1ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801a1ba:	b480      	push	{r7}
 801a1bc:	b085      	sub	sp, #20
 801a1be:	af00      	add	r7, sp, #0
 801a1c0:	6078      	str	r0, [r7, #4]
 801a1c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801a1c8:	683b      	ldr	r3, [r7, #0]
 801a1ca:	781b      	ldrb	r3, [r3, #0]
 801a1cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801a1ce:	683b      	ldr	r3, [r7, #0]
 801a1d0:	785b      	ldrb	r3, [r3, #1]
 801a1d2:	2b01      	cmp	r3, #1
 801a1d4:	d128      	bne.n	801a228 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a1d6:	68bb      	ldr	r3, [r7, #8]
 801a1d8:	015a      	lsls	r2, r3, #5
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	4413      	add	r3, r2
 801a1de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	68ba      	ldr	r2, [r7, #8]
 801a1e6:	0151      	lsls	r1, r2, #5
 801a1e8:	68fa      	ldr	r2, [r7, #12]
 801a1ea:	440a      	add	r2, r1
 801a1ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a1f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a1f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	78db      	ldrb	r3, [r3, #3]
 801a1fa:	2b03      	cmp	r3, #3
 801a1fc:	d003      	beq.n	801a206 <USB_EPClearStall+0x4c>
 801a1fe:	683b      	ldr	r3, [r7, #0]
 801a200:	78db      	ldrb	r3, [r3, #3]
 801a202:	2b02      	cmp	r3, #2
 801a204:	d138      	bne.n	801a278 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	015a      	lsls	r2, r3, #5
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	4413      	add	r3, r2
 801a20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	68ba      	ldr	r2, [r7, #8]
 801a216:	0151      	lsls	r1, r2, #5
 801a218:	68fa      	ldr	r2, [r7, #12]
 801a21a:	440a      	add	r2, r1
 801a21c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a224:	6013      	str	r3, [r2, #0]
 801a226:	e027      	b.n	801a278 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a228:	68bb      	ldr	r3, [r7, #8]
 801a22a:	015a      	lsls	r2, r3, #5
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	4413      	add	r3, r2
 801a230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	68ba      	ldr	r2, [r7, #8]
 801a238:	0151      	lsls	r1, r2, #5
 801a23a:	68fa      	ldr	r2, [r7, #12]
 801a23c:	440a      	add	r2, r1
 801a23e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a246:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	78db      	ldrb	r3, [r3, #3]
 801a24c:	2b03      	cmp	r3, #3
 801a24e:	d003      	beq.n	801a258 <USB_EPClearStall+0x9e>
 801a250:	683b      	ldr	r3, [r7, #0]
 801a252:	78db      	ldrb	r3, [r3, #3]
 801a254:	2b02      	cmp	r3, #2
 801a256:	d10f      	bne.n	801a278 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801a258:	68bb      	ldr	r3, [r7, #8]
 801a25a:	015a      	lsls	r2, r3, #5
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	4413      	add	r3, r2
 801a260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	68ba      	ldr	r2, [r7, #8]
 801a268:	0151      	lsls	r1, r2, #5
 801a26a:	68fa      	ldr	r2, [r7, #12]
 801a26c:	440a      	add	r2, r1
 801a26e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a276:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801a278:	2300      	movs	r3, #0
}
 801a27a:	4618      	mov	r0, r3
 801a27c:	3714      	adds	r7, #20
 801a27e:	46bd      	mov	sp, r7
 801a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a284:	4770      	bx	lr

0801a286 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801a286:	b480      	push	{r7}
 801a288:	b085      	sub	sp, #20
 801a28a:	af00      	add	r7, sp, #0
 801a28c:	6078      	str	r0, [r7, #4]
 801a28e:	460b      	mov	r3, r1
 801a290:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	68fa      	ldr	r2, [r7, #12]
 801a2a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a2a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a2a8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a2b0:	681a      	ldr	r2, [r3, #0]
 801a2b2:	78fb      	ldrb	r3, [r7, #3]
 801a2b4:	011b      	lsls	r3, r3, #4
 801a2b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801a2ba:	68f9      	ldr	r1, [r7, #12]
 801a2bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a2c0:	4313      	orrs	r3, r2
 801a2c2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801a2c4:	2300      	movs	r3, #0
}
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	3714      	adds	r7, #20
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d0:	4770      	bx	lr

0801a2d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801a2d2:	b480      	push	{r7}
 801a2d4:	b085      	sub	sp, #20
 801a2d6:	af00      	add	r7, sp, #0
 801a2d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	68fa      	ldr	r2, [r7, #12]
 801a2e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a2ec:	f023 0303 	bic.w	r3, r3, #3
 801a2f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a2f8:	685b      	ldr	r3, [r3, #4]
 801a2fa:	68fa      	ldr	r2, [r7, #12]
 801a2fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a300:	f023 0302 	bic.w	r3, r3, #2
 801a304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a306:	2300      	movs	r3, #0
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3714      	adds	r7, #20
 801a30c:	46bd      	mov	sp, r7
 801a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a312:	4770      	bx	lr

0801a314 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801a314:	b480      	push	{r7}
 801a316:	b085      	sub	sp, #20
 801a318:	af00      	add	r7, sp, #0
 801a31a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	68fa      	ldr	r2, [r7, #12]
 801a32a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a32e:	f023 0303 	bic.w	r3, r3, #3
 801a332:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801a334:	68fb      	ldr	r3, [r7, #12]
 801a336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a33a:	685b      	ldr	r3, [r3, #4]
 801a33c:	68fa      	ldr	r2, [r7, #12]
 801a33e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a342:	f043 0302 	orr.w	r3, r3, #2
 801a346:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a348:	2300      	movs	r3, #0
}
 801a34a:	4618      	mov	r0, r3
 801a34c:	3714      	adds	r7, #20
 801a34e:	46bd      	mov	sp, r7
 801a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a354:	4770      	bx	lr

0801a356 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801a356:	b480      	push	{r7}
 801a358:	b085      	sub	sp, #20
 801a35a:	af00      	add	r7, sp, #0
 801a35c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	695b      	ldr	r3, [r3, #20]
 801a362:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	699b      	ldr	r3, [r3, #24]
 801a368:	68fa      	ldr	r2, [r7, #12]
 801a36a:	4013      	ands	r3, r2
 801a36c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801a36e:	68fb      	ldr	r3, [r7, #12]
}
 801a370:	4618      	mov	r0, r3
 801a372:	3714      	adds	r7, #20
 801a374:	46bd      	mov	sp, r7
 801a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a37a:	4770      	bx	lr

0801a37c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801a37c:	b480      	push	{r7}
 801a37e:	b085      	sub	sp, #20
 801a380:	af00      	add	r7, sp, #0
 801a382:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a38e:	699b      	ldr	r3, [r3, #24]
 801a390:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a398:	69db      	ldr	r3, [r3, #28]
 801a39a:	68ba      	ldr	r2, [r7, #8]
 801a39c:	4013      	ands	r3, r2
 801a39e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801a3a0:	68bb      	ldr	r3, [r7, #8]
 801a3a2:	0c1b      	lsrs	r3, r3, #16
}
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	3714      	adds	r7, #20
 801a3a8:	46bd      	mov	sp, r7
 801a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ae:	4770      	bx	lr

0801a3b0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801a3b0:	b480      	push	{r7}
 801a3b2:	b085      	sub	sp, #20
 801a3b4:	af00      	add	r7, sp, #0
 801a3b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3c2:	699b      	ldr	r3, [r3, #24]
 801a3c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3cc:	69db      	ldr	r3, [r3, #28]
 801a3ce:	68ba      	ldr	r2, [r7, #8]
 801a3d0:	4013      	ands	r3, r2
 801a3d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801a3d4:	68bb      	ldr	r3, [r7, #8]
 801a3d6:	b29b      	uxth	r3, r3
}
 801a3d8:	4618      	mov	r0, r3
 801a3da:	3714      	adds	r7, #20
 801a3dc:	46bd      	mov	sp, r7
 801a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e2:	4770      	bx	lr

0801a3e4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801a3e4:	b480      	push	{r7}
 801a3e6:	b085      	sub	sp, #20
 801a3e8:	af00      	add	r7, sp, #0
 801a3ea:	6078      	str	r0, [r7, #4]
 801a3ec:	460b      	mov	r3, r1
 801a3ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801a3f4:	78fb      	ldrb	r3, [r7, #3]
 801a3f6:	015a      	lsls	r2, r3, #5
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	4413      	add	r3, r2
 801a3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a400:	689b      	ldr	r3, [r3, #8]
 801a402:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a40a:	695b      	ldr	r3, [r3, #20]
 801a40c:	68ba      	ldr	r2, [r7, #8]
 801a40e:	4013      	ands	r3, r2
 801a410:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801a412:	68bb      	ldr	r3, [r7, #8]
}
 801a414:	4618      	mov	r0, r3
 801a416:	3714      	adds	r7, #20
 801a418:	46bd      	mov	sp, r7
 801a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a41e:	4770      	bx	lr

0801a420 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801a420:	b480      	push	{r7}
 801a422:	b087      	sub	sp, #28
 801a424:	af00      	add	r7, sp, #0
 801a426:	6078      	str	r0, [r7, #4]
 801a428:	460b      	mov	r3, r1
 801a42a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801a430:	697b      	ldr	r3, [r7, #20]
 801a432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a436:	691b      	ldr	r3, [r3, #16]
 801a438:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801a43a:	697b      	ldr	r3, [r7, #20]
 801a43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a442:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801a444:	78fb      	ldrb	r3, [r7, #3]
 801a446:	f003 030f 	and.w	r3, r3, #15
 801a44a:	68fa      	ldr	r2, [r7, #12]
 801a44c:	fa22 f303 	lsr.w	r3, r2, r3
 801a450:	01db      	lsls	r3, r3, #7
 801a452:	b2db      	uxtb	r3, r3
 801a454:	693a      	ldr	r2, [r7, #16]
 801a456:	4313      	orrs	r3, r2
 801a458:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801a45a:	78fb      	ldrb	r3, [r7, #3]
 801a45c:	015a      	lsls	r2, r3, #5
 801a45e:	697b      	ldr	r3, [r7, #20]
 801a460:	4413      	add	r3, r2
 801a462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a466:	689b      	ldr	r3, [r3, #8]
 801a468:	693a      	ldr	r2, [r7, #16]
 801a46a:	4013      	ands	r3, r2
 801a46c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801a46e:	68bb      	ldr	r3, [r7, #8]
}
 801a470:	4618      	mov	r0, r3
 801a472:	371c      	adds	r7, #28
 801a474:	46bd      	mov	sp, r7
 801a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47a:	4770      	bx	lr

0801a47c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801a47c:	b480      	push	{r7}
 801a47e:	b083      	sub	sp, #12
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	695b      	ldr	r3, [r3, #20]
 801a488:	f003 0301 	and.w	r3, r3, #1
}
 801a48c:	4618      	mov	r0, r3
 801a48e:	370c      	adds	r7, #12
 801a490:	46bd      	mov	sp, r7
 801a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a496:	4770      	bx	lr

0801a498 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801a498:	b480      	push	{r7}
 801a49a:	b085      	sub	sp, #20
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	68fa      	ldr	r2, [r7, #12]
 801a4ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a4b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801a4b6:	f023 0307 	bic.w	r3, r3, #7
 801a4ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4c2:	685b      	ldr	r3, [r3, #4]
 801a4c4:	68fa      	ldr	r2, [r7, #12]
 801a4c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a4ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a4ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a4d0:	2300      	movs	r3, #0
}
 801a4d2:	4618      	mov	r0, r3
 801a4d4:	3714      	adds	r7, #20
 801a4d6:	46bd      	mov	sp, r7
 801a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4dc:	4770      	bx	lr
	...

0801a4e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801a4e0:	b480      	push	{r7}
 801a4e2:	b087      	sub	sp, #28
 801a4e4:	af00      	add	r7, sp, #0
 801a4e6:	60f8      	str	r0, [r7, #12]
 801a4e8:	460b      	mov	r3, r1
 801a4ea:	607a      	str	r2, [r7, #4]
 801a4ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	333c      	adds	r3, #60	; 0x3c
 801a4f6:	3304      	adds	r3, #4
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801a4fc:	693b      	ldr	r3, [r7, #16]
 801a4fe:	4a26      	ldr	r2, [pc, #152]	; (801a598 <USB_EP0_OutStart+0xb8>)
 801a500:	4293      	cmp	r3, r2
 801a502:	d90a      	bls.n	801a51a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801a504:	697b      	ldr	r3, [r7, #20]
 801a506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a514:	d101      	bne.n	801a51a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801a516:	2300      	movs	r3, #0
 801a518:	e037      	b.n	801a58a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801a51a:	697b      	ldr	r3, [r7, #20]
 801a51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a520:	461a      	mov	r2, r3
 801a522:	2300      	movs	r3, #0
 801a524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801a526:	697b      	ldr	r3, [r7, #20]
 801a528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a52c:	691b      	ldr	r3, [r3, #16]
 801a52e:	697a      	ldr	r2, [r7, #20]
 801a530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801a53a:	697b      	ldr	r3, [r7, #20]
 801a53c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a540:	691b      	ldr	r3, [r3, #16]
 801a542:	697a      	ldr	r2, [r7, #20]
 801a544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a548:	f043 0318 	orr.w	r3, r3, #24
 801a54c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801a54e:	697b      	ldr	r3, [r7, #20]
 801a550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a554:	691b      	ldr	r3, [r3, #16]
 801a556:	697a      	ldr	r2, [r7, #20]
 801a558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a55c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801a560:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801a562:	7afb      	ldrb	r3, [r7, #11]
 801a564:	2b01      	cmp	r3, #1
 801a566:	d10f      	bne.n	801a588 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801a568:	697b      	ldr	r3, [r7, #20]
 801a56a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a56e:	461a      	mov	r2, r3
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801a574:	697b      	ldr	r3, [r7, #20]
 801a576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	697a      	ldr	r2, [r7, #20]
 801a57e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a582:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801a586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801a588:	2300      	movs	r3, #0
}
 801a58a:	4618      	mov	r0, r3
 801a58c:	371c      	adds	r7, #28
 801a58e:	46bd      	mov	sp, r7
 801a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a594:	4770      	bx	lr
 801a596:	bf00      	nop
 801a598:	4f54300a 	.word	0x4f54300a

0801a59c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801a59c:	b480      	push	{r7}
 801a59e:	b085      	sub	sp, #20
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	3301      	adds	r3, #1
 801a5ac:	60fb      	str	r3, [r7, #12]
 801a5ae:	4a13      	ldr	r2, [pc, #76]	; (801a5fc <USB_CoreReset+0x60>)
 801a5b0:	4293      	cmp	r3, r2
 801a5b2:	d901      	bls.n	801a5b8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801a5b4:	2303      	movs	r3, #3
 801a5b6:	e01a      	b.n	801a5ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	691b      	ldr	r3, [r3, #16]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	daf3      	bge.n	801a5a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	691b      	ldr	r3, [r3, #16]
 801a5c8:	f043 0201 	orr.w	r2, r3, #1
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	3301      	adds	r3, #1
 801a5d4:	60fb      	str	r3, [r7, #12]
 801a5d6:	4a09      	ldr	r2, [pc, #36]	; (801a5fc <USB_CoreReset+0x60>)
 801a5d8:	4293      	cmp	r3, r2
 801a5da:	d901      	bls.n	801a5e0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801a5dc:	2303      	movs	r3, #3
 801a5de:	e006      	b.n	801a5ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	691b      	ldr	r3, [r3, #16]
 801a5e4:	f003 0301 	and.w	r3, r3, #1
 801a5e8:	2b01      	cmp	r3, #1
 801a5ea:	d0f1      	beq.n	801a5d0 <USB_CoreReset+0x34>

  return HAL_OK;
 801a5ec:	2300      	movs	r3, #0
}
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	3714      	adds	r7, #20
 801a5f2:	46bd      	mov	sp, r7
 801a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f8:	4770      	bx	lr
 801a5fa:	bf00      	nop
 801a5fc:	00030d40 	.word	0x00030d40

0801a600 <RunDiagnostics>:

/*global variables*/
DiagFaultTable Appl_diagActiveFault;
DiagFaultParamTable FaultParamTable[Diag_enum_MaxFault] = FAULT_PARAM_TABLE_INIT;

void RunDiagnostics(void){
 801a600:	b580      	push	{r7, lr}
 801a602:	af00      	add	r7, sp, #0

	/*Diag_enum_OverCurrent*/
	if((GPIO_PIN_RESET == DC_CONTACTOR_STATE()) || (GPIO_PIN_RESET == CAPCONTACTOR_STATE())){
 801a604:	2102      	movs	r1, #2
 801a606:	48a4      	ldr	r0, [pc, #656]	; (801a898 <RunDiagnostics+0x298>)
 801a608:	f7f9 fbae 	bl	8013d68 <HAL_GPIO_ReadPin>
 801a60c:	4603      	mov	r3, r0
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d007      	beq.n	801a622 <RunDiagnostics+0x22>
 801a612:	2180      	movs	r1, #128	; 0x80
 801a614:	48a1      	ldr	r0, [pc, #644]	; (801a89c <RunDiagnostics+0x29c>)
 801a616:	f7f9 fba7 	bl	8013d68 <HAL_GPIO_ReadPin>
 801a61a:	4603      	mov	r3, r0
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	f040 8101 	bne.w	801a824 <RunDiagnostics+0x224>
		if(SM_ApplParam.RealtimeCurrent > Appl_EEPParam.stm32.EEP_CV_CutOffCurrent){
 801a622:	4b9f      	ldr	r3, [pc, #636]	; (801a8a0 <RunDiagnostics+0x2a0>)
 801a624:	ed93 7a03 	vldr	s14, [r3, #12]
 801a628:	4b9e      	ldr	r3, [pc, #632]	; (801a8a4 <RunDiagnostics+0x2a4>)
 801a62a:	799b      	ldrb	r3, [r3, #6]
 801a62c:	ee07 3a90 	vmov	s15, r3
 801a630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a63c:	dd16      	ble.n	801a66c <RunDiagnostics+0x6c>
			FaultParamTable[Diag_enum_CVcutOffCurrent].DebouncefaultCounter++;
 801a63e:	4b9a      	ldr	r3, [pc, #616]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a640:	8c1b      	ldrh	r3, [r3, #32]
 801a642:	3301      	adds	r3, #1
 801a644:	b29a      	uxth	r2, r3
 801a646:	4b98      	ldr	r3, [pc, #608]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a648:	841a      	strh	r2, [r3, #32]
			if(FaultParamTable[Diag_enum_CVcutOffCurrent].DebouncefaultCounter >= FaultParamTable[Diag_enum_CVcutOffCurrent].faultconfirmThreshold){
 801a64a:	4b97      	ldr	r3, [pc, #604]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a64c:	8c1a      	ldrh	r2, [r3, #32]
 801a64e:	4b96      	ldr	r3, [pc, #600]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a650:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a652:	429a      	cmp	r2, r3
 801a654:	d320      	bcc.n	801a698 <RunDiagnostics+0x98>
				FaultParamTable[Diag_enum_CVcutOffCurrent].DebouncefaultCounter = FaultParamTable[Diag_enum_CVcutOffCurrent].faultconfirmThreshold;
 801a656:	4b94      	ldr	r3, [pc, #592]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a658:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801a65a:	4b93      	ldr	r3, [pc, #588]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a65c:	841a      	strh	r2, [r3, #32]
				Appl_diagActiveFault.CVcutOffCurrent = 1;
 801a65e:	4b93      	ldr	r3, [pc, #588]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a660:	2201      	movs	r2, #1
 801a662:	711a      	strb	r2, [r3, #4]
				FaultParamTable[Diag_enum_CVcutOffCurrent].DebouncehealCounter = 0;
 801a664:	4b90      	ldr	r3, [pc, #576]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a666:	2200      	movs	r2, #0
 801a668:	845a      	strh	r2, [r3, #34]	; 0x22
 801a66a:	e015      	b.n	801a698 <RunDiagnostics+0x98>
			}
		}
		else{
			FaultParamTable[Diag_enum_CVcutOffCurrent].DebouncehealCounter++;
 801a66c:	4b8e      	ldr	r3, [pc, #568]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a66e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a670:	3301      	adds	r3, #1
 801a672:	b29a      	uxth	r2, r3
 801a674:	4b8c      	ldr	r3, [pc, #560]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a676:	845a      	strh	r2, [r3, #34]	; 0x22
			if(FaultParamTable[Diag_enum_CVcutOffCurrent].DebouncehealCounter > FaultParamTable[Diag_enum_CVcutOffCurrent].healconfirmThreshold){
 801a678:	4b8b      	ldr	r3, [pc, #556]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a67a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801a67c:	4b8a      	ldr	r3, [pc, #552]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a67e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a680:	429a      	cmp	r2, r3
 801a682:	d909      	bls.n	801a698 <RunDiagnostics+0x98>
				FaultParamTable[Diag_enum_CVcutOffCurrent].DebouncefaultCounter = 0;
 801a684:	4b88      	ldr	r3, [pc, #544]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a686:	2200      	movs	r2, #0
 801a688:	841a      	strh	r2, [r3, #32]
				FaultParamTable[Diag_enum_CVcutOffCurrent].DebouncehealCounter = FaultParamTable[Diag_enum_CVcutOffCurrent].healconfirmThreshold;
 801a68a:	4b87      	ldr	r3, [pc, #540]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a68c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 801a68e:	4b86      	ldr	r3, [pc, #536]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a690:	845a      	strh	r2, [r3, #34]	; 0x22
				Appl_diagActiveFault.CVcutOffCurrent = 0;
 801a692:	4b86      	ldr	r3, [pc, #536]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a694:	2200      	movs	r2, #0
 801a696:	711a      	strb	r2, [r3, #4]
			}
		}



		if(SM_ApplParam.RealtimeVoltage > Appl_EEPParam.stm32.EEP_CC_CutOffVoltage){
 801a698:	4b81      	ldr	r3, [pc, #516]	; (801a8a0 <RunDiagnostics+0x2a0>)
 801a69a:	ed93 7a02 	vldr	s14, [r3, #8]
 801a69e:	4b81      	ldr	r3, [pc, #516]	; (801a8a4 <RunDiagnostics+0x2a4>)
 801a6a0:	79db      	ldrb	r3, [r3, #7]
 801a6a2:	ee07 3a90 	vmov	s15, r3
 801a6a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6b2:	dd16      	ble.n	801a6e2 <RunDiagnostics+0xe2>
			FaultParamTable[Diag_enum_CCcutOffVoltage].DebouncefaultCounter++;
 801a6b4:	4b7c      	ldr	r3, [pc, #496]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6b6:	8b1b      	ldrh	r3, [r3, #24]
 801a6b8:	3301      	adds	r3, #1
 801a6ba:	b29a      	uxth	r2, r3
 801a6bc:	4b7a      	ldr	r3, [pc, #488]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6be:	831a      	strh	r2, [r3, #24]
			if(FaultParamTable[Diag_enum_CCcutOffVoltage].DebouncefaultCounter >= FaultParamTable[Diag_enum_CCcutOffVoltage].faultconfirmThreshold){
 801a6c0:	4b79      	ldr	r3, [pc, #484]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6c2:	8b1a      	ldrh	r2, [r3, #24]
 801a6c4:	4b78      	ldr	r3, [pc, #480]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6c6:	8b9b      	ldrh	r3, [r3, #28]
 801a6c8:	429a      	cmp	r2, r3
 801a6ca:	d320      	bcc.n	801a70e <RunDiagnostics+0x10e>
				FaultParamTable[Diag_enum_CCcutOffVoltage].DebouncefaultCounter = FaultParamTable[Diag_enum_CCcutOffVoltage].faultconfirmThreshold;
 801a6cc:	4b76      	ldr	r3, [pc, #472]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6ce:	8b9a      	ldrh	r2, [r3, #28]
 801a6d0:	4b75      	ldr	r3, [pc, #468]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6d2:	831a      	strh	r2, [r3, #24]
				Appl_diagActiveFault.CCcutOffVoltage = 1;
 801a6d4:	4b75      	ldr	r3, [pc, #468]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a6d6:	2201      	movs	r2, #1
 801a6d8:	70da      	strb	r2, [r3, #3]
				FaultParamTable[Diag_enum_CCcutOffVoltage].DebouncehealCounter = 0;
 801a6da:	4b73      	ldr	r3, [pc, #460]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6dc:	2200      	movs	r2, #0
 801a6de:	835a      	strh	r2, [r3, #26]
 801a6e0:	e015      	b.n	801a70e <RunDiagnostics+0x10e>
			}
		}
		else{
			FaultParamTable[Diag_enum_CCcutOffVoltage].DebouncehealCounter++;
 801a6e2:	4b71      	ldr	r3, [pc, #452]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6e4:	8b5b      	ldrh	r3, [r3, #26]
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	b29a      	uxth	r2, r3
 801a6ea:	4b6f      	ldr	r3, [pc, #444]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6ec:	835a      	strh	r2, [r3, #26]
			if(FaultParamTable[Diag_enum_CCcutOffVoltage].DebouncehealCounter > FaultParamTable[Diag_enum_CCcutOffVoltage].healconfirmThreshold){
 801a6ee:	4b6e      	ldr	r3, [pc, #440]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6f0:	8b5a      	ldrh	r2, [r3, #26]
 801a6f2:	4b6d      	ldr	r3, [pc, #436]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6f4:	8bdb      	ldrh	r3, [r3, #30]
 801a6f6:	429a      	cmp	r2, r3
 801a6f8:	d909      	bls.n	801a70e <RunDiagnostics+0x10e>
				FaultParamTable[Diag_enum_CCcutOffVoltage].DebouncefaultCounter = 0;
 801a6fa:	4b6b      	ldr	r3, [pc, #428]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a6fc:	2200      	movs	r2, #0
 801a6fe:	831a      	strh	r2, [r3, #24]
				FaultParamTable[Diag_enum_CCcutOffVoltage].DebouncehealCounter = FaultParamTable[Diag_enum_CCcutOffVoltage].healconfirmThreshold;
 801a700:	4b69      	ldr	r3, [pc, #420]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a702:	8bda      	ldrh	r2, [r3, #30]
 801a704:	4b68      	ldr	r3, [pc, #416]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a706:	835a      	strh	r2, [r3, #26]
				Appl_diagActiveFault.CCcutOffVoltage = 0;
 801a708:	4b68      	ldr	r3, [pc, #416]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a70a:	2200      	movs	r2, #0
 801a70c:	70da      	strb	r2, [r3, #3]





		if(SM_ApplParam.RealtimeVoltage > OVERVOLTAGE_ADMIN_VALUE){
 801a70e:	4b64      	ldr	r3, [pc, #400]	; (801a8a0 <RunDiagnostics+0x2a0>)
 801a710:	edd3 7a02 	vldr	s15, [r3, #8]
 801a714:	ed9f 7a66 	vldr	s14, [pc, #408]	; 801a8b0 <RunDiagnostics+0x2b0>
 801a718:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a720:	dd1d      	ble.n	801a75e <RunDiagnostics+0x15e>
			FaultParamTable[Diag_enum_OverVOltage].DebouncefaultCounter++;
 801a722:	4b61      	ldr	r3, [pc, #388]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a724:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801a728:	3301      	adds	r3, #1
 801a72a:	b29a      	uxth	r2, r3
 801a72c:	4b5e      	ldr	r3, [pc, #376]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a72e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			if(FaultParamTable[Diag_enum_OverVOltage].DebouncefaultCounter >= FaultParamTable[Diag_enum_OverVOltage].faultconfirmThreshold){
 801a732:	4b5d      	ldr	r3, [pc, #372]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a734:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801a738:	4b5b      	ldr	r3, [pc, #364]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a73a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a73e:	429a      	cmp	r2, r3
 801a740:	d32a      	bcc.n	801a798 <RunDiagnostics+0x198>
				FaultParamTable[Diag_enum_OverVOltage].DebouncefaultCounter = FaultParamTable[Diag_enum_OverVOltage].faultconfirmThreshold;
 801a742:	4b59      	ldr	r3, [pc, #356]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a744:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801a748:	4b57      	ldr	r3, [pc, #348]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a74a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				Appl_diagActiveFault.OverVoltage = 1;
 801a74e:	4b57      	ldr	r3, [pc, #348]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a750:	2201      	movs	r2, #1
 801a752:	72da      	strb	r2, [r3, #11]
				FaultParamTable[Diag_enum_OverVOltage].DebouncehealCounter = 0;
 801a754:	4b54      	ldr	r3, [pc, #336]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a756:	2200      	movs	r2, #0
 801a758:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 801a75c:	e01c      	b.n	801a798 <RunDiagnostics+0x198>
			}
		}
		else{
			FaultParamTable[Diag_enum_OverVOltage].DebouncehealCounter++;
 801a75e:	4b52      	ldr	r3, [pc, #328]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a760:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801a764:	3301      	adds	r3, #1
 801a766:	b29a      	uxth	r2, r3
 801a768:	4b4f      	ldr	r3, [pc, #316]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a76a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			if(FaultParamTable[Diag_enum_OverVOltage].DebouncehealCounter > FaultParamTable[Diag_enum_OverVOltage].healconfirmThreshold){
 801a76e:	4b4e      	ldr	r3, [pc, #312]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a770:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
 801a774:	4b4c      	ldr	r3, [pc, #304]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a776:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a77a:	429a      	cmp	r2, r3
 801a77c:	d90c      	bls.n	801a798 <RunDiagnostics+0x198>
				FaultParamTable[Diag_enum_OverVOltage].DebouncefaultCounter = 0;
 801a77e:	4b4a      	ldr	r3, [pc, #296]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a780:	2200      	movs	r2, #0
 801a782:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				FaultParamTable[Diag_enum_OverVOltage].DebouncehealCounter = FaultParamTable[Diag_enum_OverVOltage].healconfirmThreshold;
 801a786:	4b48      	ldr	r3, [pc, #288]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a788:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 801a78c:	4b46      	ldr	r3, [pc, #280]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a78e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
				Appl_diagActiveFault.OverVoltage = 0;
 801a792:	4b46      	ldr	r3, [pc, #280]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a794:	2200      	movs	r2, #0
 801a796:	72da      	strb	r2, [r3, #11]
			}
		}

		if(SM_ApplParam.RealtimeCurrent > OVERCURRENT_ADMIN_VALUE){
 801a798:	4b41      	ldr	r3, [pc, #260]	; (801a8a0 <RunDiagnostics+0x2a0>)
 801a79a:	edd3 7a03 	vldr	s15, [r3, #12]
 801a79e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801a8b4 <RunDiagnostics+0x2b4>
 801a7a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7aa:	dd1d      	ble.n	801a7e8 <RunDiagnostics+0x1e8>
			FaultParamTable[Diag_enum_OverCurrent].DebouncefaultCounter++;
 801a7ac:	4b3e      	ldr	r3, [pc, #248]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a7ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a7b2:	3301      	adds	r3, #1
 801a7b4:	b29a      	uxth	r2, r3
 801a7b6:	4b3c      	ldr	r3, [pc, #240]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a7b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			if(FaultParamTable[Diag_enum_OverCurrent].DebouncefaultCounter >= FaultParamTable[Diag_enum_OverCurrent].faultconfirmThreshold){
 801a7bc:	4b3a      	ldr	r3, [pc, #232]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a7be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a7c2:	4b39      	ldr	r3, [pc, #228]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a7c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a7c8:	429a      	cmp	r2, r3
 801a7ca:	d33b      	bcc.n	801a844 <RunDiagnostics+0x244>
				FaultParamTable[Diag_enum_OverCurrent].DebouncefaultCounter = FaultParamTable[Diag_enum_OverCurrent].faultconfirmThreshold;
 801a7cc:	4b36      	ldr	r3, [pc, #216]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a7ce:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a7d2:	4b35      	ldr	r3, [pc, #212]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a7d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				Appl_diagActiveFault.OverCurrent = 1;
 801a7d8:	4b34      	ldr	r3, [pc, #208]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a7da:	2201      	movs	r2, #1
 801a7dc:	731a      	strb	r2, [r3, #12]
				FaultParamTable[Diag_enum_OverCurrent].DebouncehealCounter = 0;
 801a7de:	4b32      	ldr	r3, [pc, #200]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		if(SM_ApplParam.RealtimeCurrent > OVERCURRENT_ADMIN_VALUE){
 801a7e6:	e02d      	b.n	801a844 <RunDiagnostics+0x244>
			}
		}
		else{
			FaultParamTable[Diag_enum_OverCurrent].DebouncehealCounter++;
 801a7e8:	4b2f      	ldr	r3, [pc, #188]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a7ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801a7ee:	3301      	adds	r3, #1
 801a7f0:	b29a      	uxth	r2, r3
 801a7f2:	4b2d      	ldr	r3, [pc, #180]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a7f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
			if(FaultParamTable[Diag_enum_OverCurrent].DebouncehealCounter > FaultParamTable[Diag_enum_OverCurrent].healconfirmThreshold){
 801a7f8:	4b2b      	ldr	r3, [pc, #172]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a7fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801a7fe:	4b2a      	ldr	r3, [pc, #168]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a800:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a804:	429a      	cmp	r2, r3
 801a806:	d91d      	bls.n	801a844 <RunDiagnostics+0x244>
				FaultParamTable[Diag_enum_OverCurrent].DebouncefaultCounter = 0;
 801a808:	4b27      	ldr	r3, [pc, #156]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a80a:	2200      	movs	r2, #0
 801a80c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FaultParamTable[Diag_enum_OverCurrent].DebouncehealCounter = FaultParamTable[Diag_enum_OverCurrent].healconfirmThreshold;
 801a810:	4b25      	ldr	r3, [pc, #148]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a812:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801a816:	4b24      	ldr	r3, [pc, #144]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a818:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				Appl_diagActiveFault.OverCurrent = 0;
 801a81c:	4b23      	ldr	r3, [pc, #140]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a81e:	2200      	movs	r2, #0
 801a820:	731a      	strb	r2, [r3, #12]
		if(SM_ApplParam.RealtimeCurrent > OVERCURRENT_ADMIN_VALUE){
 801a822:	e00f      	b.n	801a844 <RunDiagnostics+0x244>
			}
		}
	}
	else{
		Appl_diagActiveFault.OverCurrent = 0;
 801a824:	4b21      	ldr	r3, [pc, #132]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a826:	2200      	movs	r2, #0
 801a828:	731a      	strb	r2, [r3, #12]
		Appl_diagActiveFault.UnderVoltage = 0;
 801a82a:	4b20      	ldr	r3, [pc, #128]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a82c:	2200      	movs	r2, #0
 801a82e:	715a      	strb	r2, [r3, #5]
		Appl_diagActiveFault.OverVoltage = 0;
 801a830:	4b1e      	ldr	r3, [pc, #120]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a832:	2200      	movs	r2, #0
 801a834:	72da      	strb	r2, [r3, #11]
		Appl_diagActiveFault.CCcutOffVoltage = 0;
 801a836:	4b1d      	ldr	r3, [pc, #116]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a838:	2200      	movs	r2, #0
 801a83a:	70da      	strb	r2, [r3, #3]
		Appl_diagActiveFault.CVcutOffCurrent = 0;
 801a83c:	4b1b      	ldr	r3, [pc, #108]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a83e:	2200      	movs	r2, #0
 801a840:	711a      	strb	r2, [r3, #4]
 801a842:	e000      	b.n	801a846 <RunDiagnostics+0x246>
		if(SM_ApplParam.RealtimeCurrent > OVERCURRENT_ADMIN_VALUE){
 801a844:	bf00      	nop
	}

	if(GPIO_PIN_RESET == DC_CONTACTOR_STATE()){
 801a846:	2102      	movs	r1, #2
 801a848:	4813      	ldr	r0, [pc, #76]	; (801a898 <RunDiagnostics+0x298>)
 801a84a:	f7f9 fa8d 	bl	8013d68 <HAL_GPIO_ReadPin>
 801a84e:	4603      	mov	r3, r0
 801a850:	2b00      	cmp	r3, #0
 801a852:	d149      	bne.n	801a8e8 <RunDiagnostics+0x2e8>
		if(SM_ApplParam.RealtimeVoltage < UNDERVOLTAGE_ADMIN_VALUE){
 801a854:	4b12      	ldr	r3, [pc, #72]	; (801a8a0 <RunDiagnostics+0x2a0>)
 801a856:	edd3 7a02 	vldr	s15, [r3, #8]
 801a85a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a8b8 <RunDiagnostics+0x2b8>
 801a85e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a866:	d529      	bpl.n	801a8bc <RunDiagnostics+0x2bc>
			FaultParamTable[Diag_enum_UnderVoltage].DebouncefaultCounter++;
 801a868:	4b0f      	ldr	r3, [pc, #60]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a86a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a86c:	3301      	adds	r3, #1
 801a86e:	b29a      	uxth	r2, r3
 801a870:	4b0d      	ldr	r3, [pc, #52]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a872:	851a      	strh	r2, [r3, #40]	; 0x28
			if(FaultParamTable[Diag_enum_UnderVoltage].DebouncefaultCounter >= FaultParamTable[Diag_enum_UnderVoltage].faultconfirmThreshold){
 801a874:	4b0c      	ldr	r3, [pc, #48]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a876:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a878:	4b0b      	ldr	r3, [pc, #44]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a87a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801a87c:	429a      	cmp	r2, r3
 801a87e:	d333      	bcc.n	801a8e8 <RunDiagnostics+0x2e8>
				FaultParamTable[Diag_enum_UnderVoltage].DebouncefaultCounter = FaultParamTable[Diag_enum_UnderVoltage].faultconfirmThreshold;
 801a880:	4b09      	ldr	r3, [pc, #36]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a882:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801a884:	4b08      	ldr	r3, [pc, #32]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a886:	851a      	strh	r2, [r3, #40]	; 0x28
				Appl_diagActiveFault.UnderVoltage = 1;
 801a888:	4b08      	ldr	r3, [pc, #32]	; (801a8ac <RunDiagnostics+0x2ac>)
 801a88a:	2201      	movs	r2, #1
 801a88c:	715a      	strb	r2, [r3, #5]
				FaultParamTable[Diag_enum_UnderVoltage].DebouncehealCounter = 0;
 801a88e:	4b06      	ldr	r3, [pc, #24]	; (801a8a8 <RunDiagnostics+0x2a8>)
 801a890:	2200      	movs	r2, #0
 801a892:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a894:	e028      	b.n	801a8e8 <RunDiagnostics+0x2e8>
 801a896:	bf00      	nop
 801a898:	40020400 	.word	0x40020400
 801a89c:	40020800 	.word	0x40020800
 801a8a0:	20005034 	.word	0x20005034
 801a8a4:	20000278 	.word	0x20000278
 801a8a8:	2000000c 	.word	0x2000000c
 801a8ac:	20004d0c 	.word	0x20004d0c
 801a8b0:	437a0000 	.word	0x437a0000
 801a8b4:	42a00000 	.word	0x42a00000
 801a8b8:	42400000 	.word	0x42400000
			}
		}
		else{
			FaultParamTable[Diag_enum_UnderVoltage].DebouncehealCounter++;
 801a8bc:	4b64      	ldr	r3, [pc, #400]	; (801aa50 <RunDiagnostics+0x450>)
 801a8be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a8c0:	3301      	adds	r3, #1
 801a8c2:	b29a      	uxth	r2, r3
 801a8c4:	4b62      	ldr	r3, [pc, #392]	; (801aa50 <RunDiagnostics+0x450>)
 801a8c6:	855a      	strh	r2, [r3, #42]	; 0x2a
			if(FaultParamTable[Diag_enum_UnderVoltage].DebouncehealCounter > FaultParamTable[Diag_enum_UnderVoltage].healconfirmThreshold){
 801a8c8:	4b61      	ldr	r3, [pc, #388]	; (801aa50 <RunDiagnostics+0x450>)
 801a8ca:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a8cc:	4b60      	ldr	r3, [pc, #384]	; (801aa50 <RunDiagnostics+0x450>)
 801a8ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801a8d0:	429a      	cmp	r2, r3
 801a8d2:	d909      	bls.n	801a8e8 <RunDiagnostics+0x2e8>
				FaultParamTable[Diag_enum_UnderVoltage].DebouncefaultCounter = 0;
 801a8d4:	4b5e      	ldr	r3, [pc, #376]	; (801aa50 <RunDiagnostics+0x450>)
 801a8d6:	2200      	movs	r2, #0
 801a8d8:	851a      	strh	r2, [r3, #40]	; 0x28
				FaultParamTable[Diag_enum_UnderVoltage].DebouncehealCounter = FaultParamTable[Diag_enum_UnderVoltage].healconfirmThreshold;
 801a8da:	4b5d      	ldr	r3, [pc, #372]	; (801aa50 <RunDiagnostics+0x450>)
 801a8dc:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 801a8de:	4b5c      	ldr	r3, [pc, #368]	; (801aa50 <RunDiagnostics+0x450>)
 801a8e0:	855a      	strh	r2, [r3, #42]	; 0x2a
				Appl_diagActiveFault.UnderVoltage = 0;
 801a8e2:	4b5c      	ldr	r3, [pc, #368]	; (801aa54 <RunDiagnostics+0x454>)
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	715a      	strb	r2, [r3, #5]
			}
		}
	}

	if(GPIO_PIN_RESET == FILTERBANK_CONNECTSTATE()){
 801a8e8:	2110      	movs	r1, #16
 801a8ea:	485b      	ldr	r0, [pc, #364]	; (801aa58 <RunDiagnostics+0x458>)
 801a8ec:	f7f9 fa3c 	bl	8013d68 <HAL_GPIO_ReadPin>
 801a8f0:	4603      	mov	r3, r0
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d103      	bne.n	801a8fe <RunDiagnostics+0x2fe>
		Appl_diagActiveFault.FiltercktOpen = 1;
 801a8f6:	4b57      	ldr	r3, [pc, #348]	; (801aa54 <RunDiagnostics+0x454>)
 801a8f8:	2201      	movs	r2, #1
 801a8fa:	729a      	strb	r2, [r3, #10]
 801a8fc:	e002      	b.n	801a904 <RunDiagnostics+0x304>
	}
	else{
		Appl_diagActiveFault.FiltercktOpen = 0;
 801a8fe:	4b55      	ldr	r3, [pc, #340]	; (801aa54 <RunDiagnostics+0x454>)
 801a900:	2200      	movs	r2, #0
 801a902:	729a      	strb	r2, [r3, #10]
	}

	if(HAL_GPIO_ReadPin(uC_SCRTemp_GPIO_Port,uC_SCRTemp_Pin) == GPIO_PIN_SET){
 801a904:	2140      	movs	r1, #64	; 0x40
 801a906:	4855      	ldr	r0, [pc, #340]	; (801aa5c <RunDiagnostics+0x45c>)
 801a908:	f7f9 fa2e 	bl	8013d68 <HAL_GPIO_ReadPin>
 801a90c:	4603      	mov	r3, r0
 801a90e:	2b01      	cmp	r3, #1
 801a910:	d116      	bne.n	801a940 <RunDiagnostics+0x340>
		FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncefaultCounter++;
 801a912:	4b4f      	ldr	r3, [pc, #316]	; (801aa50 <RunDiagnostics+0x450>)
 801a914:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a916:	3301      	adds	r3, #1
 801a918:	b29a      	uxth	r2, r3
 801a91a:	4b4d      	ldr	r3, [pc, #308]	; (801aa50 <RunDiagnostics+0x450>)
 801a91c:	861a      	strh	r2, [r3, #48]	; 0x30
		if(FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncefaultCounter >= FaultParamTable[Diag_enum_HighTemperatureSCR].faultconfirmThreshold){
 801a91e:	4b4c      	ldr	r3, [pc, #304]	; (801aa50 <RunDiagnostics+0x450>)
 801a920:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801a922:	4b4b      	ldr	r3, [pc, #300]	; (801aa50 <RunDiagnostics+0x450>)
 801a924:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801a926:	429a      	cmp	r2, r3
 801a928:	d320      	bcc.n	801a96c <RunDiagnostics+0x36c>
			FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncefaultCounter = FaultParamTable[Diag_enum_HighTemperatureSCR].faultconfirmThreshold;
 801a92a:	4b49      	ldr	r3, [pc, #292]	; (801aa50 <RunDiagnostics+0x450>)
 801a92c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 801a92e:	4b48      	ldr	r3, [pc, #288]	; (801aa50 <RunDiagnostics+0x450>)
 801a930:	861a      	strh	r2, [r3, #48]	; 0x30
			Appl_diagActiveFault.HighTempperatureSCR = 1;
 801a932:	4b48      	ldr	r3, [pc, #288]	; (801aa54 <RunDiagnostics+0x454>)
 801a934:	2201      	movs	r2, #1
 801a936:	719a      	strb	r2, [r3, #6]
			FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncehealCounter = 0;
 801a938:	4b45      	ldr	r3, [pc, #276]	; (801aa50 <RunDiagnostics+0x450>)
 801a93a:	2200      	movs	r2, #0
 801a93c:	865a      	strh	r2, [r3, #50]	; 0x32
 801a93e:	e015      	b.n	801a96c <RunDiagnostics+0x36c>
		}
	}
	else{
		FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncehealCounter++;
 801a940:	4b43      	ldr	r3, [pc, #268]	; (801aa50 <RunDiagnostics+0x450>)
 801a942:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a944:	3301      	adds	r3, #1
 801a946:	b29a      	uxth	r2, r3
 801a948:	4b41      	ldr	r3, [pc, #260]	; (801aa50 <RunDiagnostics+0x450>)
 801a94a:	865a      	strh	r2, [r3, #50]	; 0x32
		if(FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncehealCounter > FaultParamTable[Diag_enum_HighTemperatureSCR].healconfirmThreshold){
 801a94c:	4b40      	ldr	r3, [pc, #256]	; (801aa50 <RunDiagnostics+0x450>)
 801a94e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801a950:	4b3f      	ldr	r3, [pc, #252]	; (801aa50 <RunDiagnostics+0x450>)
 801a952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801a954:	429a      	cmp	r2, r3
 801a956:	d909      	bls.n	801a96c <RunDiagnostics+0x36c>
			FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncefaultCounter = 0;
 801a958:	4b3d      	ldr	r3, [pc, #244]	; (801aa50 <RunDiagnostics+0x450>)
 801a95a:	2200      	movs	r2, #0
 801a95c:	861a      	strh	r2, [r3, #48]	; 0x30
			FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncehealCounter = FaultParamTable[Diag_enum_HighTemperatureSCR].healconfirmThreshold;
 801a95e:	4b3c      	ldr	r3, [pc, #240]	; (801aa50 <RunDiagnostics+0x450>)
 801a960:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 801a962:	4b3b      	ldr	r3, [pc, #236]	; (801aa50 <RunDiagnostics+0x450>)
 801a964:	865a      	strh	r2, [r3, #50]	; 0x32
			Appl_diagActiveFault.HighTempperatureSCR = 0;
 801a966:	4b3b      	ldr	r3, [pc, #236]	; (801aa54 <RunDiagnostics+0x454>)
 801a968:	2200      	movs	r2, #0
 801a96a:	719a      	strb	r2, [r3, #6]
	/*Diag_enum_Powerfail_Z1*/
	/*
	 * Let's increase this every 50ms and reset it in 20ms interrupts
	 * If any phase is unavailable, that particular fault counter increases beyond threshold.
	 * */
	FaultParamTable[Diag_enum_Powerfail_Z1].DebouncefaultCounter++;
 801a96c:	4b38      	ldr	r3, [pc, #224]	; (801aa50 <RunDiagnostics+0x450>)
 801a96e:	881b      	ldrh	r3, [r3, #0]
 801a970:	3301      	adds	r3, #1
 801a972:	b29a      	uxth	r2, r3
 801a974:	4b36      	ldr	r3, [pc, #216]	; (801aa50 <RunDiagnostics+0x450>)
 801a976:	801a      	strh	r2, [r3, #0]
	if(FaultParamTable[Diag_enum_Powerfail_Z1].DebouncefaultCounter > FaultParamTable[Diag_enum_Powerfail_Z1].faultconfirmThreshold){
 801a978:	4b35      	ldr	r3, [pc, #212]	; (801aa50 <RunDiagnostics+0x450>)
 801a97a:	881a      	ldrh	r2, [r3, #0]
 801a97c:	4b34      	ldr	r3, [pc, #208]	; (801aa50 <RunDiagnostics+0x450>)
 801a97e:	889b      	ldrh	r3, [r3, #4]
 801a980:	429a      	cmp	r2, r3
 801a982:	d90a      	bls.n	801a99a <RunDiagnostics+0x39a>
		FaultParamTable[Diag_enum_Powerfail_Z1].DebouncefaultCounter = FaultParamTable[Diag_enum_Powerfail_Z1].faultconfirmThreshold;
 801a984:	4b32      	ldr	r3, [pc, #200]	; (801aa50 <RunDiagnostics+0x450>)
 801a986:	889a      	ldrh	r2, [r3, #4]
 801a988:	4b31      	ldr	r3, [pc, #196]	; (801aa50 <RunDiagnostics+0x450>)
 801a98a:	801a      	strh	r2, [r3, #0]
		Appl_diagActiveFault.PowerFail_Z1 = 1;
 801a98c:	4b31      	ldr	r3, [pc, #196]	; (801aa54 <RunDiagnostics+0x454>)
 801a98e:	2201      	movs	r2, #1
 801a990:	701a      	strb	r2, [r3, #0]
		FaultParamTable[Diag_enum_Powerfail_Z1].DebouncehealCounter = 0;
 801a992:	4b2f      	ldr	r3, [pc, #188]	; (801aa50 <RunDiagnostics+0x450>)
 801a994:	2200      	movs	r2, #0
 801a996:	805a      	strh	r2, [r3, #2]
 801a998:	e008      	b.n	801a9ac <RunDiagnostics+0x3ac>
	}
	else if(FaultParamTable[Diag_enum_Powerfail_Z1].DebouncehealCounter >= FaultParamTable[Diag_enum_Powerfail_Z1].healconfirmThreshold){
 801a99a:	4b2d      	ldr	r3, [pc, #180]	; (801aa50 <RunDiagnostics+0x450>)
 801a99c:	885a      	ldrh	r2, [r3, #2]
 801a99e:	4b2c      	ldr	r3, [pc, #176]	; (801aa50 <RunDiagnostics+0x450>)
 801a9a0:	88db      	ldrh	r3, [r3, #6]
 801a9a2:	429a      	cmp	r2, r3
 801a9a4:	d302      	bcc.n	801a9ac <RunDiagnostics+0x3ac>

		Appl_diagActiveFault.PowerFail_Z1 = 0;
 801a9a6:	4b2b      	ldr	r3, [pc, #172]	; (801aa54 <RunDiagnostics+0x454>)
 801a9a8:	2200      	movs	r2, #0
 801a9aa:	701a      	strb	r2, [r3, #0]
	/*Diag_enum_Powerfail_Z2*/
	/*
	 * Let's increase this every 50ms and reset it in 20ms interrupts
	 * If any phase is unavailable, that particular fault counter increases beyond threshold.
	 * */
	FaultParamTable[Diag_enum_Powerfail_Z2].DebouncefaultCounter++;
 801a9ac:	4b28      	ldr	r3, [pc, #160]	; (801aa50 <RunDiagnostics+0x450>)
 801a9ae:	891b      	ldrh	r3, [r3, #8]
 801a9b0:	3301      	adds	r3, #1
 801a9b2:	b29a      	uxth	r2, r3
 801a9b4:	4b26      	ldr	r3, [pc, #152]	; (801aa50 <RunDiagnostics+0x450>)
 801a9b6:	811a      	strh	r2, [r3, #8]
	if(FaultParamTable[Diag_enum_Powerfail_Z2].DebouncefaultCounter > FaultParamTable[Diag_enum_Powerfail_Z2].faultconfirmThreshold){
 801a9b8:	4b25      	ldr	r3, [pc, #148]	; (801aa50 <RunDiagnostics+0x450>)
 801a9ba:	891a      	ldrh	r2, [r3, #8]
 801a9bc:	4b24      	ldr	r3, [pc, #144]	; (801aa50 <RunDiagnostics+0x450>)
 801a9be:	899b      	ldrh	r3, [r3, #12]
 801a9c0:	429a      	cmp	r2, r3
 801a9c2:	d90a      	bls.n	801a9da <RunDiagnostics+0x3da>
		FaultParamTable[Diag_enum_Powerfail_Z2].DebouncefaultCounter = FaultParamTable[Diag_enum_Powerfail_Z2].faultconfirmThreshold;
 801a9c4:	4b22      	ldr	r3, [pc, #136]	; (801aa50 <RunDiagnostics+0x450>)
 801a9c6:	899a      	ldrh	r2, [r3, #12]
 801a9c8:	4b21      	ldr	r3, [pc, #132]	; (801aa50 <RunDiagnostics+0x450>)
 801a9ca:	811a      	strh	r2, [r3, #8]
		Appl_diagActiveFault.PowerFail_Z2 = 1;
 801a9cc:	4b21      	ldr	r3, [pc, #132]	; (801aa54 <RunDiagnostics+0x454>)
 801a9ce:	2201      	movs	r2, #1
 801a9d0:	705a      	strb	r2, [r3, #1]
		FaultParamTable[Diag_enum_Powerfail_Z2].DebouncehealCounter = 0;
 801a9d2:	4b1f      	ldr	r3, [pc, #124]	; (801aa50 <RunDiagnostics+0x450>)
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	815a      	strh	r2, [r3, #10]
 801a9d8:	e008      	b.n	801a9ec <RunDiagnostics+0x3ec>
	}
	else if(FaultParamTable[Diag_enum_Powerfail_Z2].DebouncehealCounter >= FaultParamTable[Diag_enum_Powerfail_Z2].healconfirmThreshold){
 801a9da:	4b1d      	ldr	r3, [pc, #116]	; (801aa50 <RunDiagnostics+0x450>)
 801a9dc:	895a      	ldrh	r2, [r3, #10]
 801a9de:	4b1c      	ldr	r3, [pc, #112]	; (801aa50 <RunDiagnostics+0x450>)
 801a9e0:	89db      	ldrh	r3, [r3, #14]
 801a9e2:	429a      	cmp	r2, r3
 801a9e4:	d302      	bcc.n	801a9ec <RunDiagnostics+0x3ec>

		Appl_diagActiveFault.PowerFail_Z2 = 0;
 801a9e6:	4b1b      	ldr	r3, [pc, #108]	; (801aa54 <RunDiagnostics+0x454>)
 801a9e8:	2200      	movs	r2, #0
 801a9ea:	705a      	strb	r2, [r3, #1]
	/*Diag_enum_Powerfail_Z3*/
	/*
	 * Let's increase this every 50ms and reset it in 20ms interrupts
	 * If any phase is unavailable, that particular fault counter increases beyond threshold.
	 * */
	FaultParamTable[Diag_enum_Powerfail_Z3].DebouncefaultCounter++;
 801a9ec:	4b18      	ldr	r3, [pc, #96]	; (801aa50 <RunDiagnostics+0x450>)
 801a9ee:	8a1b      	ldrh	r3, [r3, #16]
 801a9f0:	3301      	adds	r3, #1
 801a9f2:	b29a      	uxth	r2, r3
 801a9f4:	4b16      	ldr	r3, [pc, #88]	; (801aa50 <RunDiagnostics+0x450>)
 801a9f6:	821a      	strh	r2, [r3, #16]
	if(FaultParamTable[Diag_enum_Powerfail_Z3].DebouncefaultCounter > FaultParamTable[Diag_enum_Powerfail_Z3].faultconfirmThreshold){
 801a9f8:	4b15      	ldr	r3, [pc, #84]	; (801aa50 <RunDiagnostics+0x450>)
 801a9fa:	8a1a      	ldrh	r2, [r3, #16]
 801a9fc:	4b14      	ldr	r3, [pc, #80]	; (801aa50 <RunDiagnostics+0x450>)
 801a9fe:	8a9b      	ldrh	r3, [r3, #20]
 801aa00:	429a      	cmp	r2, r3
 801aa02:	d90a      	bls.n	801aa1a <RunDiagnostics+0x41a>
		FaultParamTable[Diag_enum_Powerfail_Z3].DebouncefaultCounter = FaultParamTable[Diag_enum_Powerfail_Z3].faultconfirmThreshold;
 801aa04:	4b12      	ldr	r3, [pc, #72]	; (801aa50 <RunDiagnostics+0x450>)
 801aa06:	8a9a      	ldrh	r2, [r3, #20]
 801aa08:	4b11      	ldr	r3, [pc, #68]	; (801aa50 <RunDiagnostics+0x450>)
 801aa0a:	821a      	strh	r2, [r3, #16]
		Appl_diagActiveFault.PowerFail_Z3 = 1;
 801aa0c:	4b11      	ldr	r3, [pc, #68]	; (801aa54 <RunDiagnostics+0x454>)
 801aa0e:	2201      	movs	r2, #1
 801aa10:	709a      	strb	r2, [r3, #2]
		FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter = 0;
 801aa12:	4b0f      	ldr	r3, [pc, #60]	; (801aa50 <RunDiagnostics+0x450>)
 801aa14:	2200      	movs	r2, #0
 801aa16:	825a      	strh	r2, [r3, #18]
 801aa18:	e008      	b.n	801aa2c <RunDiagnostics+0x42c>
	}
	else if(FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter >= FaultParamTable[Diag_enum_Powerfail_Z3].healconfirmThreshold){
 801aa1a:	4b0d      	ldr	r3, [pc, #52]	; (801aa50 <RunDiagnostics+0x450>)
 801aa1c:	8a5a      	ldrh	r2, [r3, #18]
 801aa1e:	4b0c      	ldr	r3, [pc, #48]	; (801aa50 <RunDiagnostics+0x450>)
 801aa20:	8adb      	ldrh	r3, [r3, #22]
 801aa22:	429a      	cmp	r2, r3
 801aa24:	d302      	bcc.n	801aa2c <RunDiagnostics+0x42c>
		Appl_diagActiveFault.PowerFail_Z3 = 0;
 801aa26:	4b0b      	ldr	r3, [pc, #44]	; (801aa54 <RunDiagnostics+0x454>)
 801aa28:	2200      	movs	r2, #0
 801aa2a:	709a      	strb	r2, [r3, #2]
	}


	if(HAL_GPIO_ReadPin(uC_BattteryReverse_GPIO_Port,uC_BattteryReverse_Pin) == GPIO_PIN_RESET){
 801aa2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801aa30:	4809      	ldr	r0, [pc, #36]	; (801aa58 <RunDiagnostics+0x458>)
 801aa32:	f7f9 f999 	bl	8013d68 <HAL_GPIO_ReadPin>
 801aa36:	4603      	mov	r3, r0
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d103      	bne.n	801aa44 <RunDiagnostics+0x444>

		Appl_diagActiveFault.BatteryReversal = 1;
 801aa3c:	4b05      	ldr	r3, [pc, #20]	; (801aa54 <RunDiagnostics+0x454>)
 801aa3e:	2201      	movs	r2, #1
 801aa40:	721a      	strb	r2, [r3, #8]
	}
	else{
		Appl_diagActiveFault.BatteryReversal = 0;
	}
}
 801aa42:	e002      	b.n	801aa4a <RunDiagnostics+0x44a>
		Appl_diagActiveFault.BatteryReversal = 0;
 801aa44:	4b03      	ldr	r3, [pc, #12]	; (801aa54 <RunDiagnostics+0x454>)
 801aa46:	2200      	movs	r2, #0
 801aa48:	721a      	strb	r2, [r3, #8]
}
 801aa4a:	bf00      	nop
 801aa4c:	bd80      	pop	{r7, pc}
 801aa4e:	bf00      	nop
 801aa50:	2000000c 	.word	0x2000000c
 801aa54:	20004d0c 	.word	0x20004d0c
 801aa58:	40020800 	.word	0x40020800
 801aa5c:	40020400 	.word	0x40020400

0801aa60 <SM_DispInit>:
extern volatile SM_ECUState_Enum SM_enumECUState;


#if (DGUS_DISPLAY == 1)

void SM_DispInit(void){
 801aa60:	b580      	push	{r7, lr}
 801aa62:	af00      	add	r7, sp, #0
	DGUS_Reset();
 801aa64:	f001 fa80 	bl	801bf68 <DGUS_Reset>
}
 801aa68:	bf00      	nop
 801aa6a:	bd80      	pop	{r7, pc}

0801aa6c <DisplayLoop>:
void DisplayLoop(uint8_t loopms){
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b082      	sub	sp, #8
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	4603      	mov	r3, r0
 801aa74:	71fb      	strb	r3, [r7, #7]
	static uint8_t timer = 0;
	static uint8_t timer2 = 0;
	static uint32_t timer_logo;
	static uint8_t startAnimationFlag = 1;
	Appl_Display.flt_dv = movingAvgFlt(&flt_movAvArray[0],&flt_movAvArraySum,u8_movAvArrayPos,MOVING_AVERAGE_SIZE_vArray,SM_ApplParam.RealtimeVoltage);
 801aa76:	4bb0      	ldr	r3, [pc, #704]	; (801ad38 <DisplayLoop+0x2cc>)
 801aa78:	781a      	ldrb	r2, [r3, #0]
 801aa7a:	4bb0      	ldr	r3, [pc, #704]	; (801ad3c <DisplayLoop+0x2d0>)
 801aa7c:	edd3 7a02 	vldr	s15, [r3, #8]
 801aa80:	eeb0 0a67 	vmov.f32	s0, s15
 801aa84:	2332      	movs	r3, #50	; 0x32
 801aa86:	49ae      	ldr	r1, [pc, #696]	; (801ad40 <DisplayLoop+0x2d4>)
 801aa88:	48ae      	ldr	r0, [pc, #696]	; (801ad44 <DisplayLoop+0x2d8>)
 801aa8a:	f001 fac3 	bl	801c014 <movingAvgFlt>
 801aa8e:	eef0 7a40 	vmov.f32	s15, s0
 801aa92:	4bad      	ldr	r3, [pc, #692]	; (801ad48 <DisplayLoop+0x2dc>)
 801aa94:	edc3 7a01 	vstr	s15, [r3, #4]
	Appl_Display.flt_di = movingAvgFlt(&flt_movAiArray[0],&flt_movAiArraySum,u8_movAiArrayPos,MOVING_AVERAGE_SIZE_iArray,SM_ApplParam.RealtimeCurrent);
 801aa98:	4bac      	ldr	r3, [pc, #688]	; (801ad4c <DisplayLoop+0x2e0>)
 801aa9a:	781a      	ldrb	r2, [r3, #0]
 801aa9c:	4ba7      	ldr	r3, [pc, #668]	; (801ad3c <DisplayLoop+0x2d0>)
 801aa9e:	edd3 7a03 	vldr	s15, [r3, #12]
 801aaa2:	eeb0 0a67 	vmov.f32	s0, s15
 801aaa6:	2314      	movs	r3, #20
 801aaa8:	49a9      	ldr	r1, [pc, #676]	; (801ad50 <DisplayLoop+0x2e4>)
 801aaaa:	48aa      	ldr	r0, [pc, #680]	; (801ad54 <DisplayLoop+0x2e8>)
 801aaac:	f001 fab2 	bl	801c014 <movingAvgFlt>
 801aab0:	eef0 7a40 	vmov.f32	s15, s0
 801aab4:	4ba4      	ldr	r3, [pc, #656]	; (801ad48 <DisplayLoop+0x2dc>)
 801aab6:	edc3 7a00 	vstr	s15, [r3]
	if(Appl_Display.flt_dv <5)Appl_Display.flt_dv = 0;
 801aaba:	4ba3      	ldr	r3, [pc, #652]	; (801ad48 <DisplayLoop+0x2dc>)
 801aabc:	edd3 7a01 	vldr	s15, [r3, #4]
 801aac0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801aac4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801aac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aacc:	d503      	bpl.n	801aad6 <DisplayLoop+0x6a>
 801aace:	4b9e      	ldr	r3, [pc, #632]	; (801ad48 <DisplayLoop+0x2dc>)
 801aad0:	f04f 0200 	mov.w	r2, #0
 801aad4:	605a      	str	r2, [r3, #4]
	if(Appl_Display.flt_di <2)Appl_Display.flt_di = 0;
 801aad6:	4b9c      	ldr	r3, [pc, #624]	; (801ad48 <DisplayLoop+0x2dc>)
 801aad8:	edd3 7a00 	vldr	s15, [r3]
 801aadc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801aae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801aae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aae8:	d503      	bpl.n	801aaf2 <DisplayLoop+0x86>
 801aaea:	4b97      	ldr	r3, [pc, #604]	; (801ad48 <DisplayLoop+0x2dc>)
 801aaec:	f04f 0200 	mov.w	r2, #0
 801aaf0:	601a      	str	r2, [r3, #0]
	if(++u8_movAvArrayPos >= MOVING_AVERAGE_SIZE_vArray)u8_movAvArrayPos = 0;
 801aaf2:	4b91      	ldr	r3, [pc, #580]	; (801ad38 <DisplayLoop+0x2cc>)
 801aaf4:	781b      	ldrb	r3, [r3, #0]
 801aaf6:	3301      	adds	r3, #1
 801aaf8:	b2da      	uxtb	r2, r3
 801aafa:	4b8f      	ldr	r3, [pc, #572]	; (801ad38 <DisplayLoop+0x2cc>)
 801aafc:	701a      	strb	r2, [r3, #0]
 801aafe:	4b8e      	ldr	r3, [pc, #568]	; (801ad38 <DisplayLoop+0x2cc>)
 801ab00:	781b      	ldrb	r3, [r3, #0]
 801ab02:	2b31      	cmp	r3, #49	; 0x31
 801ab04:	d902      	bls.n	801ab0c <DisplayLoop+0xa0>
 801ab06:	4b8c      	ldr	r3, [pc, #560]	; (801ad38 <DisplayLoop+0x2cc>)
 801ab08:	2200      	movs	r2, #0
 801ab0a:	701a      	strb	r2, [r3, #0]
	if(++u8_movAiArrayPos >= MOVING_AVERAGE_SIZE_iArray)u8_movAiArrayPos = 0;
 801ab0c:	4b8f      	ldr	r3, [pc, #572]	; (801ad4c <DisplayLoop+0x2e0>)
 801ab0e:	781b      	ldrb	r3, [r3, #0]
 801ab10:	3301      	adds	r3, #1
 801ab12:	b2da      	uxtb	r2, r3
 801ab14:	4b8d      	ldr	r3, [pc, #564]	; (801ad4c <DisplayLoop+0x2e0>)
 801ab16:	701a      	strb	r2, [r3, #0]
 801ab18:	4b8c      	ldr	r3, [pc, #560]	; (801ad4c <DisplayLoop+0x2e0>)
 801ab1a:	781b      	ldrb	r3, [r3, #0]
 801ab1c:	2b13      	cmp	r3, #19
 801ab1e:	d902      	bls.n	801ab26 <DisplayLoop+0xba>
 801ab20:	4b8a      	ldr	r3, [pc, #552]	; (801ad4c <DisplayLoop+0x2e0>)
 801ab22:	2200      	movs	r2, #0
 801ab24:	701a      	strb	r2, [r3, #0]

	if(Display.DisplayState == SM_enum_Display_POWERON_LOGO){
 801ab26:	4b8c      	ldr	r3, [pc, #560]	; (801ad58 <DisplayLoop+0x2ec>)
 801ab28:	781b      	ldrb	r3, [r3, #0]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d118      	bne.n	801ab60 <DisplayLoop+0xf4>
		timer_logo++;
 801ab2e:	4b8b      	ldr	r3, [pc, #556]	; (801ad5c <DisplayLoop+0x2f0>)
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	3301      	adds	r3, #1
 801ab34:	4a89      	ldr	r2, [pc, #548]	; (801ad5c <DisplayLoop+0x2f0>)
 801ab36:	6013      	str	r3, [r2, #0]
		if(timer_logo < ((2000)/loopms)){
 801ab38:	79fb      	ldrb	r3, [r7, #7]
 801ab3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801ab3e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab42:	461a      	mov	r2, r3
 801ab44:	4b85      	ldr	r3, [pc, #532]	; (801ad5c <DisplayLoop+0x2f0>)
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	429a      	cmp	r2, r3
 801ab4a:	d903      	bls.n	801ab54 <DisplayLoop+0xe8>
			WritePageID(DGUS_PAGEID_SPLASHSCREEN1);
 801ab4c:	2000      	movs	r0, #0
 801ab4e:	f000 f96b 	bl	801ae28 <WritePageID>
 801ab52:	e002      	b.n	801ab5a <DisplayLoop+0xee>
		}
		else{
			WritePageID(DGUS_PAGEID_SPLASHSCREEN2);
 801ab54:	2001      	movs	r0, #1
 801ab56:	f000 f967 	bl	801ae28 <WritePageID>
		}
		startAnimationFlag = 1;
 801ab5a:	4b81      	ldr	r3, [pc, #516]	; (801ad60 <DisplayLoop+0x2f4>)
 801ab5c:	2201      	movs	r2, #1
 801ab5e:	701a      	strb	r2, [r3, #0]
	}
	if(Display.DisplayState == SM_enum_Display_MAIN_MENU){
 801ab60:	4b7d      	ldr	r3, [pc, #500]	; (801ad58 <DisplayLoop+0x2ec>)
 801ab62:	781b      	ldrb	r3, [r3, #0]
 801ab64:	2b01      	cmp	r3, #1
 801ab66:	d105      	bne.n	801ab74 <DisplayLoop+0x108>
		startAnimationFlag = 1;
 801ab68:	4b7d      	ldr	r3, [pc, #500]	; (801ad60 <DisplayLoop+0x2f4>)
 801ab6a:	2201      	movs	r2, #1
 801ab6c:	701a      	strb	r2, [r3, #0]
		WritePageID(DGUS_PAGEID_MAINMENU);
 801ab6e:	2002      	movs	r0, #2
 801ab70:	f000 f95a 	bl	801ae28 <WritePageID>
	}
	if(Display.DisplayState == SM_enum_Display_CurrentModeSettings){
 801ab74:	4b78      	ldr	r3, [pc, #480]	; (801ad58 <DisplayLoop+0x2ec>)
 801ab76:	781b      	ldrb	r3, [r3, #0]
 801ab78:	2b02      	cmp	r3, #2
 801ab7a:	d102      	bne.n	801ab82 <DisplayLoop+0x116>
		WritePageID(DGUS_PAGEID_CURRENTMODESETTINGS);
 801ab7c:	2003      	movs	r0, #3
 801ab7e:	f000 f953 	bl	801ae28 <WritePageID>
	}
	if(Display.DisplayState == SM_enum_Display_VoltageModeSettings){
 801ab82:	4b75      	ldr	r3, [pc, #468]	; (801ad58 <DisplayLoop+0x2ec>)
 801ab84:	781b      	ldrb	r3, [r3, #0]
 801ab86:	2b03      	cmp	r3, #3
 801ab88:	d102      	bne.n	801ab90 <DisplayLoop+0x124>
		WritePageID(DGUS_PAGEID_VOLTAGEMODESETTINGS);
 801ab8a:	200c      	movs	r0, #12
 801ab8c:	f000 f94c 	bl	801ae28 <WritePageID>
	}
	if(Display.DisplayState == SM_enum_Display_CCPreparing){
 801ab90:	4b71      	ldr	r3, [pc, #452]	; (801ad58 <DisplayLoop+0x2ec>)
 801ab92:	781b      	ldrb	r3, [r3, #0]
 801ab94:	2b0e      	cmp	r3, #14
 801ab96:	d120      	bne.n	801abda <DisplayLoop+0x16e>
		WritePageID(DGUS_PAGEID_CCPREPARING);
 801ab98:	2013      	movs	r0, #19
 801ab9a:	f000 f945 	bl	801ae28 <WritePageID>
		if(startAnimationFlag == 1){
 801ab9e:	4b70      	ldr	r3, [pc, #448]	; (801ad60 <DisplayLoop+0x2f4>)
 801aba0:	781b      	ldrb	r3, [r3, #0]
 801aba2:	2b01      	cmp	r3, #1
 801aba4:	d104      	bne.n	801abb0 <DisplayLoop+0x144>
			startAnimationFlag = 0;
 801aba6:	4b6e      	ldr	r3, [pc, #440]	; (801ad60 <DisplayLoop+0x2f4>)
 801aba8:	2200      	movs	r2, #0
 801abaa:	701a      	strb	r2, [r3, #0]
			StartAnimation();
 801abac:	f001 fa04 	bl	801bfb8 <StartAnimation>
		}
		timer++;
 801abb0:	4b6c      	ldr	r3, [pc, #432]	; (801ad64 <DisplayLoop+0x2f8>)
 801abb2:	781b      	ldrb	r3, [r3, #0]
 801abb4:	3301      	adds	r3, #1
 801abb6:	b2da      	uxtb	r2, r3
 801abb8:	4b6a      	ldr	r3, [pc, #424]	; (801ad64 <DisplayLoop+0x2f8>)
 801abba:	701a      	strb	r2, [r3, #0]
		if(timer>(250/loopms)){
 801abbc:	4b69      	ldr	r3, [pc, #420]	; (801ad64 <DisplayLoop+0x2f8>)
 801abbe:	781b      	ldrb	r3, [r3, #0]
 801abc0:	4619      	mov	r1, r3
 801abc2:	79fb      	ldrb	r3, [r7, #7]
 801abc4:	22fa      	movs	r2, #250	; 0xfa
 801abc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801abca:	4299      	cmp	r1, r3
 801abcc:	dd42      	ble.n	801ac54 <DisplayLoop+0x1e8>
			timer = 0;
 801abce:	4b65      	ldr	r3, [pc, #404]	; (801ad64 <DisplayLoop+0x2f8>)
 801abd0:	2200      	movs	r2, #0
 801abd2:	701a      	strb	r2, [r3, #0]
			DGUS_UpdateWritefloatVariables();
 801abd4:	f000 fa84 	bl	801b0e0 <DGUS_UpdateWritefloatVariables>
 801abd8:	e03c      	b.n	801ac54 <DisplayLoop+0x1e8>
		}
	}
	else if(Display.DisplayState == SM_enum_Display_CCRun_Slow){
 801abda:	4b5f      	ldr	r3, [pc, #380]	; (801ad58 <DisplayLoop+0x2ec>)
 801abdc:	781b      	ldrb	r3, [r3, #0]
 801abde:	2b09      	cmp	r3, #9
 801abe0:	d11a      	bne.n	801ac18 <DisplayLoop+0x1ac>
		timer++;
 801abe2:	4b60      	ldr	r3, [pc, #384]	; (801ad64 <DisplayLoop+0x2f8>)
 801abe4:	781b      	ldrb	r3, [r3, #0]
 801abe6:	3301      	adds	r3, #1
 801abe8:	b2da      	uxtb	r2, r3
 801abea:	4b5e      	ldr	r3, [pc, #376]	; (801ad64 <DisplayLoop+0x2f8>)
 801abec:	701a      	strb	r2, [r3, #0]
		if(timer>(1000/loopms)){
 801abee:	4b5d      	ldr	r3, [pc, #372]	; (801ad64 <DisplayLoop+0x2f8>)
 801abf0:	781b      	ldrb	r3, [r3, #0]
 801abf2:	4619      	mov	r1, r3
 801abf4:	79fb      	ldrb	r3, [r7, #7]
 801abf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801abfa:	fb92 f3f3 	sdiv	r3, r2, r3
 801abfe:	4299      	cmp	r1, r3
 801ac00:	dd04      	ble.n	801ac0c <DisplayLoop+0x1a0>
			timer = 0;
 801ac02:	4b58      	ldr	r3, [pc, #352]	; (801ad64 <DisplayLoop+0x2f8>)
 801ac04:	2200      	movs	r2, #0
 801ac06:	701a      	strb	r2, [r3, #0]
			DGUS_UpdateWritefloatVariables();
 801ac08:	f000 fa6a 	bl	801b0e0 <DGUS_UpdateWritefloatVariables>
		}

		DGUS_updateMessages();
 801ac0c:	f001 f908 	bl	801be20 <DGUS_updateMessages>
		WritePageID(DGUS_PAGEID_CCRUNNING);
 801ac10:	2006      	movs	r0, #6
 801ac12:	f000 f909 	bl	801ae28 <WritePageID>
 801ac16:	e01d      	b.n	801ac54 <DisplayLoop+0x1e8>
	}
	else if(Display.DisplayState == SM_enum_Display_CCRun_Stable){
 801ac18:	4b4f      	ldr	r3, [pc, #316]	; (801ad58 <DisplayLoop+0x2ec>)
 801ac1a:	781b      	ldrb	r3, [r3, #0]
 801ac1c:	2b0a      	cmp	r3, #10
 801ac1e:	d119      	bne.n	801ac54 <DisplayLoop+0x1e8>
		timer++;
 801ac20:	4b50      	ldr	r3, [pc, #320]	; (801ad64 <DisplayLoop+0x2f8>)
 801ac22:	781b      	ldrb	r3, [r3, #0]
 801ac24:	3301      	adds	r3, #1
 801ac26:	b2da      	uxtb	r2, r3
 801ac28:	4b4e      	ldr	r3, [pc, #312]	; (801ad64 <DisplayLoop+0x2f8>)
 801ac2a:	701a      	strb	r2, [r3, #0]
		if(timer>(1000/loopms)){
 801ac2c:	4b4d      	ldr	r3, [pc, #308]	; (801ad64 <DisplayLoop+0x2f8>)
 801ac2e:	781b      	ldrb	r3, [r3, #0]
 801ac30:	4619      	mov	r1, r3
 801ac32:	79fb      	ldrb	r3, [r7, #7]
 801ac34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ac38:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac3c:	4299      	cmp	r1, r3
 801ac3e:	dd04      	ble.n	801ac4a <DisplayLoop+0x1de>
			timer = 0;
 801ac40:	4b48      	ldr	r3, [pc, #288]	; (801ad64 <DisplayLoop+0x2f8>)
 801ac42:	2200      	movs	r2, #0
 801ac44:	701a      	strb	r2, [r3, #0]
			DGUS_UpdateWritefloatVariables();
 801ac46:	f000 fa4b 	bl	801b0e0 <DGUS_UpdateWritefloatVariables>
		}

		DGUS_updateMessages();
 801ac4a:	f001 f8e9 	bl	801be20 <DGUS_updateMessages>
		WritePageID(DGUS_PAGEID_CCRUNNING);
 801ac4e:	2006      	movs	r0, #6
 801ac50:	f000 f8ea 	bl	801ae28 <WritePageID>
	}
	if(Display.DisplayState == SM_enum_Display_CVPreparing){
 801ac54:	4b40      	ldr	r3, [pc, #256]	; (801ad58 <DisplayLoop+0x2ec>)
 801ac56:	781b      	ldrb	r3, [r3, #0]
 801ac58:	2b0d      	cmp	r3, #13
 801ac5a:	d122      	bne.n	801aca2 <DisplayLoop+0x236>
		WritePageID(DGUS_PAGEID_CVPREPARING);
 801ac5c:	2014      	movs	r0, #20
 801ac5e:	f000 f8e3 	bl	801ae28 <WritePageID>
		if(startAnimationFlag == 1){
 801ac62:	4b3f      	ldr	r3, [pc, #252]	; (801ad60 <DisplayLoop+0x2f4>)
 801ac64:	781b      	ldrb	r3, [r3, #0]
 801ac66:	2b01      	cmp	r3, #1
 801ac68:	d104      	bne.n	801ac74 <DisplayLoop+0x208>
			startAnimationFlag = 0;
 801ac6a:	4b3d      	ldr	r3, [pc, #244]	; (801ad60 <DisplayLoop+0x2f4>)
 801ac6c:	2200      	movs	r2, #0
 801ac6e:	701a      	strb	r2, [r3, #0]
			StartAnimation();
 801ac70:	f001 f9a2 	bl	801bfb8 <StartAnimation>
		}
		timer++;
 801ac74:	4b3b      	ldr	r3, [pc, #236]	; (801ad64 <DisplayLoop+0x2f8>)
 801ac76:	781b      	ldrb	r3, [r3, #0]
 801ac78:	3301      	adds	r3, #1
 801ac7a:	b2da      	uxtb	r2, r3
 801ac7c:	4b39      	ldr	r3, [pc, #228]	; (801ad64 <DisplayLoop+0x2f8>)
 801ac7e:	701a      	strb	r2, [r3, #0]
		if(timer>(1000/loopms)){
 801ac80:	4b38      	ldr	r3, [pc, #224]	; (801ad64 <DisplayLoop+0x2f8>)
 801ac82:	781b      	ldrb	r3, [r3, #0]
 801ac84:	4619      	mov	r1, r3
 801ac86:	79fb      	ldrb	r3, [r7, #7]
 801ac88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ac8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac90:	4299      	cmp	r1, r3
 801ac92:	f340 8095 	ble.w	801adc0 <DisplayLoop+0x354>
			timer = 0;
 801ac96:	4b33      	ldr	r3, [pc, #204]	; (801ad64 <DisplayLoop+0x2f8>)
 801ac98:	2200      	movs	r2, #0
 801ac9a:	701a      	strb	r2, [r3, #0]
			DGUS_UpdateWritefloatVariables();
 801ac9c:	f000 fa20 	bl	801b0e0 <DGUS_UpdateWritefloatVariables>
 801aca0:	e08e      	b.n	801adc0 <DisplayLoop+0x354>
		}


	}
	else if(Display.DisplayState == SM_enum_Display_CVRun_Slow){
 801aca2:	4b2d      	ldr	r3, [pc, #180]	; (801ad58 <DisplayLoop+0x2ec>)
 801aca4:	781b      	ldrb	r3, [r3, #0]
 801aca6:	2b0b      	cmp	r3, #11
 801aca8:	d11a      	bne.n	801ace0 <DisplayLoop+0x274>
		timer++;
 801acaa:	4b2e      	ldr	r3, [pc, #184]	; (801ad64 <DisplayLoop+0x2f8>)
 801acac:	781b      	ldrb	r3, [r3, #0]
 801acae:	3301      	adds	r3, #1
 801acb0:	b2da      	uxtb	r2, r3
 801acb2:	4b2c      	ldr	r3, [pc, #176]	; (801ad64 <DisplayLoop+0x2f8>)
 801acb4:	701a      	strb	r2, [r3, #0]
		if(timer>(1000/loopms)){
 801acb6:	4b2b      	ldr	r3, [pc, #172]	; (801ad64 <DisplayLoop+0x2f8>)
 801acb8:	781b      	ldrb	r3, [r3, #0]
 801acba:	4619      	mov	r1, r3
 801acbc:	79fb      	ldrb	r3, [r7, #7]
 801acbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801acc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801acc6:	4299      	cmp	r1, r3
 801acc8:	dd04      	ble.n	801acd4 <DisplayLoop+0x268>
			timer = 0;
 801acca:	4b26      	ldr	r3, [pc, #152]	; (801ad64 <DisplayLoop+0x2f8>)
 801accc:	2200      	movs	r2, #0
 801acce:	701a      	strb	r2, [r3, #0]
			DGUS_UpdateWritefloatVariables();
 801acd0:	f000 fa06 	bl	801b0e0 <DGUS_UpdateWritefloatVariables>
		}
		DGUS_updateMessages();
 801acd4:	f001 f8a4 	bl	801be20 <DGUS_updateMessages>
		WritePageID(DGUS_PAGEID_CVRUNNING);
 801acd8:	200e      	movs	r0, #14
 801acda:	f000 f8a5 	bl	801ae28 <WritePageID>
 801acde:	e06f      	b.n	801adc0 <DisplayLoop+0x354>

	}
	else if(Display.DisplayState == SM_enum_Display_CVRun_Stable){
 801ace0:	4b1d      	ldr	r3, [pc, #116]	; (801ad58 <DisplayLoop+0x2ec>)
 801ace2:	781b      	ldrb	r3, [r3, #0]
 801ace4:	2b0c      	cmp	r3, #12
 801ace6:	d11a      	bne.n	801ad1e <DisplayLoop+0x2b2>
		timer++;
 801ace8:	4b1e      	ldr	r3, [pc, #120]	; (801ad64 <DisplayLoop+0x2f8>)
 801acea:	781b      	ldrb	r3, [r3, #0]
 801acec:	3301      	adds	r3, #1
 801acee:	b2da      	uxtb	r2, r3
 801acf0:	4b1c      	ldr	r3, [pc, #112]	; (801ad64 <DisplayLoop+0x2f8>)
 801acf2:	701a      	strb	r2, [r3, #0]
		if(timer>(1000/loopms)){
 801acf4:	4b1b      	ldr	r3, [pc, #108]	; (801ad64 <DisplayLoop+0x2f8>)
 801acf6:	781b      	ldrb	r3, [r3, #0]
 801acf8:	4619      	mov	r1, r3
 801acfa:	79fb      	ldrb	r3, [r7, #7]
 801acfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ad00:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad04:	4299      	cmp	r1, r3
 801ad06:	dd5b      	ble.n	801adc0 <DisplayLoop+0x354>
			timer = 0;
 801ad08:	4b16      	ldr	r3, [pc, #88]	; (801ad64 <DisplayLoop+0x2f8>)
 801ad0a:	2200      	movs	r2, #0
 801ad0c:	701a      	strb	r2, [r3, #0]
			DGUS_UpdateWritefloatVariables();
 801ad0e:	f000 f9e7 	bl	801b0e0 <DGUS_UpdateWritefloatVariables>
			DGUS_updateMessages();
 801ad12:	f001 f885 	bl	801be20 <DGUS_updateMessages>
			WritePageID(DGUS_PAGEID_CVRUNNING);
 801ad16:	200e      	movs	r0, #14
 801ad18:	f000 f886 	bl	801ae28 <WritePageID>
 801ad1c:	e050      	b.n	801adc0 <DisplayLoop+0x354>
		}

	}
	else if(Display.DisplayState == SM_enum_Display_SelfTest){
 801ad1e:	4b0e      	ldr	r3, [pc, #56]	; (801ad58 <DisplayLoop+0x2ec>)
 801ad20:	781b      	ldrb	r3, [r3, #0]
 801ad22:	2b04      	cmp	r3, #4
 801ad24:	d120      	bne.n	801ad68 <DisplayLoop+0x2fc>
		DGUS_updateSelfTestText(loopms);
 801ad26:	79fb      	ldrb	r3, [r7, #7]
 801ad28:	b29b      	uxth	r3, r3
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	f000 fd02 	bl	801b734 <DGUS_updateSelfTestText>
		DGUS_UpdateWritefloatVariables();
 801ad30:	f000 f9d6 	bl	801b0e0 <DGUS_UpdateWritefloatVariables>
 801ad34:	e044      	b.n	801adc0 <DisplayLoop+0x354>
 801ad36:	bf00      	nop
 801ad38:	20004f04 	.word	0x20004f04
 801ad3c:	20005034 	.word	0x20005034
 801ad40:	20004de4 	.word	0x20004de4
 801ad44:	20004dec 	.word	0x20004dec
 801ad48:	20004f08 	.word	0x20004f08
 801ad4c:	20004f1c 	.word	0x20004f1c
 801ad50:	20004de8 	.word	0x20004de8
 801ad54:	20004eb4 	.word	0x20004eb4
 801ad58:	20004f6c 	.word	0x20004f6c
 801ad5c:	200008dc 	.word	0x200008dc
 801ad60:	20000274 	.word	0x20000274
 801ad64:	200008e0 	.word	0x200008e0
	}
	else if(Display.DisplayState == SM_enum_Display_CCPause){
 801ad68:	4b2c      	ldr	r3, [pc, #176]	; (801ae1c <DisplayLoop+0x3b0>)
 801ad6a:	781b      	ldrb	r3, [r3, #0]
 801ad6c:	2b14      	cmp	r3, #20
 801ad6e:	d108      	bne.n	801ad82 <DisplayLoop+0x316>
		startAnimationFlag = 1;
 801ad70:	4b2b      	ldr	r3, [pc, #172]	; (801ae20 <DisplayLoop+0x3b4>)
 801ad72:	2201      	movs	r2, #1
 801ad74:	701a      	strb	r2, [r3, #0]
		WritePageID(DGUS_PAGEID_CCPAUSED);
 801ad76:	2007      	movs	r0, #7
 801ad78:	f000 f856 	bl	801ae28 <WritePageID>
		DGUS_updatePauseReason();
 801ad7c:	f000 fa24 	bl	801b1c8 <DGUS_updatePauseReason>
 801ad80:	e01e      	b.n	801adc0 <DisplayLoop+0x354>
	}
	else if(Display.DisplayState == SM_enum_Display_CVPause){
 801ad82:	4b26      	ldr	r3, [pc, #152]	; (801ae1c <DisplayLoop+0x3b0>)
 801ad84:	781b      	ldrb	r3, [r3, #0]
 801ad86:	2b15      	cmp	r3, #21
 801ad88:	d108      	bne.n	801ad9c <DisplayLoop+0x330>
		startAnimationFlag = 1;
 801ad8a:	4b25      	ldr	r3, [pc, #148]	; (801ae20 <DisplayLoop+0x3b4>)
 801ad8c:	2201      	movs	r2, #1
 801ad8e:	701a      	strb	r2, [r3, #0]
		WritePageID(DGUS_PAGEID_CVPAUSED);
 801ad90:	200d      	movs	r0, #13
 801ad92:	f000 f849 	bl	801ae28 <WritePageID>
		DGUS_updatePauseReason();
 801ad96:	f000 fa17 	bl	801b1c8 <DGUS_updatePauseReason>
 801ad9a:	e011      	b.n	801adc0 <DisplayLoop+0x354>
	}
	else if(Display.DisplayState == SM_enum_Display_StoppedWhileRunning){
 801ad9c:	4b1f      	ldr	r3, [pc, #124]	; (801ae1c <DisplayLoop+0x3b0>)
 801ad9e:	781b      	ldrb	r3, [r3, #0]
 801ada0:	2b16      	cmp	r3, #22
 801ada2:	d103      	bne.n	801adac <DisplayLoop+0x340>
		WritePageID(DGUS_PAGEID_RESUMINGFROMLASTPOINT);
 801ada4:	200f      	movs	r0, #15
 801ada6:	f000 f83f 	bl	801ae28 <WritePageID>
 801adaa:	e009      	b.n	801adc0 <DisplayLoop+0x354>

	}
	else if(Display.DisplayState == SM_enum_Display_PoweringOffWindow){
 801adac:	4b1b      	ldr	r3, [pc, #108]	; (801ae1c <DisplayLoop+0x3b0>)
 801adae:	781b      	ldrb	r3, [r3, #0]
 801adb0:	2b0f      	cmp	r3, #15
 801adb2:	d105      	bne.n	801adc0 <DisplayLoop+0x354>
		startAnimationFlag = 1;
 801adb4:	4b1a      	ldr	r3, [pc, #104]	; (801ae20 <DisplayLoop+0x3b4>)
 801adb6:	2201      	movs	r2, #1
 801adb8:	701a      	strb	r2, [r3, #0]
		WritePageID(DGUS_PAGEID_POWERFAILURE);
 801adba:	2010      	movs	r0, #16
 801adbc:	f000 f834 	bl	801ae28 <WritePageID>
	}
	if(Display.DisplayState == SM_enum_Display_Settings_Menu){
 801adc0:	4b16      	ldr	r3, [pc, #88]	; (801ae1c <DisplayLoop+0x3b0>)
 801adc2:	781b      	ldrb	r3, [r3, #0]
 801adc4:	2b05      	cmp	r3, #5
 801adc6:	d102      	bne.n	801adce <DisplayLoop+0x362>
		WritePageID(DGUS_PAGEID_SETTINGS);
 801adc8:	2008      	movs	r0, #8
 801adca:	f000 f82d 	bl	801ae28 <WritePageID>
	}
	if(Display.DisplayState == SM_enum_Display_Settings_Menu_Completed){
 801adce:	4b13      	ldr	r3, [pc, #76]	; (801ae1c <DisplayLoop+0x3b0>)
 801add0:	781b      	ldrb	r3, [r3, #0]
 801add2:	2b08      	cmp	r3, #8
 801add4:	d101      	bne.n	801adda <DisplayLoop+0x36e>
		DGUS_UpdateWritefloatVariables();
 801add6:	f000 f983 	bl	801b0e0 <DGUS_UpdateWritefloatVariables>
	}
	if(Display.DisplayState == SM_enum_Display_Settings_Menu_Erase){

	}
	if(Display.DisplayState == SM_enum_Display_VishwaTest){
 801adda:	4b10      	ldr	r3, [pc, #64]	; (801ae1c <DisplayLoop+0x3b0>)
 801addc:	781b      	ldrb	r3, [r3, #0]
 801adde:	2b10      	cmp	r3, #16
 801ade0:	d102      	bne.n	801ade8 <DisplayLoop+0x37c>
		WritePageID(DGUS_PAGEID_VISHWAMODE);
 801ade2:	2012      	movs	r0, #18
 801ade4:	f000 f820 	bl	801ae28 <WritePageID>
	else if(Display.DisplayState == SM_enum_Display_Info){


	}

	timer2++;
 801ade8:	4b0e      	ldr	r3, [pc, #56]	; (801ae24 <DisplayLoop+0x3b8>)
 801adea:	781b      	ldrb	r3, [r3, #0]
 801adec:	3301      	adds	r3, #1
 801adee:	b2da      	uxtb	r2, r3
 801adf0:	4b0c      	ldr	r3, [pc, #48]	; (801ae24 <DisplayLoop+0x3b8>)
 801adf2:	701a      	strb	r2, [r3, #0]
	if(timer2>(750/loopms)){
 801adf4:	4b0b      	ldr	r3, [pc, #44]	; (801ae24 <DisplayLoop+0x3b8>)
 801adf6:	781b      	ldrb	r3, [r3, #0]
 801adf8:	4619      	mov	r1, r3
 801adfa:	79fb      	ldrb	r3, [r7, #7]
 801adfc:	f240 22ee 	movw	r2, #750	; 0x2ee
 801ae00:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae04:	4299      	cmp	r1, r3
 801ae06:	dd04      	ble.n	801ae12 <DisplayLoop+0x3a6>
		timer2 = 0;
 801ae08:	4b06      	ldr	r3, [pc, #24]	; (801ae24 <DisplayLoop+0x3b8>)
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	701a      	strb	r2, [r3, #0]
		DGUS_UpdateWriteVariables();
 801ae0e:	f000 f8a9 	bl	801af64 <DGUS_UpdateWriteVariables>
	}


}
 801ae12:	bf00      	nop
 801ae14:	3708      	adds	r7, #8
 801ae16:	46bd      	mov	sp, r7
 801ae18:	bd80      	pop	{r7, pc}
 801ae1a:	bf00      	nop
 801ae1c:	20004f6c 	.word	0x20004f6c
 801ae20:	20000274 	.word	0x20000274
 801ae24:	200008e1 	.word	0x200008e1

0801ae28 <WritePageID>:

DGUS_ERROR WritePageID(uint16_t PageId){
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b082      	sub	sp, #8
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	4603      	mov	r3, r0
 801ae30:	80fb      	strh	r3, [r7, #6]
//	static uint16_t page_old;

	memset(&uartDgusTxBuffer[0],0,sizeof(uartDgusTxBuffer));
 801ae32:	2240      	movs	r2, #64	; 0x40
 801ae34:	2100      	movs	r1, #0
 801ae36:	4817      	ldr	r0, [pc, #92]	; (801ae94 <WritePageID+0x6c>)
 801ae38:	f009 f99e 	bl	8024178 <memset>
	memset(&uartDgusRxBuffer[0],0,sizeof(uartDgusRxBuffer));
 801ae3c:	2240      	movs	r2, #64	; 0x40
 801ae3e:	2100      	movs	r1, #0
 801ae40:	4815      	ldr	r0, [pc, #84]	; (801ae98 <WritePageID+0x70>)
 801ae42:	f009 f999 	bl	8024178 <memset>

	memcpy(&uartDgusTxBuffer[0], &uartCommandList[0][0],DGUS_TRANSFER_BUFFER_SIZE);
 801ae46:	2240      	movs	r2, #64	; 0x40
 801ae48:	4914      	ldr	r1, [pc, #80]	; (801ae9c <WritePageID+0x74>)
 801ae4a:	4812      	ldr	r0, [pc, #72]	; (801ae94 <WritePageID+0x6c>)
 801ae4c:	f009 f986 	bl	802415c <memcpy>

	uartDgusTxBuffer[8] = (uint8_t)(PageId>>8);
 801ae50:	88fb      	ldrh	r3, [r7, #6]
 801ae52:	0a1b      	lsrs	r3, r3, #8
 801ae54:	b29b      	uxth	r3, r3
 801ae56:	b2da      	uxtb	r2, r3
 801ae58:	4b0e      	ldr	r3, [pc, #56]	; (801ae94 <WritePageID+0x6c>)
 801ae5a:	721a      	strb	r2, [r3, #8]
	uartDgusTxBuffer[9] = (uint8_t)(PageId & 0x00FF);
 801ae5c:	88fb      	ldrh	r3, [r7, #6]
 801ae5e:	b2da      	uxtb	r2, r3
 801ae60:	4b0c      	ldr	r3, [pc, #48]	; (801ae94 <WritePageID+0x6c>)
 801ae62:	725a      	strb	r2, [r3, #9]

	if(Display.DGUSParam.PageId != PageId){
 801ae64:	4b0e      	ldr	r3, [pc, #56]	; (801aea0 <WritePageID+0x78>)
 801ae66:	885b      	ldrh	r3, [r3, #2]
 801ae68:	88fa      	ldrh	r2, [r7, #6]
 801ae6a:	429a      	cmp	r2, r3
 801ae6c:	d00c      	beq.n	801ae88 <WritePageID+0x60>
		if(HAL_OK !=HAL_UART_Transmit(&huart3, &uartDgusTxBuffer[0], 10, 10)) return DGUS_ERR;
 801ae6e:	230a      	movs	r3, #10
 801ae70:	220a      	movs	r2, #10
 801ae72:	4908      	ldr	r1, [pc, #32]	; (801ae94 <WritePageID+0x6c>)
 801ae74:	480b      	ldr	r0, [pc, #44]	; (801aea4 <WritePageID+0x7c>)
 801ae76:	f7fc ffb6 	bl	8017de6 <HAL_UART_Transmit>
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d001      	beq.n	801ae84 <WritePageID+0x5c>
 801ae80:	2302      	movs	r3, #2
 801ae82:	e002      	b.n	801ae8a <WritePageID+0x62>
		else return DGUS_OK;
 801ae84:	2300      	movs	r3, #0
 801ae86:	e000      	b.n	801ae8a <WritePageID+0x62>
	}
	else{
		return DGUS_OK;
 801ae88:	2300      	movs	r3, #0
	}

}
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	3708      	adds	r7, #8
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	bd80      	pop	{r7, pc}
 801ae92:	bf00      	nop
 801ae94:	20004d64 	.word	0x20004d64
 801ae98:	20004da4 	.word	0x20004da4
 801ae9c:	20000074 	.word	0x20000074
 801aea0:	20004f6c 	.word	0x20004f6c
 801aea4:	20004964 	.word	0x20004964

0801aea8 <ReadPageID>:



DGUS_ERROR ReadPageID(void){
 801aea8:	b580      	push	{r7, lr}
 801aeaa:	b084      	sub	sp, #16
 801aeac:	af02      	add	r7, sp, #8
	uint8_t offset = 0xFF;
 801aeae:	23ff      	movs	r3, #255	; 0xff
 801aeb0:	71fb      	strb	r3, [r7, #7]
	uint16_t RxLen;
	memset(&uartDgusTxBuffer[0],0,sizeof(uartDgusTxBuffer));
 801aeb2:	2240      	movs	r2, #64	; 0x40
 801aeb4:	2100      	movs	r1, #0
 801aeb6:	4826      	ldr	r0, [pc, #152]	; (801af50 <ReadPageID+0xa8>)
 801aeb8:	f009 f95e 	bl	8024178 <memset>
	memset(&uartDgusRxBuffer[0],0,sizeof(uartDgusRxBuffer));
 801aebc:	2240      	movs	r2, #64	; 0x40
 801aebe:	2100      	movs	r1, #0
 801aec0:	4824      	ldr	r0, [pc, #144]	; (801af54 <ReadPageID+0xac>)
 801aec2:	f009 f959 	bl	8024178 <memset>

	memcpy(&uartDgusTxBuffer[0], &uartCommandList[2][0],DGUS_TRANSFER_BUFFER_SIZE);
 801aec6:	2240      	movs	r2, #64	; 0x40
 801aec8:	4923      	ldr	r1, [pc, #140]	; (801af58 <ReadPageID+0xb0>)
 801aeca:	4821      	ldr	r0, [pc, #132]	; (801af50 <ReadPageID+0xa8>)
 801aecc:	f009 f946 	bl	802415c <memcpy>

	if(HAL_OK != HAL_UART_Transmit(&huart3, &uartDgusTxBuffer[0], 7, 10)){
 801aed0:	230a      	movs	r3, #10
 801aed2:	2207      	movs	r2, #7
 801aed4:	491e      	ldr	r1, [pc, #120]	; (801af50 <ReadPageID+0xa8>)
 801aed6:	4821      	ldr	r0, [pc, #132]	; (801af5c <ReadPageID+0xb4>)
 801aed8:	f7fc ff85 	bl	8017de6 <HAL_UART_Transmit>
 801aedc:	4603      	mov	r3, r0
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d001      	beq.n	801aee6 <ReadPageID+0x3e>
		return DGUS_ERR;
 801aee2:	2302      	movs	r3, #2
 801aee4:	e02f      	b.n	801af46 <ReadPageID+0x9e>
	}
	else{
		//HAL_UART_Receive
		if(HAL_OK != HAL_UARTEx_ReceiveToIdle(&huart3, &uartDgusRxBuffer[0], 9+2,&RxLen, 10)){
 801aee6:	1d3b      	adds	r3, r7, #4
 801aee8:	220a      	movs	r2, #10
 801aeea:	9200      	str	r2, [sp, #0]
 801aeec:	220b      	movs	r2, #11
 801aeee:	4919      	ldr	r1, [pc, #100]	; (801af54 <ReadPageID+0xac>)
 801aef0:	481a      	ldr	r0, [pc, #104]	; (801af5c <ReadPageID+0xb4>)
 801aef2:	f7fd f8ac 	bl	801804e <HAL_UARTEx_ReceiveToIdle>
 801aef6:	4603      	mov	r3, r0
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d001      	beq.n	801af00 <ReadPageID+0x58>
			return DGUS_ERR;
 801aefc:	2302      	movs	r3, #2
 801aefe:	e022      	b.n	801af46 <ReadPageID+0x9e>
		}
		else{
			if(RxLen == 9)offset = 0;
 801af00:	88bb      	ldrh	r3, [r7, #4]
 801af02:	2b09      	cmp	r3, #9
 801af04:	d101      	bne.n	801af0a <ReadPageID+0x62>
 801af06:	2300      	movs	r3, #0
 801af08:	71fb      	strb	r3, [r7, #7]
			if(RxLen == 10)offset = 1;
 801af0a:	88bb      	ldrh	r3, [r7, #4]
 801af0c:	2b0a      	cmp	r3, #10
 801af0e:	d101      	bne.n	801af14 <ReadPageID+0x6c>
 801af10:	2301      	movs	r3, #1
 801af12:	71fb      	strb	r3, [r7, #7]
			if(RxLen == 11)offset = 2;
 801af14:	88bb      	ldrh	r3, [r7, #4]
 801af16:	2b0b      	cmp	r3, #11
 801af18:	d101      	bne.n	801af1e <ReadPageID+0x76>
 801af1a:	2302      	movs	r3, #2
 801af1c:	71fb      	strb	r3, [r7, #7]
//			for(uint8_t i =0;i<=2;i++){if(uartDgusRxBuffer[i] == 0x5A && uartDgusRxBuffer[i+1] == 0xA5) offset = i;}
			if(offset != 0xFF){
 801af1e:	79fb      	ldrb	r3, [r7, #7]
 801af20:	2bff      	cmp	r3, #255	; 0xff
 801af22:	d00f      	beq.n	801af44 <ReadPageID+0x9c>
				Display.DGUSParam.PageId = (uint16_t)((uartDgusRxBuffer[offset+7]<<8)| uartDgusRxBuffer[offset+8]);
 801af24:	79fb      	ldrb	r3, [r7, #7]
 801af26:	3307      	adds	r3, #7
 801af28:	4a0a      	ldr	r2, [pc, #40]	; (801af54 <ReadPageID+0xac>)
 801af2a:	5cd3      	ldrb	r3, [r2, r3]
 801af2c:	021b      	lsls	r3, r3, #8
 801af2e:	b21a      	sxth	r2, r3
 801af30:	79fb      	ldrb	r3, [r7, #7]
 801af32:	3308      	adds	r3, #8
 801af34:	4907      	ldr	r1, [pc, #28]	; (801af54 <ReadPageID+0xac>)
 801af36:	5ccb      	ldrb	r3, [r1, r3]
 801af38:	b21b      	sxth	r3, r3
 801af3a:	4313      	orrs	r3, r2
 801af3c:	b21b      	sxth	r3, r3
 801af3e:	b29a      	uxth	r2, r3
 801af40:	4b07      	ldr	r3, [pc, #28]	; (801af60 <ReadPageID+0xb8>)
 801af42:	805a      	strh	r2, [r3, #2]
			}
			return DGUS_OK;
 801af44:	2300      	movs	r3, #0
		}
	}
}
 801af46:	4618      	mov	r0, r3
 801af48:	3708      	adds	r7, #8
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bd80      	pop	{r7, pc}
 801af4e:	bf00      	nop
 801af50:	20004d64 	.word	0x20004d64
 801af54:	20004da4 	.word	0x20004da4
 801af58:	200000f4 	.word	0x200000f4
 801af5c:	20004964 	.word	0x20004964
 801af60:	20004f6c 	.word	0x20004f6c

0801af64 <DGUS_UpdateWriteVariables>:

DGUS_ERROR DGUS_UpdateWriteVariables(void){
 801af64:	b580      	push	{r7, lr}
 801af66:	b082      	sub	sp, #8
 801af68:	af00      	add	r7, sp, #0
	uint16_t tempu16 = 0;
 801af6a:	2300      	movs	r3, #0
 801af6c:	80fb      	strh	r3, [r7, #6]

	memset(&uartDgusTxBuffer[0],0,sizeof(uartDgusTxBuffer));
 801af6e:	2240      	movs	r2, #64	; 0x40
 801af70:	2100      	movs	r1, #0
 801af72:	4854      	ldr	r0, [pc, #336]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801af74:	f009 f900 	bl	8024178 <memset>
	memset(&uartDgusRxBuffer[0],0,sizeof(uartDgusRxBuffer));
 801af78:	2240      	movs	r2, #64	; 0x40
 801af7a:	2100      	movs	r1, #0
 801af7c:	4852      	ldr	r0, [pc, #328]	; (801b0c8 <DGUS_UpdateWriteVariables+0x164>)
 801af7e:	f009 f8fb 	bl	8024178 <memset>
	memcpy(&uartDgusTxBuffer[0], &uartCommandList[4][0],DGUS_TRANSFER_BUFFER_SIZE);
 801af82:	2240      	movs	r2, #64	; 0x40
 801af84:	4951      	ldr	r1, [pc, #324]	; (801b0cc <DGUS_UpdateWriteVariables+0x168>)
 801af86:	484f      	ldr	r0, [pc, #316]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801af88:	f009 f8e8 	bl	802415c <memcpy>

	/*1-5 0x1000 to 0x1004*/
	uartDgusTxBuffer[6] = 0x00;
 801af8c:	4b4d      	ldr	r3, [pc, #308]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801af8e:	2200      	movs	r2, #0
 801af90:	719a      	strb	r2, [r3, #6]
	uartDgusTxBuffer[7] = Appl_EEPParam.stm32.EEP_CustomerNumber;
 801af92:	4b4f      	ldr	r3, [pc, #316]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801af94:	7bda      	ldrb	r2, [r3, #15]
 801af96:	4b4b      	ldr	r3, [pc, #300]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801af98:	71da      	strb	r2, [r3, #7]

	uartDgusTxBuffer[8] = 0x00;
 801af9a:	4b4a      	ldr	r3, [pc, #296]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801af9c:	2200      	movs	r2, #0
 801af9e:	721a      	strb	r2, [r3, #8]
	uartDgusTxBuffer[9] = Appl_EEPParam.stm32.EEP_ModeSelected;
 801afa0:	4b4b      	ldr	r3, [pc, #300]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801afa2:	7c1a      	ldrb	r2, [r3, #16]
 801afa4:	4b47      	ldr	r3, [pc, #284]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801afa6:	725a      	strb	r2, [r3, #9]

	tempu16 = (uint16_t) Appl_EEPParam.stm32.EEP_CC_CutOffVoltage;
 801afa8:	4b49      	ldr	r3, [pc, #292]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801afaa:	79db      	ldrb	r3, [r3, #7]
 801afac:	80fb      	strh	r3, [r7, #6]
	uartDgusTxBuffer[10] = tempu16>>8;
 801afae:	88fb      	ldrh	r3, [r7, #6]
 801afb0:	0a1b      	lsrs	r3, r3, #8
 801afb2:	b29b      	uxth	r3, r3
 801afb4:	b2da      	uxtb	r2, r3
 801afb6:	4b43      	ldr	r3, [pc, #268]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801afb8:	729a      	strb	r2, [r3, #10]
	uartDgusTxBuffer[11] = tempu16;
 801afba:	88fb      	ldrh	r3, [r7, #6]
 801afbc:	b2da      	uxtb	r2, r3
 801afbe:	4b41      	ldr	r3, [pc, #260]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801afc0:	72da      	strb	r2, [r3, #11]

	uartDgusTxBuffer[12] = 0x00;
 801afc2:	4b40      	ldr	r3, [pc, #256]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801afc4:	2200      	movs	r2, #0
 801afc6:	731a      	strb	r2, [r3, #12]
	uartDgusTxBuffer[13] = (uint8_t)Appl_EEPParam.stm32.EEP_CC_SetCurrent;
 801afc8:	4b41      	ldr	r3, [pc, #260]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801afca:	791a      	ldrb	r2, [r3, #4]
 801afcc:	4b3d      	ldr	r3, [pc, #244]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801afce:	735a      	strb	r2, [r3, #13]

	uartDgusTxBuffer[14] = 0x00;
 801afd0:	4b3c      	ldr	r3, [pc, #240]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801afd2:	2200      	movs	r2, #0
 801afd4:	739a      	strb	r2, [r3, #14]
	uartDgusTxBuffer[15] = Appl_EEPParam.stm32.EEP_TimerSetHours;
 801afd6:	4b3e      	ldr	r3, [pc, #248]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801afd8:	7b9a      	ldrb	r2, [r3, #14]
 801afda:	4b3a      	ldr	r3, [pc, #232]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801afdc:	73da      	strb	r2, [r3, #15]

	/*6-10 0x1005 to 0x1009*/
	uartDgusTxBuffer[16] = 0x00;
 801afde:	4b39      	ldr	r3, [pc, #228]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801afe0:	2200      	movs	r2, #0
 801afe2:	741a      	strb	r2, [r3, #16]
	uartDgusTxBuffer[17] = (uint8_t)Appl_Display.PowerOnCounter;
 801afe4:	4b3b      	ldr	r3, [pc, #236]	; (801b0d4 <DGUS_UpdateWriteVariables+0x170>)
 801afe6:	7ada      	ldrb	r2, [r3, #11]
 801afe8:	4b36      	ldr	r3, [pc, #216]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801afea:	745a      	strb	r2, [r3, #17]

	uartDgusTxBuffer[18] = (0x00);
 801afec:	4b35      	ldr	r3, [pc, #212]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801afee:	2200      	movs	r2, #0
 801aff0:	749a      	strb	r2, [r3, #18]
	uartDgusTxBuffer[19] = (uint8_t)Appl_Display.PowerOffCounter;;
 801aff2:	4b38      	ldr	r3, [pc, #224]	; (801b0d4 <DGUS_UpdateWriteVariables+0x170>)
 801aff4:	7b1a      	ldrb	r2, [r3, #12]
 801aff6:	4b33      	ldr	r3, [pc, #204]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801aff8:	74da      	strb	r2, [r3, #19]

	uartDgusTxBuffer[20] = 0x00;
 801affa:	4b32      	ldr	r3, [pc, #200]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801affc:	2200      	movs	r2, #0
 801affe:	751a      	strb	r2, [r3, #20]
	uartDgusTxBuffer[21] =  Appl_EEPParam.stm32.EEP_Run_Hour;
 801b000:	4b33      	ldr	r3, [pc, #204]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801b002:	7b5a      	ldrb	r2, [r3, #13]
 801b004:	4b2f      	ldr	r3, [pc, #188]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b006:	755a      	strb	r2, [r3, #21]

	uartDgusTxBuffer[22] = 0x00;
 801b008:	4b2e      	ldr	r3, [pc, #184]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b00a:	2200      	movs	r2, #0
 801b00c:	759a      	strb	r2, [r3, #22]
	uartDgusTxBuffer[23] =  Appl_EEPParam.stm32.EEP_Run_Min;
 801b00e:	4b30      	ldr	r3, [pc, #192]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801b010:	7b1a      	ldrb	r2, [r3, #12]
 801b012:	4b2c      	ldr	r3, [pc, #176]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b014:	75da      	strb	r2, [r3, #23]

	uartDgusTxBuffer[24] = 0x00;
 801b016:	4b2b      	ldr	r3, [pc, #172]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b018:	2200      	movs	r2, #0
 801b01a:	761a      	strb	r2, [r3, #24]
	uartDgusTxBuffer[25] =  Appl_EEPParam.stm32.EEP_Run_Sec;
 801b01c:	4b2c      	ldr	r3, [pc, #176]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801b01e:	7ada      	ldrb	r2, [r3, #11]
 801b020:	4b28      	ldr	r3, [pc, #160]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b022:	765a      	strb	r2, [r3, #25]

	/*11-16 0x100A to 0x100F*/
	uartDgusTxBuffer[26] = Appl_EEPParam.stm32.EEP_Usg_HourH;
 801b024:	4b2a      	ldr	r3, [pc, #168]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801b026:	78da      	ldrb	r2, [r3, #3]
 801b028:	4b26      	ldr	r3, [pc, #152]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b02a:	769a      	strb	r2, [r3, #26]
	uartDgusTxBuffer[27] = Appl_EEPParam.stm32.EEP_Usg_HourL;
 801b02c:	4b28      	ldr	r3, [pc, #160]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801b02e:	789a      	ldrb	r2, [r3, #2]
 801b030:	4b24      	ldr	r3, [pc, #144]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b032:	76da      	strb	r2, [r3, #27]

	uartDgusTxBuffer[28] = (0x00);
 801b034:	4b23      	ldr	r3, [pc, #140]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b036:	2200      	movs	r2, #0
 801b038:	771a      	strb	r2, [r3, #28]
	uartDgusTxBuffer[29] = (uint8_t)Appl_EEPParam.stm32.EEP_Usg_Min;
 801b03a:	4b25      	ldr	r3, [pc, #148]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801b03c:	785a      	ldrb	r2, [r3, #1]
 801b03e:	4b21      	ldr	r3, [pc, #132]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b040:	775a      	strb	r2, [r3, #29]

	uartDgusTxBuffer[30] = 0x00;
 801b042:	4b20      	ldr	r3, [pc, #128]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b044:	2200      	movs	r2, #0
 801b046:	779a      	strb	r2, [r3, #30]
	uartDgusTxBuffer[31] =  Appl_EEPParam.stm32.EEP_Usg_Sec;
 801b048:	4b21      	ldr	r3, [pc, #132]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801b04a:	781a      	ldrb	r2, [r3, #0]
 801b04c:	4b1d      	ldr	r3, [pc, #116]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b04e:	77da      	strb	r2, [r3, #31]

	uartDgusTxBuffer[32] = 0x00;
 801b050:	4b1c      	ldr	r3, [pc, #112]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b052:	2200      	movs	r2, #0
 801b054:	f883 2020 	strb.w	r2, [r3, #32]
	uartDgusTxBuffer[33] = Appl_EEPParam.stm32.EEP_CV_SetVoltage;
 801b058:	4b1d      	ldr	r3, [pc, #116]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801b05a:	795a      	ldrb	r2, [r3, #5]
 801b05c:	4b19      	ldr	r3, [pc, #100]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b05e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	uartDgusTxBuffer[34] = 0x00;
 801b062:	4b18      	ldr	r3, [pc, #96]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b064:	2200      	movs	r2, #0
 801b066:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	uartDgusTxBuffer[35] = Appl_EEPParam.stm32.EEP_CV_CutOffCurrent;
 801b06a:	4b19      	ldr	r3, [pc, #100]	; (801b0d0 <DGUS_UpdateWriteVariables+0x16c>)
 801b06c:	799a      	ldrb	r2, [r3, #6]
 801b06e:	4b15      	ldr	r3, [pc, #84]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b070:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	uartDgusTxBuffer[36] = (uint8_t)SM_ApplParam.ExtEepTotalRecordsTotransferred >> 8;
 801b074:	4b18      	ldr	r3, [pc, #96]	; (801b0d8 <DGUS_UpdateWriteVariables+0x174>)
 801b076:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b07a:	b2db      	uxtb	r3, r3
 801b07c:	121b      	asrs	r3, r3, #8
 801b07e:	b2da      	uxtb	r2, r3
 801b080:	4b10      	ldr	r3, [pc, #64]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartDgusTxBuffer[37] = (uint8_t)SM_ApplParam.ExtEepTotalRecordsTotransferred;;
 801b086:	4b14      	ldr	r3, [pc, #80]	; (801b0d8 <DGUS_UpdateWriteVariables+0x174>)
 801b088:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b08c:	b2da      	uxtb	r2, r3
 801b08e:	4b0d      	ldr	r3, [pc, #52]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b090:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	uartDgusTxBuffer[2] = 2*16+3;
 801b094:	4b0b      	ldr	r3, [pc, #44]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b096:	2223      	movs	r2, #35	; 0x23
 801b098:	709a      	strb	r2, [r3, #2]

	if(HAL_OK != HAL_UART_Transmit(&huart3, &uartDgusTxBuffer[0], (3+uartDgusTxBuffer[2]), 10)){
 801b09a:	4b0a      	ldr	r3, [pc, #40]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b09c:	789b      	ldrb	r3, [r3, #2]
 801b09e:	b29b      	uxth	r3, r3
 801b0a0:	3303      	adds	r3, #3
 801b0a2:	b29a      	uxth	r2, r3
 801b0a4:	230a      	movs	r3, #10
 801b0a6:	4907      	ldr	r1, [pc, #28]	; (801b0c4 <DGUS_UpdateWriteVariables+0x160>)
 801b0a8:	480c      	ldr	r0, [pc, #48]	; (801b0dc <DGUS_UpdateWriteVariables+0x178>)
 801b0aa:	f7fc fe9c 	bl	8017de6 <HAL_UART_Transmit>
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d001      	beq.n	801b0b8 <DGUS_UpdateWriteVariables+0x154>
		return DGUS_ERR;
 801b0b4:	2302      	movs	r3, #2
 801b0b6:	e000      	b.n	801b0ba <DGUS_UpdateWriteVariables+0x156>
	}
	else{
		return DGUS_OK;
 801b0b8:	2300      	movs	r3, #0
	}
}
 801b0ba:	4618      	mov	r0, r3
 801b0bc:	3708      	adds	r7, #8
 801b0be:	46bd      	mov	sp, r7
 801b0c0:	bd80      	pop	{r7, pc}
 801b0c2:	bf00      	nop
 801b0c4:	20004d64 	.word	0x20004d64
 801b0c8:	20004da4 	.word	0x20004da4
 801b0cc:	20000174 	.word	0x20000174
 801b0d0:	20000278 	.word	0x20000278
 801b0d4:	20004f08 	.word	0x20004f08
 801b0d8:	20005034 	.word	0x20005034
 801b0dc:	20004964 	.word	0x20004964

0801b0e0 <DGUS_UpdateWritefloatVariables>:

DGUS_ERROR DGUS_UpdateWritefloatVariables(void){
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b082      	sub	sp, #8
 801b0e4:	af00      	add	r7, sp, #0
	float batteryChargePercent = 0;
 801b0e6:	f04f 0300 	mov.w	r3, #0
 801b0ea:	607b      	str	r3, [r7, #4]
	unionfloatData unionfloattemp;
	memset(&uartDgusTxBuffer[0],0,sizeof(uartDgusTxBuffer));
 801b0ec:	2240      	movs	r2, #64	; 0x40
 801b0ee:	2100      	movs	r1, #0
 801b0f0:	482f      	ldr	r0, [pc, #188]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b0f2:	f009 f841 	bl	8024178 <memset>
	memset(&uartDgusRxBuffer[0],0,sizeof(uartDgusRxBuffer));
 801b0f6:	2240      	movs	r2, #64	; 0x40
 801b0f8:	2100      	movs	r1, #0
 801b0fa:	482e      	ldr	r0, [pc, #184]	; (801b1b4 <DGUS_UpdateWritefloatVariables+0xd4>)
 801b0fc:	f009 f83c 	bl	8024178 <memset>
	memcpy(&uartDgusTxBuffer[0], &uartCommandList[6][0],DGUS_TRANSFER_BUFFER_SIZE);
 801b100:	2240      	movs	r2, #64	; 0x40
 801b102:	492d      	ldr	r1, [pc, #180]	; (801b1b8 <DGUS_UpdateWritefloatVariables+0xd8>)
 801b104:	482a      	ldr	r0, [pc, #168]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b106:	f009 f829 	bl	802415c <memcpy>

	/*1050-1051*/
	unionfloattemp.f = Appl_Display.flt_dv;
 801b10a:	4b2c      	ldr	r3, [pc, #176]	; (801b1bc <DGUS_UpdateWritefloatVariables+0xdc>)
 801b10c:	685b      	ldr	r3, [r3, #4]
 801b10e:	603b      	str	r3, [r7, #0]
	uartDgusTxBuffer[6] = unionfloattemp.c[3];
 801b110:	78fa      	ldrb	r2, [r7, #3]
 801b112:	4b27      	ldr	r3, [pc, #156]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b114:	719a      	strb	r2, [r3, #6]
	uartDgusTxBuffer[7] = unionfloattemp.c[2];
 801b116:	78ba      	ldrb	r2, [r7, #2]
 801b118:	4b25      	ldr	r3, [pc, #148]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b11a:	71da      	strb	r2, [r3, #7]
	uartDgusTxBuffer[8] = unionfloattemp.c[1];
 801b11c:	787a      	ldrb	r2, [r7, #1]
 801b11e:	4b24      	ldr	r3, [pc, #144]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b120:	721a      	strb	r2, [r3, #8]
	uartDgusTxBuffer[9] = unionfloattemp.c[0];
 801b122:	783a      	ldrb	r2, [r7, #0]
 801b124:	4b22      	ldr	r3, [pc, #136]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b126:	725a      	strb	r2, [r3, #9]

	/*1052-1053*/
	unionfloattemp.f = Appl_Display.flt_di;
 801b128:	4b24      	ldr	r3, [pc, #144]	; (801b1bc <DGUS_UpdateWritefloatVariables+0xdc>)
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	603b      	str	r3, [r7, #0]
	uartDgusTxBuffer[10] = unionfloattemp.c[3];
 801b12e:	78fa      	ldrb	r2, [r7, #3]
 801b130:	4b1f      	ldr	r3, [pc, #124]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b132:	729a      	strb	r2, [r3, #10]
	uartDgusTxBuffer[11] = unionfloattemp.c[2];
 801b134:	78ba      	ldrb	r2, [r7, #2]
 801b136:	4b1e      	ldr	r3, [pc, #120]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b138:	72da      	strb	r2, [r3, #11]
	uartDgusTxBuffer[12] = unionfloattemp.c[1];
 801b13a:	787a      	ldrb	r2, [r7, #1]
 801b13c:	4b1c      	ldr	r3, [pc, #112]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b13e:	731a      	strb	r2, [r3, #12]
	uartDgusTxBuffer[13] = unionfloattemp.c[0];
 801b140:	783a      	ldrb	r2, [r7, #0]
 801b142:	4b1b      	ldr	r3, [pc, #108]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b144:	735a      	strb	r2, [r3, #13]

	/*1054-1055*/

	unionfloattemp.f = SM_ApplParam.ap_fltDataPercent;
 801b146:	4b1e      	ldr	r3, [pc, #120]	; (801b1c0 <DGUS_UpdateWritefloatVariables+0xe0>)
 801b148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b14a:	603b      	str	r3, [r7, #0]
	uartDgusTxBuffer[14] = unionfloattemp.c[3];
 801b14c:	78fa      	ldrb	r2, [r7, #3]
 801b14e:	4b18      	ldr	r3, [pc, #96]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b150:	739a      	strb	r2, [r3, #14]
	uartDgusTxBuffer[15] = unionfloattemp.c[2];
 801b152:	78ba      	ldrb	r2, [r7, #2]
 801b154:	4b16      	ldr	r3, [pc, #88]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b156:	73da      	strb	r2, [r3, #15]
	uartDgusTxBuffer[16] = unionfloattemp.c[1];
 801b158:	787a      	ldrb	r2, [r7, #1]
 801b15a:	4b15      	ldr	r3, [pc, #84]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b15c:	741a      	strb	r2, [r3, #16]
	uartDgusTxBuffer[17] = unionfloattemp.c[0];
 801b15e:	783a      	ldrb	r2, [r7, #0]
 801b160:	4b13      	ldr	r3, [pc, #76]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b162:	745a      	strb	r2, [r3, #17]

	/*1056-1057*/

	unionfloattemp.f = SM_ApplParam.PreparePercentage;
 801b164:	4b16      	ldr	r3, [pc, #88]	; (801b1c0 <DGUS_UpdateWritefloatVariables+0xe0>)
 801b166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b168:	603b      	str	r3, [r7, #0]
	uartDgusTxBuffer[18] = unionfloattemp.c[3];
 801b16a:	78fa      	ldrb	r2, [r7, #3]
 801b16c:	4b10      	ldr	r3, [pc, #64]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b16e:	749a      	strb	r2, [r3, #18]
	uartDgusTxBuffer[19] = unionfloattemp.c[2];
 801b170:	78ba      	ldrb	r2, [r7, #2]
 801b172:	4b0f      	ldr	r3, [pc, #60]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b174:	74da      	strb	r2, [r3, #19]
	uartDgusTxBuffer[20] = unionfloattemp.c[1];
 801b176:	787a      	ldrb	r2, [r7, #1]
 801b178:	4b0d      	ldr	r3, [pc, #52]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b17a:	751a      	strb	r2, [r3, #20]
	uartDgusTxBuffer[21] = unionfloattemp.c[0];
 801b17c:	783a      	ldrb	r2, [r7, #0]
 801b17e:	4b0c      	ldr	r3, [pc, #48]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b180:	755a      	strb	r2, [r3, #21]

	uartDgusTxBuffer[2] = 4*4+3;
 801b182:	4b0b      	ldr	r3, [pc, #44]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b184:	2213      	movs	r2, #19
 801b186:	709a      	strb	r2, [r3, #2]
	if(HAL_OK != HAL_UART_Transmit(&huart3, &uartDgusTxBuffer[0], (3+uartDgusTxBuffer[2]), 10)){
 801b188:	4b09      	ldr	r3, [pc, #36]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b18a:	789b      	ldrb	r3, [r3, #2]
 801b18c:	b29b      	uxth	r3, r3
 801b18e:	3303      	adds	r3, #3
 801b190:	b29a      	uxth	r2, r3
 801b192:	230a      	movs	r3, #10
 801b194:	4906      	ldr	r1, [pc, #24]	; (801b1b0 <DGUS_UpdateWritefloatVariables+0xd0>)
 801b196:	480b      	ldr	r0, [pc, #44]	; (801b1c4 <DGUS_UpdateWritefloatVariables+0xe4>)
 801b198:	f7fc fe25 	bl	8017de6 <HAL_UART_Transmit>
 801b19c:	4603      	mov	r3, r0
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d001      	beq.n	801b1a6 <DGUS_UpdateWritefloatVariables+0xc6>
		return DGUS_ERR;
 801b1a2:	2302      	movs	r3, #2
 801b1a4:	e000      	b.n	801b1a8 <DGUS_UpdateWritefloatVariables+0xc8>
	}
	else{
		return DGUS_OK;
 801b1a6:	2300      	movs	r3, #0
	}

}
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	3708      	adds	r7, #8
 801b1ac:	46bd      	mov	sp, r7
 801b1ae:	bd80      	pop	{r7, pc}
 801b1b0:	20004d64 	.word	0x20004d64
 801b1b4:	20004da4 	.word	0x20004da4
 801b1b8:	200001f4 	.word	0x200001f4
 801b1bc:	20004f08 	.word	0x20004f08
 801b1c0:	20005034 	.word	0x20005034
 801b1c4:	20004964 	.word	0x20004964

0801b1c8 <DGUS_updatePauseReason>:
DGUS_ERROR DGUS_updatePauseReason(void){
 801b1c8:	b5b0      	push	{r4, r5, r7, lr}
 801b1ca:	b082      	sub	sp, #8
 801b1cc:	af00      	add	r7, sp, #0
	uint8_t stringlength = 0;
 801b1ce:	2300      	movs	r3, #0
 801b1d0:	71fb      	strb	r3, [r7, #7]
	uint8_t stringlength2 = 0;
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	71bb      	strb	r3, [r7, #6]

	memset(&uartDgusTxBuffer[0],0,sizeof(uartDgusTxBuffer));
 801b1d6:	2240      	movs	r2, #64	; 0x40
 801b1d8:	2100      	movs	r1, #0
 801b1da:	48ae      	ldr	r0, [pc, #696]	; (801b494 <DGUS_updatePauseReason+0x2cc>)
 801b1dc:	f008 ffcc 	bl	8024178 <memset>
	memset(&uartDgusRxBuffer[0],0,sizeof(uartDgusRxBuffer));
 801b1e0:	2240      	movs	r2, #64	; 0x40
 801b1e2:	2100      	movs	r1, #0
 801b1e4:	48ac      	ldr	r0, [pc, #688]	; (801b498 <DGUS_updatePauseReason+0x2d0>)
 801b1e6:	f008 ffc7 	bl	8024178 <memset>
	memcpy(&uartDgusTxBuffer[0], &uartCommandList[5][0],DGUS_TRANSFER_BUFFER_SIZE);
 801b1ea:	2240      	movs	r2, #64	; 0x40
 801b1ec:	49ab      	ldr	r1, [pc, #684]	; (801b49c <DGUS_updatePauseReason+0x2d4>)
 801b1ee:	48a9      	ldr	r0, [pc, #676]	; (801b494 <DGUS_updatePauseReason+0x2cc>)
 801b1f0:	f008 ffb4 	bl	802415c <memcpy>
	memcpy(&uartDgusTxBuffer2[0], &uartCommandList[5][0],DGUS_TRANSFER_BUFFER_SIZE);
 801b1f4:	2240      	movs	r2, #64	; 0x40
 801b1f6:	49a9      	ldr	r1, [pc, #676]	; (801b49c <DGUS_updatePauseReason+0x2d4>)
 801b1f8:	48a9      	ldr	r0, [pc, #676]	; (801b4a0 <DGUS_updatePauseReason+0x2d8>)
 801b1fa:	f008 ffaf 	bl	802415c <memcpy>

	uartDgusTxBuffer[4] = 0x11;
 801b1fe:	4ba5      	ldr	r3, [pc, #660]	; (801b494 <DGUS_updatePauseReason+0x2cc>)
 801b200:	2211      	movs	r2, #17
 801b202:	711a      	strb	r2, [r3, #4]
	uartDgusTxBuffer[5] = 0xA0;
 801b204:	4ba3      	ldr	r3, [pc, #652]	; (801b494 <DGUS_updatePauseReason+0x2cc>)
 801b206:	22a0      	movs	r2, #160	; 0xa0
 801b208:	715a      	strb	r2, [r3, #5]

	uartDgusTxBuffer2[4] = 0x12;
 801b20a:	4ba5      	ldr	r3, [pc, #660]	; (801b4a0 <DGUS_updatePauseReason+0x2d8>)
 801b20c:	2212      	movs	r2, #18
 801b20e:	711a      	strb	r2, [r3, #4]
	uartDgusTxBuffer2[5] = 0x40;
 801b210:	4ba3      	ldr	r3, [pc, #652]	; (801b4a0 <DGUS_updatePauseReason+0x2d8>)
 801b212:	2240      	movs	r2, #64	; 0x40
 801b214:	715a      	strb	r2, [r3, #5]

			if(SM_ApplParam.Pausereason == PauseReasonEnum_TimerComplete){
 801b216:	4ba3      	ldr	r3, [pc, #652]	; (801b4a4 <DGUS_updatePauseReason+0x2dc>)
 801b218:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b21c:	2b03      	cmp	r3, #3
 801b21e:	d114      	bne.n	801b24a <DGUS_updatePauseReason+0x82>
				strcpy((char*)&uartDgusTxBuffer[6],"TIMER COMPLETED");
 801b220:	4aa1      	ldr	r2, [pc, #644]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b222:	4ba2      	ldr	r3, [pc, #648]	; (801b4ac <DGUS_updatePauseReason+0x2e4>)
 801b224:	4614      	mov	r4, r2
 801b226:	461d      	mov	r5, r3
 801b228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b22a:	6020      	str	r0, [r4, #0]
 801b22c:	6061      	str	r1, [r4, #4]
 801b22e:	60a2      	str	r2, [r4, #8]
 801b230:	60e3      	str	r3, [r4, #12]
				strcpy((char*)&uartDgusTxBuffer2[6],"NO FAULT");
 801b232:	4a9f      	ldr	r2, [pc, #636]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b234:	4b9f      	ldr	r3, [pc, #636]	; (801b4b4 <DGUS_updatePauseReason+0x2ec>)
 801b236:	cb03      	ldmia	r3!, {r0, r1}
 801b238:	6010      	str	r0, [r2, #0]
 801b23a:	6051      	str	r1, [r2, #4]
 801b23c:	781b      	ldrb	r3, [r3, #0]
 801b23e:	7213      	strb	r3, [r2, #8]
				stringlength = 15;
 801b240:	230f      	movs	r3, #15
 801b242:	71fb      	strb	r3, [r7, #7]
				stringlength2 = 8;
 801b244:	2308      	movs	r3, #8
 801b246:	71bb      	strb	r3, [r7, #6]
 801b248:	e21f      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
			}
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_UserPaused){
 801b24a:	4b96      	ldr	r3, [pc, #600]	; (801b4a4 <DGUS_updatePauseReason+0x2dc>)
 801b24c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b250:	2b02      	cmp	r3, #2
 801b252:	d112      	bne.n	801b27a <DGUS_updatePauseReason+0xb2>
				strcpy((char*)&uartDgusTxBuffer[6],"USER PAUSED");
 801b254:	4a94      	ldr	r2, [pc, #592]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b256:	4b98      	ldr	r3, [pc, #608]	; (801b4b8 <DGUS_updatePauseReason+0x2f0>)
 801b258:	4614      	mov	r4, r2
 801b25a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b25c:	6020      	str	r0, [r4, #0]
 801b25e:	6061      	str	r1, [r4, #4]
 801b260:	60a2      	str	r2, [r4, #8]
				strcpy((char*)&uartDgusTxBuffer2[6],"NO FAULT");
 801b262:	4a93      	ldr	r2, [pc, #588]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b264:	4b93      	ldr	r3, [pc, #588]	; (801b4b4 <DGUS_updatePauseReason+0x2ec>)
 801b266:	cb03      	ldmia	r3!, {r0, r1}
 801b268:	6010      	str	r0, [r2, #0]
 801b26a:	6051      	str	r1, [r2, #4]
 801b26c:	781b      	ldrb	r3, [r3, #0]
 801b26e:	7213      	strb	r3, [r2, #8]
				stringlength = 11;
 801b270:	230b      	movs	r3, #11
 801b272:	71fb      	strb	r3, [r7, #7]
				stringlength2 = 8;
 801b274:	2308      	movs	r3, #8
 801b276:	71bb      	strb	r3, [r7, #6]
 801b278:	e207      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
			}
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_BatteryReversal){
 801b27a:	4b8a      	ldr	r3, [pc, #552]	; (801b4a4 <DGUS_updatePauseReason+0x2dc>)
 801b27c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b280:	2b08      	cmp	r3, #8
 801b282:	d133      	bne.n	801b2ec <DGUS_updatePauseReason+0x124>
				if(Appl_diagActiveFault.BatteryReversal == 1) {
 801b284:	4b8d      	ldr	r3, [pc, #564]	; (801b4bc <DGUS_updatePauseReason+0x2f4>)
 801b286:	7a1b      	ldrb	r3, [r3, #8]
 801b288:	2b01      	cmp	r3, #1
 801b28a:	d117      	bne.n	801b2bc <DGUS_updatePauseReason+0xf4>
					strcpy((char*)&uartDgusTxBuffer[6],"CHK BAT CONNCTION");
 801b28c:	4a86      	ldr	r2, [pc, #536]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b28e:	4b8c      	ldr	r3, [pc, #560]	; (801b4c0 <DGUS_updatePauseReason+0x2f8>)
 801b290:	4615      	mov	r5, r2
 801b292:	461c      	mov	r4, r3
 801b294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b296:	6028      	str	r0, [r5, #0]
 801b298:	6069      	str	r1, [r5, #4]
 801b29a:	60aa      	str	r2, [r5, #8]
 801b29c:	60eb      	str	r3, [r5, #12]
 801b29e:	8823      	ldrh	r3, [r4, #0]
 801b2a0:	822b      	strh	r3, [r5, #16]
					strcpy((char*)&uartDgusTxBuffer2[6],"Active");
 801b2a2:	4b83      	ldr	r3, [pc, #524]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b2a4:	4a87      	ldr	r2, [pc, #540]	; (801b4c4 <DGUS_updatePauseReason+0x2fc>)
 801b2a6:	6810      	ldr	r0, [r2, #0]
 801b2a8:	6018      	str	r0, [r3, #0]
 801b2aa:	8891      	ldrh	r1, [r2, #4]
 801b2ac:	7992      	ldrb	r2, [r2, #6]
 801b2ae:	8099      	strh	r1, [r3, #4]
 801b2b0:	719a      	strb	r2, [r3, #6]
					stringlength = 17;
 801b2b2:	2311      	movs	r3, #17
 801b2b4:	71fb      	strb	r3, [r7, #7]
					stringlength2 = 6;
 801b2b6:	2306      	movs	r3, #6
 801b2b8:	71bb      	strb	r3, [r7, #6]
 801b2ba:	e1e6      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
				else {
					strcpy((char*)&uartDgusTxBuffer[6],"CHK BAT CONNCTION");
 801b2bc:	4a7a      	ldr	r2, [pc, #488]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b2be:	4b80      	ldr	r3, [pc, #512]	; (801b4c0 <DGUS_updatePauseReason+0x2f8>)
 801b2c0:	4615      	mov	r5, r2
 801b2c2:	461c      	mov	r4, r3
 801b2c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b2c6:	6028      	str	r0, [r5, #0]
 801b2c8:	6069      	str	r1, [r5, #4]
 801b2ca:	60aa      	str	r2, [r5, #8]
 801b2cc:	60eb      	str	r3, [r5, #12]
 801b2ce:	8823      	ldrh	r3, [r4, #0]
 801b2d0:	822b      	strh	r3, [r5, #16]
					strcpy((char*)&uartDgusTxBuffer2[6],"Healed");
 801b2d2:	4b77      	ldr	r3, [pc, #476]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b2d4:	4a7c      	ldr	r2, [pc, #496]	; (801b4c8 <DGUS_updatePauseReason+0x300>)
 801b2d6:	6810      	ldr	r0, [r2, #0]
 801b2d8:	6018      	str	r0, [r3, #0]
 801b2da:	8891      	ldrh	r1, [r2, #4]
 801b2dc:	7992      	ldrb	r2, [r2, #6]
 801b2de:	8099      	strh	r1, [r3, #4]
 801b2e0:	719a      	strb	r2, [r3, #6]
					stringlength = 17;
 801b2e2:	2311      	movs	r3, #17
 801b2e4:	71fb      	strb	r3, [r7, #7]
					stringlength2 = 6;
 801b2e6:	2306      	movs	r3, #6
 801b2e8:	71bb      	strb	r3, [r7, #6]
 801b2ea:	e1ce      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
			}
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_EEPLogMemoryFull){
 801b2ec:	4b6d      	ldr	r3, [pc, #436]	; (801b4a4 <DGUS_updatePauseReason+0x2dc>)
 801b2ee:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b2f2:	2b09      	cmp	r3, #9
 801b2f4:	d12f      	bne.n	801b356 <DGUS_updatePauseReason+0x18e>
				if(Appl_diagActiveFault.EEPLogMemoryFull == 1) {
 801b2f6:	4b71      	ldr	r3, [pc, #452]	; (801b4bc <DGUS_updatePauseReason+0x2f4>)
 801b2f8:	7a5b      	ldrb	r3, [r3, #9]
 801b2fa:	2b01      	cmp	r3, #1
 801b2fc:	d115      	bne.n	801b32a <DGUS_updatePauseReason+0x162>
					strcpy((char*)&uartDgusTxBuffer[6],"LOG MEMORY FULL");
 801b2fe:	4a6a      	ldr	r2, [pc, #424]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b300:	4b72      	ldr	r3, [pc, #456]	; (801b4cc <DGUS_updatePauseReason+0x304>)
 801b302:	4614      	mov	r4, r2
 801b304:	461d      	mov	r5, r3
 801b306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b308:	6020      	str	r0, [r4, #0]
 801b30a:	6061      	str	r1, [r4, #4]
 801b30c:	60a2      	str	r2, [r4, #8]
 801b30e:	60e3      	str	r3, [r4, #12]
					stringlength = 15;
 801b310:	230f      	movs	r3, #15
 801b312:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Active");
 801b314:	4b66      	ldr	r3, [pc, #408]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b316:	4a6b      	ldr	r2, [pc, #428]	; (801b4c4 <DGUS_updatePauseReason+0x2fc>)
 801b318:	6810      	ldr	r0, [r2, #0]
 801b31a:	6018      	str	r0, [r3, #0]
 801b31c:	8891      	ldrh	r1, [r2, #4]
 801b31e:	7992      	ldrb	r2, [r2, #6]
 801b320:	8099      	strh	r1, [r3, #4]
 801b322:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b324:	2306      	movs	r3, #6
 801b326:	71bb      	strb	r3, [r7, #6]
 801b328:	e1af      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
				else {
					strcpy((char*)&uartDgusTxBuffer[6],"LOG MEMORY FULL");
 801b32a:	4a5f      	ldr	r2, [pc, #380]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b32c:	4b67      	ldr	r3, [pc, #412]	; (801b4cc <DGUS_updatePauseReason+0x304>)
 801b32e:	4614      	mov	r4, r2
 801b330:	461d      	mov	r5, r3
 801b332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b334:	6020      	str	r0, [r4, #0]
 801b336:	6061      	str	r1, [r4, #4]
 801b338:	60a2      	str	r2, [r4, #8]
 801b33a:	60e3      	str	r3, [r4, #12]
					stringlength = 15;
 801b33c:	230f      	movs	r3, #15
 801b33e:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Healed");
 801b340:	4b5b      	ldr	r3, [pc, #364]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b342:	4a61      	ldr	r2, [pc, #388]	; (801b4c8 <DGUS_updatePauseReason+0x300>)
 801b344:	6810      	ldr	r0, [r2, #0]
 801b346:	6018      	str	r0, [r3, #0]
 801b348:	8891      	ldrh	r1, [r2, #4]
 801b34a:	7992      	ldrb	r2, [r2, #6]
 801b34c:	8099      	strh	r1, [r3, #4]
 801b34e:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b350:	2306      	movs	r3, #6
 801b352:	71bb      	strb	r3, [r7, #6]
 801b354:	e199      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>

				}
			}
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_UnderVoltage){
 801b356:	4b53      	ldr	r3, [pc, #332]	; (801b4a4 <DGUS_updatePauseReason+0x2dc>)
 801b358:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b35c:	2b0b      	cmp	r3, #11
 801b35e:	d12b      	bne.n	801b3b8 <DGUS_updatePauseReason+0x1f0>
				if(Appl_diagActiveFault.UnderVoltage == 1) {
 801b360:	4b56      	ldr	r3, [pc, #344]	; (801b4bc <DGUS_updatePauseReason+0x2f4>)
 801b362:	795b      	ldrb	r3, [r3, #5]
 801b364:	2b01      	cmp	r3, #1
 801b366:	d113      	bne.n	801b390 <DGUS_updatePauseReason+0x1c8>
					strcpy((char*)&uartDgusTxBuffer[6],"LOW VOLTAGE");
 801b368:	4a4f      	ldr	r2, [pc, #316]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b36a:	4b59      	ldr	r3, [pc, #356]	; (801b4d0 <DGUS_updatePauseReason+0x308>)
 801b36c:	4614      	mov	r4, r2
 801b36e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b370:	6020      	str	r0, [r4, #0]
 801b372:	6061      	str	r1, [r4, #4]
 801b374:	60a2      	str	r2, [r4, #8]
					stringlength = 11;
 801b376:	230b      	movs	r3, #11
 801b378:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Active");
 801b37a:	4b4d      	ldr	r3, [pc, #308]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b37c:	4a51      	ldr	r2, [pc, #324]	; (801b4c4 <DGUS_updatePauseReason+0x2fc>)
 801b37e:	6810      	ldr	r0, [r2, #0]
 801b380:	6018      	str	r0, [r3, #0]
 801b382:	8891      	ldrh	r1, [r2, #4]
 801b384:	7992      	ldrb	r2, [r2, #6]
 801b386:	8099      	strh	r1, [r3, #4]
 801b388:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b38a:	2306      	movs	r3, #6
 801b38c:	71bb      	strb	r3, [r7, #6]
 801b38e:	e17c      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
				else {
					strcpy((char*)&uartDgusTxBuffer[6],"LOW VOLTAGE");
 801b390:	4a45      	ldr	r2, [pc, #276]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b392:	4b4f      	ldr	r3, [pc, #316]	; (801b4d0 <DGUS_updatePauseReason+0x308>)
 801b394:	4614      	mov	r4, r2
 801b396:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b398:	6020      	str	r0, [r4, #0]
 801b39a:	6061      	str	r1, [r4, #4]
 801b39c:	60a2      	str	r2, [r4, #8]
					stringlength = 11;
 801b39e:	230b      	movs	r3, #11
 801b3a0:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Healed");
 801b3a2:	4b43      	ldr	r3, [pc, #268]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b3a4:	4a48      	ldr	r2, [pc, #288]	; (801b4c8 <DGUS_updatePauseReason+0x300>)
 801b3a6:	6810      	ldr	r0, [r2, #0]
 801b3a8:	6018      	str	r0, [r3, #0]
 801b3aa:	8891      	ldrh	r1, [r2, #4]
 801b3ac:	7992      	ldrb	r2, [r2, #6]
 801b3ae:	8099      	strh	r1, [r3, #4]
 801b3b0:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b3b2:	2306      	movs	r3, #6
 801b3b4:	71bb      	strb	r3, [r7, #6]
 801b3b6:	e168      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>

				}
			}
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_OverCurrent){
 801b3b8:	4b3a      	ldr	r3, [pc, #232]	; (801b4a4 <DGUS_updatePauseReason+0x2dc>)
 801b3ba:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b3be:	2b0f      	cmp	r3, #15
 801b3c0:	d12f      	bne.n	801b422 <DGUS_updatePauseReason+0x25a>
				if(Appl_diagActiveFault.OverCurrent == 1) {
 801b3c2:	4b3e      	ldr	r3, [pc, #248]	; (801b4bc <DGUS_updatePauseReason+0x2f4>)
 801b3c4:	7b1b      	ldrb	r3, [r3, #12]
 801b3c6:	2b01      	cmp	r3, #1
 801b3c8:	d115      	bne.n	801b3f6 <DGUS_updatePauseReason+0x22e>
					strcpy((char*)&uartDgusTxBuffer[6],"OVER CURRENT");
 801b3ca:	4a37      	ldr	r2, [pc, #220]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b3cc:	4b41      	ldr	r3, [pc, #260]	; (801b4d4 <DGUS_updatePauseReason+0x30c>)
 801b3ce:	4614      	mov	r4, r2
 801b3d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3d2:	6020      	str	r0, [r4, #0]
 801b3d4:	6061      	str	r1, [r4, #4]
 801b3d6:	60a2      	str	r2, [r4, #8]
 801b3d8:	781b      	ldrb	r3, [r3, #0]
 801b3da:	7323      	strb	r3, [r4, #12]
					stringlength = 12;
 801b3dc:	230c      	movs	r3, #12
 801b3de:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Active");
 801b3e0:	4b33      	ldr	r3, [pc, #204]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b3e2:	4a38      	ldr	r2, [pc, #224]	; (801b4c4 <DGUS_updatePauseReason+0x2fc>)
 801b3e4:	6810      	ldr	r0, [r2, #0]
 801b3e6:	6018      	str	r0, [r3, #0]
 801b3e8:	8891      	ldrh	r1, [r2, #4]
 801b3ea:	7992      	ldrb	r2, [r2, #6]
 801b3ec:	8099      	strh	r1, [r3, #4]
 801b3ee:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b3f0:	2306      	movs	r3, #6
 801b3f2:	71bb      	strb	r3, [r7, #6]
 801b3f4:	e149      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
				else {
					strcpy((char*)&uartDgusTxBuffer[6],"OVER CURRENT");
 801b3f6:	4a2c      	ldr	r2, [pc, #176]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b3f8:	4b36      	ldr	r3, [pc, #216]	; (801b4d4 <DGUS_updatePauseReason+0x30c>)
 801b3fa:	4614      	mov	r4, r2
 801b3fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3fe:	6020      	str	r0, [r4, #0]
 801b400:	6061      	str	r1, [r4, #4]
 801b402:	60a2      	str	r2, [r4, #8]
 801b404:	781b      	ldrb	r3, [r3, #0]
 801b406:	7323      	strb	r3, [r4, #12]
					stringlength = 12;
 801b408:	230c      	movs	r3, #12
 801b40a:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Healed");
 801b40c:	4b28      	ldr	r3, [pc, #160]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b40e:	4a2e      	ldr	r2, [pc, #184]	; (801b4c8 <DGUS_updatePauseReason+0x300>)
 801b410:	6810      	ldr	r0, [r2, #0]
 801b412:	6018      	str	r0, [r3, #0]
 801b414:	8891      	ldrh	r1, [r2, #4]
 801b416:	7992      	ldrb	r2, [r2, #6]
 801b418:	8099      	strh	r1, [r3, #4]
 801b41a:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b41c:	2306      	movs	r3, #6
 801b41e:	71bb      	strb	r3, [r7, #6]
 801b420:	e133      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
			}
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_FilterCircuitOpen){
 801b422:	4b20      	ldr	r3, [pc, #128]	; (801b4a4 <DGUS_updatePauseReason+0x2dc>)
 801b424:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b428:	2b0d      	cmp	r3, #13
 801b42a:	d157      	bne.n	801b4dc <DGUS_updatePauseReason+0x314>
				if(Appl_diagActiveFault.FiltercktOpen == 1) {
 801b42c:	4b23      	ldr	r3, [pc, #140]	; (801b4bc <DGUS_updatePauseReason+0x2f4>)
 801b42e:	7a9b      	ldrb	r3, [r3, #10]
 801b430:	2b01      	cmp	r3, #1
 801b432:	d117      	bne.n	801b464 <DGUS_updatePauseReason+0x29c>
					strcpy((char*)&uartDgusTxBuffer[6],"ACCUBANK CONECTIN");
 801b434:	4a1c      	ldr	r2, [pc, #112]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b436:	4b28      	ldr	r3, [pc, #160]	; (801b4d8 <DGUS_updatePauseReason+0x310>)
 801b438:	4615      	mov	r5, r2
 801b43a:	461c      	mov	r4, r3
 801b43c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b43e:	6028      	str	r0, [r5, #0]
 801b440:	6069      	str	r1, [r5, #4]
 801b442:	60aa      	str	r2, [r5, #8]
 801b444:	60eb      	str	r3, [r5, #12]
 801b446:	8823      	ldrh	r3, [r4, #0]
 801b448:	822b      	strh	r3, [r5, #16]
					stringlength = 17;
 801b44a:	2311      	movs	r3, #17
 801b44c:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Active");
 801b44e:	4b18      	ldr	r3, [pc, #96]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b450:	4a1c      	ldr	r2, [pc, #112]	; (801b4c4 <DGUS_updatePauseReason+0x2fc>)
 801b452:	6810      	ldr	r0, [r2, #0]
 801b454:	6018      	str	r0, [r3, #0]
 801b456:	8891      	ldrh	r1, [r2, #4]
 801b458:	7992      	ldrb	r2, [r2, #6]
 801b45a:	8099      	strh	r1, [r3, #4]
 801b45c:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b45e:	2306      	movs	r3, #6
 801b460:	71bb      	strb	r3, [r7, #6]
 801b462:	e112      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
				else {
					strcpy((char*)&uartDgusTxBuffer[6],"ACCUBANK CONECTIN");
 801b464:	4a10      	ldr	r2, [pc, #64]	; (801b4a8 <DGUS_updatePauseReason+0x2e0>)
 801b466:	4b1c      	ldr	r3, [pc, #112]	; (801b4d8 <DGUS_updatePauseReason+0x310>)
 801b468:	4615      	mov	r5, r2
 801b46a:	461c      	mov	r4, r3
 801b46c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b46e:	6028      	str	r0, [r5, #0]
 801b470:	6069      	str	r1, [r5, #4]
 801b472:	60aa      	str	r2, [r5, #8]
 801b474:	60eb      	str	r3, [r5, #12]
 801b476:	8823      	ldrh	r3, [r4, #0]
 801b478:	822b      	strh	r3, [r5, #16]
					stringlength = 17;
 801b47a:	2311      	movs	r3, #17
 801b47c:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Healed");
 801b47e:	4b0c      	ldr	r3, [pc, #48]	; (801b4b0 <DGUS_updatePauseReason+0x2e8>)
 801b480:	4a11      	ldr	r2, [pc, #68]	; (801b4c8 <DGUS_updatePauseReason+0x300>)
 801b482:	6810      	ldr	r0, [r2, #0]
 801b484:	6018      	str	r0, [r3, #0]
 801b486:	8891      	ldrh	r1, [r2, #4]
 801b488:	7992      	ldrb	r2, [r2, #6]
 801b48a:	8099      	strh	r1, [r3, #4]
 801b48c:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b48e:	2306      	movs	r3, #6
 801b490:	71bb      	strb	r3, [r7, #6]
 801b492:	e0fa      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
 801b494:	20004d64 	.word	0x20004d64
 801b498:	20004da4 	.word	0x20004da4
 801b49c:	200001b4 	.word	0x200001b4
 801b4a0:	20004d20 	.word	0x20004d20
 801b4a4:	20005034 	.word	0x20005034
 801b4a8:	20004d6a 	.word	0x20004d6a
 801b4ac:	08026f64 	.word	0x08026f64
 801b4b0:	20004d26 	.word	0x20004d26
 801b4b4:	08026f74 	.word	0x08026f74
 801b4b8:	08026f80 	.word	0x08026f80
 801b4bc:	20004d0c 	.word	0x20004d0c
 801b4c0:	08026f8c 	.word	0x08026f8c
 801b4c4:	08026fa0 	.word	0x08026fa0
 801b4c8:	08026fa8 	.word	0x08026fa8
 801b4cc:	08026fb0 	.word	0x08026fb0
 801b4d0:	08026fc0 	.word	0x08026fc0
 801b4d4:	08026fcc 	.word	0x08026fcc
 801b4d8:	08026fdc 	.word	0x08026fdc
				}
			}
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_OverVoltage){
 801b4dc:	4b89      	ldr	r3, [pc, #548]	; (801b704 <DGUS_updatePauseReason+0x53c>)
 801b4de:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b4e2:	2b0e      	cmp	r3, #14
 801b4e4:	d12f      	bne.n	801b546 <DGUS_updatePauseReason+0x37e>
				if(Appl_diagActiveFault.OverVoltage == 1) {
 801b4e6:	4b88      	ldr	r3, [pc, #544]	; (801b708 <DGUS_updatePauseReason+0x540>)
 801b4e8:	7adb      	ldrb	r3, [r3, #11]
 801b4ea:	2b01      	cmp	r3, #1
 801b4ec:	d115      	bne.n	801b51a <DGUS_updatePauseReason+0x352>
					strcpy((char*)&uartDgusTxBuffer[6],"OVER VOLTAGE");
 801b4ee:	4a87      	ldr	r2, [pc, #540]	; (801b70c <DGUS_updatePauseReason+0x544>)
 801b4f0:	4b87      	ldr	r3, [pc, #540]	; (801b710 <DGUS_updatePauseReason+0x548>)
 801b4f2:	4614      	mov	r4, r2
 801b4f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b4f6:	6020      	str	r0, [r4, #0]
 801b4f8:	6061      	str	r1, [r4, #4]
 801b4fa:	60a2      	str	r2, [r4, #8]
 801b4fc:	781b      	ldrb	r3, [r3, #0]
 801b4fe:	7323      	strb	r3, [r4, #12]
					stringlength = 12;
 801b500:	230c      	movs	r3, #12
 801b502:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Active");
 801b504:	4b83      	ldr	r3, [pc, #524]	; (801b714 <DGUS_updatePauseReason+0x54c>)
 801b506:	4a84      	ldr	r2, [pc, #528]	; (801b718 <DGUS_updatePauseReason+0x550>)
 801b508:	6810      	ldr	r0, [r2, #0]
 801b50a:	6018      	str	r0, [r3, #0]
 801b50c:	8891      	ldrh	r1, [r2, #4]
 801b50e:	7992      	ldrb	r2, [r2, #6]
 801b510:	8099      	strh	r1, [r3, #4]
 801b512:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b514:	2306      	movs	r3, #6
 801b516:	71bb      	strb	r3, [r7, #6]
 801b518:	e0b7      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
				else {
					strcpy((char*)&uartDgusTxBuffer[6],"OVER VOLTAGE");
 801b51a:	4a7c      	ldr	r2, [pc, #496]	; (801b70c <DGUS_updatePauseReason+0x544>)
 801b51c:	4b7c      	ldr	r3, [pc, #496]	; (801b710 <DGUS_updatePauseReason+0x548>)
 801b51e:	4614      	mov	r4, r2
 801b520:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b522:	6020      	str	r0, [r4, #0]
 801b524:	6061      	str	r1, [r4, #4]
 801b526:	60a2      	str	r2, [r4, #8]
 801b528:	781b      	ldrb	r3, [r3, #0]
 801b52a:	7323      	strb	r3, [r4, #12]
					stringlength = 12;
 801b52c:	230c      	movs	r3, #12
 801b52e:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Healed");
 801b530:	4b78      	ldr	r3, [pc, #480]	; (801b714 <DGUS_updatePauseReason+0x54c>)
 801b532:	4a7a      	ldr	r2, [pc, #488]	; (801b71c <DGUS_updatePauseReason+0x554>)
 801b534:	6810      	ldr	r0, [r2, #0]
 801b536:	6018      	str	r0, [r3, #0]
 801b538:	8891      	ldrh	r1, [r2, #4]
 801b53a:	7992      	ldrb	r2, [r2, #6]
 801b53c:	8099      	strh	r1, [r3, #4]
 801b53e:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b540:	2306      	movs	r3, #6
 801b542:	71bb      	strb	r3, [r7, #6]
 801b544:	e0a1      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
			}
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_HighTemp){
 801b546:	4b6f      	ldr	r3, [pc, #444]	; (801b704 <DGUS_updatePauseReason+0x53c>)
 801b548:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b54c:	2b06      	cmp	r3, #6
 801b54e:	d133      	bne.n	801b5b8 <DGUS_updatePauseReason+0x3f0>
				if(Appl_diagActiveFault.HighTempperatureSCR == 1) {
 801b550:	4b6d      	ldr	r3, [pc, #436]	; (801b708 <DGUS_updatePauseReason+0x540>)
 801b552:	799b      	ldrb	r3, [r3, #6]
 801b554:	2b01      	cmp	r3, #1
 801b556:	d117      	bne.n	801b588 <DGUS_updatePauseReason+0x3c0>
					strcpy((char*)&uartDgusTxBuffer[6],"HIGH TEMPERATURE");
 801b558:	4a6c      	ldr	r2, [pc, #432]	; (801b70c <DGUS_updatePauseReason+0x544>)
 801b55a:	4b71      	ldr	r3, [pc, #452]	; (801b720 <DGUS_updatePauseReason+0x558>)
 801b55c:	4615      	mov	r5, r2
 801b55e:	461c      	mov	r4, r3
 801b560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b562:	6028      	str	r0, [r5, #0]
 801b564:	6069      	str	r1, [r5, #4]
 801b566:	60aa      	str	r2, [r5, #8]
 801b568:	60eb      	str	r3, [r5, #12]
 801b56a:	7823      	ldrb	r3, [r4, #0]
 801b56c:	742b      	strb	r3, [r5, #16]
					stringlength = 16;
 801b56e:	2310      	movs	r3, #16
 801b570:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Active");
 801b572:	4b68      	ldr	r3, [pc, #416]	; (801b714 <DGUS_updatePauseReason+0x54c>)
 801b574:	4a68      	ldr	r2, [pc, #416]	; (801b718 <DGUS_updatePauseReason+0x550>)
 801b576:	6810      	ldr	r0, [r2, #0]
 801b578:	6018      	str	r0, [r3, #0]
 801b57a:	8891      	ldrh	r1, [r2, #4]
 801b57c:	7992      	ldrb	r2, [r2, #6]
 801b57e:	8099      	strh	r1, [r3, #4]
 801b580:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b582:	2306      	movs	r3, #6
 801b584:	71bb      	strb	r3, [r7, #6]
 801b586:	e080      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
				else {
					strcpy((char*)&uartDgusTxBuffer[6],"HIGH TEMPERATURE");
 801b588:	4a60      	ldr	r2, [pc, #384]	; (801b70c <DGUS_updatePauseReason+0x544>)
 801b58a:	4b65      	ldr	r3, [pc, #404]	; (801b720 <DGUS_updatePauseReason+0x558>)
 801b58c:	4615      	mov	r5, r2
 801b58e:	461c      	mov	r4, r3
 801b590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b592:	6028      	str	r0, [r5, #0]
 801b594:	6069      	str	r1, [r5, #4]
 801b596:	60aa      	str	r2, [r5, #8]
 801b598:	60eb      	str	r3, [r5, #12]
 801b59a:	7823      	ldrb	r3, [r4, #0]
 801b59c:	742b      	strb	r3, [r5, #16]
					stringlength = 16;
 801b59e:	2310      	movs	r3, #16
 801b5a0:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Healed");
 801b5a2:	4b5c      	ldr	r3, [pc, #368]	; (801b714 <DGUS_updatePauseReason+0x54c>)
 801b5a4:	4a5d      	ldr	r2, [pc, #372]	; (801b71c <DGUS_updatePauseReason+0x554>)
 801b5a6:	6810      	ldr	r0, [r2, #0]
 801b5a8:	6018      	str	r0, [r3, #0]
 801b5aa:	8891      	ldrh	r1, [r2, #4]
 801b5ac:	7992      	ldrb	r2, [r2, #6]
 801b5ae:	8099      	strh	r1, [r3, #4]
 801b5b0:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b5b2:	2306      	movs	r3, #6
 801b5b4:	71bb      	strb	r3, [r7, #6]
 801b5b6:	e068      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
			}
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_PhaseReversal){
 801b5b8:	4b52      	ldr	r3, [pc, #328]	; (801b704 <DGUS_updatePauseReason+0x53c>)
 801b5ba:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b5be:	2b07      	cmp	r3, #7
 801b5c0:	d12f      	bne.n	801b622 <DGUS_updatePauseReason+0x45a>
				if(Appl_diagActiveFault.PhaseReversal == 1) {
 801b5c2:	4b51      	ldr	r3, [pc, #324]	; (801b708 <DGUS_updatePauseReason+0x540>)
 801b5c4:	79db      	ldrb	r3, [r3, #7]
 801b5c6:	2b01      	cmp	r3, #1
 801b5c8:	d115      	bne.n	801b5f6 <DGUS_updatePauseReason+0x42e>
					strcpy((char*)&uartDgusTxBuffer[6],"REVERSE PHASE");
 801b5ca:	4a50      	ldr	r2, [pc, #320]	; (801b70c <DGUS_updatePauseReason+0x544>)
 801b5cc:	4b55      	ldr	r3, [pc, #340]	; (801b724 <DGUS_updatePauseReason+0x55c>)
 801b5ce:	4614      	mov	r4, r2
 801b5d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b5d2:	6020      	str	r0, [r4, #0]
 801b5d4:	6061      	str	r1, [r4, #4]
 801b5d6:	60a2      	str	r2, [r4, #8]
 801b5d8:	881b      	ldrh	r3, [r3, #0]
 801b5da:	81a3      	strh	r3, [r4, #12]
					stringlength = 13;
 801b5dc:	230d      	movs	r3, #13
 801b5de:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Active");
 801b5e0:	4b4c      	ldr	r3, [pc, #304]	; (801b714 <DGUS_updatePauseReason+0x54c>)
 801b5e2:	4a4d      	ldr	r2, [pc, #308]	; (801b718 <DGUS_updatePauseReason+0x550>)
 801b5e4:	6810      	ldr	r0, [r2, #0]
 801b5e6:	6018      	str	r0, [r3, #0]
 801b5e8:	8891      	ldrh	r1, [r2, #4]
 801b5ea:	7992      	ldrb	r2, [r2, #6]
 801b5ec:	8099      	strh	r1, [r3, #4]
 801b5ee:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b5f0:	2306      	movs	r3, #6
 801b5f2:	71bb      	strb	r3, [r7, #6]
 801b5f4:	e049      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
				else {
					strcpy((char*)&uartDgusTxBuffer[6],"REVERSE PHASE");
 801b5f6:	4a45      	ldr	r2, [pc, #276]	; (801b70c <DGUS_updatePauseReason+0x544>)
 801b5f8:	4b4a      	ldr	r3, [pc, #296]	; (801b724 <DGUS_updatePauseReason+0x55c>)
 801b5fa:	4614      	mov	r4, r2
 801b5fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b5fe:	6020      	str	r0, [r4, #0]
 801b600:	6061      	str	r1, [r4, #4]
 801b602:	60a2      	str	r2, [r4, #8]
 801b604:	881b      	ldrh	r3, [r3, #0]
 801b606:	81a3      	strh	r3, [r4, #12]
					stringlength = 13;
 801b608:	230d      	movs	r3, #13
 801b60a:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Healed");
 801b60c:	4b41      	ldr	r3, [pc, #260]	; (801b714 <DGUS_updatePauseReason+0x54c>)
 801b60e:	4a43      	ldr	r2, [pc, #268]	; (801b71c <DGUS_updatePauseReason+0x554>)
 801b610:	6810      	ldr	r0, [r2, #0]
 801b612:	6018      	str	r0, [r3, #0]
 801b614:	8891      	ldrh	r1, [r2, #4]
 801b616:	7992      	ldrb	r2, [r2, #6]
 801b618:	8099      	strh	r1, [r3, #4]
 801b61a:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b61c:	2306      	movs	r3, #6
 801b61e:	71bb      	strb	r3, [r7, #6]
 801b620:	e033      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
			}
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_PhaseReversal){
 801b622:	4b38      	ldr	r3, [pc, #224]	; (801b704 <DGUS_updatePauseReason+0x53c>)
 801b624:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801b628:	2b07      	cmp	r3, #7
 801b62a:	d12e      	bne.n	801b68a <DGUS_updatePauseReason+0x4c2>
				if(Appl_diagActiveFault.PhaseReversal == 1) {
 801b62c:	4b36      	ldr	r3, [pc, #216]	; (801b708 <DGUS_updatePauseReason+0x540>)
 801b62e:	79db      	ldrb	r3, [r3, #7]
 801b630:	2b01      	cmp	r3, #1
 801b632:	d115      	bne.n	801b660 <DGUS_updatePauseReason+0x498>
					strcpy((char*)&uartDgusTxBuffer[6],"REVERSE PHASE");
 801b634:	4a35      	ldr	r2, [pc, #212]	; (801b70c <DGUS_updatePauseReason+0x544>)
 801b636:	4b3b      	ldr	r3, [pc, #236]	; (801b724 <DGUS_updatePauseReason+0x55c>)
 801b638:	4614      	mov	r4, r2
 801b63a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b63c:	6020      	str	r0, [r4, #0]
 801b63e:	6061      	str	r1, [r4, #4]
 801b640:	60a2      	str	r2, [r4, #8]
 801b642:	881b      	ldrh	r3, [r3, #0]
 801b644:	81a3      	strh	r3, [r4, #12]
					stringlength = 13;
 801b646:	230d      	movs	r3, #13
 801b648:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Active");
 801b64a:	4b32      	ldr	r3, [pc, #200]	; (801b714 <DGUS_updatePauseReason+0x54c>)
 801b64c:	4a32      	ldr	r2, [pc, #200]	; (801b718 <DGUS_updatePauseReason+0x550>)
 801b64e:	6810      	ldr	r0, [r2, #0]
 801b650:	6018      	str	r0, [r3, #0]
 801b652:	8891      	ldrh	r1, [r2, #4]
 801b654:	7992      	ldrb	r2, [r2, #6]
 801b656:	8099      	strh	r1, [r3, #4]
 801b658:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b65a:	2306      	movs	r3, #6
 801b65c:	71bb      	strb	r3, [r7, #6]
 801b65e:	e014      	b.n	801b68a <DGUS_updatePauseReason+0x4c2>
				}
				else {
					strcpy((char*)&uartDgusTxBuffer[6],"REVERSE PHASE");
 801b660:	4a2a      	ldr	r2, [pc, #168]	; (801b70c <DGUS_updatePauseReason+0x544>)
 801b662:	4b30      	ldr	r3, [pc, #192]	; (801b724 <DGUS_updatePauseReason+0x55c>)
 801b664:	4614      	mov	r4, r2
 801b666:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b668:	6020      	str	r0, [r4, #0]
 801b66a:	6061      	str	r1, [r4, #4]
 801b66c:	60a2      	str	r2, [r4, #8]
 801b66e:	881b      	ldrh	r3, [r3, #0]
 801b670:	81a3      	strh	r3, [r4, #12]
					stringlength = 13;
 801b672:	230d      	movs	r3, #13
 801b674:	71fb      	strb	r3, [r7, #7]
					strcpy((char*)&uartDgusTxBuffer2[6],"Healed");
 801b676:	4b27      	ldr	r3, [pc, #156]	; (801b714 <DGUS_updatePauseReason+0x54c>)
 801b678:	4a28      	ldr	r2, [pc, #160]	; (801b71c <DGUS_updatePauseReason+0x554>)
 801b67a:	6810      	ldr	r0, [r2, #0]
 801b67c:	6018      	str	r0, [r3, #0]
 801b67e:	8891      	ldrh	r1, [r2, #4]
 801b680:	7992      	ldrb	r2, [r2, #6]
 801b682:	8099      	strh	r1, [r3, #4]
 801b684:	719a      	strb	r2, [r3, #6]
					stringlength2 = 6;
 801b686:	2306      	movs	r3, #6
 801b688:	71bb      	strb	r3, [r7, #6]
				}
			}



			uartDgusTxBuffer[stringlength+6] = 0xFF;
 801b68a:	79fb      	ldrb	r3, [r7, #7]
 801b68c:	3306      	adds	r3, #6
 801b68e:	4a26      	ldr	r2, [pc, #152]	; (801b728 <DGUS_updatePauseReason+0x560>)
 801b690:	21ff      	movs	r1, #255	; 0xff
 801b692:	54d1      	strb	r1, [r2, r3]
			uartDgusTxBuffer[stringlength+7] = 0xFF;
 801b694:	79fb      	ldrb	r3, [r7, #7]
 801b696:	3307      	adds	r3, #7
 801b698:	4a23      	ldr	r2, [pc, #140]	; (801b728 <DGUS_updatePauseReason+0x560>)
 801b69a:	21ff      	movs	r1, #255	; 0xff
 801b69c:	54d1      	strb	r1, [r2, r3]
			uartDgusTxBuffer[2] = 3+stringlength+2;
 801b69e:	79fb      	ldrb	r3, [r7, #7]
 801b6a0:	3305      	adds	r3, #5
 801b6a2:	b2da      	uxtb	r2, r3
 801b6a4:	4b20      	ldr	r3, [pc, #128]	; (801b728 <DGUS_updatePauseReason+0x560>)
 801b6a6:	709a      	strb	r2, [r3, #2]

			uartDgusTxBuffer2[stringlength2+6] = 0xFF;
 801b6a8:	79bb      	ldrb	r3, [r7, #6]
 801b6aa:	3306      	adds	r3, #6
 801b6ac:	4a1f      	ldr	r2, [pc, #124]	; (801b72c <DGUS_updatePauseReason+0x564>)
 801b6ae:	21ff      	movs	r1, #255	; 0xff
 801b6b0:	54d1      	strb	r1, [r2, r3]
			uartDgusTxBuffer2[stringlength2+7] = 0xFF;
 801b6b2:	79bb      	ldrb	r3, [r7, #6]
 801b6b4:	3307      	adds	r3, #7
 801b6b6:	4a1d      	ldr	r2, [pc, #116]	; (801b72c <DGUS_updatePauseReason+0x564>)
 801b6b8:	21ff      	movs	r1, #255	; 0xff
 801b6ba:	54d1      	strb	r1, [r2, r3]
			uartDgusTxBuffer2[2] = 3+stringlength2+2;
 801b6bc:	79bb      	ldrb	r3, [r7, #6]
 801b6be:	3305      	adds	r3, #5
 801b6c0:	b2da      	uxtb	r2, r3
 801b6c2:	4b1a      	ldr	r3, [pc, #104]	; (801b72c <DGUS_updatePauseReason+0x564>)
 801b6c4:	709a      	strb	r2, [r3, #2]

			HAL_UART_Transmit(&huart3, &uartDgusTxBuffer2[0], (3+uartDgusTxBuffer2[2]), 10);
 801b6c6:	4b19      	ldr	r3, [pc, #100]	; (801b72c <DGUS_updatePauseReason+0x564>)
 801b6c8:	789b      	ldrb	r3, [r3, #2]
 801b6ca:	b29b      	uxth	r3, r3
 801b6cc:	3303      	adds	r3, #3
 801b6ce:	b29a      	uxth	r2, r3
 801b6d0:	230a      	movs	r3, #10
 801b6d2:	4916      	ldr	r1, [pc, #88]	; (801b72c <DGUS_updatePauseReason+0x564>)
 801b6d4:	4816      	ldr	r0, [pc, #88]	; (801b730 <DGUS_updatePauseReason+0x568>)
 801b6d6:	f7fc fb86 	bl	8017de6 <HAL_UART_Transmit>
			if(HAL_OK != HAL_UART_Transmit(&huart3, &uartDgusTxBuffer[0], (3+uartDgusTxBuffer[2]), 10)){
 801b6da:	4b13      	ldr	r3, [pc, #76]	; (801b728 <DGUS_updatePauseReason+0x560>)
 801b6dc:	789b      	ldrb	r3, [r3, #2]
 801b6de:	b29b      	uxth	r3, r3
 801b6e0:	3303      	adds	r3, #3
 801b6e2:	b29a      	uxth	r2, r3
 801b6e4:	230a      	movs	r3, #10
 801b6e6:	4910      	ldr	r1, [pc, #64]	; (801b728 <DGUS_updatePauseReason+0x560>)
 801b6e8:	4811      	ldr	r0, [pc, #68]	; (801b730 <DGUS_updatePauseReason+0x568>)
 801b6ea:	f7fc fb7c 	bl	8017de6 <HAL_UART_Transmit>
 801b6ee:	4603      	mov	r3, r0
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d001      	beq.n	801b6f8 <DGUS_updatePauseReason+0x530>
				return DGUS_ERR;
 801b6f4:	2302      	movs	r3, #2
 801b6f6:	e000      	b.n	801b6fa <DGUS_updatePauseReason+0x532>
			}
			else{
				return DGUS_OK;
 801b6f8:	2300      	movs	r3, #0
			}

}
 801b6fa:	4618      	mov	r0, r3
 801b6fc:	3708      	adds	r7, #8
 801b6fe:	46bd      	mov	sp, r7
 801b700:	bdb0      	pop	{r4, r5, r7, pc}
 801b702:	bf00      	nop
 801b704:	20005034 	.word	0x20005034
 801b708:	20004d0c 	.word	0x20004d0c
 801b70c:	20004d6a 	.word	0x20004d6a
 801b710:	08026ff0 	.word	0x08026ff0
 801b714:	20004d26 	.word	0x20004d26
 801b718:	08026fa0 	.word	0x08026fa0
 801b71c:	08026fa8 	.word	0x08026fa8
 801b720:	08027000 	.word	0x08027000
 801b724:	08027014 	.word	0x08027014
 801b728:	20004d64 	.word	0x20004d64
 801b72c:	20004d20 	.word	0x20004d20
 801b730:	20004964 	.word	0x20004964

0801b734 <DGUS_updateSelfTestText>:
DGUS_ERROR DGUS_updateSelfTestText(uint16_t loopms){
 801b734:	b580      	push	{r7, lr}
 801b736:	b084      	sub	sp, #16
 801b738:	af00      	add	r7, sp, #0
 801b73a:	4603      	mov	r3, r0
 801b73c:	80fb      	strh	r3, [r7, #6]

	uint8_t stringlength = 0;
 801b73e:	2300      	movs	r3, #0
 801b740:	737b      	strb	r3, [r7, #13]


	memset(&uartDgusTxBuffer[0],0,sizeof(uartDgusTxBuffer));
 801b742:	2240      	movs	r2, #64	; 0x40
 801b744:	2100      	movs	r1, #0
 801b746:	489f      	ldr	r0, [pc, #636]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b748:	f008 fd16 	bl	8024178 <memset>
	memcpy(&uartDgusTxBuffer[0], &uartCommandList[5][0],DGUS_TRANSFER_BUFFER_SIZE);
 801b74c:	2240      	movs	r2, #64	; 0x40
 801b74e:	499e      	ldr	r1, [pc, #632]	; (801b9c8 <DGUS_updateSelfTestText+0x294>)
 801b750:	489c      	ldr	r0, [pc, #624]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b752:	f008 fd03 	bl	802415c <memcpy>

	Appl_Display.SelfTestCounter++;
 801b756:	4b9d      	ldr	r3, [pc, #628]	; (801b9cc <DGUS_updateSelfTestText+0x298>)
 801b758:	691b      	ldr	r3, [r3, #16]
 801b75a:	3301      	adds	r3, #1
 801b75c:	4a9b      	ldr	r2, [pc, #620]	; (801b9cc <DGUS_updateSelfTestText+0x298>)
 801b75e:	6113      	str	r3, [r2, #16]
	 * 1200 - UnderVoltage
	 * 1210 - PhaseCheck
	 * 1220 - TemperatureCheck
	 * */

	if(Appl_Display.SelfTestCounter > (1000/loopms)){
 801b760:	4b9a      	ldr	r3, [pc, #616]	; (801b9cc <DGUS_updateSelfTestText+0x298>)
 801b762:	691b      	ldr	r3, [r3, #16]
 801b764:	88fa      	ldrh	r2, [r7, #6]
 801b766:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b76a:	fb91 f2f2 	sdiv	r2, r1, r2
 801b76e:	4293      	cmp	r3, r2
 801b770:	f240 830a 	bls.w	801bd88 <DGUS_updateSelfTestText+0x654>
		if(Appl_diagActiveFault.PowerFail_Z1 == 0 &&\
 801b774:	4b96      	ldr	r3, [pc, #600]	; (801b9d0 <DGUS_updateSelfTestText+0x29c>)
 801b776:	781b      	ldrb	r3, [r3, #0]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	f040 82d5 	bne.w	801bd28 <DGUS_updateSelfTestText+0x5f4>
				Appl_diagActiveFault.PowerFail_Z2 == 0 && \
 801b77e:	4b94      	ldr	r3, [pc, #592]	; (801b9d0 <DGUS_updateSelfTestText+0x29c>)
 801b780:	785b      	ldrb	r3, [r3, #1]
		if(Appl_diagActiveFault.PowerFail_Z1 == 0 &&\
 801b782:	2b00      	cmp	r3, #0
 801b784:	f040 82d0 	bne.w	801bd28 <DGUS_updateSelfTestText+0x5f4>
				Appl_diagActiveFault.PowerFail_Z3 == 0){
 801b788:	4b91      	ldr	r3, [pc, #580]	; (801b9d0 <DGUS_updateSelfTestText+0x29c>)
 801b78a:	789b      	ldrb	r3, [r3, #2]
				Appl_diagActiveFault.PowerFail_Z2 == 0 && \
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	f040 82cb 	bne.w	801bd28 <DGUS_updateSelfTestText+0x5f4>
			uartDgusTxBuffer[4] = 0x11;
 801b792:	4b8c      	ldr	r3, [pc, #560]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b794:	2211      	movs	r2, #17
 801b796:	711a      	strb	r2, [r3, #4]
			uartDgusTxBuffer[5] = 0xC0;
 801b798:	4b8a      	ldr	r3, [pc, #552]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b79a:	22c0      	movs	r2, #192	; 0xc0
 801b79c:	715a      	strb	r2, [r3, #5]
			strcpy((char*)&uartDgusTxBuffer[6],"OK");
 801b79e:	4b8d      	ldr	r3, [pc, #564]	; (801b9d4 <DGUS_updateSelfTestText+0x2a0>)
 801b7a0:	4a8d      	ldr	r2, [pc, #564]	; (801b9d8 <DGUS_updateSelfTestText+0x2a4>)
 801b7a2:	8811      	ldrh	r1, [r2, #0]
 801b7a4:	7892      	ldrb	r2, [r2, #2]
 801b7a6:	8019      	strh	r1, [r3, #0]
 801b7a8:	709a      	strb	r2, [r3, #2]
			stringlength = 2;
 801b7aa:	2302      	movs	r3, #2
 801b7ac:	737b      	strb	r3, [r7, #13]
			uartDgusTxBuffer[stringlength+6] = 0xFF;
 801b7ae:	7b7b      	ldrb	r3, [r7, #13]
 801b7b0:	3306      	adds	r3, #6
 801b7b2:	4a84      	ldr	r2, [pc, #528]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b7b4:	21ff      	movs	r1, #255	; 0xff
 801b7b6:	54d1      	strb	r1, [r2, r3]
			uartDgusTxBuffer[stringlength+7] = 0xFF;
 801b7b8:	7b7b      	ldrb	r3, [r7, #13]
 801b7ba:	3307      	adds	r3, #7
 801b7bc:	4a81      	ldr	r2, [pc, #516]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b7be:	21ff      	movs	r1, #255	; 0xff
 801b7c0:	54d1      	strb	r1, [r2, r3]
			uartDgusTxBuffer[2] = 3+stringlength+2;
 801b7c2:	7b7b      	ldrb	r3, [r7, #13]
 801b7c4:	3305      	adds	r3, #5
 801b7c6:	b2da      	uxtb	r2, r3
 801b7c8:	4b7e      	ldr	r3, [pc, #504]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b7ca:	709a      	strb	r2, [r3, #2]
			SENDTEXT();
 801b7cc:	4b7d      	ldr	r3, [pc, #500]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b7ce:	789b      	ldrb	r3, [r3, #2]
 801b7d0:	b29b      	uxth	r3, r3
 801b7d2:	3303      	adds	r3, #3
 801b7d4:	b29a      	uxth	r2, r3
 801b7d6:	230a      	movs	r3, #10
 801b7d8:	497a      	ldr	r1, [pc, #488]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b7da:	4880      	ldr	r0, [pc, #512]	; (801b9dc <DGUS_updateSelfTestText+0x2a8>)
 801b7dc:	f7fc fb03 	bl	8017de6 <HAL_UART_Transmit>
 801b7e0:	4603      	mov	r3, r0
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d001      	beq.n	801b7ea <DGUS_updateSelfTestText+0xb6>
 801b7e6:	2302      	movs	r3, #2
 801b7e8:	e309      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
			if(Appl_Display.SelfTestCounter > (2000/loopms)){
 801b7ea:	4b78      	ldr	r3, [pc, #480]	; (801b9cc <DGUS_updateSelfTestText+0x298>)
 801b7ec:	691b      	ldr	r3, [r3, #16]
 801b7ee:	88fa      	ldrh	r2, [r7, #6]
 801b7f0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 801b7f4:	fb91 f2f2 	sdiv	r2, r1, r2
 801b7f8:	4293      	cmp	r3, r2
 801b7fa:	f240 82ff 	bls.w	801bdfc <DGUS_updateSelfTestText+0x6c8>
				if(Appl_diagActiveFault.FiltercktOpen == 0){
 801b7fe:	4b74      	ldr	r3, [pc, #464]	; (801b9d0 <DGUS_updateSelfTestText+0x29c>)
 801b800:	7a9b      	ldrb	r3, [r3, #10]
 801b802:	2b00      	cmp	r3, #0
 801b804:	f040 8260 	bne.w	801bcc8 <DGUS_updateSelfTestText+0x594>
					uartDgusTxBuffer[4] = 0x11;
 801b808:	4b6e      	ldr	r3, [pc, #440]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b80a:	2211      	movs	r2, #17
 801b80c:	711a      	strb	r2, [r3, #4]
					uartDgusTxBuffer[5] = 0xD0;
 801b80e:	4b6d      	ldr	r3, [pc, #436]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b810:	22d0      	movs	r2, #208	; 0xd0
 801b812:	715a      	strb	r2, [r3, #5]
					strcpy((char*)&uartDgusTxBuffer[6],"OK");
 801b814:	4b6f      	ldr	r3, [pc, #444]	; (801b9d4 <DGUS_updateSelfTestText+0x2a0>)
 801b816:	4a70      	ldr	r2, [pc, #448]	; (801b9d8 <DGUS_updateSelfTestText+0x2a4>)
 801b818:	8811      	ldrh	r1, [r2, #0]
 801b81a:	7892      	ldrb	r2, [r2, #2]
 801b81c:	8019      	strh	r1, [r3, #0]
 801b81e:	709a      	strb	r2, [r3, #2]
					stringlength = 2;
 801b820:	2302      	movs	r3, #2
 801b822:	737b      	strb	r3, [r7, #13]
					uartDgusTxBuffer[stringlength+6] = 0xFF;
 801b824:	7b7b      	ldrb	r3, [r7, #13]
 801b826:	3306      	adds	r3, #6
 801b828:	4a66      	ldr	r2, [pc, #408]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b82a:	21ff      	movs	r1, #255	; 0xff
 801b82c:	54d1      	strb	r1, [r2, r3]
					uartDgusTxBuffer[stringlength+7] = 0xFF;
 801b82e:	7b7b      	ldrb	r3, [r7, #13]
 801b830:	3307      	adds	r3, #7
 801b832:	4a64      	ldr	r2, [pc, #400]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b834:	21ff      	movs	r1, #255	; 0xff
 801b836:	54d1      	strb	r1, [r2, r3]
					uartDgusTxBuffer[2] = 3+stringlength+2;
 801b838:	7b7b      	ldrb	r3, [r7, #13]
 801b83a:	3305      	adds	r3, #5
 801b83c:	b2da      	uxtb	r2, r3
 801b83e:	4b61      	ldr	r3, [pc, #388]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b840:	709a      	strb	r2, [r3, #2]
					SENDTEXT();
 801b842:	4b60      	ldr	r3, [pc, #384]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b844:	789b      	ldrb	r3, [r3, #2]
 801b846:	b29b      	uxth	r3, r3
 801b848:	3303      	adds	r3, #3
 801b84a:	b29a      	uxth	r2, r3
 801b84c:	230a      	movs	r3, #10
 801b84e:	495d      	ldr	r1, [pc, #372]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b850:	4862      	ldr	r0, [pc, #392]	; (801b9dc <DGUS_updateSelfTestText+0x2a8>)
 801b852:	f7fc fac8 	bl	8017de6 <HAL_UART_Transmit>
 801b856:	4603      	mov	r3, r0
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d001      	beq.n	801b860 <DGUS_updateSelfTestText+0x12c>
 801b85c:	2302      	movs	r3, #2
 801b85e:	e2ce      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
					if(Appl_Display.SelfTestCounter > (3000/loopms)){
 801b860:	4b5a      	ldr	r3, [pc, #360]	; (801b9cc <DGUS_updateSelfTestText+0x298>)
 801b862:	691b      	ldr	r3, [r3, #16]
 801b864:	88fa      	ldrh	r2, [r7, #6]
 801b866:	f640 31b8 	movw	r1, #3000	; 0xbb8
 801b86a:	fb91 f2f2 	sdiv	r2, r1, r2
 801b86e:	4293      	cmp	r3, r2
 801b870:	f240 82c4 	bls.w	801bdfc <DGUS_updateSelfTestText+0x6c8>
						if(Appl_diagActiveFault.BatteryReversal == 0){
 801b874:	4b56      	ldr	r3, [pc, #344]	; (801b9d0 <DGUS_updateSelfTestText+0x29c>)
 801b876:	7a1b      	ldrb	r3, [r3, #8]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	f040 81f5 	bne.w	801bc68 <DGUS_updateSelfTestText+0x534>
							uartDgusTxBuffer[4] = 0x11;
 801b87e:	4b51      	ldr	r3, [pc, #324]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b880:	2211      	movs	r2, #17
 801b882:	711a      	strb	r2, [r3, #4]
							uartDgusTxBuffer[5] = 0xE0;
 801b884:	4b4f      	ldr	r3, [pc, #316]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b886:	22e0      	movs	r2, #224	; 0xe0
 801b888:	715a      	strb	r2, [r3, #5]
							strcpy((char*)&uartDgusTxBuffer[6],"OK");
 801b88a:	4b52      	ldr	r3, [pc, #328]	; (801b9d4 <DGUS_updateSelfTestText+0x2a0>)
 801b88c:	4a52      	ldr	r2, [pc, #328]	; (801b9d8 <DGUS_updateSelfTestText+0x2a4>)
 801b88e:	8811      	ldrh	r1, [r2, #0]
 801b890:	7892      	ldrb	r2, [r2, #2]
 801b892:	8019      	strh	r1, [r3, #0]
 801b894:	709a      	strb	r2, [r3, #2]
							stringlength = 2;
 801b896:	2302      	movs	r3, #2
 801b898:	737b      	strb	r3, [r7, #13]
							uartDgusTxBuffer[stringlength+6] = 0xFF;
 801b89a:	7b7b      	ldrb	r3, [r7, #13]
 801b89c:	3306      	adds	r3, #6
 801b89e:	4a49      	ldr	r2, [pc, #292]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b8a0:	21ff      	movs	r1, #255	; 0xff
 801b8a2:	54d1      	strb	r1, [r2, r3]
							uartDgusTxBuffer[stringlength+7] = 0xFF;
 801b8a4:	7b7b      	ldrb	r3, [r7, #13]
 801b8a6:	3307      	adds	r3, #7
 801b8a8:	4a46      	ldr	r2, [pc, #280]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b8aa:	21ff      	movs	r1, #255	; 0xff
 801b8ac:	54d1      	strb	r1, [r2, r3]
							uartDgusTxBuffer[2] = 3+stringlength+2;
 801b8ae:	7b7b      	ldrb	r3, [r7, #13]
 801b8b0:	3305      	adds	r3, #5
 801b8b2:	b2da      	uxtb	r2, r3
 801b8b4:	4b43      	ldr	r3, [pc, #268]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b8b6:	709a      	strb	r2, [r3, #2]
							SENDTEXT();
 801b8b8:	4b42      	ldr	r3, [pc, #264]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b8ba:	789b      	ldrb	r3, [r3, #2]
 801b8bc:	b29b      	uxth	r3, r3
 801b8be:	3303      	adds	r3, #3
 801b8c0:	b29a      	uxth	r2, r3
 801b8c2:	230a      	movs	r3, #10
 801b8c4:	493f      	ldr	r1, [pc, #252]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b8c6:	4845      	ldr	r0, [pc, #276]	; (801b9dc <DGUS_updateSelfTestText+0x2a8>)
 801b8c8:	f7fc fa8d 	bl	8017de6 <HAL_UART_Transmit>
 801b8cc:	4603      	mov	r3, r0
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d001      	beq.n	801b8d6 <DGUS_updateSelfTestText+0x1a2>
 801b8d2:	2302      	movs	r3, #2
 801b8d4:	e293      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
							if(Appl_Display.SelfTestCounter > (4000/loopms)){
 801b8d6:	4b3d      	ldr	r3, [pc, #244]	; (801b9cc <DGUS_updateSelfTestText+0x298>)
 801b8d8:	691b      	ldr	r3, [r3, #16]
 801b8da:	88fa      	ldrh	r2, [r7, #6]
 801b8dc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 801b8e0:	fb91 f2f2 	sdiv	r2, r1, r2
 801b8e4:	4293      	cmp	r3, r2
 801b8e6:	f240 8289 	bls.w	801bdfc <DGUS_updateSelfTestText+0x6c8>
								if(Appl_diagActiveFault.OverVoltage == 0){
 801b8ea:	4b39      	ldr	r3, [pc, #228]	; (801b9d0 <DGUS_updateSelfTestText+0x29c>)
 801b8ec:	7adb      	ldrb	r3, [r3, #11]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	f040 817c 	bne.w	801bbec <DGUS_updateSelfTestText+0x4b8>
									uartDgusTxBuffer[4] = 0x11;
 801b8f4:	4b33      	ldr	r3, [pc, #204]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b8f6:	2211      	movs	r2, #17
 801b8f8:	711a      	strb	r2, [r3, #4]
									uartDgusTxBuffer[5] = 0xF0;
 801b8fa:	4b32      	ldr	r3, [pc, #200]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b8fc:	22f0      	movs	r2, #240	; 0xf0
 801b8fe:	715a      	strb	r2, [r3, #5]
									strcpy((char*)&uartDgusTxBuffer[6],"OK");
 801b900:	4b34      	ldr	r3, [pc, #208]	; (801b9d4 <DGUS_updateSelfTestText+0x2a0>)
 801b902:	4a35      	ldr	r2, [pc, #212]	; (801b9d8 <DGUS_updateSelfTestText+0x2a4>)
 801b904:	8811      	ldrh	r1, [r2, #0]
 801b906:	7892      	ldrb	r2, [r2, #2]
 801b908:	8019      	strh	r1, [r3, #0]
 801b90a:	709a      	strb	r2, [r3, #2]
									stringlength = 2;
 801b90c:	2302      	movs	r3, #2
 801b90e:	737b      	strb	r3, [r7, #13]
									uartDgusTxBuffer[stringlength+6] = 0xFF;
 801b910:	7b7b      	ldrb	r3, [r7, #13]
 801b912:	3306      	adds	r3, #6
 801b914:	4a2b      	ldr	r2, [pc, #172]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b916:	21ff      	movs	r1, #255	; 0xff
 801b918:	54d1      	strb	r1, [r2, r3]
									uartDgusTxBuffer[stringlength+7] = 0xFF;
 801b91a:	7b7b      	ldrb	r3, [r7, #13]
 801b91c:	3307      	adds	r3, #7
 801b91e:	4a29      	ldr	r2, [pc, #164]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b920:	21ff      	movs	r1, #255	; 0xff
 801b922:	54d1      	strb	r1, [r2, r3]
									uartDgusTxBuffer[2] = 3+stringlength+2;
 801b924:	7b7b      	ldrb	r3, [r7, #13]
 801b926:	3305      	adds	r3, #5
 801b928:	b2da      	uxtb	r2, r3
 801b92a:	4b26      	ldr	r3, [pc, #152]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b92c:	709a      	strb	r2, [r3, #2]
									SENDTEXT();
 801b92e:	4b25      	ldr	r3, [pc, #148]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b930:	789b      	ldrb	r3, [r3, #2]
 801b932:	b29b      	uxth	r3, r3
 801b934:	3303      	adds	r3, #3
 801b936:	b29a      	uxth	r2, r3
 801b938:	230a      	movs	r3, #10
 801b93a:	4922      	ldr	r1, [pc, #136]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b93c:	4827      	ldr	r0, [pc, #156]	; (801b9dc <DGUS_updateSelfTestText+0x2a8>)
 801b93e:	f7fc fa52 	bl	8017de6 <HAL_UART_Transmit>
 801b942:	4603      	mov	r3, r0
 801b944:	2b00      	cmp	r3, #0
 801b946:	d001      	beq.n	801b94c <DGUS_updateSelfTestText+0x218>
 801b948:	2302      	movs	r3, #2
 801b94a:	e258      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
									if(Appl_Display.SelfTestCounter > (5000/loopms)){
 801b94c:	4b1f      	ldr	r3, [pc, #124]	; (801b9cc <DGUS_updateSelfTestText+0x298>)
 801b94e:	691b      	ldr	r3, [r3, #16]
 801b950:	88fa      	ldrh	r2, [r7, #6]
 801b952:	f241 3188 	movw	r1, #5000	; 0x1388
 801b956:	fb91 f2f2 	sdiv	r2, r1, r2
 801b95a:	4293      	cmp	r3, r2
 801b95c:	f240 824e 	bls.w	801bdfc <DGUS_updateSelfTestText+0x6c8>
										if(Appl_diagActiveFault.UnderVoltage == 0){
 801b960:	4b1b      	ldr	r3, [pc, #108]	; (801b9d0 <DGUS_updateSelfTestText+0x29c>)
 801b962:	795b      	ldrb	r3, [r3, #5]
 801b964:	2b00      	cmp	r3, #0
 801b966:	f040 8111 	bne.w	801bb8c <DGUS_updateSelfTestText+0x458>
											uartDgusTxBuffer[4] = 0x12;
 801b96a:	4b16      	ldr	r3, [pc, #88]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b96c:	2212      	movs	r2, #18
 801b96e:	711a      	strb	r2, [r3, #4]
											uartDgusTxBuffer[5] = 0x00;
 801b970:	4b14      	ldr	r3, [pc, #80]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b972:	2200      	movs	r2, #0
 801b974:	715a      	strb	r2, [r3, #5]
											strcpy((char*)&uartDgusTxBuffer[6],"OK");
 801b976:	4b17      	ldr	r3, [pc, #92]	; (801b9d4 <DGUS_updateSelfTestText+0x2a0>)
 801b978:	4a17      	ldr	r2, [pc, #92]	; (801b9d8 <DGUS_updateSelfTestText+0x2a4>)
 801b97a:	8811      	ldrh	r1, [r2, #0]
 801b97c:	7892      	ldrb	r2, [r2, #2]
 801b97e:	8019      	strh	r1, [r3, #0]
 801b980:	709a      	strb	r2, [r3, #2]
											stringlength = 2;
 801b982:	2302      	movs	r3, #2
 801b984:	737b      	strb	r3, [r7, #13]
											uartDgusTxBuffer[stringlength+6] = 0xFF;
 801b986:	7b7b      	ldrb	r3, [r7, #13]
 801b988:	3306      	adds	r3, #6
 801b98a:	4a0e      	ldr	r2, [pc, #56]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b98c:	21ff      	movs	r1, #255	; 0xff
 801b98e:	54d1      	strb	r1, [r2, r3]
											uartDgusTxBuffer[stringlength+7] = 0xFF;
 801b990:	7b7b      	ldrb	r3, [r7, #13]
 801b992:	3307      	adds	r3, #7
 801b994:	4a0b      	ldr	r2, [pc, #44]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b996:	21ff      	movs	r1, #255	; 0xff
 801b998:	54d1      	strb	r1, [r2, r3]
											uartDgusTxBuffer[2] = 3+stringlength+2;
 801b99a:	7b7b      	ldrb	r3, [r7, #13]
 801b99c:	3305      	adds	r3, #5
 801b99e:	b2da      	uxtb	r2, r3
 801b9a0:	4b08      	ldr	r3, [pc, #32]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b9a2:	709a      	strb	r2, [r3, #2]
											SENDTEXT();
 801b9a4:	4b07      	ldr	r3, [pc, #28]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b9a6:	789b      	ldrb	r3, [r3, #2]
 801b9a8:	b29b      	uxth	r3, r3
 801b9aa:	3303      	adds	r3, #3
 801b9ac:	b29a      	uxth	r2, r3
 801b9ae:	230a      	movs	r3, #10
 801b9b0:	4904      	ldr	r1, [pc, #16]	; (801b9c4 <DGUS_updateSelfTestText+0x290>)
 801b9b2:	480a      	ldr	r0, [pc, #40]	; (801b9dc <DGUS_updateSelfTestText+0x2a8>)
 801b9b4:	f7fc fa17 	bl	8017de6 <HAL_UART_Transmit>
 801b9b8:	4603      	mov	r3, r0
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d010      	beq.n	801b9e0 <DGUS_updateSelfTestText+0x2ac>
 801b9be:	2302      	movs	r3, #2
 801b9c0:	e21d      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
 801b9c2:	bf00      	nop
 801b9c4:	20004d64 	.word	0x20004d64
 801b9c8:	200001b4 	.word	0x200001b4
 801b9cc:	20004f08 	.word	0x20004f08
 801b9d0:	20004d0c 	.word	0x20004d0c
 801b9d4:	20004d6a 	.word	0x20004d6a
 801b9d8:	08027024 	.word	0x08027024
 801b9dc:	20004964 	.word	0x20004964
											if(Appl_Display.SelfTestCounter > (6000/loopms)){
 801b9e0:	4b9a      	ldr	r3, [pc, #616]	; (801bc4c <DGUS_updateSelfTestText+0x518>)
 801b9e2:	691b      	ldr	r3, [r3, #16]
 801b9e4:	88fa      	ldrh	r2, [r7, #6]
 801b9e6:	f241 7170 	movw	r1, #6000	; 0x1770
 801b9ea:	fb91 f2f2 	sdiv	r2, r1, r2
 801b9ee:	4293      	cmp	r3, r2
 801b9f0:	f240 8204 	bls.w	801bdfc <DGUS_updateSelfTestText+0x6c8>
												if(Appl_diagActiveFault.PhaseReversal == 0){
 801b9f4:	4b96      	ldr	r3, [pc, #600]	; (801bc50 <DGUS_updateSelfTestText+0x51c>)
 801b9f6:	79db      	ldrb	r3, [r3, #7]
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	f040 8097 	bne.w	801bb2c <DGUS_updateSelfTestText+0x3f8>
													uartDgusTxBuffer[4] = 0x12;
 801b9fe:	4b95      	ldr	r3, [pc, #596]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba00:	2212      	movs	r2, #18
 801ba02:	711a      	strb	r2, [r3, #4]
													uartDgusTxBuffer[5] = 0x10;
 801ba04:	4b93      	ldr	r3, [pc, #588]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba06:	2210      	movs	r2, #16
 801ba08:	715a      	strb	r2, [r3, #5]
													strcpy((char*)&uartDgusTxBuffer[6],"OK");
 801ba0a:	4b93      	ldr	r3, [pc, #588]	; (801bc58 <DGUS_updateSelfTestText+0x524>)
 801ba0c:	4a93      	ldr	r2, [pc, #588]	; (801bc5c <DGUS_updateSelfTestText+0x528>)
 801ba0e:	8811      	ldrh	r1, [r2, #0]
 801ba10:	7892      	ldrb	r2, [r2, #2]
 801ba12:	8019      	strh	r1, [r3, #0]
 801ba14:	709a      	strb	r2, [r3, #2]
													stringlength = 2;
 801ba16:	2302      	movs	r3, #2
 801ba18:	737b      	strb	r3, [r7, #13]
													uartDgusTxBuffer[stringlength+6] = 0xFF;
 801ba1a:	7b7b      	ldrb	r3, [r7, #13]
 801ba1c:	3306      	adds	r3, #6
 801ba1e:	4a8d      	ldr	r2, [pc, #564]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba20:	21ff      	movs	r1, #255	; 0xff
 801ba22:	54d1      	strb	r1, [r2, r3]
													uartDgusTxBuffer[stringlength+7] = 0xFF;
 801ba24:	7b7b      	ldrb	r3, [r7, #13]
 801ba26:	3307      	adds	r3, #7
 801ba28:	4a8a      	ldr	r2, [pc, #552]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba2a:	21ff      	movs	r1, #255	; 0xff
 801ba2c:	54d1      	strb	r1, [r2, r3]
													uartDgusTxBuffer[2] = 3+stringlength+2;
 801ba2e:	7b7b      	ldrb	r3, [r7, #13]
 801ba30:	3305      	adds	r3, #5
 801ba32:	b2da      	uxtb	r2, r3
 801ba34:	4b87      	ldr	r3, [pc, #540]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba36:	709a      	strb	r2, [r3, #2]
													SENDTEXT();
 801ba38:	4b86      	ldr	r3, [pc, #536]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba3a:	789b      	ldrb	r3, [r3, #2]
 801ba3c:	b29b      	uxth	r3, r3
 801ba3e:	3303      	adds	r3, #3
 801ba40:	b29a      	uxth	r2, r3
 801ba42:	230a      	movs	r3, #10
 801ba44:	4983      	ldr	r1, [pc, #524]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba46:	4886      	ldr	r0, [pc, #536]	; (801bc60 <DGUS_updateSelfTestText+0x52c>)
 801ba48:	f7fc f9cd 	bl	8017de6 <HAL_UART_Transmit>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d001      	beq.n	801ba56 <DGUS_updateSelfTestText+0x322>
 801ba52:	2302      	movs	r3, #2
 801ba54:	e1d3      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
													if(Appl_Display.SelfTestCounter > (7000/loopms)){
 801ba56:	4b7d      	ldr	r3, [pc, #500]	; (801bc4c <DGUS_updateSelfTestText+0x518>)
 801ba58:	691b      	ldr	r3, [r3, #16]
 801ba5a:	88fa      	ldrh	r2, [r7, #6]
 801ba5c:	f641 3158 	movw	r1, #7000	; 0x1b58
 801ba60:	fb91 f2f2 	sdiv	r2, r1, r2
 801ba64:	4293      	cmp	r3, r2
 801ba66:	f240 81c9 	bls.w	801bdfc <DGUS_updateSelfTestText+0x6c8>
														if(Appl_diagActiveFault.HighTempperatureSCR == 0){
 801ba6a:	4b79      	ldr	r3, [pc, #484]	; (801bc50 <DGUS_updateSelfTestText+0x51c>)
 801ba6c:	799b      	ldrb	r3, [r3, #6]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d12c      	bne.n	801bacc <DGUS_updateSelfTestText+0x398>
															uartDgusTxBuffer[4] = 0x12;
 801ba72:	4b78      	ldr	r3, [pc, #480]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba74:	2212      	movs	r2, #18
 801ba76:	711a      	strb	r2, [r3, #4]
															uartDgusTxBuffer[5] = 0x20;
 801ba78:	4b76      	ldr	r3, [pc, #472]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba7a:	2220      	movs	r2, #32
 801ba7c:	715a      	strb	r2, [r3, #5]
															strcpy((char*)&uartDgusTxBuffer[6],"OK");
 801ba7e:	4b76      	ldr	r3, [pc, #472]	; (801bc58 <DGUS_updateSelfTestText+0x524>)
 801ba80:	4a76      	ldr	r2, [pc, #472]	; (801bc5c <DGUS_updateSelfTestText+0x528>)
 801ba82:	8811      	ldrh	r1, [r2, #0]
 801ba84:	7892      	ldrb	r2, [r2, #2]
 801ba86:	8019      	strh	r1, [r3, #0]
 801ba88:	709a      	strb	r2, [r3, #2]
															stringlength = 2;
 801ba8a:	2302      	movs	r3, #2
 801ba8c:	737b      	strb	r3, [r7, #13]
															uartDgusTxBuffer[stringlength+6] = 0xFF;
 801ba8e:	7b7b      	ldrb	r3, [r7, #13]
 801ba90:	3306      	adds	r3, #6
 801ba92:	4a70      	ldr	r2, [pc, #448]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba94:	21ff      	movs	r1, #255	; 0xff
 801ba96:	54d1      	strb	r1, [r2, r3]
															uartDgusTxBuffer[stringlength+7] = 0xFF;
 801ba98:	7b7b      	ldrb	r3, [r7, #13]
 801ba9a:	3307      	adds	r3, #7
 801ba9c:	4a6d      	ldr	r2, [pc, #436]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801ba9e:	21ff      	movs	r1, #255	; 0xff
 801baa0:	54d1      	strb	r1, [r2, r3]
															uartDgusTxBuffer[2] = 3+stringlength+2;
 801baa2:	7b7b      	ldrb	r3, [r7, #13]
 801baa4:	3305      	adds	r3, #5
 801baa6:	b2da      	uxtb	r2, r3
 801baa8:	4b6a      	ldr	r3, [pc, #424]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801baaa:	709a      	strb	r2, [r3, #2]
															SENDTEXT();
 801baac:	4b69      	ldr	r3, [pc, #420]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801baae:	789b      	ldrb	r3, [r3, #2]
 801bab0:	b29b      	uxth	r3, r3
 801bab2:	3303      	adds	r3, #3
 801bab4:	b29a      	uxth	r2, r3
 801bab6:	230a      	movs	r3, #10
 801bab8:	4966      	ldr	r1, [pc, #408]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801baba:	4869      	ldr	r0, [pc, #420]	; (801bc60 <DGUS_updateSelfTestText+0x52c>)
 801babc:	f7fc f993 	bl	8017de6 <HAL_UART_Transmit>
 801bac0:	4603      	mov	r3, r0
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	f000 819a 	beq.w	801bdfc <DGUS_updateSelfTestText+0x6c8>
 801bac8:	2302      	movs	r3, #2
 801baca:	e198      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>

														}
														else{
															uartDgusTxBuffer[4] = 0x12;
 801bacc:	4b61      	ldr	r3, [pc, #388]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bace:	2212      	movs	r2, #18
 801bad0:	711a      	strb	r2, [r3, #4]
															uartDgusTxBuffer[5] = 0x20;
 801bad2:	4b60      	ldr	r3, [pc, #384]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bad4:	2220      	movs	r2, #32
 801bad6:	715a      	strb	r2, [r3, #5]
															strcpy((char*)&uartDgusTxBuffer[6],"ERR");
 801bad8:	4b5f      	ldr	r3, [pc, #380]	; (801bc58 <DGUS_updateSelfTestText+0x524>)
 801bada:	4a62      	ldr	r2, [pc, #392]	; (801bc64 <DGUS_updateSelfTestText+0x530>)
 801badc:	6810      	ldr	r0, [r2, #0]
 801bade:	6018      	str	r0, [r3, #0]
															stringlength = 3;
 801bae0:	2303      	movs	r3, #3
 801bae2:	737b      	strb	r3, [r7, #13]
															uartDgusTxBuffer[stringlength+6] = 0xFF;
 801bae4:	7b7b      	ldrb	r3, [r7, #13]
 801bae6:	3306      	adds	r3, #6
 801bae8:	4a5a      	ldr	r2, [pc, #360]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801baea:	21ff      	movs	r1, #255	; 0xff
 801baec:	54d1      	strb	r1, [r2, r3]
															uartDgusTxBuffer[stringlength+7] = 0xFF;
 801baee:	7b7b      	ldrb	r3, [r7, #13]
 801baf0:	3307      	adds	r3, #7
 801baf2:	4a58      	ldr	r2, [pc, #352]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801baf4:	21ff      	movs	r1, #255	; 0xff
 801baf6:	54d1      	strb	r1, [r2, r3]
															uartDgusTxBuffer[2] = 3+stringlength+2;
 801baf8:	7b7b      	ldrb	r3, [r7, #13]
 801bafa:	3305      	adds	r3, #5
 801bafc:	b2da      	uxtb	r2, r3
 801bafe:	4b55      	ldr	r3, [pc, #340]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb00:	709a      	strb	r2, [r3, #2]
															SENDTEXT();
 801bb02:	4b54      	ldr	r3, [pc, #336]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb04:	789b      	ldrb	r3, [r3, #2]
 801bb06:	b29b      	uxth	r3, r3
 801bb08:	3303      	adds	r3, #3
 801bb0a:	b29a      	uxth	r2, r3
 801bb0c:	230a      	movs	r3, #10
 801bb0e:	4951      	ldr	r1, [pc, #324]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb10:	4853      	ldr	r0, [pc, #332]	; (801bc60 <DGUS_updateSelfTestText+0x52c>)
 801bb12:	f7fc f968 	bl	8017de6 <HAL_UART_Transmit>
 801bb16:	4603      	mov	r3, r0
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d001      	beq.n	801bb20 <DGUS_updateSelfTestText+0x3ec>
 801bb1c:	2302      	movs	r3, #2
 801bb1e:	e16e      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
															Appl_Display.SelfTestCounter--;
 801bb20:	4b4a      	ldr	r3, [pc, #296]	; (801bc4c <DGUS_updateSelfTestText+0x518>)
 801bb22:	691b      	ldr	r3, [r3, #16]
 801bb24:	3b01      	subs	r3, #1
 801bb26:	4a49      	ldr	r2, [pc, #292]	; (801bc4c <DGUS_updateSelfTestText+0x518>)
 801bb28:	6113      	str	r3, [r2, #16]
			if(Appl_Display.SelfTestCounter > (2000/loopms)){
 801bb2a:	e167      	b.n	801bdfc <DGUS_updateSelfTestText+0x6c8>
														}
													}

												}
												else{
													uartDgusTxBuffer[4] = 0x12;
 801bb2c:	4b49      	ldr	r3, [pc, #292]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb2e:	2212      	movs	r2, #18
 801bb30:	711a      	strb	r2, [r3, #4]
													uartDgusTxBuffer[5] = 0x10;
 801bb32:	4b48      	ldr	r3, [pc, #288]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb34:	2210      	movs	r2, #16
 801bb36:	715a      	strb	r2, [r3, #5]
													strcpy((char*)&uartDgusTxBuffer[6],"ERR");
 801bb38:	4b47      	ldr	r3, [pc, #284]	; (801bc58 <DGUS_updateSelfTestText+0x524>)
 801bb3a:	4a4a      	ldr	r2, [pc, #296]	; (801bc64 <DGUS_updateSelfTestText+0x530>)
 801bb3c:	6810      	ldr	r0, [r2, #0]
 801bb3e:	6018      	str	r0, [r3, #0]
													stringlength = 3;
 801bb40:	2303      	movs	r3, #3
 801bb42:	737b      	strb	r3, [r7, #13]
													uartDgusTxBuffer[stringlength+6] = 0xFF;
 801bb44:	7b7b      	ldrb	r3, [r7, #13]
 801bb46:	3306      	adds	r3, #6
 801bb48:	4a42      	ldr	r2, [pc, #264]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb4a:	21ff      	movs	r1, #255	; 0xff
 801bb4c:	54d1      	strb	r1, [r2, r3]
													uartDgusTxBuffer[stringlength+7] = 0xFF;
 801bb4e:	7b7b      	ldrb	r3, [r7, #13]
 801bb50:	3307      	adds	r3, #7
 801bb52:	4a40      	ldr	r2, [pc, #256]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb54:	21ff      	movs	r1, #255	; 0xff
 801bb56:	54d1      	strb	r1, [r2, r3]
													uartDgusTxBuffer[2] = 3+stringlength+2;
 801bb58:	7b7b      	ldrb	r3, [r7, #13]
 801bb5a:	3305      	adds	r3, #5
 801bb5c:	b2da      	uxtb	r2, r3
 801bb5e:	4b3d      	ldr	r3, [pc, #244]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb60:	709a      	strb	r2, [r3, #2]
													SENDTEXT();
 801bb62:	4b3c      	ldr	r3, [pc, #240]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb64:	789b      	ldrb	r3, [r3, #2]
 801bb66:	b29b      	uxth	r3, r3
 801bb68:	3303      	adds	r3, #3
 801bb6a:	b29a      	uxth	r2, r3
 801bb6c:	230a      	movs	r3, #10
 801bb6e:	4939      	ldr	r1, [pc, #228]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb70:	483b      	ldr	r0, [pc, #236]	; (801bc60 <DGUS_updateSelfTestText+0x52c>)
 801bb72:	f7fc f938 	bl	8017de6 <HAL_UART_Transmit>
 801bb76:	4603      	mov	r3, r0
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d001      	beq.n	801bb80 <DGUS_updateSelfTestText+0x44c>
 801bb7c:	2302      	movs	r3, #2
 801bb7e:	e13e      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
													Appl_Display.SelfTestCounter--;
 801bb80:	4b32      	ldr	r3, [pc, #200]	; (801bc4c <DGUS_updateSelfTestText+0x518>)
 801bb82:	691b      	ldr	r3, [r3, #16]
 801bb84:	3b01      	subs	r3, #1
 801bb86:	4a31      	ldr	r2, [pc, #196]	; (801bc4c <DGUS_updateSelfTestText+0x518>)
 801bb88:	6113      	str	r3, [r2, #16]
			if(Appl_Display.SelfTestCounter > (2000/loopms)){
 801bb8a:	e137      	b.n	801bdfc <DGUS_updateSelfTestText+0x6c8>
												}
											}
										}
										else{
											uartDgusTxBuffer[4] = 0x12;
 801bb8c:	4b31      	ldr	r3, [pc, #196]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb8e:	2212      	movs	r2, #18
 801bb90:	711a      	strb	r2, [r3, #4]
											uartDgusTxBuffer[5] = 0x00;
 801bb92:	4b30      	ldr	r3, [pc, #192]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bb94:	2200      	movs	r2, #0
 801bb96:	715a      	strb	r2, [r3, #5]
											strcpy((char*)&uartDgusTxBuffer[6],"ERR");
 801bb98:	4b2f      	ldr	r3, [pc, #188]	; (801bc58 <DGUS_updateSelfTestText+0x524>)
 801bb9a:	4a32      	ldr	r2, [pc, #200]	; (801bc64 <DGUS_updateSelfTestText+0x530>)
 801bb9c:	6810      	ldr	r0, [r2, #0]
 801bb9e:	6018      	str	r0, [r3, #0]
											stringlength = 3;
 801bba0:	2303      	movs	r3, #3
 801bba2:	737b      	strb	r3, [r7, #13]
											uartDgusTxBuffer[stringlength+6] = 0xFF;
 801bba4:	7b7b      	ldrb	r3, [r7, #13]
 801bba6:	3306      	adds	r3, #6
 801bba8:	4a2a      	ldr	r2, [pc, #168]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bbaa:	21ff      	movs	r1, #255	; 0xff
 801bbac:	54d1      	strb	r1, [r2, r3]
											uartDgusTxBuffer[stringlength+7] = 0xFF;
 801bbae:	7b7b      	ldrb	r3, [r7, #13]
 801bbb0:	3307      	adds	r3, #7
 801bbb2:	4a28      	ldr	r2, [pc, #160]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bbb4:	21ff      	movs	r1, #255	; 0xff
 801bbb6:	54d1      	strb	r1, [r2, r3]
											uartDgusTxBuffer[2] = 3+stringlength+2;
 801bbb8:	7b7b      	ldrb	r3, [r7, #13]
 801bbba:	3305      	adds	r3, #5
 801bbbc:	b2da      	uxtb	r2, r3
 801bbbe:	4b25      	ldr	r3, [pc, #148]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bbc0:	709a      	strb	r2, [r3, #2]
											SENDTEXT();
 801bbc2:	4b24      	ldr	r3, [pc, #144]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bbc4:	789b      	ldrb	r3, [r3, #2]
 801bbc6:	b29b      	uxth	r3, r3
 801bbc8:	3303      	adds	r3, #3
 801bbca:	b29a      	uxth	r2, r3
 801bbcc:	230a      	movs	r3, #10
 801bbce:	4921      	ldr	r1, [pc, #132]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bbd0:	4823      	ldr	r0, [pc, #140]	; (801bc60 <DGUS_updateSelfTestText+0x52c>)
 801bbd2:	f7fc f908 	bl	8017de6 <HAL_UART_Transmit>
 801bbd6:	4603      	mov	r3, r0
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d001      	beq.n	801bbe0 <DGUS_updateSelfTestText+0x4ac>
 801bbdc:	2302      	movs	r3, #2
 801bbde:	e10e      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
											Appl_Display.SelfTestCounter--;
 801bbe0:	4b1a      	ldr	r3, [pc, #104]	; (801bc4c <DGUS_updateSelfTestText+0x518>)
 801bbe2:	691b      	ldr	r3, [r3, #16]
 801bbe4:	3b01      	subs	r3, #1
 801bbe6:	4a19      	ldr	r2, [pc, #100]	; (801bc4c <DGUS_updateSelfTestText+0x518>)
 801bbe8:	6113      	str	r3, [r2, #16]
			if(Appl_Display.SelfTestCounter > (2000/loopms)){
 801bbea:	e107      	b.n	801bdfc <DGUS_updateSelfTestText+0x6c8>
										}
									}

								}
								else{
									uartDgusTxBuffer[4] = 0x11;
 801bbec:	4b19      	ldr	r3, [pc, #100]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bbee:	2211      	movs	r2, #17
 801bbf0:	711a      	strb	r2, [r3, #4]
									uartDgusTxBuffer[5] = 0xF0;
 801bbf2:	4b18      	ldr	r3, [pc, #96]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bbf4:	22f0      	movs	r2, #240	; 0xf0
 801bbf6:	715a      	strb	r2, [r3, #5]
									strcpy((char*)&uartDgusTxBuffer[6],"ERR");
 801bbf8:	4b17      	ldr	r3, [pc, #92]	; (801bc58 <DGUS_updateSelfTestText+0x524>)
 801bbfa:	4a1a      	ldr	r2, [pc, #104]	; (801bc64 <DGUS_updateSelfTestText+0x530>)
 801bbfc:	6810      	ldr	r0, [r2, #0]
 801bbfe:	6018      	str	r0, [r3, #0]
									stringlength = 3;
 801bc00:	2303      	movs	r3, #3
 801bc02:	737b      	strb	r3, [r7, #13]
									uartDgusTxBuffer[stringlength+6] = 0xFF;
 801bc04:	7b7b      	ldrb	r3, [r7, #13]
 801bc06:	3306      	adds	r3, #6
 801bc08:	4a12      	ldr	r2, [pc, #72]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bc0a:	21ff      	movs	r1, #255	; 0xff
 801bc0c:	54d1      	strb	r1, [r2, r3]
									uartDgusTxBuffer[stringlength+7] = 0xFF;
 801bc0e:	7b7b      	ldrb	r3, [r7, #13]
 801bc10:	3307      	adds	r3, #7
 801bc12:	4a10      	ldr	r2, [pc, #64]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bc14:	21ff      	movs	r1, #255	; 0xff
 801bc16:	54d1      	strb	r1, [r2, r3]
									uartDgusTxBuffer[2] = 3+stringlength+2;
 801bc18:	7b7b      	ldrb	r3, [r7, #13]
 801bc1a:	3305      	adds	r3, #5
 801bc1c:	b2da      	uxtb	r2, r3
 801bc1e:	4b0d      	ldr	r3, [pc, #52]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bc20:	709a      	strb	r2, [r3, #2]
									SENDTEXT();
 801bc22:	4b0c      	ldr	r3, [pc, #48]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bc24:	789b      	ldrb	r3, [r3, #2]
 801bc26:	b29b      	uxth	r3, r3
 801bc28:	3303      	adds	r3, #3
 801bc2a:	b29a      	uxth	r2, r3
 801bc2c:	230a      	movs	r3, #10
 801bc2e:	4909      	ldr	r1, [pc, #36]	; (801bc54 <DGUS_updateSelfTestText+0x520>)
 801bc30:	480b      	ldr	r0, [pc, #44]	; (801bc60 <DGUS_updateSelfTestText+0x52c>)
 801bc32:	f7fc f8d8 	bl	8017de6 <HAL_UART_Transmit>
 801bc36:	4603      	mov	r3, r0
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d001      	beq.n	801bc40 <DGUS_updateSelfTestText+0x50c>
 801bc3c:	2302      	movs	r3, #2
 801bc3e:	e0de      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
									Appl_Display.SelfTestCounter--;
 801bc40:	4b02      	ldr	r3, [pc, #8]	; (801bc4c <DGUS_updateSelfTestText+0x518>)
 801bc42:	691b      	ldr	r3, [r3, #16]
 801bc44:	3b01      	subs	r3, #1
 801bc46:	4a01      	ldr	r2, [pc, #4]	; (801bc4c <DGUS_updateSelfTestText+0x518>)
 801bc48:	6113      	str	r3, [r2, #16]
			if(Appl_Display.SelfTestCounter > (2000/loopms)){
 801bc4a:	e0d7      	b.n	801bdfc <DGUS_updateSelfTestText+0x6c8>
 801bc4c:	20004f08 	.word	0x20004f08
 801bc50:	20004d0c 	.word	0x20004d0c
 801bc54:	20004d64 	.word	0x20004d64
 801bc58:	20004d6a 	.word	0x20004d6a
 801bc5c:	08027024 	.word	0x08027024
 801bc60:	20004964 	.word	0x20004964
 801bc64:	08027028 	.word	0x08027028
								}
							}

						}
						else{
							uartDgusTxBuffer[4] = 0x11;
 801bc68:	4b67      	ldr	r3, [pc, #412]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bc6a:	2211      	movs	r2, #17
 801bc6c:	711a      	strb	r2, [r3, #4]
							uartDgusTxBuffer[5] = 0xE0;
 801bc6e:	4b66      	ldr	r3, [pc, #408]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bc70:	22e0      	movs	r2, #224	; 0xe0
 801bc72:	715a      	strb	r2, [r3, #5]
							strcpy((char*)&uartDgusTxBuffer[6],"ERR");
 801bc74:	4b65      	ldr	r3, [pc, #404]	; (801be0c <DGUS_updateSelfTestText+0x6d8>)
 801bc76:	4a66      	ldr	r2, [pc, #408]	; (801be10 <DGUS_updateSelfTestText+0x6dc>)
 801bc78:	6810      	ldr	r0, [r2, #0]
 801bc7a:	6018      	str	r0, [r3, #0]
							stringlength = 3;
 801bc7c:	2303      	movs	r3, #3
 801bc7e:	737b      	strb	r3, [r7, #13]
							uartDgusTxBuffer[stringlength+6] = 0xFF;
 801bc80:	7b7b      	ldrb	r3, [r7, #13]
 801bc82:	3306      	adds	r3, #6
 801bc84:	4a60      	ldr	r2, [pc, #384]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bc86:	21ff      	movs	r1, #255	; 0xff
 801bc88:	54d1      	strb	r1, [r2, r3]
							uartDgusTxBuffer[stringlength+7] = 0xFF;
 801bc8a:	7b7b      	ldrb	r3, [r7, #13]
 801bc8c:	3307      	adds	r3, #7
 801bc8e:	4a5e      	ldr	r2, [pc, #376]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bc90:	21ff      	movs	r1, #255	; 0xff
 801bc92:	54d1      	strb	r1, [r2, r3]
							uartDgusTxBuffer[2] = 3+stringlength+2;
 801bc94:	7b7b      	ldrb	r3, [r7, #13]
 801bc96:	3305      	adds	r3, #5
 801bc98:	b2da      	uxtb	r2, r3
 801bc9a:	4b5b      	ldr	r3, [pc, #364]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bc9c:	709a      	strb	r2, [r3, #2]
							SENDTEXT();
 801bc9e:	4b5a      	ldr	r3, [pc, #360]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bca0:	789b      	ldrb	r3, [r3, #2]
 801bca2:	b29b      	uxth	r3, r3
 801bca4:	3303      	adds	r3, #3
 801bca6:	b29a      	uxth	r2, r3
 801bca8:	230a      	movs	r3, #10
 801bcaa:	4957      	ldr	r1, [pc, #348]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bcac:	4859      	ldr	r0, [pc, #356]	; (801be14 <DGUS_updateSelfTestText+0x6e0>)
 801bcae:	f7fc f89a 	bl	8017de6 <HAL_UART_Transmit>
 801bcb2:	4603      	mov	r3, r0
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d001      	beq.n	801bcbc <DGUS_updateSelfTestText+0x588>
 801bcb8:	2302      	movs	r3, #2
 801bcba:	e0a0      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
							Appl_Display.SelfTestCounter--;
 801bcbc:	4b56      	ldr	r3, [pc, #344]	; (801be18 <DGUS_updateSelfTestText+0x6e4>)
 801bcbe:	691b      	ldr	r3, [r3, #16]
 801bcc0:	3b01      	subs	r3, #1
 801bcc2:	4a55      	ldr	r2, [pc, #340]	; (801be18 <DGUS_updateSelfTestText+0x6e4>)
 801bcc4:	6113      	str	r3, [r2, #16]
			if(Appl_Display.SelfTestCounter > (2000/loopms)){
 801bcc6:	e099      	b.n	801bdfc <DGUS_updateSelfTestText+0x6c8>
						}
					}
				}
				else{
					uartDgusTxBuffer[4] = 0x11;
 801bcc8:	4b4f      	ldr	r3, [pc, #316]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bcca:	2211      	movs	r2, #17
 801bccc:	711a      	strb	r2, [r3, #4]
					uartDgusTxBuffer[5] = 0xD0;
 801bcce:	4b4e      	ldr	r3, [pc, #312]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bcd0:	22d0      	movs	r2, #208	; 0xd0
 801bcd2:	715a      	strb	r2, [r3, #5]
					strcpy((char*)&uartDgusTxBuffer[6],"ERR");
 801bcd4:	4b4d      	ldr	r3, [pc, #308]	; (801be0c <DGUS_updateSelfTestText+0x6d8>)
 801bcd6:	4a4e      	ldr	r2, [pc, #312]	; (801be10 <DGUS_updateSelfTestText+0x6dc>)
 801bcd8:	6810      	ldr	r0, [r2, #0]
 801bcda:	6018      	str	r0, [r3, #0]
					stringlength = 3;
 801bcdc:	2303      	movs	r3, #3
 801bcde:	737b      	strb	r3, [r7, #13]
					uartDgusTxBuffer[stringlength+6] = 0xFF;
 801bce0:	7b7b      	ldrb	r3, [r7, #13]
 801bce2:	3306      	adds	r3, #6
 801bce4:	4a48      	ldr	r2, [pc, #288]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bce6:	21ff      	movs	r1, #255	; 0xff
 801bce8:	54d1      	strb	r1, [r2, r3]
					uartDgusTxBuffer[stringlength+7] = 0xFF;
 801bcea:	7b7b      	ldrb	r3, [r7, #13]
 801bcec:	3307      	adds	r3, #7
 801bcee:	4a46      	ldr	r2, [pc, #280]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bcf0:	21ff      	movs	r1, #255	; 0xff
 801bcf2:	54d1      	strb	r1, [r2, r3]
					uartDgusTxBuffer[2] = 3+stringlength+2;
 801bcf4:	7b7b      	ldrb	r3, [r7, #13]
 801bcf6:	3305      	adds	r3, #5
 801bcf8:	b2da      	uxtb	r2, r3
 801bcfa:	4b43      	ldr	r3, [pc, #268]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bcfc:	709a      	strb	r2, [r3, #2]
					SENDTEXT();
 801bcfe:	4b42      	ldr	r3, [pc, #264]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bd00:	789b      	ldrb	r3, [r3, #2]
 801bd02:	b29b      	uxth	r3, r3
 801bd04:	3303      	adds	r3, #3
 801bd06:	b29a      	uxth	r2, r3
 801bd08:	230a      	movs	r3, #10
 801bd0a:	493f      	ldr	r1, [pc, #252]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bd0c:	4841      	ldr	r0, [pc, #260]	; (801be14 <DGUS_updateSelfTestText+0x6e0>)
 801bd0e:	f7fc f86a 	bl	8017de6 <HAL_UART_Transmit>
 801bd12:	4603      	mov	r3, r0
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d001      	beq.n	801bd1c <DGUS_updateSelfTestText+0x5e8>
 801bd18:	2302      	movs	r3, #2
 801bd1a:	e070      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
					Appl_Display.SelfTestCounter--;
 801bd1c:	4b3e      	ldr	r3, [pc, #248]	; (801be18 <DGUS_updateSelfTestText+0x6e4>)
 801bd1e:	691b      	ldr	r3, [r3, #16]
 801bd20:	3b01      	subs	r3, #1
 801bd22:	4a3d      	ldr	r2, [pc, #244]	; (801be18 <DGUS_updateSelfTestText+0x6e4>)
 801bd24:	6113      	str	r3, [r2, #16]
			if(Appl_Display.SelfTestCounter > (2000/loopms)){
 801bd26:	e069      	b.n	801bdfc <DGUS_updateSelfTestText+0x6c8>
				}
			}

		}
		else{
			uartDgusTxBuffer[4] = 0x11;
 801bd28:	4b37      	ldr	r3, [pc, #220]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bd2a:	2211      	movs	r2, #17
 801bd2c:	711a      	strb	r2, [r3, #4]
			uartDgusTxBuffer[5] = 0xC0;
 801bd2e:	4b36      	ldr	r3, [pc, #216]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bd30:	22c0      	movs	r2, #192	; 0xc0
 801bd32:	715a      	strb	r2, [r3, #5]
			strcpy((char*)&uartDgusTxBuffer[6],"ERR");
 801bd34:	4b35      	ldr	r3, [pc, #212]	; (801be0c <DGUS_updateSelfTestText+0x6d8>)
 801bd36:	4a36      	ldr	r2, [pc, #216]	; (801be10 <DGUS_updateSelfTestText+0x6dc>)
 801bd38:	6810      	ldr	r0, [r2, #0]
 801bd3a:	6018      	str	r0, [r3, #0]
			stringlength = 3;
 801bd3c:	2303      	movs	r3, #3
 801bd3e:	737b      	strb	r3, [r7, #13]
			uartDgusTxBuffer[stringlength+6] = 0xFF;
 801bd40:	7b7b      	ldrb	r3, [r7, #13]
 801bd42:	3306      	adds	r3, #6
 801bd44:	4a30      	ldr	r2, [pc, #192]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bd46:	21ff      	movs	r1, #255	; 0xff
 801bd48:	54d1      	strb	r1, [r2, r3]
			uartDgusTxBuffer[stringlength+7] = 0xFF;
 801bd4a:	7b7b      	ldrb	r3, [r7, #13]
 801bd4c:	3307      	adds	r3, #7
 801bd4e:	4a2e      	ldr	r2, [pc, #184]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bd50:	21ff      	movs	r1, #255	; 0xff
 801bd52:	54d1      	strb	r1, [r2, r3]
			uartDgusTxBuffer[2] = 3+stringlength+2;
 801bd54:	7b7b      	ldrb	r3, [r7, #13]
 801bd56:	3305      	adds	r3, #5
 801bd58:	b2da      	uxtb	r2, r3
 801bd5a:	4b2b      	ldr	r3, [pc, #172]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bd5c:	709a      	strb	r2, [r3, #2]
			SENDTEXT();
 801bd5e:	4b2a      	ldr	r3, [pc, #168]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bd60:	789b      	ldrb	r3, [r3, #2]
 801bd62:	b29b      	uxth	r3, r3
 801bd64:	3303      	adds	r3, #3
 801bd66:	b29a      	uxth	r2, r3
 801bd68:	230a      	movs	r3, #10
 801bd6a:	4927      	ldr	r1, [pc, #156]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bd6c:	4829      	ldr	r0, [pc, #164]	; (801be14 <DGUS_updateSelfTestText+0x6e0>)
 801bd6e:	f7fc f83a 	bl	8017de6 <HAL_UART_Transmit>
 801bd72:	4603      	mov	r3, r0
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d001      	beq.n	801bd7c <DGUS_updateSelfTestText+0x648>
 801bd78:	2302      	movs	r3, #2
 801bd7a:	e040      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
			Appl_Display.SelfTestCounter--;
 801bd7c:	4b26      	ldr	r3, [pc, #152]	; (801be18 <DGUS_updateSelfTestText+0x6e4>)
 801bd7e:	691b      	ldr	r3, [r3, #16]
 801bd80:	3b01      	subs	r3, #1
 801bd82:	4a25      	ldr	r2, [pc, #148]	; (801be18 <DGUS_updateSelfTestText+0x6e4>)
 801bd84:	6113      	str	r3, [r2, #16]
 801bd86:	e03a      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
		}
	}
	else{
		for(uint16_t i = 0x11C0;i<=0x1220;i+=0x10){
 801bd88:	f44f 538e 	mov.w	r3, #4544	; 0x11c0
 801bd8c:	81fb      	strh	r3, [r7, #14]
 801bd8e:	e030      	b.n	801bdf2 <DGUS_updateSelfTestText+0x6be>
			uartDgusTxBuffer[4] = (i>>8);
 801bd90:	89fb      	ldrh	r3, [r7, #14]
 801bd92:	0a1b      	lsrs	r3, r3, #8
 801bd94:	b29b      	uxth	r3, r3
 801bd96:	b2da      	uxtb	r2, r3
 801bd98:	4b1b      	ldr	r3, [pc, #108]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bd9a:	711a      	strb	r2, [r3, #4]
			uartDgusTxBuffer[5] = (i&(0x00FF));
 801bd9c:	89fb      	ldrh	r3, [r7, #14]
 801bd9e:	b2da      	uxtb	r2, r3
 801bda0:	4b19      	ldr	r3, [pc, #100]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bda2:	715a      	strb	r2, [r3, #5]
			strcpy((char*)&uartDgusTxBuffer[6],"...");
 801bda4:	4b19      	ldr	r3, [pc, #100]	; (801be0c <DGUS_updateSelfTestText+0x6d8>)
 801bda6:	4a1d      	ldr	r2, [pc, #116]	; (801be1c <DGUS_updateSelfTestText+0x6e8>)
 801bda8:	6810      	ldr	r0, [r2, #0]
 801bdaa:	6018      	str	r0, [r3, #0]
			stringlength = 3;
 801bdac:	2303      	movs	r3, #3
 801bdae:	737b      	strb	r3, [r7, #13]
			uartDgusTxBuffer[stringlength+6] = 0xFF;
 801bdb0:	7b7b      	ldrb	r3, [r7, #13]
 801bdb2:	3306      	adds	r3, #6
 801bdb4:	4a14      	ldr	r2, [pc, #80]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bdb6:	21ff      	movs	r1, #255	; 0xff
 801bdb8:	54d1      	strb	r1, [r2, r3]
			uartDgusTxBuffer[stringlength+7] = 0xFF;
 801bdba:	7b7b      	ldrb	r3, [r7, #13]
 801bdbc:	3307      	adds	r3, #7
 801bdbe:	4a12      	ldr	r2, [pc, #72]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bdc0:	21ff      	movs	r1, #255	; 0xff
 801bdc2:	54d1      	strb	r1, [r2, r3]
			uartDgusTxBuffer[2] = 3+stringlength+2;
 801bdc4:	7b7b      	ldrb	r3, [r7, #13]
 801bdc6:	3305      	adds	r3, #5
 801bdc8:	b2da      	uxtb	r2, r3
 801bdca:	4b0f      	ldr	r3, [pc, #60]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bdcc:	709a      	strb	r2, [r3, #2]
			SENDTEXT();
 801bdce:	4b0e      	ldr	r3, [pc, #56]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bdd0:	789b      	ldrb	r3, [r3, #2]
 801bdd2:	b29b      	uxth	r3, r3
 801bdd4:	3303      	adds	r3, #3
 801bdd6:	b29a      	uxth	r2, r3
 801bdd8:	230a      	movs	r3, #10
 801bdda:	490b      	ldr	r1, [pc, #44]	; (801be08 <DGUS_updateSelfTestText+0x6d4>)
 801bddc:	480d      	ldr	r0, [pc, #52]	; (801be14 <DGUS_updateSelfTestText+0x6e0>)
 801bdde:	f7fc f802 	bl	8017de6 <HAL_UART_Transmit>
 801bde2:	4603      	mov	r3, r0
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d001      	beq.n	801bdec <DGUS_updateSelfTestText+0x6b8>
 801bde8:	2302      	movs	r3, #2
 801bdea:	e008      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
		for(uint16_t i = 0x11C0;i<=0x1220;i+=0x10){
 801bdec:	89fb      	ldrh	r3, [r7, #14]
 801bdee:	3310      	adds	r3, #16
 801bdf0:	81fb      	strh	r3, [r7, #14]
 801bdf2:	89fb      	ldrh	r3, [r7, #14]
 801bdf4:	f5b3 5f91 	cmp.w	r3, #4640	; 0x1220
 801bdf8:	d9ca      	bls.n	801bd90 <DGUS_updateSelfTestText+0x65c>
 801bdfa:	e000      	b.n	801bdfe <DGUS_updateSelfTestText+0x6ca>
			if(Appl_Display.SelfTestCounter > (2000/loopms)){
 801bdfc:	bf00      	nop
		}

	}
}
 801bdfe:	4618      	mov	r0, r3
 801be00:	3710      	adds	r7, #16
 801be02:	46bd      	mov	sp, r7
 801be04:	bd80      	pop	{r7, pc}
 801be06:	bf00      	nop
 801be08:	20004d64 	.word	0x20004d64
 801be0c:	20004d6a 	.word	0x20004d6a
 801be10:	08027028 	.word	0x08027028
 801be14:	20004964 	.word	0x20004964
 801be18:	20004f08 	.word	0x20004f08
 801be1c:	0802702c 	.word	0x0802702c

0801be20 <DGUS_updateMessages>:

DGUS_ERROR DGUS_updateMessages(void){
 801be20:	b480      	push	{r7}
 801be22:	af00      	add	r7, sp, #0
	}
	else{
		return DGUS_OK;
	}
#endif
}
 801be24:	bf00      	nop
 801be26:	4618      	mov	r0, r3
 801be28:	46bd      	mov	sp, r7
 801be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be2e:	4770      	bx	lr

0801be30 <UpdateReadVariables>:

DGUS_ERROR UpdateReadVariables(void){
 801be30:	b580      	push	{r7, lr}
 801be32:	b082      	sub	sp, #8
 801be34:	af00      	add	r7, sp, #0
	uint8_t numofvariablestoread = 0;
 801be36:	2300      	movs	r3, #0
 801be38:	71fb      	strb	r3, [r7, #7]

	/*0x1000 to 0x100E*/
	numofvariablestoread = 15;
 801be3a:	230f      	movs	r3, #15
 801be3c:	71fb      	strb	r3, [r7, #7]

	memset(&uartDgusTxBuffer[0],0,sizeof(uartDgusTxBuffer));
 801be3e:	2240      	movs	r2, #64	; 0x40
 801be40:	2100      	movs	r1, #0
 801be42:	4844      	ldr	r0, [pc, #272]	; (801bf54 <UpdateReadVariables+0x124>)
 801be44:	f008 f998 	bl	8024178 <memset>
	memset(&uartDgusRxBuffer[0],0,sizeof(uartDgusRxBuffer));
 801be48:	2240      	movs	r2, #64	; 0x40
 801be4a:	2100      	movs	r1, #0
 801be4c:	4842      	ldr	r0, [pc, #264]	; (801bf58 <UpdateReadVariables+0x128>)
 801be4e:	f008 f993 	bl	8024178 <memset>

	memcpy(&uartDgusTxBuffer[0], &uartCommandList[1][0],DGUS_TRANSFER_BUFFER_SIZE);
 801be52:	2240      	movs	r2, #64	; 0x40
 801be54:	4941      	ldr	r1, [pc, #260]	; (801bf5c <UpdateReadVariables+0x12c>)
 801be56:	483f      	ldr	r0, [pc, #252]	; (801bf54 <UpdateReadVariables+0x124>)
 801be58:	f008 f980 	bl	802415c <memcpy>

	uartDgusTxBuffer[6] = numofvariablestoread;
 801be5c:	4a3d      	ldr	r2, [pc, #244]	; (801bf54 <UpdateReadVariables+0x124>)
 801be5e:	79fb      	ldrb	r3, [r7, #7]
 801be60:	7193      	strb	r3, [r2, #6]

	if(HAL_OK != HAL_UART_Transmit(&huart3, &uartDgusTxBuffer[0], 7, 10)){
 801be62:	230a      	movs	r3, #10
 801be64:	2207      	movs	r2, #7
 801be66:	493b      	ldr	r1, [pc, #236]	; (801bf54 <UpdateReadVariables+0x124>)
 801be68:	483d      	ldr	r0, [pc, #244]	; (801bf60 <UpdateReadVariables+0x130>)
 801be6a:	f7fb ffbc 	bl	8017de6 <HAL_UART_Transmit>
 801be6e:	4603      	mov	r3, r0
 801be70:	2b00      	cmp	r3, #0
 801be72:	d001      	beq.n	801be78 <UpdateReadVariables+0x48>
		return DGUS_ERR;
 801be74:	2302      	movs	r3, #2
 801be76:	e068      	b.n	801bf4a <UpdateReadVariables+0x11a>
	}
	else{
		//
		if(HAL_OK != HAL_UART_Receive(&huart3, &uartDgusRxBuffer[0], ((numofvariablestoread*2)+7), 20)){
 801be78:	79fb      	ldrb	r3, [r7, #7]
 801be7a:	b29b      	uxth	r3, r3
 801be7c:	005b      	lsls	r3, r3, #1
 801be7e:	b29b      	uxth	r3, r3
 801be80:	3307      	adds	r3, #7
 801be82:	b29a      	uxth	r2, r3
 801be84:	2314      	movs	r3, #20
 801be86:	4934      	ldr	r1, [pc, #208]	; (801bf58 <UpdateReadVariables+0x128>)
 801be88:	4835      	ldr	r0, [pc, #212]	; (801bf60 <UpdateReadVariables+0x130>)
 801be8a:	f7fc f83e 	bl	8017f0a <HAL_UART_Receive>
 801be8e:	4603      	mov	r3, r0
 801be90:	2b00      	cmp	r3, #0
 801be92:	d001      	beq.n	801be98 <UpdateReadVariables+0x68>
			return DGUS_ERR;
 801be94:	2302      	movs	r3, #2
 801be96:	e058      	b.n	801bf4a <UpdateReadVariables+0x11a>
		}
		else{
			Display.DGUSParam.CustomerID = (uint16_t)((uartDgusRxBuffer[7]<<8)| uartDgusRxBuffer[8]);/*1000*/
 801be98:	4b2f      	ldr	r3, [pc, #188]	; (801bf58 <UpdateReadVariables+0x128>)
 801be9a:	79db      	ldrb	r3, [r3, #7]
 801be9c:	021b      	lsls	r3, r3, #8
 801be9e:	b21a      	sxth	r2, r3
 801bea0:	4b2d      	ldr	r3, [pc, #180]	; (801bf58 <UpdateReadVariables+0x128>)
 801bea2:	7a1b      	ldrb	r3, [r3, #8]
 801bea4:	b21b      	sxth	r3, r3
 801bea6:	4313      	orrs	r3, r2
 801bea8:	b21b      	sxth	r3, r3
 801beaa:	b29a      	uxth	r2, r3
 801beac:	4b2d      	ldr	r3, [pc, #180]	; (801bf64 <UpdateReadVariables+0x134>)
 801beae:	809a      	strh	r2, [r3, #4]
			Display.DGUSParam.unused1 = (uint16_t)((uartDgusRxBuffer[9]<<8)| uartDgusRxBuffer[10]);/*1001*/
 801beb0:	4b29      	ldr	r3, [pc, #164]	; (801bf58 <UpdateReadVariables+0x128>)
 801beb2:	7a5b      	ldrb	r3, [r3, #9]
 801beb4:	021b      	lsls	r3, r3, #8
 801beb6:	b21a      	sxth	r2, r3
 801beb8:	4b27      	ldr	r3, [pc, #156]	; (801bf58 <UpdateReadVariables+0x128>)
 801beba:	7a9b      	ldrb	r3, [r3, #10]
 801bebc:	b21b      	sxth	r3, r3
 801bebe:	4313      	orrs	r3, r2
 801bec0:	b21b      	sxth	r3, r3
 801bec2:	b29a      	uxth	r2, r3
 801bec4:	4b27      	ldr	r3, [pc, #156]	; (801bf64 <UpdateReadVariables+0x134>)
 801bec6:	80da      	strh	r2, [r3, #6]
			Display.DGUSParam.cutOffVoltage = (uint16_t)((uartDgusRxBuffer[11]<<8)| uartDgusRxBuffer[12]);/*1002*/
 801bec8:	4b23      	ldr	r3, [pc, #140]	; (801bf58 <UpdateReadVariables+0x128>)
 801beca:	7adb      	ldrb	r3, [r3, #11]
 801becc:	021b      	lsls	r3, r3, #8
 801bece:	b21a      	sxth	r2, r3
 801bed0:	4b21      	ldr	r3, [pc, #132]	; (801bf58 <UpdateReadVariables+0x128>)
 801bed2:	7b1b      	ldrb	r3, [r3, #12]
 801bed4:	b21b      	sxth	r3, r3
 801bed6:	4313      	orrs	r3, r2
 801bed8:	b21b      	sxth	r3, r3
 801beda:	b29a      	uxth	r2, r3
 801bedc:	4b21      	ldr	r3, [pc, #132]	; (801bf64 <UpdateReadVariables+0x134>)
 801bede:	811a      	strh	r2, [r3, #8]
			Display.DGUSParam.setCurrent = (uint16_t)((uartDgusRxBuffer[13]<<8)| uartDgusRxBuffer[14]);/*1003*/
 801bee0:	4b1d      	ldr	r3, [pc, #116]	; (801bf58 <UpdateReadVariables+0x128>)
 801bee2:	7b5b      	ldrb	r3, [r3, #13]
 801bee4:	021b      	lsls	r3, r3, #8
 801bee6:	b21a      	sxth	r2, r3
 801bee8:	4b1b      	ldr	r3, [pc, #108]	; (801bf58 <UpdateReadVariables+0x128>)
 801beea:	7b9b      	ldrb	r3, [r3, #14]
 801beec:	b21b      	sxth	r3, r3
 801beee:	4313      	orrs	r3, r2
 801bef0:	b21b      	sxth	r3, r3
 801bef2:	b29a      	uxth	r2, r3
 801bef4:	4b1b      	ldr	r3, [pc, #108]	; (801bf64 <UpdateReadVariables+0x134>)
 801bef6:	819a      	strh	r2, [r3, #12]
			Display.DGUSParam.setTimerHour = (uint16_t)((uartDgusRxBuffer[15]<<8)| uartDgusRxBuffer[16]);/*1004*/
 801bef8:	4b17      	ldr	r3, [pc, #92]	; (801bf58 <UpdateReadVariables+0x128>)
 801befa:	7bdb      	ldrb	r3, [r3, #15]
 801befc:	021b      	lsls	r3, r3, #8
 801befe:	b21a      	sxth	r2, r3
 801bf00:	4b15      	ldr	r3, [pc, #84]	; (801bf58 <UpdateReadVariables+0x128>)
 801bf02:	7c1b      	ldrb	r3, [r3, #16]
 801bf04:	b21b      	sxth	r3, r3
 801bf06:	4313      	orrs	r3, r2
 801bf08:	b21b      	sxth	r3, r3
 801bf0a:	b29a      	uxth	r2, r3
 801bf0c:	4b15      	ldr	r3, [pc, #84]	; (801bf64 <UpdateReadVariables+0x134>)
 801bf0e:	81da      	strh	r2, [r3, #14]
//			Display.DGUSParam.setTimerHour = (uint16_t)((uartDgusRxBuffer[23]<<8)| uartDgusRxBuffer[24]);/*1008*/
//			Display.DGUSParam.setTimerHour = (uint16_t)((uartDgusRxBuffer[25]<<8)| uartDgusRxBuffer[26]);/*1009*/
//			Display.DGUSParam.setTimerHour = (uint16_t)((uartDgusRxBuffer[27]<<8)| uartDgusRxBuffer[28]);/*100A*/
//			Display.DGUSParam.setTimerHour = (uint16_t)((uartDgusRxBuffer[29]<<8)| uartDgusRxBuffer[30]);/*100B*/
//			Display.DGUSParam.setTimerHour = (uint16_t)((uartDgusRxBuffer[31]<<8)| uartDgusRxBuffer[32]);/*100C*/
			Display.DGUSParam.setVoltage = (uint16_t)((uartDgusRxBuffer[33]<<8)| uartDgusRxBuffer[34]);/*100D*/
 801bf10:	4b11      	ldr	r3, [pc, #68]	; (801bf58 <UpdateReadVariables+0x128>)
 801bf12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bf16:	021b      	lsls	r3, r3, #8
 801bf18:	b21a      	sxth	r2, r3
 801bf1a:	4b0f      	ldr	r3, [pc, #60]	; (801bf58 <UpdateReadVariables+0x128>)
 801bf1c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801bf20:	b21b      	sxth	r3, r3
 801bf22:	4313      	orrs	r3, r2
 801bf24:	b21b      	sxth	r3, r3
 801bf26:	b29a      	uxth	r2, r3
 801bf28:	4b0e      	ldr	r3, [pc, #56]	; (801bf64 <UpdateReadVariables+0x134>)
 801bf2a:	831a      	strh	r2, [r3, #24]
			Display.DGUSParam.cutOffCurrent = (uint16_t)((uartDgusRxBuffer[35]<<8)| uartDgusRxBuffer[36]);/*100E*/
 801bf2c:	4b0a      	ldr	r3, [pc, #40]	; (801bf58 <UpdateReadVariables+0x128>)
 801bf2e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801bf32:	021b      	lsls	r3, r3, #8
 801bf34:	b21a      	sxth	r2, r3
 801bf36:	4b08      	ldr	r3, [pc, #32]	; (801bf58 <UpdateReadVariables+0x128>)
 801bf38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bf3c:	b21b      	sxth	r3, r3
 801bf3e:	4313      	orrs	r3, r2
 801bf40:	b21b      	sxth	r3, r3
 801bf42:	b29a      	uxth	r2, r3
 801bf44:	4b07      	ldr	r3, [pc, #28]	; (801bf64 <UpdateReadVariables+0x134>)
 801bf46:	815a      	strh	r2, [r3, #10]
			return DGUS_OK;
 801bf48:	2300      	movs	r3, #0
		}
	}
}
 801bf4a:	4618      	mov	r0, r3
 801bf4c:	3708      	adds	r7, #8
 801bf4e:	46bd      	mov	sp, r7
 801bf50:	bd80      	pop	{r7, pc}
 801bf52:	bf00      	nop
 801bf54:	20004d64 	.word	0x20004d64
 801bf58:	20004da4 	.word	0x20004da4
 801bf5c:	200000b4 	.word	0x200000b4
 801bf60:	20004964 	.word	0x20004964
 801bf64:	20004f6c 	.word	0x20004f6c

0801bf68 <DGUS_Reset>:

DGUS_ERROR DGUS_Reset(void){
 801bf68:	b580      	push	{r7, lr}
 801bf6a:	af00      	add	r7, sp, #0
	memset(&uartDgusTxBuffer[0],0,sizeof(uartDgusTxBuffer));
 801bf6c:	2240      	movs	r2, #64	; 0x40
 801bf6e:	2100      	movs	r1, #0
 801bf70:	480d      	ldr	r0, [pc, #52]	; (801bfa8 <DGUS_Reset+0x40>)
 801bf72:	f008 f901 	bl	8024178 <memset>
	memset(&uartDgusRxBuffer[0],0,sizeof(uartDgusRxBuffer));
 801bf76:	2240      	movs	r2, #64	; 0x40
 801bf78:	2100      	movs	r1, #0
 801bf7a:	480c      	ldr	r0, [pc, #48]	; (801bfac <DGUS_Reset+0x44>)
 801bf7c:	f008 f8fc 	bl	8024178 <memset>
	memcpy(&uartDgusTxBuffer[0], &uartCommandList[3][0],DGUS_TRANSFER_BUFFER_SIZE);
 801bf80:	2240      	movs	r2, #64	; 0x40
 801bf82:	490b      	ldr	r1, [pc, #44]	; (801bfb0 <DGUS_Reset+0x48>)
 801bf84:	4808      	ldr	r0, [pc, #32]	; (801bfa8 <DGUS_Reset+0x40>)
 801bf86:	f008 f8e9 	bl	802415c <memcpy>
	if(HAL_OK != HAL_UART_Transmit(&huart3, &uartDgusTxBuffer[0], 10, 10)){
 801bf8a:	230a      	movs	r3, #10
 801bf8c:	220a      	movs	r2, #10
 801bf8e:	4906      	ldr	r1, [pc, #24]	; (801bfa8 <DGUS_Reset+0x40>)
 801bf90:	4808      	ldr	r0, [pc, #32]	; (801bfb4 <DGUS_Reset+0x4c>)
 801bf92:	f7fb ff28 	bl	8017de6 <HAL_UART_Transmit>
 801bf96:	4603      	mov	r3, r0
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d001      	beq.n	801bfa0 <DGUS_Reset+0x38>
		return DGUS_ERR;
 801bf9c:	2302      	movs	r3, #2
 801bf9e:	e000      	b.n	801bfa2 <DGUS_Reset+0x3a>
	}
	else{
		return DGUS_OK;
 801bfa0:	2300      	movs	r3, #0
	}
}
 801bfa2:	4618      	mov	r0, r3
 801bfa4:	bd80      	pop	{r7, pc}
 801bfa6:	bf00      	nop
 801bfa8:	20004d64 	.word	0x20004d64
 801bfac:	20004da4 	.word	0x20004da4
 801bfb0:	20000134 	.word	0x20000134
 801bfb4:	20004964 	.word	0x20004964

0801bfb8 <StartAnimation>:
#endif



DGUS_ERROR StartAnimation(void){
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	af00      	add	r7, sp, #0

	memset(&uartDgusTxBuffer[0],0,sizeof(uartDgusTxBuffer));
 801bfbc:	2240      	movs	r2, #64	; 0x40
 801bfbe:	2100      	movs	r1, #0
 801bfc0:	4810      	ldr	r0, [pc, #64]	; (801c004 <StartAnimation+0x4c>)
 801bfc2:	f008 f8d9 	bl	8024178 <memset>
	memset(&uartDgusRxBuffer[0],0,sizeof(uartDgusRxBuffer));
 801bfc6:	2240      	movs	r2, #64	; 0x40
 801bfc8:	2100      	movs	r1, #0
 801bfca:	480f      	ldr	r0, [pc, #60]	; (801c008 <StartAnimation+0x50>)
 801bfcc:	f008 f8d4 	bl	8024178 <memset>

	memcpy(&uartDgusTxBuffer[0], &uartCommandList[7][0],DGUS_TRANSFER_BUFFER_SIZE);
 801bfd0:	2240      	movs	r2, #64	; 0x40
 801bfd2:	490e      	ldr	r1, [pc, #56]	; (801c00c <StartAnimation+0x54>)
 801bfd4:	480b      	ldr	r0, [pc, #44]	; (801c004 <StartAnimation+0x4c>)
 801bfd6:	f008 f8c1 	bl	802415c <memcpy>

	uartDgusTxBuffer[4] = 0x14;
 801bfda:	4b0a      	ldr	r3, [pc, #40]	; (801c004 <StartAnimation+0x4c>)
 801bfdc:	2214      	movs	r2, #20
 801bfde:	711a      	strb	r2, [r3, #4]
	uartDgusTxBuffer[5] = 0x00;
 801bfe0:	4b08      	ldr	r3, [pc, #32]	; (801c004 <StartAnimation+0x4c>)
 801bfe2:	2200      	movs	r2, #0
 801bfe4:	715a      	strb	r2, [r3, #5]

	if(HAL_OK !=HAL_UART_Transmit(&huart3, &uartDgusTxBuffer[0], 8, 10)) return DGUS_ERR;
 801bfe6:	230a      	movs	r3, #10
 801bfe8:	2208      	movs	r2, #8
 801bfea:	4906      	ldr	r1, [pc, #24]	; (801c004 <StartAnimation+0x4c>)
 801bfec:	4808      	ldr	r0, [pc, #32]	; (801c010 <StartAnimation+0x58>)
 801bfee:	f7fb fefa 	bl	8017de6 <HAL_UART_Transmit>
 801bff2:	4603      	mov	r3, r0
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d001      	beq.n	801bffc <StartAnimation+0x44>
 801bff8:	2302      	movs	r3, #2
 801bffa:	e000      	b.n	801bffe <StartAnimation+0x46>
	else return DGUS_OK;
 801bffc:	2300      	movs	r3, #0
}
 801bffe:	4618      	mov	r0, r3
 801c000:	bd80      	pop	{r7, pc}
 801c002:	bf00      	nop
 801c004:	20004d64 	.word	0x20004d64
 801c008:	20004da4 	.word	0x20004da4
 801c00c:	20000234 	.word	0x20000234
 801c010:	20004964 	.word	0x20004964

0801c014 <movingAvgFlt>:

float movingAvgFlt(float *ptrArrNumbers, float *ptrSum, uint8_t pos, uint16_t len, float nextNum)
{
 801c014:	b480      	push	{r7}
 801c016:	b085      	sub	sp, #20
 801c018:	af00      	add	r7, sp, #0
 801c01a:	60f8      	str	r0, [r7, #12]
 801c01c:	60b9      	str	r1, [r7, #8]
 801c01e:	4611      	mov	r1, r2
 801c020:	461a      	mov	r2, r3
 801c022:	ed87 0a00 	vstr	s0, [r7]
 801c026:	460b      	mov	r3, r1
 801c028:	71fb      	strb	r3, [r7, #7]
 801c02a:	4613      	mov	r3, r2
 801c02c:	80bb      	strh	r3, [r7, #4]
  //Subtract the oldest number from the prev sum, add the new number
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 801c02e:	68bb      	ldr	r3, [r7, #8]
 801c030:	ed93 7a00 	vldr	s14, [r3]
 801c034:	79fb      	ldrb	r3, [r7, #7]
 801c036:	009b      	lsls	r3, r3, #2
 801c038:	68fa      	ldr	r2, [r7, #12]
 801c03a:	4413      	add	r3, r2
 801c03c:	edd3 7a00 	vldr	s15, [r3]
 801c040:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c044:	edd7 7a00 	vldr	s15, [r7]
 801c048:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c04c:	68bb      	ldr	r3, [r7, #8]
 801c04e:	edc3 7a00 	vstr	s15, [r3]
  //Assign the nextNum to the position in the array
  ptrArrNumbers[pos] = nextNum;
 801c052:	79fb      	ldrb	r3, [r7, #7]
 801c054:	009b      	lsls	r3, r3, #2
 801c056:	68fa      	ldr	r2, [r7, #12]
 801c058:	4413      	add	r3, r2
 801c05a:	683a      	ldr	r2, [r7, #0]
 801c05c:	601a      	str	r2, [r3, #0]
  //return the average
  return *ptrSum / len;
 801c05e:	68bb      	ldr	r3, [r7, #8]
 801c060:	ed93 7a00 	vldr	s14, [r3]
 801c064:	88bb      	ldrh	r3, [r7, #4]
 801c066:	ee07 3a90 	vmov	s15, r3
 801c06a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c06e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c072:	eef0 7a66 	vmov.f32	s15, s13
}
 801c076:	eeb0 0a67 	vmov.f32	s0, s15
 801c07a:	3714      	adds	r7, #20
 801c07c:	46bd      	mov	sp, r7
 801c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c082:	4770      	bx	lr

0801c084 <vishwaEEp_Init>:
/*Vishwesh GM  : I'll use this for dynamic memory allocation*/
int8_t* UsbDataBuf;
int8_t* usbTraceBuffer;


void vishwaEEp_Init(void){
 801c084:	b580      	push	{r7, lr}
 801c086:	af00      	add	r7, sp, #0
	   /* Unlock the Flash Program Erase controller */
	HAL_FLASH_Unlock();
 801c088:	f7f7 fb30 	bl	80136ec <HAL_FLASH_Unlock>
	Appl_enumStatusAPIEEP = EE_Init();
 801c08c:	f000 fdb4 	bl	801cbf8 <EE_Init>
 801c090:	4603      	mov	r3, r0
 801c092:	b2da      	uxtb	r2, r3
 801c094:	4b06      	ldr	r3, [pc, #24]	; (801c0b0 <vishwaEEp_Init+0x2c>)
 801c096:	701a      	strb	r2, [r3, #0]
	  if(Appl_enumStatusAPIEEP != FLASH_COMPLETE){
 801c098:	4b05      	ldr	r3, [pc, #20]	; (801c0b0 <vishwaEEp_Init+0x2c>)
 801c09a:	781b      	ldrb	r3, [r3, #0]
 801c09c:	2b03      	cmp	r3, #3
 801c09e:	d005      	beq.n	801c0ac <vishwaEEp_Init+0x28>
		  Appl_u16EEPError++;
 801c0a0:	4b04      	ldr	r3, [pc, #16]	; (801c0b4 <vishwaEEp_Init+0x30>)
 801c0a2:	881b      	ldrh	r3, [r3, #0]
 801c0a4:	3301      	adds	r3, #1
 801c0a6:	b29a      	uxth	r2, r3
 801c0a8:	4b02      	ldr	r3, [pc, #8]	; (801c0b4 <vishwaEEp_Init+0x30>)
 801c0aa:	801a      	strh	r2, [r3, #0]
	  }
}
 801c0ac:	bf00      	nop
 801c0ae:	bd80      	pop	{r7, pc}
 801c0b0:	20005000 	.word	0x20005000
 801c0b4:	20004fc8 	.word	0x20004fc8

0801c0b8 <Update_Usage_hour_eep>:
void Update_Usage_hour_eep(void){
 801c0b8:	b480      	push	{r7}
 801c0ba:	af00      	add	r7, sp, #0

	Appl_EEPParam.stm32.EEP_Usg_Sec++;
 801c0bc:	4b19      	ldr	r3, [pc, #100]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c0be:	781b      	ldrb	r3, [r3, #0]
 801c0c0:	3301      	adds	r3, #1
 801c0c2:	b2da      	uxtb	r2, r3
 801c0c4:	4b17      	ldr	r3, [pc, #92]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c0c6:	701a      	strb	r2, [r3, #0]
	if(Appl_EEPParam.stm32.EEP_Usg_Sec>=60){
 801c0c8:	4b16      	ldr	r3, [pc, #88]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c0ca:	781b      	ldrb	r3, [r3, #0]
 801c0cc:	2b3b      	cmp	r3, #59	; 0x3b
 801c0ce:	d908      	bls.n	801c0e2 <Update_Usage_hour_eep+0x2a>
		Appl_EEPParam.stm32.EEP_Usg_Sec = 0;
 801c0d0:	4b14      	ldr	r3, [pc, #80]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	701a      	strb	r2, [r3, #0]
		Appl_EEPParam.stm32.EEP_Usg_Min++;
 801c0d6:	4b13      	ldr	r3, [pc, #76]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c0d8:	785b      	ldrb	r3, [r3, #1]
 801c0da:	3301      	adds	r3, #1
 801c0dc:	b2da      	uxtb	r2, r3
 801c0de:	4b11      	ldr	r3, [pc, #68]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c0e0:	705a      	strb	r2, [r3, #1]

	}

	if(Appl_EEPParam.stm32.EEP_Usg_Min >= 60){
 801c0e2:	4b10      	ldr	r3, [pc, #64]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c0e4:	785b      	ldrb	r3, [r3, #1]
 801c0e6:	2b3b      	cmp	r3, #59	; 0x3b
 801c0e8:	d916      	bls.n	801c118 <Update_Usage_hour_eep+0x60>
		Appl_EEPParam.stm32.EEP_Usg_Min = 0;
 801c0ea:	4b0e      	ldr	r3, [pc, #56]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c0ec:	2200      	movs	r2, #0
 801c0ee:	705a      	strb	r2, [r3, #1]
		if(Appl_EEPParam.stm32.EEP_Usg_HourL >= 0xFF){
 801c0f0:	4b0c      	ldr	r3, [pc, #48]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c0f2:	789b      	ldrb	r3, [r3, #2]
 801c0f4:	2bff      	cmp	r3, #255	; 0xff
 801c0f6:	d109      	bne.n	801c10c <Update_Usage_hour_eep+0x54>
			Appl_EEPParam.stm32.EEP_Usg_HourL = 0;
 801c0f8:	4b0a      	ldr	r3, [pc, #40]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c0fa:	2200      	movs	r2, #0
 801c0fc:	709a      	strb	r2, [r3, #2]
			Appl_EEPParam.stm32.EEP_Usg_HourH++;
 801c0fe:	4b09      	ldr	r3, [pc, #36]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c100:	78db      	ldrb	r3, [r3, #3]
 801c102:	3301      	adds	r3, #1
 801c104:	b2da      	uxtb	r2, r3
 801c106:	4b07      	ldr	r3, [pc, #28]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c108:	70da      	strb	r2, [r3, #3]
		}
		else{
			Appl_EEPParam.stm32.EEP_Usg_HourL++;
		}
	}
}
 801c10a:	e005      	b.n	801c118 <Update_Usage_hour_eep+0x60>
			Appl_EEPParam.stm32.EEP_Usg_HourL++;
 801c10c:	4b05      	ldr	r3, [pc, #20]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c10e:	789b      	ldrb	r3, [r3, #2]
 801c110:	3301      	adds	r3, #1
 801c112:	b2da      	uxtb	r2, r3
 801c114:	4b03      	ldr	r3, [pc, #12]	; (801c124 <Update_Usage_hour_eep+0x6c>)
 801c116:	709a      	strb	r2, [r3, #2]
}
 801c118:	bf00      	nop
 801c11a:	46bd      	mov	sp, r7
 801c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c120:	4770      	bx	lr
 801c122:	bf00      	nop
 801c124:	20000278 	.word	0x20000278

0801c128 <Update_RunningTime_eep>:

void Update_RunningTime_eep(void){
 801c128:	b580      	push	{r7, lr}
 801c12a:	af00      	add	r7, sp, #0

	Appl_EEPParam.stm32.EEP_Run_Sec++;
 801c12c:	4b18      	ldr	r3, [pc, #96]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c12e:	7adb      	ldrb	r3, [r3, #11]
 801c130:	3301      	adds	r3, #1
 801c132:	b2da      	uxtb	r2, r3
 801c134:	4b16      	ldr	r3, [pc, #88]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c136:	72da      	strb	r2, [r3, #11]
	if(Appl_EEPParam.stm32.EEP_Run_Sec>=60){
 801c138:	4b15      	ldr	r3, [pc, #84]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c13a:	7adb      	ldrb	r3, [r3, #11]
 801c13c:	2b3b      	cmp	r3, #59	; 0x3b
 801c13e:	d90d      	bls.n	801c15c <Update_RunningTime_eep+0x34>
		Appl_EEPParam.stm32.EEP_Run_Sec = 0;
 801c140:	4b13      	ldr	r3, [pc, #76]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c142:	2200      	movs	r2, #0
 801c144:	72da      	strb	r2, [r3, #11]
		Appl_EEPParam.stm32.EEP_Run_Min++;
 801c146:	4b12      	ldr	r3, [pc, #72]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c148:	7b1b      	ldrb	r3, [r3, #12]
 801c14a:	3301      	adds	r3, #1
 801c14c:	b2da      	uxtb	r2, r3
 801c14e:	4b10      	ldr	r3, [pc, #64]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c150:	731a      	strb	r2, [r3, #12]
		CaptureExtEEPSnapshot_SingleShot(PauseReasonEnum_1HrLogTimeSave);
 801c152:	2004      	movs	r0, #4
 801c154:	f000 fb8c 	bl	801c870 <CaptureExtEEPSnapshot_SingleShot>
		WriteEEPData();
 801c158:	f000 f81c 	bl	801c194 <WriteEEPData>
	}

	if(Appl_EEPParam.stm32.EEP_Run_Min >= 60){
 801c15c:	4b0c      	ldr	r3, [pc, #48]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c15e:	7b1b      	ldrb	r3, [r3, #12]
 801c160:	2b3b      	cmp	r3, #59	; 0x3b
 801c162:	d912      	bls.n	801c18a <Update_RunningTime_eep+0x62>
		Appl_EEPParam.stm32.EEP_Run_Min = 0;
 801c164:	4b0a      	ldr	r3, [pc, #40]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c166:	2200      	movs	r2, #0
 801c168:	731a      	strb	r2, [r3, #12]
		if(Appl_EEPParam.stm32.EEP_Run_Hour >= 0xFF){
 801c16a:	4b09      	ldr	r3, [pc, #36]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c16c:	7b5b      	ldrb	r3, [r3, #13]
 801c16e:	2bff      	cmp	r3, #255	; 0xff
 801c170:	d103      	bne.n	801c17a <Update_RunningTime_eep+0x52>
			Appl_EEPParam.stm32.EEP_Run_Hour = 0;
 801c172:	4b07      	ldr	r3, [pc, #28]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c174:	2200      	movs	r2, #0
 801c176:	735a      	strb	r2, [r3, #13]
			Appl_EEPParam.stm32.EEP_Run_Hour++;

			WriteEEPData();
		}
	}
}
 801c178:	e007      	b.n	801c18a <Update_RunningTime_eep+0x62>
			Appl_EEPParam.stm32.EEP_Run_Hour++;
 801c17a:	4b05      	ldr	r3, [pc, #20]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c17c:	7b5b      	ldrb	r3, [r3, #13]
 801c17e:	3301      	adds	r3, #1
 801c180:	b2da      	uxtb	r2, r3
 801c182:	4b03      	ldr	r3, [pc, #12]	; (801c190 <Update_RunningTime_eep+0x68>)
 801c184:	735a      	strb	r2, [r3, #13]
			WriteEEPData();
 801c186:	f000 f805 	bl	801c194 <WriteEEPData>
}
 801c18a:	bf00      	nop
 801c18c:	bd80      	pop	{r7, pc}
 801c18e:	bf00      	nop
 801c190:	20000278 	.word	0x20000278

0801c194 <WriteEEPData>:

void WriteEEPData(void){
 801c194:	b5b0      	push	{r4, r5, r7, lr}
 801c196:	b082      	sub	sp, #8
 801c198:	af00      	add	r7, sp, #0
	MapStEEPtoVishwastruct();
 801c19a:	f000 f847 	bl	801c22c <MapStEEPtoVishwastruct>
	if(memcmp(&Appl_EEPParam_Mirror.stm32, &Appl_EEPParam.stm32, sizeof(Internal_EEP_DataStructure)) != 0){
 801c19e:	2216      	movs	r2, #22
 801c1a0:	491c      	ldr	r1, [pc, #112]	; (801c214 <WriteEEPData+0x80>)
 801c1a2:	481d      	ldr	r0, [pc, #116]	; (801c218 <WriteEEPData+0x84>)
 801c1a4:	f007 ffcc 	bl	8024140 <memcmp>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d02d      	beq.n	801c20a <WriteEEPData+0x76>
		memcpy(&Appl_EEPParam_Mirror.stm32, &Appl_EEPParam.stm32, sizeof(Internal_EEP_DataStructure));
 801c1ae:	4a1a      	ldr	r2, [pc, #104]	; (801c218 <WriteEEPData+0x84>)
 801c1b0:	4b18      	ldr	r3, [pc, #96]	; (801c214 <WriteEEPData+0x80>)
 801c1b2:	4614      	mov	r4, r2
 801c1b4:	461d      	mov	r5, r3
 801c1b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c1ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c1be:	6020      	str	r0, [r4, #0]
 801c1c0:	3404      	adds	r4, #4
 801c1c2:	8021      	strh	r1, [r4, #0]
		for(int i=0; i<NB_OF_VAR; i++){
 801c1c4:	2300      	movs	r3, #0
 801c1c6:	607b      	str	r3, [r7, #4]
 801c1c8:	e01c      	b.n	801c204 <WriteEEPData+0x70>
			Appl_enumStatusAPIEEP = EE_WriteVariable(VirtAddVarTab[i], VarDataTab[i]);
 801c1ca:	4a14      	ldr	r2, [pc, #80]	; (801c21c <WriteEEPData+0x88>)
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801c1d2:	4913      	ldr	r1, [pc, #76]	; (801c220 <WriteEEPData+0x8c>)
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801c1da:	4619      	mov	r1, r3
 801c1dc:	4610      	mov	r0, r2
 801c1de:	f000 feaf 	bl	801cf40 <EE_WriteVariable>
 801c1e2:	4603      	mov	r3, r0
 801c1e4:	b2da      	uxtb	r2, r3
 801c1e6:	4b0f      	ldr	r3, [pc, #60]	; (801c224 <WriteEEPData+0x90>)
 801c1e8:	701a      	strb	r2, [r3, #0]
			if(Appl_enumStatusAPIEEP != FLASH_COMPLETE)Appl_u16EEPError++;
 801c1ea:	4b0e      	ldr	r3, [pc, #56]	; (801c224 <WriteEEPData+0x90>)
 801c1ec:	781b      	ldrb	r3, [r3, #0]
 801c1ee:	2b03      	cmp	r3, #3
 801c1f0:	d005      	beq.n	801c1fe <WriteEEPData+0x6a>
 801c1f2:	4b0d      	ldr	r3, [pc, #52]	; (801c228 <WriteEEPData+0x94>)
 801c1f4:	881b      	ldrh	r3, [r3, #0]
 801c1f6:	3301      	adds	r3, #1
 801c1f8:	b29a      	uxth	r2, r3
 801c1fa:	4b0b      	ldr	r3, [pc, #44]	; (801c228 <WriteEEPData+0x94>)
 801c1fc:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<NB_OF_VAR; i++){
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	3301      	adds	r3, #1
 801c202:	607b      	str	r3, [r7, #4]
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	2b15      	cmp	r3, #21
 801c208:	dddf      	ble.n	801c1ca <WriteEEPData+0x36>
		}
	}
}
 801c20a:	bf00      	nop
 801c20c:	3708      	adds	r7, #8
 801c20e:	46bd      	mov	sp, r7
 801c210:	bdb0      	pop	{r4, r5, r7, pc}
 801c212:	bf00      	nop
 801c214:	20000278 	.word	0x20000278
 801c218:	200008e4 	.word	0x200008e4
 801c21c:	20004f9c 	.word	0x20004f9c
 801c220:	20004fd4 	.word	0x20004fd4
 801c224:	20005000 	.word	0x20005000
 801c228:	20004fc8 	.word	0x20004fc8

0801c22c <MapStEEPtoVishwastruct>:

void MapStEEPtoVishwastruct(void){
 801c22c:	b480      	push	{r7}
 801c22e:	b083      	sub	sp, #12
 801c230:	af00      	add	r7, sp, #0


	for(int i=0; i<NB_OF_VAR ; i++){
 801c232:	2300      	movs	r3, #0
 801c234:	607b      	str	r3, [r7, #4]
 801c236:	e00a      	b.n	801c24e <MapStEEPtoVishwastruct+0x22>
		VirtAddVarTab[i] = i+1;
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	b29b      	uxth	r3, r3
 801c23c:	3301      	adds	r3, #1
 801c23e:	b299      	uxth	r1, r3
 801c240:	4a3e      	ldr	r2, [pc, #248]	; (801c33c <MapStEEPtoVishwastruct+0x110>)
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<NB_OF_VAR ; i++){
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	3301      	adds	r3, #1
 801c24c:	607b      	str	r3, [r7, #4]
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	2b15      	cmp	r3, #21
 801c252:	ddf1      	ble.n	801c238 <MapStEEPtoVishwastruct+0xc>
	}


	VarDataTab[0]  = Appl_EEPParam.stm32.EEP_Usg_Sec;
 801c254:	4b3a      	ldr	r3, [pc, #232]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c256:	781b      	ldrb	r3, [r3, #0]
 801c258:	b29a      	uxth	r2, r3
 801c25a:	4b3a      	ldr	r3, [pc, #232]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c25c:	801a      	strh	r2, [r3, #0]
	VarDataTab[1]  = Appl_EEPParam.stm32.EEP_Usg_Min;
 801c25e:	4b38      	ldr	r3, [pc, #224]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c260:	785b      	ldrb	r3, [r3, #1]
 801c262:	b29a      	uxth	r2, r3
 801c264:	4b37      	ldr	r3, [pc, #220]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c266:	805a      	strh	r2, [r3, #2]
	VarDataTab[2]  = Appl_EEPParam.stm32.EEP_Usg_HourL;
 801c268:	4b35      	ldr	r3, [pc, #212]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c26a:	789b      	ldrb	r3, [r3, #2]
 801c26c:	b29a      	uxth	r2, r3
 801c26e:	4b35      	ldr	r3, [pc, #212]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c270:	809a      	strh	r2, [r3, #4]
	VarDataTab[3]  = Appl_EEPParam.stm32.EEP_Usg_HourH;
 801c272:	4b33      	ldr	r3, [pc, #204]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c274:	78db      	ldrb	r3, [r3, #3]
 801c276:	b29a      	uxth	r2, r3
 801c278:	4b32      	ldr	r3, [pc, #200]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c27a:	80da      	strh	r2, [r3, #6]
	VarDataTab[4]  = Appl_EEPParam.stm32.EEP_CC_SetCurrent;
 801c27c:	4b30      	ldr	r3, [pc, #192]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c27e:	791b      	ldrb	r3, [r3, #4]
 801c280:	b29a      	uxth	r2, r3
 801c282:	4b30      	ldr	r3, [pc, #192]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c284:	811a      	strh	r2, [r3, #8]
	VarDataTab[5]  = Appl_EEPParam.stm32.EEP_CV_CutOffCurrent ;
 801c286:	4b2e      	ldr	r3, [pc, #184]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c288:	799b      	ldrb	r3, [r3, #6]
 801c28a:	b29a      	uxth	r2, r3
 801c28c:	4b2d      	ldr	r3, [pc, #180]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c28e:	815a      	strh	r2, [r3, #10]
	VarDataTab[6]  = Appl_EEPParam.stm32.EEP_Run_Sec;
 801c290:	4b2b      	ldr	r3, [pc, #172]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c292:	7adb      	ldrb	r3, [r3, #11]
 801c294:	b29a      	uxth	r2, r3
 801c296:	4b2b      	ldr	r3, [pc, #172]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c298:	819a      	strh	r2, [r3, #12]
	VarDataTab[7]  = Appl_EEPParam.stm32.EEP_Run_Min;
 801c29a:	4b29      	ldr	r3, [pc, #164]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c29c:	7b1b      	ldrb	r3, [r3, #12]
 801c29e:	b29a      	uxth	r2, r3
 801c2a0:	4b28      	ldr	r3, [pc, #160]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c2a2:	81da      	strh	r2, [r3, #14]
	VarDataTab[8]  = Appl_EEPParam.stm32.EEP_Run_Hour;
 801c2a4:	4b26      	ldr	r3, [pc, #152]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c2a6:	7b5b      	ldrb	r3, [r3, #13]
 801c2a8:	b29a      	uxth	r2, r3
 801c2aa:	4b26      	ldr	r3, [pc, #152]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c2ac:	821a      	strh	r2, [r3, #16]
	VarDataTab[9]  = Appl_EEPParam.stm32.EEP_PowerFailedLastTime;
 801c2ae:	4b24      	ldr	r3, [pc, #144]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c2b0:	7a9b      	ldrb	r3, [r3, #10]
 801c2b2:	b29a      	uxth	r2, r3
 801c2b4:	4b23      	ldr	r3, [pc, #140]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c2b6:	825a      	strh	r2, [r3, #18]
	VarDataTab[10] = Appl_EEPParam.stm32.EEP_TimerSetHours;
 801c2b8:	4b21      	ldr	r3, [pc, #132]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c2ba:	7b9b      	ldrb	r3, [r3, #14]
 801c2bc:	b29a      	uxth	r2, r3
 801c2be:	4b21      	ldr	r3, [pc, #132]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c2c0:	829a      	strh	r2, [r3, #20]
	VarDataTab[11] = Appl_EEPParam.stm32.EEP_CC_CutOffVoltage;
 801c2c2:	4b1f      	ldr	r3, [pc, #124]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c2c4:	79db      	ldrb	r3, [r3, #7]
 801c2c6:	b29a      	uxth	r2, r3
 801c2c8:	4b1e      	ldr	r3, [pc, #120]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c2ca:	82da      	strh	r2, [r3, #22]
	VarDataTab[12] = Appl_EEPParam.stm32.EEP_ChargeRunNumber;
 801c2cc:	4b1c      	ldr	r3, [pc, #112]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c2ce:	7a5b      	ldrb	r3, [r3, #9]
 801c2d0:	b29a      	uxth	r2, r3
 801c2d2:	4b1c      	ldr	r3, [pc, #112]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c2d4:	831a      	strh	r2, [r3, #24]
	VarDataTab[13] = Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH;
 801c2d6:	4b1a      	ldr	r3, [pc, #104]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c2d8:	7c5b      	ldrb	r3, [r3, #17]
 801c2da:	b29a      	uxth	r2, r3
 801c2dc:	4b19      	ldr	r3, [pc, #100]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c2de:	835a      	strh	r2, [r3, #26]
	VarDataTab[14] = Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL;
 801c2e0:	4b17      	ldr	r3, [pc, #92]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c2e2:	7c9b      	ldrb	r3, [r3, #18]
 801c2e4:	b29a      	uxth	r2, r3
 801c2e6:	4b17      	ldr	r3, [pc, #92]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c2e8:	839a      	strh	r2, [r3, #28]
	VarDataTab[15] = Appl_EEPParam.stm32.ExtEepAddress;
 801c2ea:	4b15      	ldr	r3, [pc, #84]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c2ec:	7cdb      	ldrb	r3, [r3, #19]
 801c2ee:	b29a      	uxth	r2, r3
 801c2f0:	4b14      	ldr	r3, [pc, #80]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c2f2:	83da      	strh	r2, [r3, #30]
	VarDataTab[16] = Appl_EEPParam.stm32.ExtEepPage;
 801c2f4:	4b12      	ldr	r3, [pc, #72]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c2f6:	7d1b      	ldrb	r3, [r3, #20]
 801c2f8:	b29a      	uxth	r2, r3
 801c2fa:	4b12      	ldr	r3, [pc, #72]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c2fc:	841a      	strh	r2, [r3, #32]
	VarDataTab[17] = Appl_EEPParam.stm32.ExtEepOffset;
 801c2fe:	4b10      	ldr	r3, [pc, #64]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c300:	7d5b      	ldrb	r3, [r3, #21]
 801c302:	b29a      	uxth	r2, r3
 801c304:	4b0f      	ldr	r3, [pc, #60]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c306:	845a      	strh	r2, [r3, #34]	; 0x22
	VarDataTab[18] = Appl_EEPParam.stm32.EEP_CustomerNumber;
 801c308:	4b0d      	ldr	r3, [pc, #52]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c30a:	7bdb      	ldrb	r3, [r3, #15]
 801c30c:	b29a      	uxth	r2, r3
 801c30e:	4b0d      	ldr	r3, [pc, #52]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c310:	849a      	strh	r2, [r3, #36]	; 0x24
	VarDataTab[19] = (uint8_t)Appl_EEPParam.stm32.EEP_ModeSelected;
 801c312:	4b0b      	ldr	r3, [pc, #44]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c314:	7c1b      	ldrb	r3, [r3, #16]
 801c316:	b29a      	uxth	r2, r3
 801c318:	4b0a      	ldr	r3, [pc, #40]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c31a:	84da      	strh	r2, [r3, #38]	; 0x26
	VarDataTab[20] = (uint8_t)Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdL;
 801c31c:	4b08      	ldr	r3, [pc, #32]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c31e:	7a1b      	ldrb	r3, [r3, #8]
 801c320:	b29a      	uxth	r2, r3
 801c322:	4b08      	ldr	r3, [pc, #32]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c324:	851a      	strh	r2, [r3, #40]	; 0x28
	VarDataTab[21] = (uint8_t)Appl_EEPParam.stm32.EEP_CV_SetVoltage;
 801c326:	4b06      	ldr	r3, [pc, #24]	; (801c340 <MapStEEPtoVishwastruct+0x114>)
 801c328:	795b      	ldrb	r3, [r3, #5]
 801c32a:	b29a      	uxth	r2, r3
 801c32c:	4b05      	ldr	r3, [pc, #20]	; (801c344 <MapStEEPtoVishwastruct+0x118>)
 801c32e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801c330:	bf00      	nop
 801c332:	370c      	adds	r7, #12
 801c334:	46bd      	mov	sp, r7
 801c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c33a:	4770      	bx	lr
 801c33c:	20004f9c 	.word	0x20004f9c
 801c340:	20000278 	.word	0x20000278
 801c344:	20004fd4 	.word	0x20004fd4

0801c348 <MapExteepToVishwaStruct>:

VishFuncError MapExteepToVishwaStruct(void){
 801c348:	b590      	push	{r4, r7, lr}
 801c34a:	b085      	sub	sp, #20
 801c34c:	af00      	add	r7, sp, #0
	int8_t UsbdataVLength = 0;
 801c34e:	2300      	movs	r3, #0
 801c350:	73fb      	strb	r3, [r7, #15]
	unionfloatData unionfloattemp;
	uint16_t Fnclocal_u16Temp;
	uint8_t Fnclocal_u8Temp;

	UsbDataBuf = (int8_t*)malloc(512);
 801c352:	f44f 7000 	mov.w	r0, #512	; 0x200
 801c356:	f007 fee3 	bl	8024120 <malloc>
 801c35a:	4603      	mov	r3, r0
 801c35c:	461a      	mov	r2, r3
 801c35e:	4b9c      	ldr	r3, [pc, #624]	; (801c5d0 <MapExteepToVishwaStruct+0x288>)
 801c360:	601a      	str	r2, [r3, #0]
	if(!UsbDataBuf)return VISH_ERR;
 801c362:	4b9b      	ldr	r3, [pc, #620]	; (801c5d0 <MapExteepToVishwaStruct+0x288>)
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	2b00      	cmp	r3, #0
 801c368:	d101      	bne.n	801c36e <MapExteepToVishwaStruct+0x26>
 801c36a:	2301      	movs	r3, #1
 801c36c:	e12c      	b.n	801c5c8 <MapExteepToVishwaStruct+0x280>
	usbTraceBuffer = UsbDataBuf;
 801c36e:	4b98      	ldr	r3, [pc, #608]	; (801c5d0 <MapExteepToVishwaStruct+0x288>)
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	4a98      	ldr	r2, [pc, #608]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c374:	6013      	str	r3, [r2, #0]

	Fnclocal_u16Temp = (VishExtEepRead.extRecord.ExtEEP_SlNumber_HighByte << 8) | VishExtEepRead.extRecord.ExtEEP_SlNumber_LowByte;
 801c376:	4b98      	ldr	r3, [pc, #608]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c378:	781b      	ldrb	r3, [r3, #0]
 801c37a:	021b      	lsls	r3, r3, #8
 801c37c:	b21a      	sxth	r2, r3
 801c37e:	4b96      	ldr	r3, [pc, #600]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c380:	785b      	ldrb	r3, [r3, #1]
 801c382:	b21b      	sxth	r3, r3
 801c384:	4313      	orrs	r3, r2
 801c386:	b21b      	sxth	r3, r3
 801c388:	81bb      	strh	r3, [r7, #12]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d|",Fnclocal_u16Temp);
 801c38a:	4b92      	ldr	r3, [pc, #584]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c38c:	681a      	ldr	r2, [r3, #0]
 801c38e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c392:	4413      	add	r3, r2
 801c394:	89ba      	ldrh	r2, [r7, #12]
 801c396:	4991      	ldr	r1, [pc, #580]	; (801c5dc <MapExteepToVishwaStruct+0x294>)
 801c398:	4618      	mov	r0, r3
 801c39a:	f008 fc19 	bl	8024bd0 <siprintf>
 801c39e:	4603      	mov	r3, r0
 801c3a0:	b2da      	uxtb	r2, r3
 801c3a2:	7bfb      	ldrb	r3, [r7, #15]
 801c3a4:	4413      	add	r3, r2
 801c3a6:	b2db      	uxtb	r3, r3
 801c3a8:	73fb      	strb	r3, [r7, #15]

	Fnclocal_u8Temp = VishExtEepRead.extRecord.ExtEEP_CustIDNum;
 801c3aa:	4b8b      	ldr	r3, [pc, #556]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c3ac:	789b      	ldrb	r3, [r3, #2]
 801c3ae:	72fb      	strb	r3, [r7, #11]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d|",Fnclocal_u8Temp);
 801c3b0:	4b88      	ldr	r3, [pc, #544]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c3b2:	681a      	ldr	r2, [r3, #0]
 801c3b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3b8:	4413      	add	r3, r2
 801c3ba:	7afa      	ldrb	r2, [r7, #11]
 801c3bc:	4987      	ldr	r1, [pc, #540]	; (801c5dc <MapExteepToVishwaStruct+0x294>)
 801c3be:	4618      	mov	r0, r3
 801c3c0:	f008 fc06 	bl	8024bd0 <siprintf>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	b2da      	uxtb	r2, r3
 801c3c8:	7bfb      	ldrb	r3, [r7, #15]
 801c3ca:	4413      	add	r3, r2
 801c3cc:	b2db      	uxtb	r3, r3
 801c3ce:	73fb      	strb	r3, [r7, #15]

	Fnclocal_u8Temp = VishExtEepRead.extRecord.ExtEEP_ChargeRunNumber;
 801c3d0:	4b81      	ldr	r3, [pc, #516]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c3d2:	78db      	ldrb	r3, [r3, #3]
 801c3d4:	72fb      	strb	r3, [r7, #11]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d|",Fnclocal_u8Temp);
 801c3d6:	4b7f      	ldr	r3, [pc, #508]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c3d8:	681a      	ldr	r2, [r3, #0]
 801c3da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3de:	4413      	add	r3, r2
 801c3e0:	7afa      	ldrb	r2, [r7, #11]
 801c3e2:	497e      	ldr	r1, [pc, #504]	; (801c5dc <MapExteepToVishwaStruct+0x294>)
 801c3e4:	4618      	mov	r0, r3
 801c3e6:	f008 fbf3 	bl	8024bd0 <siprintf>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	b2da      	uxtb	r2, r3
 801c3ee:	7bfb      	ldrb	r3, [r7, #15]
 801c3f0:	4413      	add	r3, r2
 801c3f2:	b2db      	uxtb	r3, r3
 801c3f4:	73fb      	strb	r3, [r7, #15]

	Fnclocal_u8Temp = VishExtEepRead.extRecord.ExtEEP_Time_H;
 801c3f6:	4b78      	ldr	r3, [pc, #480]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c3f8:	791b      	ldrb	r3, [r3, #4]
 801c3fa:	72fb      	strb	r3, [r7, #11]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d|",Fnclocal_u8Temp);
 801c3fc:	4b75      	ldr	r3, [pc, #468]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c3fe:	681a      	ldr	r2, [r3, #0]
 801c400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c404:	4413      	add	r3, r2
 801c406:	7afa      	ldrb	r2, [r7, #11]
 801c408:	4974      	ldr	r1, [pc, #464]	; (801c5dc <MapExteepToVishwaStruct+0x294>)
 801c40a:	4618      	mov	r0, r3
 801c40c:	f008 fbe0 	bl	8024bd0 <siprintf>
 801c410:	4603      	mov	r3, r0
 801c412:	b2da      	uxtb	r2, r3
 801c414:	7bfb      	ldrb	r3, [r7, #15]
 801c416:	4413      	add	r3, r2
 801c418:	b2db      	uxtb	r3, r3
 801c41a:	73fb      	strb	r3, [r7, #15]

	Fnclocal_u8Temp = VishExtEepRead.extRecord.ExtEEP_Time_M;
 801c41c:	4b6e      	ldr	r3, [pc, #440]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c41e:	795b      	ldrb	r3, [r3, #5]
 801c420:	72fb      	strb	r3, [r7, #11]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d|",Fnclocal_u8Temp);
 801c422:	4b6c      	ldr	r3, [pc, #432]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c424:	681a      	ldr	r2, [r3, #0]
 801c426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c42a:	4413      	add	r3, r2
 801c42c:	7afa      	ldrb	r2, [r7, #11]
 801c42e:	496b      	ldr	r1, [pc, #428]	; (801c5dc <MapExteepToVishwaStruct+0x294>)
 801c430:	4618      	mov	r0, r3
 801c432:	f008 fbcd 	bl	8024bd0 <siprintf>
 801c436:	4603      	mov	r3, r0
 801c438:	b2da      	uxtb	r2, r3
 801c43a:	7bfb      	ldrb	r3, [r7, #15]
 801c43c:	4413      	add	r3, r2
 801c43e:	b2db      	uxtb	r3, r3
 801c440:	73fb      	strb	r3, [r7, #15]

	Fnclocal_u8Temp = Appl_EEPParam.transfer.extRecord.ExtEEP_ChargeMode;
 801c442:	4b67      	ldr	r3, [pc, #412]	; (801c5e0 <MapExteepToVishwaStruct+0x298>)
 801c444:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801c448:	72fb      	strb	r3, [r7, #11]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d|",Fnclocal_u8Temp);
 801c44a:	4b62      	ldr	r3, [pc, #392]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c44c:	681a      	ldr	r2, [r3, #0]
 801c44e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c452:	4413      	add	r3, r2
 801c454:	7afa      	ldrb	r2, [r7, #11]
 801c456:	4961      	ldr	r1, [pc, #388]	; (801c5dc <MapExteepToVishwaStruct+0x294>)
 801c458:	4618      	mov	r0, r3
 801c45a:	f008 fbb9 	bl	8024bd0 <siprintf>
 801c45e:	4603      	mov	r3, r0
 801c460:	b2da      	uxtb	r2, r3
 801c462:	7bfb      	ldrb	r3, [r7, #15]
 801c464:	4413      	add	r3, r2
 801c466:	b2db      	uxtb	r3, r3
 801c468:	73fb      	strb	r3, [r7, #15]

	unionfloattemp.c[0] = VishExtEepRead.extRecord.ExtEEP_BatteryVoltagec0;
 801c46a:	4b5b      	ldr	r3, [pc, #364]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c46c:	79db      	ldrb	r3, [r3, #7]
 801c46e:	713b      	strb	r3, [r7, #4]
	unionfloattemp.c[1] = VishExtEepRead.extRecord.ExtEEP_BatteryVoltagec1;
 801c470:	4b59      	ldr	r3, [pc, #356]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c472:	7a1b      	ldrb	r3, [r3, #8]
 801c474:	717b      	strb	r3, [r7, #5]
	unionfloattemp.c[2] = VishExtEepRead.extRecord.ExtEEP_BatteryVoltagec2;
 801c476:	4b58      	ldr	r3, [pc, #352]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c478:	7a5b      	ldrb	r3, [r3, #9]
 801c47a:	71bb      	strb	r3, [r7, #6]
	unionfloattemp.c[3] = VishExtEepRead.extRecord.ExtEEP_BatteryVoltagec3;
 801c47c:	4b56      	ldr	r3, [pc, #344]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c47e:	7a9b      	ldrb	r3, [r3, #10]
 801c480:	71fb      	strb	r3, [r7, #7]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%.2f|",unionfloattemp.f);
 801c482:	4b54      	ldr	r3, [pc, #336]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c484:	681a      	ldr	r2, [r3, #0]
 801c486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c48a:	18d4      	adds	r4, r2, r3
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	4618      	mov	r0, r3
 801c490:	f7f3 ff92 	bl	80103b8 <__aeabi_f2d>
 801c494:	4602      	mov	r2, r0
 801c496:	460b      	mov	r3, r1
 801c498:	4952      	ldr	r1, [pc, #328]	; (801c5e4 <MapExteepToVishwaStruct+0x29c>)
 801c49a:	4620      	mov	r0, r4
 801c49c:	f008 fb98 	bl	8024bd0 <siprintf>
 801c4a0:	4603      	mov	r3, r0
 801c4a2:	b2da      	uxtb	r2, r3
 801c4a4:	7bfb      	ldrb	r3, [r7, #15]
 801c4a6:	4413      	add	r3, r2
 801c4a8:	b2db      	uxtb	r3, r3
 801c4aa:	73fb      	strb	r3, [r7, #15]

	unionfloattemp.c[0] = VishExtEepRead.extRecord.ExtEEP_CurrentConsumptionc0;
 801c4ac:	4b4a      	ldr	r3, [pc, #296]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c4ae:	7adb      	ldrb	r3, [r3, #11]
 801c4b0:	713b      	strb	r3, [r7, #4]
	unionfloattemp.c[1] = VishExtEepRead.extRecord.ExtEEP_CurrentConsumptionc1;
 801c4b2:	4b49      	ldr	r3, [pc, #292]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c4b4:	7b1b      	ldrb	r3, [r3, #12]
 801c4b6:	717b      	strb	r3, [r7, #5]
	unionfloattemp.c[2] = VishExtEepRead.extRecord.ExtEEP_CurrentConsumptionc2;
 801c4b8:	4b47      	ldr	r3, [pc, #284]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c4ba:	7b5b      	ldrb	r3, [r3, #13]
 801c4bc:	71bb      	strb	r3, [r7, #6]
	unionfloattemp.c[3] = VishExtEepRead.extRecord.ExtEEP_CurrentConsumptionc3;
 801c4be:	4b46      	ldr	r3, [pc, #280]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c4c0:	7b9b      	ldrb	r3, [r3, #14]
 801c4c2:	71fb      	strb	r3, [r7, #7]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%.2f|",unionfloattemp.f);
 801c4c4:	4b43      	ldr	r3, [pc, #268]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c4c6:	681a      	ldr	r2, [r3, #0]
 801c4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c4cc:	18d4      	adds	r4, r2, r3
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	4618      	mov	r0, r3
 801c4d2:	f7f3 ff71 	bl	80103b8 <__aeabi_f2d>
 801c4d6:	4602      	mov	r2, r0
 801c4d8:	460b      	mov	r3, r1
 801c4da:	4942      	ldr	r1, [pc, #264]	; (801c5e4 <MapExteepToVishwaStruct+0x29c>)
 801c4dc:	4620      	mov	r0, r4
 801c4de:	f008 fb77 	bl	8024bd0 <siprintf>
 801c4e2:	4603      	mov	r3, r0
 801c4e4:	b2da      	uxtb	r2, r3
 801c4e6:	7bfb      	ldrb	r3, [r7, #15]
 801c4e8:	4413      	add	r3, r2
 801c4ea:	b2db      	uxtb	r3, r3
 801c4ec:	73fb      	strb	r3, [r7, #15]

	Fnclocal_u8Temp = VishExtEepRead.extRecord.ExtEEP_StopReason;
 801c4ee:	4b3a      	ldr	r3, [pc, #232]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c4f0:	7bdb      	ldrb	r3, [r3, #15]
 801c4f2:	72fb      	strb	r3, [r7, #11]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d|",Fnclocal_u8Temp);
 801c4f4:	4b37      	ldr	r3, [pc, #220]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c4f6:	681a      	ldr	r2, [r3, #0]
 801c4f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c4fc:	4413      	add	r3, r2
 801c4fe:	7afa      	ldrb	r2, [r7, #11]
 801c500:	4936      	ldr	r1, [pc, #216]	; (801c5dc <MapExteepToVishwaStruct+0x294>)
 801c502:	4618      	mov	r0, r3
 801c504:	f008 fb64 	bl	8024bd0 <siprintf>
 801c508:	4603      	mov	r3, r0
 801c50a:	b2da      	uxtb	r2, r3
 801c50c:	7bfb      	ldrb	r3, [r7, #15]
 801c50e:	4413      	add	r3, r2
 801c510:	b2db      	uxtb	r3, r3
 801c512:	73fb      	strb	r3, [r7, #15]

	Fnclocal_u8Temp = VishExtEepRead.extRecord.ExtEEP_CCModeCurrent;
 801c514:	4b30      	ldr	r3, [pc, #192]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c516:	7cdb      	ldrb	r3, [r3, #19]
 801c518:	72fb      	strb	r3, [r7, #11]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d|",Fnclocal_u8Temp);
 801c51a:	4b2e      	ldr	r3, [pc, #184]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c51c:	681a      	ldr	r2, [r3, #0]
 801c51e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c522:	4413      	add	r3, r2
 801c524:	7afa      	ldrb	r2, [r7, #11]
 801c526:	492d      	ldr	r1, [pc, #180]	; (801c5dc <MapExteepToVishwaStruct+0x294>)
 801c528:	4618      	mov	r0, r3
 801c52a:	f008 fb51 	bl	8024bd0 <siprintf>
 801c52e:	4603      	mov	r3, r0
 801c530:	b2da      	uxtb	r2, r3
 801c532:	7bfb      	ldrb	r3, [r7, #15]
 801c534:	4413      	add	r3, r2
 801c536:	b2db      	uxtb	r3, r3
 801c538:	73fb      	strb	r3, [r7, #15]

	Fnclocal_u8Temp = VishExtEepRead.extRecord.ExtEEP_CCModeVoltage;
 801c53a:	4b27      	ldr	r3, [pc, #156]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c53c:	7d1b      	ldrb	r3, [r3, #20]
 801c53e:	72fb      	strb	r3, [r7, #11]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d|",Fnclocal_u8Temp);
 801c540:	4b24      	ldr	r3, [pc, #144]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c542:	681a      	ldr	r2, [r3, #0]
 801c544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c548:	4413      	add	r3, r2
 801c54a:	7afa      	ldrb	r2, [r7, #11]
 801c54c:	4923      	ldr	r1, [pc, #140]	; (801c5dc <MapExteepToVishwaStruct+0x294>)
 801c54e:	4618      	mov	r0, r3
 801c550:	f008 fb3e 	bl	8024bd0 <siprintf>
 801c554:	4603      	mov	r3, r0
 801c556:	b2da      	uxtb	r2, r3
 801c558:	7bfb      	ldrb	r3, [r7, #15]
 801c55a:	4413      	add	r3, r2
 801c55c:	b2db      	uxtb	r3, r3
 801c55e:	73fb      	strb	r3, [r7, #15]

	Fnclocal_u8Temp = VishExtEepRead.extRecord.ExtEEP_CVModeCurrent;
 801c560:	4b1d      	ldr	r3, [pc, #116]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c562:	7c5b      	ldrb	r3, [r3, #17]
 801c564:	72fb      	strb	r3, [r7, #11]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d|",Fnclocal_u8Temp);
 801c566:	4b1b      	ldr	r3, [pc, #108]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c568:	681a      	ldr	r2, [r3, #0]
 801c56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c56e:	4413      	add	r3, r2
 801c570:	7afa      	ldrb	r2, [r7, #11]
 801c572:	491a      	ldr	r1, [pc, #104]	; (801c5dc <MapExteepToVishwaStruct+0x294>)
 801c574:	4618      	mov	r0, r3
 801c576:	f008 fb2b 	bl	8024bd0 <siprintf>
 801c57a:	4603      	mov	r3, r0
 801c57c:	b2da      	uxtb	r2, r3
 801c57e:	7bfb      	ldrb	r3, [r7, #15]
 801c580:	4413      	add	r3, r2
 801c582:	b2db      	uxtb	r3, r3
 801c584:	73fb      	strb	r3, [r7, #15]

	Fnclocal_u8Temp = VishExtEepRead.extRecord.ExtEEP_CVModeVoltage;
 801c586:	4b14      	ldr	r3, [pc, #80]	; (801c5d8 <MapExteepToVishwaStruct+0x290>)
 801c588:	7c9b      	ldrb	r3, [r3, #18]
 801c58a:	72fb      	strb	r3, [r7, #11]
	UsbdataVLength += sprintf(usbTraceBuffer+UsbdataVLength,"%d\n",Fnclocal_u8Temp);
 801c58c:	4b11      	ldr	r3, [pc, #68]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c58e:	681a      	ldr	r2, [r3, #0]
 801c590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c594:	4413      	add	r3, r2
 801c596:	7afa      	ldrb	r2, [r7, #11]
 801c598:	4913      	ldr	r1, [pc, #76]	; (801c5e8 <MapExteepToVishwaStruct+0x2a0>)
 801c59a:	4618      	mov	r0, r3
 801c59c:	f008 fb18 	bl	8024bd0 <siprintf>
 801c5a0:	4603      	mov	r3, r0
 801c5a2:	b2da      	uxtb	r2, r3
 801c5a4:	7bfb      	ldrb	r3, [r7, #15]
 801c5a6:	4413      	add	r3, r2
 801c5a8:	b2db      	uxtb	r3, r3
 801c5aa:	73fb      	strb	r3, [r7, #15]

	CDC_Transmit_HS((uint8_t*)usbTraceBuffer,UsbdataVLength);
 801c5ac:	4b09      	ldr	r3, [pc, #36]	; (801c5d4 <MapExteepToVishwaStruct+0x28c>)
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801c5b4:	4611      	mov	r1, r2
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	f007 f87e 	bl	80236b8 <CDC_Transmit_HS>

	free(UsbDataBuf);
 801c5bc:	4b04      	ldr	r3, [pc, #16]	; (801c5d0 <MapExteepToVishwaStruct+0x288>)
 801c5be:	681b      	ldr	r3, [r3, #0]
 801c5c0:	4618      	mov	r0, r3
 801c5c2:	f007 fdb5 	bl	8024130 <free>

	return VISH_OK;
 801c5c6:	2300      	movs	r3, #0

}
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	3714      	adds	r7, #20
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd90      	pop	{r4, r7, pc}
 801c5d0:	20004fd0 	.word	0x20004fd0
 801c5d4:	20004fcc 	.word	0x20004fcc
 801c5d8:	200050f4 	.word	0x200050f4
 801c5dc:	08027030 	.word	0x08027030
 801c5e0:	20000278 	.word	0x20000278
 801c5e4:	08027034 	.word	0x08027034
 801c5e8:	0802703c 	.word	0x0802703c

0801c5ec <MapVishwaStructToExteep>:

void MapVishwaStructToExteep(PauseReason reason){
 801c5ec:	b480      	push	{r7}
 801c5ee:	b085      	sub	sp, #20
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	4603      	mov	r3, r0
 801c5f4:	71fb      	strb	r3, [r7, #7]

	unionfloatData unionfloattemp;
	Appl_EEPParam.transfer.extRecord.ExtEEP_SlNumber_HighByte = Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH;
 801c5f6:	4b30      	ldr	r3, [pc, #192]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c5f8:	7c5a      	ldrb	r2, [r3, #17]
 801c5fa:	4b2f      	ldr	r3, [pc, #188]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c5fc:	759a      	strb	r2, [r3, #22]
	Appl_EEPParam.transfer.extRecord.ExtEEP_SlNumber_LowByte = Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL;
 801c5fe:	4b2e      	ldr	r3, [pc, #184]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c600:	7c9a      	ldrb	r2, [r3, #18]
 801c602:	4b2d      	ldr	r3, [pc, #180]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c604:	75da      	strb	r2, [r3, #23]
	Appl_EEPParam.transfer.extRecord.ExtEEP_CustIDNum = Appl_EEPParam.stm32.EEP_CustomerNumber;
 801c606:	4b2c      	ldr	r3, [pc, #176]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c608:	7bda      	ldrb	r2, [r3, #15]
 801c60a:	4b2b      	ldr	r3, [pc, #172]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c60c:	761a      	strb	r2, [r3, #24]
	Appl_EEPParam.transfer.extRecord.ExtEEP_ChargeRunNumber = Appl_EEPParam.stm32.EEP_ChargeRunNumber;
 801c60e:	4b2a      	ldr	r3, [pc, #168]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c610:	7a5a      	ldrb	r2, [r3, #9]
 801c612:	4b29      	ldr	r3, [pc, #164]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c614:	765a      	strb	r2, [r3, #25]
	Appl_EEPParam.transfer.extRecord.ExtEEP_Time_H = Appl_EEPParam.stm32.EEP_Run_Hour;
 801c616:	4b28      	ldr	r3, [pc, #160]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c618:	7b5a      	ldrb	r2, [r3, #13]
 801c61a:	4b27      	ldr	r3, [pc, #156]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c61c:	769a      	strb	r2, [r3, #26]
	Appl_EEPParam.transfer.extRecord.ExtEEP_Time_M = Appl_EEPParam.stm32.EEP_Run_Min;
 801c61e:	4b26      	ldr	r3, [pc, #152]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c620:	7b1a      	ldrb	r2, [r3, #12]
 801c622:	4b25      	ldr	r3, [pc, #148]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c624:	76da      	strb	r2, [r3, #27]
	Appl_EEPParam.transfer.extRecord.ExtEEP_DeviceId = 51;
 801c626:	4b24      	ldr	r3, [pc, #144]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c628:	2233      	movs	r2, #51	; 0x33
 801c62a:	771a      	strb	r2, [r3, #28]

	unionfloattemp.f = Appl_Display.flt_dv;
 801c62c:	4b23      	ldr	r3, [pc, #140]	; (801c6bc <MapVishwaStructToExteep+0xd0>)
 801c62e:	685b      	ldr	r3, [r3, #4]
 801c630:	60fb      	str	r3, [r7, #12]
	Appl_EEPParam.transfer.extRecord.ExtEEP_BatteryVoltagec0 = unionfloattemp.c[0];
 801c632:	7b3a      	ldrb	r2, [r7, #12]
 801c634:	4b20      	ldr	r3, [pc, #128]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c636:	775a      	strb	r2, [r3, #29]
	Appl_EEPParam.transfer.extRecord.ExtEEP_BatteryVoltagec1 = unionfloattemp.c[1];
 801c638:	7b7a      	ldrb	r2, [r7, #13]
 801c63a:	4b1f      	ldr	r3, [pc, #124]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c63c:	779a      	strb	r2, [r3, #30]
	Appl_EEPParam.transfer.extRecord.ExtEEP_BatteryVoltagec2 = unionfloattemp.c[2];
 801c63e:	7bba      	ldrb	r2, [r7, #14]
 801c640:	4b1d      	ldr	r3, [pc, #116]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c642:	77da      	strb	r2, [r3, #31]
	Appl_EEPParam.transfer.extRecord.ExtEEP_BatteryVoltagec3 = unionfloattemp.c[3];
 801c644:	7bfa      	ldrb	r2, [r7, #15]
 801c646:	4b1c      	ldr	r3, [pc, #112]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c648:	f883 2020 	strb.w	r2, [r3, #32]

	unionfloattemp.f = Appl_Display.flt_di;
 801c64c:	4b1b      	ldr	r3, [pc, #108]	; (801c6bc <MapVishwaStructToExteep+0xd0>)
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	60fb      	str	r3, [r7, #12]
	Appl_EEPParam.transfer.extRecord.ExtEEP_CurrentConsumptionc0 = unionfloattemp.c[0];
 801c652:	7b3a      	ldrb	r2, [r7, #12]
 801c654:	4b18      	ldr	r3, [pc, #96]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Appl_EEPParam.transfer.extRecord.ExtEEP_CurrentConsumptionc1 = unionfloattemp.c[1];
 801c65a:	7b7a      	ldrb	r2, [r7, #13]
 801c65c:	4b16      	ldr	r3, [pc, #88]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c65e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Appl_EEPParam.transfer.extRecord.ExtEEP_CurrentConsumptionc2 = unionfloattemp.c[2];
 801c662:	7bba      	ldrb	r2, [r7, #14]
 801c664:	4b14      	ldr	r3, [pc, #80]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c666:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Appl_EEPParam.transfer.extRecord.ExtEEP_CurrentConsumptionc3 = unionfloattemp.c[3];
 801c66a:	7bfa      	ldrb	r2, [r7, #15]
 801c66c:	4b12      	ldr	r3, [pc, #72]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c66e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


	Appl_EEPParam.transfer.extRecord.ExtEEP_StopReason = reason;
 801c672:	4a11      	ldr	r2, [pc, #68]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c674:	79fb      	ldrb	r3, [r7, #7]
 801c676:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

	Appl_EEPParam.transfer.extRecord.ExtEEP_ChargeMode = Appl_EEPParam.stm32.EEP_ModeSelected;
 801c67a:	4b0f      	ldr	r3, [pc, #60]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c67c:	7c1a      	ldrb	r2, [r3, #16]
 801c67e:	4b0e      	ldr	r3, [pc, #56]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c680:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Appl_EEPParam.transfer.extRecord.ExtEEP_CCModeCurrent = Appl_EEPParam.stm32.EEP_CC_SetCurrent;
 801c684:	4b0c      	ldr	r3, [pc, #48]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c686:	791a      	ldrb	r2, [r3, #4]
 801c688:	4b0b      	ldr	r3, [pc, #44]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c68a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Appl_EEPParam.transfer.extRecord.ExtEEP_CCModeVoltage = Appl_EEPParam.stm32.EEP_CC_CutOffVoltage;
 801c68e:	4b0a      	ldr	r3, [pc, #40]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c690:	79da      	ldrb	r2, [r3, #7]
 801c692:	4b09      	ldr	r3, [pc, #36]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c694:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Appl_EEPParam.transfer.extRecord.ExtEEP_CVModeCurrent = Appl_EEPParam.stm32.EEP_CV_SetVoltage;
 801c698:	4b07      	ldr	r3, [pc, #28]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c69a:	795a      	ldrb	r2, [r3, #5]
 801c69c:	4b06      	ldr	r3, [pc, #24]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c69e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	Appl_EEPParam.transfer.extRecord.ExtEEP_CVModeVoltage = Appl_EEPParam.stm32.EEP_CV_CutOffCurrent;
 801c6a2:	4b05      	ldr	r3, [pc, #20]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c6a4:	799a      	ldrb	r2, [r3, #6]
 801c6a6:	4b04      	ldr	r3, [pc, #16]	; (801c6b8 <MapVishwaStructToExteep+0xcc>)
 801c6a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 801c6ac:	bf00      	nop
 801c6ae:	3714      	adds	r7, #20
 801c6b0:	46bd      	mov	sp, r7
 801c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6b6:	4770      	bx	lr
 801c6b8:	20000278 	.word	0x20000278
 801c6bc:	20004f08 	.word	0x20004f08

0801c6c0 <ReadEEPData>:
void ReadEEPData(void){
 801c6c0:	b580      	push	{r7, lr}
 801c6c2:	b082      	sub	sp, #8
 801c6c4:	af00      	add	r7, sp, #0
	/*Vishwesh:
	 * Update EEP Data from STM32 Emulated Flash
	 */
	for(int i=0; i<NB_OF_VAR ; i++){
 801c6c6:	2300      	movs	r3, #0
 801c6c8:	607b      	str	r3, [r7, #4]
 801c6ca:	e00a      	b.n	801c6e2 <ReadEEPData+0x22>
		VirtAddVarTab[i] = i+1;
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	b29b      	uxth	r3, r3
 801c6d0:	3301      	adds	r3, #1
 801c6d2:	b299      	uxth	r1, r3
 801c6d4:	4a1d      	ldr	r2, [pc, #116]	; (801c74c <ReadEEPData+0x8c>)
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<NB_OF_VAR ; i++){
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	3301      	adds	r3, #1
 801c6e0:	607b      	str	r3, [r7, #4]
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	2b15      	cmp	r3, #21
 801c6e6:	ddf1      	ble.n	801c6cc <ReadEEPData+0xc>
	}

	if(memcmp(&Appl_EEPParam_Mirror.stm32, &Appl_EEPParam.stm32, sizeof(Appl_EEPParam_Mirror.stm32)) != 0){
 801c6e8:	2216      	movs	r2, #22
 801c6ea:	4919      	ldr	r1, [pc, #100]	; (801c750 <ReadEEPData+0x90>)
 801c6ec:	4819      	ldr	r0, [pc, #100]	; (801c754 <ReadEEPData+0x94>)
 801c6ee:	f007 fd27 	bl	8024140 <memcmp>
 801c6f2:	4603      	mov	r3, r0
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d024      	beq.n	801c742 <ReadEEPData+0x82>
		for(int i=0; i<NB_OF_VAR; i++){
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	603b      	str	r3, [r7, #0]
 801c6fc:	e01c      	b.n	801c738 <ReadEEPData+0x78>
			Appl_enumStatusAPIEEP = EE_ReadVariable(VirtAddVarTab[i], &VarDataTab[i]);
 801c6fe:	4a13      	ldr	r2, [pc, #76]	; (801c74c <ReadEEPData+0x8c>)
 801c700:	683b      	ldr	r3, [r7, #0]
 801c702:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801c706:	683b      	ldr	r3, [r7, #0]
 801c708:	005b      	lsls	r3, r3, #1
 801c70a:	4913      	ldr	r1, [pc, #76]	; (801c758 <ReadEEPData+0x98>)
 801c70c:	440b      	add	r3, r1
 801c70e:	4619      	mov	r1, r3
 801c710:	4610      	mov	r0, r2
 801c712:	f000 fbcb 	bl	801ceac <EE_ReadVariable>
 801c716:	4603      	mov	r3, r0
 801c718:	b2da      	uxtb	r2, r3
 801c71a:	4b10      	ldr	r3, [pc, #64]	; (801c75c <ReadEEPData+0x9c>)
 801c71c:	701a      	strb	r2, [r3, #0]
			if(Appl_enumStatusAPIEEP != 0)Appl_u16EEPError++;
 801c71e:	4b0f      	ldr	r3, [pc, #60]	; (801c75c <ReadEEPData+0x9c>)
 801c720:	781b      	ldrb	r3, [r3, #0]
 801c722:	2b00      	cmp	r3, #0
 801c724:	d005      	beq.n	801c732 <ReadEEPData+0x72>
 801c726:	4b0e      	ldr	r3, [pc, #56]	; (801c760 <ReadEEPData+0xa0>)
 801c728:	881b      	ldrh	r3, [r3, #0]
 801c72a:	3301      	adds	r3, #1
 801c72c:	b29a      	uxth	r2, r3
 801c72e:	4b0c      	ldr	r3, [pc, #48]	; (801c760 <ReadEEPData+0xa0>)
 801c730:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<NB_OF_VAR; i++){
 801c732:	683b      	ldr	r3, [r7, #0]
 801c734:	3301      	adds	r3, #1
 801c736:	603b      	str	r3, [r7, #0]
 801c738:	683b      	ldr	r3, [r7, #0]
 801c73a:	2b15      	cmp	r3, #21
 801c73c:	dddf      	ble.n	801c6fe <ReadEEPData+0x3e>
		}
		MapVishwastructtoEEP();
 801c73e:	f000 f811 	bl	801c764 <MapVishwastructtoEEP>
	}

}
 801c742:	bf00      	nop
 801c744:	3708      	adds	r7, #8
 801c746:	46bd      	mov	sp, r7
 801c748:	bd80      	pop	{r7, pc}
 801c74a:	bf00      	nop
 801c74c:	20004f9c 	.word	0x20004f9c
 801c750:	20000278 	.word	0x20000278
 801c754:	200008e4 	.word	0x200008e4
 801c758:	20004fd4 	.word	0x20004fd4
 801c75c:	20005000 	.word	0x20005000
 801c760:	20004fc8 	.word	0x20004fc8

0801c764 <MapVishwastructtoEEP>:


void MapVishwastructtoEEP(void){
 801c764:	b4b0      	push	{r4, r5, r7}
 801c766:	af00      	add	r7, sp, #0


	Appl_EEPParam.stm32.EEP_Usg_Sec                         = VarDataTab[0];
 801c768:	4b3e      	ldr	r3, [pc, #248]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c76a:	881b      	ldrh	r3, [r3, #0]
 801c76c:	b2da      	uxtb	r2, r3
 801c76e:	4b3e      	ldr	r3, [pc, #248]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c770:	701a      	strb	r2, [r3, #0]
	Appl_EEPParam.stm32.EEP_Usg_Min                         = VarDataTab[1];
 801c772:	4b3c      	ldr	r3, [pc, #240]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c774:	885b      	ldrh	r3, [r3, #2]
 801c776:	b2da      	uxtb	r2, r3
 801c778:	4b3b      	ldr	r3, [pc, #236]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c77a:	705a      	strb	r2, [r3, #1]
	Appl_EEPParam.stm32.EEP_Usg_HourL                       = VarDataTab[2];
 801c77c:	4b39      	ldr	r3, [pc, #228]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c77e:	889b      	ldrh	r3, [r3, #4]
 801c780:	b2da      	uxtb	r2, r3
 801c782:	4b39      	ldr	r3, [pc, #228]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c784:	709a      	strb	r2, [r3, #2]
	Appl_EEPParam.stm32.EEP_Usg_HourH                       = VarDataTab[3];
 801c786:	4b37      	ldr	r3, [pc, #220]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c788:	88db      	ldrh	r3, [r3, #6]
 801c78a:	b2da      	uxtb	r2, r3
 801c78c:	4b36      	ldr	r3, [pc, #216]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c78e:	70da      	strb	r2, [r3, #3]
	Appl_EEPParam.stm32.EEP_CC_SetCurrent                   = VarDataTab[4];
 801c790:	4b34      	ldr	r3, [pc, #208]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c792:	891b      	ldrh	r3, [r3, #8]
 801c794:	b2da      	uxtb	r2, r3
 801c796:	4b34      	ldr	r3, [pc, #208]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c798:	711a      	strb	r2, [r3, #4]
	Appl_EEPParam.stm32.EEP_CV_CutOffCurrent                = VarDataTab[5];
 801c79a:	4b32      	ldr	r3, [pc, #200]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c79c:	895b      	ldrh	r3, [r3, #10]
 801c79e:	b2da      	uxtb	r2, r3
 801c7a0:	4b31      	ldr	r3, [pc, #196]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c7a2:	719a      	strb	r2, [r3, #6]
	Appl_EEPParam.stm32.EEP_Run_Sec                         = VarDataTab[6];
 801c7a4:	4b2f      	ldr	r3, [pc, #188]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c7a6:	899b      	ldrh	r3, [r3, #12]
 801c7a8:	b2da      	uxtb	r2, r3
 801c7aa:	4b2f      	ldr	r3, [pc, #188]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c7ac:	72da      	strb	r2, [r3, #11]
	Appl_EEPParam.stm32.EEP_Run_Min                         = VarDataTab[7];
 801c7ae:	4b2d      	ldr	r3, [pc, #180]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c7b0:	89db      	ldrh	r3, [r3, #14]
 801c7b2:	b2da      	uxtb	r2, r3
 801c7b4:	4b2c      	ldr	r3, [pc, #176]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c7b6:	731a      	strb	r2, [r3, #12]
	Appl_EEPParam.stm32.EEP_Run_Hour                        = VarDataTab[8];
 801c7b8:	4b2a      	ldr	r3, [pc, #168]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c7ba:	8a1b      	ldrh	r3, [r3, #16]
 801c7bc:	b2da      	uxtb	r2, r3
 801c7be:	4b2a      	ldr	r3, [pc, #168]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c7c0:	735a      	strb	r2, [r3, #13]
	Appl_EEPParam.stm32.EEP_PowerFailedLastTime             = VarDataTab[9];
 801c7c2:	4b28      	ldr	r3, [pc, #160]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c7c4:	8a5b      	ldrh	r3, [r3, #18]
 801c7c6:	b2da      	uxtb	r2, r3
 801c7c8:	4b27      	ldr	r3, [pc, #156]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c7ca:	729a      	strb	r2, [r3, #10]
	Appl_EEPParam.stm32.EEP_TimerSetHours                   = VarDataTab[10];
 801c7cc:	4b25      	ldr	r3, [pc, #148]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c7ce:	8a9b      	ldrh	r3, [r3, #20]
 801c7d0:	b2da      	uxtb	r2, r3
 801c7d2:	4b25      	ldr	r3, [pc, #148]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c7d4:	739a      	strb	r2, [r3, #14]
	Appl_EEPParam.stm32.EEP_CC_CutOffVoltage                = VarDataTab[11];
 801c7d6:	4b23      	ldr	r3, [pc, #140]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c7d8:	8adb      	ldrh	r3, [r3, #22]
 801c7da:	b2da      	uxtb	r2, r3
 801c7dc:	4b22      	ldr	r3, [pc, #136]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c7de:	71da      	strb	r2, [r3, #7]
	Appl_EEPParam.stm32.EEP_ChargeRunNumber			        = VarDataTab[12];
 801c7e0:	4b20      	ldr	r3, [pc, #128]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c7e2:	8b1b      	ldrh	r3, [r3, #24]
 801c7e4:	b2da      	uxtb	r2, r3
 801c7e6:	4b20      	ldr	r3, [pc, #128]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c7e8:	725a      	strb	r2, [r3, #9]
	Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH  = VarDataTab[13];
 801c7ea:	4b1e      	ldr	r3, [pc, #120]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c7ec:	8b5b      	ldrh	r3, [r3, #26]
 801c7ee:	b2da      	uxtb	r2, r3
 801c7f0:	4b1d      	ldr	r3, [pc, #116]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c7f2:	745a      	strb	r2, [r3, #17]
	Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL  = VarDataTab[14];
 801c7f4:	4b1b      	ldr	r3, [pc, #108]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c7f6:	8b9b      	ldrh	r3, [r3, #28]
 801c7f8:	b2da      	uxtb	r2, r3
 801c7fa:	4b1b      	ldr	r3, [pc, #108]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c7fc:	749a      	strb	r2, [r3, #18]
	Appl_EEPParam.stm32.ExtEepAddress                       = VarDataTab[15];
 801c7fe:	4b19      	ldr	r3, [pc, #100]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c800:	8bdb      	ldrh	r3, [r3, #30]
 801c802:	b2da      	uxtb	r2, r3
 801c804:	4b18      	ldr	r3, [pc, #96]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c806:	74da      	strb	r2, [r3, #19]
	Appl_EEPParam.stm32.ExtEepPage                          = VarDataTab[16];
 801c808:	4b16      	ldr	r3, [pc, #88]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c80a:	8c1b      	ldrh	r3, [r3, #32]
 801c80c:	b2da      	uxtb	r2, r3
 801c80e:	4b16      	ldr	r3, [pc, #88]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c810:	751a      	strb	r2, [r3, #20]
	Appl_EEPParam.stm32.ExtEepOffset                        = VarDataTab[17];
 801c812:	4b14      	ldr	r3, [pc, #80]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c814:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801c816:	b2da      	uxtb	r2, r3
 801c818:	4b13      	ldr	r3, [pc, #76]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c81a:	755a      	strb	r2, [r3, #21]
	Appl_EEPParam.stm32.EEP_CustomerNumber                  = VarDataTab[18];
 801c81c:	4b11      	ldr	r3, [pc, #68]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c81e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c820:	b2da      	uxtb	r2, r3
 801c822:	4b11      	ldr	r3, [pc, #68]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c824:	73da      	strb	r2, [r3, #15]
	Appl_EEPParam.stm32.EEP_ModeSelected                    = VarDataTab[19];
 801c826:	4b0f      	ldr	r3, [pc, #60]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c82a:	b2da      	uxtb	r2, r3
 801c82c:	4b0e      	ldr	r3, [pc, #56]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c82e:	741a      	strb	r2, [r3, #16]
	Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdL        = VarDataTab[20];
 801c830:	4b0c      	ldr	r3, [pc, #48]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c834:	b2da      	uxtb	r2, r3
 801c836:	4b0c      	ldr	r3, [pc, #48]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c838:	721a      	strb	r2, [r3, #8]
	Appl_EEPParam.stm32.EEP_CV_SetVoltage                   = VarDataTab[21];
 801c83a:	4b0a      	ldr	r3, [pc, #40]	; (801c864 <MapVishwastructtoEEP+0x100>)
 801c83c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c83e:	b2da      	uxtb	r2, r3
 801c840:	4b09      	ldr	r3, [pc, #36]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c842:	715a      	strb	r2, [r3, #5]

	memcpy(&Appl_EEPParam_Mirror.stm32, &Appl_EEPParam.stm32, sizeof(Appl_EEPParam_Mirror.stm32));
 801c844:	4a09      	ldr	r2, [pc, #36]	; (801c86c <MapVishwastructtoEEP+0x108>)
 801c846:	4b08      	ldr	r3, [pc, #32]	; (801c868 <MapVishwastructtoEEP+0x104>)
 801c848:	4614      	mov	r4, r2
 801c84a:	461d      	mov	r5, r3
 801c84c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c84e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c850:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c854:	6020      	str	r0, [r4, #0]
 801c856:	3404      	adds	r4, #4
 801c858:	8021      	strh	r1, [r4, #0]
}
 801c85a:	bf00      	nop
 801c85c:	46bd      	mov	sp, r7
 801c85e:	bcb0      	pop	{r4, r5, r7}
 801c860:	4770      	bx	lr
 801c862:	bf00      	nop
 801c864:	20004fd4 	.word	0x20004fd4
 801c868:	20000278 	.word	0x20000278
 801c86c:	200008e4 	.word	0x200008e4

0801c870 <CaptureExtEEPSnapshot_SingleShot>:




void CaptureExtEEPSnapshot_SingleShot(PauseReason reason){
 801c870:	b580      	push	{r7, lr}
 801c872:	b086      	sub	sp, #24
 801c874:	af02      	add	r7, sp, #8
 801c876:	4603      	mov	r3, r0
 801c878:	71fb      	strb	r3, [r7, #7]

	ExtEEP_Error EEP_Error;
	uint32_t EEP_ErrorCounter;


		Appl_EEPParam.stm32.ExtEepAddress = 0xA0;
 801c87a:	4b33      	ldr	r3, [pc, #204]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c87c:	22a0      	movs	r2, #160	; 0xa0
 801c87e:	74da      	strb	r2, [r3, #19]
		Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL++;
 801c880:	4b31      	ldr	r3, [pc, #196]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c882:	7c9b      	ldrb	r3, [r3, #18]
 801c884:	3301      	adds	r3, #1
 801c886:	b2da      	uxtb	r2, r3
 801c888:	4b2f      	ldr	r3, [pc, #188]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c88a:	749a      	strb	r2, [r3, #18]
		if(Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL == 0xFF){
 801c88c:	4b2e      	ldr	r3, [pc, #184]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c88e:	7c9b      	ldrb	r3, [r3, #18]
 801c890:	2bff      	cmp	r3, #255	; 0xff
 801c892:	d108      	bne.n	801c8a6 <CaptureExtEEPSnapshot_SingleShot+0x36>
			Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL = 0;
 801c894:	4b2c      	ldr	r3, [pc, #176]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c896:	2200      	movs	r2, #0
 801c898:	749a      	strb	r2, [r3, #18]
			Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH++;
 801c89a:	4b2b      	ldr	r3, [pc, #172]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c89c:	7c5b      	ldrb	r3, [r3, #17]
 801c89e:	3301      	adds	r3, #1
 801c8a0:	b2da      	uxtb	r2, r3
 801c8a2:	4b29      	ldr	r3, [pc, #164]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c8a4:	745a      	strb	r2, [r3, #17]
		}
		MapVishwaStructToExteep(reason);
 801c8a6:	79fb      	ldrb	r3, [r7, #7]
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	f7ff fe9f 	bl	801c5ec <MapVishwaStructToExteep>


		if(Appl_diagActiveFault.EEPLogMemoryFull!= 1){
 801c8ae:	4b27      	ldr	r3, [pc, #156]	; (801c94c <CaptureExtEEPSnapshot_SingleShot+0xdc>)
 801c8b0:	7a5b      	ldrb	r3, [r3, #9]
 801c8b2:	2b01      	cmp	r3, #1
 801c8b4:	d02a      	beq.n	801c90c <CaptureExtEEPSnapshot_SingleShot+0x9c>
			do{
				EEP_Error = EEPROM_Write(Appl_EEPParam.stm32.ExtEepPage,Appl_EEPParam.stm32.ExtEepOffset,&Appl_EEPParam.transfer.bytes[0],sizeof(Appl_EEPParam.transfer),Appl_EEPParam.stm32.ExtEepAddress);
 801c8b6:	4b24      	ldr	r3, [pc, #144]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c8b8:	7d1b      	ldrb	r3, [r3, #20]
 801c8ba:	b298      	uxth	r0, r3
 801c8bc:	4b22      	ldr	r3, [pc, #136]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c8be:	7d5b      	ldrb	r3, [r3, #21]
 801c8c0:	b299      	uxth	r1, r3
 801c8c2:	4b21      	ldr	r3, [pc, #132]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c8c4:	7cdb      	ldrb	r3, [r3, #19]
 801c8c6:	9300      	str	r3, [sp, #0]
 801c8c8:	2320      	movs	r3, #32
 801c8ca:	4a21      	ldr	r2, [pc, #132]	; (801c950 <CaptureExtEEPSnapshot_SingleShot+0xe0>)
 801c8cc:	f000 f878 	bl	801c9c0 <EEPROM_Write>
 801c8d0:	4603      	mov	r3, r0
 801c8d2:	72fb      	strb	r3, [r7, #11]
				if(EEP_Error != EXTEEP_OK){
 801c8d4:	7afb      	ldrb	r3, [r7, #11]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d013      	beq.n	801c902 <CaptureExtEEPSnapshot_SingleShot+0x92>
					EEP_ErrorCounter++;
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	3301      	adds	r3, #1
 801c8de:	60fb      	str	r3, [r7, #12]
					/*ResetI2c*/
					(&hi2c1)->Instance->CR1 |= I2C_CR1_SWRST;
 801c8e0:	4b1c      	ldr	r3, [pc, #112]	; (801c954 <CaptureExtEEPSnapshot_SingleShot+0xe4>)
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	681a      	ldr	r2, [r3, #0]
 801c8e6:	4b1b      	ldr	r3, [pc, #108]	; (801c954 <CaptureExtEEPSnapshot_SingleShot+0xe4>)
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c8ee:	601a      	str	r2, [r3, #0]
					(&hi2c1)->Instance->CR1 &= ~I2C_CR1_SWRST;
 801c8f0:	4b18      	ldr	r3, [pc, #96]	; (801c954 <CaptureExtEEPSnapshot_SingleShot+0xe4>)
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	681a      	ldr	r2, [r3, #0]
 801c8f6:	4b17      	ldr	r3, [pc, #92]	; (801c954 <CaptureExtEEPSnapshot_SingleShot+0xe4>)
 801c8f8:	681b      	ldr	r3, [r3, #0]
 801c8fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c8fe:	601a      	str	r2, [r3, #0]
 801c900:	e001      	b.n	801c906 <CaptureExtEEPSnapshot_SingleShot+0x96>
				}
				else{
					EEP_ErrorCounter = 0xFF;
 801c902:	23ff      	movs	r3, #255	; 0xff
 801c904:	60fb      	str	r3, [r7, #12]
				}
			}while(EEP_ErrorCounter<10);
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	2b09      	cmp	r3, #9
 801c90a:	d9d4      	bls.n	801c8b6 <CaptureExtEEPSnapshot_SingleShot+0x46>
//					Appl_EEPParam.stm32.ExtEepAddress = 0xA4;
//					Appl_diagActiveFault.EEPLogMemoryFull = 1;
//				}
//			}
//		}
		if(Appl_EEPParam.stm32.ExtEepOffset >= PAGEINCREMENT_OFFSET_THRESHOLD){
 801c90c:	4b0e      	ldr	r3, [pc, #56]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c90e:	7d5b      	ldrb	r3, [r3, #21]
 801c910:	2bdf      	cmp	r3, #223	; 0xdf
 801c912:	d90f      	bls.n	801c934 <CaptureExtEEPSnapshot_SingleShot+0xc4>
			Appl_EEPParam.stm32.ExtEepPage++;
 801c914:	4b0c      	ldr	r3, [pc, #48]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c916:	7d1b      	ldrb	r3, [r3, #20]
 801c918:	3301      	adds	r3, #1
 801c91a:	b2da      	uxtb	r2, r3
 801c91c:	4b0a      	ldr	r3, [pc, #40]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c91e:	751a      	strb	r2, [r3, #20]
			if(Appl_EEPParam.stm32.ExtEepPage > 0xFE){
 801c920:	4b09      	ldr	r3, [pc, #36]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c922:	7d1b      	ldrb	r3, [r3, #20]
 801c924:	2bff      	cmp	r3, #255	; 0xff
 801c926:	d105      	bne.n	801c934 <CaptureExtEEPSnapshot_SingleShot+0xc4>
				Appl_EEPParam.stm32.ExtEepPage = 0xFE;
 801c928:	4b07      	ldr	r3, [pc, #28]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c92a:	22fe      	movs	r2, #254	; 0xfe
 801c92c:	751a      	strb	r2, [r3, #20]
				Appl_diagActiveFault.EEPLogMemoryFull = 1;
 801c92e:	4b07      	ldr	r3, [pc, #28]	; (801c94c <CaptureExtEEPSnapshot_SingleShot+0xdc>)
 801c930:	2201      	movs	r2, #1
 801c932:	725a      	strb	r2, [r3, #9]
		/*Note that resetting of Appl_EEPParam.stm32.ExtEepOffset is done via overflow method.
		 * i.e 224+32 on  8-byte variable overflows as 0;
		 * Upper logic block ensures when this happen page number is incremented.
		 *
		 */
		Appl_EEPParam.stm32.ExtEepOffset +=NUM_OF_BYTES_IN_A_EXTEEP_RECORD;
 801c934:	4b04      	ldr	r3, [pc, #16]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c936:	7d5b      	ldrb	r3, [r3, #21]
 801c938:	3320      	adds	r3, #32
 801c93a:	b2da      	uxtb	r2, r3
 801c93c:	4b02      	ldr	r3, [pc, #8]	; (801c948 <CaptureExtEEPSnapshot_SingleShot+0xd8>)
 801c93e:	755a      	strb	r2, [r3, #21]

}
 801c940:	bf00      	nop
 801c942:	3710      	adds	r7, #16
 801c944:	46bd      	mov	sp, r7
 801c946:	bd80      	pop	{r7, pc}
 801c948:	20000278 	.word	0x20000278
 801c94c:	20004d0c 	.word	0x20004d0c
 801c950:	2000028e 	.word	0x2000028e
 801c954:	200049a8 	.word	0x200049a8

0801c958 <ResetRecords>:

void ResetRecords(void){
 801c958:	b480      	push	{r7}
 801c95a:	af00      	add	r7, sp, #0
	Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL = 0;
 801c95c:	4b09      	ldr	r3, [pc, #36]	; (801c984 <ResetRecords+0x2c>)
 801c95e:	2200      	movs	r2, #0
 801c960:	749a      	strb	r2, [r3, #18]
	Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH = 0;
 801c962:	4b08      	ldr	r3, [pc, #32]	; (801c984 <ResetRecords+0x2c>)
 801c964:	2200      	movs	r2, #0
 801c966:	745a      	strb	r2, [r3, #17]
	Appl_EEPParam.stm32.ExtEepPage = 1;
 801c968:	4b06      	ldr	r3, [pc, #24]	; (801c984 <ResetRecords+0x2c>)
 801c96a:	2201      	movs	r2, #1
 801c96c:	751a      	strb	r2, [r3, #20]
	Appl_EEPParam.stm32.ExtEepOffset = 0;
 801c96e:	4b05      	ldr	r3, [pc, #20]	; (801c984 <ResetRecords+0x2c>)
 801c970:	2200      	movs	r2, #0
 801c972:	755a      	strb	r2, [r3, #21]
	Appl_diagActiveFault.EEPLogMemoryFull = 0;
 801c974:	4b04      	ldr	r3, [pc, #16]	; (801c988 <ResetRecords+0x30>)
 801c976:	2200      	movs	r2, #0
 801c978:	725a      	strb	r2, [r3, #9]
}
 801c97a:	bf00      	nop
 801c97c:	46bd      	mov	sp, r7
 801c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c982:	4770      	bx	lr
 801c984:	20000278 	.word	0x20000278
 801c988:	20004d0c 	.word	0x20004d0c

0801c98c <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 801c98c:	b480      	push	{r7}
 801c98e:	b083      	sub	sp, #12
 801c990:	af00      	add	r7, sp, #0
 801c992:	4603      	mov	r3, r0
 801c994:	460a      	mov	r2, r1
 801c996:	80fb      	strh	r3, [r7, #6]
 801c998:	4613      	mov	r3, r2
 801c99a:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<ATMEL_EEP_CHIP_PAGE_SIZE) return size;
 801c99c:	88fa      	ldrh	r2, [r7, #6]
 801c99e:	88bb      	ldrh	r3, [r7, #4]
 801c9a0:	4413      	add	r3, r2
 801c9a2:	2bff      	cmp	r3, #255	; 0xff
 801c9a4:	dc01      	bgt.n	801c9aa <bytestowrite+0x1e>
 801c9a6:	88fb      	ldrh	r3, [r7, #6]
 801c9a8:	e003      	b.n	801c9b2 <bytestowrite+0x26>
	else return ATMEL_EEP_CHIP_PAGE_SIZE-offset;
 801c9aa:	88bb      	ldrh	r3, [r7, #4]
 801c9ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801c9b0:	b29b      	uxth	r3, r3
}
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	370c      	adds	r7, #12
 801c9b6:	46bd      	mov	sp, r7
 801c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9bc:	4770      	bx	lr
	...

0801c9c0 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to ATMEL_EEP_CHIP_PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
ExtEEP_Error EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size, uint8_t eepchipaddress)
{
 801c9c0:	b580      	push	{r7, lr}
 801c9c2:	b08e      	sub	sp, #56	; 0x38
 801c9c4:	af04      	add	r7, sp, #16
 801c9c6:	60ba      	str	r2, [r7, #8]
 801c9c8:	461a      	mov	r2, r3
 801c9ca:	4603      	mov	r3, r0
 801c9cc:	81fb      	strh	r3, [r7, #14]
 801c9ce:	460b      	mov	r3, r1
 801c9d0:	81bb      	strh	r3, [r7, #12]
 801c9d2:	4613      	mov	r3, r2
 801c9d4:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef error;
	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(ATMEL_EEP_CHIP_PAGE_SIZE)/log(2);
 801c9d6:	2308      	movs	r3, #8
 801c9d8:	627b      	str	r3, [r7, #36]	; 0x24

	// calculate the start page and the end page
	uint16_t startPage = page;
 801c9da:	89fb      	ldrh	r3, [r7, #14]
 801c9dc:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t endPage = page + ((size+offset)/ATMEL_EEP_CHIP_PAGE_SIZE);
 801c9de:	88fa      	ldrh	r2, [r7, #6]
 801c9e0:	89bb      	ldrh	r3, [r7, #12]
 801c9e2:	4413      	add	r3, r2
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	da00      	bge.n	801c9ea <EEPROM_Write+0x2a>
 801c9e8:	33ff      	adds	r3, #255	; 0xff
 801c9ea:	121b      	asrs	r3, r3, #8
 801c9ec:	b29a      	uxth	r2, r3
 801c9ee:	89fb      	ldrh	r3, [r7, #14]
 801c9f0:	4413      	add	r3, r2
 801c9f2:	843b      	strh	r3, [r7, #32]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 801c9f4:	8c3a      	ldrh	r2, [r7, #32]
 801c9f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c9f8:	1ad3      	subs	r3, r2, r3
 801c9fa:	b29b      	uxth	r3, r3
 801c9fc:	3301      	adds	r3, #1
 801c9fe:	83fb      	strh	r3, [r7, #30]
	uint16_t pos=0;
 801ca00:	2300      	movs	r3, #0
 801ca02:	83bb      	strh	r3, [r7, #28]

	// write the data
	for (int i=0; i<numofpages; i++)
 801ca04:	2300      	movs	r3, #0
 801ca06:	61bb      	str	r3, [r7, #24]
 801ca08:	bf00      	nop
 801ca0a:	8bfb      	ldrh	r3, [r7, #30]
 801ca0c:	69ba      	ldr	r2, [r7, #24]
 801ca0e:	429a      	cmp	r2, r3
 801ca10:	da30      	bge.n	801ca74 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 801ca12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca16:	fa02 f303 	lsl.w	r3, r2, r3
 801ca1a:	b21a      	sxth	r2, r3
 801ca1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ca20:	4313      	orrs	r3, r2
 801ca22:	b21b      	sxth	r3, r3
 801ca24:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 801ca26:	89ba      	ldrh	r2, [r7, #12]
 801ca28:	88fb      	ldrh	r3, [r7, #6]
 801ca2a:	4611      	mov	r1, r2
 801ca2c:	4618      	mov	r0, r3
 801ca2e:	f7ff ffad 	bl	801c98c <bytestowrite>
 801ca32:	4603      	mov	r3, r0
 801ca34:	82bb      	strh	r3, [r7, #20]
		error = HAL_I2C_Mem_Write(EEPROM_I2C, (uint16_t)eepchipaddress, MemAddress, 2, &data[pos], bytesremaining, 50);
 801ca36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801ca3a:	b299      	uxth	r1, r3
 801ca3c:	8bbb      	ldrh	r3, [r7, #28]
 801ca3e:	68ba      	ldr	r2, [r7, #8]
 801ca40:	4413      	add	r3, r2
 801ca42:	8af8      	ldrh	r0, [r7, #22]
 801ca44:	2232      	movs	r2, #50	; 0x32
 801ca46:	9202      	str	r2, [sp, #8]
 801ca48:	8aba      	ldrh	r2, [r7, #20]
 801ca4a:	9201      	str	r2, [sp, #4]
 801ca4c:	9300      	str	r3, [sp, #0]
 801ca4e:	2302      	movs	r3, #2
 801ca50:	4602      	mov	r2, r0
 801ca52:	480a      	ldr	r0, [pc, #40]	; (801ca7c <EEPROM_Write+0xbc>)
 801ca54:	f7f7 fb30 	bl	80140b8 <HAL_I2C_Mem_Write>
 801ca58:	4603      	mov	r3, r0
 801ca5a:	74fb      	strb	r3, [r7, #19]
		if(HAL_OK != error){
 801ca5c:	7cfb      	ldrb	r3, [r7, #19]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d006      	beq.n	801ca70 <EEPROM_Write+0xb0>
			I2CFailLogCounter++;
 801ca62:	4b07      	ldr	r3, [pc, #28]	; (801ca80 <EEPROM_Write+0xc0>)
 801ca64:	681b      	ldr	r3, [r3, #0]
 801ca66:	3301      	adds	r3, #1
 801ca68:	4a05      	ldr	r2, [pc, #20]	; (801ca80 <EEPROM_Write+0xc0>)
 801ca6a:	6013      	str	r3, [r2, #0]
			return EXTEEP_BUSY;
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	e001      	b.n	801ca74 <EEPROM_Write+0xb4>
		}
		else{
			return EXTEEP_OK;
 801ca70:	2300      	movs	r3, #0
 801ca72:	e7ff      	b.n	801ca74 <EEPROM_Write+0xb4>
		size = size-bytesremaining;  // reduce the size of the bytes
		pos += bytesremaining;  // update the position for the data buffer

		HAL_Delay (5);  // Write cycle delay (5ms)
	}
}
 801ca74:	4618      	mov	r0, r3
 801ca76:	3728      	adds	r7, #40	; 0x28
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bd80      	pop	{r7, pc}
 801ca7c:	200049a8 	.word	0x200049a8
 801ca80:	20005004 	.word	0x20005004

0801ca84 <EEPROM_Read>:
 * @size is the size of the data
 */


ExtEEP_Error EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size, uint8_t eepchipaddress)
{
 801ca84:	b580      	push	{r7, lr}
 801ca86:	b08e      	sub	sp, #56	; 0x38
 801ca88:	af04      	add	r7, sp, #16
 801ca8a:	60ba      	str	r2, [r7, #8]
 801ca8c:	461a      	mov	r2, r3
 801ca8e:	4603      	mov	r3, r0
 801ca90:	81fb      	strh	r3, [r7, #14]
 801ca92:	460b      	mov	r3, r1
 801ca94:	81bb      	strh	r3, [r7, #12]
 801ca96:	4613      	mov	r3, r2
 801ca98:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef error;
	int paddrposition = log(ATMEL_EEP_CHIP_PAGE_SIZE)/log(2);
 801ca9a:	2308      	movs	r3, #8
 801ca9c:	627b      	str	r3, [r7, #36]	; 0x24

	uint16_t startPage = page;
 801ca9e:	89fb      	ldrh	r3, [r7, #14]
 801caa0:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t endPage = page + ((size+offset)/ATMEL_EEP_CHIP_PAGE_SIZE);
 801caa2:	88fa      	ldrh	r2, [r7, #6]
 801caa4:	89bb      	ldrh	r3, [r7, #12]
 801caa6:	4413      	add	r3, r2
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	da00      	bge.n	801caae <EEPROM_Read+0x2a>
 801caac:	33ff      	adds	r3, #255	; 0xff
 801caae:	121b      	asrs	r3, r3, #8
 801cab0:	b29a      	uxth	r2, r3
 801cab2:	89fb      	ldrh	r3, [r7, #14]
 801cab4:	4413      	add	r3, r2
 801cab6:	843b      	strh	r3, [r7, #32]

	uint16_t numofpages = (endPage-startPage) + 1;
 801cab8:	8c3a      	ldrh	r2, [r7, #32]
 801caba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cabc:	1ad3      	subs	r3, r2, r3
 801cabe:	b29b      	uxth	r3, r3
 801cac0:	3301      	adds	r3, #1
 801cac2:	83fb      	strh	r3, [r7, #30]
	uint16_t pos=0;
 801cac4:	2300      	movs	r3, #0
 801cac6:	83bb      	strh	r3, [r7, #28]

	for (int i=0; i<numofpages; i++)
 801cac8:	2300      	movs	r3, #0
 801caca:	61bb      	str	r3, [r7, #24]
 801cacc:	bf00      	nop
 801cace:	8bfb      	ldrh	r3, [r7, #30]
 801cad0:	69ba      	ldr	r2, [r7, #24]
 801cad2:	429a      	cmp	r2, r3
 801cad4:	da3d      	bge.n	801cb52 <EEPROM_Read+0xce>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 801cad6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cada:	fa02 f303 	lsl.w	r3, r2, r3
 801cade:	b21a      	sxth	r2, r3
 801cae0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801cae4:	4313      	orrs	r3, r2
 801cae6:	b21b      	sxth	r3, r3
 801cae8:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 801caea:	89ba      	ldrh	r2, [r7, #12]
 801caec:	88fb      	ldrh	r3, [r7, #6]
 801caee:	4611      	mov	r1, r2
 801caf0:	4618      	mov	r0, r3
 801caf2:	f7ff ff4b 	bl	801c98c <bytestowrite>
 801caf6:	4603      	mov	r3, r0
 801caf8:	82bb      	strh	r3, [r7, #20]
		error = HAL_I2C_Mem_Read(EEPROM_I2C, (uint16_t)eepchipaddress, MemAddress, 2, &data[pos], bytesremaining, 50);
 801cafa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801cafe:	b299      	uxth	r1, r3
 801cb00:	8bbb      	ldrh	r3, [r7, #28]
 801cb02:	68ba      	ldr	r2, [r7, #8]
 801cb04:	4413      	add	r3, r2
 801cb06:	8af8      	ldrh	r0, [r7, #22]
 801cb08:	2232      	movs	r2, #50	; 0x32
 801cb0a:	9202      	str	r2, [sp, #8]
 801cb0c:	8aba      	ldrh	r2, [r7, #20]
 801cb0e:	9201      	str	r2, [sp, #4]
 801cb10:	9300      	str	r3, [sp, #0]
 801cb12:	2302      	movs	r3, #2
 801cb14:	4602      	mov	r2, r0
 801cb16:	4811      	ldr	r0, [pc, #68]	; (801cb5c <EEPROM_Read+0xd8>)
 801cb18:	f7f7 fbc8 	bl	80142ac <HAL_I2C_Mem_Read>
 801cb1c:	4603      	mov	r3, r0
 801cb1e:	74fb      	strb	r3, [r7, #19]
		startPage += 1;
 801cb20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cb22:	3301      	adds	r3, #1
 801cb24:	847b      	strh	r3, [r7, #34]	; 0x22
		offset=0;
 801cb26:	2300      	movs	r3, #0
 801cb28:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 801cb2a:	88fa      	ldrh	r2, [r7, #6]
 801cb2c:	8abb      	ldrh	r3, [r7, #20]
 801cb2e:	1ad3      	subs	r3, r2, r3
 801cb30:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 801cb32:	8bba      	ldrh	r2, [r7, #28]
 801cb34:	8abb      	ldrh	r3, [r7, #20]
 801cb36:	4413      	add	r3, r2
 801cb38:	83bb      	strh	r3, [r7, #28]
		if(HAL_OK != error){
 801cb3a:	7cfb      	ldrb	r3, [r7, #19]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d006      	beq.n	801cb4e <EEPROM_Read+0xca>
			I2CFailLogCounter++;
 801cb40:	4b07      	ldr	r3, [pc, #28]	; (801cb60 <EEPROM_Read+0xdc>)
 801cb42:	681b      	ldr	r3, [r3, #0]
 801cb44:	3301      	adds	r3, #1
 801cb46:	4a06      	ldr	r2, [pc, #24]	; (801cb60 <EEPROM_Read+0xdc>)
 801cb48:	6013      	str	r3, [r2, #0]
			return EXTEEP_BUSY;
 801cb4a:	2301      	movs	r3, #1
 801cb4c:	e001      	b.n	801cb52 <EEPROM_Read+0xce>
		}
		else{
			return EXTEEP_OK;
 801cb4e:	2300      	movs	r3, #0
 801cb50:	e7ff      	b.n	801cb52 <EEPROM_Read+0xce>
		}
	}
}
 801cb52:	4618      	mov	r0, r3
 801cb54:	3728      	adds	r7, #40	; 0x28
 801cb56:	46bd      	mov	sp, r7
 801cb58:	bd80      	pop	{r7, pc}
 801cb5a:	bf00      	nop
 801cb5c:	200049a8 	.word	0x200049a8
 801cb60:	20005004 	.word	0x20005004

0801cb64 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
ExtEEP_Error EEPROM_PageErase (uint16_t page,uint8_t eepchipaddress)
{
 801cb64:	b580      	push	{r7, lr}
 801cb66:	b0c8      	sub	sp, #288	; 0x120
 801cb68:	af04      	add	r7, sp, #16
 801cb6a:	4602      	mov	r2, r0
 801cb6c:	1dbb      	adds	r3, r7, #6
 801cb6e:	801a      	strh	r2, [r3, #0]
 801cb70:	1d7b      	adds	r3, r7, #5
 801cb72:	460a      	mov	r2, r1
 801cb74:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef error;
	// calculate the memory address based on the page number
	int paddrposition = log(ATMEL_EEP_CHIP_PAGE_SIZE)/log(2);
 801cb76:	2308      	movs	r3, #8
 801cb78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint16_t MemAddress = page<<paddrposition;
 801cb7c:	1dbb      	adds	r3, r7, #6
 801cb7e:	881a      	ldrh	r2, [r3, #0]
 801cb80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801cb84:	fa02 f303 	lsl.w	r3, r2, r3
 801cb88:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a


	// create a buffer to store the reset values
	uint8_t data[ATMEL_EEP_CHIP_PAGE_SIZE];
	memset(data,0xff,ATMEL_EEP_CHIP_PAGE_SIZE);
 801cb8c:	f107 0308 	add.w	r3, r7, #8
 801cb90:	f44f 7280 	mov.w	r2, #256	; 0x100
 801cb94:	21ff      	movs	r1, #255	; 0xff
 801cb96:	4618      	mov	r0, r3
 801cb98:	f007 faee 	bl	8024178 <memset>

	// write the data to the EEPROM
	error = HAL_I2C_Mem_Write(EEPROM_I2C, (uint16_t)eepchipaddress, MemAddress, 2, data, ATMEL_EEP_CHIP_PAGE_SIZE, 1000);
 801cb9c:	1d7b      	adds	r3, r7, #5
 801cb9e:	781b      	ldrb	r3, [r3, #0]
 801cba0:	b299      	uxth	r1, r3
 801cba2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 801cba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801cbaa:	9302      	str	r3, [sp, #8]
 801cbac:	f44f 7380 	mov.w	r3, #256	; 0x100
 801cbb0:	9301      	str	r3, [sp, #4]
 801cbb2:	f107 0308 	add.w	r3, r7, #8
 801cbb6:	9300      	str	r3, [sp, #0]
 801cbb8:	2302      	movs	r3, #2
 801cbba:	480d      	ldr	r0, [pc, #52]	; (801cbf0 <EEPROM_PageErase+0x8c>)
 801cbbc:	f7f7 fa7c 	bl	80140b8 <HAL_I2C_Mem_Write>
 801cbc0:	4603      	mov	r3, r0
 801cbc2:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109

	HAL_Delay (5);  // write cycle delay
 801cbc6:	2005      	movs	r0, #5
 801cbc8:	f7f5 fc1c 	bl	8012404 <HAL_Delay>

	if(HAL_OK != error){
 801cbcc:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d006      	beq.n	801cbe2 <EEPROM_PageErase+0x7e>
		I2CFailLogCounter++;
 801cbd4:	4b07      	ldr	r3, [pc, #28]	; (801cbf4 <EEPROM_PageErase+0x90>)
 801cbd6:	681b      	ldr	r3, [r3, #0]
 801cbd8:	3301      	adds	r3, #1
 801cbda:	4a06      	ldr	r2, [pc, #24]	; (801cbf4 <EEPROM_PageErase+0x90>)
 801cbdc:	6013      	str	r3, [r2, #0]
		return EXTEEP_BUSY;
 801cbde:	2301      	movs	r3, #1
 801cbe0:	e000      	b.n	801cbe4 <EEPROM_PageErase+0x80>
	}
	else{
		return EXTEEP_OK;
 801cbe2:	2300      	movs	r3, #0
	}
}
 801cbe4:	4618      	mov	r0, r3
 801cbe6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801cbea:	46bd      	mov	sp, r7
 801cbec:	bd80      	pop	{r7, pc}
 801cbee:	bf00      	nop
 801cbf0:	200049a8 	.word	0x200049a8
 801cbf4:	20005004 	.word	0x20005004

0801cbf8 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 801cbf8:	b580      	push	{r7, lr}
 801cbfa:	b084      	sub	sp, #16
 801cbfc:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 801cbfe:	2306      	movs	r3, #6
 801cc00:	817b      	strh	r3, [r7, #10]
 801cc02:	2306      	movs	r3, #6
 801cc04:	813b      	strh	r3, [r7, #8]
  uint16_t VarIdx = 0;
 801cc06:	2300      	movs	r3, #0
 801cc08:	81fb      	strh	r3, [r7, #14]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 801cc0a:	2300      	movs	r3, #0
 801cc0c:	80fb      	strh	r3, [r7, #6]
 801cc0e:	2300      	movs	r3, #0
 801cc10:	80bb      	strh	r3, [r7, #4]
  int16_t x = -1;
 801cc12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc16:	81bb      	strh	r3, [r7, #12]
  uint16_t  FlashStatus = FLASH_COMPLETE;
 801cc18:	2303      	movs	r3, #3
 801cc1a:	807b      	strh	r3, [r7, #2]

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801cc1c:	4b9d      	ldr	r3, [pc, #628]	; (801ce94 <EE_Init+0x29c>)
 801cc1e:	881b      	ldrh	r3, [r3, #0]
 801cc20:	817b      	strh	r3, [r7, #10]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801cc22:	4b9d      	ldr	r3, [pc, #628]	; (801ce98 <EE_Init+0x2a0>)
 801cc24:	881b      	ldrh	r3, [r3, #0]
 801cc26:	813b      	strh	r3, [r7, #8]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 801cc28:	897b      	ldrh	r3, [r7, #10]
 801cc2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cc2e:	4293      	cmp	r3, r2
 801cc30:	d00b      	beq.n	801cc4a <EE_Init+0x52>
 801cc32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cc36:	f280 8117 	bge.w	801ce68 <EE_Init+0x270>
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	f000 80ad 	beq.w	801cd9a <EE_Init+0x1a2>
 801cc40:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801cc44:	4293      	cmp	r3, r2
 801cc46:	d033      	beq.n	801ccb0 <EE_Init+0xb8>
 801cc48:	e10e      	b.n	801ce68 <EE_Init+0x270>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 801cc4a:	893b      	ldrh	r3, [r7, #8]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d109      	bne.n	801cc64 <EE_Init+0x6c>
      {
        /* Erase Page0 */
        FLASH_Erase_Sector(PAGE0_ID,VOLTAGE_RANGE);
 801cc50:	2102      	movs	r1, #2
 801cc52:	2002      	movs	r0, #2
 801cc54:	f7f6 feac 	bl	80139b0 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cc58:	887b      	ldrh	r3, [r7, #2]
 801cc5a:	2b03      	cmp	r3, #3
 801cc5c:	f000 810d 	beq.w	801ce7a <EE_Init+0x282>
        {
          return FlashStatus;
 801cc60:	887b      	ldrh	r3, [r7, #2]
 801cc62:	e112      	b.n	801ce8a <EE_Init+0x292>
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 801cc64:	893b      	ldrh	r3, [r7, #8]
 801cc66:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801cc6a:	4293      	cmp	r3, r2
 801cc6c:	d116      	bne.n	801cc9c <EE_Init+0xa4>
      {
        /* Erase Page0 */
        FLASH_Erase_Sector(PAGE0_ID, VOLTAGE_RANGE);
 801cc6e:	2102      	movs	r1, #2
 801cc70:	2002      	movs	r0, #2
 801cc72:	f7f6 fe9d 	bl	80139b0 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cc76:	887b      	ldrh	r3, [r7, #2]
 801cc78:	2b03      	cmp	r3, #3
 801cc7a:	d001      	beq.n	801cc80 <EE_Init+0x88>
        {
          return FlashStatus;
 801cc7c:	887b      	ldrh	r3, [r7, #2]
 801cc7e:	e104      	b.n	801ce8a <EE_Init+0x292>
        }
        /* Mark Page1 as valid */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGE1_BASE_ADDRESS, VALID_PAGE);
 801cc80:	f04f 0200 	mov.w	r2, #0
 801cc84:	f04f 0300 	mov.w	r3, #0
 801cc88:	4983      	ldr	r1, [pc, #524]	; (801ce98 <EE_Init+0x2a0>)
 801cc8a:	2001      	movs	r0, #1
 801cc8c:	f7f6 fcda 	bl	8013644 <HAL_FLASH_Program>
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cc90:	887b      	ldrh	r3, [r7, #2]
 801cc92:	2b03      	cmp	r3, #3
 801cc94:	f000 80f1 	beq.w	801ce7a <EE_Init+0x282>
        {
          return FlashStatus;
 801cc98:	887b      	ldrh	r3, [r7, #2]
 801cc9a:	e0f6      	b.n	801ce8a <EE_Init+0x292>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 801cc9c:	f000 f972 	bl	801cf84 <EE_Format>
 801cca0:	4603      	mov	r3, r0
 801cca2:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cca4:	887b      	ldrh	r3, [r7, #2]
 801cca6:	2b03      	cmp	r3, #3
 801cca8:	f000 80e7 	beq.w	801ce7a <EE_Init+0x282>
        {
          return FlashStatus;
 801ccac:	887b      	ldrh	r3, [r7, #2]
 801ccae:	e0ec      	b.n	801ce8a <EE_Init+0x292>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 801ccb0:	893b      	ldrh	r3, [r7, #8]
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d14d      	bne.n	801cd52 <EE_Init+0x15a>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801ccb6:	2300      	movs	r3, #0
 801ccb8:	81fb      	strh	r3, [r7, #14]
 801ccba:	e030      	b.n	801cd1e <EE_Init+0x126>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801ccbc:	4b77      	ldr	r3, [pc, #476]	; (801ce9c <EE_Init+0x2a4>)
 801ccbe:	881b      	ldrh	r3, [r3, #0]
 801ccc0:	b29a      	uxth	r2, r3
 801ccc2:	89fb      	ldrh	r3, [r7, #14]
 801ccc4:	4976      	ldr	r1, [pc, #472]	; (801cea0 <EE_Init+0x2a8>)
 801ccc6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801ccca:	429a      	cmp	r2, r3
 801cccc:	d101      	bne.n	801ccd2 <EE_Init+0xda>
          {
            x = VarIdx;
 801ccce:	89fb      	ldrh	r3, [r7, #14]
 801ccd0:	81bb      	strh	r3, [r7, #12]
          }
          if (VarIdx != x)
 801ccd2:	89fa      	ldrh	r2, [r7, #14]
 801ccd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ccd8:	429a      	cmp	r2, r3
 801ccda:	d01d      	beq.n	801cd18 <EE_Init+0x120>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801ccdc:	89fb      	ldrh	r3, [r7, #14]
 801ccde:	4a70      	ldr	r2, [pc, #448]	; (801cea0 <EE_Init+0x2a8>)
 801cce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801cce4:	496f      	ldr	r1, [pc, #444]	; (801cea4 <EE_Init+0x2ac>)
 801cce6:	4618      	mov	r0, r3
 801cce8:	f000 f8e0 	bl	801ceac <EE_ReadVariable>
 801ccec:	4603      	mov	r3, r0
 801ccee:	80bb      	strh	r3, [r7, #4]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 801ccf0:	88bb      	ldrh	r3, [r7, #4]
 801ccf2:	2b01      	cmp	r3, #1
 801ccf4:	d010      	beq.n	801cd18 <EE_Init+0x120>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801ccf6:	89fb      	ldrh	r3, [r7, #14]
 801ccf8:	4a69      	ldr	r2, [pc, #420]	; (801cea0 <EE_Init+0x2a8>)
 801ccfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ccfe:	4a69      	ldr	r2, [pc, #420]	; (801cea4 <EE_Init+0x2ac>)
 801cd00:	8812      	ldrh	r2, [r2, #0]
 801cd02:	4611      	mov	r1, r2
 801cd04:	4618      	mov	r0, r3
 801cd06:	f000 f9a9 	bl	801d05c <EE_VerifyPageFullWriteVariable>
 801cd0a:	4603      	mov	r3, r0
 801cd0c:	80fb      	strh	r3, [r7, #6]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 801cd0e:	88fb      	ldrh	r3, [r7, #6]
 801cd10:	2b03      	cmp	r3, #3
 801cd12:	d001      	beq.n	801cd18 <EE_Init+0x120>
              {
                return EepromStatus;
 801cd14:	88fb      	ldrh	r3, [r7, #6]
 801cd16:	e0b8      	b.n	801ce8a <EE_Init+0x292>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801cd18:	89fb      	ldrh	r3, [r7, #14]
 801cd1a:	3301      	adds	r3, #1
 801cd1c:	81fb      	strh	r3, [r7, #14]
 801cd1e:	89fb      	ldrh	r3, [r7, #14]
 801cd20:	2b15      	cmp	r3, #21
 801cd22:	d9cb      	bls.n	801ccbc <EE_Init+0xc4>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGE0_BASE_ADDRESS, VALID_PAGE);
 801cd24:	f04f 0200 	mov.w	r2, #0
 801cd28:	f04f 0300 	mov.w	r3, #0
 801cd2c:	4959      	ldr	r1, [pc, #356]	; (801ce94 <EE_Init+0x29c>)
 801cd2e:	2001      	movs	r0, #1
 801cd30:	f7f6 fc88 	bl	8013644 <HAL_FLASH_Program>
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cd34:	887b      	ldrh	r3, [r7, #2]
 801cd36:	2b03      	cmp	r3, #3
 801cd38:	d001      	beq.n	801cd3e <EE_Init+0x146>
        {
          return FlashStatus;
 801cd3a:	887b      	ldrh	r3, [r7, #2]
 801cd3c:	e0a5      	b.n	801ce8a <EE_Init+0x292>
        }
        /* Erase Page1 */
        FLASH_Erase_Sector(PAGE1_ID, VOLTAGE_RANGE);
 801cd3e:	2102      	movs	r1, #2
 801cd40:	2003      	movs	r0, #3
 801cd42:	f7f6 fe35 	bl	80139b0 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cd46:	887b      	ldrh	r3, [r7, #2]
 801cd48:	2b03      	cmp	r3, #3
 801cd4a:	f000 8098 	beq.w	801ce7e <EE_Init+0x286>
        {
          return FlashStatus;
 801cd4e:	887b      	ldrh	r3, [r7, #2]
 801cd50:	e09b      	b.n	801ce8a <EE_Init+0x292>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 801cd52:	893b      	ldrh	r3, [r7, #8]
 801cd54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cd58:	4293      	cmp	r3, r2
 801cd5a:	d115      	bne.n	801cd88 <EE_Init+0x190>
      {
        /* Erase Page1 */
        FLASH_Erase_Sector(PAGE1_ID, VOLTAGE_RANGE);
 801cd5c:	2102      	movs	r1, #2
 801cd5e:	2003      	movs	r0, #3
 801cd60:	f7f6 fe26 	bl	80139b0 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cd64:	887b      	ldrh	r3, [r7, #2]
 801cd66:	2b03      	cmp	r3, #3
 801cd68:	d001      	beq.n	801cd6e <EE_Init+0x176>
        {
          return FlashStatus;
 801cd6a:	887b      	ldrh	r3, [r7, #2]
 801cd6c:	e08d      	b.n	801ce8a <EE_Init+0x292>
        }
        /* Mark Page0 as valid */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGE0_BASE_ADDRESS, VALID_PAGE);
 801cd6e:	f04f 0200 	mov.w	r2, #0
 801cd72:	f04f 0300 	mov.w	r3, #0
 801cd76:	4947      	ldr	r1, [pc, #284]	; (801ce94 <EE_Init+0x29c>)
 801cd78:	2001      	movs	r0, #1
 801cd7a:	f7f6 fc63 	bl	8013644 <HAL_FLASH_Program>
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cd7e:	887b      	ldrh	r3, [r7, #2]
 801cd80:	2b03      	cmp	r3, #3
 801cd82:	d07c      	beq.n	801ce7e <EE_Init+0x286>
        {
          return FlashStatus;
 801cd84:	887b      	ldrh	r3, [r7, #2]
 801cd86:	e080      	b.n	801ce8a <EE_Init+0x292>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 801cd88:	f000 f8fc 	bl	801cf84 <EE_Format>
 801cd8c:	4603      	mov	r3, r0
 801cd8e:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cd90:	887b      	ldrh	r3, [r7, #2]
 801cd92:	2b03      	cmp	r3, #3
 801cd94:	d073      	beq.n	801ce7e <EE_Init+0x286>
        {
          return FlashStatus;
 801cd96:	887b      	ldrh	r3, [r7, #2]
 801cd98:	e077      	b.n	801ce8a <EE_Init+0x292>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801cd9a:	893b      	ldrh	r3, [r7, #8]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d108      	bne.n	801cdb2 <EE_Init+0x1ba>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 801cda0:	f000 f8f0 	bl	801cf84 <EE_Format>
 801cda4:	4603      	mov	r3, r0
 801cda6:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cda8:	887b      	ldrh	r3, [r7, #2]
 801cdaa:	2b03      	cmp	r3, #3
 801cdac:	d069      	beq.n	801ce82 <EE_Init+0x28a>
        {
          return FlashStatus;
 801cdae:	887b      	ldrh	r3, [r7, #2]
 801cdb0:	e06b      	b.n	801ce8a <EE_Init+0x292>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 801cdb2:	893b      	ldrh	r3, [r7, #8]
 801cdb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cdb8:	4293      	cmp	r3, r2
 801cdba:	d108      	bne.n	801cdce <EE_Init+0x1d6>
      {
        /* Erase Page1 */
        FLASH_Erase_Sector(PAGE1_ID, VOLTAGE_RANGE);
 801cdbc:	2102      	movs	r1, #2
 801cdbe:	2003      	movs	r0, #3
 801cdc0:	f7f6 fdf6 	bl	80139b0 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801cdc4:	887b      	ldrh	r3, [r7, #2]
 801cdc6:	2b03      	cmp	r3, #3
 801cdc8:	d05b      	beq.n	801ce82 <EE_Init+0x28a>
        {
          return FlashStatus;
 801cdca:	887b      	ldrh	r3, [r7, #2]
 801cdcc:	e05d      	b.n	801ce8a <EE_Init+0x292>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801cdce:	2300      	movs	r3, #0
 801cdd0:	81fb      	strh	r3, [r7, #14]
 801cdd2:	e030      	b.n	801ce36 <EE_Init+0x23e>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801cdd4:	4b34      	ldr	r3, [pc, #208]	; (801cea8 <EE_Init+0x2b0>)
 801cdd6:	881b      	ldrh	r3, [r3, #0]
 801cdd8:	b29a      	uxth	r2, r3
 801cdda:	89fb      	ldrh	r3, [r7, #14]
 801cddc:	4930      	ldr	r1, [pc, #192]	; (801cea0 <EE_Init+0x2a8>)
 801cdde:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801cde2:	429a      	cmp	r2, r3
 801cde4:	d101      	bne.n	801cdea <EE_Init+0x1f2>
          {
            x = VarIdx;
 801cde6:	89fb      	ldrh	r3, [r7, #14]
 801cde8:	81bb      	strh	r3, [r7, #12]
          }
          if (VarIdx != x)
 801cdea:	89fa      	ldrh	r2, [r7, #14]
 801cdec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801cdf0:	429a      	cmp	r2, r3
 801cdf2:	d01d      	beq.n	801ce30 <EE_Init+0x238>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801cdf4:	89fb      	ldrh	r3, [r7, #14]
 801cdf6:	4a2a      	ldr	r2, [pc, #168]	; (801cea0 <EE_Init+0x2a8>)
 801cdf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801cdfc:	4929      	ldr	r1, [pc, #164]	; (801cea4 <EE_Init+0x2ac>)
 801cdfe:	4618      	mov	r0, r3
 801ce00:	f000 f854 	bl	801ceac <EE_ReadVariable>
 801ce04:	4603      	mov	r3, r0
 801ce06:	80bb      	strh	r3, [r7, #4]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 801ce08:	88bb      	ldrh	r3, [r7, #4]
 801ce0a:	2b01      	cmp	r3, #1
 801ce0c:	d010      	beq.n	801ce30 <EE_Init+0x238>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801ce0e:	89fb      	ldrh	r3, [r7, #14]
 801ce10:	4a23      	ldr	r2, [pc, #140]	; (801cea0 <EE_Init+0x2a8>)
 801ce12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ce16:	4a23      	ldr	r2, [pc, #140]	; (801cea4 <EE_Init+0x2ac>)
 801ce18:	8812      	ldrh	r2, [r2, #0]
 801ce1a:	4611      	mov	r1, r2
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	f000 f91d 	bl	801d05c <EE_VerifyPageFullWriteVariable>
 801ce22:	4603      	mov	r3, r0
 801ce24:	80fb      	strh	r3, [r7, #6]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 801ce26:	88fb      	ldrh	r3, [r7, #6]
 801ce28:	2b03      	cmp	r3, #3
 801ce2a:	d001      	beq.n	801ce30 <EE_Init+0x238>
              {
                return EepromStatus;
 801ce2c:	88fb      	ldrh	r3, [r7, #6]
 801ce2e:	e02c      	b.n	801ce8a <EE_Init+0x292>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801ce30:	89fb      	ldrh	r3, [r7, #14]
 801ce32:	3301      	adds	r3, #1
 801ce34:	81fb      	strh	r3, [r7, #14]
 801ce36:	89fb      	ldrh	r3, [r7, #14]
 801ce38:	2b15      	cmp	r3, #21
 801ce3a:	d9cb      	bls.n	801cdd4 <EE_Init+0x1dc>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGE1_BASE_ADDRESS, VALID_PAGE);
 801ce3c:	f04f 0200 	mov.w	r2, #0
 801ce40:	f04f 0300 	mov.w	r3, #0
 801ce44:	4914      	ldr	r1, [pc, #80]	; (801ce98 <EE_Init+0x2a0>)
 801ce46:	2001      	movs	r0, #1
 801ce48:	f7f6 fbfc 	bl	8013644 <HAL_FLASH_Program>
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801ce4c:	887b      	ldrh	r3, [r7, #2]
 801ce4e:	2b03      	cmp	r3, #3
 801ce50:	d001      	beq.n	801ce56 <EE_Init+0x25e>
        {
          return FlashStatus;
 801ce52:	887b      	ldrh	r3, [r7, #2]
 801ce54:	e019      	b.n	801ce8a <EE_Init+0x292>
        }
        /* Erase Page0 */
        FLASH_Erase_Sector(PAGE0_ID, VOLTAGE_RANGE);
 801ce56:	2102      	movs	r1, #2
 801ce58:	2002      	movs	r0, #2
 801ce5a:	f7f6 fda9 	bl	80139b0 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801ce5e:	887b      	ldrh	r3, [r7, #2]
 801ce60:	2b03      	cmp	r3, #3
 801ce62:	d00e      	beq.n	801ce82 <EE_Init+0x28a>
        {
          return FlashStatus;
 801ce64:	887b      	ldrh	r3, [r7, #2]
 801ce66:	e010      	b.n	801ce8a <EE_Init+0x292>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 801ce68:	f000 f88c 	bl	801cf84 <EE_Format>
 801ce6c:	4603      	mov	r3, r0
 801ce6e:	807b      	strh	r3, [r7, #2]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 801ce70:	887b      	ldrh	r3, [r7, #2]
 801ce72:	2b03      	cmp	r3, #3
 801ce74:	d007      	beq.n	801ce86 <EE_Init+0x28e>
      {
        return FlashStatus;
 801ce76:	887b      	ldrh	r3, [r7, #2]
 801ce78:	e007      	b.n	801ce8a <EE_Init+0x292>
      break;
 801ce7a:	bf00      	nop
 801ce7c:	e004      	b.n	801ce88 <EE_Init+0x290>
      break;
 801ce7e:	bf00      	nop
 801ce80:	e002      	b.n	801ce88 <EE_Init+0x290>
      break;
 801ce82:	bf00      	nop
 801ce84:	e000      	b.n	801ce88 <EE_Init+0x290>
      }
      break;
 801ce86:	bf00      	nop
  }

  return FLASH_COMPLETE;
 801ce88:	2303      	movs	r3, #3
}
 801ce8a:	4618      	mov	r0, r3
 801ce8c:	3710      	adds	r7, #16
 801ce8e:	46bd      	mov	sp, r7
 801ce90:	bd80      	pop	{r7, pc}
 801ce92:	bf00      	nop
 801ce94:	08008000 	.word	0x08008000
 801ce98:	0800c000 	.word	0x0800c000
 801ce9c:	08008006 	.word	0x08008006
 801cea0:	20004f9c 	.word	0x20004f9c
 801cea4:	2000091a 	.word	0x2000091a
 801cea8:	0800c006 	.word	0x0800c006

0801ceac <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 801ceac:	b580      	push	{r7, lr}
 801ceae:	b086      	sub	sp, #24
 801ceb0:	af00      	add	r7, sp, #0
 801ceb2:	4603      	mov	r3, r0
 801ceb4:	6039      	str	r1, [r7, #0]
 801ceb6:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 801ceb8:	2300      	movs	r3, #0
 801ceba:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 801cebc:	f245 5355 	movw	r3, #21845	; 0x5555
 801cec0:	81bb      	strh	r3, [r7, #12]
 801cec2:	2301      	movs	r3, #1
 801cec4:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 801cec6:	4b1c      	ldr	r3, [pc, #112]	; (801cf38 <EE_ReadVariable+0x8c>)
 801cec8:	613b      	str	r3, [r7, #16]
 801ceca:	4b1b      	ldr	r3, [pc, #108]	; (801cf38 <EE_ReadVariable+0x8c>)
 801cecc:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801cece:	2000      	movs	r0, #0
 801ced0:	f000 f87e 	bl	801cfd0 <EE_FindValidPage>
 801ced4:	4603      	mov	r3, r0
 801ced6:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 801ced8:	89fb      	ldrh	r3, [r7, #14]
 801ceda:	2bab      	cmp	r3, #171	; 0xab
 801cedc:	d101      	bne.n	801cee2 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 801cede:	23ab      	movs	r3, #171	; 0xab
 801cee0:	e025      	b.n	801cf2e <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801cee2:	89fb      	ldrh	r3, [r7, #14]
 801cee4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801cee8:	3302      	adds	r3, #2
 801ceea:	039b      	lsls	r3, r3, #14
 801ceec:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801ceee:	89fb      	ldrh	r3, [r7, #14]
 801cef0:	3301      	adds	r3, #1
 801cef2:	039a      	lsls	r2, r3, #14
 801cef4:	4b11      	ldr	r3, [pc, #68]	; (801cf3c <EE_ReadVariable+0x90>)
 801cef6:	4413      	add	r3, r2
 801cef8:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 801cefa:	e012      	b.n	801cf22 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 801cefc:	693b      	ldr	r3, [r7, #16]
 801cefe:	881b      	ldrh	r3, [r3, #0]
 801cf00:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 801cf02:	89ba      	ldrh	r2, [r7, #12]
 801cf04:	88fb      	ldrh	r3, [r7, #6]
 801cf06:	429a      	cmp	r2, r3
 801cf08:	d108      	bne.n	801cf1c <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 801cf0a:	693b      	ldr	r3, [r7, #16]
 801cf0c:	3b02      	subs	r3, #2
 801cf0e:	881b      	ldrh	r3, [r3, #0]
 801cf10:	b29a      	uxth	r2, r3
 801cf12:	683b      	ldr	r3, [r7, #0]
 801cf14:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 801cf16:	2300      	movs	r3, #0
 801cf18:	82fb      	strh	r3, [r7, #22]

      break;
 801cf1a:	e007      	b.n	801cf2c <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 801cf1c:	693b      	ldr	r3, [r7, #16]
 801cf1e:	3b04      	subs	r3, #4
 801cf20:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 801cf22:	68bb      	ldr	r3, [r7, #8]
 801cf24:	3302      	adds	r3, #2
 801cf26:	693a      	ldr	r2, [r7, #16]
 801cf28:	429a      	cmp	r2, r3
 801cf2a:	d8e7      	bhi.n	801cefc <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 801cf2c:	8afb      	ldrh	r3, [r7, #22]
}
 801cf2e:	4618      	mov	r0, r3
 801cf30:	3718      	adds	r7, #24
 801cf32:	46bd      	mov	sp, r7
 801cf34:	bd80      	pop	{r7, pc}
 801cf36:	bf00      	nop
 801cf38:	08008000 	.word	0x08008000
 801cf3c:	08007ffe 	.word	0x08007ffe

0801cf40 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 801cf40:	b580      	push	{r7, lr}
 801cf42:	b084      	sub	sp, #16
 801cf44:	af00      	add	r7, sp, #0
 801cf46:	4603      	mov	r3, r0
 801cf48:	460a      	mov	r2, r1
 801cf4a:	80fb      	strh	r3, [r7, #6]
 801cf4c:	4613      	mov	r3, r2
 801cf4e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 801cf50:	2300      	movs	r3, #0
 801cf52:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801cf54:	88ba      	ldrh	r2, [r7, #4]
 801cf56:	88fb      	ldrh	r3, [r7, #6]
 801cf58:	4611      	mov	r1, r2
 801cf5a:	4618      	mov	r0, r3
 801cf5c:	f000 f87e 	bl	801d05c <EE_VerifyPageFullWriteVariable>
 801cf60:	4603      	mov	r3, r0
 801cf62:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 801cf64:	89fb      	ldrh	r3, [r7, #14]
 801cf66:	2b80      	cmp	r3, #128	; 0x80
 801cf68:	d107      	bne.n	801cf7a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 801cf6a:	88ba      	ldrh	r2, [r7, #4]
 801cf6c:	88fb      	ldrh	r3, [r7, #6]
 801cf6e:	4611      	mov	r1, r2
 801cf70:	4618      	mov	r0, r3
 801cf72:	f000 f8c9 	bl	801d108 <EE_PageTransfer>
 801cf76:	4603      	mov	r3, r0
 801cf78:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 801cf7a:	89fb      	ldrh	r3, [r7, #14]
}
 801cf7c:	4618      	mov	r0, r3
 801cf7e:	3710      	adds	r7, #16
 801cf80:	46bd      	mov	sp, r7
 801cf82:	bd80      	pop	{r7, pc}

0801cf84 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static FLASH_Status EE_Format(void)
{
 801cf84:	b580      	push	{r7, lr}
 801cf86:	b082      	sub	sp, #8
 801cf88:	af00      	add	r7, sp, #0
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 801cf8a:	2303      	movs	r3, #3
 801cf8c:	71fb      	strb	r3, [r7, #7]

  /* Erase Page0 */
  FLASH_Erase_Sector(PAGE0_ID, VOLTAGE_RANGE);
 801cf8e:	2102      	movs	r1, #2
 801cf90:	2002      	movs	r0, #2
 801cf92:	f7f6 fd0d 	bl	80139b0 <FLASH_Erase_Sector>

  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 801cf96:	79fb      	ldrb	r3, [r7, #7]
 801cf98:	2b03      	cmp	r3, #3
 801cf9a:	d001      	beq.n	801cfa0 <EE_Format+0x1c>
  {
    return FlashStatus;
 801cf9c:	79fb      	ldrb	r3, [r7, #7]
 801cf9e:	e011      	b.n	801cfc4 <EE_Format+0x40>
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGE0_BASE_ADDRESS, VALID_PAGE);
 801cfa0:	f04f 0200 	mov.w	r2, #0
 801cfa4:	f04f 0300 	mov.w	r3, #0
 801cfa8:	4908      	ldr	r1, [pc, #32]	; (801cfcc <EE_Format+0x48>)
 801cfaa:	2001      	movs	r0, #1
 801cfac:	f7f6 fb4a 	bl	8013644 <HAL_FLASH_Program>

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 801cfb0:	79fb      	ldrb	r3, [r7, #7]
 801cfb2:	2b03      	cmp	r3, #3
 801cfb4:	d001      	beq.n	801cfba <EE_Format+0x36>
  {
    return FlashStatus;
 801cfb6:	79fb      	ldrb	r3, [r7, #7]
 801cfb8:	e004      	b.n	801cfc4 <EE_Format+0x40>
  }

  /* Erase Page1 */
  FLASH_Erase_Sector(PAGE1_ID, VOLTAGE_RANGE);
 801cfba:	2102      	movs	r1, #2
 801cfbc:	2003      	movs	r0, #3
 801cfbe:	f7f6 fcf7 	bl	80139b0 <FLASH_Erase_Sector>

  /* Return Page1 erase operation status */
  return FlashStatus;
 801cfc2:	79fb      	ldrb	r3, [r7, #7]
}
 801cfc4:	4618      	mov	r0, r3
 801cfc6:	3708      	adds	r7, #8
 801cfc8:	46bd      	mov	sp, r7
 801cfca:	bd80      	pop	{r7, pc}
 801cfcc:	08008000 	.word	0x08008000

0801cfd0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 801cfd0:	b480      	push	{r7}
 801cfd2:	b085      	sub	sp, #20
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	4603      	mov	r3, r0
 801cfd8:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 801cfda:	2306      	movs	r3, #6
 801cfdc:	81fb      	strh	r3, [r7, #14]
 801cfde:	2306      	movs	r3, #6
 801cfe0:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801cfe2:	4b1c      	ldr	r3, [pc, #112]	; (801d054 <EE_FindValidPage+0x84>)
 801cfe4:	881b      	ldrh	r3, [r3, #0]
 801cfe6:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801cfe8:	4b1b      	ldr	r3, [pc, #108]	; (801d058 <EE_FindValidPage+0x88>)
 801cfea:	881b      	ldrh	r3, [r3, #0]
 801cfec:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 801cfee:	79fb      	ldrb	r3, [r7, #7]
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d01b      	beq.n	801d02c <EE_FindValidPage+0x5c>
 801cff4:	2b01      	cmp	r3, #1
 801cff6:	d125      	bne.n	801d044 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 801cff8:	89bb      	ldrh	r3, [r7, #12]
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d108      	bne.n	801d010 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 801cffe:	89fb      	ldrh	r3, [r7, #14]
 801d000:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801d004:	4293      	cmp	r3, r2
 801d006:	d101      	bne.n	801d00c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 801d008:	2300      	movs	r3, #0
 801d00a:	e01c      	b.n	801d046 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 801d00c:	2301      	movs	r3, #1
 801d00e:	e01a      	b.n	801d046 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 801d010:	89fb      	ldrh	r3, [r7, #14]
 801d012:	2b00      	cmp	r3, #0
 801d014:	d108      	bne.n	801d028 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 801d016:	89bb      	ldrh	r3, [r7, #12]
 801d018:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801d01c:	4293      	cmp	r3, r2
 801d01e:	d101      	bne.n	801d024 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 801d020:	2301      	movs	r3, #1
 801d022:	e010      	b.n	801d046 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 801d024:	2300      	movs	r3, #0
 801d026:	e00e      	b.n	801d046 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 801d028:	23ab      	movs	r3, #171	; 0xab
 801d02a:	e00c      	b.n	801d046 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 801d02c:	89fb      	ldrh	r3, [r7, #14]
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d101      	bne.n	801d036 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 801d032:	2300      	movs	r3, #0
 801d034:	e007      	b.n	801d046 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 801d036:	89bb      	ldrh	r3, [r7, #12]
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d101      	bne.n	801d040 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 801d03c:	2301      	movs	r3, #1
 801d03e:	e002      	b.n	801d046 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 801d040:	23ab      	movs	r3, #171	; 0xab
 801d042:	e000      	b.n	801d046 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 801d044:	2300      	movs	r3, #0
  }
}
 801d046:	4618      	mov	r0, r3
 801d048:	3714      	adds	r7, #20
 801d04a:	46bd      	mov	sp, r7
 801d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d050:	4770      	bx	lr
 801d052:	bf00      	nop
 801d054:	08008000 	.word	0x08008000
 801d058:	0800c000 	.word	0x0800c000

0801d05c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 801d05c:	b580      	push	{r7, lr}
 801d05e:	b086      	sub	sp, #24
 801d060:	af00      	add	r7, sp, #0
 801d062:	4603      	mov	r3, r0
 801d064:	460a      	mov	r2, r1
 801d066:	80fb      	strh	r3, [r7, #6]
 801d068:	4613      	mov	r3, r2
 801d06a:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 801d06c:	2303      	movs	r3, #3
 801d06e:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 801d070:	2300      	movs	r3, #0
 801d072:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 801d074:	4b21      	ldr	r3, [pc, #132]	; (801d0fc <EE_VerifyPageFullWriteVariable+0xa0>)
 801d076:	617b      	str	r3, [r7, #20]
 801d078:	4b21      	ldr	r3, [pc, #132]	; (801d100 <EE_VerifyPageFullWriteVariable+0xa4>)
 801d07a:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 801d07c:	2001      	movs	r0, #1
 801d07e:	f7ff ffa7 	bl	801cfd0 <EE_FindValidPage>
 801d082:	4603      	mov	r3, r0
 801d084:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 801d086:	8a3b      	ldrh	r3, [r7, #16]
 801d088:	2bab      	cmp	r3, #171	; 0xab
 801d08a:	d101      	bne.n	801d090 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 801d08c:	23ab      	movs	r3, #171	; 0xab
 801d08e:	e031      	b.n	801d0f4 <EE_VerifyPageFullWriteVariable+0x98>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801d090:	8a3b      	ldrh	r3, [r7, #16]
 801d092:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801d096:	3302      	adds	r3, #2
 801d098:	039b      	lsls	r3, r3, #14
 801d09a:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801d09c:	8a3b      	ldrh	r3, [r7, #16]
 801d09e:	3301      	adds	r3, #1
 801d0a0:	039a      	lsls	r2, r3, #14
 801d0a2:	4b18      	ldr	r3, [pc, #96]	; (801d104 <EE_VerifyPageFullWriteVariable+0xa8>)
 801d0a4:	4413      	add	r3, r2
 801d0a6:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 801d0a8:	e01f      	b.n	801d0ea <EE_VerifyPageFullWriteVariable+0x8e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 801d0aa:	697b      	ldr	r3, [r7, #20]
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d0b2:	d117      	bne.n	801d0e4 <EE_VerifyPageFullWriteVariable+0x88>
    {
      /* Set variable data */
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address, Data);
 801d0b4:	88ba      	ldrh	r2, [r7, #4]
 801d0b6:	f04f 0300 	mov.w	r3, #0
 801d0ba:	6979      	ldr	r1, [r7, #20]
 801d0bc:	2001      	movs	r0, #1
 801d0be:	f7f6 fac1 	bl	8013644 <HAL_FLASH_Program>
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 801d0c2:	7cfb      	ldrb	r3, [r7, #19]
 801d0c4:	2b03      	cmp	r3, #3
 801d0c6:	d002      	beq.n	801d0ce <EE_VerifyPageFullWriteVariable+0x72>
      {
        return FlashStatus;
 801d0c8:	7cfb      	ldrb	r3, [r7, #19]
 801d0ca:	b29b      	uxth	r3, r3
 801d0cc:	e012      	b.n	801d0f4 <EE_VerifyPageFullWriteVariable+0x98>
      }
      /* Set variable virtual address */
      HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2, VirtAddress);
 801d0ce:	697b      	ldr	r3, [r7, #20]
 801d0d0:	1c99      	adds	r1, r3, #2
 801d0d2:	88fa      	ldrh	r2, [r7, #6]
 801d0d4:	f04f 0300 	mov.w	r3, #0
 801d0d8:	2001      	movs	r0, #1
 801d0da:	f7f6 fab3 	bl	8013644 <HAL_FLASH_Program>
      /* Return program operation status */
      return FlashStatus;
 801d0de:	7cfb      	ldrb	r3, [r7, #19]
 801d0e0:	b29b      	uxth	r3, r3
 801d0e2:	e007      	b.n	801d0f4 <EE_VerifyPageFullWriteVariable+0x98>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 801d0e4:	697b      	ldr	r3, [r7, #20]
 801d0e6:	3304      	adds	r3, #4
 801d0e8:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 801d0ea:	697a      	ldr	r2, [r7, #20]
 801d0ec:	68fb      	ldr	r3, [r7, #12]
 801d0ee:	429a      	cmp	r2, r3
 801d0f0:	d3db      	bcc.n	801d0aa <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 801d0f2:	2380      	movs	r3, #128	; 0x80
}
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	3718      	adds	r7, #24
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	bd80      	pop	{r7, pc}
 801d0fc:	08008000 	.word	0x08008000
 801d100:	0800c000 	.word	0x0800c000
 801d104:	08007ffe 	.word	0x08007ffe

0801d108 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 801d108:	b580      	push	{r7, lr}
 801d10a:	b086      	sub	sp, #24
 801d10c:	af00      	add	r7, sp, #0
 801d10e:	4603      	mov	r3, r0
 801d110:	460a      	mov	r2, r1
 801d112:	80fb      	strh	r3, [r7, #6]
 801d114:	4613      	mov	r3, r2
 801d116:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 801d118:	2303      	movs	r3, #3
 801d11a:	73fb      	strb	r3, [r7, #15]
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 801d11c:	4b45      	ldr	r3, [pc, #276]	; (801d234 <EE_PageTransfer+0x12c>)
 801d11e:	617b      	str	r3, [r7, #20]
  uint16_t OldPageId=0;
 801d120:	2300      	movs	r3, #0
 801d122:	827b      	strh	r3, [r7, #18]
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 801d124:	2300      	movs	r3, #0
 801d126:	81bb      	strh	r3, [r7, #12]
 801d128:	2300      	movs	r3, #0
 801d12a:	823b      	strh	r3, [r7, #16]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 801d12c:	2300      	movs	r3, #0
 801d12e:	817b      	strh	r3, [r7, #10]
 801d130:	2300      	movs	r3, #0
 801d132:	813b      	strh	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801d134:	2000      	movs	r0, #0
 801d136:	f7ff ff4b 	bl	801cfd0 <EE_FindValidPage>
 801d13a:	4603      	mov	r3, r0
 801d13c:	81bb      	strh	r3, [r7, #12]

  if (ValidPage == PAGE1)       /* Page1 valid */
 801d13e:	89bb      	ldrh	r3, [r7, #12]
 801d140:	2b01      	cmp	r3, #1
 801d142:	d104      	bne.n	801d14e <EE_PageTransfer+0x46>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 801d144:	4b3b      	ldr	r3, [pc, #236]	; (801d234 <EE_PageTransfer+0x12c>)
 801d146:	617b      	str	r3, [r7, #20]

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 801d148:	2303      	movs	r3, #3
 801d14a:	827b      	strh	r3, [r7, #18]
 801d14c:	e009      	b.n	801d162 <EE_PageTransfer+0x5a>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 801d14e:	89bb      	ldrh	r3, [r7, #12]
 801d150:	2b00      	cmp	r3, #0
 801d152:	d104      	bne.n	801d15e <EE_PageTransfer+0x56>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 801d154:	4b38      	ldr	r3, [pc, #224]	; (801d238 <EE_PageTransfer+0x130>)
 801d156:	617b      	str	r3, [r7, #20]

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 801d158:	2302      	movs	r3, #2
 801d15a:	827b      	strh	r3, [r7, #18]
 801d15c:	e001      	b.n	801d162 <EE_PageTransfer+0x5a>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 801d15e:	23ab      	movs	r3, #171	; 0xab
 801d160:	e063      	b.n	801d22a <EE_PageTransfer+0x122>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress, RECEIVE_DATA);
 801d162:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801d166:	f04f 0300 	mov.w	r3, #0
 801d16a:	6979      	ldr	r1, [r7, #20]
 801d16c:	2001      	movs	r0, #1
 801d16e:	f7f6 fa69 	bl	8013644 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 801d172:	7bfb      	ldrb	r3, [r7, #15]
 801d174:	2b03      	cmp	r3, #3
 801d176:	d002      	beq.n	801d17e <EE_PageTransfer+0x76>
  {
    return FlashStatus;
 801d178:	7bfb      	ldrb	r3, [r7, #15]
 801d17a:	b29b      	uxth	r3, r3
 801d17c:	e055      	b.n	801d22a <EE_PageTransfer+0x122>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801d17e:	88ba      	ldrh	r2, [r7, #4]
 801d180:	88fb      	ldrh	r3, [r7, #6]
 801d182:	4611      	mov	r1, r2
 801d184:	4618      	mov	r0, r3
 801d186:	f7ff ff69 	bl	801d05c <EE_VerifyPageFullWriteVariable>
 801d18a:	4603      	mov	r3, r0
 801d18c:	817b      	strh	r3, [r7, #10]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != FLASH_COMPLETE)
 801d18e:	897b      	ldrh	r3, [r7, #10]
 801d190:	2b03      	cmp	r3, #3
 801d192:	d001      	beq.n	801d198 <EE_PageTransfer+0x90>
  {
    return EepromStatus;
 801d194:	897b      	ldrh	r3, [r7, #10]
 801d196:	e048      	b.n	801d22a <EE_PageTransfer+0x122>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801d198:	2300      	movs	r3, #0
 801d19a:	823b      	strh	r3, [r7, #16]
 801d19c:	e027      	b.n	801d1ee <EE_PageTransfer+0xe6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 801d19e:	8a3b      	ldrh	r3, [r7, #16]
 801d1a0:	4a26      	ldr	r2, [pc, #152]	; (801d23c <EE_PageTransfer+0x134>)
 801d1a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d1a6:	88fa      	ldrh	r2, [r7, #6]
 801d1a8:	429a      	cmp	r2, r3
 801d1aa:	d01d      	beq.n	801d1e8 <EE_PageTransfer+0xe0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801d1ac:	8a3b      	ldrh	r3, [r7, #16]
 801d1ae:	4a23      	ldr	r2, [pc, #140]	; (801d23c <EE_PageTransfer+0x134>)
 801d1b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d1b4:	4922      	ldr	r1, [pc, #136]	; (801d240 <EE_PageTransfer+0x138>)
 801d1b6:	4618      	mov	r0, r3
 801d1b8:	f7ff fe78 	bl	801ceac <EE_ReadVariable>
 801d1bc:	4603      	mov	r3, r0
 801d1be:	813b      	strh	r3, [r7, #8]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 801d1c0:	893b      	ldrh	r3, [r7, #8]
 801d1c2:	2b01      	cmp	r3, #1
 801d1c4:	d010      	beq.n	801d1e8 <EE_PageTransfer+0xe0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801d1c6:	8a3b      	ldrh	r3, [r7, #16]
 801d1c8:	4a1c      	ldr	r2, [pc, #112]	; (801d23c <EE_PageTransfer+0x134>)
 801d1ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d1ce:	4a1c      	ldr	r2, [pc, #112]	; (801d240 <EE_PageTransfer+0x138>)
 801d1d0:	8812      	ldrh	r2, [r2, #0]
 801d1d2:	4611      	mov	r1, r2
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	f7ff ff41 	bl	801d05c <EE_VerifyPageFullWriteVariable>
 801d1da:	4603      	mov	r3, r0
 801d1dc:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != FLASH_COMPLETE)
 801d1de:	897b      	ldrh	r3, [r7, #10]
 801d1e0:	2b03      	cmp	r3, #3
 801d1e2:	d001      	beq.n	801d1e8 <EE_PageTransfer+0xe0>
        {
          return EepromStatus;
 801d1e4:	897b      	ldrh	r3, [r7, #10]
 801d1e6:	e020      	b.n	801d22a <EE_PageTransfer+0x122>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801d1e8:	8a3b      	ldrh	r3, [r7, #16]
 801d1ea:	3301      	adds	r3, #1
 801d1ec:	823b      	strh	r3, [r7, #16]
 801d1ee:	8a3b      	ldrh	r3, [r7, #16]
 801d1f0:	2b15      	cmp	r3, #21
 801d1f2:	d9d4      	bls.n	801d19e <EE_PageTransfer+0x96>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_Erase_Sector(OldPageId, VOLTAGE_RANGE);
 801d1f4:	8a7b      	ldrh	r3, [r7, #18]
 801d1f6:	2102      	movs	r1, #2
 801d1f8:	4618      	mov	r0, r3
 801d1fa:	f7f6 fbd9 	bl	80139b0 <FLASH_Erase_Sector>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 801d1fe:	7bfb      	ldrb	r3, [r7, #15]
 801d200:	2b03      	cmp	r3, #3
 801d202:	d002      	beq.n	801d20a <EE_PageTransfer+0x102>
  {
    return FlashStatus;
 801d204:	7bfb      	ldrb	r3, [r7, #15]
 801d206:	b29b      	uxth	r3, r3
 801d208:	e00f      	b.n	801d22a <EE_PageTransfer+0x122>
  }

  /* Set new Page status to VALID_PAGE status */
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress, VALID_PAGE);
 801d20a:	f04f 0200 	mov.w	r2, #0
 801d20e:	f04f 0300 	mov.w	r3, #0
 801d212:	6979      	ldr	r1, [r7, #20]
 801d214:	2001      	movs	r0, #1
 801d216:	f7f6 fa15 	bl	8013644 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 801d21a:	7bfb      	ldrb	r3, [r7, #15]
 801d21c:	2b03      	cmp	r3, #3
 801d21e:	d002      	beq.n	801d226 <EE_PageTransfer+0x11e>
  {
    return FlashStatus;
 801d220:	7bfb      	ldrb	r3, [r7, #15]
 801d222:	b29b      	uxth	r3, r3
 801d224:	e001      	b.n	801d22a <EE_PageTransfer+0x122>
  }

  /* Return last operation flash status */
  return FlashStatus;
 801d226:	7bfb      	ldrb	r3, [r7, #15]
 801d228:	b29b      	uxth	r3, r3
}
 801d22a:	4618      	mov	r0, r3
 801d22c:	3718      	adds	r7, #24
 801d22e:	46bd      	mov	sp, r7
 801d230:	bd80      	pop	{r7, pc}
 801d232:	bf00      	nop
 801d234:	08008000 	.word	0x08008000
 801d238:	0800c000 	.word	0x0800c000
 801d23c:	20004f9c 	.word	0x20004f9c
 801d240:	2000091a 	.word	0x2000091a

0801d244 <SM_ECUInit>:
#ifdef __cplusplus
extern "C"{
#endif


void SM_ECUInit(void){
 801d244:	b580      	push	{r7, lr}
 801d246:	af00      	add	r7, sp, #0
	/*Vishwesh : At the start I shut off DC Contactor, All LEDs,
	 * Gates must be off - very important else transistor becomes short circuit path for current
	 * Buzzer theme is played for 2-seconds and then Splash screens displayed.
	 */
	CAPCONTACTOR_OFF();
 801d248:	2201      	movs	r2, #1
 801d24a:	2180      	movs	r1, #128	; 0x80
 801d24c:	482a      	ldr	r0, [pc, #168]	; (801d2f8 <SM_ECUInit+0xb4>)
 801d24e:	f7f6 fda3 	bl	8013d98 <HAL_GPIO_WritePin>
	DC_CONTACTOR_OFF();
 801d252:	2201      	movs	r2, #1
 801d254:	2102      	movs	r1, #2
 801d256:	4829      	ldr	r0, [pc, #164]	; (801d2fc <SM_ECUInit+0xb8>)
 801d258:	f7f6 fd9e 	bl	8013d98 <HAL_GPIO_WritePin>
	REDLEDON();
	GREENLEDON();
	BLUELEDON();
	ORANGELEDON();
	G1T_OFF();
 801d25c:	2201      	movs	r2, #1
 801d25e:	2120      	movs	r1, #32
 801d260:	4826      	ldr	r0, [pc, #152]	; (801d2fc <SM_ECUInit+0xb8>)
 801d262:	f7f6 fd99 	bl	8013d98 <HAL_GPIO_WritePin>
	G2T_OFF();
 801d266:	2201      	movs	r2, #1
 801d268:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801d26c:	4824      	ldr	r0, [pc, #144]	; (801d300 <SM_ECUInit+0xbc>)
 801d26e:	f7f6 fd93 	bl	8013d98 <HAL_GPIO_WritePin>
	G3T_OFF();
 801d272:	2201      	movs	r2, #1
 801d274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801d278:	4821      	ldr	r0, [pc, #132]	; (801d300 <SM_ECUInit+0xbc>)
 801d27a:	f7f6 fd8d 	bl	8013d98 <HAL_GPIO_WritePin>
	switchOnBuzzer();
 801d27e:	f002 fe41 	bl	801ff04 <switchOnBuzzer>
	VishwaAdcInit();
 801d282:	f003 f835 	bl	80202f0 <VishwaAdcInit>

	HAL_TIM_Base_Start(&htim2);
 801d286:	481f      	ldr	r0, [pc, #124]	; (801d304 <SM_ECUInit+0xc0>)
 801d288:	f7fa f8c6 	bl	8017418 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 801d28c:	481e      	ldr	r0, [pc, #120]	; (801d308 <SM_ECUInit+0xc4>)
 801d28e:	f7fa f8c3 	bl	8017418 <HAL_TIM_Base_Start>
//	HAL_TIM_Base_Start(&htim5);
	HAL_TIM_Base_Start(&htim8);
 801d292:	481e      	ldr	r0, [pc, #120]	; (801d30c <SM_ECUInit+0xc8>)
 801d294:	f7fa f8c0 	bl	8017418 <HAL_TIM_Base_Start>
	vishwaEEp_Init();
 801d298:	f7fe fef4 	bl	801c084 <vishwaEEp_Init>
	ReadEEPData();
 801d29c:	f7ff fa10 	bl	801c6c0 <ReadEEPData>

	SM_ApplParam.Appl_u16PulseSCRWidth_us = 100;
 801d2a0:	4b1b      	ldr	r3, [pc, #108]	; (801d310 <SM_ECUInit+0xcc>)
 801d2a2:	2264      	movs	r2, #100	; 0x64
 801d2a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	SM_enumECUState = SM_enum_ECU_Init;
 801d2a8:	4b1a      	ldr	r3, [pc, #104]	; (801d314 <SM_ECUInit+0xd0>)
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	701a      	strb	r2, [r3, #0]
	Appl_Display.PowerOffCounter = 6;
 801d2ae:	4b1a      	ldr	r3, [pc, #104]	; (801d318 <SM_ECUInit+0xd4>)
 801d2b0:	2206      	movs	r2, #6
 801d2b2:	731a      	strb	r2, [r3, #12]

	HAL_Delay(1000);
 801d2b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d2b8:	f7f5 f8a4 	bl	8012404 <HAL_Delay>
	BUZZER_OFF();
 801d2bc:	2200      	movs	r2, #0
 801d2be:	2140      	movs	r1, #64	; 0x40
 801d2c0:	480d      	ldr	r0, [pc, #52]	; (801d2f8 <SM_ECUInit+0xb4>)
 801d2c2:	f7f6 fd69 	bl	8013d98 <HAL_GPIO_WritePin>
	/* Vishwesh:
	 * Important: In-case of power Failure, A Li-On Battery is given
	 * This is supplied using Main Relay and switching Main relay off causes
	 * System to switch OFF. Here I am switching ON relay.
	 */
	BATTERY_RELAY_ON();
 801d2c6:	2201      	movs	r2, #1
 801d2c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d2cc:	480a      	ldr	r0, [pc, #40]	; (801d2f8 <SM_ECUInit+0xb4>)
 801d2ce:	f7f6 fd63 	bl	8013d98 <HAL_GPIO_WritePin>
	SM_DispInit();
 801d2d2:	f7fd fbc5 	bl	801aa60 <SM_DispInit>

	/* Vishwesh:
	 * Assume there is not phase reversal in the beginning.
	 */
	Appl_diagActiveFault.PhaseReversal = 0;
 801d2d6:	4b11      	ldr	r3, [pc, #68]	; (801d31c <SM_ECUInit+0xd8>)
 801d2d8:	2200      	movs	r2, #0
 801d2da:	71da      	strb	r2, [r3, #7]
	SM_ApplParam.ap_fltCCSlowGain = INITIAL_CCSLOW_GAIN;
 801d2dc:	4b0c      	ldr	r3, [pc, #48]	; (801d310 <SM_ECUInit+0xcc>)
 801d2de:	4a10      	ldr	r2, [pc, #64]	; (801d320 <SM_ECUInit+0xdc>)
 801d2e0:	619a      	str	r2, [r3, #24]
	SM_ApplParam.ap_fltCCFastGain = INITIAL_CCFAST_GAIN;
 801d2e2:	4b0b      	ldr	r3, [pc, #44]	; (801d310 <SM_ECUInit+0xcc>)
 801d2e4:	4a0e      	ldr	r2, [pc, #56]	; (801d320 <SM_ECUInit+0xdc>)
 801d2e6:	61da      	str	r2, [r3, #28]
	SM_ApplParam.ap_fltCVSlowGain = INITIAL_CVSLOW_GAIN;
 801d2e8:	4b09      	ldr	r3, [pc, #36]	; (801d310 <SM_ECUInit+0xcc>)
 801d2ea:	4a0d      	ldr	r2, [pc, #52]	; (801d320 <SM_ECUInit+0xdc>)
 801d2ec:	621a      	str	r2, [r3, #32]
	SM_ApplParam.ap_fltCVFastGain = INITIAL_CVFAST_GAIN;
 801d2ee:	4b08      	ldr	r3, [pc, #32]	; (801d310 <SM_ECUInit+0xcc>)
 801d2f0:	4a0b      	ldr	r2, [pc, #44]	; (801d320 <SM_ECUInit+0xdc>)
 801d2f2:	625a      	str	r2, [r3, #36]	; 0x24
	/* Vishwesh :
	 * If Modbus to be supported use following library. THank me later
	 */
//	vishwaModbusInit();
}
 801d2f4:	bf00      	nop
 801d2f6:	bd80      	pop	{r7, pc}
 801d2f8:	40020800 	.word	0x40020800
 801d2fc:	40020400 	.word	0x40020400
 801d300:	40020000 	.word	0x40020000
 801d304:	20004c10 	.word	0x20004c10
 801d308:	2000491c 	.word	0x2000491c
 801d30c:	200048d4 	.word	0x200048d4
 801d310:	20005034 	.word	0x20005034
 801d314:	20005114 	.word	0x20005114
 801d318:	20004f08 	.word	0x20004f08
 801d31c:	20004d0c 	.word	0x20004d0c
 801d320:	3727c5ac 	.word	0x3727c5ac

0801d324 <SM_ListenFromDisplay>:

void SM_ListenFromDisplay(uint8_t loopms){
 801d324:	b580      	push	{r7, lr}
 801d326:	b082      	sub	sp, #8
 801d328:	af00      	add	r7, sp, #0
 801d32a:	4603      	mov	r3, r0
 801d32c:	71fb      	strb	r3, [r7, #7]
	static uint8_t timer;
	static uint8_t timer2;

	timer++;
 801d32e:	4b18      	ldr	r3, [pc, #96]	; (801d390 <SM_ListenFromDisplay+0x6c>)
 801d330:	781b      	ldrb	r3, [r3, #0]
 801d332:	3301      	adds	r3, #1
 801d334:	b2da      	uxtb	r2, r3
 801d336:	4b16      	ldr	r3, [pc, #88]	; (801d390 <SM_ListenFromDisplay+0x6c>)
 801d338:	701a      	strb	r2, [r3, #0]
	if(DGUS_OK != ReadPageID()){
 801d33a:	f7fd fdb5 	bl	801aea8 <ReadPageID>
 801d33e:	4603      	mov	r3, r0
 801d340:	2b00      	cmp	r3, #0
 801d342:	d008      	beq.n	801d356 <SM_ListenFromDisplay+0x32>
		Display.DGUSParam.PageId = 0;
 801d344:	4b13      	ldr	r3, [pc, #76]	; (801d394 <SM_ListenFromDisplay+0x70>)
 801d346:	2200      	movs	r2, #0
 801d348:	805a      	strh	r2, [r3, #2]
		Display.DGUSParam.ErrorCounter++;
 801d34a:	4b12      	ldr	r3, [pc, #72]	; (801d394 <SM_ListenFromDisplay+0x70>)
 801d34c:	8adb      	ldrh	r3, [r3, #22]
 801d34e:	3301      	adds	r3, #1
 801d350:	b29a      	uxth	r2, r3
 801d352:	4b10      	ldr	r3, [pc, #64]	; (801d394 <SM_ListenFromDisplay+0x70>)
 801d354:	82da      	strh	r2, [r3, #22]
	}
	if(timer >= (500/loopms)){
 801d356:	4b0e      	ldr	r3, [pc, #56]	; (801d390 <SM_ListenFromDisplay+0x6c>)
 801d358:	781b      	ldrb	r3, [r3, #0]
 801d35a:	4619      	mov	r1, r3
 801d35c:	79fb      	ldrb	r3, [r7, #7]
 801d35e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801d362:	fb92 f3f3 	sdiv	r3, r2, r3
 801d366:	4299      	cmp	r1, r3
 801d368:	db0d      	blt.n	801d386 <SM_ListenFromDisplay+0x62>
		timer = 0;
 801d36a:	4b09      	ldr	r3, [pc, #36]	; (801d390 <SM_ListenFromDisplay+0x6c>)
 801d36c:	2200      	movs	r2, #0
 801d36e:	701a      	strb	r2, [r3, #0]
		if(DGUS_OK != UpdateReadVariables()){
 801d370:	f7fe fd5e 	bl	801be30 <UpdateReadVariables>
 801d374:	4603      	mov	r3, r0
 801d376:	2b00      	cmp	r3, #0
 801d378:	d005      	beq.n	801d386 <SM_ListenFromDisplay+0x62>
			Display.DGUSParam.ErrorCounter++;
 801d37a:	4b06      	ldr	r3, [pc, #24]	; (801d394 <SM_ListenFromDisplay+0x70>)
 801d37c:	8adb      	ldrh	r3, [r3, #22]
 801d37e:	3301      	adds	r3, #1
 801d380:	b29a      	uxth	r2, r3
 801d382:	4b04      	ldr	r3, [pc, #16]	; (801d394 <SM_ListenFromDisplay+0x70>)
 801d384:	82da      	strh	r2, [r3, #22]
		}
	}

}
 801d386:	bf00      	nop
 801d388:	3708      	adds	r7, #8
 801d38a:	46bd      	mov	sp, r7
 801d38c:	bd80      	pop	{r7, pc}
 801d38e:	bf00      	nop
 801d390:	20000930 	.word	0x20000930
 801d394:	20004f6c 	.word	0x20004f6c

0801d398 <SM_StateMachineHandler>:

void SM_StateMachineHandler(uint8_t loopms){
 801d398:	b5b0      	push	{r4, r5, r7, lr}
 801d39a:	b086      	sub	sp, #24
 801d39c:	af02      	add	r7, sp, #8
 801d39e:	4603      	mov	r3, r0
 801d3a0:	71fb      	strb	r3, [r7, #7]
	static uint32_t TotalNumOfrecords;

	ExtEEP_Error EEP_Error;
	VishFuncError VishwaErr;

	if(((Appl_diagActiveFault.PowerFail_Z1 == 1) || \
 801d3a2:	4b9f      	ldr	r3, [pc, #636]	; (801d620 <SM_StateMachineHandler+0x288>)
 801d3a4:	781b      	ldrb	r3, [r3, #0]
 801d3a6:	2b01      	cmp	r3, #1
 801d3a8:	d007      	beq.n	801d3ba <SM_StateMachineHandler+0x22>
			(Appl_diagActiveFault.PowerFail_Z2 == 1) || \
 801d3aa:	4b9d      	ldr	r3, [pc, #628]	; (801d620 <SM_StateMachineHandler+0x288>)
 801d3ac:	785b      	ldrb	r3, [r3, #1]
	if(((Appl_diagActiveFault.PowerFail_Z1 == 1) || \
 801d3ae:	2b01      	cmp	r3, #1
 801d3b0:	d003      	beq.n	801d3ba <SM_StateMachineHandler+0x22>
			(Appl_diagActiveFault.PowerFail_Z3 == 1))&&\
 801d3b2:	4b9b      	ldr	r3, [pc, #620]	; (801d620 <SM_StateMachineHandler+0x288>)
 801d3b4:	789b      	ldrb	r3, [r3, #2]
			(Appl_diagActiveFault.PowerFail_Z2 == 1) || \
 801d3b6:	2b01      	cmp	r3, #1
 801d3b8:	d13b      	bne.n	801d432 <SM_StateMachineHandler+0x9a>
			((SM_enumECUState != SM_enum_ECU_CCRun_Slow) && \
 801d3ba:	4b9a      	ldr	r3, [pc, #616]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d3bc:	781b      	ldrb	r3, [r3, #0]
 801d3be:	b2db      	uxtb	r3, r3
			(Appl_diagActiveFault.PowerFail_Z3 == 1))&&\
 801d3c0:	2b0d      	cmp	r3, #13
 801d3c2:	d036      	beq.n	801d432 <SM_StateMachineHandler+0x9a>
			(SM_enumECUState != SM_enum_ECU_CCRun_Stable))){
 801d3c4:	4b97      	ldr	r3, [pc, #604]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d3c6:	781b      	ldrb	r3, [r3, #0]
 801d3c8:	b2db      	uxtb	r3, r3
			((SM_enumECUState != SM_enum_ECU_CCRun_Slow) && \
 801d3ca:	2b0e      	cmp	r3, #14
 801d3cc:	d031      	beq.n	801d432 <SM_StateMachineHandler+0x9a>

		BUZZER_OFF();
 801d3ce:	2200      	movs	r2, #0
 801d3d0:	2140      	movs	r1, #64	; 0x40
 801d3d2:	4895      	ldr	r0, [pc, #596]	; (801d628 <SM_StateMachineHandler+0x290>)
 801d3d4:	f7f6 fce0 	bl	8013d98 <HAL_GPIO_WritePin>
		SM_ApplParam.BuzzerCounter++;
 801d3d8:	4b94      	ldr	r3, [pc, #592]	; (801d62c <SM_StateMachineHandler+0x294>)
 801d3da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d3dc:	3301      	adds	r3, #1
 801d3de:	4a93      	ldr	r2, [pc, #588]	; (801d62c <SM_StateMachineHandler+0x294>)
 801d3e0:	6613      	str	r3, [r2, #96]	; 0x60
		if(SM_ApplParam.BuzzerCounter>(1000/loopms)){
 801d3e2:	4b92      	ldr	r3, [pc, #584]	; (801d62c <SM_StateMachineHandler+0x294>)
 801d3e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d3e6:	79fa      	ldrb	r2, [r7, #7]
 801d3e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d3ec:	fb91 f2f2 	sdiv	r2, r1, r2
 801d3f0:	4293      	cmp	r3, r2
 801d3f2:	f240 8734 	bls.w	801e25e <SM_StateMachineHandler+0xec6>
			BUZZER_ON();
 801d3f6:	2201      	movs	r2, #1
 801d3f8:	2140      	movs	r1, #64	; 0x40
 801d3fa:	488b      	ldr	r0, [pc, #556]	; (801d628 <SM_StateMachineHandler+0x290>)
 801d3fc:	f7f6 fccc 	bl	8013d98 <HAL_GPIO_WritePin>
			SM_ApplParam.BuzzerCounter = 0;
 801d400:	4b8a      	ldr	r3, [pc, #552]	; (801d62c <SM_StateMachineHandler+0x294>)
 801d402:	2200      	movs	r2, #0
 801d404:	661a      	str	r2, [r3, #96]	; 0x60
			Appl_Display.PowerOffCounter--;
 801d406:	4b8a      	ldr	r3, [pc, #552]	; (801d630 <SM_StateMachineHandler+0x298>)
 801d408:	7b1b      	ldrb	r3, [r3, #12]
 801d40a:	3b01      	subs	r3, #1
 801d40c:	b2da      	uxtb	r2, r3
 801d40e:	4b88      	ldr	r3, [pc, #544]	; (801d630 <SM_StateMachineHandler+0x298>)
 801d410:	731a      	strb	r2, [r3, #12]
			if(Appl_Display.PowerOffCounter <= 0){
 801d412:	4b87      	ldr	r3, [pc, #540]	; (801d630 <SM_StateMachineHandler+0x298>)
 801d414:	7b1b      	ldrb	r3, [r3, #12]
 801d416:	2b00      	cmp	r3, #0
 801d418:	f040 8721 	bne.w	801e25e <SM_StateMachineHandler+0xec6>
				Appl_Display.PowerOffCounter = 6;
 801d41c:	4b84      	ldr	r3, [pc, #528]	; (801d630 <SM_StateMachineHandler+0x298>)
 801d41e:	2206      	movs	r2, #6
 801d420:	731a      	strb	r2, [r3, #12]
				BATTERY_RELAY_OFF();
 801d422:	2200      	movs	r2, #0
 801d424:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d428:	487f      	ldr	r0, [pc, #508]	; (801d628 <SM_StateMachineHandler+0x290>)
 801d42a:	f7f6 fcb5 	bl	8013d98 <HAL_GPIO_WritePin>
		if(SM_ApplParam.BuzzerCounter>(1000/loopms)){
 801d42e:	f000 bf16 	b.w	801e25e <SM_StateMachineHandler+0xec6>
	else
	{
		/*Vishwesh
		 * If there is no powerfail, let's charge battery and reset poweroff counter
		 */
		BATTERY_RELAY_ON();
 801d432:	2201      	movs	r2, #1
 801d434:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d438:	487b      	ldr	r0, [pc, #492]	; (801d628 <SM_StateMachineHandler+0x290>)
 801d43a:	f7f6 fcad 	bl	8013d98 <HAL_GPIO_WritePin>
		Appl_Display.PowerOffCounter = 6;
 801d43e:	4b7c      	ldr	r3, [pc, #496]	; (801d630 <SM_StateMachineHandler+0x298>)
 801d440:	2206      	movs	r2, #6
 801d442:	731a      	strb	r2, [r3, #12]

		if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801d444:	4b7b      	ldr	r3, [pc, #492]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d446:	885b      	ldrh	r3, [r3, #2]
 801d448:	2b02      	cmp	r3, #2
 801d44a:	d102      	bne.n	801d452 <SM_StateMachineHandler+0xba>
			SM_enumECUState = SM_enum_ECU_StandByMode;
 801d44c:	4b75      	ldr	r3, [pc, #468]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d44e:	2201      	movs	r2, #1
 801d450:	701a      	strb	r2, [r3, #0]
		}

		if(SM_enumECUState == SM_enum_ECU_Init){
 801d452:	4b74      	ldr	r3, [pc, #464]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d454:	781b      	ldrb	r3, [r3, #0]
 801d456:	b2db      	uxtb	r3, r3
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d127      	bne.n	801d4ac <SM_StateMachineHandler+0x114>

			Fnclocal_u32local++;
 801d45c:	4b76      	ldr	r3, [pc, #472]	; (801d638 <SM_StateMachineHandler+0x2a0>)
 801d45e:	681b      	ldr	r3, [r3, #0]
 801d460:	3301      	adds	r3, #1
 801d462:	4a75      	ldr	r2, [pc, #468]	; (801d638 <SM_StateMachineHandler+0x2a0>)
 801d464:	6013      	str	r3, [r2, #0]
			if(Fnclocal_u32local > (5000/loopms)){
 801d466:	79fb      	ldrb	r3, [r7, #7]
 801d468:	f241 3288 	movw	r2, #5000	; 0x1388
 801d46c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d470:	461a      	mov	r2, r3
 801d472:	4b71      	ldr	r3, [pc, #452]	; (801d638 <SM_StateMachineHandler+0x2a0>)
 801d474:	681b      	ldr	r3, [r3, #0]
 801d476:	429a      	cmp	r2, r3
 801d478:	f080 86f2 	bcs.w	801e260 <SM_StateMachineHandler+0xec8>

				if(Appl_EEPParam.stm32.EEP_PowerFailedLastTime == 0){
 801d47c:	4b6f      	ldr	r3, [pc, #444]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d47e:	7a9b      	ldrb	r3, [r3, #10]
 801d480:	2b00      	cmp	r3, #0
 801d482:	d107      	bne.n	801d494 <SM_StateMachineHandler+0xfc>
					SM_enumECUState = SM_enum_ECU_StandByMode;
 801d484:	4b67      	ldr	r3, [pc, #412]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d486:	2201      	movs	r2, #1
 801d488:	701a      	strb	r2, [r3, #0]
					Appl_Display.SelectedIndexIntheList = 1;
 801d48a:	4b69      	ldr	r3, [pc, #420]	; (801d630 <SM_StateMachineHandler+0x298>)
 801d48c:	2201      	movs	r2, #1
 801d48e:	721a      	strb	r2, [r3, #8]
 801d490:	f000 bee6 	b.w	801e260 <SM_StateMachineHandler+0xec8>
				}
				else{
					SM_enumECUState = SM_enum_ECU_ContinueFromLastPowerOff;
 801d494:	4b63      	ldr	r3, [pc, #396]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d496:	2214      	movs	r2, #20
 801d498:	701a      	strb	r2, [r3, #0]
					Appl_Display.PowerOnCounter = 20;
 801d49a:	4b65      	ldr	r3, [pc, #404]	; (801d630 <SM_StateMachineHandler+0x298>)
 801d49c:	2214      	movs	r2, #20
 801d49e:	72da      	strb	r2, [r3, #11]
					output = 0;
 801d4a0:	4b67      	ldr	r3, [pc, #412]	; (801d640 <SM_StateMachineHandler+0x2a8>)
 801d4a2:	f04f 0200 	mov.w	r2, #0
 801d4a6:	601a      	str	r2, [r3, #0]
 801d4a8:	f000 beda 	b.w	801e260 <SM_StateMachineHandler+0xec8>
				}
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_StandByMode){
 801d4ac:	4b5d      	ldr	r3, [pc, #372]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d4ae:	781b      	ldrb	r3, [r3, #0]
 801d4b0:	b2db      	uxtb	r3, r3
 801d4b2:	2b01      	cmp	r3, #1
 801d4b4:	d144      	bne.n	801d540 <SM_StateMachineHandler+0x1a8>
			/*Vishwesh:
			 * Basic Behaviour of this Mode*/
			Appl_EEPParam.stm32.EEP_PowerFailedLastTime = 0;
 801d4b6:	4b61      	ldr	r3, [pc, #388]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d4b8:	2200      	movs	r2, #0
 801d4ba:	729a      	strb	r2, [r3, #10]
			Appl_Display.SelfTestCounter = 0;
 801d4bc:	4b5c      	ldr	r3, [pc, #368]	; (801d630 <SM_StateMachineHandler+0x298>)
 801d4be:	2200      	movs	r2, #0
 801d4c0:	611a      	str	r2, [r3, #16]
			WriteEEPData();
 801d4c2:	f7fe fe67 	bl	801c194 <WriteEEPData>
			DC_CONTACTOR_OFF();
 801d4c6:	2201      	movs	r2, #1
 801d4c8:	2102      	movs	r1, #2
 801d4ca:	485e      	ldr	r0, [pc, #376]	; (801d644 <SM_StateMachineHandler+0x2ac>)
 801d4cc:	f7f6 fc64 	bl	8013d98 <HAL_GPIO_WritePin>
			CAPCONTACTOR_OFF();
 801d4d0:	2201      	movs	r2, #1
 801d4d2:	2180      	movs	r1, #128	; 0x80
 801d4d4:	4854      	ldr	r0, [pc, #336]	; (801d628 <SM_StateMachineHandler+0x290>)
 801d4d6:	f7f6 fc5f 	bl	8013d98 <HAL_GPIO_WritePin>
			BUZZER_OFF();
 801d4da:	2200      	movs	r2, #0
 801d4dc:	2140      	movs	r1, #64	; 0x40
 801d4de:	4852      	ldr	r0, [pc, #328]	; (801d628 <SM_StateMachineHandler+0x290>)
 801d4e0:	f7f6 fc5a 	bl	8013d98 <HAL_GPIO_WritePin>


			/*Vishwesh:
			 * StateMachineHandle of this mode*/
			/*Display.DGUSParam.PageId is updated from display */
			if(Display.DGUSParam.PageId == DGUS_PAGEID_CURRENTMODESETTINGS){
 801d4e4:	4b53      	ldr	r3, [pc, #332]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d4e6:	885b      	ldrh	r3, [r3, #2]
 801d4e8:	2b03      	cmp	r3, #3
 801d4ea:	d104      	bne.n	801d4f6 <SM_StateMachineHandler+0x15e>
				SM_enumECUState = SM_enum_ECU_CurrentModeSettings;
 801d4ec:	4b4d      	ldr	r3, [pc, #308]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d4ee:	2202      	movs	r2, #2
 801d4f0:	701a      	strb	r2, [r3, #0]
 801d4f2:	f000 beb5 	b.w	801e260 <SM_StateMachineHandler+0xec8>
			}
			else if(Display.DGUSParam.PageId == DGUS_PAGEID_SELFTEST){
 801d4f6:	4b4f      	ldr	r3, [pc, #316]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d4f8:	885b      	ldrh	r3, [r3, #2]
 801d4fa:	2b05      	cmp	r3, #5
 801d4fc:	d104      	bne.n	801d508 <SM_StateMachineHandler+0x170>
				SM_enumECUState = SM_enum_ECU_SelfTest;
 801d4fe:	4b49      	ldr	r3, [pc, #292]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d500:	2211      	movs	r2, #17
 801d502:	701a      	strb	r2, [r3, #0]
 801d504:	f000 beac 	b.w	801e260 <SM_StateMachineHandler+0xec8>
			}
			else if(Display.DGUSParam.PageId == DGUS_PAGEID_SETTINGS){
 801d508:	4b4a      	ldr	r3, [pc, #296]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d50a:	885b      	ldrh	r3, [r3, #2]
 801d50c:	2b08      	cmp	r3, #8
 801d50e:	d104      	bne.n	801d51a <SM_StateMachineHandler+0x182>
				SM_enumECUState = SM_enum_ECU_SettingMenu;
 801d510:	4b44      	ldr	r3, [pc, #272]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d512:	2206      	movs	r2, #6
 801d514:	701a      	strb	r2, [r3, #0]
 801d516:	f000 bea3 	b.w	801e260 <SM_StateMachineHandler+0xec8>
			}
			else if(Display.DGUSParam.PageId == DGUS_PAGEID_VOLTAGEMODESETTINGS){
 801d51a:	4b46      	ldr	r3, [pc, #280]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d51c:	885b      	ldrh	r3, [r3, #2]
 801d51e:	2b0c      	cmp	r3, #12
 801d520:	d104      	bne.n	801d52c <SM_StateMachineHandler+0x194>
				SM_enumECUState = SM_enum_ECU_VoltageModeSettings;
 801d522:	4b40      	ldr	r3, [pc, #256]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d524:	2203      	movs	r2, #3
 801d526:	701a      	strb	r2, [r3, #0]
 801d528:	f000 be9a 	b.w	801e260 <SM_StateMachineHandler+0xec8>
			}
			else if(Display.DGUSParam.PageId == DGUS_PAGEID_VISHWAMODE){
 801d52c:	4b41      	ldr	r3, [pc, #260]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d52e:	885b      	ldrh	r3, [r3, #2]
 801d530:	2b12      	cmp	r3, #18
 801d532:	f040 8695 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
				SM_enumECUState = SM_enum_ECU_VishwatestMode;
 801d536:	4b3b      	ldr	r3, [pc, #236]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d538:	2215      	movs	r2, #21
 801d53a:	701a      	strb	r2, [r3, #0]
 801d53c:	f000 be90 	b.w	801e260 <SM_StateMachineHandler+0xec8>
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_CurrentModeSettings){
 801d540:	4b38      	ldr	r3, [pc, #224]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d542:	781b      	ldrb	r3, [r3, #0]
 801d544:	b2db      	uxtb	r3, r3
 801d546:	2b02      	cmp	r3, #2
 801d548:	d132      	bne.n	801d5b0 <SM_StateMachineHandler+0x218>
			Appl_EEPParam.stm32.EEP_CustomerNumber          = (uint8_t)Display.DGUSParam.CustomerID;
 801d54a:	4b3a      	ldr	r3, [pc, #232]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d54c:	889b      	ldrh	r3, [r3, #4]
 801d54e:	b2da      	uxtb	r2, r3
 801d550:	4b3a      	ldr	r3, [pc, #232]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d552:	73da      	strb	r2, [r3, #15]
			Appl_EEPParam.stm32.EEP_CC_SetCurrent           = (uint8_t)Display.DGUSParam.setCurrent;
 801d554:	4b37      	ldr	r3, [pc, #220]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d556:	899b      	ldrh	r3, [r3, #12]
 801d558:	b2da      	uxtb	r2, r3
 801d55a:	4b38      	ldr	r3, [pc, #224]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d55c:	711a      	strb	r2, [r3, #4]
			Appl_EEPParam.stm32.EEP_TimerSetHours           = (uint8_t)Display.DGUSParam.setTimerHour;
 801d55e:	4b35      	ldr	r3, [pc, #212]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d560:	89db      	ldrh	r3, [r3, #14]
 801d562:	b2da      	uxtb	r2, r3
 801d564:	4b35      	ldr	r3, [pc, #212]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d566:	739a      	strb	r2, [r3, #14]
			Appl_EEPParam.stm32.EEP_CC_CutOffVoltage       = (uint8_t)Display.DGUSParam.cutOffVoltage;
 801d568:	4b32      	ldr	r3, [pc, #200]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d56a:	891b      	ldrh	r3, [r3, #8]
 801d56c:	b2da      	uxtb	r2, r3
 801d56e:	4b33      	ldr	r3, [pc, #204]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d570:	71da      	strb	r2, [r3, #7]

			if(Display.DGUSParam.PageId == DGUS_PAGEID_CCPREPARING){
 801d572:	4b30      	ldr	r3, [pc, #192]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d574:	885b      	ldrh	r3, [r3, #2]
 801d576:	2b13      	cmp	r3, #19
 801d578:	d110      	bne.n	801d59c <SM_StateMachineHandler+0x204>
				Appl_EEPParam.stm32.EEP_Run_Hour = 0;
 801d57a:	4b30      	ldr	r3, [pc, #192]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d57c:	2200      	movs	r2, #0
 801d57e:	735a      	strb	r2, [r3, #13]
				Appl_EEPParam.stm32.EEP_Run_Min = 0;
 801d580:	4b2e      	ldr	r3, [pc, #184]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d582:	2200      	movs	r2, #0
 801d584:	731a      	strb	r2, [r3, #12]
				Appl_EEPParam.stm32.EEP_Run_Sec = 0;
 801d586:	4b2d      	ldr	r3, [pc, #180]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d588:	2200      	movs	r2, #0
 801d58a:	72da      	strb	r2, [r3, #11]
				Appl_EEPParam.stm32.EEP_ModeSelected = CC_MODE;
 801d58c:	4b2b      	ldr	r3, [pc, #172]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d58e:	2200      	movs	r2, #0
 801d590:	741a      	strb	r2, [r3, #16]
				SM_enumECUState = SM_enum_ECU_CCPreparing;
 801d592:	4b24      	ldr	r3, [pc, #144]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d594:	2205      	movs	r2, #5
 801d596:	701a      	strb	r2, [r3, #0]
 801d598:	f000 be62 	b.w	801e260 <SM_StateMachineHandler+0xec8>
			}
			else if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801d59c:	4b25      	ldr	r3, [pc, #148]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d59e:	885b      	ldrh	r3, [r3, #2]
 801d5a0:	2b02      	cmp	r3, #2
 801d5a2:	f040 865d 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d5a6:	4b1f      	ldr	r3, [pc, #124]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d5a8:	2201      	movs	r2, #1
 801d5aa:	701a      	strb	r2, [r3, #0]
 801d5ac:	f000 be58 	b.w	801e260 <SM_StateMachineHandler+0xec8>
			}

		}
		else if(SM_enumECUState == SM_enum_ECU_VoltageModeSettings){
 801d5b0:	4b1c      	ldr	r3, [pc, #112]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d5b2:	781b      	ldrb	r3, [r3, #0]
 801d5b4:	b2db      	uxtb	r3, r3
 801d5b6:	2b03      	cmp	r3, #3
 801d5b8:	d146      	bne.n	801d648 <SM_StateMachineHandler+0x2b0>
			Appl_EEPParam.stm32.EEP_CustomerNumber         = (uint8_t)Display.DGUSParam.CustomerID;
 801d5ba:	4b1e      	ldr	r3, [pc, #120]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d5bc:	889b      	ldrh	r3, [r3, #4]
 801d5be:	b2da      	uxtb	r2, r3
 801d5c0:	4b1e      	ldr	r3, [pc, #120]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d5c2:	73da      	strb	r2, [r3, #15]
			Appl_EEPParam.stm32.EEP_CV_SetVoltage          = (uint8_t)Display.DGUSParam.setVoltage;
 801d5c4:	4b1b      	ldr	r3, [pc, #108]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d5c6:	8b1b      	ldrh	r3, [r3, #24]
 801d5c8:	b2da      	uxtb	r2, r3
 801d5ca:	4b1c      	ldr	r3, [pc, #112]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d5cc:	715a      	strb	r2, [r3, #5]
			Appl_EEPParam.stm32.EEP_TimerSetHours          = (uint8_t)Display.DGUSParam.setTimerHour;
 801d5ce:	4b19      	ldr	r3, [pc, #100]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d5d0:	89db      	ldrh	r3, [r3, #14]
 801d5d2:	b2da      	uxtb	r2, r3
 801d5d4:	4b19      	ldr	r3, [pc, #100]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d5d6:	739a      	strb	r2, [r3, #14]
			Appl_EEPParam.stm32.EEP_CV_CutOffCurrent       = (uint8_t)Display.DGUSParam.cutOffCurrent;
 801d5d8:	4b16      	ldr	r3, [pc, #88]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d5da:	895b      	ldrh	r3, [r3, #10]
 801d5dc:	b2da      	uxtb	r2, r3
 801d5de:	4b17      	ldr	r3, [pc, #92]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d5e0:	719a      	strb	r2, [r3, #6]
			if(Display.DGUSParam.PageId == DGUS_PAGEID_CVPREPARING){
 801d5e2:	4b14      	ldr	r3, [pc, #80]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d5e4:	885b      	ldrh	r3, [r3, #2]
 801d5e6:	2b14      	cmp	r3, #20
 801d5e8:	d110      	bne.n	801d60c <SM_StateMachineHandler+0x274>
				Appl_EEPParam.stm32.EEP_Run_Hour = 0;
 801d5ea:	4b14      	ldr	r3, [pc, #80]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d5ec:	2200      	movs	r2, #0
 801d5ee:	735a      	strb	r2, [r3, #13]
				Appl_EEPParam.stm32.EEP_Run_Min = 0;
 801d5f0:	4b12      	ldr	r3, [pc, #72]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d5f2:	2200      	movs	r2, #0
 801d5f4:	731a      	strb	r2, [r3, #12]
				Appl_EEPParam.stm32.EEP_Run_Sec = 0;
 801d5f6:	4b11      	ldr	r3, [pc, #68]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d5f8:	2200      	movs	r2, #0
 801d5fa:	72da      	strb	r2, [r3, #11]
				Appl_EEPParam.stm32.EEP_ModeSelected = CV_MODE;
 801d5fc:	4b0f      	ldr	r3, [pc, #60]	; (801d63c <SM_StateMachineHandler+0x2a4>)
 801d5fe:	2201      	movs	r2, #1
 801d600:	741a      	strb	r2, [r3, #16]
				SM_enumECUState = SM_enum_ECU_CVPreparing;
 801d602:	4b08      	ldr	r3, [pc, #32]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d604:	2204      	movs	r2, #4
 801d606:	701a      	strb	r2, [r3, #0]
 801d608:	f000 be2a 	b.w	801e260 <SM_StateMachineHandler+0xec8>
			}
			else if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801d60c:	4b09      	ldr	r3, [pc, #36]	; (801d634 <SM_StateMachineHandler+0x29c>)
 801d60e:	885b      	ldrh	r3, [r3, #2]
 801d610:	2b02      	cmp	r3, #2
 801d612:	f040 8625 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d616:	4b03      	ldr	r3, [pc, #12]	; (801d624 <SM_StateMachineHandler+0x28c>)
 801d618:	2201      	movs	r2, #1
 801d61a:	701a      	strb	r2, [r3, #0]
 801d61c:	f000 be20 	b.w	801e260 <SM_StateMachineHandler+0xec8>
 801d620:	20004d0c 	.word	0x20004d0c
 801d624:	20005114 	.word	0x20005114
 801d628:	40020800 	.word	0x40020800
 801d62c:	20005034 	.word	0x20005034
 801d630:	20004f08 	.word	0x20004f08
 801d634:	20004f6c 	.word	0x20004f6c
 801d638:	20000934 	.word	0x20000934
 801d63c:	20000278 	.word	0x20000278
 801d640:	2000502c 	.word	0x2000502c
 801d644:	40020400 	.word	0x40020400
			}

		}
		else if(SM_enumECUState == SM_enum_ECU_CVPreparing){
 801d648:	4b9c      	ldr	r3, [pc, #624]	; (801d8bc <SM_StateMachineHandler+0x524>)
 801d64a:	781b      	ldrb	r3, [r3, #0]
 801d64c:	b2db      	uxtb	r3, r3
 801d64e:	2b04      	cmp	r3, #4
 801d650:	f040 8094 	bne.w	801d77c <SM_StateMachineHandler+0x3e4>
			if(Display.DGUSParam.PageId == DGUS_PAGEID_CVPREPARING){
 801d654:	4b9a      	ldr	r3, [pc, #616]	; (801d8c0 <SM_StateMachineHandler+0x528>)
 801d656:	885b      	ldrh	r3, [r3, #2]
 801d658:	2b14      	cmp	r3, #20
 801d65a:	f040 8601 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
				if(Appl_diagActiveFault.PowerFail_Z1 != 1 &&
 801d65e:	4b99      	ldr	r3, [pc, #612]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d660:	781b      	ldrb	r3, [r3, #0]
 801d662:	2b01      	cmp	r3, #1
 801d664:	d02d      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
						Appl_diagActiveFault.PowerFail_Z2 != 1 &&
 801d666:	4b97      	ldr	r3, [pc, #604]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d668:	785b      	ldrb	r3, [r3, #1]
				if(Appl_diagActiveFault.PowerFail_Z1 != 1 &&
 801d66a:	2b01      	cmp	r3, #1
 801d66c:	d029      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
						Appl_diagActiveFault.PowerFail_Z3 != 1 &&
 801d66e:	4b95      	ldr	r3, [pc, #596]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d670:	789b      	ldrb	r3, [r3, #2]
						Appl_diagActiveFault.PowerFail_Z2 != 1 &&
 801d672:	2b01      	cmp	r3, #1
 801d674:	d025      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
						Appl_diagActiveFault.BatteryReversal != 1 &&
 801d676:	4b93      	ldr	r3, [pc, #588]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d678:	7a1b      	ldrb	r3, [r3, #8]
						Appl_diagActiveFault.PowerFail_Z3 != 1 &&
 801d67a:	2b01      	cmp	r3, #1
 801d67c:	d021      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
						Appl_diagActiveFault.EEPLogMemoryFull != 1 &&
 801d67e:	4b91      	ldr	r3, [pc, #580]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d680:	7a5b      	ldrb	r3, [r3, #9]
						Appl_diagActiveFault.BatteryReversal != 1 &&
 801d682:	2b01      	cmp	r3, #1
 801d684:	d01d      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
						Appl_diagActiveFault.HighTempperatureSCR != 1 &&
 801d686:	4b8f      	ldr	r3, [pc, #572]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d688:	799b      	ldrb	r3, [r3, #6]
						Appl_diagActiveFault.EEPLogMemoryFull != 1 &&
 801d68a:	2b01      	cmp	r3, #1
 801d68c:	d019      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
						Appl_diagActiveFault.OverVoltage != 1 &&
 801d68e:	4b8d      	ldr	r3, [pc, #564]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d690:	7adb      	ldrb	r3, [r3, #11]
						Appl_diagActiveFault.HighTempperatureSCR != 1 &&
 801d692:	2b01      	cmp	r3, #1
 801d694:	d015      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
						Appl_diagActiveFault.PhaseReversal != 1 &&
 801d696:	4b8b      	ldr	r3, [pc, #556]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d698:	79db      	ldrb	r3, [r3, #7]
						Appl_diagActiveFault.OverVoltage != 1 &&
 801d69a:	2b01      	cmp	r3, #1
 801d69c:	d011      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
						Appl_diagActiveFault.FiltercktOpen !=1 &&
 801d69e:	4b89      	ldr	r3, [pc, #548]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d6a0:	7a9b      	ldrb	r3, [r3, #10]
						Appl_diagActiveFault.PhaseReversal != 1 &&
 801d6a2:	2b01      	cmp	r3, #1
 801d6a4:	d00d      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
						Appl_diagActiveFault.UnderVoltage != 1 &&
 801d6a6:	4b87      	ldr	r3, [pc, #540]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d6a8:	795b      	ldrb	r3, [r3, #5]
						Appl_diagActiveFault.FiltercktOpen !=1 &&
 801d6aa:	2b01      	cmp	r3, #1
 801d6ac:	d009      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
						Appl_diagActiveFault.OverCurrent != 1){
 801d6ae:	4b85      	ldr	r3, [pc, #532]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d6b0:	7b1b      	ldrb	r3, [r3, #12]
						Appl_diagActiveFault.UnderVoltage != 1 &&
 801d6b2:	2b01      	cmp	r3, #1
 801d6b4:	d005      	beq.n	801d6c2 <SM_StateMachineHandler+0x32a>
					StartSelftestCVPrepare(loopms);
 801d6b6:	79fb      	ldrb	r3, [r7, #7]
 801d6b8:	4618      	mov	r0, r3
 801d6ba:	f002 fcc9 	bl	8020050 <StartSelftestCVPrepare>
 801d6be:	f000 bdcf 	b.w	801e260 <SM_StateMachineHandler+0xec8>
				}
				else{
					if((Appl_diagActiveFault.PowerFail_Z1 == 1) || (Appl_diagActiveFault.PowerFail_Z2 == 1) || (Appl_diagActiveFault.PowerFail_Z3 == 1))
 801d6c2:	4b80      	ldr	r3, [pc, #512]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d6c4:	781b      	ldrb	r3, [r3, #0]
 801d6c6:	2b01      	cmp	r3, #1
 801d6c8:	d007      	beq.n	801d6da <SM_StateMachineHandler+0x342>
 801d6ca:	4b7e      	ldr	r3, [pc, #504]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d6cc:	785b      	ldrb	r3, [r3, #1]
 801d6ce:	2b01      	cmp	r3, #1
 801d6d0:	d003      	beq.n	801d6da <SM_StateMachineHandler+0x342>
 801d6d2:	4b7c      	ldr	r3, [pc, #496]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d6d4:	789b      	ldrb	r3, [r3, #2]
 801d6d6:	2b01      	cmp	r3, #1
 801d6d8:	d104      	bne.n	801d6e4 <SM_StateMachineHandler+0x34c>
						SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ1;
 801d6da:	4b7b      	ldr	r3, [pc, #492]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d6dc:	2205      	movs	r2, #5
 801d6de:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d6e2:	e046      	b.n	801d772 <SM_StateMachineHandler+0x3da>
					else if(Appl_diagActiveFault.BatteryReversal == 1) SM_ApplParam.Pausereason = PauseReasonEnum_BatteryReversal;
 801d6e4:	4b77      	ldr	r3, [pc, #476]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d6e6:	7a1b      	ldrb	r3, [r3, #8]
 801d6e8:	2b01      	cmp	r3, #1
 801d6ea:	d104      	bne.n	801d6f6 <SM_StateMachineHandler+0x35e>
 801d6ec:	4b76      	ldr	r3, [pc, #472]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d6ee:	2208      	movs	r2, #8
 801d6f0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d6f4:	e03d      	b.n	801d772 <SM_StateMachineHandler+0x3da>
					else if(Appl_diagActiveFault.EEPLogMemoryFull == 1) SM_ApplParam.Pausereason = PauseReasonEnum_EEPLogMemoryFull;
 801d6f6:	4b73      	ldr	r3, [pc, #460]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d6f8:	7a5b      	ldrb	r3, [r3, #9]
 801d6fa:	2b01      	cmp	r3, #1
 801d6fc:	d104      	bne.n	801d708 <SM_StateMachineHandler+0x370>
 801d6fe:	4b72      	ldr	r3, [pc, #456]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d700:	2209      	movs	r2, #9
 801d702:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d706:	e034      	b.n	801d772 <SM_StateMachineHandler+0x3da>
					else if(Appl_diagActiveFault.UnderVoltage == 1) SM_ApplParam.Pausereason = PauseReasonEnum_UnderVoltage;
 801d708:	4b6e      	ldr	r3, [pc, #440]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d70a:	795b      	ldrb	r3, [r3, #5]
 801d70c:	2b01      	cmp	r3, #1
 801d70e:	d104      	bne.n	801d71a <SM_StateMachineHandler+0x382>
 801d710:	4b6d      	ldr	r3, [pc, #436]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d712:	220b      	movs	r2, #11
 801d714:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d718:	e02b      	b.n	801d772 <SM_StateMachineHandler+0x3da>
					else if(Appl_diagActiveFault.FiltercktOpen == 1) SM_ApplParam.Pausereason = PauseReasonEnum_FilterCircuitOpen;
 801d71a:	4b6a      	ldr	r3, [pc, #424]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d71c:	7a9b      	ldrb	r3, [r3, #10]
 801d71e:	2b01      	cmp	r3, #1
 801d720:	d104      	bne.n	801d72c <SM_StateMachineHandler+0x394>
 801d722:	4b69      	ldr	r3, [pc, #420]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d724:	220d      	movs	r2, #13
 801d726:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d72a:	e022      	b.n	801d772 <SM_StateMachineHandler+0x3da>
					else if(Appl_diagActiveFault.HighTempperatureSCR == 1) SM_ApplParam.Pausereason = PauseReasonEnum_HighTemp;
 801d72c:	4b65      	ldr	r3, [pc, #404]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d72e:	799b      	ldrb	r3, [r3, #6]
 801d730:	2b01      	cmp	r3, #1
 801d732:	d104      	bne.n	801d73e <SM_StateMachineHandler+0x3a6>
 801d734:	4b64      	ldr	r3, [pc, #400]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d736:	2206      	movs	r2, #6
 801d738:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d73c:	e019      	b.n	801d772 <SM_StateMachineHandler+0x3da>
					else if(Appl_diagActiveFault.OverVoltage == 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverVoltage;
 801d73e:	4b61      	ldr	r3, [pc, #388]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d740:	7adb      	ldrb	r3, [r3, #11]
 801d742:	2b01      	cmp	r3, #1
 801d744:	d104      	bne.n	801d750 <SM_StateMachineHandler+0x3b8>
 801d746:	4b60      	ldr	r3, [pc, #384]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d748:	220e      	movs	r2, #14
 801d74a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d74e:	e010      	b.n	801d772 <SM_StateMachineHandler+0x3da>
					else if(Appl_diagActiveFault.PhaseReversal == 1) SM_ApplParam.Pausereason = PauseReasonEnum_PhaseReversal;
 801d750:	4b5c      	ldr	r3, [pc, #368]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d752:	79db      	ldrb	r3, [r3, #7]
 801d754:	2b01      	cmp	r3, #1
 801d756:	d104      	bne.n	801d762 <SM_StateMachineHandler+0x3ca>
 801d758:	4b5b      	ldr	r3, [pc, #364]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d75a:	2207      	movs	r2, #7
 801d75c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d760:	e007      	b.n	801d772 <SM_StateMachineHandler+0x3da>
					else if(Appl_diagActiveFault.OverCurrent == 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverCurrent;
 801d762:	4b58      	ldr	r3, [pc, #352]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d764:	7b1b      	ldrb	r3, [r3, #12]
 801d766:	2b01      	cmp	r3, #1
 801d768:	d103      	bne.n	801d772 <SM_StateMachineHandler+0x3da>
 801d76a:	4b57      	ldr	r3, [pc, #348]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d76c:	220f      	movs	r2, #15
 801d76e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					SM_enumECUState = SM_enum_ECU_CVPauseMode;
 801d772:	4b52      	ldr	r3, [pc, #328]	; (801d8bc <SM_StateMachineHandler+0x524>)
 801d774:	220b      	movs	r2, #11
 801d776:	701a      	strb	r2, [r3, #0]
 801d778:	f000 bd72 	b.w	801e260 <SM_StateMachineHandler+0xec8>
				}
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_CCPreparing){
 801d77c:	4b4f      	ldr	r3, [pc, #316]	; (801d8bc <SM_StateMachineHandler+0x524>)
 801d77e:	781b      	ldrb	r3, [r3, #0]
 801d780:	b2db      	uxtb	r3, r3
 801d782:	2b05      	cmp	r3, #5
 801d784:	f040 80a4 	bne.w	801d8d0 <SM_StateMachineHandler+0x538>
			BUZZER_OFF();
 801d788:	2200      	movs	r2, #0
 801d78a:	2140      	movs	r1, #64	; 0x40
 801d78c:	484f      	ldr	r0, [pc, #316]	; (801d8cc <SM_StateMachineHandler+0x534>)
 801d78e:	f7f6 fb03 	bl	8013d98 <HAL_GPIO_WritePin>
			if(Display.DGUSParam.PageId == DGUS_PAGEID_CCPREPARING){
 801d792:	4b4b      	ldr	r3, [pc, #300]	; (801d8c0 <SM_StateMachineHandler+0x528>)
 801d794:	885b      	ldrh	r3, [r3, #2]
 801d796:	2b13      	cmp	r3, #19
 801d798:	f040 8562 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
				if(Appl_diagActiveFault.PowerFail_Z1 != 1 &&
 801d79c:	4b49      	ldr	r3, [pc, #292]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d79e:	781b      	ldrb	r3, [r3, #0]
 801d7a0:	2b01      	cmp	r3, #1
 801d7a2:	d02d      	beq.n	801d800 <SM_StateMachineHandler+0x468>
						Appl_diagActiveFault.PowerFail_Z2 != 1 &&
 801d7a4:	4b47      	ldr	r3, [pc, #284]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d7a6:	785b      	ldrb	r3, [r3, #1]
				if(Appl_diagActiveFault.PowerFail_Z1 != 1 &&
 801d7a8:	2b01      	cmp	r3, #1
 801d7aa:	d029      	beq.n	801d800 <SM_StateMachineHandler+0x468>
						Appl_diagActiveFault.PowerFail_Z3 != 1 &&
 801d7ac:	4b45      	ldr	r3, [pc, #276]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d7ae:	789b      	ldrb	r3, [r3, #2]
						Appl_diagActiveFault.PowerFail_Z2 != 1 &&
 801d7b0:	2b01      	cmp	r3, #1
 801d7b2:	d025      	beq.n	801d800 <SM_StateMachineHandler+0x468>
						Appl_diagActiveFault.BatteryReversal != 1 &&
 801d7b4:	4b43      	ldr	r3, [pc, #268]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d7b6:	7a1b      	ldrb	r3, [r3, #8]
						Appl_diagActiveFault.PowerFail_Z3 != 1 &&
 801d7b8:	2b01      	cmp	r3, #1
 801d7ba:	d021      	beq.n	801d800 <SM_StateMachineHandler+0x468>
						Appl_diagActiveFault.EEPLogMemoryFull != 1 &&
 801d7bc:	4b41      	ldr	r3, [pc, #260]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d7be:	7a5b      	ldrb	r3, [r3, #9]
						Appl_diagActiveFault.BatteryReversal != 1 &&
 801d7c0:	2b01      	cmp	r3, #1
 801d7c2:	d01d      	beq.n	801d800 <SM_StateMachineHandler+0x468>
						Appl_diagActiveFault.HighTempperatureSCR != 1 &&
 801d7c4:	4b3f      	ldr	r3, [pc, #252]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d7c6:	799b      	ldrb	r3, [r3, #6]
						Appl_diagActiveFault.EEPLogMemoryFull != 1 &&
 801d7c8:	2b01      	cmp	r3, #1
 801d7ca:	d019      	beq.n	801d800 <SM_StateMachineHandler+0x468>
						Appl_diagActiveFault.OverVoltage != 1 &&
 801d7cc:	4b3d      	ldr	r3, [pc, #244]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d7ce:	7adb      	ldrb	r3, [r3, #11]
						Appl_diagActiveFault.HighTempperatureSCR != 1 &&
 801d7d0:	2b01      	cmp	r3, #1
 801d7d2:	d015      	beq.n	801d800 <SM_StateMachineHandler+0x468>
						Appl_diagActiveFault.PhaseReversal != 1 &&
 801d7d4:	4b3b      	ldr	r3, [pc, #236]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d7d6:	79db      	ldrb	r3, [r3, #7]
						Appl_diagActiveFault.OverVoltage != 1 &&
 801d7d8:	2b01      	cmp	r3, #1
 801d7da:	d011      	beq.n	801d800 <SM_StateMachineHandler+0x468>
						Appl_diagActiveFault.FiltercktOpen !=1 &&
 801d7dc:	4b39      	ldr	r3, [pc, #228]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d7de:	7a9b      	ldrb	r3, [r3, #10]
						Appl_diagActiveFault.PhaseReversal != 1 &&
 801d7e0:	2b01      	cmp	r3, #1
 801d7e2:	d00d      	beq.n	801d800 <SM_StateMachineHandler+0x468>
						Appl_diagActiveFault.UnderVoltage != 1 &&
 801d7e4:	4b37      	ldr	r3, [pc, #220]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d7e6:	795b      	ldrb	r3, [r3, #5]
						Appl_diagActiveFault.FiltercktOpen !=1 &&
 801d7e8:	2b01      	cmp	r3, #1
 801d7ea:	d009      	beq.n	801d800 <SM_StateMachineHandler+0x468>
						Appl_diagActiveFault.OverCurrent != 1){
 801d7ec:	4b35      	ldr	r3, [pc, #212]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d7ee:	7b1b      	ldrb	r3, [r3, #12]
						Appl_diagActiveFault.UnderVoltage != 1 &&
 801d7f0:	2b01      	cmp	r3, #1
 801d7f2:	d005      	beq.n	801d800 <SM_StateMachineHandler+0x468>
					StartSelftestCCPrepare(loopms);
 801d7f4:	79fb      	ldrb	r3, [r7, #7]
 801d7f6:	4618      	mov	r0, r3
 801d7f8:	f002 fcce 	bl	8020198 <StartSelftestCCPrepare>
 801d7fc:	f000 bd30 	b.w	801e260 <SM_StateMachineHandler+0xec8>
				}
				else{
					if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||
 801d800:	4b30      	ldr	r3, [pc, #192]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d802:	781b      	ldrb	r3, [r3, #0]
 801d804:	2b01      	cmp	r3, #1
 801d806:	d007      	beq.n	801d818 <SM_StateMachineHandler+0x480>
							(Appl_diagActiveFault.PowerFail_Z2 == 1) ||
 801d808:	4b2e      	ldr	r3, [pc, #184]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d80a:	785b      	ldrb	r3, [r3, #1]
					if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||
 801d80c:	2b01      	cmp	r3, #1
 801d80e:	d003      	beq.n	801d818 <SM_StateMachineHandler+0x480>
							(Appl_diagActiveFault.PowerFail_Z3 == 1))
 801d810:	4b2c      	ldr	r3, [pc, #176]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d812:	789b      	ldrb	r3, [r3, #2]
							(Appl_diagActiveFault.PowerFail_Z2 == 1) ||
 801d814:	2b01      	cmp	r3, #1
 801d816:	d104      	bne.n	801d822 <SM_StateMachineHandler+0x48a>
						SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ1;
 801d818:	4b2b      	ldr	r3, [pc, #172]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d81a:	2205      	movs	r2, #5
 801d81c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d820:	e046      	b.n	801d8b0 <SM_StateMachineHandler+0x518>
					else if(Appl_diagActiveFault.BatteryReversal == 1) SM_ApplParam.Pausereason = PauseReasonEnum_BatteryReversal;
 801d822:	4b28      	ldr	r3, [pc, #160]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d824:	7a1b      	ldrb	r3, [r3, #8]
 801d826:	2b01      	cmp	r3, #1
 801d828:	d104      	bne.n	801d834 <SM_StateMachineHandler+0x49c>
 801d82a:	4b27      	ldr	r3, [pc, #156]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d82c:	2208      	movs	r2, #8
 801d82e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d832:	e03d      	b.n	801d8b0 <SM_StateMachineHandler+0x518>
					else if(Appl_diagActiveFault.EEPLogMemoryFull == 1) SM_ApplParam.Pausereason = PauseReasonEnum_EEPLogMemoryFull;
 801d834:	4b23      	ldr	r3, [pc, #140]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d836:	7a5b      	ldrb	r3, [r3, #9]
 801d838:	2b01      	cmp	r3, #1
 801d83a:	d104      	bne.n	801d846 <SM_StateMachineHandler+0x4ae>
 801d83c:	4b22      	ldr	r3, [pc, #136]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d83e:	2209      	movs	r2, #9
 801d840:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d844:	e034      	b.n	801d8b0 <SM_StateMachineHandler+0x518>
					else if(Appl_diagActiveFault.UnderVoltage == 1) SM_ApplParam.Pausereason = PauseReasonEnum_UnderVoltage;
 801d846:	4b1f      	ldr	r3, [pc, #124]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d848:	795b      	ldrb	r3, [r3, #5]
 801d84a:	2b01      	cmp	r3, #1
 801d84c:	d104      	bne.n	801d858 <SM_StateMachineHandler+0x4c0>
 801d84e:	4b1e      	ldr	r3, [pc, #120]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d850:	220b      	movs	r2, #11
 801d852:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d856:	e02b      	b.n	801d8b0 <SM_StateMachineHandler+0x518>
					else if(Appl_diagActiveFault.FiltercktOpen == 1) SM_ApplParam.Pausereason = PauseReasonEnum_FilterCircuitOpen;
 801d858:	4b1a      	ldr	r3, [pc, #104]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d85a:	7a9b      	ldrb	r3, [r3, #10]
 801d85c:	2b01      	cmp	r3, #1
 801d85e:	d104      	bne.n	801d86a <SM_StateMachineHandler+0x4d2>
 801d860:	4b19      	ldr	r3, [pc, #100]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d862:	220d      	movs	r2, #13
 801d864:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d868:	e022      	b.n	801d8b0 <SM_StateMachineHandler+0x518>
					else if(Appl_diagActiveFault.HighTempperatureSCR == 1) SM_ApplParam.Pausereason = PauseReasonEnum_HighTemp;
 801d86a:	4b16      	ldr	r3, [pc, #88]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d86c:	799b      	ldrb	r3, [r3, #6]
 801d86e:	2b01      	cmp	r3, #1
 801d870:	d104      	bne.n	801d87c <SM_StateMachineHandler+0x4e4>
 801d872:	4b15      	ldr	r3, [pc, #84]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d874:	2206      	movs	r2, #6
 801d876:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d87a:	e019      	b.n	801d8b0 <SM_StateMachineHandler+0x518>
					else if(Appl_diagActiveFault.OverVoltage == 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverVoltage;
 801d87c:	4b11      	ldr	r3, [pc, #68]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d87e:	7adb      	ldrb	r3, [r3, #11]
 801d880:	2b01      	cmp	r3, #1
 801d882:	d104      	bne.n	801d88e <SM_StateMachineHandler+0x4f6>
 801d884:	4b10      	ldr	r3, [pc, #64]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d886:	220e      	movs	r2, #14
 801d888:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d88c:	e010      	b.n	801d8b0 <SM_StateMachineHandler+0x518>
					else if(Appl_diagActiveFault.PhaseReversal == 1) SM_ApplParam.Pausereason = PauseReasonEnum_PhaseReversal;
 801d88e:	4b0d      	ldr	r3, [pc, #52]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d890:	79db      	ldrb	r3, [r3, #7]
 801d892:	2b01      	cmp	r3, #1
 801d894:	d104      	bne.n	801d8a0 <SM_StateMachineHandler+0x508>
 801d896:	4b0c      	ldr	r3, [pc, #48]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d898:	2207      	movs	r2, #7
 801d89a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801d89e:	e007      	b.n	801d8b0 <SM_StateMachineHandler+0x518>
					else if(Appl_diagActiveFault.OverCurrent == 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverCurrent;
 801d8a0:	4b08      	ldr	r3, [pc, #32]	; (801d8c4 <SM_StateMachineHandler+0x52c>)
 801d8a2:	7b1b      	ldrb	r3, [r3, #12]
 801d8a4:	2b01      	cmp	r3, #1
 801d8a6:	d103      	bne.n	801d8b0 <SM_StateMachineHandler+0x518>
 801d8a8:	4b07      	ldr	r3, [pc, #28]	; (801d8c8 <SM_StateMachineHandler+0x530>)
 801d8aa:	220f      	movs	r2, #15
 801d8ac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					SM_enumECUState = SM_enum_ECU_CCPauseMode;
 801d8b0:	4b02      	ldr	r3, [pc, #8]	; (801d8bc <SM_StateMachineHandler+0x524>)
 801d8b2:	220a      	movs	r2, #10
 801d8b4:	701a      	strb	r2, [r3, #0]
 801d8b6:	f000 bcd3 	b.w	801e260 <SM_StateMachineHandler+0xec8>
 801d8ba:	bf00      	nop
 801d8bc:	20005114 	.word	0x20005114
 801d8c0:	20004f6c 	.word	0x20004f6c
 801d8c4:	20004d0c 	.word	0x20004d0c
 801d8c8:	20005034 	.word	0x20005034
 801d8cc:	40020800 	.word	0x40020800
				}
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_CCRun_Slow){
 801d8d0:	4baa      	ldr	r3, [pc, #680]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801d8d2:	781b      	ldrb	r3, [r3, #0]
 801d8d4:	b2db      	uxtb	r3, r3
 801d8d6:	2b0d      	cmp	r3, #13
 801d8d8:	d150      	bne.n	801d97c <SM_StateMachineHandler+0x5e4>
			localruntimrctr++;
 801d8da:	4ba9      	ldr	r3, [pc, #676]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	3301      	adds	r3, #1
 801d8e0:	4aa7      	ldr	r2, [pc, #668]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801d8e2:	6013      	str	r3, [r2, #0]
			SM_ApplParam.BuzzerCounter++;
 801d8e4:	4ba7      	ldr	r3, [pc, #668]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d8e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d8e8:	3301      	adds	r3, #1
 801d8ea:	4aa6      	ldr	r2, [pc, #664]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d8ec:	6613      	str	r3, [r2, #96]	; 0x60
			if(SM_ApplParam.BuzzerCounter > (1000/loopms) && SM_ApplParam.Buzzertoggle == 0){
 801d8ee:	4ba5      	ldr	r3, [pc, #660]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d8f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d8f2:	79fa      	ldrb	r2, [r7, #7]
 801d8f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d8f8:	fb91 f2f2 	sdiv	r2, r1, r2
 801d8fc:	4293      	cmp	r3, r2
 801d8fe:	d910      	bls.n	801d922 <SM_StateMachineHandler+0x58a>
 801d900:	4ba0      	ldr	r3, [pc, #640]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d902:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801d906:	2b00      	cmp	r3, #0
 801d908:	d10b      	bne.n	801d922 <SM_StateMachineHandler+0x58a>
				BUZZER_OFF();
 801d90a:	2200      	movs	r2, #0
 801d90c:	2140      	movs	r1, #64	; 0x40
 801d90e:	489e      	ldr	r0, [pc, #632]	; (801db88 <SM_StateMachineHandler+0x7f0>)
 801d910:	f7f6 fa42 	bl	8013d98 <HAL_GPIO_WritePin>
				SM_ApplParam.Buzzertoggle = 1;
 801d914:	4b9b      	ldr	r3, [pc, #620]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d916:	2201      	movs	r2, #1
 801d918:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				SM_ApplParam.BuzzerCounter = 0;
 801d91c:	4b99      	ldr	r3, [pc, #612]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d91e:	2200      	movs	r2, #0
 801d920:	661a      	str	r2, [r3, #96]	; 0x60
			}
			if(localruntimrctr >= (1000/loopms)){
 801d922:	79fb      	ldrb	r3, [r7, #7]
 801d924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d928:	fb92 f3f3 	sdiv	r3, r2, r3
 801d92c:	461a      	mov	r2, r3
 801d92e:	4b94      	ldr	r3, [pc, #592]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	429a      	cmp	r2, r3
 801d934:	d808      	bhi.n	801d948 <SM_StateMachineHandler+0x5b0>
				localruntimrctr = 0;
 801d936:	4b92      	ldr	r3, [pc, #584]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801d938:	2200      	movs	r2, #0
 801d93a:	601a      	str	r2, [r3, #0]
				Update_Usage_hour_eep();
 801d93c:	f7fe fbbc 	bl	801c0b8 <Update_Usage_hour_eep>
				SafeRunCCMonitoring();
 801d940:	f001 ffb0 	bl	801f8a4 <SafeRunCCMonitoring>
				Update_RunningTime_eep();
 801d944:	f7fe fbf0 	bl	801c128 <Update_RunningTime_eep>
			}
			if(SM_enumECUState != SM_enum_ECU_CCPauseMode){
 801d948:	4b8c      	ldr	r3, [pc, #560]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801d94a:	781b      	ldrb	r3, [r3, #0]
 801d94c:	b2db      	uxtb	r3, r3
 801d94e:	2b0a      	cmp	r3, #10
 801d950:	f000 8486 	beq.w	801e260 <SM_StateMachineHandler+0xec8>

				if(Display.DGUSParam.PageId == DGUS_PAGEID_CCPAUSED){
 801d954:	4b8d      	ldr	r3, [pc, #564]	; (801db8c <SM_StateMachineHandler+0x7f4>)
 801d956:	885b      	ldrh	r3, [r3, #2]
 801d958:	2b07      	cmp	r3, #7
 801d95a:	f040 8481 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
					SM_enumECUState = SM_enum_ECU_CCPauseMode;
 801d95e:	4b87      	ldr	r3, [pc, #540]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801d960:	220a      	movs	r2, #10
 801d962:	701a      	strb	r2, [r3, #0]
					SM_ApplParam.Pausereason = PauseReasonEnum_UserPaused;
 801d964:	4b87      	ldr	r3, [pc, #540]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d966:	2202      	movs	r2, #2
 801d968:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					StopCurrentProvidingLoop(SM_ApplParam.Pausereason);
 801d96c:	4b85      	ldr	r3, [pc, #532]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d96e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801d972:	4618      	mov	r0, r3
 801d974:	f002 fa76 	bl	801fe64 <StopCurrentProvidingLoop>
 801d978:	f000 bc72 	b.w	801e260 <SM_StateMachineHandler+0xec8>
				}
			}

		}
		else if(SM_enumECUState == SM_enum_ECU_CCRun_Stable){
 801d97c:	4b7f      	ldr	r3, [pc, #508]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801d97e:	781b      	ldrb	r3, [r3, #0]
 801d980:	b2db      	uxtb	r3, r3
 801d982:	2b0e      	cmp	r3, #14
 801d984:	d150      	bne.n	801da28 <SM_StateMachineHandler+0x690>
			localruntimrctr++;
 801d986:	4b7e      	ldr	r3, [pc, #504]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801d988:	681b      	ldr	r3, [r3, #0]
 801d98a:	3301      	adds	r3, #1
 801d98c:	4a7c      	ldr	r2, [pc, #496]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801d98e:	6013      	str	r3, [r2, #0]
			SM_ApplParam.BuzzerCounter++;
 801d990:	4b7c      	ldr	r3, [pc, #496]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d994:	3301      	adds	r3, #1
 801d996:	4a7b      	ldr	r2, [pc, #492]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d998:	6613      	str	r3, [r2, #96]	; 0x60
			if(SM_ApplParam.BuzzerCounter > (1000/loopms) && SM_ApplParam.Buzzertoggle == 0){
 801d99a:	4b7a      	ldr	r3, [pc, #488]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d99c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d99e:	79fa      	ldrb	r2, [r7, #7]
 801d9a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d9a4:	fb91 f2f2 	sdiv	r2, r1, r2
 801d9a8:	4293      	cmp	r3, r2
 801d9aa:	d910      	bls.n	801d9ce <SM_StateMachineHandler+0x636>
 801d9ac:	4b75      	ldr	r3, [pc, #468]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d9ae:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d10b      	bne.n	801d9ce <SM_StateMachineHandler+0x636>
				BUZZER_OFF();
 801d9b6:	2200      	movs	r2, #0
 801d9b8:	2140      	movs	r1, #64	; 0x40
 801d9ba:	4873      	ldr	r0, [pc, #460]	; (801db88 <SM_StateMachineHandler+0x7f0>)
 801d9bc:	f7f6 f9ec 	bl	8013d98 <HAL_GPIO_WritePin>
				SM_ApplParam.Buzzertoggle = 1;
 801d9c0:	4b70      	ldr	r3, [pc, #448]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d9c2:	2201      	movs	r2, #1
 801d9c4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				SM_ApplParam.BuzzerCounter = 0;
 801d9c8:	4b6e      	ldr	r3, [pc, #440]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801d9ca:	2200      	movs	r2, #0
 801d9cc:	661a      	str	r2, [r3, #96]	; 0x60
			}
			if(localruntimrctr >= (1000/loopms)){
 801d9ce:	79fb      	ldrb	r3, [r7, #7]
 801d9d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d9d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d9d8:	461a      	mov	r2, r3
 801d9da:	4b69      	ldr	r3, [pc, #420]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801d9dc:	681b      	ldr	r3, [r3, #0]
 801d9de:	429a      	cmp	r2, r3
 801d9e0:	d808      	bhi.n	801d9f4 <SM_StateMachineHandler+0x65c>
				localruntimrctr = 0;
 801d9e2:	4b67      	ldr	r3, [pc, #412]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801d9e4:	2200      	movs	r2, #0
 801d9e6:	601a      	str	r2, [r3, #0]
				Update_Usage_hour_eep();
 801d9e8:	f7fe fb66 	bl	801c0b8 <Update_Usage_hour_eep>
				SafeRunCCMonitoring();
 801d9ec:	f001 ff5a 	bl	801f8a4 <SafeRunCCMonitoring>
				Update_RunningTime_eep();
 801d9f0:	f7fe fb9a 	bl	801c128 <Update_RunningTime_eep>
			}

			if(SM_enumECUState != SM_enum_ECU_CCPauseMode){
 801d9f4:	4b61      	ldr	r3, [pc, #388]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801d9f6:	781b      	ldrb	r3, [r3, #0]
 801d9f8:	b2db      	uxtb	r3, r3
 801d9fa:	2b0a      	cmp	r3, #10
 801d9fc:	f000 8430 	beq.w	801e260 <SM_StateMachineHandler+0xec8>
				if(Display.DGUSParam.PageId == DGUS_PAGEID_CCPAUSED){
 801da00:	4b62      	ldr	r3, [pc, #392]	; (801db8c <SM_StateMachineHandler+0x7f4>)
 801da02:	885b      	ldrh	r3, [r3, #2]
 801da04:	2b07      	cmp	r3, #7
 801da06:	f040 842b 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
					SM_enumECUState = SM_enum_ECU_CCPauseMode;
 801da0a:	4b5c      	ldr	r3, [pc, #368]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801da0c:	220a      	movs	r2, #10
 801da0e:	701a      	strb	r2, [r3, #0]
					SM_ApplParam.Pausereason = PauseReasonEnum_UserPaused;
 801da10:	4b5c      	ldr	r3, [pc, #368]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801da12:	2202      	movs	r2, #2
 801da14:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					StopCurrentProvidingLoop(SM_ApplParam.Pausereason);
 801da18:	4b5a      	ldr	r3, [pc, #360]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801da1a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801da1e:	4618      	mov	r0, r3
 801da20:	f002 fa20 	bl	801fe64 <StopCurrentProvidingLoop>
 801da24:	f000 bc1c 	b.w	801e260 <SM_StateMachineHandler+0xec8>
				}
			}

		}
		else if(SM_enumECUState == SM_enum_ECU_CVRun_Slow){
 801da28:	4b54      	ldr	r3, [pc, #336]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801da2a:	781b      	ldrb	r3, [r3, #0]
 801da2c:	b2db      	uxtb	r3, r3
 801da2e:	2b0f      	cmp	r3, #15
 801da30:	d14f      	bne.n	801dad2 <SM_StateMachineHandler+0x73a>
			localruntimrctr++;
 801da32:	4b53      	ldr	r3, [pc, #332]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801da34:	681b      	ldr	r3, [r3, #0]
 801da36:	3301      	adds	r3, #1
 801da38:	4a51      	ldr	r2, [pc, #324]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801da3a:	6013      	str	r3, [r2, #0]
			SM_ApplParam.BuzzerCounter++;
 801da3c:	4b51      	ldr	r3, [pc, #324]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801da3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da40:	3301      	adds	r3, #1
 801da42:	4a50      	ldr	r2, [pc, #320]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801da44:	6613      	str	r3, [r2, #96]	; 0x60
			if(SM_ApplParam.BuzzerCounter > (1000/loopms) && SM_ApplParam.Buzzertoggle == 0){
 801da46:	4b4f      	ldr	r3, [pc, #316]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801da48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da4a:	79fa      	ldrb	r2, [r7, #7]
 801da4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801da50:	fb91 f2f2 	sdiv	r2, r1, r2
 801da54:	4293      	cmp	r3, r2
 801da56:	d910      	bls.n	801da7a <SM_StateMachineHandler+0x6e2>
 801da58:	4b4a      	ldr	r3, [pc, #296]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801da5a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801da5e:	2b00      	cmp	r3, #0
 801da60:	d10b      	bne.n	801da7a <SM_StateMachineHandler+0x6e2>
				BUZZER_OFF();
 801da62:	2200      	movs	r2, #0
 801da64:	2140      	movs	r1, #64	; 0x40
 801da66:	4848      	ldr	r0, [pc, #288]	; (801db88 <SM_StateMachineHandler+0x7f0>)
 801da68:	f7f6 f996 	bl	8013d98 <HAL_GPIO_WritePin>
				SM_ApplParam.Buzzertoggle = 1;
 801da6c:	4b45      	ldr	r3, [pc, #276]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801da6e:	2201      	movs	r2, #1
 801da70:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				SM_ApplParam.BuzzerCounter = 0;
 801da74:	4b43      	ldr	r3, [pc, #268]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801da76:	2200      	movs	r2, #0
 801da78:	661a      	str	r2, [r3, #96]	; 0x60
			}
			if(localruntimrctr >= (1000/loopms)){
 801da7a:	79fb      	ldrb	r3, [r7, #7]
 801da7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801da80:	fb92 f3f3 	sdiv	r3, r2, r3
 801da84:	461a      	mov	r2, r3
 801da86:	4b3e      	ldr	r3, [pc, #248]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	429a      	cmp	r2, r3
 801da8c:	d808      	bhi.n	801daa0 <SM_StateMachineHandler+0x708>
				localruntimrctr = 0;
 801da8e:	4b3c      	ldr	r3, [pc, #240]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801da90:	2200      	movs	r2, #0
 801da92:	601a      	str	r2, [r3, #0]
				Update_Usage_hour_eep();
 801da94:	f7fe fb10 	bl	801c0b8 <Update_Usage_hour_eep>
				SafeRunCVMonitoring();
 801da98:	f001 ffc0 	bl	801fa1c <SafeRunCVMonitoring>
				Update_RunningTime_eep();
 801da9c:	f7fe fb44 	bl	801c128 <Update_RunningTime_eep>
			}
			if(SM_enumECUState != SM_enum_ECU_CVPauseMode){
 801daa0:	4b36      	ldr	r3, [pc, #216]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801daa2:	781b      	ldrb	r3, [r3, #0]
 801daa4:	b2db      	uxtb	r3, r3
 801daa6:	2b0b      	cmp	r3, #11
 801daa8:	f000 83da 	beq.w	801e260 <SM_StateMachineHandler+0xec8>
				if(Display.DGUSParam.PageId == DGUS_PAGEID_CVPAUSED){
 801daac:	4b37      	ldr	r3, [pc, #220]	; (801db8c <SM_StateMachineHandler+0x7f4>)
 801daae:	885b      	ldrh	r3, [r3, #2]
 801dab0:	2b0d      	cmp	r3, #13
 801dab2:	f040 83d5 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
					SM_enumECUState = SM_enum_ECU_CVPauseMode;
 801dab6:	4b31      	ldr	r3, [pc, #196]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801dab8:	220b      	movs	r2, #11
 801daba:	701a      	strb	r2, [r3, #0]
					SM_ApplParam.Pausereason = PauseReasonEnum_UserPaused;
 801dabc:	4b31      	ldr	r3, [pc, #196]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801dabe:	2202      	movs	r2, #2
 801dac0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					StopCurrentProvidingLoop(SM_ApplParam.Pausereason);
 801dac4:	4b2f      	ldr	r3, [pc, #188]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801dac6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801daca:	4618      	mov	r0, r3
 801dacc:	f002 f9ca 	bl	801fe64 <StopCurrentProvidingLoop>
 801dad0:	e3c6      	b.n	801e260 <SM_StateMachineHandler+0xec8>
				}
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_CVRun_Stable){
 801dad2:	4b2a      	ldr	r3, [pc, #168]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801dad4:	781b      	ldrb	r3, [r3, #0]
 801dad6:	b2db      	uxtb	r3, r3
 801dad8:	2b10      	cmp	r3, #16
 801dada:	d159      	bne.n	801db90 <SM_StateMachineHandler+0x7f8>
			localruntimrctr++;
 801dadc:	4b28      	ldr	r3, [pc, #160]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	3301      	adds	r3, #1
 801dae2:	4a27      	ldr	r2, [pc, #156]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801dae4:	6013      	str	r3, [r2, #0]
			SM_ApplParam.BuzzerCounter++;
 801dae6:	4b27      	ldr	r3, [pc, #156]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801dae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801daea:	3301      	adds	r3, #1
 801daec:	4a25      	ldr	r2, [pc, #148]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801daee:	6613      	str	r3, [r2, #96]	; 0x60
			if(SM_ApplParam.BuzzerCounter > (1000/loopms) && SM_ApplParam.Buzzertoggle == 0){
 801daf0:	4b24      	ldr	r3, [pc, #144]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801daf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801daf4:	79fa      	ldrb	r2, [r7, #7]
 801daf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801dafa:	fb91 f2f2 	sdiv	r2, r1, r2
 801dafe:	4293      	cmp	r3, r2
 801db00:	d910      	bls.n	801db24 <SM_StateMachineHandler+0x78c>
 801db02:	4b20      	ldr	r3, [pc, #128]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801db04:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d10b      	bne.n	801db24 <SM_StateMachineHandler+0x78c>
				BUZZER_OFF();
 801db0c:	2200      	movs	r2, #0
 801db0e:	2140      	movs	r1, #64	; 0x40
 801db10:	481d      	ldr	r0, [pc, #116]	; (801db88 <SM_StateMachineHandler+0x7f0>)
 801db12:	f7f6 f941 	bl	8013d98 <HAL_GPIO_WritePin>
				SM_ApplParam.Buzzertoggle = 1;
 801db16:	4b1b      	ldr	r3, [pc, #108]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801db18:	2201      	movs	r2, #1
 801db1a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				SM_ApplParam.BuzzerCounter = 0;
 801db1e:	4b19      	ldr	r3, [pc, #100]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801db20:	2200      	movs	r2, #0
 801db22:	661a      	str	r2, [r3, #96]	; 0x60
			}
			if(localruntimrctr >= (1000/loopms)){
 801db24:	79fb      	ldrb	r3, [r7, #7]
 801db26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801db2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801db2e:	461a      	mov	r2, r3
 801db30:	4b13      	ldr	r3, [pc, #76]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	429a      	cmp	r2, r3
 801db36:	d808      	bhi.n	801db4a <SM_StateMachineHandler+0x7b2>
				localruntimrctr = 0;
 801db38:	4b11      	ldr	r3, [pc, #68]	; (801db80 <SM_StateMachineHandler+0x7e8>)
 801db3a:	2200      	movs	r2, #0
 801db3c:	601a      	str	r2, [r3, #0]
				Update_Usage_hour_eep();
 801db3e:	f7fe fabb 	bl	801c0b8 <Update_Usage_hour_eep>
				SafeRunCVMonitoring();
 801db42:	f001 ff6b 	bl	801fa1c <SafeRunCVMonitoring>
				Update_RunningTime_eep();
 801db46:	f7fe faef 	bl	801c128 <Update_RunningTime_eep>
			}
			if(SM_enumECUState != SM_enum_ECU_CVPauseMode){
 801db4a:	4b0c      	ldr	r3, [pc, #48]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801db4c:	781b      	ldrb	r3, [r3, #0]
 801db4e:	b2db      	uxtb	r3, r3
 801db50:	2b0b      	cmp	r3, #11
 801db52:	f000 8385 	beq.w	801e260 <SM_StateMachineHandler+0xec8>
				if(Display.DGUSParam.PageId == DGUS_PAGEID_CVPAUSED){
 801db56:	4b0d      	ldr	r3, [pc, #52]	; (801db8c <SM_StateMachineHandler+0x7f4>)
 801db58:	885b      	ldrh	r3, [r3, #2]
 801db5a:	2b0d      	cmp	r3, #13
 801db5c:	f040 8380 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
					SM_enumECUState = SM_enum_ECU_CVPauseMode;
 801db60:	4b06      	ldr	r3, [pc, #24]	; (801db7c <SM_StateMachineHandler+0x7e4>)
 801db62:	220b      	movs	r2, #11
 801db64:	701a      	strb	r2, [r3, #0]
					SM_ApplParam.Pausereason = PauseReasonEnum_UserPaused;
 801db66:	4b07      	ldr	r3, [pc, #28]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801db68:	2202      	movs	r2, #2
 801db6a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					StopCurrentProvidingLoop(SM_ApplParam.Pausereason);
 801db6e:	4b05      	ldr	r3, [pc, #20]	; (801db84 <SM_StateMachineHandler+0x7ec>)
 801db70:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801db74:	4618      	mov	r0, r3
 801db76:	f002 f975 	bl	801fe64 <StopCurrentProvidingLoop>
 801db7a:	e371      	b.n	801e260 <SM_StateMachineHandler+0xec8>
 801db7c:	20005114 	.word	0x20005114
 801db80:	20000938 	.word	0x20000938
 801db84:	20005034 	.word	0x20005034
 801db88:	40020800 	.word	0x40020800
 801db8c:	20004f6c 	.word	0x20004f6c
				}
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_CCPauseMode){
 801db90:	4bab      	ldr	r3, [pc, #684]	; (801de40 <SM_StateMachineHandler+0xaa8>)
 801db92:	781b      	ldrb	r3, [r3, #0]
 801db94:	b2db      	uxtb	r3, r3
 801db96:	2b0a      	cmp	r3, #10
 801db98:	f040 8091 	bne.w	801dcbe <SM_StateMachineHandler+0x926>
			CAPCONTACTOR_OFF();
 801db9c:	2201      	movs	r2, #1
 801db9e:	2180      	movs	r1, #128	; 0x80
 801dba0:	48a8      	ldr	r0, [pc, #672]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801dba2:	f7f6 f8f9 	bl	8013d98 <HAL_GPIO_WritePin>
			DC_CONTACTOR_OFF();
 801dba6:	2201      	movs	r2, #1
 801dba8:	2102      	movs	r1, #2
 801dbaa:	48a7      	ldr	r0, [pc, #668]	; (801de48 <SM_StateMachineHandler+0xab0>)
 801dbac:	f7f6 f8f4 	bl	8013d98 <HAL_GPIO_WritePin>

			SM_ApplParam.ap_PrepareMode = 0;
 801dbb0:	4ba6      	ldr	r3, [pc, #664]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dbb2:	2200      	movs	r2, #0
 801dbb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			SM_ApplParam.ap_PrepareCounter1 = 0;
 801dbb8:	4ba4      	ldr	r3, [pc, #656]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dbba:	2200      	movs	r2, #0
 801dbbc:	63da      	str	r2, [r3, #60]	; 0x3c
			SM_ApplParam.ap_PrepareCounter0 = 0;
 801dbbe:	4ba3      	ldr	r3, [pc, #652]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dbc0:	2200      	movs	r2, #0
 801dbc2:	639a      	str	r2, [r3, #56]	; 0x38

			if(Display.DGUSParam.PageId == DGUS_PAGEID_SPLASHSCREEN1){
 801dbc4:	4ba2      	ldr	r3, [pc, #648]	; (801de50 <SM_StateMachineHandler+0xab8>)
 801dbc6:	885b      	ldrh	r3, [r3, #2]
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d103      	bne.n	801dbd4 <SM_StateMachineHandler+0x83c>
				SM_enumECUState = SM_enum_ECU_CCPreparing;
 801dbcc:	4b9c      	ldr	r3, [pc, #624]	; (801de40 <SM_StateMachineHandler+0xaa8>)
 801dbce:	2205      	movs	r2, #5
 801dbd0:	701a      	strb	r2, [r3, #0]
 801dbd2:	e009      	b.n	801dbe8 <SM_StateMachineHandler+0x850>
			}
			else if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801dbd4:	4b9e      	ldr	r3, [pc, #632]	; (801de50 <SM_StateMachineHandler+0xab8>)
 801dbd6:	885b      	ldrh	r3, [r3, #2]
 801dbd8:	2b02      	cmp	r3, #2
 801dbda:	d105      	bne.n	801dbe8 <SM_StateMachineHandler+0x850>
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801dbdc:	4b98      	ldr	r3, [pc, #608]	; (801de40 <SM_StateMachineHandler+0xaa8>)
 801dbde:	2201      	movs	r2, #1
 801dbe0:	701a      	strb	r2, [r3, #0]
				Appl_EEPParam.stm32.EEP_PowerFailedLastTime = 0;
 801dbe2:	4b9c      	ldr	r3, [pc, #624]	; (801de54 <SM_StateMachineHandler+0xabc>)
 801dbe4:	2200      	movs	r2, #0
 801dbe6:	729a      	strb	r2, [r3, #10]
			}
			if(SM_ApplParam.Pausereason == PauseReasonEnum_UserPaused){
 801dbe8:	4b98      	ldr	r3, [pc, #608]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dbea:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801dbee:	2b02      	cmp	r3, #2
 801dbf0:	d11f      	bne.n	801dc32 <SM_StateMachineHandler+0x89a>
				SM_ApplParam.BuzzerCounter++;
 801dbf2:	4b96      	ldr	r3, [pc, #600]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dbf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dbf6:	3301      	adds	r3, #1
 801dbf8:	4a94      	ldr	r2, [pc, #592]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dbfa:	6613      	str	r3, [r2, #96]	; 0x60
				if(SM_ApplParam.BuzzerCounter > (1000/loopms) && SM_ApplParam.Buzzertoggle == 0){
 801dbfc:	4b93      	ldr	r3, [pc, #588]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dbfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dc00:	79fa      	ldrb	r2, [r7, #7]
 801dc02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801dc06:	fb91 f2f2 	sdiv	r2, r1, r2
 801dc0a:	4293      	cmp	r3, r2
 801dc0c:	d954      	bls.n	801dcb8 <SM_StateMachineHandler+0x920>
 801dc0e:	4b8f      	ldr	r3, [pc, #572]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dc10:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d14f      	bne.n	801dcb8 <SM_StateMachineHandler+0x920>
					BUZZER_OFF();
 801dc18:	2200      	movs	r2, #0
 801dc1a:	2140      	movs	r1, #64	; 0x40
 801dc1c:	4889      	ldr	r0, [pc, #548]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801dc1e:	f7f6 f8bb 	bl	8013d98 <HAL_GPIO_WritePin>
					SM_ApplParam.Buzzertoggle = 1;
 801dc22:	4b8a      	ldr	r3, [pc, #552]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dc24:	2201      	movs	r2, #1
 801dc26:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
					SM_ApplParam.BuzzerCounter = 0;
 801dc2a:	4b88      	ldr	r3, [pc, #544]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dc2c:	2200      	movs	r2, #0
 801dc2e:	661a      	str	r2, [r3, #96]	; 0x60
 801dc30:	e042      	b.n	801dcb8 <SM_StateMachineHandler+0x920>
				}
			}
			else{
				SM_ApplParam.BuzzerCounter++;
 801dc32:	4b86      	ldr	r3, [pc, #536]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dc34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dc36:	3301      	adds	r3, #1
 801dc38:	4a84      	ldr	r2, [pc, #528]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dc3a:	6613      	str	r3, [r2, #96]	; 0x60
				if((SM_ApplParam.BuzzerCounter % (100/loopms)) == 0 && SM_ApplParam.Buzzertoggle == 0){
 801dc3c:	4b83      	ldr	r3, [pc, #524]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dc3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dc40:	79fa      	ldrb	r2, [r7, #7]
 801dc42:	2164      	movs	r1, #100	; 0x64
 801dc44:	fb91 f2f2 	sdiv	r2, r1, r2
 801dc48:	fbb3 f1f2 	udiv	r1, r3, r2
 801dc4c:	fb02 f201 	mul.w	r2, r2, r1
 801dc50:	1a9b      	subs	r3, r3, r2
 801dc52:	2b00      	cmp	r3, #0
 801dc54:	d130      	bne.n	801dcb8 <SM_StateMachineHandler+0x920>
 801dc56:	4b7d      	ldr	r3, [pc, #500]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dc58:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	d12b      	bne.n	801dcb8 <SM_StateMachineHandler+0x920>
					BUZZER_OFF();
 801dc60:	2200      	movs	r2, #0
 801dc62:	2140      	movs	r1, #64	; 0x40
 801dc64:	4877      	ldr	r0, [pc, #476]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801dc66:	f7f6 f897 	bl	8013d98 <HAL_GPIO_WritePin>
					if(SM_ApplParam.BuzzerCounter % (200/loopms) == 0){
 801dc6a:	4b78      	ldr	r3, [pc, #480]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dc6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dc6e:	79fa      	ldrb	r2, [r7, #7]
 801dc70:	21c8      	movs	r1, #200	; 0xc8
 801dc72:	fb91 f2f2 	sdiv	r2, r1, r2
 801dc76:	fbb3 f1f2 	udiv	r1, r3, r2
 801dc7a:	fb02 f201 	mul.w	r2, r2, r1
 801dc7e:	1a9b      	subs	r3, r3, r2
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d119      	bne.n	801dcb8 <SM_StateMachineHandler+0x920>
						BUZZER_ON();
 801dc84:	2201      	movs	r2, #1
 801dc86:	2140      	movs	r1, #64	; 0x40
 801dc88:	486e      	ldr	r0, [pc, #440]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801dc8a:	f7f6 f885 	bl	8013d98 <HAL_GPIO_WritePin>
						if(SM_ApplParam.BuzzerCounter > (2500/loopms)){
 801dc8e:	4b6f      	ldr	r3, [pc, #444]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dc90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dc92:	79fa      	ldrb	r2, [r7, #7]
 801dc94:	f640 11c4 	movw	r1, #2500	; 0x9c4
 801dc98:	fb91 f2f2 	sdiv	r2, r1, r2
 801dc9c:	4293      	cmp	r3, r2
 801dc9e:	d90b      	bls.n	801dcb8 <SM_StateMachineHandler+0x920>
							SM_ApplParam.Buzzertoggle = 1;
 801dca0:	4b6a      	ldr	r3, [pc, #424]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dca2:	2201      	movs	r2, #1
 801dca4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
							SM_ApplParam.BuzzerCounter = 0;
 801dca8:	4b68      	ldr	r3, [pc, #416]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dcaa:	2200      	movs	r2, #0
 801dcac:	661a      	str	r2, [r3, #96]	; 0x60
							BUZZER_OFF();
 801dcae:	2200      	movs	r2, #0
 801dcb0:	2140      	movs	r1, #64	; 0x40
 801dcb2:	4864      	ldr	r0, [pc, #400]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801dcb4:	f7f6 f870 	bl	8013d98 <HAL_GPIO_WritePin>
						}
					}
				}
			}
			WriteEEPData();
 801dcb8:	f7fe fa6c 	bl	801c194 <WriteEEPData>
 801dcbc:	e2d0      	b.n	801e260 <SM_StateMachineHandler+0xec8>
		}
		else if(SM_enumECUState == SM_enum_ECU_CVPauseMode){
 801dcbe:	4b60      	ldr	r3, [pc, #384]	; (801de40 <SM_StateMachineHandler+0xaa8>)
 801dcc0:	781b      	ldrb	r3, [r3, #0]
 801dcc2:	b2db      	uxtb	r3, r3
 801dcc4:	2b0b      	cmp	r3, #11
 801dcc6:	f040 8091 	bne.w	801ddec <SM_StateMachineHandler+0xa54>

			CAPCONTACTOR_OFF();
 801dcca:	2201      	movs	r2, #1
 801dccc:	2180      	movs	r1, #128	; 0x80
 801dcce:	485d      	ldr	r0, [pc, #372]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801dcd0:	f7f6 f862 	bl	8013d98 <HAL_GPIO_WritePin>
			DC_CONTACTOR_OFF();
 801dcd4:	2201      	movs	r2, #1
 801dcd6:	2102      	movs	r1, #2
 801dcd8:	485b      	ldr	r0, [pc, #364]	; (801de48 <SM_StateMachineHandler+0xab0>)
 801dcda:	f7f6 f85d 	bl	8013d98 <HAL_GPIO_WritePin>
			SM_ApplParam.ap_PrepareCounter1 = 0;
 801dcde:	4b5b      	ldr	r3, [pc, #364]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dce0:	2200      	movs	r2, #0
 801dce2:	63da      	str	r2, [r3, #60]	; 0x3c
			SM_ApplParam.ap_PrepareCounter0 = 0;
 801dce4:	4b59      	ldr	r3, [pc, #356]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dce6:	2200      	movs	r2, #0
 801dce8:	639a      	str	r2, [r3, #56]	; 0x38
			SM_ApplParam.ap_PrepareMode = 0;
 801dcea:	4b58      	ldr	r3, [pc, #352]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dcec:	2200      	movs	r2, #0
 801dcee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if(Display.DGUSParam.PageId == DGUS_PAGEID_SPLASHSCREEN1){
 801dcf2:	4b57      	ldr	r3, [pc, #348]	; (801de50 <SM_StateMachineHandler+0xab8>)
 801dcf4:	885b      	ldrh	r3, [r3, #2]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d103      	bne.n	801dd02 <SM_StateMachineHandler+0x96a>
				SM_enumECUState = SM_enum_ECU_CVPreparing;
 801dcfa:	4b51      	ldr	r3, [pc, #324]	; (801de40 <SM_StateMachineHandler+0xaa8>)
 801dcfc:	2204      	movs	r2, #4
 801dcfe:	701a      	strb	r2, [r3, #0]
 801dd00:	e009      	b.n	801dd16 <SM_StateMachineHandler+0x97e>
			}
			else if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801dd02:	4b53      	ldr	r3, [pc, #332]	; (801de50 <SM_StateMachineHandler+0xab8>)
 801dd04:	885b      	ldrh	r3, [r3, #2]
 801dd06:	2b02      	cmp	r3, #2
 801dd08:	d105      	bne.n	801dd16 <SM_StateMachineHandler+0x97e>
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801dd0a:	4b4d      	ldr	r3, [pc, #308]	; (801de40 <SM_StateMachineHandler+0xaa8>)
 801dd0c:	2201      	movs	r2, #1
 801dd0e:	701a      	strb	r2, [r3, #0]
				Appl_EEPParam.stm32.EEP_PowerFailedLastTime = 0;
 801dd10:	4b50      	ldr	r3, [pc, #320]	; (801de54 <SM_StateMachineHandler+0xabc>)
 801dd12:	2200      	movs	r2, #0
 801dd14:	729a      	strb	r2, [r3, #10]
			}
			if(SM_ApplParam.Pausereason == PauseReasonEnum_UserPaused){
 801dd16:	4b4d      	ldr	r3, [pc, #308]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd18:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801dd1c:	2b02      	cmp	r3, #2
 801dd1e:	d11f      	bne.n	801dd60 <SM_StateMachineHandler+0x9c8>
				SM_ApplParam.BuzzerCounter++;
 801dd20:	4b4a      	ldr	r3, [pc, #296]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dd24:	3301      	adds	r3, #1
 801dd26:	4a49      	ldr	r2, [pc, #292]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd28:	6613      	str	r3, [r2, #96]	; 0x60
				if(SM_ApplParam.BuzzerCounter > (1000/loopms) && SM_ApplParam.Buzzertoggle == 0){
 801dd2a:	4b48      	ldr	r3, [pc, #288]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dd2e:	79fa      	ldrb	r2, [r7, #7]
 801dd30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801dd34:	fb91 f2f2 	sdiv	r2, r1, r2
 801dd38:	4293      	cmp	r3, r2
 801dd3a:	d954      	bls.n	801dde6 <SM_StateMachineHandler+0xa4e>
 801dd3c:	4b43      	ldr	r3, [pc, #268]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd3e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	d14f      	bne.n	801dde6 <SM_StateMachineHandler+0xa4e>
					BUZZER_OFF();
 801dd46:	2200      	movs	r2, #0
 801dd48:	2140      	movs	r1, #64	; 0x40
 801dd4a:	483e      	ldr	r0, [pc, #248]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801dd4c:	f7f6 f824 	bl	8013d98 <HAL_GPIO_WritePin>
					SM_ApplParam.Buzzertoggle = 1;
 801dd50:	4b3e      	ldr	r3, [pc, #248]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd52:	2201      	movs	r2, #1
 801dd54:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
					SM_ApplParam.BuzzerCounter = 0;
 801dd58:	4b3c      	ldr	r3, [pc, #240]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd5a:	2200      	movs	r2, #0
 801dd5c:	661a      	str	r2, [r3, #96]	; 0x60
 801dd5e:	e042      	b.n	801dde6 <SM_StateMachineHandler+0xa4e>
				}
			}
			else{
				SM_ApplParam.BuzzerCounter++;
 801dd60:	4b3a      	ldr	r3, [pc, #232]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dd64:	3301      	adds	r3, #1
 801dd66:	4a39      	ldr	r2, [pc, #228]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd68:	6613      	str	r3, [r2, #96]	; 0x60
				if((SM_ApplParam.BuzzerCounter % (100/loopms)) == 0 && SM_ApplParam.Buzzertoggle == 0){
 801dd6a:	4b38      	ldr	r3, [pc, #224]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dd6e:	79fa      	ldrb	r2, [r7, #7]
 801dd70:	2164      	movs	r1, #100	; 0x64
 801dd72:	fb91 f2f2 	sdiv	r2, r1, r2
 801dd76:	fbb3 f1f2 	udiv	r1, r3, r2
 801dd7a:	fb02 f201 	mul.w	r2, r2, r1
 801dd7e:	1a9b      	subs	r3, r3, r2
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d130      	bne.n	801dde6 <SM_StateMachineHandler+0xa4e>
 801dd84:	4b31      	ldr	r3, [pc, #196]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd86:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d12b      	bne.n	801dde6 <SM_StateMachineHandler+0xa4e>
					BUZZER_OFF();
 801dd8e:	2200      	movs	r2, #0
 801dd90:	2140      	movs	r1, #64	; 0x40
 801dd92:	482c      	ldr	r0, [pc, #176]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801dd94:	f7f6 f800 	bl	8013d98 <HAL_GPIO_WritePin>
					if(SM_ApplParam.BuzzerCounter % (200/loopms) == 0){
 801dd98:	4b2c      	ldr	r3, [pc, #176]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801dd9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dd9c:	79fa      	ldrb	r2, [r7, #7]
 801dd9e:	21c8      	movs	r1, #200	; 0xc8
 801dda0:	fb91 f2f2 	sdiv	r2, r1, r2
 801dda4:	fbb3 f1f2 	udiv	r1, r3, r2
 801dda8:	fb02 f201 	mul.w	r2, r2, r1
 801ddac:	1a9b      	subs	r3, r3, r2
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d119      	bne.n	801dde6 <SM_StateMachineHandler+0xa4e>
						BUZZER_ON();
 801ddb2:	2201      	movs	r2, #1
 801ddb4:	2140      	movs	r1, #64	; 0x40
 801ddb6:	4823      	ldr	r0, [pc, #140]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801ddb8:	f7f5 ffee 	bl	8013d98 <HAL_GPIO_WritePin>
						if(SM_ApplParam.BuzzerCounter > (2500/loopms)){
 801ddbc:	4b23      	ldr	r3, [pc, #140]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801ddbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ddc0:	79fa      	ldrb	r2, [r7, #7]
 801ddc2:	f640 11c4 	movw	r1, #2500	; 0x9c4
 801ddc6:	fb91 f2f2 	sdiv	r2, r1, r2
 801ddca:	4293      	cmp	r3, r2
 801ddcc:	d90b      	bls.n	801dde6 <SM_StateMachineHandler+0xa4e>
							SM_ApplParam.Buzzertoggle = 1;
 801ddce:	4b1f      	ldr	r3, [pc, #124]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801ddd0:	2201      	movs	r2, #1
 801ddd2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
							SM_ApplParam.BuzzerCounter = 0;
 801ddd6:	4b1d      	ldr	r3, [pc, #116]	; (801de4c <SM_StateMachineHandler+0xab4>)
 801ddd8:	2200      	movs	r2, #0
 801ddda:	661a      	str	r2, [r3, #96]	; 0x60
							BUZZER_OFF();
 801dddc:	2200      	movs	r2, #0
 801ddde:	2140      	movs	r1, #64	; 0x40
 801dde0:	4818      	ldr	r0, [pc, #96]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801dde2:	f7f5 ffd9 	bl	8013d98 <HAL_GPIO_WritePin>
						}
					}
				}
			}
			WriteEEPData();
 801dde6:	f7fe f9d5 	bl	801c194 <WriteEEPData>
 801ddea:	e239      	b.n	801e260 <SM_StateMachineHandler+0xec8>
		}
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu){
 801ddec:	4b14      	ldr	r3, [pc, #80]	; (801de40 <SM_StateMachineHandler+0xaa8>)
 801ddee:	781b      	ldrb	r3, [r3, #0]
 801ddf0:	b2db      	uxtb	r3, r3
 801ddf2:	2b06      	cmp	r3, #6
 801ddf4:	d130      	bne.n	801de58 <SM_StateMachineHandler+0xac0>
			/*Vishwesh:
			 * Basic Behaviour of this Mode*/
			WriteEEPData();
 801ddf6:	f7fe f9cd 	bl	801c194 <WriteEEPData>
			DC_CONTACTOR_OFF();
 801ddfa:	2201      	movs	r2, #1
 801ddfc:	2102      	movs	r1, #2
 801ddfe:	4812      	ldr	r0, [pc, #72]	; (801de48 <SM_StateMachineHandler+0xab0>)
 801de00:	f7f5 ffca 	bl	8013d98 <HAL_GPIO_WritePin>
			BUZZER_OFF();
 801de04:	2200      	movs	r2, #0
 801de06:	2140      	movs	r1, #64	; 0x40
 801de08:	480e      	ldr	r0, [pc, #56]	; (801de44 <SM_StateMachineHandler+0xaac>)
 801de0a:	f7f5 ffc5 	bl	8013d98 <HAL_GPIO_WritePin>
			REDLEDON();
			GREENLEDOFF();
			ORANGELEDOFF();
			BLUELEDOFF();

			if(Display.DGUSParam.PageId == DGUS_PAGEID_SETTINGDATATRANSFER){
 801de0e:	4b10      	ldr	r3, [pc, #64]	; (801de50 <SM_StateMachineHandler+0xab8>)
 801de10:	885b      	ldrh	r3, [r3, #2]
 801de12:	2b09      	cmp	r3, #9
 801de14:	d103      	bne.n	801de1e <SM_StateMachineHandler+0xa86>
				SM_enumECUState = SM_enum_ECU_SettingMenu_Transfer;
 801de16:	4b0a      	ldr	r3, [pc, #40]	; (801de40 <SM_StateMachineHandler+0xaa8>)
 801de18:	2207      	movs	r2, #7
 801de1a:	701a      	strb	r2, [r3, #0]
 801de1c:	e220      	b.n	801e260 <SM_StateMachineHandler+0xec8>
			}
			else if(Display.DGUSParam.PageId == DGUS_PAGEID_SETTINGERASE){
 801de1e:	4b0c      	ldr	r3, [pc, #48]	; (801de50 <SM_StateMachineHandler+0xab8>)
 801de20:	885b      	ldrh	r3, [r3, #2]
 801de22:	2b0b      	cmp	r3, #11
 801de24:	d103      	bne.n	801de2e <SM_StateMachineHandler+0xa96>
				SM_enumECUState = SM_enum_ECU_SettingMenu_Erase;
 801de26:	4b06      	ldr	r3, [pc, #24]	; (801de40 <SM_StateMachineHandler+0xaa8>)
 801de28:	2208      	movs	r2, #8
 801de2a:	701a      	strb	r2, [r3, #0]
 801de2c:	e218      	b.n	801e260 <SM_StateMachineHandler+0xec8>
			}
			else if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801de2e:	4b08      	ldr	r3, [pc, #32]	; (801de50 <SM_StateMachineHandler+0xab8>)
 801de30:	885b      	ldrh	r3, [r3, #2]
 801de32:	2b02      	cmp	r3, #2
 801de34:	f040 8214 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801de38:	4b01      	ldr	r3, [pc, #4]	; (801de40 <SM_StateMachineHandler+0xaa8>)
 801de3a:	2201      	movs	r2, #1
 801de3c:	701a      	strb	r2, [r3, #0]
 801de3e:	e20f      	b.n	801e260 <SM_StateMachineHandler+0xec8>
 801de40:	20005114 	.word	0x20005114
 801de44:	40020800 	.word	0x40020800
 801de48:	40020400 	.word	0x40020400
 801de4c:	20005034 	.word	0x20005034
 801de50:	20004f6c 	.word	0x20004f6c
 801de54:	20000278 	.word	0x20000278
			}

		}
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Transfer){
 801de58:	4ba1      	ldr	r3, [pc, #644]	; (801e0e0 <SM_StateMachineHandler+0xd48>)
 801de5a:	781b      	ldrb	r3, [r3, #0]
 801de5c:	b2db      	uxtb	r3, r3
 801de5e:	2b07      	cmp	r3, #7
 801de60:	d132      	bne.n	801dec8 <SM_StateMachineHandler+0xb30>
			if(Display.DGUSParam.PageId == DGUS_PAGEID_SETTIGNDATAOPERATIONON){
 801de62:	4ba0      	ldr	r3, [pc, #640]	; (801e0e4 <SM_StateMachineHandler+0xd4c>)
 801de64:	885b      	ldrh	r3, [r3, #2]
 801de66:	2b0a      	cmp	r3, #10
 801de68:	d11e      	bne.n	801dea8 <SM_StateMachineHandler+0xb10>
				SM_enumECUState = SM_enum_ECU_SettingMenu_Completed;
 801de6a:	4b9d      	ldr	r3, [pc, #628]	; (801e0e0 <SM_StateMachineHandler+0xd48>)
 801de6c:	2209      	movs	r2, #9
 801de6e:	701a      	strb	r2, [r3, #0]
				Appl_Display.SelectedSubIndex = 1;
 801de70:	4b9d      	ldr	r3, [pc, #628]	; (801e0e8 <SM_StateMachineHandler+0xd50>)
 801de72:	2201      	movs	r2, #1
 801de74:	729a      	strb	r2, [r3, #10]
				SM_ApplParam.Transfer_PageloopCount = 1;
 801de76:	4b9d      	ldr	r3, [pc, #628]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801de78:	2201      	movs	r2, #1
 801de7a:	641a      	str	r2, [r3, #64]	; 0x40
				SM_ApplParam.Transfer_OffsetCounter = 0;
 801de7c:	4b9b      	ldr	r3, [pc, #620]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801de7e:	2200      	movs	r2, #0
 801de80:	645a      	str	r2, [r3, #68]	; 0x44
				SM_ApplParam.ExtEepTotalRecordsTotransferred = (uint16_t)((uint16_t)Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH<<8 | Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL);
 801de82:	4b9b      	ldr	r3, [pc, #620]	; (801e0f0 <SM_StateMachineHandler+0xd58>)
 801de84:	7c5b      	ldrb	r3, [r3, #17]
 801de86:	021b      	lsls	r3, r3, #8
 801de88:	b21a      	sxth	r2, r3
 801de8a:	4b99      	ldr	r3, [pc, #612]	; (801e0f0 <SM_StateMachineHandler+0xd58>)
 801de8c:	7c9b      	ldrb	r3, [r3, #18]
 801de8e:	b21b      	sxth	r3, r3
 801de90:	4313      	orrs	r3, r2
 801de92:	b21b      	sxth	r3, r3
 801de94:	b29a      	uxth	r2, r3
 801de96:	4b95      	ldr	r3, [pc, #596]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801de98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				TotalNumOfrecords = SM_ApplParam.ExtEepTotalRecordsTotransferred;
 801de9c:	4b93      	ldr	r3, [pc, #588]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801de9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dea2:	461a      	mov	r2, r3
 801dea4:	4b93      	ldr	r3, [pc, #588]	; (801e0f4 <SM_StateMachineHandler+0xd5c>)
 801dea6:	601a      	str	r2, [r3, #0]
			}
			if(Display.DGUSParam.PageId == DGUS_PAGEID_SETTINGS){
 801dea8:	4b8e      	ldr	r3, [pc, #568]	; (801e0e4 <SM_StateMachineHandler+0xd4c>)
 801deaa:	885b      	ldrh	r3, [r3, #2]
 801deac:	2b08      	cmp	r3, #8
 801deae:	d102      	bne.n	801deb6 <SM_StateMachineHandler+0xb1e>
				SM_enumECUState = SM_enum_ECU_SettingMenu;
 801deb0:	4b8b      	ldr	r3, [pc, #556]	; (801e0e0 <SM_StateMachineHandler+0xd48>)
 801deb2:	2206      	movs	r2, #6
 801deb4:	701a      	strb	r2, [r3, #0]
			}
			if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801deb6:	4b8b      	ldr	r3, [pc, #556]	; (801e0e4 <SM_StateMachineHandler+0xd4c>)
 801deb8:	885b      	ldrh	r3, [r3, #2]
 801deba:	2b02      	cmp	r3, #2
 801debc:	f040 81d0 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801dec0:	4b87      	ldr	r3, [pc, #540]	; (801e0e0 <SM_StateMachineHandler+0xd48>)
 801dec2:	2201      	movs	r2, #1
 801dec4:	701a      	strb	r2, [r3, #0]
 801dec6:	e1cb      	b.n	801e260 <SM_StateMachineHandler+0xec8>
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Erase){
 801dec8:	4b85      	ldr	r3, [pc, #532]	; (801e0e0 <SM_StateMachineHandler+0xd48>)
 801deca:	781b      	ldrb	r3, [r3, #0]
 801decc:	b2db      	uxtb	r3, r3
 801dece:	2b08      	cmp	r3, #8
 801ded0:	d11f      	bne.n	801df12 <SM_StateMachineHandler+0xb7a>
			if(Display.DGUSParam.PageId == DGUS_PAGEID_SETTIGNDATAOPERATIONON){
 801ded2:	4b84      	ldr	r3, [pc, #528]	; (801e0e4 <SM_StateMachineHandler+0xd4c>)
 801ded4:	885b      	ldrh	r3, [r3, #2]
 801ded6:	2b0a      	cmp	r3, #10
 801ded8:	d10b      	bne.n	801def2 <SM_StateMachineHandler+0xb5a>
				Appl_Display.SelectedSubIndex = 2;
 801deda:	4b83      	ldr	r3, [pc, #524]	; (801e0e8 <SM_StateMachineHandler+0xd50>)
 801dedc:	2202      	movs	r2, #2
 801dede:	729a      	strb	r2, [r3, #10]
				SM_ApplParam.Transfer_PageloopCount = 1;
 801dee0:	4b82      	ldr	r3, [pc, #520]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801dee2:	2201      	movs	r2, #1
 801dee4:	641a      	str	r2, [r3, #64]	; 0x40
				SM_ApplParam.Transfer_OffsetCounter = 0;
 801dee6:	4b81      	ldr	r3, [pc, #516]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801dee8:	2200      	movs	r2, #0
 801deea:	645a      	str	r2, [r3, #68]	; 0x44
				SM_enumECUState = SM_enum_ECU_SettingMenu_Completed;
 801deec:	4b7c      	ldr	r3, [pc, #496]	; (801e0e0 <SM_StateMachineHandler+0xd48>)
 801deee:	2209      	movs	r2, #9
 801def0:	701a      	strb	r2, [r3, #0]
			}
			if(Display.DGUSParam.PageId == DGUS_PAGEID_SETTINGS){
 801def2:	4b7c      	ldr	r3, [pc, #496]	; (801e0e4 <SM_StateMachineHandler+0xd4c>)
 801def4:	885b      	ldrh	r3, [r3, #2]
 801def6:	2b08      	cmp	r3, #8
 801def8:	d102      	bne.n	801df00 <SM_StateMachineHandler+0xb68>
				SM_enumECUState = SM_enum_ECU_SettingMenu;
 801defa:	4b79      	ldr	r3, [pc, #484]	; (801e0e0 <SM_StateMachineHandler+0xd48>)
 801defc:	2206      	movs	r2, #6
 801defe:	701a      	strb	r2, [r3, #0]
			}
			if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801df00:	4b78      	ldr	r3, [pc, #480]	; (801e0e4 <SM_StateMachineHandler+0xd4c>)
 801df02:	885b      	ldrh	r3, [r3, #2]
 801df04:	2b02      	cmp	r3, #2
 801df06:	f040 81ab 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801df0a:	4b75      	ldr	r3, [pc, #468]	; (801e0e0 <SM_StateMachineHandler+0xd48>)
 801df0c:	2201      	movs	r2, #1
 801df0e:	701a      	strb	r2, [r3, #0]
 801df10:	e1a6      	b.n	801e260 <SM_StateMachineHandler+0xec8>
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Completed){
 801df12:	4b73      	ldr	r3, [pc, #460]	; (801e0e0 <SM_StateMachineHandler+0xd48>)
 801df14:	781b      	ldrb	r3, [r3, #0]
 801df16:	b2db      	uxtb	r3, r3
 801df18:	2b09      	cmp	r3, #9
 801df1a:	f040 8121 	bne.w	801e160 <SM_StateMachineHandler+0xdc8>

			ORANGELEDON();
			if(Appl_Display.SelectedSubIndex == 1){
 801df1e:	4b72      	ldr	r3, [pc, #456]	; (801e0e8 <SM_StateMachineHandler+0xd50>)
 801df20:	7a9b      	ldrb	r3, [r3, #10]
 801df22:	2b01      	cmp	r3, #1
 801df24:	f040 809a 	bne.w	801e05c <SM_StateMachineHandler+0xcc4>
				 * For the current implementation, it can take values 0,16,32,..240.
				 * Once it reaches 240, data must be read --> then increment the page --> Reset the offset to 0
				 */


				if(SM_ApplParam.ExtEepTotalRecordsTotransferred > 0 ){
 801df28:	4b70      	ldr	r3, [pc, #448]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801df2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801df2e:	2b00      	cmp	r3, #0
 801df30:	f000 8090 	beq.w	801e054 <SM_StateMachineHandler+0xcbc>
					/*Step 1: Read 1 Record*/
					Appl_EEPParam.stm32.ExtEepAddress = 0xA0;
 801df34:	4b6e      	ldr	r3, [pc, #440]	; (801e0f0 <SM_StateMachineHandler+0xd58>)
 801df36:	22a0      	movs	r2, #160	; 0xa0
 801df38:	74da      	strb	r2, [r3, #19]
					EEP_Error = EEPROM_Read(SM_ApplParam.Transfer_PageloopCount,SM_ApplParam.Transfer_OffsetCounter,&VishExtEepRead.bytes[0],1*NUM_OF_BYTES_IN_A_EXTEEP_RECORD,Appl_EEPParam.stm32.ExtEepAddress);
 801df3a:	4b6c      	ldr	r3, [pc, #432]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801df3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df3e:	b298      	uxth	r0, r3
 801df40:	4b6a      	ldr	r3, [pc, #424]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801df42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801df44:	b299      	uxth	r1, r3
 801df46:	4b6a      	ldr	r3, [pc, #424]	; (801e0f0 <SM_StateMachineHandler+0xd58>)
 801df48:	7cdb      	ldrb	r3, [r3, #19]
 801df4a:	9300      	str	r3, [sp, #0]
 801df4c:	2320      	movs	r3, #32
 801df4e:	4a6a      	ldr	r2, [pc, #424]	; (801e0f8 <SM_StateMachineHandler+0xd60>)
 801df50:	f7fe fd98 	bl	801ca84 <EEPROM_Read>
 801df54:	4603      	mov	r3, r0
 801df56:	73fb      	strb	r3, [r7, #15]
					if(EEP_Error == EXTEEP_OK){
 801df58:	7bfb      	ldrb	r3, [r7, #15]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d158      	bne.n	801e010 <SM_StateMachineHandler+0xc78>
						/*Step 2: Increment offset to next record*/
						SM_ApplParam.Transfer_OffsetCounter += NUM_OF_BYTES_IN_A_EXTEEP_RECORD;
 801df5e:	4b63      	ldr	r3, [pc, #396]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801df60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801df62:	3320      	adds	r3, #32
 801df64:	4a61      	ldr	r2, [pc, #388]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801df66:	6453      	str	r3, [r2, #68]	; 0x44
						/*Step 3: Decrement offset to next record*/
						SM_ApplParam.ExtEepTotalRecordsTotransferred-=1;
 801df68:	4b60      	ldr	r3, [pc, #384]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801df6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801df6e:	3b01      	subs	r3, #1
 801df70:	b29a      	uxth	r2, r3
 801df72:	4b5e      	ldr	r3, [pc, #376]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801df74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						SM_ApplParam.ap_fltDataPercent = SM_ApplParam.ExtEepTotalRecordsTotransferred*100.0/((float)TotalNumOfrecords);
 801df78:	4b5c      	ldr	r3, [pc, #368]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801df7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801df7e:	4618      	mov	r0, r3
 801df80:	f7f2 fa08 	bl	8010394 <__aeabi_i2d>
 801df84:	f04f 0200 	mov.w	r2, #0
 801df88:	4b5c      	ldr	r3, [pc, #368]	; (801e0fc <SM_StateMachineHandler+0xd64>)
 801df8a:	f7f2 fa6d 	bl	8010468 <__aeabi_dmul>
 801df8e:	4602      	mov	r2, r0
 801df90:	460b      	mov	r3, r1
 801df92:	4614      	mov	r4, r2
 801df94:	461d      	mov	r5, r3
 801df96:	4b57      	ldr	r3, [pc, #348]	; (801e0f4 <SM_StateMachineHandler+0xd5c>)
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	ee07 3a90 	vmov	s15, r3
 801df9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dfa2:	ee17 0a90 	vmov	r0, s15
 801dfa6:	f7f2 fa07 	bl	80103b8 <__aeabi_f2d>
 801dfaa:	4602      	mov	r2, r0
 801dfac:	460b      	mov	r3, r1
 801dfae:	4620      	mov	r0, r4
 801dfb0:	4629      	mov	r1, r5
 801dfb2:	f7f2 fb83 	bl	80106bc <__aeabi_ddiv>
 801dfb6:	4602      	mov	r2, r0
 801dfb8:	460b      	mov	r3, r1
 801dfba:	4610      	mov	r0, r2
 801dfbc:	4619      	mov	r1, r3
 801dfbe:	f7f2 fd4b 	bl	8010a58 <__aeabi_d2f>
 801dfc2:	4603      	mov	r3, r0
 801dfc4:	4a49      	ldr	r2, [pc, #292]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801dfc6:	6313      	str	r3, [r2, #48]	; 0x30
						SM_ApplParam.ap_fltDataPercent = 100-SM_ApplParam.ap_fltDataPercent;
 801dfc8:	4b48      	ldr	r3, [pc, #288]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801dfca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801dfce:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801e100 <SM_StateMachineHandler+0xd68>
 801dfd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801dfd6:	4b45      	ldr	r3, [pc, #276]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801dfd8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						VishwaErr = MapExteepToVishwaStruct();
 801dfdc:	f7fe f9b4 	bl	801c348 <MapExteepToVishwaStruct>
 801dfe0:	4603      	mov	r3, r0
 801dfe2:	73bb      	strb	r3, [r7, #14]

						if(VishwaErr == VISH_OK){
 801dfe4:	7bbb      	ldrb	r3, [r7, #14]
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d004      	beq.n	801dff4 <SM_StateMachineHandler+0xc5c>

						}
						else{
							Malloc_ErrorCounter++;
 801dfea:	4b46      	ldr	r3, [pc, #280]	; (801e104 <SM_StateMachineHandler+0xd6c>)
 801dfec:	681b      	ldr	r3, [r3, #0]
 801dfee:	3301      	adds	r3, #1
 801dff0:	4a44      	ldr	r2, [pc, #272]	; (801e104 <SM_StateMachineHandler+0xd6c>)
 801dff2:	6013      	str	r3, [r2, #0]
						}

						/*step 6 : */
						if(SM_ApplParam.Transfer_OffsetCounter >= ATMEL_EEP_CHIP_PAGE_SIZE){
 801dff4:	4b3d      	ldr	r3, [pc, #244]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801dff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dff8:	2bff      	cmp	r3, #255	; 0xff
 801dffa:	f240 8131 	bls.w	801e260 <SM_StateMachineHandler+0xec8>
							SM_ApplParam.Transfer_OffsetCounter = 0;
 801dffe:	4b3b      	ldr	r3, [pc, #236]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801e000:	2200      	movs	r2, #0
 801e002:	645a      	str	r2, [r3, #68]	; 0x44
							SM_ApplParam.Transfer_PageloopCount++;
 801e004:	4b39      	ldr	r3, [pc, #228]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801e006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e008:	3301      	adds	r3, #1
 801e00a:	4a38      	ldr	r2, [pc, #224]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801e00c:	6413      	str	r3, [r2, #64]	; 0x40
 801e00e:	e127      	b.n	801e260 <SM_StateMachineHandler+0xec8>
						}
					}
					else{
						ExtEEP_ErrorCounter++;
 801e010:	4b3d      	ldr	r3, [pc, #244]	; (801e108 <SM_StateMachineHandler+0xd70>)
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	3301      	adds	r3, #1
 801e016:	4a3c      	ldr	r2, [pc, #240]	; (801e108 <SM_StateMachineHandler+0xd70>)
 801e018:	6013      	str	r3, [r2, #0]
						/*ResetI2c*/
						(&hi2c1)->Instance->CR1 |= I2C_CR1_SWRST;
 801e01a:	4b3c      	ldr	r3, [pc, #240]	; (801e10c <SM_StateMachineHandler+0xd74>)
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	681a      	ldr	r2, [r3, #0]
 801e020:	4b3a      	ldr	r3, [pc, #232]	; (801e10c <SM_StateMachineHandler+0xd74>)
 801e022:	681b      	ldr	r3, [r3, #0]
 801e024:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e028:	601a      	str	r2, [r3, #0]
						(&hi2c1)->Instance->CR1 &= ~I2C_CR1_SWRST;
 801e02a:	4b38      	ldr	r3, [pc, #224]	; (801e10c <SM_StateMachineHandler+0xd74>)
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	681a      	ldr	r2, [r3, #0]
 801e030:	4b36      	ldr	r3, [pc, #216]	; (801e10c <SM_StateMachineHandler+0xd74>)
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e038:	601a      	str	r2, [r3, #0]

						if(ExtEEP_ErrorCounter >= 30){
 801e03a:	4b33      	ldr	r3, [pc, #204]	; (801e108 <SM_StateMachineHandler+0xd70>)
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	2b1d      	cmp	r3, #29
 801e040:	f240 810e 	bls.w	801e260 <SM_StateMachineHandler+0xec8>
							ExtEEP_ErrorCounter = 0;
 801e044:	4b30      	ldr	r3, [pc, #192]	; (801e108 <SM_StateMachineHandler+0xd70>)
 801e046:	2200      	movs	r2, #0
 801e048:	601a      	str	r2, [r3, #0]
							SM_ApplParam.ExtEepTotalRecordsTotransferred = 0;
 801e04a:	4b28      	ldr	r3, [pc, #160]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801e04c:	2200      	movs	r2, #0
 801e04e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801e052:	e105      	b.n	801e260 <SM_StateMachineHandler+0xec8>
						}
					}

				}
				else{
					SM_enumECUState = SM_enum_ECU_SettingMenu;
 801e054:	4b22      	ldr	r3, [pc, #136]	; (801e0e0 <SM_StateMachineHandler+0xd48>)
 801e056:	2206      	movs	r2, #6
 801e058:	701a      	strb	r2, [r3, #0]
 801e05a:	e101      	b.n	801e260 <SM_StateMachineHandler+0xec8>
				}
			}
			else if(Appl_Display.SelectedSubIndex == 2){
 801e05c:	4b22      	ldr	r3, [pc, #136]	; (801e0e8 <SM_StateMachineHandler+0xd50>)
 801e05e:	7a9b      	ldrb	r3, [r3, #10]
 801e060:	2b02      	cmp	r3, #2
 801e062:	f040 80fd 	bne.w	801e260 <SM_StateMachineHandler+0xec8>
				ResetRecords();
 801e066:	f7fe fc77 	bl	801c958 <ResetRecords>
				WriteEEPData();
 801e06a:	f7fe f893 	bl	801c194 <WriteEEPData>
				Appl_EEPParam.stm32.ExtEepAddress = 0xA0;
 801e06e:	4b20      	ldr	r3, [pc, #128]	; (801e0f0 <SM_StateMachineHandler+0xd58>)
 801e070:	22a0      	movs	r2, #160	; 0xa0
 801e072:	74da      	strb	r2, [r3, #19]
				EEP_Error = EEPROM_PageErase(SM_ApplParam.Transfer_PageloopCount,Appl_EEPParam.stm32.ExtEepAddress);
 801e074:	4b1d      	ldr	r3, [pc, #116]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801e076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e078:	b29b      	uxth	r3, r3
 801e07a:	4a1d      	ldr	r2, [pc, #116]	; (801e0f0 <SM_StateMachineHandler+0xd58>)
 801e07c:	7cd2      	ldrb	r2, [r2, #19]
 801e07e:	4611      	mov	r1, r2
 801e080:	4618      	mov	r0, r3
 801e082:	f7fe fd6f 	bl	801cb64 <EEPROM_PageErase>
 801e086:	4603      	mov	r3, r0
 801e088:	73fb      	strb	r3, [r7, #15]
				if(EEP_Error == EXTEEP_OK){
 801e08a:	7bfb      	ldrb	r3, [r7, #15]
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d13f      	bne.n	801e110 <SM_StateMachineHandler+0xd78>
					SM_ApplParam.Transfer_PageloopCount++;
 801e090:	4b16      	ldr	r3, [pc, #88]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801e092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e094:	3301      	adds	r3, #1
 801e096:	4a15      	ldr	r2, [pc, #84]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801e098:	6413      	str	r3, [r2, #64]	; 0x40
					SM_ApplParam.ap_fltDataPercent = SM_ApplParam.Transfer_PageloopCount*100.0/255.0;
 801e09a:	4b14      	ldr	r3, [pc, #80]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801e09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e09e:	4618      	mov	r0, r3
 801e0a0:	f7f2 f968 	bl	8010374 <__aeabi_ui2d>
 801e0a4:	f04f 0200 	mov.w	r2, #0
 801e0a8:	4b14      	ldr	r3, [pc, #80]	; (801e0fc <SM_StateMachineHandler+0xd64>)
 801e0aa:	f7f2 f9dd 	bl	8010468 <__aeabi_dmul>
 801e0ae:	4602      	mov	r2, r0
 801e0b0:	460b      	mov	r3, r1
 801e0b2:	4610      	mov	r0, r2
 801e0b4:	4619      	mov	r1, r3
 801e0b6:	a308      	add	r3, pc, #32	; (adr r3, 801e0d8 <SM_StateMachineHandler+0xd40>)
 801e0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0bc:	f7f2 fafe 	bl	80106bc <__aeabi_ddiv>
 801e0c0:	4602      	mov	r2, r0
 801e0c2:	460b      	mov	r3, r1
 801e0c4:	4610      	mov	r0, r2
 801e0c6:	4619      	mov	r1, r3
 801e0c8:	f7f2 fcc6 	bl	8010a58 <__aeabi_d2f>
 801e0cc:	4603      	mov	r3, r0
 801e0ce:	4a07      	ldr	r2, [pc, #28]	; (801e0ec <SM_StateMachineHandler+0xd54>)
 801e0d0:	6313      	str	r3, [r2, #48]	; 0x30
 801e0d2:	e03c      	b.n	801e14e <SM_StateMachineHandler+0xdb6>
 801e0d4:	f3af 8000 	nop.w
 801e0d8:	00000000 	.word	0x00000000
 801e0dc:	406fe000 	.word	0x406fe000
 801e0e0:	20005114 	.word	0x20005114
 801e0e4:	20004f6c 	.word	0x20004f6c
 801e0e8:	20004f08 	.word	0x20004f08
 801e0ec:	20005034 	.word	0x20005034
 801e0f0:	20000278 	.word	0x20000278
 801e0f4:	2000093c 	.word	0x2000093c
 801e0f8:	200050f4 	.word	0x200050f4
 801e0fc:	40590000 	.word	0x40590000
 801e100:	42c80000 	.word	0x42c80000
 801e104:	2000092c 	.word	0x2000092c
 801e108:	20000928 	.word	0x20000928
 801e10c:	200049a8 	.word	0x200049a8
				}
				else{
					ExtEEP_ErrorCounter++;
 801e110:	4b56      	ldr	r3, [pc, #344]	; (801e26c <SM_StateMachineHandler+0xed4>)
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	3301      	adds	r3, #1
 801e116:	4a55      	ldr	r2, [pc, #340]	; (801e26c <SM_StateMachineHandler+0xed4>)
 801e118:	6013      	str	r3, [r2, #0]
					/*ResetI2c*/
					(&hi2c1)->Instance->CR1 |= I2C_CR1_SWRST;
 801e11a:	4b55      	ldr	r3, [pc, #340]	; (801e270 <SM_StateMachineHandler+0xed8>)
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	681a      	ldr	r2, [r3, #0]
 801e120:	4b53      	ldr	r3, [pc, #332]	; (801e270 <SM_StateMachineHandler+0xed8>)
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e128:	601a      	str	r2, [r3, #0]
					(&hi2c1)->Instance->CR1 &= ~I2C_CR1_SWRST;
 801e12a:	4b51      	ldr	r3, [pc, #324]	; (801e270 <SM_StateMachineHandler+0xed8>)
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	681a      	ldr	r2, [r3, #0]
 801e130:	4b4f      	ldr	r3, [pc, #316]	; (801e270 <SM_StateMachineHandler+0xed8>)
 801e132:	681b      	ldr	r3, [r3, #0]
 801e134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e138:	601a      	str	r2, [r3, #0]

					if(ExtEEP_ErrorCounter >= 30){
 801e13a:	4b4c      	ldr	r3, [pc, #304]	; (801e26c <SM_StateMachineHandler+0xed4>)
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	2b1d      	cmp	r3, #29
 801e140:	d905      	bls.n	801e14e <SM_StateMachineHandler+0xdb6>
						ExtEEP_ErrorCounter = 0;
 801e142:	4b4a      	ldr	r3, [pc, #296]	; (801e26c <SM_StateMachineHandler+0xed4>)
 801e144:	2200      	movs	r2, #0
 801e146:	601a      	str	r2, [r3, #0]
						SM_ApplParam.Transfer_PageloopCount = 0xFF;
 801e148:	4b4a      	ldr	r3, [pc, #296]	; (801e274 <SM_StateMachineHandler+0xedc>)
 801e14a:	22ff      	movs	r2, #255	; 0xff
 801e14c:	641a      	str	r2, [r3, #64]	; 0x40
					}
				}
				if(SM_ApplParam.Transfer_PageloopCount >= 0xFF){
 801e14e:	4b49      	ldr	r3, [pc, #292]	; (801e274 <SM_StateMachineHandler+0xedc>)
 801e150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e152:	2bfe      	cmp	r3, #254	; 0xfe
 801e154:	f240 8084 	bls.w	801e260 <SM_StateMachineHandler+0xec8>
					SM_enumECUState = SM_enum_ECU_SettingMenu;
 801e158:	4b47      	ldr	r3, [pc, #284]	; (801e278 <SM_StateMachineHandler+0xee0>)
 801e15a:	2206      	movs	r2, #6
 801e15c:	701a      	strb	r2, [r3, #0]
 801e15e:	e07f      	b.n	801e260 <SM_StateMachineHandler+0xec8>
				}

			}
		}
		else if(SM_enumECUState == SM_enum_ECU_SelfTest){
 801e160:	4b45      	ldr	r3, [pc, #276]	; (801e278 <SM_StateMachineHandler+0xee0>)
 801e162:	781b      	ldrb	r3, [r3, #0]
 801e164:	b2db      	uxtb	r3, r3
 801e166:	2b11      	cmp	r3, #17
 801e168:	d126      	bne.n	801e1b8 <SM_StateMachineHandler+0xe20>
			/*Vishwesh:
			 * StateMachineHandle of this mode*/
			if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801e16a:	4b44      	ldr	r3, [pc, #272]	; (801e27c <SM_StateMachineHandler+0xee4>)
 801e16c:	885b      	ldrh	r3, [r3, #2]
 801e16e:	2b02      	cmp	r3, #2
 801e170:	d102      	bne.n	801e178 <SM_StateMachineHandler+0xde0>
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801e172:	4b41      	ldr	r3, [pc, #260]	; (801e278 <SM_StateMachineHandler+0xee0>)
 801e174:	2201      	movs	r2, #1
 801e176:	701a      	strb	r2, [r3, #0]
			}

			if(Appl_Display.SelfTestCounter > (1000/loopms)){
 801e178:	4b41      	ldr	r3, [pc, #260]	; (801e280 <SM_StateMachineHandler+0xee8>)
 801e17a:	691b      	ldr	r3, [r3, #16]
 801e17c:	79fa      	ldrb	r2, [r7, #7]
 801e17e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801e182:	fb91 f2f2 	sdiv	r2, r1, r2
 801e186:	4293      	cmp	r3, r2
 801e188:	d96a      	bls.n	801e260 <SM_StateMachineHandler+0xec8>
				if(Appl_diagActiveFault.FiltercktOpen == 0){
 801e18a:	4b3e      	ldr	r3, [pc, #248]	; (801e284 <SM_StateMachineHandler+0xeec>)
 801e18c:	7a9b      	ldrb	r3, [r3, #10]
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d166      	bne.n	801e260 <SM_StateMachineHandler+0xec8>
					if(Appl_Display.SelfTestCounter > (2000/loopms)){
 801e192:	4b3b      	ldr	r3, [pc, #236]	; (801e280 <SM_StateMachineHandler+0xee8>)
 801e194:	691b      	ldr	r3, [r3, #16]
 801e196:	79fa      	ldrb	r2, [r7, #7]
 801e198:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 801e19c:	fb91 f2f2 	sdiv	r2, r1, r2
 801e1a0:	4293      	cmp	r3, r2
 801e1a2:	d95d      	bls.n	801e260 <SM_StateMachineHandler+0xec8>
						if(Appl_diagActiveFault.BatteryReversal == 0){
 801e1a4:	4b37      	ldr	r3, [pc, #220]	; (801e284 <SM_StateMachineHandler+0xeec>)
 801e1a6:	7a1b      	ldrb	r3, [r3, #8]
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d159      	bne.n	801e260 <SM_StateMachineHandler+0xec8>
							DC_CONTACTOR_ON();
 801e1ac:	2200      	movs	r2, #0
 801e1ae:	2102      	movs	r1, #2
 801e1b0:	4835      	ldr	r0, [pc, #212]	; (801e288 <SM_StateMachineHandler+0xef0>)
 801e1b2:	f7f5 fdf1 	bl	8013d98 <HAL_GPIO_WritePin>
 801e1b6:	e053      	b.n	801e260 <SM_StateMachineHandler+0xec8>
						}
					}
				}
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_VishwatestMode){
 801e1b8:	4b2f      	ldr	r3, [pc, #188]	; (801e278 <SM_StateMachineHandler+0xee0>)
 801e1ba:	781b      	ldrb	r3, [r3, #0]
 801e1bc:	b2db      	uxtb	r3, r3
 801e1be:	2b15      	cmp	r3, #21
 801e1c0:	d110      	bne.n	801e1e4 <SM_StateMachineHandler+0xe4c>
			if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801e1c2:	4b2e      	ldr	r3, [pc, #184]	; (801e27c <SM_StateMachineHandler+0xee4>)
 801e1c4:	885b      	ldrh	r3, [r3, #2]
 801e1c6:	2b02      	cmp	r3, #2
 801e1c8:	d102      	bne.n	801e1d0 <SM_StateMachineHandler+0xe38>
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801e1ca:	4b2b      	ldr	r3, [pc, #172]	; (801e278 <SM_StateMachineHandler+0xee0>)
 801e1cc:	2201      	movs	r2, #1
 801e1ce:	701a      	strb	r2, [r3, #0]
			}
			if(Appl_diagActiveFault.BatteryReversal == 0){
 801e1d0:	4b2c      	ldr	r3, [pc, #176]	; (801e284 <SM_StateMachineHandler+0xeec>)
 801e1d2:	7a1b      	ldrb	r3, [r3, #8]
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	d143      	bne.n	801e260 <SM_StateMachineHandler+0xec8>
				DC_CONTACTOR_ON();
 801e1d8:	2200      	movs	r2, #0
 801e1da:	2102      	movs	r1, #2
 801e1dc:	482a      	ldr	r0, [pc, #168]	; (801e288 <SM_StateMachineHandler+0xef0>)
 801e1de:	f7f5 fddb 	bl	8013d98 <HAL_GPIO_WritePin>
 801e1e2:	e03d      	b.n	801e260 <SM_StateMachineHandler+0xec8>
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801e1e4:	4b24      	ldr	r3, [pc, #144]	; (801e278 <SM_StateMachineHandler+0xee0>)
 801e1e6:	781b      	ldrb	r3, [r3, #0]
 801e1e8:	b2db      	uxtb	r3, r3
 801e1ea:	2b14      	cmp	r3, #20
 801e1ec:	d138      	bne.n	801e260 <SM_StateMachineHandler+0xec8>
			if(Display.DGUSParam.PageId == DGUS_PAGEID_MAINMENU){
 801e1ee:	4b23      	ldr	r3, [pc, #140]	; (801e27c <SM_StateMachineHandler+0xee4>)
 801e1f0:	885b      	ldrh	r3, [r3, #2]
 801e1f2:	2b02      	cmp	r3, #2
 801e1f4:	d102      	bne.n	801e1fc <SM_StateMachineHandler+0xe64>
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801e1f6:	4b20      	ldr	r3, [pc, #128]	; (801e278 <SM_StateMachineHandler+0xee0>)
 801e1f8:	2201      	movs	r2, #1
 801e1fa:	701a      	strb	r2, [r3, #0]
			}

			BUZZER_OFF();
 801e1fc:	2200      	movs	r2, #0
 801e1fe:	2140      	movs	r1, #64	; 0x40
 801e200:	4822      	ldr	r0, [pc, #136]	; (801e28c <SM_StateMachineHandler+0xef4>)
 801e202:	f7f5 fdc9 	bl	8013d98 <HAL_GPIO_WritePin>
			SM_ApplParam.BuzzerCounter++;
 801e206:	4b1b      	ldr	r3, [pc, #108]	; (801e274 <SM_StateMachineHandler+0xedc>)
 801e208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e20a:	3301      	adds	r3, #1
 801e20c:	4a19      	ldr	r2, [pc, #100]	; (801e274 <SM_StateMachineHandler+0xedc>)
 801e20e:	6613      	str	r3, [r2, #96]	; 0x60
			if(SM_ApplParam.BuzzerCounter>(1000/loopms)){
 801e210:	4b18      	ldr	r3, [pc, #96]	; (801e274 <SM_StateMachineHandler+0xedc>)
 801e212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e214:	79fa      	ldrb	r2, [r7, #7]
 801e216:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801e21a:	fb91 f2f2 	sdiv	r2, r1, r2
 801e21e:	4293      	cmp	r3, r2
 801e220:	d91e      	bls.n	801e260 <SM_StateMachineHandler+0xec8>
				BUZZER_ON();
 801e222:	2201      	movs	r2, #1
 801e224:	2140      	movs	r1, #64	; 0x40
 801e226:	4819      	ldr	r0, [pc, #100]	; (801e28c <SM_StateMachineHandler+0xef4>)
 801e228:	f7f5 fdb6 	bl	8013d98 <HAL_GPIO_WritePin>
				SM_ApplParam.BuzzerCounter =0;
 801e22c:	4b11      	ldr	r3, [pc, #68]	; (801e274 <SM_StateMachineHandler+0xedc>)
 801e22e:	2200      	movs	r2, #0
 801e230:	661a      	str	r2, [r3, #96]	; 0x60
				Appl_Display.PowerOnCounter--;
 801e232:	4b13      	ldr	r3, [pc, #76]	; (801e280 <SM_StateMachineHandler+0xee8>)
 801e234:	7adb      	ldrb	r3, [r3, #11]
 801e236:	3b01      	subs	r3, #1
 801e238:	b2da      	uxtb	r2, r3
 801e23a:	4b11      	ldr	r3, [pc, #68]	; (801e280 <SM_StateMachineHandler+0xee8>)
 801e23c:	72da      	strb	r2, [r3, #11]
				if(Appl_Display.PowerOnCounter <= 0){
 801e23e:	4b10      	ldr	r3, [pc, #64]	; (801e280 <SM_StateMachineHandler+0xee8>)
 801e240:	7adb      	ldrb	r3, [r3, #11]
 801e242:	2b00      	cmp	r3, #0
 801e244:	d10c      	bne.n	801e260 <SM_StateMachineHandler+0xec8>
					if(Appl_EEPParam.stm32.EEP_ModeSelected == CC_MODE){
 801e246:	4b12      	ldr	r3, [pc, #72]	; (801e290 <SM_StateMachineHandler+0xef8>)
 801e248:	7c1b      	ldrb	r3, [r3, #16]
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	d103      	bne.n	801e256 <SM_StateMachineHandler+0xebe>
						SM_enumECUState = SM_enum_ECU_CCPreparing;
 801e24e:	4b0a      	ldr	r3, [pc, #40]	; (801e278 <SM_StateMachineHandler+0xee0>)
 801e250:	2205      	movs	r2, #5
 801e252:	701a      	strb	r2, [r3, #0]
 801e254:	e004      	b.n	801e260 <SM_StateMachineHandler+0xec8>
					}
					else{
						SM_enumECUState = SM_enum_ECU_CVPreparing;
 801e256:	4b08      	ldr	r3, [pc, #32]	; (801e278 <SM_StateMachineHandler+0xee0>)
 801e258:	2204      	movs	r2, #4
 801e25a:	701a      	strb	r2, [r3, #0]
 801e25c:	e000      	b.n	801e260 <SM_StateMachineHandler+0xec8>
		if(SM_ApplParam.BuzzerCounter>(1000/loopms)){
 801e25e:	bf00      	nop
					}
				}
			}
		}
	}
	DisplayWindowSelection();
 801e260:	f000 f818 	bl	801e294 <DisplayWindowSelection>
}
 801e264:	bf00      	nop
 801e266:	3710      	adds	r7, #16
 801e268:	46bd      	mov	sp, r7
 801e26a:	bdb0      	pop	{r4, r5, r7, pc}
 801e26c:	20000928 	.word	0x20000928
 801e270:	200049a8 	.word	0x200049a8
 801e274:	20005034 	.word	0x20005034
 801e278:	20005114 	.word	0x20005114
 801e27c:	20004f6c 	.word	0x20004f6c
 801e280:	20004f08 	.word	0x20004f08
 801e284:	20004d0c 	.word	0x20004d0c
 801e288:	40020400 	.word	0x40020400
 801e28c:	40020800 	.word	0x40020800
 801e290:	20000278 	.word	0x20000278

0801e294 <DisplayWindowSelection>:

static inline void DisplayWindowSelection(void){
 801e294:	b480      	push	{r7}
 801e296:	af00      	add	r7, sp, #0
	/* DISPLAY WINDOW SELECTION */

//	if(0){
	if((Appl_diagActiveFault.PowerFail_Z1 == 1) || \
 801e298:	4b6f      	ldr	r3, [pc, #444]	; (801e458 <DisplayWindowSelection+0x1c4>)
 801e29a:	781b      	ldrb	r3, [r3, #0]
 801e29c:	2b01      	cmp	r3, #1
 801e29e:	d003      	beq.n	801e2a8 <DisplayWindowSelection+0x14>
			(Appl_diagActiveFault.PowerFail_Z3 == 1)){
 801e2a0:	4b6d      	ldr	r3, [pc, #436]	; (801e458 <DisplayWindowSelection+0x1c4>)
 801e2a2:	789b      	ldrb	r3, [r3, #2]
	if((Appl_diagActiveFault.PowerFail_Z1 == 1) || \
 801e2a4:	2b01      	cmp	r3, #1
 801e2a6:	d103      	bne.n	801e2b0 <DisplayWindowSelection+0x1c>
		Display.DisplayState = SM_enum_Display_PoweringOffWindow;
 801e2a8:	4b6c      	ldr	r3, [pc, #432]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e2aa:	220f      	movs	r2, #15
 801e2ac:	701a      	strb	r2, [r3, #0]
		}
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
			Display.DisplayState = SM_enum_Display_StoppedWhileRunning;
		}

}
 801e2ae:	e0cd      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		if(SM_enumECUState == SM_enum_ECU_Init){
 801e2b0:	4b6b      	ldr	r3, [pc, #428]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e2b2:	781b      	ldrb	r3, [r3, #0]
 801e2b4:	b2db      	uxtb	r3, r3
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d103      	bne.n	801e2c2 <DisplayWindowSelection+0x2e>
			Display.DisplayState = SM_enum_Display_POWERON_LOGO;
 801e2ba:	4b68      	ldr	r3, [pc, #416]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e2bc:	2200      	movs	r2, #0
 801e2be:	701a      	strb	r2, [r3, #0]
}
 801e2c0:	e0c4      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_StandByMode){
 801e2c2:	4b67      	ldr	r3, [pc, #412]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e2c4:	781b      	ldrb	r3, [r3, #0]
 801e2c6:	b2db      	uxtb	r3, r3
 801e2c8:	2b01      	cmp	r3, #1
 801e2ca:	d103      	bne.n	801e2d4 <DisplayWindowSelection+0x40>
			Display.DisplayState = SM_enum_Display_MAIN_MENU;
 801e2cc:	4b63      	ldr	r3, [pc, #396]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e2ce:	2201      	movs	r2, #1
 801e2d0:	701a      	strb	r2, [r3, #0]
}
 801e2d2:	e0bb      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if((SM_enumECUState == SM_enum_ECU_CurrentModeSettings)){
 801e2d4:	4b62      	ldr	r3, [pc, #392]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e2d6:	781b      	ldrb	r3, [r3, #0]
 801e2d8:	b2db      	uxtb	r3, r3
 801e2da:	2b02      	cmp	r3, #2
 801e2dc:	d103      	bne.n	801e2e6 <DisplayWindowSelection+0x52>
			Display.DisplayState = SM_enum_Display_CurrentModeSettings;
 801e2de:	4b5f      	ldr	r3, [pc, #380]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e2e0:	2202      	movs	r2, #2
 801e2e2:	701a      	strb	r2, [r3, #0]
}
 801e2e4:	e0b2      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_CCRun_Stable){
 801e2e6:	4b5e      	ldr	r3, [pc, #376]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e2e8:	781b      	ldrb	r3, [r3, #0]
 801e2ea:	b2db      	uxtb	r3, r3
 801e2ec:	2b0e      	cmp	r3, #14
 801e2ee:	d103      	bne.n	801e2f8 <DisplayWindowSelection+0x64>
			Display.DisplayState = SM_enum_Display_CCRun_Stable;
 801e2f0:	4b5a      	ldr	r3, [pc, #360]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e2f2:	220a      	movs	r2, #10
 801e2f4:	701a      	strb	r2, [r3, #0]
}
 801e2f6:	e0a9      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_CCRun_Slow){
 801e2f8:	4b59      	ldr	r3, [pc, #356]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e2fa:	781b      	ldrb	r3, [r3, #0]
 801e2fc:	b2db      	uxtb	r3, r3
 801e2fe:	2b0d      	cmp	r3, #13
 801e300:	d103      	bne.n	801e30a <DisplayWindowSelection+0x76>
			Display.DisplayState = SM_enum_Display_CCRun_Slow;
 801e302:	4b56      	ldr	r3, [pc, #344]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e304:	2209      	movs	r2, #9
 801e306:	701a      	strb	r2, [r3, #0]
}
 801e308:	e0a0      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SelfTest){
 801e30a:	4b55      	ldr	r3, [pc, #340]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e30c:	781b      	ldrb	r3, [r3, #0]
 801e30e:	b2db      	uxtb	r3, r3
 801e310:	2b11      	cmp	r3, #17
 801e312:	d103      	bne.n	801e31c <DisplayWindowSelection+0x88>
			Display.DisplayState = SM_enum_Display_SelfTest;
 801e314:	4b51      	ldr	r3, [pc, #324]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e316:	2204      	movs	r2, #4
 801e318:	701a      	strb	r2, [r3, #0]
}
 801e31a:	e097      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu){
 801e31c:	4b50      	ldr	r3, [pc, #320]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e31e:	781b      	ldrb	r3, [r3, #0]
 801e320:	b2db      	uxtb	r3, r3
 801e322:	2b06      	cmp	r3, #6
 801e324:	d103      	bne.n	801e32e <DisplayWindowSelection+0x9a>
			Display.DisplayState = SM_enum_Display_Settings_Menu;
 801e326:	4b4d      	ldr	r3, [pc, #308]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e328:	2205      	movs	r2, #5
 801e32a:	701a      	strb	r2, [r3, #0]
}
 801e32c:	e08e      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu){
 801e32e:	4b4c      	ldr	r3, [pc, #304]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e330:	781b      	ldrb	r3, [r3, #0]
 801e332:	b2db      	uxtb	r3, r3
 801e334:	2b06      	cmp	r3, #6
 801e336:	d103      	bne.n	801e340 <DisplayWindowSelection+0xac>
			Display.DisplayState = SM_enum_Display_Settings_Menu;
 801e338:	4b48      	ldr	r3, [pc, #288]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e33a:	2205      	movs	r2, #5
 801e33c:	701a      	strb	r2, [r3, #0]
}
 801e33e:	e085      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Transfer){
 801e340:	4b47      	ldr	r3, [pc, #284]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e342:	781b      	ldrb	r3, [r3, #0]
 801e344:	b2db      	uxtb	r3, r3
 801e346:	2b07      	cmp	r3, #7
 801e348:	d103      	bne.n	801e352 <DisplayWindowSelection+0xbe>
			Display.DisplayState = SM_enum_Display_Settings_Menu_Transfer;
 801e34a:	4b44      	ldr	r3, [pc, #272]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e34c:	2206      	movs	r2, #6
 801e34e:	701a      	strb	r2, [r3, #0]
}
 801e350:	e07c      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Erase){
 801e352:	4b43      	ldr	r3, [pc, #268]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e354:	781b      	ldrb	r3, [r3, #0]
 801e356:	b2db      	uxtb	r3, r3
 801e358:	2b08      	cmp	r3, #8
 801e35a:	d103      	bne.n	801e364 <DisplayWindowSelection+0xd0>
			Display.DisplayState = SM_enum_Display_Settings_Menu_Erase;
 801e35c:	4b3f      	ldr	r3, [pc, #252]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e35e:	2207      	movs	r2, #7
 801e360:	701a      	strb	r2, [r3, #0]
}
 801e362:	e073      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Completed){
 801e364:	4b3e      	ldr	r3, [pc, #248]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e366:	781b      	ldrb	r3, [r3, #0]
 801e368:	b2db      	uxtb	r3, r3
 801e36a:	2b09      	cmp	r3, #9
 801e36c:	d103      	bne.n	801e376 <DisplayWindowSelection+0xe2>
			Display.DisplayState = SM_enum_Display_Settings_Menu_Completed;
 801e36e:	4b3b      	ldr	r3, [pc, #236]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e370:	2208      	movs	r2, #8
 801e372:	701a      	strb	r2, [r3, #0]
}
 801e374:	e06a      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_VishwatestMode){
 801e376:	4b3a      	ldr	r3, [pc, #232]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e378:	781b      	ldrb	r3, [r3, #0]
 801e37a:	b2db      	uxtb	r3, r3
 801e37c:	2b15      	cmp	r3, #21
 801e37e:	d103      	bne.n	801e388 <DisplayWindowSelection+0xf4>
			Display.DisplayState = SM_enum_Display_VishwaTest;
 801e380:	4b36      	ldr	r3, [pc, #216]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e382:	2210      	movs	r2, #16
 801e384:	701a      	strb	r2, [r3, #0]
}
 801e386:	e061      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_AutoModeUserInput){
 801e388:	4b35      	ldr	r3, [pc, #212]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e38a:	781b      	ldrb	r3, [r3, #0]
 801e38c:	b2db      	uxtb	r3, r3
 801e38e:	2b0c      	cmp	r3, #12
 801e390:	d103      	bne.n	801e39a <DisplayWindowSelection+0x106>
			Display.DisplayState = SM_enum_Display_AutoModeUserInput;
 801e392:	4b32      	ldr	r3, [pc, #200]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e394:	2211      	movs	r2, #17
 801e396:	701a      	strb	r2, [r3, #0]
}
 801e398:	e058      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_StatusDisplay){
 801e39a:	4b31      	ldr	r3, [pc, #196]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e39c:	781b      	ldrb	r3, [r3, #0]
 801e39e:	b2db      	uxtb	r3, r3
 801e3a0:	2b12      	cmp	r3, #18
 801e3a2:	d103      	bne.n	801e3ac <DisplayWindowSelection+0x118>
			Display.DisplayState = SM_enum_Display_StatusDisplay;
 801e3a4:	4b2d      	ldr	r3, [pc, #180]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e3a6:	2212      	movs	r2, #18
 801e3a8:	701a      	strb	r2, [r3, #0]
}
 801e3aa:	e04f      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_CCPauseMode){
 801e3ac:	4b2c      	ldr	r3, [pc, #176]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e3ae:	781b      	ldrb	r3, [r3, #0]
 801e3b0:	b2db      	uxtb	r3, r3
 801e3b2:	2b0a      	cmp	r3, #10
 801e3b4:	d103      	bne.n	801e3be <DisplayWindowSelection+0x12a>
			Display.DisplayState = SM_enum_Display_CCPause;
 801e3b6:	4b29      	ldr	r3, [pc, #164]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e3b8:	2214      	movs	r2, #20
 801e3ba:	701a      	strb	r2, [r3, #0]
}
 801e3bc:	e046      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_CVPauseMode){
 801e3be:	4b28      	ldr	r3, [pc, #160]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e3c0:	781b      	ldrb	r3, [r3, #0]
 801e3c2:	b2db      	uxtb	r3, r3
 801e3c4:	2b0b      	cmp	r3, #11
 801e3c6:	d103      	bne.n	801e3d0 <DisplayWindowSelection+0x13c>
			Display.DisplayState = SM_enum_Display_CVPause;
 801e3c8:	4b24      	ldr	r3, [pc, #144]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e3ca:	2215      	movs	r2, #21
 801e3cc:	701a      	strb	r2, [r3, #0]
}
 801e3ce:	e03d      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_Info){
 801e3d0:	4b23      	ldr	r3, [pc, #140]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e3d2:	781b      	ldrb	r3, [r3, #0]
 801e3d4:	b2db      	uxtb	r3, r3
 801e3d6:	2b13      	cmp	r3, #19
 801e3d8:	d103      	bne.n	801e3e2 <DisplayWindowSelection+0x14e>
			Display.DisplayState = SM_enum_Display_Info;
 801e3da:	4b20      	ldr	r3, [pc, #128]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e3dc:	2213      	movs	r2, #19
 801e3de:	701a      	strb	r2, [r3, #0]
}
 801e3e0:	e034      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_VoltageModeSettings){
 801e3e2:	4b1f      	ldr	r3, [pc, #124]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e3e4:	781b      	ldrb	r3, [r3, #0]
 801e3e6:	b2db      	uxtb	r3, r3
 801e3e8:	2b03      	cmp	r3, #3
 801e3ea:	d103      	bne.n	801e3f4 <DisplayWindowSelection+0x160>
			Display.DisplayState = SM_enum_Display_VoltageModeSettings;
 801e3ec:	4b1b      	ldr	r3, [pc, #108]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e3ee:	2203      	movs	r2, #3
 801e3f0:	701a      	strb	r2, [r3, #0]
}
 801e3f2:	e02b      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_CVRun_Slow){
 801e3f4:	4b1a      	ldr	r3, [pc, #104]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e3f6:	781b      	ldrb	r3, [r3, #0]
 801e3f8:	b2db      	uxtb	r3, r3
 801e3fa:	2b0f      	cmp	r3, #15
 801e3fc:	d103      	bne.n	801e406 <DisplayWindowSelection+0x172>
			Display.DisplayState = SM_enum_Display_CVRun_Slow;
 801e3fe:	4b17      	ldr	r3, [pc, #92]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e400:	220b      	movs	r2, #11
 801e402:	701a      	strb	r2, [r3, #0]
}
 801e404:	e022      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_CVRun_Stable){
 801e406:	4b16      	ldr	r3, [pc, #88]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e408:	781b      	ldrb	r3, [r3, #0]
 801e40a:	b2db      	uxtb	r3, r3
 801e40c:	2b10      	cmp	r3, #16
 801e40e:	d103      	bne.n	801e418 <DisplayWindowSelection+0x184>
			Display.DisplayState = SM_enum_Display_CVRun_Stable;
 801e410:	4b12      	ldr	r3, [pc, #72]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e412:	220c      	movs	r2, #12
 801e414:	701a      	strb	r2, [r3, #0]
}
 801e416:	e019      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_CVPreparing){
 801e418:	4b11      	ldr	r3, [pc, #68]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e41a:	781b      	ldrb	r3, [r3, #0]
 801e41c:	b2db      	uxtb	r3, r3
 801e41e:	2b04      	cmp	r3, #4
 801e420:	d103      	bne.n	801e42a <DisplayWindowSelection+0x196>
			Display.DisplayState = SM_enum_Display_CVPreparing;
 801e422:	4b0e      	ldr	r3, [pc, #56]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e424:	220d      	movs	r2, #13
 801e426:	701a      	strb	r2, [r3, #0]
}
 801e428:	e010      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_CCPreparing){
 801e42a:	4b0d      	ldr	r3, [pc, #52]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e42c:	781b      	ldrb	r3, [r3, #0]
 801e42e:	b2db      	uxtb	r3, r3
 801e430:	2b05      	cmp	r3, #5
 801e432:	d103      	bne.n	801e43c <DisplayWindowSelection+0x1a8>
			Display.DisplayState = SM_enum_Display_CCPreparing;
 801e434:	4b09      	ldr	r3, [pc, #36]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e436:	220e      	movs	r2, #14
 801e438:	701a      	strb	r2, [r3, #0]
}
 801e43a:	e007      	b.n	801e44c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801e43c:	4b08      	ldr	r3, [pc, #32]	; (801e460 <DisplayWindowSelection+0x1cc>)
 801e43e:	781b      	ldrb	r3, [r3, #0]
 801e440:	b2db      	uxtb	r3, r3
 801e442:	2b14      	cmp	r3, #20
 801e444:	d102      	bne.n	801e44c <DisplayWindowSelection+0x1b8>
			Display.DisplayState = SM_enum_Display_StoppedWhileRunning;
 801e446:	4b05      	ldr	r3, [pc, #20]	; (801e45c <DisplayWindowSelection+0x1c8>)
 801e448:	2216      	movs	r2, #22
 801e44a:	701a      	strb	r2, [r3, #0]
}
 801e44c:	bf00      	nop
 801e44e:	46bd      	mov	sp, r7
 801e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e454:	4770      	bx	lr
 801e456:	bf00      	nop
 801e458:	20004d0c 	.word	0x20004d0c
 801e45c:	20004f6c 	.word	0x20004f6c
 801e460:	20005114 	.word	0x20005114

0801e464 <SM_SpeakToDisplay>:

void SM_SpeakToDisplay(uint8_t loopms){
 801e464:	b580      	push	{r7, lr}
 801e466:	b082      	sub	sp, #8
 801e468:	af00      	add	r7, sp, #0
 801e46a:	4603      	mov	r3, r0
 801e46c:	71fb      	strb	r3, [r7, #7]
	DisplayLoop(loopms);
 801e46e:	79fb      	ldrb	r3, [r7, #7]
 801e470:	4618      	mov	r0, r3
 801e472:	f7fc fafb 	bl	801aa6c <DisplayLoop>
}
 801e476:	bf00      	nop
 801e478:	3708      	adds	r7, #8
 801e47a:	46bd      	mov	sp, r7
 801e47c:	bd80      	pop	{r7, pc}

0801e47e <SM_10msTask>:

void SM_10msTask(void){
 801e47e:	b480      	push	{r7}
 801e480:	af00      	add	r7, sp, #0


}
 801e482:	bf00      	nop
 801e484:	46bd      	mov	sp, r7
 801e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e48a:	4770      	bx	lr

0801e48c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 801e48c:	b580      	push	{r7, lr}
 801e48e:	b084      	sub	sp, #16
 801e490:	af00      	add	r7, sp, #0
 801e492:	4603      	mov	r3, r0
 801e494:	80fb      	strh	r3, [r7, #6]

	uint8_t SCRSequenceNumber;
	if((GPIO_Pin == uC_ZC1_Pin)){
 801e496:	88fb      	ldrh	r3, [r7, #6]
 801e498:	2b40      	cmp	r3, #64	; 0x40
 801e49a:	f040 809c 	bne.w	801e5d6 <HAL_GPIO_EXTI_Callback+0x14a>
		/*Vishwas:
		 * I expect Appl_u32ACDiag_DiffBtwFallEdgetime_ZC1 to be hit every 20000us ideally.
		 * Considering up to 90% error margin, if any pulse comes earlier ignore it.
		 */
		Appl_u32ACDiag_DiffBtwFallEdgetime_ZC1 =  (__HAL_TIM_GET_COUNTER(phtim8))- (0);
 801e49e:	4b93      	ldr	r3, [pc, #588]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e4a0:	681b      	ldr	r3, [r3, #0]
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4a6:	4a92      	ldr	r2, [pc, #584]	; (801e6f0 <HAL_GPIO_EXTI_Callback+0x264>)
 801e4a8:	6013      	str	r3, [r2, #0]
		if(((__HAL_TIM_GET_COUNTER(phtim8)) < 18000) || (__HAL_TIM_GET_COUNTER(phtim8)) > 22000){
 801e4aa:	4b90      	ldr	r3, [pc, #576]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4b2:	f244 624f 	movw	r2, #17999	; 0x464f
 801e4b6:	4293      	cmp	r3, r2
 801e4b8:	d907      	bls.n	801e4ca <HAL_GPIO_EXTI_Callback+0x3e>
 801e4ba:	4b8c      	ldr	r3, [pc, #560]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4c2:	f245 52f0 	movw	r2, #22000	; 0x55f0
 801e4c6:	4293      	cmp	r3, r2
 801e4c8:	d90f      	bls.n	801e4ea <HAL_GPIO_EXTI_Callback+0x5e>
			Appl_u8ACDiagIgnoreThisPulse_ZC1 = 1;
 801e4ca:	4b8a      	ldr	r3, [pc, #552]	; (801e6f4 <HAL_GPIO_EXTI_Callback+0x268>)
 801e4cc:	2201      	movs	r2, #1
 801e4ce:	701a      	strb	r2, [r3, #0]
			if((__HAL_TIM_GET_COUNTER(phtim8))> (22000*50)){
 801e4d0:	4b86      	ldr	r3, [pc, #536]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4d8:	4a87      	ldr	r2, [pc, #540]	; (801e6f8 <HAL_GPIO_EXTI_Callback+0x26c>)
 801e4da:	4293      	cmp	r3, r2
 801e4dc:	d90f      	bls.n	801e4fe <HAL_GPIO_EXTI_Callback+0x72>
				__HAL_TIM_SET_COUNTER(phtim8,0);
 801e4de:	4b83      	ldr	r3, [pc, #524]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e4e0:	681b      	ldr	r3, [r3, #0]
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	2200      	movs	r2, #0
 801e4e6:	625a      	str	r2, [r3, #36]	; 0x24
			if((__HAL_TIM_GET_COUNTER(phtim8))> (22000*50)){
 801e4e8:	e009      	b.n	801e4fe <HAL_GPIO_EXTI_Callback+0x72>
			}
		}
		else{
			Appl_u8ACDiagIgnoreThisPulse_ZC1 = 0;
 801e4ea:	4b82      	ldr	r3, [pc, #520]	; (801e6f4 <HAL_GPIO_EXTI_Callback+0x268>)
 801e4ec:	2200      	movs	r2, #0
 801e4ee:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(phtim8,0);
 801e4f0:	4b7e      	ldr	r3, [pc, #504]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	681b      	ldr	r3, [r3, #0]
 801e4f6:	2200      	movs	r2, #0
 801e4f8:	625a      	str	r2, [r3, #36]	; 0x24
			SCRSequenceNumber = 1;
 801e4fa:	2301      	movs	r3, #1
 801e4fc:	73fb      	strb	r3, [r7, #15]
		}

		if(Appl_u8ACDiagIgnoreThisPulse_ZC1 == 0){
 801e4fe:	4b7d      	ldr	r3, [pc, #500]	; (801e6f4 <HAL_GPIO_EXTI_Callback+0x268>)
 801e500:	781b      	ldrb	r3, [r3, #0]
 801e502:	2b00      	cmp	r3, #0
 801e504:	d155      	bne.n	801e5b2 <HAL_GPIO_EXTI_Callback+0x126>
			ScheduleTrigger(1);
 801e506:	2001      	movs	r0, #1
 801e508:	f000 f94e 	bl	801e7a8 <ScheduleTrigger>
			if(Appl_diagActiveFault.PowerFail_Z1 == 0 && \
 801e50c:	4b7b      	ldr	r3, [pc, #492]	; (801e6fc <HAL_GPIO_EXTI_Callback+0x270>)
 801e50e:	781b      	ldrb	r3, [r3, #0]
 801e510:	2b00      	cmp	r3, #0
 801e512:	d14e      	bne.n	801e5b2 <HAL_GPIO_EXTI_Callback+0x126>
					Appl_diagActiveFault.PowerFail_Z2 == 0 && \
 801e514:	4b79      	ldr	r3, [pc, #484]	; (801e6fc <HAL_GPIO_EXTI_Callback+0x270>)
 801e516:	785b      	ldrb	r3, [r3, #1]
			if(Appl_diagActiveFault.PowerFail_Z1 == 0 && \
 801e518:	2b00      	cmp	r3, #0
 801e51a:	d14a      	bne.n	801e5b2 <HAL_GPIO_EXTI_Callback+0x126>
					Appl_diagActiveFault.PowerFail_Z3 == 0 ){
 801e51c:	4b77      	ldr	r3, [pc, #476]	; (801e6fc <HAL_GPIO_EXTI_Callback+0x270>)
 801e51e:	789b      	ldrb	r3, [r3, #2]
					Appl_diagActiveFault.PowerFail_Z2 == 0 && \
 801e520:	2b00      	cmp	r3, #0
 801e522:	d146      	bne.n	801e5b2 <HAL_GPIO_EXTI_Callback+0x126>
				if((HAL_GPIO_ReadPin(uC_ZC2_GPIO_Port,uC_ZC2_Pin) == GPIO_PIN_SET) && \
 801e524:	2180      	movs	r1, #128	; 0x80
 801e526:	4876      	ldr	r0, [pc, #472]	; (801e700 <HAL_GPIO_EXTI_Callback+0x274>)
 801e528:	f7f5 fc1e 	bl	8013d68 <HAL_GPIO_ReadPin>
 801e52c:	4603      	mov	r3, r0
 801e52e:	2b01      	cmp	r3, #1
 801e530:	d11a      	bne.n	801e568 <HAL_GPIO_EXTI_Callback+0xdc>
						(HAL_GPIO_ReadPin(uC_ZC3_GPIO_Port,uC_ZC3_Pin) == GPIO_PIN_RESET)){
 801e532:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e536:	4872      	ldr	r0, [pc, #456]	; (801e700 <HAL_GPIO_EXTI_Callback+0x274>)
 801e538:	f7f5 fc16 	bl	8013d68 <HAL_GPIO_ReadPin>
 801e53c:	4603      	mov	r3, r0
				if((HAL_GPIO_ReadPin(uC_ZC2_GPIO_Port,uC_ZC2_Pin) == GPIO_PIN_SET) && \
 801e53e:	2b00      	cmp	r3, #0
 801e540:	d112      	bne.n	801e568 <HAL_GPIO_EXTI_Callback+0xdc>
					FaultParamTable[Diag_enum_PhaseReversal].DebouncehealCounter++;
 801e542:	4b70      	ldr	r3, [pc, #448]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e544:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801e546:	3301      	adds	r3, #1
 801e548:	b29a      	uxth	r2, r3
 801e54a:	4b6e      	ldr	r3, [pc, #440]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e54c:	875a      	strh	r2, [r3, #58]	; 0x3a
					if(FaultParamTable[Diag_enum_PhaseReversal].DebouncehealCounter > FaultParamTable[Diag_enum_PhaseReversal].healconfirmThreshold){
 801e54e:	4b6d      	ldr	r3, [pc, #436]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e550:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801e552:	4b6c      	ldr	r3, [pc, #432]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e556:	429a      	cmp	r2, r3
 801e558:	d92b      	bls.n	801e5b2 <HAL_GPIO_EXTI_Callback+0x126>
						FaultParamTable[Diag_enum_PhaseReversal].DebouncehealCounter = 0;
 801e55a:	4b6a      	ldr	r3, [pc, #424]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e55c:	2200      	movs	r2, #0
 801e55e:	875a      	strh	r2, [r3, #58]	; 0x3a
						Appl_diagActiveFault.PhaseReversal = 0;
 801e560:	4b66      	ldr	r3, [pc, #408]	; (801e6fc <HAL_GPIO_EXTI_Callback+0x270>)
 801e562:	2200      	movs	r2, #0
 801e564:	71da      	strb	r2, [r3, #7]
					if(FaultParamTable[Diag_enum_PhaseReversal].DebouncehealCounter > FaultParamTable[Diag_enum_PhaseReversal].healconfirmThreshold){
 801e566:	e024      	b.n	801e5b2 <HAL_GPIO_EXTI_Callback+0x126>
					}
				}
				else if((HAL_GPIO_ReadPin(uC_ZC2_GPIO_Port,uC_ZC2_Pin) == GPIO_PIN_RESET) && \
 801e568:	2180      	movs	r1, #128	; 0x80
 801e56a:	4865      	ldr	r0, [pc, #404]	; (801e700 <HAL_GPIO_EXTI_Callback+0x274>)
 801e56c:	f7f5 fbfc 	bl	8013d68 <HAL_GPIO_ReadPin>
 801e570:	4603      	mov	r3, r0
 801e572:	2b00      	cmp	r3, #0
 801e574:	d11a      	bne.n	801e5ac <HAL_GPIO_EXTI_Callback+0x120>
						(HAL_GPIO_ReadPin(uC_ZC3_GPIO_Port,uC_ZC3_Pin) == GPIO_PIN_SET)){
 801e576:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e57a:	4861      	ldr	r0, [pc, #388]	; (801e700 <HAL_GPIO_EXTI_Callback+0x274>)
 801e57c:	f7f5 fbf4 	bl	8013d68 <HAL_GPIO_ReadPin>
 801e580:	4603      	mov	r3, r0
				else if((HAL_GPIO_ReadPin(uC_ZC2_GPIO_Port,uC_ZC2_Pin) == GPIO_PIN_RESET) && \
 801e582:	2b01      	cmp	r3, #1
 801e584:	d112      	bne.n	801e5ac <HAL_GPIO_EXTI_Callback+0x120>
					FaultParamTable[Diag_enum_PhaseReversal].DebouncefaultCounter++;
 801e586:	4b5f      	ldr	r3, [pc, #380]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e588:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801e58a:	3301      	adds	r3, #1
 801e58c:	b29a      	uxth	r2, r3
 801e58e:	4b5d      	ldr	r3, [pc, #372]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e590:	871a      	strh	r2, [r3, #56]	; 0x38
					if(FaultParamTable[Diag_enum_PhaseReversal].DebouncefaultCounter > FaultParamTable[Diag_enum_PhaseReversal].faultconfirmThreshold){
 801e592:	4b5c      	ldr	r3, [pc, #368]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e594:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 801e596:	4b5b      	ldr	r3, [pc, #364]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e598:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801e59a:	429a      	cmp	r2, r3
 801e59c:	d909      	bls.n	801e5b2 <HAL_GPIO_EXTI_Callback+0x126>
						FaultParamTable[Diag_enum_PhaseReversal].DebouncefaultCounter = 0;
 801e59e:	4b59      	ldr	r3, [pc, #356]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e5a0:	2200      	movs	r2, #0
 801e5a2:	871a      	strh	r2, [r3, #56]	; 0x38
						Appl_diagActiveFault.PhaseReversal = 1;
 801e5a4:	4b55      	ldr	r3, [pc, #340]	; (801e6fc <HAL_GPIO_EXTI_Callback+0x270>)
 801e5a6:	2201      	movs	r2, #1
 801e5a8:	71da      	strb	r2, [r3, #7]
					if(FaultParamTable[Diag_enum_PhaseReversal].DebouncefaultCounter > FaultParamTable[Diag_enum_PhaseReversal].faultconfirmThreshold){
 801e5aa:	e002      	b.n	801e5b2 <HAL_GPIO_EXTI_Callback+0x126>
					}
				}
				else{
					Appl_diagActiveFault.PhaseReversal = 2;
 801e5ac:	4b53      	ldr	r3, [pc, #332]	; (801e6fc <HAL_GPIO_EXTI_Callback+0x270>)
 801e5ae:	2202      	movs	r2, #2
 801e5b0:	71da      	strb	r2, [r3, #7]
		/* Vishwas:
		 * Diagnostic Logic :
		 * If any ZCD interrupt occur, I assume that AC has been given in that Phase line and I debounce it few times before confirming AC on that line
		 */
		/*Diag_enum_Powerfail_Z1*/
		FaultParamTable[Diag_enum_Powerfail_Z1].DebouncehealCounter++;
 801e5b2:	4b54      	ldr	r3, [pc, #336]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e5b4:	885b      	ldrh	r3, [r3, #2]
 801e5b6:	3301      	adds	r3, #1
 801e5b8:	b29a      	uxth	r2, r3
 801e5ba:	4b52      	ldr	r3, [pc, #328]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e5bc:	805a      	strh	r2, [r3, #2]
		FaultParamTable[Diag_enum_Powerfail_Z1].DebouncefaultCounter = 0;
 801e5be:	4b51      	ldr	r3, [pc, #324]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e5c0:	2200      	movs	r2, #0
 801e5c2:	801a      	strh	r2, [r3, #0]
		if(FaultParamTable[Diag_enum_Powerfail_Z1].DebouncehealCounter >= 100){
 801e5c4:	4b4f      	ldr	r3, [pc, #316]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e5c6:	885b      	ldrh	r3, [r3, #2]
 801e5c8:	2b63      	cmp	r3, #99	; 0x63
 801e5ca:	f240 80e0 	bls.w	801e78e <HAL_GPIO_EXTI_Callback+0x302>
			FaultParamTable[Diag_enum_Powerfail_Z1].DebouncehealCounter = 100;
 801e5ce:	4b4d      	ldr	r3, [pc, #308]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e5d0:	2264      	movs	r2, #100	; 0x64
 801e5d2:	805a      	strh	r2, [r3, #2]
		FaultParamTable[Diag_enum_Powerfail_Z3].DebouncefaultCounter = 0;
		if(FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter >= 100){
			FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter = 100;
		}
	}
}
 801e5d4:	e0db      	b.n	801e78e <HAL_GPIO_EXTI_Callback+0x302>
	else if((GPIO_Pin == uC_ZC2_Pin)){
 801e5d6:	88fb      	ldrh	r3, [r7, #6]
 801e5d8:	2b80      	cmp	r3, #128	; 0x80
 801e5da:	d15f      	bne.n	801e69c <HAL_GPIO_EXTI_Callback+0x210>
		Appl_u32ACDiag_DiffBtwFallEdgetime_ZC2 = (__HAL_TIM_GET_COUNTER(phtim8))- (0);
 801e5dc:	4b43      	ldr	r3, [pc, #268]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5e4:	4a48      	ldr	r2, [pc, #288]	; (801e708 <HAL_GPIO_EXTI_Callback+0x27c>)
 801e5e6:	6013      	str	r3, [r2, #0]
		if(Appl_diagActiveFault.PhaseReversal == 0){
 801e5e8:	4b44      	ldr	r3, [pc, #272]	; (801e6fc <HAL_GPIO_EXTI_Callback+0x270>)
 801e5ea:	79db      	ldrb	r3, [r3, #7]
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d119      	bne.n	801e624 <HAL_GPIO_EXTI_Callback+0x198>
			if(((__HAL_TIM_GET_COUNTER(phtim8)) < 5500) || ((__HAL_TIM_GET_COUNTER(phtim8)) > 7333)){
 801e5f0:	4b3e      	ldr	r3, [pc, #248]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5f8:	f241 527b 	movw	r2, #5499	; 0x157b
 801e5fc:	4293      	cmp	r3, r2
 801e5fe:	d907      	bls.n	801e610 <HAL_GPIO_EXTI_Callback+0x184>
 801e600:	4b3a      	ldr	r3, [pc, #232]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e608:	f641 42a5 	movw	r2, #7333	; 0x1ca5
 801e60c:	4293      	cmp	r3, r2
 801e60e:	d903      	bls.n	801e618 <HAL_GPIO_EXTI_Callback+0x18c>
				Appl_u8ACDiagIgnoreThisPulse_ZC2 = 1;
 801e610:	4b3e      	ldr	r3, [pc, #248]	; (801e70c <HAL_GPIO_EXTI_Callback+0x280>)
 801e612:	2201      	movs	r2, #1
 801e614:	701a      	strb	r2, [r3, #0]
 801e616:	e026      	b.n	801e666 <HAL_GPIO_EXTI_Callback+0x1da>
				Appl_u8ACDiagIgnoreThisPulse_ZC2 = 0;
 801e618:	4b3c      	ldr	r3, [pc, #240]	; (801e70c <HAL_GPIO_EXTI_Callback+0x280>)
 801e61a:	2200      	movs	r2, #0
 801e61c:	701a      	strb	r2, [r3, #0]
				SCRSequenceNumber = 2;
 801e61e:	2302      	movs	r3, #2
 801e620:	73fb      	strb	r3, [r7, #15]
 801e622:	e020      	b.n	801e666 <HAL_GPIO_EXTI_Callback+0x1da>
		else if(Appl_diagActiveFault.PhaseReversal == 1){
 801e624:	4b35      	ldr	r3, [pc, #212]	; (801e6fc <HAL_GPIO_EXTI_Callback+0x270>)
 801e626:	79db      	ldrb	r3, [r3, #7]
 801e628:	2b01      	cmp	r3, #1
 801e62a:	d119      	bne.n	801e660 <HAL_GPIO_EXTI_Callback+0x1d4>
			if(((__HAL_TIM_GET_COUNTER(phtim8)) < 12500)|| ((__HAL_TIM_GET_COUNTER(phtim8)) > 14666)){
 801e62c:	4b2f      	ldr	r3, [pc, #188]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	681b      	ldr	r3, [r3, #0]
 801e632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e634:	f243 02d3 	movw	r2, #12499	; 0x30d3
 801e638:	4293      	cmp	r3, r2
 801e63a:	d907      	bls.n	801e64c <HAL_GPIO_EXTI_Callback+0x1c0>
 801e63c:	4b2b      	ldr	r3, [pc, #172]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	681b      	ldr	r3, [r3, #0]
 801e642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e644:	f643 124a 	movw	r2, #14666	; 0x394a
 801e648:	4293      	cmp	r3, r2
 801e64a:	d903      	bls.n	801e654 <HAL_GPIO_EXTI_Callback+0x1c8>
				Appl_u8ACDiagIgnoreThisPulse_ZC2 = 1;
 801e64c:	4b2f      	ldr	r3, [pc, #188]	; (801e70c <HAL_GPIO_EXTI_Callback+0x280>)
 801e64e:	2201      	movs	r2, #1
 801e650:	701a      	strb	r2, [r3, #0]
 801e652:	e008      	b.n	801e666 <HAL_GPIO_EXTI_Callback+0x1da>
				Appl_u8ACDiagIgnoreThisPulse_ZC2 = 0;
 801e654:	4b2d      	ldr	r3, [pc, #180]	; (801e70c <HAL_GPIO_EXTI_Callback+0x280>)
 801e656:	2200      	movs	r2, #0
 801e658:	701a      	strb	r2, [r3, #0]
				SCRSequenceNumber = 3;
 801e65a:	2303      	movs	r3, #3
 801e65c:	73fb      	strb	r3, [r7, #15]
 801e65e:	e002      	b.n	801e666 <HAL_GPIO_EXTI_Callback+0x1da>
			Appl_u8ACDiagIgnoreThisPulse_ZC2 = 1;
 801e660:	4b2a      	ldr	r3, [pc, #168]	; (801e70c <HAL_GPIO_EXTI_Callback+0x280>)
 801e662:	2201      	movs	r2, #1
 801e664:	701a      	strb	r2, [r3, #0]
		if(Appl_u8ACDiagIgnoreThisPulse_ZC2 == 0){
 801e666:	4b29      	ldr	r3, [pc, #164]	; (801e70c <HAL_GPIO_EXTI_Callback+0x280>)
 801e668:	781b      	ldrb	r3, [r3, #0]
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d105      	bne.n	801e67a <HAL_GPIO_EXTI_Callback+0x1ee>
			SCRSequenceNumber = 2;
 801e66e:	2302      	movs	r3, #2
 801e670:	73fb      	strb	r3, [r7, #15]
			ScheduleTrigger(SCRSequenceNumber);
 801e672:	7bfb      	ldrb	r3, [r7, #15]
 801e674:	4618      	mov	r0, r3
 801e676:	f000 f897 	bl	801e7a8 <ScheduleTrigger>
		FaultParamTable[Diag_enum_Powerfail_Z2].DebouncehealCounter++;
 801e67a:	4b22      	ldr	r3, [pc, #136]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e67c:	895b      	ldrh	r3, [r3, #10]
 801e67e:	3301      	adds	r3, #1
 801e680:	b29a      	uxth	r2, r3
 801e682:	4b20      	ldr	r3, [pc, #128]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e684:	815a      	strh	r2, [r3, #10]
		FaultParamTable[Diag_enum_Powerfail_Z2].DebouncefaultCounter = 0;
 801e686:	4b1f      	ldr	r3, [pc, #124]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e688:	2200      	movs	r2, #0
 801e68a:	811a      	strh	r2, [r3, #8]
		if(FaultParamTable[Diag_enum_Powerfail_Z2].DebouncehealCounter >= 100){
 801e68c:	4b1d      	ldr	r3, [pc, #116]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e68e:	895b      	ldrh	r3, [r3, #10]
 801e690:	2b63      	cmp	r3, #99	; 0x63
 801e692:	d97c      	bls.n	801e78e <HAL_GPIO_EXTI_Callback+0x302>
			FaultParamTable[Diag_enum_Powerfail_Z2].DebouncehealCounter = 100;
 801e694:	4b1b      	ldr	r3, [pc, #108]	; (801e704 <HAL_GPIO_EXTI_Callback+0x278>)
 801e696:	2264      	movs	r2, #100	; 0x64
 801e698:	815a      	strh	r2, [r3, #10]
}
 801e69a:	e078      	b.n	801e78e <HAL_GPIO_EXTI_Callback+0x302>
	else if((GPIO_Pin == uC_ZC3_Pin)){
 801e69c:	88fb      	ldrh	r3, [r7, #6]
 801e69e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e6a2:	d174      	bne.n	801e78e <HAL_GPIO_EXTI_Callback+0x302>
		Appl_u32ACDiag_DiffBtwFallEdgetime_ZC3 = (__HAL_TIM_GET_COUNTER(phtim8))- (0);
 801e6a4:	4b11      	ldr	r3, [pc, #68]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e6a6:	681b      	ldr	r3, [r3, #0]
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6ac:	4a18      	ldr	r2, [pc, #96]	; (801e710 <HAL_GPIO_EXTI_Callback+0x284>)
 801e6ae:	6013      	str	r3, [r2, #0]
		if(Appl_diagActiveFault.PhaseReversal == 0){
 801e6b0:	4b12      	ldr	r3, [pc, #72]	; (801e6fc <HAL_GPIO_EXTI_Callback+0x270>)
 801e6b2:	79db      	ldrb	r3, [r3, #7]
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	d12f      	bne.n	801e718 <HAL_GPIO_EXTI_Callback+0x28c>
			if(((__HAL_TIM_GET_COUNTER(phtim8)) < 12500) || ((__HAL_TIM_GET_COUNTER(phtim8)) > 14666)){
 801e6b8:	4b0c      	ldr	r3, [pc, #48]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6c0:	f243 02d3 	movw	r2, #12499	; 0x30d3
 801e6c4:	4293      	cmp	r3, r2
 801e6c6:	d907      	bls.n	801e6d8 <HAL_GPIO_EXTI_Callback+0x24c>
 801e6c8:	4b08      	ldr	r3, [pc, #32]	; (801e6ec <HAL_GPIO_EXTI_Callback+0x260>)
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	681b      	ldr	r3, [r3, #0]
 801e6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6d0:	f643 124a 	movw	r2, #14666	; 0x394a
 801e6d4:	4293      	cmp	r3, r2
 801e6d6:	d903      	bls.n	801e6e0 <HAL_GPIO_EXTI_Callback+0x254>
				Appl_u8ACDiagIgnoreThisPulse_ZC3 = 1;
 801e6d8:	4b0e      	ldr	r3, [pc, #56]	; (801e714 <HAL_GPIO_EXTI_Callback+0x288>)
 801e6da:	2201      	movs	r2, #1
 801e6dc:	701a      	strb	r2, [r3, #0]
 801e6de:	e03c      	b.n	801e75a <HAL_GPIO_EXTI_Callback+0x2ce>
				Appl_u8ACDiagIgnoreThisPulse_ZC3 = 0;
 801e6e0:	4b0c      	ldr	r3, [pc, #48]	; (801e714 <HAL_GPIO_EXTI_Callback+0x288>)
 801e6e2:	2200      	movs	r2, #0
 801e6e4:	701a      	strb	r2, [r3, #0]
				SCRSequenceNumber = 3;
 801e6e6:	2303      	movs	r3, #3
 801e6e8:	73fb      	strb	r3, [r7, #15]
 801e6ea:	e036      	b.n	801e75a <HAL_GPIO_EXTI_Callback+0x2ce>
 801e6ec:	200002bc 	.word	0x200002bc
 801e6f0:	20005118 	.word	0x20005118
 801e6f4:	200050c2 	.word	0x200050c2
 801e6f8:	0010c8e0 	.word	0x0010c8e0
 801e6fc:	20004d0c 	.word	0x20004d0c
 801e700:	40020000 	.word	0x40020000
 801e704:	2000000c 	.word	0x2000000c
 801e708:	2000509c 	.word	0x2000509c
 801e70c:	20005030 	.word	0x20005030
 801e710:	200050b0 	.word	0x200050b0
 801e714:	200050e8 	.word	0x200050e8
		else if(Appl_diagActiveFault.PhaseReversal == 1){
 801e718:	4b1f      	ldr	r3, [pc, #124]	; (801e798 <HAL_GPIO_EXTI_Callback+0x30c>)
 801e71a:	79db      	ldrb	r3, [r3, #7]
 801e71c:	2b01      	cmp	r3, #1
 801e71e:	d119      	bne.n	801e754 <HAL_GPIO_EXTI_Callback+0x2c8>
			if(((__HAL_TIM_GET_COUNTER(phtim8)) < 5500)|| ((__HAL_TIM_GET_COUNTER(phtim8)) > 7333)){
 801e720:	4b1e      	ldr	r3, [pc, #120]	; (801e79c <HAL_GPIO_EXTI_Callback+0x310>)
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e728:	f241 527b 	movw	r2, #5499	; 0x157b
 801e72c:	4293      	cmp	r3, r2
 801e72e:	d907      	bls.n	801e740 <HAL_GPIO_EXTI_Callback+0x2b4>
 801e730:	4b1a      	ldr	r3, [pc, #104]	; (801e79c <HAL_GPIO_EXTI_Callback+0x310>)
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	681b      	ldr	r3, [r3, #0]
 801e736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e738:	f641 42a5 	movw	r2, #7333	; 0x1ca5
 801e73c:	4293      	cmp	r3, r2
 801e73e:	d903      	bls.n	801e748 <HAL_GPIO_EXTI_Callback+0x2bc>
				Appl_u8ACDiagIgnoreThisPulse_ZC3 = 1;
 801e740:	4b17      	ldr	r3, [pc, #92]	; (801e7a0 <HAL_GPIO_EXTI_Callback+0x314>)
 801e742:	2201      	movs	r2, #1
 801e744:	701a      	strb	r2, [r3, #0]
 801e746:	e008      	b.n	801e75a <HAL_GPIO_EXTI_Callback+0x2ce>
				Appl_u8ACDiagIgnoreThisPulse_ZC3 = 0;
 801e748:	4b15      	ldr	r3, [pc, #84]	; (801e7a0 <HAL_GPIO_EXTI_Callback+0x314>)
 801e74a:	2200      	movs	r2, #0
 801e74c:	701a      	strb	r2, [r3, #0]
				SCRSequenceNumber = 2;
 801e74e:	2302      	movs	r3, #2
 801e750:	73fb      	strb	r3, [r7, #15]
 801e752:	e002      	b.n	801e75a <HAL_GPIO_EXTI_Callback+0x2ce>
			Appl_u8ACDiagIgnoreThisPulse_ZC3 = 1;
 801e754:	4b12      	ldr	r3, [pc, #72]	; (801e7a0 <HAL_GPIO_EXTI_Callback+0x314>)
 801e756:	2201      	movs	r2, #1
 801e758:	701a      	strb	r2, [r3, #0]
		if(Appl_u8ACDiagIgnoreThisPulse_ZC3 == 0){
 801e75a:	4b11      	ldr	r3, [pc, #68]	; (801e7a0 <HAL_GPIO_EXTI_Callback+0x314>)
 801e75c:	781b      	ldrb	r3, [r3, #0]
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d105      	bne.n	801e76e <HAL_GPIO_EXTI_Callback+0x2e2>
			SCRSequenceNumber = 3;
 801e762:	2303      	movs	r3, #3
 801e764:	73fb      	strb	r3, [r7, #15]
			ScheduleTrigger(SCRSequenceNumber);
 801e766:	7bfb      	ldrb	r3, [r7, #15]
 801e768:	4618      	mov	r0, r3
 801e76a:	f000 f81d 	bl	801e7a8 <ScheduleTrigger>
		FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter++;
 801e76e:	4b0d      	ldr	r3, [pc, #52]	; (801e7a4 <HAL_GPIO_EXTI_Callback+0x318>)
 801e770:	8a5b      	ldrh	r3, [r3, #18]
 801e772:	3301      	adds	r3, #1
 801e774:	b29a      	uxth	r2, r3
 801e776:	4b0b      	ldr	r3, [pc, #44]	; (801e7a4 <HAL_GPIO_EXTI_Callback+0x318>)
 801e778:	825a      	strh	r2, [r3, #18]
		FaultParamTable[Diag_enum_Powerfail_Z3].DebouncefaultCounter = 0;
 801e77a:	4b0a      	ldr	r3, [pc, #40]	; (801e7a4 <HAL_GPIO_EXTI_Callback+0x318>)
 801e77c:	2200      	movs	r2, #0
 801e77e:	821a      	strh	r2, [r3, #16]
		if(FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter >= 100){
 801e780:	4b08      	ldr	r3, [pc, #32]	; (801e7a4 <HAL_GPIO_EXTI_Callback+0x318>)
 801e782:	8a5b      	ldrh	r3, [r3, #18]
 801e784:	2b63      	cmp	r3, #99	; 0x63
 801e786:	d902      	bls.n	801e78e <HAL_GPIO_EXTI_Callback+0x302>
			FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter = 100;
 801e788:	4b06      	ldr	r3, [pc, #24]	; (801e7a4 <HAL_GPIO_EXTI_Callback+0x318>)
 801e78a:	2264      	movs	r2, #100	; 0x64
 801e78c:	825a      	strh	r2, [r3, #18]
}
 801e78e:	bf00      	nop
 801e790:	3710      	adds	r7, #16
 801e792:	46bd      	mov	sp, r7
 801e794:	bd80      	pop	{r7, pc}
 801e796:	bf00      	nop
 801e798:	20004d0c 	.word	0x20004d0c
 801e79c:	200002bc 	.word	0x200002bc
 801e7a0:	200050e8 	.word	0x200050e8
 801e7a4:	2000000c 	.word	0x2000000c

0801e7a8 <ScheduleTrigger>:

static inline void ScheduleTrigger(uint8_t Fnclocal_u8SelectedGate){
 801e7a8:	b580      	push	{r7, lr}
 801e7aa:	b082      	sub	sp, #8
 801e7ac:	af00      	add	r7, sp, #0
 801e7ae:	4603      	mov	r3, r0
 801e7b0:	71fb      	strb	r3, [r7, #7]

	if(\
			(Appl_dblPhaseSetValue_degree > SCR_ANGLE_TRIGGER_MIN && Appl_dblPhaseSetValue_degree < SCR_ANGLE_TRIGGER_MAX) && \
 801e7b2:	4b85      	ldr	r3, [pc, #532]	; (801e9c8 <ScheduleTrigger+0x220>)
 801e7b4:	e9d3 0100 	ldrd	r0, r1, [r3]
	if(\
 801e7b8:	f04f 0200 	mov.w	r2, #0
 801e7bc:	4b83      	ldr	r3, [pc, #524]	; (801e9cc <ScheduleTrigger+0x224>)
 801e7be:	f7f2 f8e3 	bl	8010988 <__aeabi_dcmpgt>
 801e7c2:	4603      	mov	r3, r0
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	f000 8115 	beq.w	801e9f4 <ScheduleTrigger+0x24c>
			(Appl_dblPhaseSetValue_degree > SCR_ANGLE_TRIGGER_MIN && Appl_dblPhaseSetValue_degree < SCR_ANGLE_TRIGGER_MAX) && \
 801e7ca:	4b7f      	ldr	r3, [pc, #508]	; (801e9c8 <ScheduleTrigger+0x220>)
 801e7cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e7d0:	f04f 0200 	mov.w	r2, #0
 801e7d4:	4b7e      	ldr	r3, [pc, #504]	; (801e9d0 <ScheduleTrigger+0x228>)
 801e7d6:	f7f2 f8b9 	bl	801094c <__aeabi_dcmplt>
 801e7da:	4603      	mov	r3, r0
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	f000 8109 	beq.w	801e9f4 <ScheduleTrigger+0x24c>
			(Appl_diagActiveFault.PowerFail_Z1 == 0) && \
 801e7e2:	4b7c      	ldr	r3, [pc, #496]	; (801e9d4 <ScheduleTrigger+0x22c>)
 801e7e4:	781b      	ldrb	r3, [r3, #0]
			(Appl_dblPhaseSetValue_degree > SCR_ANGLE_TRIGGER_MIN && Appl_dblPhaseSetValue_degree < SCR_ANGLE_TRIGGER_MAX) && \
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	f040 8104 	bne.w	801e9f4 <ScheduleTrigger+0x24c>
			(Appl_diagActiveFault.PowerFail_Z2 == 0) && \
 801e7ec:	4b79      	ldr	r3, [pc, #484]	; (801e9d4 <ScheduleTrigger+0x22c>)
 801e7ee:	785b      	ldrb	r3, [r3, #1]
			(Appl_diagActiveFault.PowerFail_Z1 == 0) && \
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	f040 80ff 	bne.w	801e9f4 <ScheduleTrigger+0x24c>
			(Appl_diagActiveFault.PowerFail_Z3 == 0) && \
 801e7f6:	4b77      	ldr	r3, [pc, #476]	; (801e9d4 <ScheduleTrigger+0x22c>)
 801e7f8:	789b      	ldrb	r3, [r3, #2]
			(Appl_diagActiveFault.PowerFail_Z2 == 0) && \
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	f040 80fa 	bne.w	801e9f4 <ScheduleTrigger+0x24c>
			((SM_enumECUState == SM_enum_ECU_CCRun_Slow) || \
 801e800:	4b75      	ldr	r3, [pc, #468]	; (801e9d8 <ScheduleTrigger+0x230>)
 801e802:	781b      	ldrb	r3, [r3, #0]
 801e804:	b2db      	uxtb	r3, r3
			(Appl_diagActiveFault.PowerFail_Z3 == 0) && \
 801e806:	2b0d      	cmp	r3, #13
 801e808:	d019      	beq.n	801e83e <ScheduleTrigger+0x96>
			 (SM_enumECUState == SM_enum_ECU_CCRun_Stable) || \
 801e80a:	4b73      	ldr	r3, [pc, #460]	; (801e9d8 <ScheduleTrigger+0x230>)
 801e80c:	781b      	ldrb	r3, [r3, #0]
 801e80e:	b2db      	uxtb	r3, r3
			((SM_enumECUState == SM_enum_ECU_CCRun_Slow) || \
 801e810:	2b0e      	cmp	r3, #14
 801e812:	d014      	beq.n	801e83e <ScheduleTrigger+0x96>
			 (SM_enumECUState == SM_enum_ECU_CVRun_Slow) || \
 801e814:	4b70      	ldr	r3, [pc, #448]	; (801e9d8 <ScheduleTrigger+0x230>)
 801e816:	781b      	ldrb	r3, [r3, #0]
 801e818:	b2db      	uxtb	r3, r3
			 (SM_enumECUState == SM_enum_ECU_CCRun_Stable) || \
 801e81a:	2b0f      	cmp	r3, #15
 801e81c:	d00f      	beq.n	801e83e <ScheduleTrigger+0x96>
			 (SM_enumECUState == SM_enum_ECU_CVRun_Stable) ||\
 801e81e:	4b6e      	ldr	r3, [pc, #440]	; (801e9d8 <ScheduleTrigger+0x230>)
 801e820:	781b      	ldrb	r3, [r3, #0]
 801e822:	b2db      	uxtb	r3, r3
			 (SM_enumECUState == SM_enum_ECU_CVRun_Slow) || \
 801e824:	2b10      	cmp	r3, #16
 801e826:	d00a      	beq.n	801e83e <ScheduleTrigger+0x96>
			 (SM_enumECUState == SM_enum_ECU_CVPreparing) || \
 801e828:	4b6b      	ldr	r3, [pc, #428]	; (801e9d8 <ScheduleTrigger+0x230>)
 801e82a:	781b      	ldrb	r3, [r3, #0]
 801e82c:	b2db      	uxtb	r3, r3
			 (SM_enumECUState == SM_enum_ECU_CVRun_Stable) ||\
 801e82e:	2b04      	cmp	r3, #4
 801e830:	d005      	beq.n	801e83e <ScheduleTrigger+0x96>
			 (SM_enumECUState == SM_enum_ECU_CCPreparing))
 801e832:	4b69      	ldr	r3, [pc, #420]	; (801e9d8 <ScheduleTrigger+0x230>)
 801e834:	781b      	ldrb	r3, [r3, #0]
 801e836:	b2db      	uxtb	r3, r3
			 (SM_enumECUState == SM_enum_ECU_CVPreparing) || \
 801e838:	2b05      	cmp	r3, #5
 801e83a:	f040 80db 	bne.w	801e9f4 <ScheduleTrigger+0x24c>
	){
		if(Fnclocal_u8SelectedGate == 1){
 801e83e:	79fb      	ldrb	r3, [r7, #7]
 801e840:	2b01      	cmp	r3, #1
 801e842:	d138      	bne.n	801e8b6 <ScheduleTrigger+0x10e>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801e844:	4b60      	ldr	r3, [pc, #384]	; (801e9c8 <ScheduleTrigger+0x220>)
 801e846:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e84a:	a35d      	add	r3, pc, #372	; (adr r3, 801e9c0 <ScheduleTrigger+0x218>)
 801e84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e850:	f7f1 fe0a 	bl	8010468 <__aeabi_dmul>
 801e854:	4602      	mov	r2, r0
 801e856:	460b      	mov	r3, r1
 801e858:	4610      	mov	r0, r2
 801e85a:	4619      	mov	r1, r3
 801e85c:	f7f2 f8dc 	bl	8010a18 <__aeabi_d2uiz>
 801e860:	4603      	mov	r3, r0
 801e862:	4a5e      	ldr	r2, [pc, #376]	; (801e9dc <ScheduleTrigger+0x234>)
 801e864:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801e866:	4a5e      	ldr	r2, [pc, #376]	; (801e9e0 <ScheduleTrigger+0x238>)
 801e868:	79fb      	ldrb	r3, [r7, #7]
 801e86a:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim5,0);
 801e86c:	4b5d      	ldr	r3, [pc, #372]	; (801e9e4 <ScheduleTrigger+0x23c>)
 801e86e:	681b      	ldr	r3, [r3, #0]
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	2200      	movs	r2, #0
 801e874:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim5,Appl_u32AngleInTime);
 801e876:	4b5b      	ldr	r3, [pc, #364]	; (801e9e4 <ScheduleTrigger+0x23c>)
 801e878:	681b      	ldr	r3, [r3, #0]
 801e87a:	681b      	ldr	r3, [r3, #0]
 801e87c:	4a57      	ldr	r2, [pc, #348]	; (801e9dc <ScheduleTrigger+0x234>)
 801e87e:	6812      	ldr	r2, [r2, #0]
 801e880:	62da      	str	r2, [r3, #44]	; 0x2c
 801e882:	4b58      	ldr	r3, [pc, #352]	; (801e9e4 <ScheduleTrigger+0x23c>)
 801e884:	681b      	ldr	r3, [r3, #0]
 801e886:	4a55      	ldr	r2, [pc, #340]	; (801e9dc <ScheduleTrigger+0x234>)
 801e888:	6812      	ldr	r2, [r2, #0]
 801e88a:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim5, TIM_IT_UPDATE);
 801e88c:	4b55      	ldr	r3, [pc, #340]	; (801e9e4 <ScheduleTrigger+0x23c>)
 801e88e:	681b      	ldr	r3, [r3, #0]
 801e890:	681b      	ldr	r3, [r3, #0]
 801e892:	68da      	ldr	r2, [r3, #12]
 801e894:	4b53      	ldr	r3, [pc, #332]	; (801e9e4 <ScheduleTrigger+0x23c>)
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	681b      	ldr	r3, [r3, #0]
 801e89a:	f042 0201 	orr.w	r2, r2, #1
 801e89e:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim5);
 801e8a0:	4b50      	ldr	r3, [pc, #320]	; (801e9e4 <ScheduleTrigger+0x23c>)
 801e8a2:	681b      	ldr	r3, [r3, #0]
 801e8a4:	681b      	ldr	r3, [r3, #0]
 801e8a6:	681a      	ldr	r2, [r3, #0]
 801e8a8:	4b4e      	ldr	r3, [pc, #312]	; (801e9e4 <ScheduleTrigger+0x23c>)
 801e8aa:	681b      	ldr	r3, [r3, #0]
 801e8ac:	681b      	ldr	r3, [r3, #0]
 801e8ae:	f042 0201 	orr.w	r2, r2, #1
 801e8b2:	601a      	str	r2, [r3, #0]
		if(Fnclocal_u8SelectedGate == 1){
 801e8b4:	e19d      	b.n	801ebf2 <ScheduleTrigger+0x44a>
		}
		else if(Fnclocal_u8SelectedGate == 2 && SM_ApplParam.u8ApplSCRTrggerOffG2 == 0){
 801e8b6:	79fb      	ldrb	r3, [r7, #7]
 801e8b8:	2b02      	cmp	r3, #2
 801e8ba:	d13d      	bne.n	801e938 <ScheduleTrigger+0x190>
 801e8bc:	4b4a      	ldr	r3, [pc, #296]	; (801e9e8 <ScheduleTrigger+0x240>)
 801e8be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e8c2:	2b00      	cmp	r3, #0
 801e8c4:	d138      	bne.n	801e938 <ScheduleTrigger+0x190>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801e8c6:	4b40      	ldr	r3, [pc, #256]	; (801e9c8 <ScheduleTrigger+0x220>)
 801e8c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e8cc:	a33c      	add	r3, pc, #240	; (adr r3, 801e9c0 <ScheduleTrigger+0x218>)
 801e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8d2:	f7f1 fdc9 	bl	8010468 <__aeabi_dmul>
 801e8d6:	4602      	mov	r2, r0
 801e8d8:	460b      	mov	r3, r1
 801e8da:	4610      	mov	r0, r2
 801e8dc:	4619      	mov	r1, r3
 801e8de:	f7f2 f89b 	bl	8010a18 <__aeabi_d2uiz>
 801e8e2:	4603      	mov	r3, r0
 801e8e4:	4a3d      	ldr	r2, [pc, #244]	; (801e9dc <ScheduleTrigger+0x234>)
 801e8e6:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801e8e8:	4a3d      	ldr	r2, [pc, #244]	; (801e9e0 <ScheduleTrigger+0x238>)
 801e8ea:	79fb      	ldrb	r3, [r7, #7]
 801e8ec:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim6,0);
 801e8ee:	4b3f      	ldr	r3, [pc, #252]	; (801e9ec <ScheduleTrigger+0x244>)
 801e8f0:	681b      	ldr	r3, [r3, #0]
 801e8f2:	681b      	ldr	r3, [r3, #0]
 801e8f4:	2200      	movs	r2, #0
 801e8f6:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim6,Appl_u32AngleInTime);
 801e8f8:	4b3c      	ldr	r3, [pc, #240]	; (801e9ec <ScheduleTrigger+0x244>)
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	4a37      	ldr	r2, [pc, #220]	; (801e9dc <ScheduleTrigger+0x234>)
 801e900:	6812      	ldr	r2, [r2, #0]
 801e902:	62da      	str	r2, [r3, #44]	; 0x2c
 801e904:	4b39      	ldr	r3, [pc, #228]	; (801e9ec <ScheduleTrigger+0x244>)
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	4a34      	ldr	r2, [pc, #208]	; (801e9dc <ScheduleTrigger+0x234>)
 801e90a:	6812      	ldr	r2, [r2, #0]
 801e90c:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim6, TIM_IT_UPDATE);
 801e90e:	4b37      	ldr	r3, [pc, #220]	; (801e9ec <ScheduleTrigger+0x244>)
 801e910:	681b      	ldr	r3, [r3, #0]
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	68da      	ldr	r2, [r3, #12]
 801e916:	4b35      	ldr	r3, [pc, #212]	; (801e9ec <ScheduleTrigger+0x244>)
 801e918:	681b      	ldr	r3, [r3, #0]
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	f042 0201 	orr.w	r2, r2, #1
 801e920:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim6);
 801e922:	4b32      	ldr	r3, [pc, #200]	; (801e9ec <ScheduleTrigger+0x244>)
 801e924:	681b      	ldr	r3, [r3, #0]
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	681a      	ldr	r2, [r3, #0]
 801e92a:	4b30      	ldr	r3, [pc, #192]	; (801e9ec <ScheduleTrigger+0x244>)
 801e92c:	681b      	ldr	r3, [r3, #0]
 801e92e:	681b      	ldr	r3, [r3, #0]
 801e930:	f042 0201 	orr.w	r2, r2, #1
 801e934:	601a      	str	r2, [r3, #0]
		if(Fnclocal_u8SelectedGate == 1){
 801e936:	e15c      	b.n	801ebf2 <ScheduleTrigger+0x44a>
		}
		else if(Fnclocal_u8SelectedGate == 3 && SM_ApplParam.u8ApplSCRTrggerOffG3 == 0){
 801e938:	79fb      	ldrb	r3, [r7, #7]
 801e93a:	2b03      	cmp	r3, #3
 801e93c:	f040 8159 	bne.w	801ebf2 <ScheduleTrigger+0x44a>
 801e940:	4b29      	ldr	r3, [pc, #164]	; (801e9e8 <ScheduleTrigger+0x240>)
 801e942:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 801e946:	2b00      	cmp	r3, #0
 801e948:	f040 8153 	bne.w	801ebf2 <ScheduleTrigger+0x44a>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801e94c:	4b1e      	ldr	r3, [pc, #120]	; (801e9c8 <ScheduleTrigger+0x220>)
 801e94e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e952:	a31b      	add	r3, pc, #108	; (adr r3, 801e9c0 <ScheduleTrigger+0x218>)
 801e954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e958:	f7f1 fd86 	bl	8010468 <__aeabi_dmul>
 801e95c:	4602      	mov	r2, r0
 801e95e:	460b      	mov	r3, r1
 801e960:	4610      	mov	r0, r2
 801e962:	4619      	mov	r1, r3
 801e964:	f7f2 f858 	bl	8010a18 <__aeabi_d2uiz>
 801e968:	4603      	mov	r3, r0
 801e96a:	4a1c      	ldr	r2, [pc, #112]	; (801e9dc <ScheduleTrigger+0x234>)
 801e96c:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801e96e:	4a1c      	ldr	r2, [pc, #112]	; (801e9e0 <ScheduleTrigger+0x238>)
 801e970:	79fb      	ldrb	r3, [r7, #7]
 801e972:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim7,0);
 801e974:	4b1e      	ldr	r3, [pc, #120]	; (801e9f0 <ScheduleTrigger+0x248>)
 801e976:	681b      	ldr	r3, [r3, #0]
 801e978:	681b      	ldr	r3, [r3, #0]
 801e97a:	2200      	movs	r2, #0
 801e97c:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim7,Appl_u32AngleInTime);
 801e97e:	4b1c      	ldr	r3, [pc, #112]	; (801e9f0 <ScheduleTrigger+0x248>)
 801e980:	681b      	ldr	r3, [r3, #0]
 801e982:	681b      	ldr	r3, [r3, #0]
 801e984:	4a15      	ldr	r2, [pc, #84]	; (801e9dc <ScheduleTrigger+0x234>)
 801e986:	6812      	ldr	r2, [r2, #0]
 801e988:	62da      	str	r2, [r3, #44]	; 0x2c
 801e98a:	4b19      	ldr	r3, [pc, #100]	; (801e9f0 <ScheduleTrigger+0x248>)
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	4a13      	ldr	r2, [pc, #76]	; (801e9dc <ScheduleTrigger+0x234>)
 801e990:	6812      	ldr	r2, [r2, #0]
 801e992:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim7, TIM_IT_UPDATE);
 801e994:	4b16      	ldr	r3, [pc, #88]	; (801e9f0 <ScheduleTrigger+0x248>)
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	681b      	ldr	r3, [r3, #0]
 801e99a:	68da      	ldr	r2, [r3, #12]
 801e99c:	4b14      	ldr	r3, [pc, #80]	; (801e9f0 <ScheduleTrigger+0x248>)
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	681b      	ldr	r3, [r3, #0]
 801e9a2:	f042 0201 	orr.w	r2, r2, #1
 801e9a6:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim7);
 801e9a8:	4b11      	ldr	r3, [pc, #68]	; (801e9f0 <ScheduleTrigger+0x248>)
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	681b      	ldr	r3, [r3, #0]
 801e9ae:	681a      	ldr	r2, [r3, #0]
 801e9b0:	4b0f      	ldr	r3, [pc, #60]	; (801e9f0 <ScheduleTrigger+0x248>)
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	f042 0201 	orr.w	r2, r2, #1
 801e9ba:	601a      	str	r2, [r3, #0]
		if(Fnclocal_u8SelectedGate == 1){
 801e9bc:	e119      	b.n	801ebf2 <ScheduleTrigger+0x44a>
 801e9be:	bf00      	nop
 801e9c0:	00000000 	.word	0x00000000
 801e9c4:	404bc000 	.word	0x404bc000
 801e9c8:	20000920 	.word	0x20000920
 801e9cc:	40490000 	.word	0x40490000
 801e9d0:	40690000 	.word	0x40690000
 801e9d4:	20004d0c 	.word	0x20004d0c
 801e9d8:	20005114 	.word	0x20005114
 801e9dc:	200050d0 	.word	0x200050d0
 801e9e0:	200050c0 	.word	0x200050c0
 801e9e4:	200002b0 	.word	0x200002b0
 801e9e8:	20005034 	.word	0x20005034
 801e9ec:	200002b4 	.word	0x200002b4
 801e9f0:	200002b8 	.word	0x200002b8
		}
	}
	else if(\
			(Appl_dblPhaseSetValue_degree >0 && Appl_dblPhaseSetValue_degree <= 360) && \
 801e9f4:	4b84      	ldr	r3, [pc, #528]	; (801ec08 <ScheduleTrigger+0x460>)
 801e9f6:	e9d3 0100 	ldrd	r0, r1, [r3]
	else if(\
 801e9fa:	f04f 0200 	mov.w	r2, #0
 801e9fe:	f04f 0300 	mov.w	r3, #0
 801ea02:	f7f1 ffc1 	bl	8010988 <__aeabi_dcmpgt>
 801ea06:	4603      	mov	r3, r0
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	f000 80d5 	beq.w	801ebb8 <ScheduleTrigger+0x410>
			(Appl_dblPhaseSetValue_degree >0 && Appl_dblPhaseSetValue_degree <= 360) && \
 801ea0e:	4b7e      	ldr	r3, [pc, #504]	; (801ec08 <ScheduleTrigger+0x460>)
 801ea10:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ea14:	f04f 0200 	mov.w	r2, #0
 801ea18:	4b7c      	ldr	r3, [pc, #496]	; (801ec0c <ScheduleTrigger+0x464>)
 801ea1a:	f7f1 ffa1 	bl	8010960 <__aeabi_dcmple>
 801ea1e:	4603      	mov	r3, r0
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	f000 80c9 	beq.w	801ebb8 <ScheduleTrigger+0x410>
			(Appl_diagActiveFault.PowerFail_Z1 == 0) && \
 801ea26:	4b7a      	ldr	r3, [pc, #488]	; (801ec10 <ScheduleTrigger+0x468>)
 801ea28:	781b      	ldrb	r3, [r3, #0]
			(Appl_dblPhaseSetValue_degree >0 && Appl_dblPhaseSetValue_degree <= 360) && \
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	f040 80c4 	bne.w	801ebb8 <ScheduleTrigger+0x410>
			(Appl_diagActiveFault.PowerFail_Z2 == 0) && \
 801ea30:	4b77      	ldr	r3, [pc, #476]	; (801ec10 <ScheduleTrigger+0x468>)
 801ea32:	785b      	ldrb	r3, [r3, #1]
			(Appl_diagActiveFault.PowerFail_Z1 == 0) && \
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	f040 80bf 	bne.w	801ebb8 <ScheduleTrigger+0x410>
			(Appl_diagActiveFault.PowerFail_Z3 == 0) && \
 801ea3a:	4b75      	ldr	r3, [pc, #468]	; (801ec10 <ScheduleTrigger+0x468>)
 801ea3c:	789b      	ldrb	r3, [r3, #2]
			(Appl_diagActiveFault.PowerFail_Z2 == 0) && \
 801ea3e:	2b00      	cmp	r3, #0
 801ea40:	f040 80ba 	bne.w	801ebb8 <ScheduleTrigger+0x410>
			((SM_enumECUState == SM_enum_ECU_VishwatestMode))
 801ea44:	4b73      	ldr	r3, [pc, #460]	; (801ec14 <ScheduleTrigger+0x46c>)
 801ea46:	781b      	ldrb	r3, [r3, #0]
 801ea48:	b2db      	uxtb	r3, r3
			(Appl_diagActiveFault.PowerFail_Z3 == 0) && \
 801ea4a:	2b15      	cmp	r3, #21
 801ea4c:	f040 80b4 	bne.w	801ebb8 <ScheduleTrigger+0x410>
	){
		if(Fnclocal_u8SelectedGate == 1){
 801ea50:	79fb      	ldrb	r3, [r7, #7]
 801ea52:	2b01      	cmp	r3, #1
 801ea54:	d138      	bne.n	801eac8 <ScheduleTrigger+0x320>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801ea56:	4b6c      	ldr	r3, [pc, #432]	; (801ec08 <ScheduleTrigger+0x460>)
 801ea58:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ea5c:	a368      	add	r3, pc, #416	; (adr r3, 801ec00 <ScheduleTrigger+0x458>)
 801ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea62:	f7f1 fd01 	bl	8010468 <__aeabi_dmul>
 801ea66:	4602      	mov	r2, r0
 801ea68:	460b      	mov	r3, r1
 801ea6a:	4610      	mov	r0, r2
 801ea6c:	4619      	mov	r1, r3
 801ea6e:	f7f1 ffd3 	bl	8010a18 <__aeabi_d2uiz>
 801ea72:	4603      	mov	r3, r0
 801ea74:	4a68      	ldr	r2, [pc, #416]	; (801ec18 <ScheduleTrigger+0x470>)
 801ea76:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801ea78:	4a68      	ldr	r2, [pc, #416]	; (801ec1c <ScheduleTrigger+0x474>)
 801ea7a:	79fb      	ldrb	r3, [r7, #7]
 801ea7c:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim5,0);
 801ea7e:	4b68      	ldr	r3, [pc, #416]	; (801ec20 <ScheduleTrigger+0x478>)
 801ea80:	681b      	ldr	r3, [r3, #0]
 801ea82:	681b      	ldr	r3, [r3, #0]
 801ea84:	2200      	movs	r2, #0
 801ea86:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim5,Appl_u32AngleInTime);
 801ea88:	4b65      	ldr	r3, [pc, #404]	; (801ec20 <ScheduleTrigger+0x478>)
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	4a62      	ldr	r2, [pc, #392]	; (801ec18 <ScheduleTrigger+0x470>)
 801ea90:	6812      	ldr	r2, [r2, #0]
 801ea92:	62da      	str	r2, [r3, #44]	; 0x2c
 801ea94:	4b62      	ldr	r3, [pc, #392]	; (801ec20 <ScheduleTrigger+0x478>)
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	4a5f      	ldr	r2, [pc, #380]	; (801ec18 <ScheduleTrigger+0x470>)
 801ea9a:	6812      	ldr	r2, [r2, #0]
 801ea9c:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim5, TIM_IT_UPDATE);
 801ea9e:	4b60      	ldr	r3, [pc, #384]	; (801ec20 <ScheduleTrigger+0x478>)
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	68da      	ldr	r2, [r3, #12]
 801eaa6:	4b5e      	ldr	r3, [pc, #376]	; (801ec20 <ScheduleTrigger+0x478>)
 801eaa8:	681b      	ldr	r3, [r3, #0]
 801eaaa:	681b      	ldr	r3, [r3, #0]
 801eaac:	f042 0201 	orr.w	r2, r2, #1
 801eab0:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim5);
 801eab2:	4b5b      	ldr	r3, [pc, #364]	; (801ec20 <ScheduleTrigger+0x478>)
 801eab4:	681b      	ldr	r3, [r3, #0]
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	681a      	ldr	r2, [r3, #0]
 801eaba:	4b59      	ldr	r3, [pc, #356]	; (801ec20 <ScheduleTrigger+0x478>)
 801eabc:	681b      	ldr	r3, [r3, #0]
 801eabe:	681b      	ldr	r3, [r3, #0]
 801eac0:	f042 0201 	orr.w	r2, r2, #1
 801eac4:	601a      	str	r2, [r3, #0]
		if(Fnclocal_u8SelectedGate == 1){
 801eac6:	e096      	b.n	801ebf6 <ScheduleTrigger+0x44e>
		}
		else if(Fnclocal_u8SelectedGate == 2){
 801eac8:	79fb      	ldrb	r3, [r7, #7]
 801eaca:	2b02      	cmp	r3, #2
 801eacc:	d138      	bne.n	801eb40 <ScheduleTrigger+0x398>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801eace:	4b4e      	ldr	r3, [pc, #312]	; (801ec08 <ScheduleTrigger+0x460>)
 801ead0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ead4:	a34a      	add	r3, pc, #296	; (adr r3, 801ec00 <ScheduleTrigger+0x458>)
 801ead6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eada:	f7f1 fcc5 	bl	8010468 <__aeabi_dmul>
 801eade:	4602      	mov	r2, r0
 801eae0:	460b      	mov	r3, r1
 801eae2:	4610      	mov	r0, r2
 801eae4:	4619      	mov	r1, r3
 801eae6:	f7f1 ff97 	bl	8010a18 <__aeabi_d2uiz>
 801eaea:	4603      	mov	r3, r0
 801eaec:	4a4a      	ldr	r2, [pc, #296]	; (801ec18 <ScheduleTrigger+0x470>)
 801eaee:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801eaf0:	4a4a      	ldr	r2, [pc, #296]	; (801ec1c <ScheduleTrigger+0x474>)
 801eaf2:	79fb      	ldrb	r3, [r7, #7]
 801eaf4:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim6,0);
 801eaf6:	4b4b      	ldr	r3, [pc, #300]	; (801ec24 <ScheduleTrigger+0x47c>)
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	2200      	movs	r2, #0
 801eafe:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim6,Appl_u32AngleInTime);
 801eb00:	4b48      	ldr	r3, [pc, #288]	; (801ec24 <ScheduleTrigger+0x47c>)
 801eb02:	681b      	ldr	r3, [r3, #0]
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	4a44      	ldr	r2, [pc, #272]	; (801ec18 <ScheduleTrigger+0x470>)
 801eb08:	6812      	ldr	r2, [r2, #0]
 801eb0a:	62da      	str	r2, [r3, #44]	; 0x2c
 801eb0c:	4b45      	ldr	r3, [pc, #276]	; (801ec24 <ScheduleTrigger+0x47c>)
 801eb0e:	681b      	ldr	r3, [r3, #0]
 801eb10:	4a41      	ldr	r2, [pc, #260]	; (801ec18 <ScheduleTrigger+0x470>)
 801eb12:	6812      	ldr	r2, [r2, #0]
 801eb14:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim6, TIM_IT_UPDATE);
 801eb16:	4b43      	ldr	r3, [pc, #268]	; (801ec24 <ScheduleTrigger+0x47c>)
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	68da      	ldr	r2, [r3, #12]
 801eb1e:	4b41      	ldr	r3, [pc, #260]	; (801ec24 <ScheduleTrigger+0x47c>)
 801eb20:	681b      	ldr	r3, [r3, #0]
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	f042 0201 	orr.w	r2, r2, #1
 801eb28:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim6);
 801eb2a:	4b3e      	ldr	r3, [pc, #248]	; (801ec24 <ScheduleTrigger+0x47c>)
 801eb2c:	681b      	ldr	r3, [r3, #0]
 801eb2e:	681b      	ldr	r3, [r3, #0]
 801eb30:	681a      	ldr	r2, [r3, #0]
 801eb32:	4b3c      	ldr	r3, [pc, #240]	; (801ec24 <ScheduleTrigger+0x47c>)
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	f042 0201 	orr.w	r2, r2, #1
 801eb3c:	601a      	str	r2, [r3, #0]
		if(Fnclocal_u8SelectedGate == 1){
 801eb3e:	e05a      	b.n	801ebf6 <ScheduleTrigger+0x44e>
		}
		else if(Fnclocal_u8SelectedGate == 3){
 801eb40:	79fb      	ldrb	r3, [r7, #7]
 801eb42:	2b03      	cmp	r3, #3
 801eb44:	d157      	bne.n	801ebf6 <ScheduleTrigger+0x44e>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801eb46:	4b30      	ldr	r3, [pc, #192]	; (801ec08 <ScheduleTrigger+0x460>)
 801eb48:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eb4c:	a32c      	add	r3, pc, #176	; (adr r3, 801ec00 <ScheduleTrigger+0x458>)
 801eb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb52:	f7f1 fc89 	bl	8010468 <__aeabi_dmul>
 801eb56:	4602      	mov	r2, r0
 801eb58:	460b      	mov	r3, r1
 801eb5a:	4610      	mov	r0, r2
 801eb5c:	4619      	mov	r1, r3
 801eb5e:	f7f1 ff5b 	bl	8010a18 <__aeabi_d2uiz>
 801eb62:	4603      	mov	r3, r0
 801eb64:	4a2c      	ldr	r2, [pc, #176]	; (801ec18 <ScheduleTrigger+0x470>)
 801eb66:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801eb68:	4a2c      	ldr	r2, [pc, #176]	; (801ec1c <ScheduleTrigger+0x474>)
 801eb6a:	79fb      	ldrb	r3, [r7, #7]
 801eb6c:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim7,0);
 801eb6e:	4b2e      	ldr	r3, [pc, #184]	; (801ec28 <ScheduleTrigger+0x480>)
 801eb70:	681b      	ldr	r3, [r3, #0]
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	2200      	movs	r2, #0
 801eb76:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim7,Appl_u32AngleInTime);
 801eb78:	4b2b      	ldr	r3, [pc, #172]	; (801ec28 <ScheduleTrigger+0x480>)
 801eb7a:	681b      	ldr	r3, [r3, #0]
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	4a26      	ldr	r2, [pc, #152]	; (801ec18 <ScheduleTrigger+0x470>)
 801eb80:	6812      	ldr	r2, [r2, #0]
 801eb82:	62da      	str	r2, [r3, #44]	; 0x2c
 801eb84:	4b28      	ldr	r3, [pc, #160]	; (801ec28 <ScheduleTrigger+0x480>)
 801eb86:	681b      	ldr	r3, [r3, #0]
 801eb88:	4a23      	ldr	r2, [pc, #140]	; (801ec18 <ScheduleTrigger+0x470>)
 801eb8a:	6812      	ldr	r2, [r2, #0]
 801eb8c:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim7, TIM_IT_UPDATE);
 801eb8e:	4b26      	ldr	r3, [pc, #152]	; (801ec28 <ScheduleTrigger+0x480>)
 801eb90:	681b      	ldr	r3, [r3, #0]
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	68da      	ldr	r2, [r3, #12]
 801eb96:	4b24      	ldr	r3, [pc, #144]	; (801ec28 <ScheduleTrigger+0x480>)
 801eb98:	681b      	ldr	r3, [r3, #0]
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	f042 0201 	orr.w	r2, r2, #1
 801eba0:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim7);
 801eba2:	4b21      	ldr	r3, [pc, #132]	; (801ec28 <ScheduleTrigger+0x480>)
 801eba4:	681b      	ldr	r3, [r3, #0]
 801eba6:	681b      	ldr	r3, [r3, #0]
 801eba8:	681a      	ldr	r2, [r3, #0]
 801ebaa:	4b1f      	ldr	r3, [pc, #124]	; (801ec28 <ScheduleTrigger+0x480>)
 801ebac:	681b      	ldr	r3, [r3, #0]
 801ebae:	681b      	ldr	r3, [r3, #0]
 801ebb0:	f042 0201 	orr.w	r2, r2, #1
 801ebb4:	601a      	str	r2, [r3, #0]
		if(Fnclocal_u8SelectedGate == 1){
 801ebb6:	e01e      	b.n	801ebf6 <ScheduleTrigger+0x44e>
		}

	}
	else{
		output = 0;
 801ebb8:	4b1c      	ldr	r3, [pc, #112]	; (801ec2c <ScheduleTrigger+0x484>)
 801ebba:	f04f 0200 	mov.w	r2, #0
 801ebbe:	601a      	str	r2, [r3, #0]
		Appl_dblPhaseSetValue_degree = 0;
 801ebc0:	4911      	ldr	r1, [pc, #68]	; (801ec08 <ScheduleTrigger+0x460>)
 801ebc2:	f04f 0200 	mov.w	r2, #0
 801ebc6:	f04f 0300 	mov.w	r3, #0
 801ebca:	e9c1 2300 	strd	r2, r3, [r1]
		G1T_OFF();
 801ebce:	2201      	movs	r2, #1
 801ebd0:	2120      	movs	r1, #32
 801ebd2:	4817      	ldr	r0, [pc, #92]	; (801ec30 <ScheduleTrigger+0x488>)
 801ebd4:	f7f5 f8e0 	bl	8013d98 <HAL_GPIO_WritePin>
		G2T_OFF();
 801ebd8:	2201      	movs	r2, #1
 801ebda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801ebde:	4815      	ldr	r0, [pc, #84]	; (801ec34 <ScheduleTrigger+0x48c>)
 801ebe0:	f7f5 f8da 	bl	8013d98 <HAL_GPIO_WritePin>
		G3T_OFF();
 801ebe4:	2201      	movs	r2, #1
 801ebe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801ebea:	4812      	ldr	r0, [pc, #72]	; (801ec34 <ScheduleTrigger+0x48c>)
 801ebec:	f7f5 f8d4 	bl	8013d98 <HAL_GPIO_WritePin>
	}
}
 801ebf0:	e002      	b.n	801ebf8 <ScheduleTrigger+0x450>
		if(Fnclocal_u8SelectedGate == 1){
 801ebf2:	bf00      	nop
 801ebf4:	e000      	b.n	801ebf8 <ScheduleTrigger+0x450>
		if(Fnclocal_u8SelectedGate == 1){
 801ebf6:	bf00      	nop
}
 801ebf8:	bf00      	nop
 801ebfa:	3708      	adds	r7, #8
 801ebfc:	46bd      	mov	sp, r7
 801ebfe:	bd80      	pop	{r7, pc}
 801ec00:	00000000 	.word	0x00000000
 801ec04:	404bc000 	.word	0x404bc000
 801ec08:	20000920 	.word	0x20000920
 801ec0c:	40768000 	.word	0x40768000
 801ec10:	20004d0c 	.word	0x20004d0c
 801ec14:	20005114 	.word	0x20005114
 801ec18:	200050d0 	.word	0x200050d0
 801ec1c:	200050c0 	.word	0x200050c0
 801ec20:	200002b0 	.word	0x200002b0
 801ec24:	200002b4 	.word	0x200002b4
 801ec28:	200002b8 	.word	0x200002b8
 801ec2c:	2000502c 	.word	0x2000502c
 801ec30:	40020400 	.word	0x40020400
 801ec34:	40020000 	.word	0x40020000

0801ec38 <TIM5_Callback>:

void TIM5_Callback(void){
 801ec38:	b580      	push	{r7, lr}
 801ec3a:	af00      	add	r7, sp, #0
	/*Vishwesh:
	 * Here my strategy is, TIM5_Callback() is called only when Gate1 Trigger is scheduled.
	 * Its just a matter of time a trigger pulse is served
	 */

	if (__HAL_TIM_GET_FLAG(phtim5, TIM_FLAG_UPDATE) != RESET)
 801ec3c:	4b34      	ldr	r3, [pc, #208]	; (801ed10 <TIM5_Callback+0xd8>)
 801ec3e:	681b      	ldr	r3, [r3, #0]
 801ec40:	681b      	ldr	r3, [r3, #0]
 801ec42:	691b      	ldr	r3, [r3, #16]
 801ec44:	f003 0301 	and.w	r3, r3, #1
 801ec48:	2b01      	cmp	r3, #1
 801ec4a:	d15e      	bne.n	801ed0a <TIM5_Callback+0xd2>
	{
		if (__HAL_TIM_GET_IT_SOURCE(phtim5, TIM_IT_UPDATE) != RESET)
 801ec4c:	4b30      	ldr	r3, [pc, #192]	; (801ed10 <TIM5_Callback+0xd8>)
 801ec4e:	681b      	ldr	r3, [r3, #0]
 801ec50:	681b      	ldr	r3, [r3, #0]
 801ec52:	68db      	ldr	r3, [r3, #12]
 801ec54:	f003 0301 	and.w	r3, r3, #1
 801ec58:	2b01      	cmp	r3, #1
 801ec5a:	d156      	bne.n	801ed0a <TIM5_Callback+0xd2>
		{
			__HAL_TIM_CLEAR_IT(phtim5, TIM_IT_UPDATE);
 801ec5c:	4b2c      	ldr	r3, [pc, #176]	; (801ed10 <TIM5_Callback+0xd8>)
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	f06f 0201 	mvn.w	r2, #1
 801ec66:	611a      	str	r2, [r3, #16]
			__HAL_TIM_DISABLE_IT(phtim5,TIM_IT_UPDATE);
 801ec68:	4b29      	ldr	r3, [pc, #164]	; (801ed10 <TIM5_Callback+0xd8>)
 801ec6a:	681b      	ldr	r3, [r3, #0]
 801ec6c:	681b      	ldr	r3, [r3, #0]
 801ec6e:	68da      	ldr	r2, [r3, #12]
 801ec70:	4b27      	ldr	r3, [pc, #156]	; (801ed10 <TIM5_Callback+0xd8>)
 801ec72:	681b      	ldr	r3, [r3, #0]
 801ec74:	681b      	ldr	r3, [r3, #0]
 801ec76:	f022 0201 	bic.w	r2, r2, #1
 801ec7a:	60da      	str	r2, [r3, #12]
			__HAL_TIM_DISABLE(phtim5);
 801ec7c:	4b24      	ldr	r3, [pc, #144]	; (801ed10 <TIM5_Callback+0xd8>)
 801ec7e:	681b      	ldr	r3, [r3, #0]
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	6a1a      	ldr	r2, [r3, #32]
 801ec84:	f241 1311 	movw	r3, #4369	; 0x1111
 801ec88:	4013      	ands	r3, r2
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	d112      	bne.n	801ecb4 <TIM5_Callback+0x7c>
 801ec8e:	4b20      	ldr	r3, [pc, #128]	; (801ed10 <TIM5_Callback+0xd8>)
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	6a1a      	ldr	r2, [r3, #32]
 801ec96:	f240 4344 	movw	r3, #1092	; 0x444
 801ec9a:	4013      	ands	r3, r2
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	d109      	bne.n	801ecb4 <TIM5_Callback+0x7c>
 801eca0:	4b1b      	ldr	r3, [pc, #108]	; (801ed10 <TIM5_Callback+0xd8>)
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	681a      	ldr	r2, [r3, #0]
 801eca8:	4b19      	ldr	r3, [pc, #100]	; (801ed10 <TIM5_Callback+0xd8>)
 801ecaa:	681b      	ldr	r3, [r3, #0]
 801ecac:	681b      	ldr	r3, [r3, #0]
 801ecae:	f022 0201 	bic.w	r2, r2, #1
 801ecb2:	601a      	str	r2, [r3, #0]
			if(SM_ApplParam.u8ApplSCRTrggerOffG1 == 0){
 801ecb4:	4b17      	ldr	r3, [pc, #92]	; (801ed14 <TIM5_Callback+0xdc>)
 801ecb6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801ecba:	2b00      	cmp	r3, #0
 801ecbc:	d120      	bne.n	801ed00 <TIM5_Callback+0xc8>
				SM_ApplParam.u8SkipT1++;
 801ecbe:	4b15      	ldr	r3, [pc, #84]	; (801ed14 <TIM5_Callback+0xdc>)
 801ecc0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801ecc4:	3301      	adds	r3, #1
 801ecc6:	b2da      	uxtb	r2, r3
 801ecc8:	4b12      	ldr	r3, [pc, #72]	; (801ed14 <TIM5_Callback+0xdc>)
 801ecca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
				if(SM_ApplParam.u8SkipT1 > 200){
 801ecce:	4b11      	ldr	r3, [pc, #68]	; (801ed14 <TIM5_Callback+0xdc>)
 801ecd0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801ecd4:	2bc8      	cmp	r3, #200	; 0xc8
 801ecd6:	d913      	bls.n	801ed00 <TIM5_Callback+0xc8>
					SM_ApplParam.u8SkipT1 = 210;
 801ecd8:	4b0e      	ldr	r3, [pc, #56]	; (801ed14 <TIM5_Callback+0xdc>)
 801ecda:	22d2      	movs	r2, #210	; 0xd2
 801ecdc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
					G1T_ON();
 801ece0:	2200      	movs	r2, #0
 801ece2:	2120      	movs	r1, #32
 801ece4:	480c      	ldr	r0, [pc, #48]	; (801ed18 <TIM5_Callback+0xe0>)
 801ece6:	f7f5 f857 	bl	8013d98 <HAL_GPIO_WritePin>
					delay_us(SM_ApplParam.Appl_u16PulseSCRWidth_us);
 801ecea:	4b0a      	ldr	r3, [pc, #40]	; (801ed14 <TIM5_Callback+0xdc>)
 801ecec:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801ecf0:	4618      	mov	r0, r3
 801ecf2:	f000 fdbf 	bl	801f874 <delay_us>
					G1T_OFF();
 801ecf6:	2201      	movs	r2, #1
 801ecf8:	2120      	movs	r1, #32
 801ecfa:	4807      	ldr	r0, [pc, #28]	; (801ed18 <TIM5_Callback+0xe0>)
 801ecfc:	f7f5 f84c 	bl	8013d98 <HAL_GPIO_WritePin>
				}

			}
			SM_ApplParam.Appl_u32_TriggersCountForG1++;
 801ed00:	4b04      	ldr	r3, [pc, #16]	; (801ed14 <TIM5_Callback+0xdc>)
 801ed02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ed04:	3301      	adds	r3, #1
 801ed06:	4a03      	ldr	r2, [pc, #12]	; (801ed14 <TIM5_Callback+0xdc>)
 801ed08:	6513      	str	r3, [r2, #80]	; 0x50
		}
	}
}
 801ed0a:	bf00      	nop
 801ed0c:	bd80      	pop	{r7, pc}
 801ed0e:	bf00      	nop
 801ed10:	200002b0 	.word	0x200002b0
 801ed14:	20005034 	.word	0x20005034
 801ed18:	40020400 	.word	0x40020400

0801ed1c <TIM6_Callback>:

void TIM6_Callback(void){
 801ed1c:	b580      	push	{r7, lr}
 801ed1e:	af00      	add	r7, sp, #0
	/*Vishwesh:
	 * Here my strategy is, TIM6_Callback() is called only when Gate2 Trigger is scheduled.
	 * Its just a meeter of time a trigger pulse is served
	 */
	if (__HAL_TIM_GET_FLAG(phtim6, TIM_FLAG_UPDATE) != RESET)
 801ed20:	4b36      	ldr	r3, [pc, #216]	; (801edfc <TIM6_Callback+0xe0>)
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	691b      	ldr	r3, [r3, #16]
 801ed28:	f003 0301 	and.w	r3, r3, #1
 801ed2c:	2b01      	cmp	r3, #1
 801ed2e:	d163      	bne.n	801edf8 <TIM6_Callback+0xdc>
	{
		if (__HAL_TIM_GET_IT_SOURCE(phtim6, TIM_IT_UPDATE) != RESET)
 801ed30:	4b32      	ldr	r3, [pc, #200]	; (801edfc <TIM6_Callback+0xe0>)
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	68db      	ldr	r3, [r3, #12]
 801ed38:	f003 0301 	and.w	r3, r3, #1
 801ed3c:	2b01      	cmp	r3, #1
 801ed3e:	d15b      	bne.n	801edf8 <TIM6_Callback+0xdc>
		{
			__HAL_TIM_CLEAR_IT(phtim6, TIM_IT_UPDATE);
 801ed40:	4b2e      	ldr	r3, [pc, #184]	; (801edfc <TIM6_Callback+0xe0>)
 801ed42:	681b      	ldr	r3, [r3, #0]
 801ed44:	681b      	ldr	r3, [r3, #0]
 801ed46:	f06f 0201 	mvn.w	r2, #1
 801ed4a:	611a      	str	r2, [r3, #16]
			__HAL_TIM_DISABLE_IT(phtim6,TIM_IT_UPDATE);
 801ed4c:	4b2b      	ldr	r3, [pc, #172]	; (801edfc <TIM6_Callback+0xe0>)
 801ed4e:	681b      	ldr	r3, [r3, #0]
 801ed50:	681b      	ldr	r3, [r3, #0]
 801ed52:	68da      	ldr	r2, [r3, #12]
 801ed54:	4b29      	ldr	r3, [pc, #164]	; (801edfc <TIM6_Callback+0xe0>)
 801ed56:	681b      	ldr	r3, [r3, #0]
 801ed58:	681b      	ldr	r3, [r3, #0]
 801ed5a:	f022 0201 	bic.w	r2, r2, #1
 801ed5e:	60da      	str	r2, [r3, #12]
			__HAL_TIM_DISABLE(phtim6);
 801ed60:	4b26      	ldr	r3, [pc, #152]	; (801edfc <TIM6_Callback+0xe0>)
 801ed62:	681b      	ldr	r3, [r3, #0]
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	6a1a      	ldr	r2, [r3, #32]
 801ed68:	f241 1311 	movw	r3, #4369	; 0x1111
 801ed6c:	4013      	ands	r3, r2
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d112      	bne.n	801ed98 <TIM6_Callback+0x7c>
 801ed72:	4b22      	ldr	r3, [pc, #136]	; (801edfc <TIM6_Callback+0xe0>)
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	681b      	ldr	r3, [r3, #0]
 801ed78:	6a1a      	ldr	r2, [r3, #32]
 801ed7a:	f240 4344 	movw	r3, #1092	; 0x444
 801ed7e:	4013      	ands	r3, r2
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	d109      	bne.n	801ed98 <TIM6_Callback+0x7c>
 801ed84:	4b1d      	ldr	r3, [pc, #116]	; (801edfc <TIM6_Callback+0xe0>)
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	681b      	ldr	r3, [r3, #0]
 801ed8a:	681a      	ldr	r2, [r3, #0]
 801ed8c:	4b1b      	ldr	r3, [pc, #108]	; (801edfc <TIM6_Callback+0xe0>)
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	681b      	ldr	r3, [r3, #0]
 801ed92:	f022 0201 	bic.w	r2, r2, #1
 801ed96:	601a      	str	r2, [r3, #0]
			if(SM_ApplParam.u8ApplSCRTrggerOffG2 == 0){
 801ed98:	4b19      	ldr	r3, [pc, #100]	; (801ee00 <TIM6_Callback+0xe4>)
 801ed9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801ed9e:	2b00      	cmp	r3, #0
 801eda0:	d125      	bne.n	801edee <TIM6_Callback+0xd2>
				SM_ApplParam.u8SkipT2++;
 801eda2:	4b17      	ldr	r3, [pc, #92]	; (801ee00 <TIM6_Callback+0xe4>)
 801eda4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801eda8:	3301      	adds	r3, #1
 801edaa:	b2da      	uxtb	r2, r3
 801edac:	4b14      	ldr	r3, [pc, #80]	; (801ee00 <TIM6_Callback+0xe4>)
 801edae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				if(SM_ApplParam.u8SkipT2 > 100){
 801edb2:	4b13      	ldr	r3, [pc, #76]	; (801ee00 <TIM6_Callback+0xe4>)
 801edb4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801edb8:	2b64      	cmp	r3, #100	; 0x64
 801edba:	d918      	bls.n	801edee <TIM6_Callback+0xd2>
					SM_ApplParam.u8SkipT2 = 110;
 801edbc:	4b10      	ldr	r3, [pc, #64]	; (801ee00 <TIM6_Callback+0xe4>)
 801edbe:	226e      	movs	r2, #110	; 0x6e
 801edc0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
					G2T_ON();
 801edc4:	2200      	movs	r2, #0
 801edc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801edca:	480e      	ldr	r0, [pc, #56]	; (801ee04 <TIM6_Callback+0xe8>)
 801edcc:	f7f4 ffe4 	bl	8013d98 <HAL_GPIO_WritePin>
					delay_us(SM_ApplParam.Appl_u16PulseSCRWidth_us);
 801edd0:	4b0b      	ldr	r3, [pc, #44]	; (801ee00 <TIM6_Callback+0xe4>)
 801edd2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801edd6:	4618      	mov	r0, r3
 801edd8:	f000 fd4c 	bl	801f874 <delay_us>
					G2T_OFF();
 801eddc:	2201      	movs	r2, #1
 801edde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801ede2:	4808      	ldr	r0, [pc, #32]	; (801ee04 <TIM6_Callback+0xe8>)
 801ede4:	f7f4 ffd8 	bl	8013d98 <HAL_GPIO_WritePin>
					delay_us(100);
 801ede8:	2064      	movs	r0, #100	; 0x64
 801edea:	f000 fd43 	bl	801f874 <delay_us>
				}
			}

			SM_ApplParam.Appl_u32_TriggersCountForG2++;
 801edee:	4b04      	ldr	r3, [pc, #16]	; (801ee00 <TIM6_Callback+0xe4>)
 801edf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801edf2:	3301      	adds	r3, #1
 801edf4:	4a02      	ldr	r2, [pc, #8]	; (801ee00 <TIM6_Callback+0xe4>)
 801edf6:	6553      	str	r3, [r2, #84]	; 0x54
		}
	}

}
 801edf8:	bf00      	nop
 801edfa:	bd80      	pop	{r7, pc}
 801edfc:	200002b4 	.word	0x200002b4
 801ee00:	20005034 	.word	0x20005034
 801ee04:	40020000 	.word	0x40020000

0801ee08 <TIM7_Callback>:

void TIM7_Callback(void){
 801ee08:	b580      	push	{r7, lr}
 801ee0a:	af00      	add	r7, sp, #0

	/*Vishwesh:
	 * Here my strategy is, TIM6_Callback() is called only when Gate2 Trigger is scheduled.
	 * Its just a meeter of time a trigger pulse is served
	 */
	if (__HAL_TIM_GET_FLAG(phtim7, TIM_FLAG_UPDATE) != RESET)
 801ee0c:	4b36      	ldr	r3, [pc, #216]	; (801eee8 <TIM7_Callback+0xe0>)
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	691b      	ldr	r3, [r3, #16]
 801ee14:	f003 0301 	and.w	r3, r3, #1
 801ee18:	2b01      	cmp	r3, #1
 801ee1a:	d163      	bne.n	801eee4 <TIM7_Callback+0xdc>
	{
		if (__HAL_TIM_GET_IT_SOURCE(phtim7, TIM_IT_UPDATE) != RESET)
 801ee1c:	4b32      	ldr	r3, [pc, #200]	; (801eee8 <TIM7_Callback+0xe0>)
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	681b      	ldr	r3, [r3, #0]
 801ee22:	68db      	ldr	r3, [r3, #12]
 801ee24:	f003 0301 	and.w	r3, r3, #1
 801ee28:	2b01      	cmp	r3, #1
 801ee2a:	d15b      	bne.n	801eee4 <TIM7_Callback+0xdc>
		{
			__HAL_TIM_CLEAR_IT(phtim7, TIM_IT_UPDATE);
 801ee2c:	4b2e      	ldr	r3, [pc, #184]	; (801eee8 <TIM7_Callback+0xe0>)
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	f06f 0201 	mvn.w	r2, #1
 801ee36:	611a      	str	r2, [r3, #16]
			__HAL_TIM_DISABLE_IT(phtim7,TIM_IT_UPDATE);
 801ee38:	4b2b      	ldr	r3, [pc, #172]	; (801eee8 <TIM7_Callback+0xe0>)
 801ee3a:	681b      	ldr	r3, [r3, #0]
 801ee3c:	681b      	ldr	r3, [r3, #0]
 801ee3e:	68da      	ldr	r2, [r3, #12]
 801ee40:	4b29      	ldr	r3, [pc, #164]	; (801eee8 <TIM7_Callback+0xe0>)
 801ee42:	681b      	ldr	r3, [r3, #0]
 801ee44:	681b      	ldr	r3, [r3, #0]
 801ee46:	f022 0201 	bic.w	r2, r2, #1
 801ee4a:	60da      	str	r2, [r3, #12]
			__HAL_TIM_DISABLE(phtim7);
 801ee4c:	4b26      	ldr	r3, [pc, #152]	; (801eee8 <TIM7_Callback+0xe0>)
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	6a1a      	ldr	r2, [r3, #32]
 801ee54:	f241 1311 	movw	r3, #4369	; 0x1111
 801ee58:	4013      	ands	r3, r2
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	d112      	bne.n	801ee84 <TIM7_Callback+0x7c>
 801ee5e:	4b22      	ldr	r3, [pc, #136]	; (801eee8 <TIM7_Callback+0xe0>)
 801ee60:	681b      	ldr	r3, [r3, #0]
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	6a1a      	ldr	r2, [r3, #32]
 801ee66:	f240 4344 	movw	r3, #1092	; 0x444
 801ee6a:	4013      	ands	r3, r2
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	d109      	bne.n	801ee84 <TIM7_Callback+0x7c>
 801ee70:	4b1d      	ldr	r3, [pc, #116]	; (801eee8 <TIM7_Callback+0xe0>)
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	681a      	ldr	r2, [r3, #0]
 801ee78:	4b1b      	ldr	r3, [pc, #108]	; (801eee8 <TIM7_Callback+0xe0>)
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	f022 0201 	bic.w	r2, r2, #1
 801ee82:	601a      	str	r2, [r3, #0]
			if(SM_ApplParam.u8ApplSCRTrggerOffG3 == 0){
 801ee84:	4b19      	ldr	r3, [pc, #100]	; (801eeec <TIM7_Callback+0xe4>)
 801ee86:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 801ee8a:	2b00      	cmp	r3, #0
 801ee8c:	d125      	bne.n	801eeda <TIM7_Callback+0xd2>
				SM_ApplParam.u8SkipT3++;
 801ee8e:	4b17      	ldr	r3, [pc, #92]	; (801eeec <TIM7_Callback+0xe4>)
 801ee90:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 801ee94:	3301      	adds	r3, #1
 801ee96:	b2da      	uxtb	r2, r3
 801ee98:	4b14      	ldr	r3, [pc, #80]	; (801eeec <TIM7_Callback+0xe4>)
 801ee9a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
				if(SM_ApplParam.u8SkipT3 > 50){
 801ee9e:	4b13      	ldr	r3, [pc, #76]	; (801eeec <TIM7_Callback+0xe4>)
 801eea0:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 801eea4:	2b32      	cmp	r3, #50	; 0x32
 801eea6:	d918      	bls.n	801eeda <TIM7_Callback+0xd2>
					SM_ApplParam.u8SkipT3 = 60;
 801eea8:	4b10      	ldr	r3, [pc, #64]	; (801eeec <TIM7_Callback+0xe4>)
 801eeaa:	223c      	movs	r2, #60	; 0x3c
 801eeac:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
					G3T_ON();
 801eeb0:	2200      	movs	r2, #0
 801eeb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801eeb6:	480e      	ldr	r0, [pc, #56]	; (801eef0 <TIM7_Callback+0xe8>)
 801eeb8:	f7f4 ff6e 	bl	8013d98 <HAL_GPIO_WritePin>
					delay_us(SM_ApplParam.Appl_u16PulseSCRWidth_us);
 801eebc:	4b0b      	ldr	r3, [pc, #44]	; (801eeec <TIM7_Callback+0xe4>)
 801eebe:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801eec2:	4618      	mov	r0, r3
 801eec4:	f000 fcd6 	bl	801f874 <delay_us>
					G3T_OFF();
 801eec8:	2201      	movs	r2, #1
 801eeca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801eece:	4808      	ldr	r0, [pc, #32]	; (801eef0 <TIM7_Callback+0xe8>)
 801eed0:	f7f4 ff62 	bl	8013d98 <HAL_GPIO_WritePin>
					delay_us(100);
 801eed4:	2064      	movs	r0, #100	; 0x64
 801eed6:	f000 fccd 	bl	801f874 <delay_us>
				}
			}
			SM_ApplParam.Appl_u32_TriggersCountForG3++;
 801eeda:	4b04      	ldr	r3, [pc, #16]	; (801eeec <TIM7_Callback+0xe4>)
 801eedc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801eede:	3301      	adds	r3, #1
 801eee0:	4a02      	ldr	r2, [pc, #8]	; (801eeec <TIM7_Callback+0xe4>)
 801eee2:	6593      	str	r3, [r2, #88]	; 0x58
		}
	}

}
 801eee4:	bf00      	nop
 801eee6:	bd80      	pop	{r7, pc}
 801eee8:	200002b8 	.word	0x200002b8
 801eeec:	20005034 	.word	0x20005034
 801eef0:	40020000 	.word	0x40020000

0801eef4 <Appl_AdcPhaseAngleDetermination>:

volatile float Fnclocal_fltTargetVoltage, Fnclocal_fltTargetCurrent;
void Appl_AdcPhaseAngleDetermination(void){
 801eef4:	b5b0      	push	{r4, r5, r7, lr}
 801eef6:	af00      	add	r7, sp, #0

	if(SM_enumECUState == SM_enum_ECU_CCRun_Slow){
 801eef8:	4ba8      	ldr	r3, [pc, #672]	; (801f19c <Appl_AdcPhaseAngleDetermination+0x2a8>)
 801eefa:	781b      	ldrb	r3, [r3, #0]
 801eefc:	b2db      	uxtb	r3, r3
 801eefe:	2b0d      	cmp	r3, #13
 801ef00:	d172      	bne.n	801efe8 <Appl_AdcPhaseAngleDetermination+0xf4>
		if((((float)Appl_EEPParam.stm32.EEP_CC_SetCurrent - SM_ApplParam.RealtimeCurrent) < 1.5) && \
 801ef02:	4ba7      	ldr	r3, [pc, #668]	; (801f1a0 <Appl_AdcPhaseAngleDetermination+0x2ac>)
 801ef04:	791b      	ldrb	r3, [r3, #4]
 801ef06:	ee07 3a90 	vmov	s15, r3
 801ef0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ef0e:	4ba5      	ldr	r3, [pc, #660]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801ef10:	edd3 7a03 	vldr	s15, [r3, #12]
 801ef14:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ef18:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801ef1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ef20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef24:	d514      	bpl.n	801ef50 <Appl_AdcPhaseAngleDetermination+0x5c>
				(((float)Appl_EEPParam.stm32.EEP_CC_SetCurrent - SM_ApplParam.RealtimeCurrent) > (-1.5)))
 801ef26:	4b9e      	ldr	r3, [pc, #632]	; (801f1a0 <Appl_AdcPhaseAngleDetermination+0x2ac>)
 801ef28:	791b      	ldrb	r3, [r3, #4]
 801ef2a:	ee07 3a90 	vmov	s15, r3
 801ef2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ef32:	4b9c      	ldr	r3, [pc, #624]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801ef34:	edd3 7a03 	vldr	s15, [r3, #12]
 801ef38:	ee77 7a67 	vsub.f32	s15, s14, s15
		if((((float)Appl_EEPParam.stm32.EEP_CC_SetCurrent - SM_ApplParam.RealtimeCurrent) < 1.5) && \
 801ef3c:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 801ef40:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ef44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef48:	dd02      	ble.n	801ef50 <Appl_AdcPhaseAngleDetermination+0x5c>
			SM_enumECUState = SM_enum_ECU_CCRun_Stable;
 801ef4a:	4b94      	ldr	r3, [pc, #592]	; (801f19c <Appl_AdcPhaseAngleDetermination+0x2a8>)
 801ef4c:	220e      	movs	r2, #14
 801ef4e:	701a      	strb	r2, [r3, #0]

		/*Vishwesh:
		 * overvoltage protection in current loop, suppose someone shorts clamps while charging,
		 * capacitor needs to be protected.
		 */
		if(SM_ApplParam.RealtimeCurrent > (Appl_EEPParam.stm32.EEP_CC_SetCurrent+15)){
 801ef50:	4b94      	ldr	r3, [pc, #592]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801ef52:	ed93 7a03 	vldr	s14, [r3, #12]
 801ef56:	4b92      	ldr	r3, [pc, #584]	; (801f1a0 <Appl_AdcPhaseAngleDetermination+0x2ac>)
 801ef58:	791b      	ldrb	r3, [r3, #4]
 801ef5a:	330f      	adds	r3, #15
 801ef5c:	ee07 3a90 	vmov	s15, r3
 801ef60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ef68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef6c:	dd0a      	ble.n	801ef84 <Appl_AdcPhaseAngleDetermination+0x90>
			output = 0;
 801ef6e:	4b8e      	ldr	r3, [pc, #568]	; (801f1a8 <Appl_AdcPhaseAngleDetermination+0x2b4>)
 801ef70:	f04f 0200 	mov.w	r2, #0
 801ef74:	601a      	str	r2, [r3, #0]
			Appl_dblPhaseSetValue_degree = 0;
 801ef76:	498d      	ldr	r1, [pc, #564]	; (801f1ac <Appl_AdcPhaseAngleDetermination+0x2b8>)
 801ef78:	f04f 0200 	mov.w	r2, #0
 801ef7c:	f04f 0300 	mov.w	r3, #0
 801ef80:	e9c1 2300 	strd	r2, r3, [r1]
		}

		Appl_fltPhasePowerDelivery = PID_CCMode_CVRun(SM_ApplParam.ap_fltCCFastGain);
 801ef84:	4b87      	ldr	r3, [pc, #540]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801ef86:	edd3 7a07 	vldr	s15, [r3, #28]
 801ef8a:	eeb0 0a67 	vmov.f32	s0, s15
 801ef8e:	f000 fc13 	bl	801f7b8 <PID_CCMode_CVRun>
 801ef92:	eef0 7a40 	vmov.f32	s15, s0
 801ef96:	4b86      	ldr	r3, [pc, #536]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801ef98:	edc3 7a00 	vstr	s15, [r3]
		if(Appl_fltPhasePowerDelivery == 0){
 801ef9c:	4b84      	ldr	r3, [pc, #528]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801ef9e:	edd3 7a00 	vldr	s15, [r3]
 801efa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 801efa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efaa:	d10b      	bne.n	801efc4 <Appl_AdcPhaseAngleDetermination+0xd0>
			Appl_fltPhasePowerDelivery = PID_Current(SM_ApplParam.ap_fltCCSlowGain);
 801efac:	4b7d      	ldr	r3, [pc, #500]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801efae:	edd3 7a06 	vldr	s15, [r3, #24]
 801efb2:	eeb0 0a67 	vmov.f32	s0, s15
 801efb6:	f000 fa2d 	bl	801f414 <PID_Current>
 801efba:	eef0 7a40 	vmov.f32	s15, s0
 801efbe:	4b7c      	ldr	r3, [pc, #496]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801efc0:	edc3 7a00 	vstr	s15, [r3]
		}
		Appl_dblPhaseSetValue_degree = SCR_ANGLE_TRIGGER_MAX - Appl_fltPhasePowerDelivery;
 801efc4:	4b7a      	ldr	r3, [pc, #488]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801efc6:	681b      	ldr	r3, [r3, #0]
 801efc8:	4618      	mov	r0, r3
 801efca:	f7f1 f9f5 	bl	80103b8 <__aeabi_f2d>
 801efce:	4602      	mov	r2, r0
 801efd0:	460b      	mov	r3, r1
 801efd2:	f04f 0000 	mov.w	r0, #0
 801efd6:	4977      	ldr	r1, [pc, #476]	; (801f1b4 <Appl_AdcPhaseAngleDetermination+0x2c0>)
 801efd8:	f7f1 f88e 	bl	80100f8 <__aeabi_dsub>
 801efdc:	4602      	mov	r2, r0
 801efde:	460b      	mov	r3, r1
 801efe0:	4972      	ldr	r1, [pc, #456]	; (801f1ac <Appl_AdcPhaseAngleDetermination+0x2b8>)
 801efe2:	e9c1 2300 	strd	r2, r3, [r1]
		Appl_dblPhaseSetValue_degree = 0;
		SM_ApplParam.u8SkipT1 = 0;
		SM_ApplParam.u8SkipT2 = 0;
		SM_ApplParam.u8SkipT3 = 0;
	}
}
 801efe6:	e202      	b.n	801f3ee <Appl_AdcPhaseAngleDetermination+0x4fa>
	else if(SM_enumECUState == SM_enum_ECU_CCRun_Stable){
 801efe8:	4b6c      	ldr	r3, [pc, #432]	; (801f19c <Appl_AdcPhaseAngleDetermination+0x2a8>)
 801efea:	781b      	ldrb	r3, [r3, #0]
 801efec:	b2db      	uxtb	r3, r3
 801efee:	2b0e      	cmp	r3, #14
 801eff0:	d14b      	bne.n	801f08a <Appl_AdcPhaseAngleDetermination+0x196>
		if(SM_ApplParam.RealtimeCurrent > (Appl_EEPParam.stm32.EEP_CC_SetCurrent+15)){
 801eff2:	4b6c      	ldr	r3, [pc, #432]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801eff4:	ed93 7a03 	vldr	s14, [r3, #12]
 801eff8:	4b69      	ldr	r3, [pc, #420]	; (801f1a0 <Appl_AdcPhaseAngleDetermination+0x2ac>)
 801effa:	791b      	ldrb	r3, [r3, #4]
 801effc:	330f      	adds	r3, #15
 801effe:	ee07 3a90 	vmov	s15, r3
 801f002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f00e:	dd0a      	ble.n	801f026 <Appl_AdcPhaseAngleDetermination+0x132>
			output = 0;
 801f010:	4b65      	ldr	r3, [pc, #404]	; (801f1a8 <Appl_AdcPhaseAngleDetermination+0x2b4>)
 801f012:	f04f 0200 	mov.w	r2, #0
 801f016:	601a      	str	r2, [r3, #0]
			Appl_dblPhaseSetValue_degree = 0;
 801f018:	4964      	ldr	r1, [pc, #400]	; (801f1ac <Appl_AdcPhaseAngleDetermination+0x2b8>)
 801f01a:	f04f 0200 	mov.w	r2, #0
 801f01e:	f04f 0300 	mov.w	r3, #0
 801f022:	e9c1 2300 	strd	r2, r3, [r1]
		Appl_fltPhasePowerDelivery = PID_CCMode_CVRun(SM_ApplParam.ap_fltCCFastGain);
 801f026:	4b5f      	ldr	r3, [pc, #380]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801f028:	edd3 7a07 	vldr	s15, [r3, #28]
 801f02c:	eeb0 0a67 	vmov.f32	s0, s15
 801f030:	f000 fbc2 	bl	801f7b8 <PID_CCMode_CVRun>
 801f034:	eef0 7a40 	vmov.f32	s15, s0
 801f038:	4b5d      	ldr	r3, [pc, #372]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801f03a:	edc3 7a00 	vstr	s15, [r3]
		if(Appl_fltPhasePowerDelivery == 0){
 801f03e:	4b5c      	ldr	r3, [pc, #368]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801f040:	edd3 7a00 	vldr	s15, [r3]
 801f044:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f04c:	d10b      	bne.n	801f066 <Appl_AdcPhaseAngleDetermination+0x172>
			Appl_fltPhasePowerDelivery = PID_Current(SM_ApplParam.ap_fltCCFastGain);
 801f04e:	4b55      	ldr	r3, [pc, #340]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801f050:	edd3 7a07 	vldr	s15, [r3, #28]
 801f054:	eeb0 0a67 	vmov.f32	s0, s15
 801f058:	f000 f9dc 	bl	801f414 <PID_Current>
 801f05c:	eef0 7a40 	vmov.f32	s15, s0
 801f060:	4b53      	ldr	r3, [pc, #332]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801f062:	edc3 7a00 	vstr	s15, [r3]
		Appl_dblPhaseSetValue_degree = SCR_ANGLE_TRIGGER_MAX - Appl_fltPhasePowerDelivery;
 801f066:	4b52      	ldr	r3, [pc, #328]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	4618      	mov	r0, r3
 801f06c:	f7f1 f9a4 	bl	80103b8 <__aeabi_f2d>
 801f070:	4602      	mov	r2, r0
 801f072:	460b      	mov	r3, r1
 801f074:	f04f 0000 	mov.w	r0, #0
 801f078:	494e      	ldr	r1, [pc, #312]	; (801f1b4 <Appl_AdcPhaseAngleDetermination+0x2c0>)
 801f07a:	f7f1 f83d 	bl	80100f8 <__aeabi_dsub>
 801f07e:	4602      	mov	r2, r0
 801f080:	460b      	mov	r3, r1
 801f082:	494a      	ldr	r1, [pc, #296]	; (801f1ac <Appl_AdcPhaseAngleDetermination+0x2b8>)
 801f084:	e9c1 2300 	strd	r2, r3, [r1]
}
 801f088:	e1b1      	b.n	801f3ee <Appl_AdcPhaseAngleDetermination+0x4fa>
	else if(SM_enumECUState == SM_enum_ECU_CVRun_Slow){
 801f08a:	4b44      	ldr	r3, [pc, #272]	; (801f19c <Appl_AdcPhaseAngleDetermination+0x2a8>)
 801f08c:	781b      	ldrb	r3, [r3, #0]
 801f08e:	b2db      	uxtb	r3, r3
 801f090:	2b0f      	cmp	r3, #15
 801f092:	f040 8093 	bne.w	801f1bc <Appl_AdcPhaseAngleDetermination+0x2c8>
		if((((float)Appl_EEPParam.stm32.EEP_CV_SetVoltage - SM_ApplParam.RealtimeVoltage) < 1.5) && \
 801f096:	4b42      	ldr	r3, [pc, #264]	; (801f1a0 <Appl_AdcPhaseAngleDetermination+0x2ac>)
 801f098:	795b      	ldrb	r3, [r3, #5]
 801f09a:	ee07 3a90 	vmov	s15, r3
 801f09e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f0a2:	4b40      	ldr	r3, [pc, #256]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801f0a4:	edd3 7a02 	vldr	s15, [r3, #8]
 801f0a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f0ac:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801f0b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0b8:	d514      	bpl.n	801f0e4 <Appl_AdcPhaseAngleDetermination+0x1f0>
				(((float)Appl_EEPParam.stm32.EEP_CV_SetVoltage - SM_ApplParam.RealtimeVoltage) > (-1.5)))
 801f0ba:	4b39      	ldr	r3, [pc, #228]	; (801f1a0 <Appl_AdcPhaseAngleDetermination+0x2ac>)
 801f0bc:	795b      	ldrb	r3, [r3, #5]
 801f0be:	ee07 3a90 	vmov	s15, r3
 801f0c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f0c6:	4b37      	ldr	r3, [pc, #220]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801f0c8:	edd3 7a02 	vldr	s15, [r3, #8]
 801f0cc:	ee77 7a67 	vsub.f32	s15, s14, s15
		if((((float)Appl_EEPParam.stm32.EEP_CV_SetVoltage - SM_ApplParam.RealtimeVoltage) < 1.5) && \
 801f0d0:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 801f0d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0dc:	dd02      	ble.n	801f0e4 <Appl_AdcPhaseAngleDetermination+0x1f0>
			SM_enumECUState = SM_enum_ECU_CVRun_Stable;
 801f0de:	4b2f      	ldr	r3, [pc, #188]	; (801f19c <Appl_AdcPhaseAngleDetermination+0x2a8>)
 801f0e0:	2210      	movs	r2, #16
 801f0e2:	701a      	strb	r2, [r3, #0]
		if(SM_ApplParam.RealtimeVoltage > ((float)Appl_EEPParam.stm32.EEP_CV_SetVoltage+10.0)){
 801f0e4:	4b2f      	ldr	r3, [pc, #188]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801f0e6:	689b      	ldr	r3, [r3, #8]
 801f0e8:	4618      	mov	r0, r3
 801f0ea:	f7f1 f965 	bl	80103b8 <__aeabi_f2d>
 801f0ee:	4604      	mov	r4, r0
 801f0f0:	460d      	mov	r5, r1
 801f0f2:	4b2b      	ldr	r3, [pc, #172]	; (801f1a0 <Appl_AdcPhaseAngleDetermination+0x2ac>)
 801f0f4:	795b      	ldrb	r3, [r3, #5]
 801f0f6:	ee07 3a90 	vmov	s15, r3
 801f0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0fe:	ee17 0a90 	vmov	r0, s15
 801f102:	f7f1 f959 	bl	80103b8 <__aeabi_f2d>
 801f106:	f04f 0200 	mov.w	r2, #0
 801f10a:	4b2b      	ldr	r3, [pc, #172]	; (801f1b8 <Appl_AdcPhaseAngleDetermination+0x2c4>)
 801f10c:	f7f0 fff6 	bl	80100fc <__adddf3>
 801f110:	4602      	mov	r2, r0
 801f112:	460b      	mov	r3, r1
 801f114:	4620      	mov	r0, r4
 801f116:	4629      	mov	r1, r5
 801f118:	f7f1 fc36 	bl	8010988 <__aeabi_dcmpgt>
 801f11c:	4603      	mov	r3, r0
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d00a      	beq.n	801f138 <Appl_AdcPhaseAngleDetermination+0x244>
			output = 0;
 801f122:	4b21      	ldr	r3, [pc, #132]	; (801f1a8 <Appl_AdcPhaseAngleDetermination+0x2b4>)
 801f124:	f04f 0200 	mov.w	r2, #0
 801f128:	601a      	str	r2, [r3, #0]
			Appl_dblPhaseSetValue_degree = 0;
 801f12a:	4920      	ldr	r1, [pc, #128]	; (801f1ac <Appl_AdcPhaseAngleDetermination+0x2b8>)
 801f12c:	f04f 0200 	mov.w	r2, #0
 801f130:	f04f 0300 	mov.w	r3, #0
 801f134:	e9c1 2300 	strd	r2, r3, [r1]
		Appl_fltPhasePowerDelivery = PID_CVMode_CCRun(SM_ApplParam.ap_fltCVFastGain);
 801f138:	4b1a      	ldr	r3, [pc, #104]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801f13a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801f13e:	eeb0 0a67 	vmov.f32	s0, s15
 801f142:	f000 fadb 	bl	801f6fc <PID_CVMode_CCRun>
 801f146:	eef0 7a40 	vmov.f32	s15, s0
 801f14a:	4b19      	ldr	r3, [pc, #100]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801f14c:	edc3 7a00 	vstr	s15, [r3]
		if(Appl_fltPhasePowerDelivery == 0){
 801f150:	4b17      	ldr	r3, [pc, #92]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801f152:	edd3 7a00 	vldr	s15, [r3]
 801f156:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f15e:	d10b      	bne.n	801f178 <Appl_AdcPhaseAngleDetermination+0x284>
			Appl_fltPhasePowerDelivery = PID_Voltage(SM_ApplParam.ap_fltCVSlowGain);
 801f160:	4b10      	ldr	r3, [pc, #64]	; (801f1a4 <Appl_AdcPhaseAngleDetermination+0x2b0>)
 801f162:	edd3 7a08 	vldr	s15, [r3, #32]
 801f166:	eeb0 0a67 	vmov.f32	s0, s15
 801f16a:	f000 f9a5 	bl	801f4b8 <PID_Voltage>
 801f16e:	eef0 7a40 	vmov.f32	s15, s0
 801f172:	4b0f      	ldr	r3, [pc, #60]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801f174:	edc3 7a00 	vstr	s15, [r3]
		Appl_dblPhaseSetValue_degree = SCR_ANGLE_TRIGGER_MAX - Appl_fltPhasePowerDelivery;
 801f178:	4b0d      	ldr	r3, [pc, #52]	; (801f1b0 <Appl_AdcPhaseAngleDetermination+0x2bc>)
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	4618      	mov	r0, r3
 801f17e:	f7f1 f91b 	bl	80103b8 <__aeabi_f2d>
 801f182:	4602      	mov	r2, r0
 801f184:	460b      	mov	r3, r1
 801f186:	f04f 0000 	mov.w	r0, #0
 801f18a:	490a      	ldr	r1, [pc, #40]	; (801f1b4 <Appl_AdcPhaseAngleDetermination+0x2c0>)
 801f18c:	f7f0 ffb4 	bl	80100f8 <__aeabi_dsub>
 801f190:	4602      	mov	r2, r0
 801f192:	460b      	mov	r3, r1
 801f194:	4905      	ldr	r1, [pc, #20]	; (801f1ac <Appl_AdcPhaseAngleDetermination+0x2b8>)
 801f196:	e9c1 2300 	strd	r2, r3, [r1]
}
 801f19a:	e128      	b.n	801f3ee <Appl_AdcPhaseAngleDetermination+0x4fa>
 801f19c:	20005114 	.word	0x20005114
 801f1a0:	20000278 	.word	0x20000278
 801f1a4:	20005034 	.word	0x20005034
 801f1a8:	2000502c 	.word	0x2000502c
 801f1ac:	20000920 	.word	0x20000920
 801f1b0:	2000501c 	.word	0x2000501c
 801f1b4:	40690000 	.word	0x40690000
 801f1b8:	40240000 	.word	0x40240000
	else if(SM_enumECUState == SM_enum_ECU_CVRun_Stable){
 801f1bc:	4b8d      	ldr	r3, [pc, #564]	; (801f3f4 <Appl_AdcPhaseAngleDetermination+0x500>)
 801f1be:	781b      	ldrb	r3, [r3, #0]
 801f1c0:	b2db      	uxtb	r3, r3
 801f1c2:	2b10      	cmp	r3, #16
 801f1c4:	d15b      	bne.n	801f27e <Appl_AdcPhaseAngleDetermination+0x38a>
		if(SM_ApplParam.RealtimeVoltage > ((float)Appl_EEPParam.stm32.EEP_CV_SetVoltage+10.0)){
 801f1c6:	4b8c      	ldr	r3, [pc, #560]	; (801f3f8 <Appl_AdcPhaseAngleDetermination+0x504>)
 801f1c8:	689b      	ldr	r3, [r3, #8]
 801f1ca:	4618      	mov	r0, r3
 801f1cc:	f7f1 f8f4 	bl	80103b8 <__aeabi_f2d>
 801f1d0:	4604      	mov	r4, r0
 801f1d2:	460d      	mov	r5, r1
 801f1d4:	4b89      	ldr	r3, [pc, #548]	; (801f3fc <Appl_AdcPhaseAngleDetermination+0x508>)
 801f1d6:	795b      	ldrb	r3, [r3, #5]
 801f1d8:	ee07 3a90 	vmov	s15, r3
 801f1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f1e0:	ee17 0a90 	vmov	r0, s15
 801f1e4:	f7f1 f8e8 	bl	80103b8 <__aeabi_f2d>
 801f1e8:	f04f 0200 	mov.w	r2, #0
 801f1ec:	4b84      	ldr	r3, [pc, #528]	; (801f400 <Appl_AdcPhaseAngleDetermination+0x50c>)
 801f1ee:	f7f0 ff85 	bl	80100fc <__adddf3>
 801f1f2:	4602      	mov	r2, r0
 801f1f4:	460b      	mov	r3, r1
 801f1f6:	4620      	mov	r0, r4
 801f1f8:	4629      	mov	r1, r5
 801f1fa:	f7f1 fbc5 	bl	8010988 <__aeabi_dcmpgt>
 801f1fe:	4603      	mov	r3, r0
 801f200:	2b00      	cmp	r3, #0
 801f202:	d00a      	beq.n	801f21a <Appl_AdcPhaseAngleDetermination+0x326>
			output = 0;
 801f204:	4b7f      	ldr	r3, [pc, #508]	; (801f404 <Appl_AdcPhaseAngleDetermination+0x510>)
 801f206:	f04f 0200 	mov.w	r2, #0
 801f20a:	601a      	str	r2, [r3, #0]
			Appl_dblPhaseSetValue_degree = 0;
 801f20c:	497e      	ldr	r1, [pc, #504]	; (801f408 <Appl_AdcPhaseAngleDetermination+0x514>)
 801f20e:	f04f 0200 	mov.w	r2, #0
 801f212:	f04f 0300 	mov.w	r3, #0
 801f216:	e9c1 2300 	strd	r2, r3, [r1]
		Appl_fltPhasePowerDelivery = PID_CVMode_CCRun(SM_ApplParam.ap_fltCVSlowGain);
 801f21a:	4b77      	ldr	r3, [pc, #476]	; (801f3f8 <Appl_AdcPhaseAngleDetermination+0x504>)
 801f21c:	edd3 7a08 	vldr	s15, [r3, #32]
 801f220:	eeb0 0a67 	vmov.f32	s0, s15
 801f224:	f000 fa6a 	bl	801f6fc <PID_CVMode_CCRun>
 801f228:	eef0 7a40 	vmov.f32	s15, s0
 801f22c:	4b77      	ldr	r3, [pc, #476]	; (801f40c <Appl_AdcPhaseAngleDetermination+0x518>)
 801f22e:	edc3 7a00 	vstr	s15, [r3]
		if(Appl_fltPhasePowerDelivery == 0){
 801f232:	4b76      	ldr	r3, [pc, #472]	; (801f40c <Appl_AdcPhaseAngleDetermination+0x518>)
 801f234:	edd3 7a00 	vldr	s15, [r3]
 801f238:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f240:	d10b      	bne.n	801f25a <Appl_AdcPhaseAngleDetermination+0x366>
			Appl_fltPhasePowerDelivery = PID_Voltage(SM_ApplParam.ap_fltCVFastGain);
 801f242:	4b6d      	ldr	r3, [pc, #436]	; (801f3f8 <Appl_AdcPhaseAngleDetermination+0x504>)
 801f244:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801f248:	eeb0 0a67 	vmov.f32	s0, s15
 801f24c:	f000 f934 	bl	801f4b8 <PID_Voltage>
 801f250:	eef0 7a40 	vmov.f32	s15, s0
 801f254:	4b6d      	ldr	r3, [pc, #436]	; (801f40c <Appl_AdcPhaseAngleDetermination+0x518>)
 801f256:	edc3 7a00 	vstr	s15, [r3]
		Appl_dblPhaseSetValue_degree = SCR_ANGLE_TRIGGER_MAX - Appl_fltPhasePowerDelivery;
 801f25a:	4b6c      	ldr	r3, [pc, #432]	; (801f40c <Appl_AdcPhaseAngleDetermination+0x518>)
 801f25c:	681b      	ldr	r3, [r3, #0]
 801f25e:	4618      	mov	r0, r3
 801f260:	f7f1 f8aa 	bl	80103b8 <__aeabi_f2d>
 801f264:	4602      	mov	r2, r0
 801f266:	460b      	mov	r3, r1
 801f268:	f04f 0000 	mov.w	r0, #0
 801f26c:	4968      	ldr	r1, [pc, #416]	; (801f410 <Appl_AdcPhaseAngleDetermination+0x51c>)
 801f26e:	f7f0 ff43 	bl	80100f8 <__aeabi_dsub>
 801f272:	4602      	mov	r2, r0
 801f274:	460b      	mov	r3, r1
 801f276:	4964      	ldr	r1, [pc, #400]	; (801f408 <Appl_AdcPhaseAngleDetermination+0x514>)
 801f278:	e9c1 2300 	strd	r2, r3, [r1]
}
 801f27c:	e0b7      	b.n	801f3ee <Appl_AdcPhaseAngleDetermination+0x4fa>
	else if(SM_enumECUState == SM_enum_ECU_VishwatestMode){
 801f27e:	4b5d      	ldr	r3, [pc, #372]	; (801f3f4 <Appl_AdcPhaseAngleDetermination+0x500>)
 801f280:	781b      	ldrb	r3, [r3, #0]
 801f282:	b2db      	uxtb	r3, r3
 801f284:	2b15      	cmp	r3, #21
 801f286:	f000 80b2 	beq.w	801f3ee <Appl_AdcPhaseAngleDetermination+0x4fa>
	else if(SM_enumECUState == SM_enum_ECU_CVPreparing && SM_ApplParam.ap_PrepareMode == 1){
 801f28a:	4b5a      	ldr	r3, [pc, #360]	; (801f3f4 <Appl_AdcPhaseAngleDetermination+0x500>)
 801f28c:	781b      	ldrb	r3, [r3, #0]
 801f28e:	b2db      	uxtb	r3, r3
 801f290:	2b04      	cmp	r3, #4
 801f292:	d147      	bne.n	801f324 <Appl_AdcPhaseAngleDetermination+0x430>
 801f294:	4b58      	ldr	r3, [pc, #352]	; (801f3f8 <Appl_AdcPhaseAngleDetermination+0x504>)
 801f296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f29a:	2b01      	cmp	r3, #1
 801f29c:	d142      	bne.n	801f324 <Appl_AdcPhaseAngleDetermination+0x430>
		if(SM_ApplParam.RealtimeVoltage > ((float)Appl_EEPParam.stm32.EEP_CV_SetVoltage+10.0)){
 801f29e:	4b56      	ldr	r3, [pc, #344]	; (801f3f8 <Appl_AdcPhaseAngleDetermination+0x504>)
 801f2a0:	689b      	ldr	r3, [r3, #8]
 801f2a2:	4618      	mov	r0, r3
 801f2a4:	f7f1 f888 	bl	80103b8 <__aeabi_f2d>
 801f2a8:	4604      	mov	r4, r0
 801f2aa:	460d      	mov	r5, r1
 801f2ac:	4b53      	ldr	r3, [pc, #332]	; (801f3fc <Appl_AdcPhaseAngleDetermination+0x508>)
 801f2ae:	795b      	ldrb	r3, [r3, #5]
 801f2b0:	ee07 3a90 	vmov	s15, r3
 801f2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f2b8:	ee17 0a90 	vmov	r0, s15
 801f2bc:	f7f1 f87c 	bl	80103b8 <__aeabi_f2d>
 801f2c0:	f04f 0200 	mov.w	r2, #0
 801f2c4:	4b4e      	ldr	r3, [pc, #312]	; (801f400 <Appl_AdcPhaseAngleDetermination+0x50c>)
 801f2c6:	f7f0 ff19 	bl	80100fc <__adddf3>
 801f2ca:	4602      	mov	r2, r0
 801f2cc:	460b      	mov	r3, r1
 801f2ce:	4620      	mov	r0, r4
 801f2d0:	4629      	mov	r1, r5
 801f2d2:	f7f1 fb59 	bl	8010988 <__aeabi_dcmpgt>
 801f2d6:	4603      	mov	r3, r0
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d00a      	beq.n	801f2f2 <Appl_AdcPhaseAngleDetermination+0x3fe>
			output = 0;
 801f2dc:	4b49      	ldr	r3, [pc, #292]	; (801f404 <Appl_AdcPhaseAngleDetermination+0x510>)
 801f2de:	f04f 0200 	mov.w	r2, #0
 801f2e2:	601a      	str	r2, [r3, #0]
			Appl_dblPhaseSetValue_degree = 0;
 801f2e4:	4948      	ldr	r1, [pc, #288]	; (801f408 <Appl_AdcPhaseAngleDetermination+0x514>)
 801f2e6:	f04f 0200 	mov.w	r2, #0
 801f2ea:	f04f 0300 	mov.w	r3, #0
 801f2ee:	e9c1 2300 	strd	r2, r3, [r1]
		Appl_fltPhasePowerDelivery = PID_PrepareVoltage();
 801f2f2:	f000 f935 	bl	801f560 <PID_PrepareVoltage>
 801f2f6:	eef0 7a40 	vmov.f32	s15, s0
 801f2fa:	4b44      	ldr	r3, [pc, #272]	; (801f40c <Appl_AdcPhaseAngleDetermination+0x518>)
 801f2fc:	edc3 7a00 	vstr	s15, [r3]
		Appl_dblPhaseSetValue_degree = SCR_ANGLE_TRIGGER_MAX - Appl_fltPhasePowerDelivery;
 801f300:	4b42      	ldr	r3, [pc, #264]	; (801f40c <Appl_AdcPhaseAngleDetermination+0x518>)
 801f302:	681b      	ldr	r3, [r3, #0]
 801f304:	4618      	mov	r0, r3
 801f306:	f7f1 f857 	bl	80103b8 <__aeabi_f2d>
 801f30a:	4602      	mov	r2, r0
 801f30c:	460b      	mov	r3, r1
 801f30e:	f04f 0000 	mov.w	r0, #0
 801f312:	493f      	ldr	r1, [pc, #252]	; (801f410 <Appl_AdcPhaseAngleDetermination+0x51c>)
 801f314:	f7f0 fef0 	bl	80100f8 <__aeabi_dsub>
 801f318:	4602      	mov	r2, r0
 801f31a:	460b      	mov	r3, r1
 801f31c:	493a      	ldr	r1, [pc, #232]	; (801f408 <Appl_AdcPhaseAngleDetermination+0x514>)
 801f31e:	e9c1 2300 	strd	r2, r3, [r1]
 801f322:	e064      	b.n	801f3ee <Appl_AdcPhaseAngleDetermination+0x4fa>
	else if(SM_enumECUState == SM_enum_ECU_CCPreparing && SM_ApplParam.ap_PrepareMode == 1){
 801f324:	4b33      	ldr	r3, [pc, #204]	; (801f3f4 <Appl_AdcPhaseAngleDetermination+0x500>)
 801f326:	781b      	ldrb	r3, [r3, #0]
 801f328:	b2db      	uxtb	r3, r3
 801f32a:	2b05      	cmp	r3, #5
 801f32c:	d147      	bne.n	801f3be <Appl_AdcPhaseAngleDetermination+0x4ca>
 801f32e:	4b32      	ldr	r3, [pc, #200]	; (801f3f8 <Appl_AdcPhaseAngleDetermination+0x504>)
 801f330:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f334:	2b01      	cmp	r3, #1
 801f336:	d142      	bne.n	801f3be <Appl_AdcPhaseAngleDetermination+0x4ca>
		if(SM_ApplParam.RealtimeVoltage > ((float)Appl_EEPParam.stm32.EEP_CV_SetVoltage+10.0)){
 801f338:	4b2f      	ldr	r3, [pc, #188]	; (801f3f8 <Appl_AdcPhaseAngleDetermination+0x504>)
 801f33a:	689b      	ldr	r3, [r3, #8]
 801f33c:	4618      	mov	r0, r3
 801f33e:	f7f1 f83b 	bl	80103b8 <__aeabi_f2d>
 801f342:	4604      	mov	r4, r0
 801f344:	460d      	mov	r5, r1
 801f346:	4b2d      	ldr	r3, [pc, #180]	; (801f3fc <Appl_AdcPhaseAngleDetermination+0x508>)
 801f348:	795b      	ldrb	r3, [r3, #5]
 801f34a:	ee07 3a90 	vmov	s15, r3
 801f34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f352:	ee17 0a90 	vmov	r0, s15
 801f356:	f7f1 f82f 	bl	80103b8 <__aeabi_f2d>
 801f35a:	f04f 0200 	mov.w	r2, #0
 801f35e:	4b28      	ldr	r3, [pc, #160]	; (801f400 <Appl_AdcPhaseAngleDetermination+0x50c>)
 801f360:	f7f0 fecc 	bl	80100fc <__adddf3>
 801f364:	4602      	mov	r2, r0
 801f366:	460b      	mov	r3, r1
 801f368:	4620      	mov	r0, r4
 801f36a:	4629      	mov	r1, r5
 801f36c:	f7f1 fb0c 	bl	8010988 <__aeabi_dcmpgt>
 801f370:	4603      	mov	r3, r0
 801f372:	2b00      	cmp	r3, #0
 801f374:	d00a      	beq.n	801f38c <Appl_AdcPhaseAngleDetermination+0x498>
			output = 0;
 801f376:	4b23      	ldr	r3, [pc, #140]	; (801f404 <Appl_AdcPhaseAngleDetermination+0x510>)
 801f378:	f04f 0200 	mov.w	r2, #0
 801f37c:	601a      	str	r2, [r3, #0]
			Appl_dblPhaseSetValue_degree = 0;
 801f37e:	4922      	ldr	r1, [pc, #136]	; (801f408 <Appl_AdcPhaseAngleDetermination+0x514>)
 801f380:	f04f 0200 	mov.w	r2, #0
 801f384:	f04f 0300 	mov.w	r3, #0
 801f388:	e9c1 2300 	strd	r2, r3, [r1]
		Appl_fltPhasePowerDelivery = PID_PrepareVoltage();
 801f38c:	f000 f8e8 	bl	801f560 <PID_PrepareVoltage>
 801f390:	eef0 7a40 	vmov.f32	s15, s0
 801f394:	4b1d      	ldr	r3, [pc, #116]	; (801f40c <Appl_AdcPhaseAngleDetermination+0x518>)
 801f396:	edc3 7a00 	vstr	s15, [r3]
		Appl_dblPhaseSetValue_degree = SCR_ANGLE_TRIGGER_MAX - Appl_fltPhasePowerDelivery;
 801f39a:	4b1c      	ldr	r3, [pc, #112]	; (801f40c <Appl_AdcPhaseAngleDetermination+0x518>)
 801f39c:	681b      	ldr	r3, [r3, #0]
 801f39e:	4618      	mov	r0, r3
 801f3a0:	f7f1 f80a 	bl	80103b8 <__aeabi_f2d>
 801f3a4:	4602      	mov	r2, r0
 801f3a6:	460b      	mov	r3, r1
 801f3a8:	f04f 0000 	mov.w	r0, #0
 801f3ac:	4918      	ldr	r1, [pc, #96]	; (801f410 <Appl_AdcPhaseAngleDetermination+0x51c>)
 801f3ae:	f7f0 fea3 	bl	80100f8 <__aeabi_dsub>
 801f3b2:	4602      	mov	r2, r0
 801f3b4:	460b      	mov	r3, r1
 801f3b6:	4914      	ldr	r1, [pc, #80]	; (801f408 <Appl_AdcPhaseAngleDetermination+0x514>)
 801f3b8:	e9c1 2300 	strd	r2, r3, [r1]
 801f3bc:	e017      	b.n	801f3ee <Appl_AdcPhaseAngleDetermination+0x4fa>
		output = 0;
 801f3be:	4b11      	ldr	r3, [pc, #68]	; (801f404 <Appl_AdcPhaseAngleDetermination+0x510>)
 801f3c0:	f04f 0200 	mov.w	r2, #0
 801f3c4:	601a      	str	r2, [r3, #0]
		Appl_dblPhaseSetValue_degree = 0;
 801f3c6:	4910      	ldr	r1, [pc, #64]	; (801f408 <Appl_AdcPhaseAngleDetermination+0x514>)
 801f3c8:	f04f 0200 	mov.w	r2, #0
 801f3cc:	f04f 0300 	mov.w	r3, #0
 801f3d0:	e9c1 2300 	strd	r2, r3, [r1]
		SM_ApplParam.u8SkipT1 = 0;
 801f3d4:	4b08      	ldr	r3, [pc, #32]	; (801f3f8 <Appl_AdcPhaseAngleDetermination+0x504>)
 801f3d6:	2200      	movs	r2, #0
 801f3d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		SM_ApplParam.u8SkipT2 = 0;
 801f3dc:	4b06      	ldr	r3, [pc, #24]	; (801f3f8 <Appl_AdcPhaseAngleDetermination+0x504>)
 801f3de:	2200      	movs	r2, #0
 801f3e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		SM_ApplParam.u8SkipT3 = 0;
 801f3e4:	4b04      	ldr	r3, [pc, #16]	; (801f3f8 <Appl_AdcPhaseAngleDetermination+0x504>)
 801f3e6:	2200      	movs	r2, #0
 801f3e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
}
 801f3ec:	e7ff      	b.n	801f3ee <Appl_AdcPhaseAngleDetermination+0x4fa>
 801f3ee:	bf00      	nop
 801f3f0:	bdb0      	pop	{r4, r5, r7, pc}
 801f3f2:	bf00      	nop
 801f3f4:	20005114 	.word	0x20005114
 801f3f8:	20005034 	.word	0x20005034
 801f3fc:	20000278 	.word	0x20000278
 801f400:	40240000 	.word	0x40240000
 801f404:	2000502c 	.word	0x2000502c
 801f408:	20000920 	.word	0x20000920
 801f40c:	2000501c 	.word	0x2000501c
 801f410:	40690000 	.word	0x40690000

0801f414 <PID_Current>:

float PID_Current(float gain){
 801f414:	b480      	push	{r7}
 801f416:	b083      	sub	sp, #12
 801f418:	af00      	add	r7, sp, #0
 801f41a:	ed87 0a01 	vstr	s0, [r7, #4]
	error = (float)Appl_EEPParam.stm32.EEP_CC_SetCurrent - SM_ApplParam.RealtimeCurrent;
 801f41e:	4b20      	ldr	r3, [pc, #128]	; (801f4a0 <PID_Current+0x8c>)
 801f420:	791b      	ldrb	r3, [r3, #4]
 801f422:	ee07 3a90 	vmov	s15, r3
 801f426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f42a:	4b1e      	ldr	r3, [pc, #120]	; (801f4a4 <PID_Current+0x90>)
 801f42c:	edd3 7a03 	vldr	s15, [r3, #12]
 801f430:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f434:	4b1c      	ldr	r3, [pc, #112]	; (801f4a8 <PID_Current+0x94>)
 801f436:	edc3 7a00 	vstr	s15, [r3]
	output = output + error * gain;
 801f43a:	4b1b      	ldr	r3, [pc, #108]	; (801f4a8 <PID_Current+0x94>)
 801f43c:	ed93 7a00 	vldr	s14, [r3]
 801f440:	edd7 7a01 	vldr	s15, [r7, #4]
 801f444:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f448:	4b18      	ldr	r3, [pc, #96]	; (801f4ac <PID_Current+0x98>)
 801f44a:	edd3 7a00 	vldr	s15, [r3]
 801f44e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f452:	4b16      	ldr	r3, [pc, #88]	; (801f4ac <PID_Current+0x98>)
 801f454:	edc3 7a00 	vstr	s15, [r3]
	if(output >= PID_CURRENT_MAX) output = PID_CURRENT_MAX;
 801f458:	4b14      	ldr	r3, [pc, #80]	; (801f4ac <PID_Current+0x98>)
 801f45a:	edd3 7a00 	vldr	s15, [r3]
 801f45e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 801f4b0 <PID_Current+0x9c>
 801f462:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f46a:	db02      	blt.n	801f472 <PID_Current+0x5e>
 801f46c:	4b0f      	ldr	r3, [pc, #60]	; (801f4ac <PID_Current+0x98>)
 801f46e:	4a11      	ldr	r2, [pc, #68]	; (801f4b4 <PID_Current+0xa0>)
 801f470:	601a      	str	r2, [r3, #0]
	if(output <= PID_CURRENT_MIN) output = PID_CURRENT_MIN;
 801f472:	4b0e      	ldr	r3, [pc, #56]	; (801f4ac <PID_Current+0x98>)
 801f474:	edd3 7a00 	vldr	s15, [r3]
 801f478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f480:	d803      	bhi.n	801f48a <PID_Current+0x76>
 801f482:	4b0a      	ldr	r3, [pc, #40]	; (801f4ac <PID_Current+0x98>)
 801f484:	f04f 0200 	mov.w	r2, #0
 801f488:	601a      	str	r2, [r3, #0]
	return output;
 801f48a:	4b08      	ldr	r3, [pc, #32]	; (801f4ac <PID_Current+0x98>)
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	ee07 3a90 	vmov	s15, r3
}
 801f492:	eeb0 0a67 	vmov.f32	s0, s15
 801f496:	370c      	adds	r7, #12
 801f498:	46bd      	mov	sp, r7
 801f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f49e:	4770      	bx	lr
 801f4a0:	20000278 	.word	0x20000278
 801f4a4:	20005034 	.word	0x20005034
 801f4a8:	200050cc 	.word	0x200050cc
 801f4ac:	2000502c 	.word	0x2000502c
 801f4b0:	43160000 	.word	0x43160000
 801f4b4:	43160000 	.word	0x43160000

0801f4b8 <PID_Voltage>:

float PID_Voltage(float gain){
 801f4b8:	b480      	push	{r7}
 801f4ba:	b083      	sub	sp, #12
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	ed87 0a01 	vstr	s0, [r7, #4]

	error = (float)Appl_EEPParam.stm32.EEP_CV_SetVoltage - SM_ApplParam.RealtimeVoltage;
 801f4c2:	4b20      	ldr	r3, [pc, #128]	; (801f544 <PID_Voltage+0x8c>)
 801f4c4:	795b      	ldrb	r3, [r3, #5]
 801f4c6:	ee07 3a90 	vmov	s15, r3
 801f4ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f4ce:	4b1e      	ldr	r3, [pc, #120]	; (801f548 <PID_Voltage+0x90>)
 801f4d0:	edd3 7a02 	vldr	s15, [r3, #8]
 801f4d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f4d8:	4b1c      	ldr	r3, [pc, #112]	; (801f54c <PID_Voltage+0x94>)
 801f4da:	edc3 7a00 	vstr	s15, [r3]
	output = output + error * gain;
 801f4de:	4b1b      	ldr	r3, [pc, #108]	; (801f54c <PID_Voltage+0x94>)
 801f4e0:	ed93 7a00 	vldr	s14, [r3]
 801f4e4:	edd7 7a01 	vldr	s15, [r7, #4]
 801f4e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f4ec:	4b18      	ldr	r3, [pc, #96]	; (801f550 <PID_Voltage+0x98>)
 801f4ee:	edd3 7a00 	vldr	s15, [r3]
 801f4f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f4f6:	4b16      	ldr	r3, [pc, #88]	; (801f550 <PID_Voltage+0x98>)
 801f4f8:	edc3 7a00 	vstr	s15, [r3]
	if(output >= PID_VOLTAGE_MAX) output = PID_VOLTAGE_MAX;
 801f4fc:	4b14      	ldr	r3, [pc, #80]	; (801f550 <PID_Voltage+0x98>)
 801f4fe:	edd3 7a00 	vldr	s15, [r3]
 801f502:	ed9f 7a14 	vldr	s14, [pc, #80]	; 801f554 <PID_Voltage+0x9c>
 801f506:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f50e:	db02      	blt.n	801f516 <PID_Voltage+0x5e>
 801f510:	4b0f      	ldr	r3, [pc, #60]	; (801f550 <PID_Voltage+0x98>)
 801f512:	4a11      	ldr	r2, [pc, #68]	; (801f558 <PID_Voltage+0xa0>)
 801f514:	601a      	str	r2, [r3, #0]
	if(output <= PID_VOLTAGE_MIN) output = PID_VOLTAGE_MIN;
 801f516:	4b0e      	ldr	r3, [pc, #56]	; (801f550 <PID_Voltage+0x98>)
 801f518:	edd3 7a00 	vldr	s15, [r3]
 801f51c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f524:	d803      	bhi.n	801f52e <PID_Voltage+0x76>
 801f526:	4b0a      	ldr	r3, [pc, #40]	; (801f550 <PID_Voltage+0x98>)
 801f528:	f04f 0200 	mov.w	r2, #0
 801f52c:	601a      	str	r2, [r3, #0]
	return output;
 801f52e:	4b08      	ldr	r3, [pc, #32]	; (801f550 <PID_Voltage+0x98>)
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	ee07 3a90 	vmov	s15, r3
}
 801f536:	eeb0 0a67 	vmov.f32	s0, s15
 801f53a:	370c      	adds	r7, #12
 801f53c:	46bd      	mov	sp, r7
 801f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f542:	4770      	bx	lr
 801f544:	20000278 	.word	0x20000278
 801f548:	20005034 	.word	0x20005034
 801f54c:	200050cc 	.word	0x200050cc
 801f550:	2000502c 	.word	0x2000502c
 801f554:	43160000 	.word	0x43160000
 801f558:	43160000 	.word	0x43160000
 801f55c:	00000000 	.word	0x00000000

0801f560 <PID_PrepareVoltage>:


float PID_PrepareVoltage(void){
 801f560:	b5b0      	push	{r4, r5, r7, lr}
 801f562:	af00      	add	r7, sp, #0
	error = (float)SM_ApplParam.InitialBatteryVoltage - SM_ApplParam.RealtimeVoltage;
 801f564:	4b5e      	ldr	r3, [pc, #376]	; (801f6e0 <PID_PrepareVoltage+0x180>)
 801f566:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801f56a:	4b5d      	ldr	r3, [pc, #372]	; (801f6e0 <PID_PrepareVoltage+0x180>)
 801f56c:	edd3 7a02 	vldr	s15, [r3, #8]
 801f570:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f574:	4b5b      	ldr	r3, [pc, #364]	; (801f6e4 <PID_PrepareVoltage+0x184>)
 801f576:	edc3 7a00 	vstr	s15, [r3]
	if(error < 0){
 801f57a:	4b5a      	ldr	r3, [pc, #360]	; (801f6e4 <PID_PrepareVoltage+0x184>)
 801f57c:	edd3 7a00 	vldr	s15, [r3]
 801f580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f588:	d50a      	bpl.n	801f5a0 <PID_PrepareVoltage+0x40>
		error = 0;
 801f58a:	4b56      	ldr	r3, [pc, #344]	; (801f6e4 <PID_PrepareVoltage+0x184>)
 801f58c:	f04f 0200 	mov.w	r2, #0
 801f590:	601a      	str	r2, [r3, #0]
		output = 0;
 801f592:	4b55      	ldr	r3, [pc, #340]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f594:	f04f 0200 	mov.w	r2, #0
 801f598:	601a      	str	r2, [r3, #0]
		return output;
 801f59a:	4b53      	ldr	r3, [pc, #332]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	e090      	b.n	801f6c2 <PID_PrepareVoltage+0x162>
	}
	if(SM_ApplParam.RealtimeVoltage<48){
 801f5a0:	4b4f      	ldr	r3, [pc, #316]	; (801f6e0 <PID_PrepareVoltage+0x180>)
 801f5a2:	edd3 7a02 	vldr	s15, [r3, #8]
 801f5a6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 801f6ec <PID_PrepareVoltage+0x18c>
 801f5aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5b2:	d520      	bpl.n	801f5f6 <PID_PrepareVoltage+0x96>
		output = output + error * 1.0e-10;
 801f5b4:	4b4c      	ldr	r3, [pc, #304]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	4618      	mov	r0, r3
 801f5ba:	f7f0 fefd 	bl	80103b8 <__aeabi_f2d>
 801f5be:	4604      	mov	r4, r0
 801f5c0:	460d      	mov	r5, r1
 801f5c2:	4b48      	ldr	r3, [pc, #288]	; (801f6e4 <PID_PrepareVoltage+0x184>)
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	4618      	mov	r0, r3
 801f5c8:	f7f0 fef6 	bl	80103b8 <__aeabi_f2d>
 801f5cc:	a340      	add	r3, pc, #256	; (adr r3, 801f6d0 <PID_PrepareVoltage+0x170>)
 801f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5d2:	f7f0 ff49 	bl	8010468 <__aeabi_dmul>
 801f5d6:	4602      	mov	r2, r0
 801f5d8:	460b      	mov	r3, r1
 801f5da:	4620      	mov	r0, r4
 801f5dc:	4629      	mov	r1, r5
 801f5de:	f7f0 fd8d 	bl	80100fc <__adddf3>
 801f5e2:	4602      	mov	r2, r0
 801f5e4:	460b      	mov	r3, r1
 801f5e6:	4610      	mov	r0, r2
 801f5e8:	4619      	mov	r1, r3
 801f5ea:	f7f1 fa35 	bl	8010a58 <__aeabi_d2f>
 801f5ee:	4603      	mov	r3, r0
 801f5f0:	4a3d      	ldr	r2, [pc, #244]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f5f2:	6013      	str	r3, [r2, #0]
 801f5f4:	e04a      	b.n	801f68c <PID_PrepareVoltage+0x12c>
	}
	else if(error > 200){
 801f5f6:	4b3b      	ldr	r3, [pc, #236]	; (801f6e4 <PID_PrepareVoltage+0x184>)
 801f5f8:	edd3 7a00 	vldr	s15, [r3]
 801f5fc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 801f6f0 <PID_PrepareVoltage+0x190>
 801f600:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f608:	dd20      	ble.n	801f64c <PID_PrepareVoltage+0xec>
		output = output + error * 1.0e-10;
 801f60a:	4b37      	ldr	r3, [pc, #220]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f60c:	681b      	ldr	r3, [r3, #0]
 801f60e:	4618      	mov	r0, r3
 801f610:	f7f0 fed2 	bl	80103b8 <__aeabi_f2d>
 801f614:	4604      	mov	r4, r0
 801f616:	460d      	mov	r5, r1
 801f618:	4b32      	ldr	r3, [pc, #200]	; (801f6e4 <PID_PrepareVoltage+0x184>)
 801f61a:	681b      	ldr	r3, [r3, #0]
 801f61c:	4618      	mov	r0, r3
 801f61e:	f7f0 fecb 	bl	80103b8 <__aeabi_f2d>
 801f622:	a32b      	add	r3, pc, #172	; (adr r3, 801f6d0 <PID_PrepareVoltage+0x170>)
 801f624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f628:	f7f0 ff1e 	bl	8010468 <__aeabi_dmul>
 801f62c:	4602      	mov	r2, r0
 801f62e:	460b      	mov	r3, r1
 801f630:	4620      	mov	r0, r4
 801f632:	4629      	mov	r1, r5
 801f634:	f7f0 fd62 	bl	80100fc <__adddf3>
 801f638:	4602      	mov	r2, r0
 801f63a:	460b      	mov	r3, r1
 801f63c:	4610      	mov	r0, r2
 801f63e:	4619      	mov	r1, r3
 801f640:	f7f1 fa0a 	bl	8010a58 <__aeabi_d2f>
 801f644:	4603      	mov	r3, r0
 801f646:	4a28      	ldr	r2, [pc, #160]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f648:	6013      	str	r3, [r2, #0]
 801f64a:	e01f      	b.n	801f68c <PID_PrepareVoltage+0x12c>
	}
	else{
		output = output + error * 5.0e-7;
 801f64c:	4b26      	ldr	r3, [pc, #152]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	4618      	mov	r0, r3
 801f652:	f7f0 feb1 	bl	80103b8 <__aeabi_f2d>
 801f656:	4604      	mov	r4, r0
 801f658:	460d      	mov	r5, r1
 801f65a:	4b22      	ldr	r3, [pc, #136]	; (801f6e4 <PID_PrepareVoltage+0x184>)
 801f65c:	681b      	ldr	r3, [r3, #0]
 801f65e:	4618      	mov	r0, r3
 801f660:	f7f0 feaa 	bl	80103b8 <__aeabi_f2d>
 801f664:	a31c      	add	r3, pc, #112	; (adr r3, 801f6d8 <PID_PrepareVoltage+0x178>)
 801f666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f66a:	f7f0 fefd 	bl	8010468 <__aeabi_dmul>
 801f66e:	4602      	mov	r2, r0
 801f670:	460b      	mov	r3, r1
 801f672:	4620      	mov	r0, r4
 801f674:	4629      	mov	r1, r5
 801f676:	f7f0 fd41 	bl	80100fc <__adddf3>
 801f67a:	4602      	mov	r2, r0
 801f67c:	460b      	mov	r3, r1
 801f67e:	4610      	mov	r0, r2
 801f680:	4619      	mov	r1, r3
 801f682:	f7f1 f9e9 	bl	8010a58 <__aeabi_d2f>
 801f686:	4603      	mov	r3, r0
 801f688:	4a17      	ldr	r2, [pc, #92]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f68a:	6013      	str	r3, [r2, #0]
	}

	if(output >= PID_VOLTAGE_MAX) output = PID_VOLTAGE_MAX;
 801f68c:	4b16      	ldr	r3, [pc, #88]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f68e:	edd3 7a00 	vldr	s15, [r3]
 801f692:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801f6f4 <PID_PrepareVoltage+0x194>
 801f696:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f69e:	db02      	blt.n	801f6a6 <PID_PrepareVoltage+0x146>
 801f6a0:	4b11      	ldr	r3, [pc, #68]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f6a2:	4a15      	ldr	r2, [pc, #84]	; (801f6f8 <PID_PrepareVoltage+0x198>)
 801f6a4:	601a      	str	r2, [r3, #0]
	if(output <= PID_VOLTAGE_MIN) output = PID_VOLTAGE_MIN;
 801f6a6:	4b10      	ldr	r3, [pc, #64]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f6a8:	edd3 7a00 	vldr	s15, [r3]
 801f6ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6b4:	d803      	bhi.n	801f6be <PID_PrepareVoltage+0x15e>
 801f6b6:	4b0c      	ldr	r3, [pc, #48]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f6b8:	f04f 0200 	mov.w	r2, #0
 801f6bc:	601a      	str	r2, [r3, #0]
	return output;
 801f6be:	4b0a      	ldr	r3, [pc, #40]	; (801f6e8 <PID_PrepareVoltage+0x188>)
 801f6c0:	681b      	ldr	r3, [r3, #0]
 801f6c2:	ee07 3a90 	vmov	s15, r3
}
 801f6c6:	eeb0 0a67 	vmov.f32	s0, s15
 801f6ca:	bdb0      	pop	{r4, r5, r7, pc}
 801f6cc:	f3af 8000 	nop.w
 801f6d0:	d9d7bdbb 	.word	0xd9d7bdbb
 801f6d4:	3ddb7cdf 	.word	0x3ddb7cdf
 801f6d8:	a0b5ed8d 	.word	0xa0b5ed8d
 801f6dc:	3ea0c6f7 	.word	0x3ea0c6f7
 801f6e0:	20005034 	.word	0x20005034
 801f6e4:	200050cc 	.word	0x200050cc
 801f6e8:	2000502c 	.word	0x2000502c
 801f6ec:	42400000 	.word	0x42400000
 801f6f0:	43480000 	.word	0x43480000
 801f6f4:	43160000 	.word	0x43160000
 801f6f8:	43160000 	.word	0x43160000

0801f6fc <PID_CVMode_CCRun>:

float cvmode_cc_error;
float ccmode_cv_error;

float PID_CVMode_CCRun(float gain){
 801f6fc:	b480      	push	{r7}
 801f6fe:	b083      	sub	sp, #12
 801f700:	af00      	add	r7, sp, #0
 801f702:	ed87 0a01 	vstr	s0, [r7, #4]

	cvmode_cc_error = (float)Appl_EEPParam.stm32.EEP_CV_CutOffCurrent - SM_ApplParam.RealtimeCurrent;
 801f706:	4b26      	ldr	r3, [pc, #152]	; (801f7a0 <PID_CVMode_CCRun+0xa4>)
 801f708:	799b      	ldrb	r3, [r3, #6]
 801f70a:	ee07 3a90 	vmov	s15, r3
 801f70e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f712:	4b24      	ldr	r3, [pc, #144]	; (801f7a4 <PID_CVMode_CCRun+0xa8>)
 801f714:	edd3 7a03 	vldr	s15, [r3, #12]
 801f718:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f71c:	4b22      	ldr	r3, [pc, #136]	; (801f7a8 <PID_CVMode_CCRun+0xac>)
 801f71e:	edc3 7a00 	vstr	s15, [r3]

	if(cvmode_cc_error<0){
 801f722:	4b21      	ldr	r3, [pc, #132]	; (801f7a8 <PID_CVMode_CCRun+0xac>)
 801f724:	edd3 7a00 	vldr	s15, [r3]
 801f728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f730:	d519      	bpl.n	801f766 <PID_CVMode_CCRun+0x6a>
		output = output + cvmode_cc_error * gain;
 801f732:	4b1d      	ldr	r3, [pc, #116]	; (801f7a8 <PID_CVMode_CCRun+0xac>)
 801f734:	ed93 7a00 	vldr	s14, [r3]
 801f738:	edd7 7a01 	vldr	s15, [r7, #4]
 801f73c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f740:	4b1a      	ldr	r3, [pc, #104]	; (801f7ac <PID_CVMode_CCRun+0xb0>)
 801f742:	edd3 7a00 	vldr	s15, [r3]
 801f746:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f74a:	4b18      	ldr	r3, [pc, #96]	; (801f7ac <PID_CVMode_CCRun+0xb0>)
 801f74c:	edc3 7a00 	vstr	s15, [r3]
	}
	else{
		return 0;
	}

	if(output >= PID_VOLTAGE_MAX) output = PID_VOLTAGE_MAX;
 801f750:	4b16      	ldr	r3, [pc, #88]	; (801f7ac <PID_CVMode_CCRun+0xb0>)
 801f752:	edd3 7a00 	vldr	s15, [r3]
 801f756:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801f7b0 <PID_CVMode_CCRun+0xb4>
 801f75a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f762:	da03      	bge.n	801f76c <PID_CVMode_CCRun+0x70>
 801f764:	e005      	b.n	801f772 <PID_CVMode_CCRun+0x76>
		return 0;
 801f766:	f04f 0300 	mov.w	r3, #0
 801f76a:	e010      	b.n	801f78e <PID_CVMode_CCRun+0x92>
	if(output >= PID_VOLTAGE_MAX) output = PID_VOLTAGE_MAX;
 801f76c:	4b0f      	ldr	r3, [pc, #60]	; (801f7ac <PID_CVMode_CCRun+0xb0>)
 801f76e:	4a11      	ldr	r2, [pc, #68]	; (801f7b4 <PID_CVMode_CCRun+0xb8>)
 801f770:	601a      	str	r2, [r3, #0]
	if(output <= PID_VOLTAGE_MIN) output = PID_VOLTAGE_MIN;
 801f772:	4b0e      	ldr	r3, [pc, #56]	; (801f7ac <PID_CVMode_CCRun+0xb0>)
 801f774:	edd3 7a00 	vldr	s15, [r3]
 801f778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f780:	d803      	bhi.n	801f78a <PID_CVMode_CCRun+0x8e>
 801f782:	4b0a      	ldr	r3, [pc, #40]	; (801f7ac <PID_CVMode_CCRun+0xb0>)
 801f784:	f04f 0200 	mov.w	r2, #0
 801f788:	601a      	str	r2, [r3, #0]
	return output;
 801f78a:	4b08      	ldr	r3, [pc, #32]	; (801f7ac <PID_CVMode_CCRun+0xb0>)
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	ee07 3a90 	vmov	s15, r3
}
 801f792:	eeb0 0a67 	vmov.f32	s0, s15
 801f796:	370c      	adds	r7, #12
 801f798:	46bd      	mov	sp, r7
 801f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f79e:	4770      	bx	lr
 801f7a0:	20000278 	.word	0x20000278
 801f7a4:	20005034 	.word	0x20005034
 801f7a8:	20005024 	.word	0x20005024
 801f7ac:	2000502c 	.word	0x2000502c
 801f7b0:	43160000 	.word	0x43160000
 801f7b4:	43160000 	.word	0x43160000

0801f7b8 <PID_CCMode_CVRun>:

float PID_CCMode_CVRun(float gain){
 801f7b8:	b480      	push	{r7}
 801f7ba:	b083      	sub	sp, #12
 801f7bc:	af00      	add	r7, sp, #0
 801f7be:	ed87 0a01 	vstr	s0, [r7, #4]

	ccmode_cv_error = (float)Appl_EEPParam.stm32.EEP_CC_CutOffVoltage - SM_ApplParam.RealtimeVoltage;
 801f7c2:	4b26      	ldr	r3, [pc, #152]	; (801f85c <PID_CCMode_CVRun+0xa4>)
 801f7c4:	79db      	ldrb	r3, [r3, #7]
 801f7c6:	ee07 3a90 	vmov	s15, r3
 801f7ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f7ce:	4b24      	ldr	r3, [pc, #144]	; (801f860 <PID_CCMode_CVRun+0xa8>)
 801f7d0:	edd3 7a02 	vldr	s15, [r3, #8]
 801f7d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f7d8:	4b22      	ldr	r3, [pc, #136]	; (801f864 <PID_CCMode_CVRun+0xac>)
 801f7da:	edc3 7a00 	vstr	s15, [r3]

	if(ccmode_cv_error<0){
 801f7de:	4b21      	ldr	r3, [pc, #132]	; (801f864 <PID_CCMode_CVRun+0xac>)
 801f7e0:	edd3 7a00 	vldr	s15, [r3]
 801f7e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7ec:	d519      	bpl.n	801f822 <PID_CCMode_CVRun+0x6a>
		output = output + ccmode_cv_error * gain;
 801f7ee:	4b1d      	ldr	r3, [pc, #116]	; (801f864 <PID_CCMode_CVRun+0xac>)
 801f7f0:	ed93 7a00 	vldr	s14, [r3]
 801f7f4:	edd7 7a01 	vldr	s15, [r7, #4]
 801f7f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f7fc:	4b1a      	ldr	r3, [pc, #104]	; (801f868 <PID_CCMode_CVRun+0xb0>)
 801f7fe:	edd3 7a00 	vldr	s15, [r3]
 801f802:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f806:	4b18      	ldr	r3, [pc, #96]	; (801f868 <PID_CCMode_CVRun+0xb0>)
 801f808:	edc3 7a00 	vstr	s15, [r3]
	}
	else{
		return 0;
	}

	if(output >= PID_VOLTAGE_MAX) output = PID_VOLTAGE_MAX;
 801f80c:	4b16      	ldr	r3, [pc, #88]	; (801f868 <PID_CCMode_CVRun+0xb0>)
 801f80e:	edd3 7a00 	vldr	s15, [r3]
 801f812:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801f86c <PID_CCMode_CVRun+0xb4>
 801f816:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f81e:	da03      	bge.n	801f828 <PID_CCMode_CVRun+0x70>
 801f820:	e005      	b.n	801f82e <PID_CCMode_CVRun+0x76>
		return 0;
 801f822:	f04f 0300 	mov.w	r3, #0
 801f826:	e010      	b.n	801f84a <PID_CCMode_CVRun+0x92>
	if(output >= PID_VOLTAGE_MAX) output = PID_VOLTAGE_MAX;
 801f828:	4b0f      	ldr	r3, [pc, #60]	; (801f868 <PID_CCMode_CVRun+0xb0>)
 801f82a:	4a11      	ldr	r2, [pc, #68]	; (801f870 <PID_CCMode_CVRun+0xb8>)
 801f82c:	601a      	str	r2, [r3, #0]
	if(output <= PID_VOLTAGE_MIN) output = PID_VOLTAGE_MIN;
 801f82e:	4b0e      	ldr	r3, [pc, #56]	; (801f868 <PID_CCMode_CVRun+0xb0>)
 801f830:	edd3 7a00 	vldr	s15, [r3]
 801f834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f83c:	d803      	bhi.n	801f846 <PID_CCMode_CVRun+0x8e>
 801f83e:	4b0a      	ldr	r3, [pc, #40]	; (801f868 <PID_CCMode_CVRun+0xb0>)
 801f840:	f04f 0200 	mov.w	r2, #0
 801f844:	601a      	str	r2, [r3, #0]
	return output;
 801f846:	4b08      	ldr	r3, [pc, #32]	; (801f868 <PID_CCMode_CVRun+0xb0>)
 801f848:	681b      	ldr	r3, [r3, #0]
 801f84a:	ee07 3a90 	vmov	s15, r3
}
 801f84e:	eeb0 0a67 	vmov.f32	s0, s15
 801f852:	370c      	adds	r7, #12
 801f854:	46bd      	mov	sp, r7
 801f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f85a:	4770      	bx	lr
 801f85c:	20000278 	.word	0x20000278
 801f860:	20005034 	.word	0x20005034
 801f864:	200050ac 	.word	0x200050ac
 801f868:	2000502c 	.word	0x2000502c
 801f86c:	43160000 	.word	0x43160000
 801f870:	43160000 	.word	0x43160000

0801f874 <delay_us>:

void delay_us (uint16_t us)
{
 801f874:	b480      	push	{r7}
 801f876:	b083      	sub	sp, #12
 801f878:	af00      	add	r7, sp, #0
 801f87a:	4603      	mov	r3, r0
 801f87c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 801f87e:	4b08      	ldr	r3, [pc, #32]	; (801f8a0 <delay_us+0x2c>)
 801f880:	681b      	ldr	r3, [r3, #0]
 801f882:	2200      	movs	r2, #0
 801f884:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 801f886:	bf00      	nop
 801f888:	4b05      	ldr	r3, [pc, #20]	; (801f8a0 <delay_us+0x2c>)
 801f88a:	681b      	ldr	r3, [r3, #0]
 801f88c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f88e:	88fb      	ldrh	r3, [r7, #6]
 801f890:	429a      	cmp	r2, r3
 801f892:	d3f9      	bcc.n	801f888 <delay_us+0x14>
	return;
 801f894:	bf00      	nop
}
 801f896:	370c      	adds	r7, #12
 801f898:	46bd      	mov	sp, r7
 801f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f89e:	4770      	bx	lr
 801f8a0:	2000491c 	.word	0x2000491c

0801f8a4 <SafeRunCCMonitoring>:



void SafeRunCCMonitoring(void){
 801f8a4:	b580      	push	{r7, lr}
 801f8a6:	af00      	add	r7, sp, #0
	Appl_EEPParam.stm32.EEP_PowerFailedLastTime = 1;
 801f8a8:	4b58      	ldr	r3, [pc, #352]	; (801fa0c <SafeRunCCMonitoring+0x168>)
 801f8aa:	2201      	movs	r2, #1
 801f8ac:	729a      	strb	r2, [r3, #10]

	if(Appl_diagActiveFault.PowerFail_Z1 				!= 1 &&
 801f8ae:	4b58      	ldr	r3, [pc, #352]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f8b0:	781b      	ldrb	r3, [r3, #0]
 801f8b2:	2b01      	cmp	r3, #1
 801f8b4:	d027      	beq.n	801f906 <SafeRunCCMonitoring+0x62>
			Appl_diagActiveFault.PowerFail_Z2 			!= 1 &&
 801f8b6:	4b56      	ldr	r3, [pc, #344]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f8b8:	785b      	ldrb	r3, [r3, #1]
	if(Appl_diagActiveFault.PowerFail_Z1 				!= 1 &&
 801f8ba:	2b01      	cmp	r3, #1
 801f8bc:	d023      	beq.n	801f906 <SafeRunCCMonitoring+0x62>
			Appl_diagActiveFault.PowerFail_Z3 			!= 1 &&
 801f8be:	4b54      	ldr	r3, [pc, #336]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f8c0:	789b      	ldrb	r3, [r3, #2]
			Appl_diagActiveFault.PowerFail_Z2 			!= 1 &&
 801f8c2:	2b01      	cmp	r3, #1
 801f8c4:	d01f      	beq.n	801f906 <SafeRunCCMonitoring+0x62>
			Appl_diagActiveFault.BatteryReversal 		!= 1 &&
 801f8c6:	4b52      	ldr	r3, [pc, #328]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f8c8:	7a1b      	ldrb	r3, [r3, #8]
			Appl_diagActiveFault.PowerFail_Z3 			!= 1 &&
 801f8ca:	2b01      	cmp	r3, #1
 801f8cc:	d01b      	beq.n	801f906 <SafeRunCCMonitoring+0x62>
			Appl_diagActiveFault.EEPLogMemoryFull 		!= 1 &&
 801f8ce:	4b50      	ldr	r3, [pc, #320]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f8d0:	7a5b      	ldrb	r3, [r3, #9]
			Appl_diagActiveFault.BatteryReversal 		!= 1 &&
 801f8d2:	2b01      	cmp	r3, #1
 801f8d4:	d017      	beq.n	801f906 <SafeRunCCMonitoring+0x62>
			Appl_diagActiveFault.HighTempperatureSCR 	!= 1 &&
 801f8d6:	4b4e      	ldr	r3, [pc, #312]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f8d8:	799b      	ldrb	r3, [r3, #6]
			Appl_diagActiveFault.EEPLogMemoryFull 		!= 1 &&
 801f8da:	2b01      	cmp	r3, #1
 801f8dc:	d013      	beq.n	801f906 <SafeRunCCMonitoring+0x62>
			Appl_diagActiveFault.OverVoltage 			!= 1 &&
 801f8de:	4b4c      	ldr	r3, [pc, #304]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f8e0:	7adb      	ldrb	r3, [r3, #11]
			Appl_diagActiveFault.HighTempperatureSCR 	!= 1 &&
 801f8e2:	2b01      	cmp	r3, #1
 801f8e4:	d00f      	beq.n	801f906 <SafeRunCCMonitoring+0x62>
			Appl_diagActiveFault.PhaseReversal 			!= 1 &&
 801f8e6:	4b4a      	ldr	r3, [pc, #296]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f8e8:	79db      	ldrb	r3, [r3, #7]
			Appl_diagActiveFault.OverVoltage 			!= 1 &&
 801f8ea:	2b01      	cmp	r3, #1
 801f8ec:	d00b      	beq.n	801f906 <SafeRunCCMonitoring+0x62>
			Appl_diagActiveFault.FiltercktOpen 			!= 1 &&
 801f8ee:	4b48      	ldr	r3, [pc, #288]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f8f0:	7a9b      	ldrb	r3, [r3, #10]
			Appl_diagActiveFault.PhaseReversal 			!= 1 &&
 801f8f2:	2b01      	cmp	r3, #1
 801f8f4:	d007      	beq.n	801f906 <SafeRunCCMonitoring+0x62>
			Appl_diagActiveFault.UnderVoltage 			!= 1 &&
 801f8f6:	4b46      	ldr	r3, [pc, #280]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f8f8:	795b      	ldrb	r3, [r3, #5]
			Appl_diagActiveFault.FiltercktOpen 			!= 1 &&
 801f8fa:	2b01      	cmp	r3, #1
 801f8fc:	d003      	beq.n	801f906 <SafeRunCCMonitoring+0x62>
			Appl_diagActiveFault.OverCurrent 			!= 1){
 801f8fe:	4b44      	ldr	r3, [pc, #272]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f900:	7b1b      	ldrb	r3, [r3, #12]
			Appl_diagActiveFault.UnderVoltage 			!= 1 &&
 801f902:	2b01      	cmp	r3, #1
 801f904:	d160      	bne.n	801f9c8 <SafeRunCCMonitoring+0x124>

		}
	else{
		if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||
 801f906:	4b42      	ldr	r3, [pc, #264]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f908:	781b      	ldrb	r3, [r3, #0]
 801f90a:	2b01      	cmp	r3, #1
 801f90c:	d007      	beq.n	801f91e <SafeRunCCMonitoring+0x7a>
				(Appl_diagActiveFault.PowerFail_Z2 == 1) ||
 801f90e:	4b40      	ldr	r3, [pc, #256]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f910:	785b      	ldrb	r3, [r3, #1]
		if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||
 801f912:	2b01      	cmp	r3, #1
 801f914:	d003      	beq.n	801f91e <SafeRunCCMonitoring+0x7a>
				(Appl_diagActiveFault.PowerFail_Z3 == 1))
 801f916:	4b3e      	ldr	r3, [pc, #248]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f918:	789b      	ldrb	r3, [r3, #2]
				(Appl_diagActiveFault.PowerFail_Z2 == 1) ||
 801f91a:	2b01      	cmp	r3, #1
 801f91c:	d104      	bne.n	801f928 <SafeRunCCMonitoring+0x84>
		SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ1;
 801f91e:	4b3d      	ldr	r3, [pc, #244]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f920:	2205      	movs	r2, #5
 801f922:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801f926:	e046      	b.n	801f9b6 <SafeRunCCMonitoring+0x112>
		else if(Appl_diagActiveFault.BatteryReversal 		== 1) SM_ApplParam.Pausereason = PauseReasonEnum_BatteryReversal;
 801f928:	4b39      	ldr	r3, [pc, #228]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f92a:	7a1b      	ldrb	r3, [r3, #8]
 801f92c:	2b01      	cmp	r3, #1
 801f92e:	d104      	bne.n	801f93a <SafeRunCCMonitoring+0x96>
 801f930:	4b38      	ldr	r3, [pc, #224]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f932:	2208      	movs	r2, #8
 801f934:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801f938:	e03d      	b.n	801f9b6 <SafeRunCCMonitoring+0x112>
		else if(Appl_diagActiveFault.EEPLogMemoryFull 		== 1) SM_ApplParam.Pausereason = PauseReasonEnum_EEPLogMemoryFull;
 801f93a:	4b35      	ldr	r3, [pc, #212]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f93c:	7a5b      	ldrb	r3, [r3, #9]
 801f93e:	2b01      	cmp	r3, #1
 801f940:	d104      	bne.n	801f94c <SafeRunCCMonitoring+0xa8>
 801f942:	4b34      	ldr	r3, [pc, #208]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f944:	2209      	movs	r2, #9
 801f946:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801f94a:	e034      	b.n	801f9b6 <SafeRunCCMonitoring+0x112>
		else if(Appl_diagActiveFault.UnderVoltage 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_UnderVoltage;
 801f94c:	4b30      	ldr	r3, [pc, #192]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f94e:	795b      	ldrb	r3, [r3, #5]
 801f950:	2b01      	cmp	r3, #1
 801f952:	d104      	bne.n	801f95e <SafeRunCCMonitoring+0xba>
 801f954:	4b2f      	ldr	r3, [pc, #188]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f956:	220b      	movs	r2, #11
 801f958:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801f95c:	e02b      	b.n	801f9b6 <SafeRunCCMonitoring+0x112>
		else if(Appl_diagActiveFault.FiltercktOpen 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_FilterCircuitOpen;
 801f95e:	4b2c      	ldr	r3, [pc, #176]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f960:	7a9b      	ldrb	r3, [r3, #10]
 801f962:	2b01      	cmp	r3, #1
 801f964:	d104      	bne.n	801f970 <SafeRunCCMonitoring+0xcc>
 801f966:	4b2b      	ldr	r3, [pc, #172]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f968:	220d      	movs	r2, #13
 801f96a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801f96e:	e022      	b.n	801f9b6 <SafeRunCCMonitoring+0x112>
		else if(Appl_diagActiveFault.HighTempperatureSCR 	== 1) SM_ApplParam.Pausereason = PauseReasonEnum_HighTemp;
 801f970:	4b27      	ldr	r3, [pc, #156]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f972:	799b      	ldrb	r3, [r3, #6]
 801f974:	2b01      	cmp	r3, #1
 801f976:	d104      	bne.n	801f982 <SafeRunCCMonitoring+0xde>
 801f978:	4b26      	ldr	r3, [pc, #152]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f97a:	2206      	movs	r2, #6
 801f97c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801f980:	e019      	b.n	801f9b6 <SafeRunCCMonitoring+0x112>
		else if(Appl_diagActiveFault.OverVoltage 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverVoltage;
 801f982:	4b23      	ldr	r3, [pc, #140]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f984:	7adb      	ldrb	r3, [r3, #11]
 801f986:	2b01      	cmp	r3, #1
 801f988:	d104      	bne.n	801f994 <SafeRunCCMonitoring+0xf0>
 801f98a:	4b22      	ldr	r3, [pc, #136]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f98c:	220e      	movs	r2, #14
 801f98e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801f992:	e010      	b.n	801f9b6 <SafeRunCCMonitoring+0x112>
		else if(Appl_diagActiveFault.PhaseReversal 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_PhaseReversal;
 801f994:	4b1e      	ldr	r3, [pc, #120]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f996:	79db      	ldrb	r3, [r3, #7]
 801f998:	2b01      	cmp	r3, #1
 801f99a:	d104      	bne.n	801f9a6 <SafeRunCCMonitoring+0x102>
 801f99c:	4b1d      	ldr	r3, [pc, #116]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f99e:	2207      	movs	r2, #7
 801f9a0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801f9a4:	e007      	b.n	801f9b6 <SafeRunCCMonitoring+0x112>
		else if(Appl_diagActiveFault.OverCurrent == 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverCurrent;
 801f9a6:	4b1a      	ldr	r3, [pc, #104]	; (801fa10 <SafeRunCCMonitoring+0x16c>)
 801f9a8:	7b1b      	ldrb	r3, [r3, #12]
 801f9aa:	2b01      	cmp	r3, #1
 801f9ac:	d103      	bne.n	801f9b6 <SafeRunCCMonitoring+0x112>
 801f9ae:	4b19      	ldr	r3, [pc, #100]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f9b0:	220f      	movs	r2, #15
 801f9b2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		SM_enumECUState = SM_enum_ECU_CCPauseMode;
 801f9b6:	4b18      	ldr	r3, [pc, #96]	; (801fa18 <SafeRunCCMonitoring+0x174>)
 801f9b8:	220a      	movs	r2, #10
 801f9ba:	701a      	strb	r2, [r3, #0]
		StopCurrentProvidingLoop(SM_ApplParam.Pausereason);
 801f9bc:	4b15      	ldr	r3, [pc, #84]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f9be:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801f9c2:	4618      	mov	r0, r3
 801f9c4:	f000 fa4e 	bl	801fe64 <StopCurrentProvidingLoop>
	}


	if(Appl_EEPParam.stm32.EEP_Run_Hour == Appl_EEPParam.stm32.EEP_TimerSetHours){
 801f9c8:	4b10      	ldr	r3, [pc, #64]	; (801fa0c <SafeRunCCMonitoring+0x168>)
 801f9ca:	7b5a      	ldrb	r2, [r3, #13]
 801f9cc:	4b0f      	ldr	r3, [pc, #60]	; (801fa0c <SafeRunCCMonitoring+0x168>)
 801f9ce:	7b9b      	ldrb	r3, [r3, #14]
 801f9d0:	429a      	cmp	r2, r3
 801f9d2:	d118      	bne.n	801fa06 <SafeRunCCMonitoring+0x162>
		SM_ApplParam.Pausereason = PauseReasonEnum_TimerComplete;
 801f9d4:	4b0f      	ldr	r3, [pc, #60]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f9d6:	2203      	movs	r2, #3
 801f9d8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		SM_enumECUState = SM_enum_ECU_CCPauseMode;
 801f9dc:	4b0e      	ldr	r3, [pc, #56]	; (801fa18 <SafeRunCCMonitoring+0x174>)
 801f9de:	220a      	movs	r2, #10
 801f9e0:	701a      	strb	r2, [r3, #0]
		Appl_EEPParam.stm32.EEP_Run_Hour = 0;
 801f9e2:	4b0a      	ldr	r3, [pc, #40]	; (801fa0c <SafeRunCCMonitoring+0x168>)
 801f9e4:	2200      	movs	r2, #0
 801f9e6:	735a      	strb	r2, [r3, #13]
		Appl_EEPParam.stm32.EEP_Run_Min = 0;
 801f9e8:	4b08      	ldr	r3, [pc, #32]	; (801fa0c <SafeRunCCMonitoring+0x168>)
 801f9ea:	2200      	movs	r2, #0
 801f9ec:	731a      	strb	r2, [r3, #12]
		Appl_EEPParam.stm32.EEP_Run_Sec = 0;
 801f9ee:	4b07      	ldr	r3, [pc, #28]	; (801fa0c <SafeRunCCMonitoring+0x168>)
 801f9f0:	2200      	movs	r2, #0
 801f9f2:	72da      	strb	r2, [r3, #11]
		Appl_EEPParam.stm32.EEP_PowerFailedLastTime = 0;
 801f9f4:	4b05      	ldr	r3, [pc, #20]	; (801fa0c <SafeRunCCMonitoring+0x168>)
 801f9f6:	2200      	movs	r2, #0
 801f9f8:	729a      	strb	r2, [r3, #10]
		StopCurrentProvidingLoop(SM_ApplParam.Pausereason);
 801f9fa:	4b06      	ldr	r3, [pc, #24]	; (801fa14 <SafeRunCCMonitoring+0x170>)
 801f9fc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801fa00:	4618      	mov	r0, r3
 801fa02:	f000 fa2f 	bl	801fe64 <StopCurrentProvidingLoop>
	}

}
 801fa06:	bf00      	nop
 801fa08:	bd80      	pop	{r7, pc}
 801fa0a:	bf00      	nop
 801fa0c:	20000278 	.word	0x20000278
 801fa10:	20004d0c 	.word	0x20004d0c
 801fa14:	20005034 	.word	0x20005034
 801fa18:	20005114 	.word	0x20005114

0801fa1c <SafeRunCVMonitoring>:
void SafeRunCVMonitoring(void){
 801fa1c:	b580      	push	{r7, lr}
 801fa1e:	af00      	add	r7, sp, #0
	Appl_EEPParam.stm32.EEP_PowerFailedLastTime = 1;
 801fa20:	4b58      	ldr	r3, [pc, #352]	; (801fb84 <SafeRunCVMonitoring+0x168>)
 801fa22:	2201      	movs	r2, #1
 801fa24:	729a      	strb	r2, [r3, #10]

	if(Appl_diagActiveFault.PowerFail_Z1 				!= 1 &&
 801fa26:	4b58      	ldr	r3, [pc, #352]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa28:	781b      	ldrb	r3, [r3, #0]
 801fa2a:	2b01      	cmp	r3, #1
 801fa2c:	d027      	beq.n	801fa7e <SafeRunCVMonitoring+0x62>
			Appl_diagActiveFault.PowerFail_Z2 			!= 1 &&
 801fa2e:	4b56      	ldr	r3, [pc, #344]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa30:	785b      	ldrb	r3, [r3, #1]
	if(Appl_diagActiveFault.PowerFail_Z1 				!= 1 &&
 801fa32:	2b01      	cmp	r3, #1
 801fa34:	d023      	beq.n	801fa7e <SafeRunCVMonitoring+0x62>
			Appl_diagActiveFault.PowerFail_Z3 			!= 1 &&
 801fa36:	4b54      	ldr	r3, [pc, #336]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa38:	789b      	ldrb	r3, [r3, #2]
			Appl_diagActiveFault.PowerFail_Z2 			!= 1 &&
 801fa3a:	2b01      	cmp	r3, #1
 801fa3c:	d01f      	beq.n	801fa7e <SafeRunCVMonitoring+0x62>
			Appl_diagActiveFault.BatteryReversal 		!= 1 &&
 801fa3e:	4b52      	ldr	r3, [pc, #328]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa40:	7a1b      	ldrb	r3, [r3, #8]
			Appl_diagActiveFault.PowerFail_Z3 			!= 1 &&
 801fa42:	2b01      	cmp	r3, #1
 801fa44:	d01b      	beq.n	801fa7e <SafeRunCVMonitoring+0x62>
			Appl_diagActiveFault.EEPLogMemoryFull 		!= 1 &&
 801fa46:	4b50      	ldr	r3, [pc, #320]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa48:	7a5b      	ldrb	r3, [r3, #9]
			Appl_diagActiveFault.BatteryReversal 		!= 1 &&
 801fa4a:	2b01      	cmp	r3, #1
 801fa4c:	d017      	beq.n	801fa7e <SafeRunCVMonitoring+0x62>
			Appl_diagActiveFault.HighTempperatureSCR 	!= 1 &&
 801fa4e:	4b4e      	ldr	r3, [pc, #312]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa50:	799b      	ldrb	r3, [r3, #6]
			Appl_diagActiveFault.EEPLogMemoryFull 		!= 1 &&
 801fa52:	2b01      	cmp	r3, #1
 801fa54:	d013      	beq.n	801fa7e <SafeRunCVMonitoring+0x62>
			Appl_diagActiveFault.OverVoltage 			!= 1 &&
 801fa56:	4b4c      	ldr	r3, [pc, #304]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa58:	7adb      	ldrb	r3, [r3, #11]
			Appl_diagActiveFault.HighTempperatureSCR 	!= 1 &&
 801fa5a:	2b01      	cmp	r3, #1
 801fa5c:	d00f      	beq.n	801fa7e <SafeRunCVMonitoring+0x62>
			Appl_diagActiveFault.PhaseReversal 			!= 1 &&
 801fa5e:	4b4a      	ldr	r3, [pc, #296]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa60:	79db      	ldrb	r3, [r3, #7]
			Appl_diagActiveFault.OverVoltage 			!= 1 &&
 801fa62:	2b01      	cmp	r3, #1
 801fa64:	d00b      	beq.n	801fa7e <SafeRunCVMonitoring+0x62>
			Appl_diagActiveFault.FiltercktOpen 			!= 1 &&
 801fa66:	4b48      	ldr	r3, [pc, #288]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa68:	7a9b      	ldrb	r3, [r3, #10]
			Appl_diagActiveFault.PhaseReversal 			!= 1 &&
 801fa6a:	2b01      	cmp	r3, #1
 801fa6c:	d007      	beq.n	801fa7e <SafeRunCVMonitoring+0x62>
			Appl_diagActiveFault.UnderVoltage 			!= 1 &&
 801fa6e:	4b46      	ldr	r3, [pc, #280]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa70:	795b      	ldrb	r3, [r3, #5]
			Appl_diagActiveFault.FiltercktOpen 			!= 1 &&
 801fa72:	2b01      	cmp	r3, #1
 801fa74:	d003      	beq.n	801fa7e <SafeRunCVMonitoring+0x62>
			Appl_diagActiveFault.OverCurrent 			!= 1){
 801fa76:	4b44      	ldr	r3, [pc, #272]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa78:	7b1b      	ldrb	r3, [r3, #12]
			Appl_diagActiveFault.UnderVoltage 			!= 1 &&
 801fa7a:	2b01      	cmp	r3, #1
 801fa7c:	d160      	bne.n	801fb40 <SafeRunCVMonitoring+0x124>

		}
	else{
		if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||
 801fa7e:	4b42      	ldr	r3, [pc, #264]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa80:	781b      	ldrb	r3, [r3, #0]
 801fa82:	2b01      	cmp	r3, #1
 801fa84:	d007      	beq.n	801fa96 <SafeRunCVMonitoring+0x7a>
				(Appl_diagActiveFault.PowerFail_Z2 == 1) ||
 801fa86:	4b40      	ldr	r3, [pc, #256]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa88:	785b      	ldrb	r3, [r3, #1]
		if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||
 801fa8a:	2b01      	cmp	r3, #1
 801fa8c:	d003      	beq.n	801fa96 <SafeRunCVMonitoring+0x7a>
				(Appl_diagActiveFault.PowerFail_Z3 == 1))
 801fa8e:	4b3e      	ldr	r3, [pc, #248]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fa90:	789b      	ldrb	r3, [r3, #2]
				(Appl_diagActiveFault.PowerFail_Z2 == 1) ||
 801fa92:	2b01      	cmp	r3, #1
 801fa94:	d104      	bne.n	801faa0 <SafeRunCVMonitoring+0x84>
		SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ1;
 801fa96:	4b3d      	ldr	r3, [pc, #244]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801fa98:	2205      	movs	r2, #5
 801fa9a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fa9e:	e046      	b.n	801fb2e <SafeRunCVMonitoring+0x112>
		else if(Appl_diagActiveFault.BatteryReversal 		== 1) SM_ApplParam.Pausereason = PauseReasonEnum_BatteryReversal;
 801faa0:	4b39      	ldr	r3, [pc, #228]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801faa2:	7a1b      	ldrb	r3, [r3, #8]
 801faa4:	2b01      	cmp	r3, #1
 801faa6:	d104      	bne.n	801fab2 <SafeRunCVMonitoring+0x96>
 801faa8:	4b38      	ldr	r3, [pc, #224]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801faaa:	2208      	movs	r2, #8
 801faac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fab0:	e03d      	b.n	801fb2e <SafeRunCVMonitoring+0x112>
		else if(Appl_diagActiveFault.EEPLogMemoryFull 		== 1) SM_ApplParam.Pausereason = PauseReasonEnum_EEPLogMemoryFull;
 801fab2:	4b35      	ldr	r3, [pc, #212]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fab4:	7a5b      	ldrb	r3, [r3, #9]
 801fab6:	2b01      	cmp	r3, #1
 801fab8:	d104      	bne.n	801fac4 <SafeRunCVMonitoring+0xa8>
 801faba:	4b34      	ldr	r3, [pc, #208]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801fabc:	2209      	movs	r2, #9
 801fabe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fac2:	e034      	b.n	801fb2e <SafeRunCVMonitoring+0x112>
		else if(Appl_diagActiveFault.UnderVoltage 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_UnderVoltage;
 801fac4:	4b30      	ldr	r3, [pc, #192]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fac6:	795b      	ldrb	r3, [r3, #5]
 801fac8:	2b01      	cmp	r3, #1
 801faca:	d104      	bne.n	801fad6 <SafeRunCVMonitoring+0xba>
 801facc:	4b2f      	ldr	r3, [pc, #188]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801face:	220b      	movs	r2, #11
 801fad0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fad4:	e02b      	b.n	801fb2e <SafeRunCVMonitoring+0x112>
		else if(Appl_diagActiveFault.FiltercktOpen 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_FilterCircuitOpen;
 801fad6:	4b2c      	ldr	r3, [pc, #176]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fad8:	7a9b      	ldrb	r3, [r3, #10]
 801fada:	2b01      	cmp	r3, #1
 801fadc:	d104      	bne.n	801fae8 <SafeRunCVMonitoring+0xcc>
 801fade:	4b2b      	ldr	r3, [pc, #172]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801fae0:	220d      	movs	r2, #13
 801fae2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fae6:	e022      	b.n	801fb2e <SafeRunCVMonitoring+0x112>
		else if(Appl_diagActiveFault.HighTempperatureSCR 	== 1) SM_ApplParam.Pausereason = PauseReasonEnum_HighTemp;
 801fae8:	4b27      	ldr	r3, [pc, #156]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801faea:	799b      	ldrb	r3, [r3, #6]
 801faec:	2b01      	cmp	r3, #1
 801faee:	d104      	bne.n	801fafa <SafeRunCVMonitoring+0xde>
 801faf0:	4b26      	ldr	r3, [pc, #152]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801faf2:	2206      	movs	r2, #6
 801faf4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801faf8:	e019      	b.n	801fb2e <SafeRunCVMonitoring+0x112>
		else if(Appl_diagActiveFault.OverVoltage 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverVoltage;
 801fafa:	4b23      	ldr	r3, [pc, #140]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fafc:	7adb      	ldrb	r3, [r3, #11]
 801fafe:	2b01      	cmp	r3, #1
 801fb00:	d104      	bne.n	801fb0c <SafeRunCVMonitoring+0xf0>
 801fb02:	4b22      	ldr	r3, [pc, #136]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801fb04:	220e      	movs	r2, #14
 801fb06:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fb0a:	e010      	b.n	801fb2e <SafeRunCVMonitoring+0x112>
		else if(Appl_diagActiveFault.PhaseReversal 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_PhaseReversal;
 801fb0c:	4b1e      	ldr	r3, [pc, #120]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fb0e:	79db      	ldrb	r3, [r3, #7]
 801fb10:	2b01      	cmp	r3, #1
 801fb12:	d104      	bne.n	801fb1e <SafeRunCVMonitoring+0x102>
 801fb14:	4b1d      	ldr	r3, [pc, #116]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801fb16:	2207      	movs	r2, #7
 801fb18:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fb1c:	e007      	b.n	801fb2e <SafeRunCVMonitoring+0x112>
		else if(Appl_diagActiveFault.OverCurrent == 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverCurrent;
 801fb1e:	4b1a      	ldr	r3, [pc, #104]	; (801fb88 <SafeRunCVMonitoring+0x16c>)
 801fb20:	7b1b      	ldrb	r3, [r3, #12]
 801fb22:	2b01      	cmp	r3, #1
 801fb24:	d103      	bne.n	801fb2e <SafeRunCVMonitoring+0x112>
 801fb26:	4b19      	ldr	r3, [pc, #100]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801fb28:	220f      	movs	r2, #15
 801fb2a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		SM_enumECUState = SM_enum_ECU_CVPauseMode;
 801fb2e:	4b18      	ldr	r3, [pc, #96]	; (801fb90 <SafeRunCVMonitoring+0x174>)
 801fb30:	220b      	movs	r2, #11
 801fb32:	701a      	strb	r2, [r3, #0]
		StopVoltageProvidingLoop(SM_ApplParam.Pausereason);
 801fb34:	4b15      	ldr	r3, [pc, #84]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801fb36:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801fb3a:	4618      	mov	r0, r3
 801fb3c:	f000 f9ba 	bl	801feb4 <StopVoltageProvidingLoop>
	}


	if(Appl_EEPParam.stm32.EEP_Run_Hour == Appl_EEPParam.stm32.EEP_TimerSetHours){
 801fb40:	4b10      	ldr	r3, [pc, #64]	; (801fb84 <SafeRunCVMonitoring+0x168>)
 801fb42:	7b5a      	ldrb	r2, [r3, #13]
 801fb44:	4b0f      	ldr	r3, [pc, #60]	; (801fb84 <SafeRunCVMonitoring+0x168>)
 801fb46:	7b9b      	ldrb	r3, [r3, #14]
 801fb48:	429a      	cmp	r2, r3
 801fb4a:	d118      	bne.n	801fb7e <SafeRunCVMonitoring+0x162>
		SM_ApplParam.Pausereason = PauseReasonEnum_TimerComplete;
 801fb4c:	4b0f      	ldr	r3, [pc, #60]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801fb4e:	2203      	movs	r2, #3
 801fb50:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		SM_enumECUState = SM_enum_ECU_CVPauseMode;
 801fb54:	4b0e      	ldr	r3, [pc, #56]	; (801fb90 <SafeRunCVMonitoring+0x174>)
 801fb56:	220b      	movs	r2, #11
 801fb58:	701a      	strb	r2, [r3, #0]
		Appl_EEPParam.stm32.EEP_Run_Hour = 0;
 801fb5a:	4b0a      	ldr	r3, [pc, #40]	; (801fb84 <SafeRunCVMonitoring+0x168>)
 801fb5c:	2200      	movs	r2, #0
 801fb5e:	735a      	strb	r2, [r3, #13]
		Appl_EEPParam.stm32.EEP_Run_Min = 0;
 801fb60:	4b08      	ldr	r3, [pc, #32]	; (801fb84 <SafeRunCVMonitoring+0x168>)
 801fb62:	2200      	movs	r2, #0
 801fb64:	731a      	strb	r2, [r3, #12]
		Appl_EEPParam.stm32.EEP_Run_Sec = 0;
 801fb66:	4b07      	ldr	r3, [pc, #28]	; (801fb84 <SafeRunCVMonitoring+0x168>)
 801fb68:	2200      	movs	r2, #0
 801fb6a:	72da      	strb	r2, [r3, #11]
		Appl_EEPParam.stm32.EEP_PowerFailedLastTime = 0;
 801fb6c:	4b05      	ldr	r3, [pc, #20]	; (801fb84 <SafeRunCVMonitoring+0x168>)
 801fb6e:	2200      	movs	r2, #0
 801fb70:	729a      	strb	r2, [r3, #10]
		StopVoltageProvidingLoop(SM_ApplParam.Pausereason);
 801fb72:	4b06      	ldr	r3, [pc, #24]	; (801fb8c <SafeRunCVMonitoring+0x170>)
 801fb74:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801fb78:	4618      	mov	r0, r3
 801fb7a:	f000 f99b 	bl	801feb4 <StopVoltageProvidingLoop>
	}

}
 801fb7e:	bf00      	nop
 801fb80:	bd80      	pop	{r7, pc}
 801fb82:	bf00      	nop
 801fb84:	20000278 	.word	0x20000278
 801fb88:	20004d0c 	.word	0x20004d0c
 801fb8c:	20005034 	.word	0x20005034
 801fb90:	20005114 	.word	0x20005114

0801fb94 <StartCurrentProvidingLoop>:
void StartCurrentProvidingLoop(void){
 801fb94:	b580      	push	{r7, lr}
 801fb96:	af00      	add	r7, sp, #0
	if(Appl_diagActiveFault.PowerFail_Z1 				!= 1 &&
 801fb98:	4b53      	ldr	r3, [pc, #332]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fb9a:	781b      	ldrb	r3, [r3, #0]
 801fb9c:	2b01      	cmp	r3, #1
 801fb9e:	d044      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
			Appl_diagActiveFault.PowerFail_Z2 			!= 1 &&
 801fba0:	4b51      	ldr	r3, [pc, #324]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fba2:	785b      	ldrb	r3, [r3, #1]
	if(Appl_diagActiveFault.PowerFail_Z1 				!= 1 &&
 801fba4:	2b01      	cmp	r3, #1
 801fba6:	d040      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
			Appl_diagActiveFault.PowerFail_Z3 			!= 1 &&
 801fba8:	4b4f      	ldr	r3, [pc, #316]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fbaa:	789b      	ldrb	r3, [r3, #2]
			Appl_diagActiveFault.PowerFail_Z2 			!= 1 &&
 801fbac:	2b01      	cmp	r3, #1
 801fbae:	d03c      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
			Appl_diagActiveFault.BatteryReversal 		!= 1 &&
 801fbb0:	4b4d      	ldr	r3, [pc, #308]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fbb2:	7a1b      	ldrb	r3, [r3, #8]
			Appl_diagActiveFault.PowerFail_Z3 			!= 1 &&
 801fbb4:	2b01      	cmp	r3, #1
 801fbb6:	d038      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
			Appl_diagActiveFault.EEPLogMemoryFull 		!= 1 &&
 801fbb8:	4b4b      	ldr	r3, [pc, #300]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fbba:	7a5b      	ldrb	r3, [r3, #9]
			Appl_diagActiveFault.BatteryReversal 		!= 1 &&
 801fbbc:	2b01      	cmp	r3, #1
 801fbbe:	d034      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
			Appl_diagActiveFault.HighTempperatureSCR 	!= 1 &&
 801fbc0:	4b49      	ldr	r3, [pc, #292]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fbc2:	799b      	ldrb	r3, [r3, #6]
			Appl_diagActiveFault.EEPLogMemoryFull 		!= 1 &&
 801fbc4:	2b01      	cmp	r3, #1
 801fbc6:	d030      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
			Appl_diagActiveFault.OverVoltage 			!= 1 &&
 801fbc8:	4b47      	ldr	r3, [pc, #284]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fbca:	7adb      	ldrb	r3, [r3, #11]
			Appl_diagActiveFault.HighTempperatureSCR 	!= 1 &&
 801fbcc:	2b01      	cmp	r3, #1
 801fbce:	d02c      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
			Appl_diagActiveFault.PhaseReversal 			!= 1 &&
 801fbd0:	4b45      	ldr	r3, [pc, #276]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fbd2:	79db      	ldrb	r3, [r3, #7]
			Appl_diagActiveFault.OverVoltage 			!= 1 &&
 801fbd4:	2b01      	cmp	r3, #1
 801fbd6:	d028      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
			Appl_diagActiveFault.FiltercktOpen 			!= 1 &&
 801fbd8:	4b43      	ldr	r3, [pc, #268]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fbda:	7a9b      	ldrb	r3, [r3, #10]
			Appl_diagActiveFault.PhaseReversal 			!= 1 &&
 801fbdc:	2b01      	cmp	r3, #1
 801fbde:	d024      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
			Appl_diagActiveFault.UnderVoltage 			!= 1 &&
 801fbe0:	4b41      	ldr	r3, [pc, #260]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fbe2:	795b      	ldrb	r3, [r3, #5]
			Appl_diagActiveFault.FiltercktOpen 			!= 1 &&
 801fbe4:	2b01      	cmp	r3, #1
 801fbe6:	d020      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
			Appl_diagActiveFault.OverCurrent 			!= 1){
 801fbe8:	4b3f      	ldr	r3, [pc, #252]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fbea:	7b1b      	ldrb	r3, [r3, #12]
			Appl_diagActiveFault.UnderVoltage 			!= 1 &&
 801fbec:	2b01      	cmp	r3, #1
 801fbee:	d01c      	beq.n	801fc2a <StartCurrentProvidingLoop+0x96>
		SM_enumECUState = SM_enum_ECU_CCRun_Slow;
 801fbf0:	4b3e      	ldr	r3, [pc, #248]	; (801fcec <StartCurrentProvidingLoop+0x158>)
 801fbf2:	220d      	movs	r2, #13
 801fbf4:	701a      	strb	r2, [r3, #0]
		DC_CONTACTOR_ON();
 801fbf6:	2200      	movs	r2, #0
 801fbf8:	2102      	movs	r1, #2
 801fbfa:	483d      	ldr	r0, [pc, #244]	; (801fcf0 <StartCurrentProvidingLoop+0x15c>)
 801fbfc:	f7f4 f8cc 	bl	8013d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(uC_LedOnBoard_GPIO_Port, uC_LedOnBoard_Pin,GPIO_PIN_SET);
 801fc00:	2201      	movs	r2, #1
 801fc02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801fc06:	483a      	ldr	r0, [pc, #232]	; (801fcf0 <StartCurrentProvidingLoop+0x15c>)
 801fc08:	f7f4 f8c6 	bl	8013d98 <HAL_GPIO_WritePin>
		WriteEEPData();
 801fc0c:	f7fc fac2 	bl	801c194 <WriteEEPData>
		BUZZER_ON();
 801fc10:	2201      	movs	r2, #1
 801fc12:	2140      	movs	r1, #64	; 0x40
 801fc14:	4837      	ldr	r0, [pc, #220]	; (801fcf4 <StartCurrentProvidingLoop+0x160>)
 801fc16:	f7f4 f8bf 	bl	8013d98 <HAL_GPIO_WritePin>
		SM_ApplParam.Buzzertoggle = 0;
 801fc1a:	4b37      	ldr	r3, [pc, #220]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fc1c:	2200      	movs	r2, #0
 801fc1e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		SM_ApplParam.BuzzerCounter = 0;
 801fc22:	4b35      	ldr	r3, [pc, #212]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fc24:	2200      	movs	r2, #0
 801fc26:	661a      	str	r2, [r3, #96]	; 0x60
 801fc28:	e05b      	b.n	801fce2 <StartCurrentProvidingLoop+0x14e>
	}
	else{
		if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||
 801fc2a:	4b2f      	ldr	r3, [pc, #188]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fc2c:	781b      	ldrb	r3, [r3, #0]
 801fc2e:	2b01      	cmp	r3, #1
 801fc30:	d007      	beq.n	801fc42 <StartCurrentProvidingLoop+0xae>
				(Appl_diagActiveFault.PowerFail_Z2 == 1) ||
 801fc32:	4b2d      	ldr	r3, [pc, #180]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fc34:	785b      	ldrb	r3, [r3, #1]
		if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||
 801fc36:	2b01      	cmp	r3, #1
 801fc38:	d003      	beq.n	801fc42 <StartCurrentProvidingLoop+0xae>
				(Appl_diagActiveFault.PowerFail_Z3 == 1))
 801fc3a:	4b2b      	ldr	r3, [pc, #172]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fc3c:	789b      	ldrb	r3, [r3, #2]
				(Appl_diagActiveFault.PowerFail_Z2 == 1) ||
 801fc3e:	2b01      	cmp	r3, #1
 801fc40:	d104      	bne.n	801fc4c <StartCurrentProvidingLoop+0xb8>
		SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ1;
 801fc42:	4b2d      	ldr	r3, [pc, #180]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fc44:	2205      	movs	r2, #5
 801fc46:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fc4a:	e046      	b.n	801fcda <StartCurrentProvidingLoop+0x146>
		else if(Appl_diagActiveFault.BatteryReversal 		== 1) SM_ApplParam.Pausereason = PauseReasonEnum_BatteryReversal;
 801fc4c:	4b26      	ldr	r3, [pc, #152]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fc4e:	7a1b      	ldrb	r3, [r3, #8]
 801fc50:	2b01      	cmp	r3, #1
 801fc52:	d104      	bne.n	801fc5e <StartCurrentProvidingLoop+0xca>
 801fc54:	4b28      	ldr	r3, [pc, #160]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fc56:	2208      	movs	r2, #8
 801fc58:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fc5c:	e03d      	b.n	801fcda <StartCurrentProvidingLoop+0x146>
		else if(Appl_diagActiveFault.EEPLogMemoryFull 		== 1) SM_ApplParam.Pausereason = PauseReasonEnum_EEPLogMemoryFull;
 801fc5e:	4b22      	ldr	r3, [pc, #136]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fc60:	7a5b      	ldrb	r3, [r3, #9]
 801fc62:	2b01      	cmp	r3, #1
 801fc64:	d104      	bne.n	801fc70 <StartCurrentProvidingLoop+0xdc>
 801fc66:	4b24      	ldr	r3, [pc, #144]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fc68:	2209      	movs	r2, #9
 801fc6a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fc6e:	e034      	b.n	801fcda <StartCurrentProvidingLoop+0x146>
		else if(Appl_diagActiveFault.UnderVoltage 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_UnderVoltage;
 801fc70:	4b1d      	ldr	r3, [pc, #116]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fc72:	795b      	ldrb	r3, [r3, #5]
 801fc74:	2b01      	cmp	r3, #1
 801fc76:	d104      	bne.n	801fc82 <StartCurrentProvidingLoop+0xee>
 801fc78:	4b1f      	ldr	r3, [pc, #124]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fc7a:	220b      	movs	r2, #11
 801fc7c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fc80:	e02b      	b.n	801fcda <StartCurrentProvidingLoop+0x146>
		else if(Appl_diagActiveFault.FiltercktOpen 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_FilterCircuitOpen;
 801fc82:	4b19      	ldr	r3, [pc, #100]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fc84:	7a9b      	ldrb	r3, [r3, #10]
 801fc86:	2b01      	cmp	r3, #1
 801fc88:	d104      	bne.n	801fc94 <StartCurrentProvidingLoop+0x100>
 801fc8a:	4b1b      	ldr	r3, [pc, #108]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fc8c:	220d      	movs	r2, #13
 801fc8e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fc92:	e022      	b.n	801fcda <StartCurrentProvidingLoop+0x146>
		else if(Appl_diagActiveFault.HighTempperatureSCR 	== 1) SM_ApplParam.Pausereason = PauseReasonEnum_HighTemp;
 801fc94:	4b14      	ldr	r3, [pc, #80]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fc96:	799b      	ldrb	r3, [r3, #6]
 801fc98:	2b01      	cmp	r3, #1
 801fc9a:	d104      	bne.n	801fca6 <StartCurrentProvidingLoop+0x112>
 801fc9c:	4b16      	ldr	r3, [pc, #88]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fc9e:	2206      	movs	r2, #6
 801fca0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fca4:	e019      	b.n	801fcda <StartCurrentProvidingLoop+0x146>
		else if(Appl_diagActiveFault.OverVoltage 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverVoltage;
 801fca6:	4b10      	ldr	r3, [pc, #64]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fca8:	7adb      	ldrb	r3, [r3, #11]
 801fcaa:	2b01      	cmp	r3, #1
 801fcac:	d104      	bne.n	801fcb8 <StartCurrentProvidingLoop+0x124>
 801fcae:	4b12      	ldr	r3, [pc, #72]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fcb0:	220e      	movs	r2, #14
 801fcb2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fcb6:	e010      	b.n	801fcda <StartCurrentProvidingLoop+0x146>
		else if(Appl_diagActiveFault.PhaseReversal 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_PhaseReversal;
 801fcb8:	4b0b      	ldr	r3, [pc, #44]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fcba:	79db      	ldrb	r3, [r3, #7]
 801fcbc:	2b01      	cmp	r3, #1
 801fcbe:	d104      	bne.n	801fcca <StartCurrentProvidingLoop+0x136>
 801fcc0:	4b0d      	ldr	r3, [pc, #52]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fcc2:	2207      	movs	r2, #7
 801fcc4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fcc8:	e007      	b.n	801fcda <StartCurrentProvidingLoop+0x146>
		else if(Appl_diagActiveFault.OverCurrent 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverCurrent;
 801fcca:	4b07      	ldr	r3, [pc, #28]	; (801fce8 <StartCurrentProvidingLoop+0x154>)
 801fccc:	7b1b      	ldrb	r3, [r3, #12]
 801fcce:	2b01      	cmp	r3, #1
 801fcd0:	d103      	bne.n	801fcda <StartCurrentProvidingLoop+0x146>
 801fcd2:	4b09      	ldr	r3, [pc, #36]	; (801fcf8 <StartCurrentProvidingLoop+0x164>)
 801fcd4:	220f      	movs	r2, #15
 801fcd6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		SM_enumECUState = SM_enum_ECU_CVPauseMode;
 801fcda:	4b04      	ldr	r3, [pc, #16]	; (801fcec <StartCurrentProvidingLoop+0x158>)
 801fcdc:	220b      	movs	r2, #11
 801fcde:	701a      	strb	r2, [r3, #0]
	}
}
 801fce0:	bf00      	nop
 801fce2:	bf00      	nop
 801fce4:	bd80      	pop	{r7, pc}
 801fce6:	bf00      	nop
 801fce8:	20004d0c 	.word	0x20004d0c
 801fcec:	20005114 	.word	0x20005114
 801fcf0:	40020400 	.word	0x40020400
 801fcf4:	40020800 	.word	0x40020800
 801fcf8:	20005034 	.word	0x20005034

0801fcfc <StartVoltageProvidingLoop>:

void StartVoltageProvidingLoop(void){
 801fcfc:	b580      	push	{r7, lr}
 801fcfe:	af00      	add	r7, sp, #0
	if(Appl_diagActiveFault.PowerFail_Z1 				!= 1 &&
 801fd00:	4b53      	ldr	r3, [pc, #332]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd02:	781b      	ldrb	r3, [r3, #0]
 801fd04:	2b01      	cmp	r3, #1
 801fd06:	d044      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
			Appl_diagActiveFault.PowerFail_Z2 			!= 1 &&
 801fd08:	4b51      	ldr	r3, [pc, #324]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd0a:	785b      	ldrb	r3, [r3, #1]
	if(Appl_diagActiveFault.PowerFail_Z1 				!= 1 &&
 801fd0c:	2b01      	cmp	r3, #1
 801fd0e:	d040      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
			Appl_diagActiveFault.PowerFail_Z3 			!= 1 &&
 801fd10:	4b4f      	ldr	r3, [pc, #316]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd12:	789b      	ldrb	r3, [r3, #2]
			Appl_diagActiveFault.PowerFail_Z2 			!= 1 &&
 801fd14:	2b01      	cmp	r3, #1
 801fd16:	d03c      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
			Appl_diagActiveFault.BatteryReversal 		!= 1 &&
 801fd18:	4b4d      	ldr	r3, [pc, #308]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd1a:	7a1b      	ldrb	r3, [r3, #8]
			Appl_diagActiveFault.PowerFail_Z3 			!= 1 &&
 801fd1c:	2b01      	cmp	r3, #1
 801fd1e:	d038      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
			Appl_diagActiveFault.EEPLogMemoryFull 		!= 1 &&
 801fd20:	4b4b      	ldr	r3, [pc, #300]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd22:	7a5b      	ldrb	r3, [r3, #9]
			Appl_diagActiveFault.BatteryReversal 		!= 1 &&
 801fd24:	2b01      	cmp	r3, #1
 801fd26:	d034      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
			Appl_diagActiveFault.HighTempperatureSCR 	!= 1 &&
 801fd28:	4b49      	ldr	r3, [pc, #292]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd2a:	799b      	ldrb	r3, [r3, #6]
			Appl_diagActiveFault.EEPLogMemoryFull 		!= 1 &&
 801fd2c:	2b01      	cmp	r3, #1
 801fd2e:	d030      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
			Appl_diagActiveFault.OverVoltage 			!= 1 &&
 801fd30:	4b47      	ldr	r3, [pc, #284]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd32:	7adb      	ldrb	r3, [r3, #11]
			Appl_diagActiveFault.HighTempperatureSCR 	!= 1 &&
 801fd34:	2b01      	cmp	r3, #1
 801fd36:	d02c      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
			Appl_diagActiveFault.PhaseReversal 			!= 1 &&
 801fd38:	4b45      	ldr	r3, [pc, #276]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd3a:	79db      	ldrb	r3, [r3, #7]
			Appl_diagActiveFault.OverVoltage 			!= 1 &&
 801fd3c:	2b01      	cmp	r3, #1
 801fd3e:	d028      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
			Appl_diagActiveFault.FiltercktOpen 			!= 1 &&
 801fd40:	4b43      	ldr	r3, [pc, #268]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd42:	7a9b      	ldrb	r3, [r3, #10]
			Appl_diagActiveFault.PhaseReversal 			!= 1 &&
 801fd44:	2b01      	cmp	r3, #1
 801fd46:	d024      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
			Appl_diagActiveFault.UnderVoltage 			!= 1 &&
 801fd48:	4b41      	ldr	r3, [pc, #260]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd4a:	795b      	ldrb	r3, [r3, #5]
			Appl_diagActiveFault.FiltercktOpen 			!= 1 &&
 801fd4c:	2b01      	cmp	r3, #1
 801fd4e:	d020      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
			Appl_diagActiveFault.OverCurrent 			!= 1){
 801fd50:	4b3f      	ldr	r3, [pc, #252]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd52:	7b1b      	ldrb	r3, [r3, #12]
			Appl_diagActiveFault.UnderVoltage 			!= 1 &&
 801fd54:	2b01      	cmp	r3, #1
 801fd56:	d01c      	beq.n	801fd92 <StartVoltageProvidingLoop+0x96>
		SM_enumECUState = SM_enum_ECU_CVRun_Slow;
 801fd58:	4b3e      	ldr	r3, [pc, #248]	; (801fe54 <StartVoltageProvidingLoop+0x158>)
 801fd5a:	220f      	movs	r2, #15
 801fd5c:	701a      	strb	r2, [r3, #0]
		DC_CONTACTOR_ON();
 801fd5e:	2200      	movs	r2, #0
 801fd60:	2102      	movs	r1, #2
 801fd62:	483d      	ldr	r0, [pc, #244]	; (801fe58 <StartVoltageProvidingLoop+0x15c>)
 801fd64:	f7f4 f818 	bl	8013d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(uC_LedOnBoard_GPIO_Port, uC_LedOnBoard_Pin,GPIO_PIN_SET);
 801fd68:	2201      	movs	r2, #1
 801fd6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801fd6e:	483a      	ldr	r0, [pc, #232]	; (801fe58 <StartVoltageProvidingLoop+0x15c>)
 801fd70:	f7f4 f812 	bl	8013d98 <HAL_GPIO_WritePin>
		WriteEEPData();
 801fd74:	f7fc fa0e 	bl	801c194 <WriteEEPData>
		BUZZER_ON();
 801fd78:	2201      	movs	r2, #1
 801fd7a:	2140      	movs	r1, #64	; 0x40
 801fd7c:	4837      	ldr	r0, [pc, #220]	; (801fe5c <StartVoltageProvidingLoop+0x160>)
 801fd7e:	f7f4 f80b 	bl	8013d98 <HAL_GPIO_WritePin>
		SM_ApplParam.Buzzertoggle = 0;
 801fd82:	4b37      	ldr	r3, [pc, #220]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fd84:	2200      	movs	r2, #0
 801fd86:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		SM_ApplParam.BuzzerCounter = 0;
 801fd8a:	4b35      	ldr	r3, [pc, #212]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fd8c:	2200      	movs	r2, #0
 801fd8e:	661a      	str	r2, [r3, #96]	; 0x60
 801fd90:	e05b      	b.n	801fe4a <StartVoltageProvidingLoop+0x14e>
	}
	else{
		if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||
 801fd92:	4b2f      	ldr	r3, [pc, #188]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd94:	781b      	ldrb	r3, [r3, #0]
 801fd96:	2b01      	cmp	r3, #1
 801fd98:	d007      	beq.n	801fdaa <StartVoltageProvidingLoop+0xae>
				(Appl_diagActiveFault.PowerFail_Z2 == 1) ||
 801fd9a:	4b2d      	ldr	r3, [pc, #180]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fd9c:	785b      	ldrb	r3, [r3, #1]
		if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||
 801fd9e:	2b01      	cmp	r3, #1
 801fda0:	d003      	beq.n	801fdaa <StartVoltageProvidingLoop+0xae>
				(Appl_diagActiveFault.PowerFail_Z3 == 1))
 801fda2:	4b2b      	ldr	r3, [pc, #172]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fda4:	789b      	ldrb	r3, [r3, #2]
				(Appl_diagActiveFault.PowerFail_Z2 == 1) ||
 801fda6:	2b01      	cmp	r3, #1
 801fda8:	d104      	bne.n	801fdb4 <StartVoltageProvidingLoop+0xb8>
		SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ1;
 801fdaa:	4b2d      	ldr	r3, [pc, #180]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fdac:	2205      	movs	r2, #5
 801fdae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fdb2:	e046      	b.n	801fe42 <StartVoltageProvidingLoop+0x146>
		else if(Appl_diagActiveFault.BatteryReversal 		== 1) SM_ApplParam.Pausereason = PauseReasonEnum_BatteryReversal;
 801fdb4:	4b26      	ldr	r3, [pc, #152]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fdb6:	7a1b      	ldrb	r3, [r3, #8]
 801fdb8:	2b01      	cmp	r3, #1
 801fdba:	d104      	bne.n	801fdc6 <StartVoltageProvidingLoop+0xca>
 801fdbc:	4b28      	ldr	r3, [pc, #160]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fdbe:	2208      	movs	r2, #8
 801fdc0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fdc4:	e03d      	b.n	801fe42 <StartVoltageProvidingLoop+0x146>
		else if(Appl_diagActiveFault.EEPLogMemoryFull 		== 1) SM_ApplParam.Pausereason = PauseReasonEnum_EEPLogMemoryFull;
 801fdc6:	4b22      	ldr	r3, [pc, #136]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fdc8:	7a5b      	ldrb	r3, [r3, #9]
 801fdca:	2b01      	cmp	r3, #1
 801fdcc:	d104      	bne.n	801fdd8 <StartVoltageProvidingLoop+0xdc>
 801fdce:	4b24      	ldr	r3, [pc, #144]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fdd0:	2209      	movs	r2, #9
 801fdd2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fdd6:	e034      	b.n	801fe42 <StartVoltageProvidingLoop+0x146>
		else if(Appl_diagActiveFault.UnderVoltage 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_UnderVoltage;
 801fdd8:	4b1d      	ldr	r3, [pc, #116]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fdda:	795b      	ldrb	r3, [r3, #5]
 801fddc:	2b01      	cmp	r3, #1
 801fdde:	d104      	bne.n	801fdea <StartVoltageProvidingLoop+0xee>
 801fde0:	4b1f      	ldr	r3, [pc, #124]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fde2:	220b      	movs	r2, #11
 801fde4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fde8:	e02b      	b.n	801fe42 <StartVoltageProvidingLoop+0x146>
		else if(Appl_diagActiveFault.FiltercktOpen 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_FilterCircuitOpen;
 801fdea:	4b19      	ldr	r3, [pc, #100]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fdec:	7a9b      	ldrb	r3, [r3, #10]
 801fdee:	2b01      	cmp	r3, #1
 801fdf0:	d104      	bne.n	801fdfc <StartVoltageProvidingLoop+0x100>
 801fdf2:	4b1b      	ldr	r3, [pc, #108]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fdf4:	220d      	movs	r2, #13
 801fdf6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fdfa:	e022      	b.n	801fe42 <StartVoltageProvidingLoop+0x146>
		else if(Appl_diagActiveFault.HighTempperatureSCR 	== 1) SM_ApplParam.Pausereason = PauseReasonEnum_HighTemp;
 801fdfc:	4b14      	ldr	r3, [pc, #80]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fdfe:	799b      	ldrb	r3, [r3, #6]
 801fe00:	2b01      	cmp	r3, #1
 801fe02:	d104      	bne.n	801fe0e <StartVoltageProvidingLoop+0x112>
 801fe04:	4b16      	ldr	r3, [pc, #88]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fe06:	2206      	movs	r2, #6
 801fe08:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fe0c:	e019      	b.n	801fe42 <StartVoltageProvidingLoop+0x146>
		else if(Appl_diagActiveFault.OverVoltage 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverVoltage;
 801fe0e:	4b10      	ldr	r3, [pc, #64]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fe10:	7adb      	ldrb	r3, [r3, #11]
 801fe12:	2b01      	cmp	r3, #1
 801fe14:	d104      	bne.n	801fe20 <StartVoltageProvidingLoop+0x124>
 801fe16:	4b12      	ldr	r3, [pc, #72]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fe18:	220e      	movs	r2, #14
 801fe1a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fe1e:	e010      	b.n	801fe42 <StartVoltageProvidingLoop+0x146>
		else if(Appl_diagActiveFault.PhaseReversal 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_PhaseReversal;
 801fe20:	4b0b      	ldr	r3, [pc, #44]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fe22:	79db      	ldrb	r3, [r3, #7]
 801fe24:	2b01      	cmp	r3, #1
 801fe26:	d104      	bne.n	801fe32 <StartVoltageProvidingLoop+0x136>
 801fe28:	4b0d      	ldr	r3, [pc, #52]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fe2a:	2207      	movs	r2, #7
 801fe2c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801fe30:	e007      	b.n	801fe42 <StartVoltageProvidingLoop+0x146>
		else if(Appl_diagActiveFault.OverCurrent 			== 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverCurrent;
 801fe32:	4b07      	ldr	r3, [pc, #28]	; (801fe50 <StartVoltageProvidingLoop+0x154>)
 801fe34:	7b1b      	ldrb	r3, [r3, #12]
 801fe36:	2b01      	cmp	r3, #1
 801fe38:	d103      	bne.n	801fe42 <StartVoltageProvidingLoop+0x146>
 801fe3a:	4b09      	ldr	r3, [pc, #36]	; (801fe60 <StartVoltageProvidingLoop+0x164>)
 801fe3c:	220f      	movs	r2, #15
 801fe3e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		SM_enumECUState = SM_enum_ECU_CVPauseMode;
 801fe42:	4b04      	ldr	r3, [pc, #16]	; (801fe54 <StartVoltageProvidingLoop+0x158>)
 801fe44:	220b      	movs	r2, #11
 801fe46:	701a      	strb	r2, [r3, #0]
	}
}
 801fe48:	bf00      	nop
 801fe4a:	bf00      	nop
 801fe4c:	bd80      	pop	{r7, pc}
 801fe4e:	bf00      	nop
 801fe50:	20004d0c 	.word	0x20004d0c
 801fe54:	20005114 	.word	0x20005114
 801fe58:	40020400 	.word	0x40020400
 801fe5c:	40020800 	.word	0x40020800
 801fe60:	20005034 	.word	0x20005034

0801fe64 <StopCurrentProvidingLoop>:

void StopCurrentProvidingLoop(PauseReason reason){
 801fe64:	b580      	push	{r7, lr}
 801fe66:	b082      	sub	sp, #8
 801fe68:	af00      	add	r7, sp, #0
 801fe6a:	4603      	mov	r3, r0
 801fe6c:	71fb      	strb	r3, [r7, #7]
	REDLEDON();
	GREENLEDOFF();
	HAL_GPIO_WritePin(uC_LedOnBoard_GPIO_Port, uC_LedOnBoard_Pin,GPIO_PIN_RESET);
 801fe6e:	2200      	movs	r2, #0
 801fe70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801fe74:	480c      	ldr	r0, [pc, #48]	; (801fea8 <StopCurrentProvidingLoop+0x44>)
 801fe76:	f7f3 ff8f 	bl	8013d98 <HAL_GPIO_WritePin>
	CaptureExtEEPSnapshot_SingleShot(reason);
 801fe7a:	79fb      	ldrb	r3, [r7, #7]
 801fe7c:	4618      	mov	r0, r3
 801fe7e:	f7fc fcf7 	bl	801c870 <CaptureExtEEPSnapshot_SingleShot>
	WriteEEPData();
 801fe82:	f7fc f987 	bl	801c194 <WriteEEPData>
	BUZZER_ON();
 801fe86:	2201      	movs	r2, #1
 801fe88:	2140      	movs	r1, #64	; 0x40
 801fe8a:	4808      	ldr	r0, [pc, #32]	; (801feac <StopCurrentProvidingLoop+0x48>)
 801fe8c:	f7f3 ff84 	bl	8013d98 <HAL_GPIO_WritePin>
	SM_ApplParam.Buzzertoggle = 0;
 801fe90:	4b07      	ldr	r3, [pc, #28]	; (801feb0 <StopCurrentProvidingLoop+0x4c>)
 801fe92:	2200      	movs	r2, #0
 801fe94:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	SM_ApplParam.BuzzerCounter = 0;
 801fe98:	4b05      	ldr	r3, [pc, #20]	; (801feb0 <StopCurrentProvidingLoop+0x4c>)
 801fe9a:	2200      	movs	r2, #0
 801fe9c:	661a      	str	r2, [r3, #96]	; 0x60
}
 801fe9e:	bf00      	nop
 801fea0:	3708      	adds	r7, #8
 801fea2:	46bd      	mov	sp, r7
 801fea4:	bd80      	pop	{r7, pc}
 801fea6:	bf00      	nop
 801fea8:	40020400 	.word	0x40020400
 801feac:	40020800 	.word	0x40020800
 801feb0:	20005034 	.word	0x20005034

0801feb4 <StopVoltageProvidingLoop>:

void StopVoltageProvidingLoop(PauseReason reason){
 801feb4:	b580      	push	{r7, lr}
 801feb6:	b082      	sub	sp, #8
 801feb8:	af00      	add	r7, sp, #0
 801feba:	4603      	mov	r3, r0
 801febc:	71fb      	strb	r3, [r7, #7]
	REDLEDON();
	GREENLEDOFF();
//	DC_CONTACTOR_OFF(); /*Purposefully removed from here because, the capacitor used to hold a lot of voltage*/
	HAL_GPIO_WritePin(uC_LedOnBoard_GPIO_Port, uC_LedOnBoard_Pin,GPIO_PIN_RESET);
 801febe:	2200      	movs	r2, #0
 801fec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801fec4:	480c      	ldr	r0, [pc, #48]	; (801fef8 <StopVoltageProvidingLoop+0x44>)
 801fec6:	f7f3 ff67 	bl	8013d98 <HAL_GPIO_WritePin>
	CaptureExtEEPSnapshot_SingleShot(reason);
 801feca:	79fb      	ldrb	r3, [r7, #7]
 801fecc:	4618      	mov	r0, r3
 801fece:	f7fc fccf 	bl	801c870 <CaptureExtEEPSnapshot_SingleShot>
	WriteEEPData();
 801fed2:	f7fc f95f 	bl	801c194 <WriteEEPData>
	BUZZER_ON();
 801fed6:	2201      	movs	r2, #1
 801fed8:	2140      	movs	r1, #64	; 0x40
 801feda:	4808      	ldr	r0, [pc, #32]	; (801fefc <StopVoltageProvidingLoop+0x48>)
 801fedc:	f7f3 ff5c 	bl	8013d98 <HAL_GPIO_WritePin>
	SM_ApplParam.Buzzertoggle = 0;
 801fee0:	4b07      	ldr	r3, [pc, #28]	; (801ff00 <StopVoltageProvidingLoop+0x4c>)
 801fee2:	2200      	movs	r2, #0
 801fee4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	SM_ApplParam.BuzzerCounter = 0;
 801fee8:	4b05      	ldr	r3, [pc, #20]	; (801ff00 <StopVoltageProvidingLoop+0x4c>)
 801feea:	2200      	movs	r2, #0
 801feec:	661a      	str	r2, [r3, #96]	; 0x60
}
 801feee:	bf00      	nop
 801fef0:	3708      	adds	r7, #8
 801fef2:	46bd      	mov	sp, r7
 801fef4:	bd80      	pop	{r7, pc}
 801fef6:	bf00      	nop
 801fef8:	40020400 	.word	0x40020400
 801fefc:	40020800 	.word	0x40020800
 801ff00:	20005034 	.word	0x20005034

0801ff04 <switchOnBuzzer>:

void switchOnBuzzer(void){
 801ff04:	b580      	push	{r7, lr}
 801ff06:	af00      	add	r7, sp, #0
	static uint8_t offtime = 125;
	static uint8_t ontime = 75;
	ALL_INDICATORS_ON();
 801ff08:	2201      	movs	r2, #1
 801ff0a:	2140      	movs	r1, #64	; 0x40
 801ff0c:	484c      	ldr	r0, [pc, #304]	; (8020040 <switchOnBuzzer+0x13c>)
 801ff0e:	f7f3 ff43 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801ff12:	4b4c      	ldr	r3, [pc, #304]	; (8020044 <switchOnBuzzer+0x140>)
 801ff14:	781b      	ldrb	r3, [r3, #0]
 801ff16:	4618      	mov	r0, r3
 801ff18:	f7f2 fa74 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_OFF();
 801ff1c:	2200      	movs	r2, #0
 801ff1e:	2140      	movs	r1, #64	; 0x40
 801ff20:	4847      	ldr	r0, [pc, #284]	; (8020040 <switchOnBuzzer+0x13c>)
 801ff22:	f7f3 ff39 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 801ff26:	4b48      	ldr	r3, [pc, #288]	; (8020048 <switchOnBuzzer+0x144>)
 801ff28:	781b      	ldrb	r3, [r3, #0]
 801ff2a:	4618      	mov	r0, r3
 801ff2c:	f7f2 fa6a 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_ON();
 801ff30:	2201      	movs	r2, #1
 801ff32:	2140      	movs	r1, #64	; 0x40
 801ff34:	4842      	ldr	r0, [pc, #264]	; (8020040 <switchOnBuzzer+0x13c>)
 801ff36:	f7f3 ff2f 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801ff3a:	4b42      	ldr	r3, [pc, #264]	; (8020044 <switchOnBuzzer+0x140>)
 801ff3c:	781b      	ldrb	r3, [r3, #0]
 801ff3e:	4618      	mov	r0, r3
 801ff40:	f7f2 fa60 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_OFF();
 801ff44:	2200      	movs	r2, #0
 801ff46:	2140      	movs	r1, #64	; 0x40
 801ff48:	483d      	ldr	r0, [pc, #244]	; (8020040 <switchOnBuzzer+0x13c>)
 801ff4a:	f7f3 ff25 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 801ff4e:	4b3e      	ldr	r3, [pc, #248]	; (8020048 <switchOnBuzzer+0x144>)
 801ff50:	781b      	ldrb	r3, [r3, #0]
 801ff52:	4618      	mov	r0, r3
 801ff54:	f7f2 fa56 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_ON();
 801ff58:	2201      	movs	r2, #1
 801ff5a:	2140      	movs	r1, #64	; 0x40
 801ff5c:	4838      	ldr	r0, [pc, #224]	; (8020040 <switchOnBuzzer+0x13c>)
 801ff5e:	f7f3 ff1b 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801ff62:	4b38      	ldr	r3, [pc, #224]	; (8020044 <switchOnBuzzer+0x140>)
 801ff64:	781b      	ldrb	r3, [r3, #0]
 801ff66:	4618      	mov	r0, r3
 801ff68:	f7f2 fa4c 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_OFF();
 801ff6c:	2200      	movs	r2, #0
 801ff6e:	2140      	movs	r1, #64	; 0x40
 801ff70:	4833      	ldr	r0, [pc, #204]	; (8020040 <switchOnBuzzer+0x13c>)
 801ff72:	f7f3 ff11 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 801ff76:	4b34      	ldr	r3, [pc, #208]	; (8020048 <switchOnBuzzer+0x144>)
 801ff78:	781b      	ldrb	r3, [r3, #0]
 801ff7a:	4618      	mov	r0, r3
 801ff7c:	f7f2 fa42 	bl	8012404 <HAL_Delay>

	ALL_INDICATORS_ON();
 801ff80:	2201      	movs	r2, #1
 801ff82:	2140      	movs	r1, #64	; 0x40
 801ff84:	482e      	ldr	r0, [pc, #184]	; (8020040 <switchOnBuzzer+0x13c>)
 801ff86:	f7f3 ff07 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 801ff8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801ff8e:	f7f2 fa39 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_OFF();
 801ff92:	2200      	movs	r2, #0
 801ff94:	2140      	movs	r1, #64	; 0x40
 801ff96:	482a      	ldr	r0, [pc, #168]	; (8020040 <switchOnBuzzer+0x13c>)
 801ff98:	f7f3 fefe 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 801ff9c:	20fa      	movs	r0, #250	; 0xfa
 801ff9e:	f7f2 fa31 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_ON();
 801ffa2:	2201      	movs	r2, #1
 801ffa4:	2140      	movs	r1, #64	; 0x40
 801ffa6:	4826      	ldr	r0, [pc, #152]	; (8020040 <switchOnBuzzer+0x13c>)
 801ffa8:	f7f3 fef6 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 801ffac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801ffb0:	f7f2 fa28 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_OFF();
 801ffb4:	2200      	movs	r2, #0
 801ffb6:	2140      	movs	r1, #64	; 0x40
 801ffb8:	4821      	ldr	r0, [pc, #132]	; (8020040 <switchOnBuzzer+0x13c>)
 801ffba:	f7f3 feed 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 801ffbe:	20fa      	movs	r0, #250	; 0xfa
 801ffc0:	f7f2 fa20 	bl	8012404 <HAL_Delay>

	ALL_INDICATORS_ON();
 801ffc4:	2201      	movs	r2, #1
 801ffc6:	2140      	movs	r1, #64	; 0x40
 801ffc8:	481d      	ldr	r0, [pc, #116]	; (8020040 <switchOnBuzzer+0x13c>)
 801ffca:	f7f3 fee5 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801ffce:	4b1d      	ldr	r3, [pc, #116]	; (8020044 <switchOnBuzzer+0x140>)
 801ffd0:	781b      	ldrb	r3, [r3, #0]
 801ffd2:	4618      	mov	r0, r3
 801ffd4:	f7f2 fa16 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_OFF();
 801ffd8:	2200      	movs	r2, #0
 801ffda:	2140      	movs	r1, #64	; 0x40
 801ffdc:	4818      	ldr	r0, [pc, #96]	; (8020040 <switchOnBuzzer+0x13c>)
 801ffde:	f7f3 fedb 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 801ffe2:	4b19      	ldr	r3, [pc, #100]	; (8020048 <switchOnBuzzer+0x144>)
 801ffe4:	781b      	ldrb	r3, [r3, #0]
 801ffe6:	4618      	mov	r0, r3
 801ffe8:	f7f2 fa0c 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_ON();
 801ffec:	2201      	movs	r2, #1
 801ffee:	2140      	movs	r1, #64	; 0x40
 801fff0:	4813      	ldr	r0, [pc, #76]	; (8020040 <switchOnBuzzer+0x13c>)
 801fff2:	f7f3 fed1 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801fff6:	4b13      	ldr	r3, [pc, #76]	; (8020044 <switchOnBuzzer+0x140>)
 801fff8:	781b      	ldrb	r3, [r3, #0]
 801fffa:	4618      	mov	r0, r3
 801fffc:	f7f2 fa02 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_OFF();
 8020000:	2200      	movs	r2, #0
 8020002:	2140      	movs	r1, #64	; 0x40
 8020004:	480e      	ldr	r0, [pc, #56]	; (8020040 <switchOnBuzzer+0x13c>)
 8020006:	f7f3 fec7 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 802000a:	4b0f      	ldr	r3, [pc, #60]	; (8020048 <switchOnBuzzer+0x144>)
 802000c:	781b      	ldrb	r3, [r3, #0]
 802000e:	4618      	mov	r0, r3
 8020010:	f7f2 f9f8 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_ON();
 8020014:	2201      	movs	r2, #1
 8020016:	2140      	movs	r1, #64	; 0x40
 8020018:	4809      	ldr	r0, [pc, #36]	; (8020040 <switchOnBuzzer+0x13c>)
 802001a:	f7f3 febd 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 802001e:	4b09      	ldr	r3, [pc, #36]	; (8020044 <switchOnBuzzer+0x140>)
 8020020:	781b      	ldrb	r3, [r3, #0]
 8020022:	4618      	mov	r0, r3
 8020024:	f7f2 f9ee 	bl	8012404 <HAL_Delay>
	ALL_INDICATORS_OFF();
 8020028:	2200      	movs	r2, #0
 802002a:	2140      	movs	r1, #64	; 0x40
 802002c:	4804      	ldr	r0, [pc, #16]	; (8020040 <switchOnBuzzer+0x13c>)
 802002e:	f7f3 feb3 	bl	8013d98 <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 8020032:	4b05      	ldr	r3, [pc, #20]	; (8020048 <switchOnBuzzer+0x144>)
 8020034:	781b      	ldrb	r3, [r3, #0]
 8020036:	4618      	mov	r0, r3
 8020038:	f7f2 f9e4 	bl	8012404 <HAL_Delay>
}
 802003c:	bf00      	nop
 802003e:	bd80      	pop	{r7, pc}
 8020040:	40020800 	.word	0x40020800
 8020044:	200002c0 	.word	0x200002c0
 8020048:	200002c1 	.word	0x200002c1
 802004c:	00000000 	.word	0x00000000

08020050 <StartSelftestCVPrepare>:


void StartSelftestCVPrepare(uint8_t loopms){
 8020050:	b5b0      	push	{r4, r5, r7, lr}
 8020052:	b082      	sub	sp, #8
 8020054:	af00      	add	r7, sp, #0
 8020056:	4603      	mov	r3, r0
 8020058:	71fb      	strb	r3, [r7, #7]
	 * Stage 5 : Disconnect the DC Contactor
	 * Stage 6 : Connect the Filter bank
	 * Stage 7 : slowly charge it till 90% of Noted battery voltage
	 * Stage 8 : Turn DC contactor on and start loop
	 */
	SM_ApplParam.ap_PrepareCounter0++;
 802005a:	4b4b      	ldr	r3, [pc, #300]	; (8020188 <StartSelftestCVPrepare+0x138>)
 802005c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802005e:	3301      	adds	r3, #1
 8020060:	4a49      	ldr	r2, [pc, #292]	; (8020188 <StartSelftestCVPrepare+0x138>)
 8020062:	6393      	str	r3, [r2, #56]	; 0x38
	if(SM_ApplParam.ap_PrepareCounter1 == 0){
 8020064:	4b48      	ldr	r3, [pc, #288]	; (8020188 <StartSelftestCVPrepare+0x138>)
 8020066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020068:	2b00      	cmp	r3, #0
 802006a:	d104      	bne.n	8020076 <StartSelftestCVPrepare+0x26>
		DC_CONTACTOR_ON();
 802006c:	2200      	movs	r2, #0
 802006e:	2102      	movs	r1, #2
 8020070:	4846      	ldr	r0, [pc, #280]	; (802018c <StartSelftestCVPrepare+0x13c>)
 8020072:	f7f3 fe91 	bl	8013d98 <HAL_GPIO_WritePin>
	}
	if(SM_ApplParam.ap_PrepareCounter0 >= (2500/loopms)){
 8020076:	4b44      	ldr	r3, [pc, #272]	; (8020188 <StartSelftestCVPrepare+0x138>)
 8020078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802007a:	79fa      	ldrb	r2, [r7, #7]
 802007c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8020080:	fb91 f2f2 	sdiv	r2, r1, r2
 8020084:	4293      	cmp	r3, r2
 8020086:	d376      	bcc.n	8020176 <StartSelftestCVPrepare+0x126>
		if(SM_ApplParam.ap_PrepareCounter1 == 0){
 8020088:	4b3f      	ldr	r3, [pc, #252]	; (8020188 <StartSelftestCVPrepare+0x138>)
 802008a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802008c:	2b00      	cmp	r3, #0
 802008e:	d108      	bne.n	80200a2 <StartSelftestCVPrepare+0x52>
			SM_ApplParam.InitialBatteryVoltage = SM_ApplParam.RealtimeVoltage;
 8020090:	4b3d      	ldr	r3, [pc, #244]	; (8020188 <StartSelftestCVPrepare+0x138>)
 8020092:	689b      	ldr	r3, [r3, #8]
 8020094:	4a3c      	ldr	r2, [pc, #240]	; (8020188 <StartSelftestCVPrepare+0x138>)
 8020096:	6293      	str	r3, [r2, #40]	; 0x28
//			SM_ApplParam.InitialBatteryVoltage = (float)Appl_EEPParam.stm32.EEP_CV_SetVoltage;
			DC_CONTACTOR_OFF();
 8020098:	2201      	movs	r2, #1
 802009a:	2102      	movs	r1, #2
 802009c:	483b      	ldr	r0, [pc, #236]	; (802018c <StartSelftestCVPrepare+0x13c>)
 802009e:	f7f3 fe7b 	bl	8013d98 <HAL_GPIO_WritePin>
		}
		SM_ApplParam.ap_PrepareCounter1++;
 80200a2:	4b39      	ldr	r3, [pc, #228]	; (8020188 <StartSelftestCVPrepare+0x138>)
 80200a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80200a6:	3301      	adds	r3, #1
 80200a8:	4a37      	ldr	r2, [pc, #220]	; (8020188 <StartSelftestCVPrepare+0x138>)
 80200aa:	63d3      	str	r3, [r2, #60]	; 0x3c
		if(SM_ApplParam.ap_PrepareCounter1 >= (2500/loopms)){
 80200ac:	4b36      	ldr	r3, [pc, #216]	; (8020188 <StartSelftestCVPrepare+0x138>)
 80200ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80200b0:	79fa      	ldrb	r2, [r7, #7]
 80200b2:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80200b6:	fb91 f2f2 	sdiv	r2, r1, r2
 80200ba:	4293      	cmp	r3, r2
 80200bc:	d35b      	bcc.n	8020176 <StartSelftestCVPrepare+0x126>
			DC_CONTACTOR_OFF();
 80200be:	2201      	movs	r2, #1
 80200c0:	2102      	movs	r1, #2
 80200c2:	4832      	ldr	r0, [pc, #200]	; (802018c <StartSelftestCVPrepare+0x13c>)
 80200c4:	f7f3 fe68 	bl	8013d98 <HAL_GPIO_WritePin>
			CAPCONTACTOR_ON();
 80200c8:	2200      	movs	r2, #0
 80200ca:	2180      	movs	r1, #128	; 0x80
 80200cc:	4830      	ldr	r0, [pc, #192]	; (8020190 <StartSelftestCVPrepare+0x140>)
 80200ce:	f7f3 fe63 	bl	8013d98 <HAL_GPIO_WritePin>
			/*Vishwesh:
			 * I use SM_ApplParam.ap_PrepareMode flag to handle
			 * SCR trigger to happen only when
			 * Capacitor contactor is on. Else do not trigger SCR.
			 */
			SM_ApplParam.ap_PrepareMode = 1;
 80200d2:	4b2d      	ldr	r3, [pc, #180]	; (8020188 <StartSelftestCVPrepare+0x138>)
 80200d4:	2201      	movs	r2, #1
 80200d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			SM_ApplParam.PreparePercentage = (SM_ApplParam.RealtimeVoltage/SM_ApplParam.InitialBatteryVoltage*0.7)*100;
 80200da:	4b2b      	ldr	r3, [pc, #172]	; (8020188 <StartSelftestCVPrepare+0x138>)
 80200dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80200e0:	4b29      	ldr	r3, [pc, #164]	; (8020188 <StartSelftestCVPrepare+0x138>)
 80200e2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80200e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80200ea:	ee16 0a90 	vmov	r0, s13
 80200ee:	f7f0 f963 	bl	80103b8 <__aeabi_f2d>
 80200f2:	a323      	add	r3, pc, #140	; (adr r3, 8020180 <StartSelftestCVPrepare+0x130>)
 80200f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200f8:	f7f0 f9b6 	bl	8010468 <__aeabi_dmul>
 80200fc:	4602      	mov	r2, r0
 80200fe:	460b      	mov	r3, r1
 8020100:	4610      	mov	r0, r2
 8020102:	4619      	mov	r1, r3
 8020104:	f04f 0200 	mov.w	r2, #0
 8020108:	4b22      	ldr	r3, [pc, #136]	; (8020194 <StartSelftestCVPrepare+0x144>)
 802010a:	f7f0 f9ad 	bl	8010468 <__aeabi_dmul>
 802010e:	4602      	mov	r2, r0
 8020110:	460b      	mov	r3, r1
 8020112:	4610      	mov	r0, r2
 8020114:	4619      	mov	r1, r3
 8020116:	f7f0 fc9f 	bl	8010a58 <__aeabi_d2f>
 802011a:	4603      	mov	r3, r0
 802011c:	4a1a      	ldr	r2, [pc, #104]	; (8020188 <StartSelftestCVPrepare+0x138>)
 802011e:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(SM_ApplParam.RealtimeVoltage > (SM_ApplParam.InitialBatteryVoltage * 0.7)){
 8020120:	4b19      	ldr	r3, [pc, #100]	; (8020188 <StartSelftestCVPrepare+0x138>)
 8020122:	689b      	ldr	r3, [r3, #8]
 8020124:	4618      	mov	r0, r3
 8020126:	f7f0 f947 	bl	80103b8 <__aeabi_f2d>
 802012a:	4604      	mov	r4, r0
 802012c:	460d      	mov	r5, r1
 802012e:	4b16      	ldr	r3, [pc, #88]	; (8020188 <StartSelftestCVPrepare+0x138>)
 8020130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020132:	4618      	mov	r0, r3
 8020134:	f7f0 f940 	bl	80103b8 <__aeabi_f2d>
 8020138:	a311      	add	r3, pc, #68	; (adr r3, 8020180 <StartSelftestCVPrepare+0x130>)
 802013a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802013e:	f7f0 f993 	bl	8010468 <__aeabi_dmul>
 8020142:	4602      	mov	r2, r0
 8020144:	460b      	mov	r3, r1
 8020146:	4620      	mov	r0, r4
 8020148:	4629      	mov	r1, r5
 802014a:	f7f0 fc1d 	bl	8010988 <__aeabi_dcmpgt>
 802014e:	4603      	mov	r3, r0
 8020150:	2b00      	cmp	r3, #0
 8020152:	d100      	bne.n	8020156 <StartSelftestCVPrepare+0x106>
				SM_ApplParam.ap_PrepareMode = 0;
				SM_ApplParam.PreparePercentage = 0;
			}
		}
	}
}
 8020154:	e00f      	b.n	8020176 <StartSelftestCVPrepare+0x126>
				StartVoltageProvidingLoop();
 8020156:	f7ff fdd1 	bl	801fcfc <StartVoltageProvidingLoop>
				SM_ApplParam.ap_PrepareCounter1 = 0;
 802015a:	4b0b      	ldr	r3, [pc, #44]	; (8020188 <StartSelftestCVPrepare+0x138>)
 802015c:	2200      	movs	r2, #0
 802015e:	63da      	str	r2, [r3, #60]	; 0x3c
				SM_ApplParam.ap_PrepareCounter0 = 0;
 8020160:	4b09      	ldr	r3, [pc, #36]	; (8020188 <StartSelftestCVPrepare+0x138>)
 8020162:	2200      	movs	r2, #0
 8020164:	639a      	str	r2, [r3, #56]	; 0x38
				SM_ApplParam.ap_PrepareMode = 0;
 8020166:	4b08      	ldr	r3, [pc, #32]	; (8020188 <StartSelftestCVPrepare+0x138>)
 8020168:	2200      	movs	r2, #0
 802016a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				SM_ApplParam.PreparePercentage = 0;
 802016e:	4b06      	ldr	r3, [pc, #24]	; (8020188 <StartSelftestCVPrepare+0x138>)
 8020170:	f04f 0200 	mov.w	r2, #0
 8020174:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8020176:	bf00      	nop
 8020178:	3708      	adds	r7, #8
 802017a:	46bd      	mov	sp, r7
 802017c:	bdb0      	pop	{r4, r5, r7, pc}
 802017e:	bf00      	nop
 8020180:	66666666 	.word	0x66666666
 8020184:	3fe66666 	.word	0x3fe66666
 8020188:	20005034 	.word	0x20005034
 802018c:	40020400 	.word	0x40020400
 8020190:	40020800 	.word	0x40020800
 8020194:	40590000 	.word	0x40590000

08020198 <StartSelftestCCPrepare>:

void StartSelftestCCPrepare(uint8_t loopms){
 8020198:	b5b0      	push	{r4, r5, r7, lr}
 802019a:	b082      	sub	sp, #8
 802019c:	af00      	add	r7, sp, #0
 802019e:	4603      	mov	r3, r0
 80201a0:	71fb      	strb	r3, [r7, #7]
	 * Stage 5 : Disconnect the DC Contactor
	 * Stage 6 : Connect the Filter bank
	 * Stage 7 : slowly charge it till 90% of Noted battery voltage
	 * Stage 8 : Turn DC contactor on and start loop
	 */
	SM_ApplParam.ap_PrepareCounter0++;
 80201a2:	4b4f      	ldr	r3, [pc, #316]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80201a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80201a6:	3301      	adds	r3, #1
 80201a8:	4a4d      	ldr	r2, [pc, #308]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80201aa:	6393      	str	r3, [r2, #56]	; 0x38
	if(SM_ApplParam.ap_PrepareCounter1 == 0){
 80201ac:	4b4c      	ldr	r3, [pc, #304]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80201ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80201b0:	2b00      	cmp	r3, #0
 80201b2:	d104      	bne.n	80201be <StartSelftestCCPrepare+0x26>
		DC_CONTACTOR_ON();
 80201b4:	2200      	movs	r2, #0
 80201b6:	2102      	movs	r1, #2
 80201b8:	484a      	ldr	r0, [pc, #296]	; (80202e4 <StartSelftestCCPrepare+0x14c>)
 80201ba:	f7f3 fded 	bl	8013d98 <HAL_GPIO_WritePin>
	}
	if(SM_ApplParam.ap_PrepareCounter0 >= (2500/loopms)){
 80201be:	4b48      	ldr	r3, [pc, #288]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80201c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80201c2:	79fa      	ldrb	r2, [r7, #7]
 80201c4:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80201c8:	fb91 f2f2 	sdiv	r2, r1, r2
 80201cc:	4293      	cmp	r3, r2
 80201ce:	d37c      	bcc.n	80202ca <StartSelftestCCPrepare+0x132>
		if(SM_ApplParam.ap_PrepareCounter1 == 0){
 80201d0:	4b43      	ldr	r3, [pc, #268]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80201d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d108      	bne.n	80201ea <StartSelftestCCPrepare+0x52>
			SM_ApplParam.InitialBatteryVoltage = SM_ApplParam.RealtimeVoltage;
 80201d8:	4b41      	ldr	r3, [pc, #260]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80201da:	689b      	ldr	r3, [r3, #8]
 80201dc:	4a40      	ldr	r2, [pc, #256]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80201de:	6293      	str	r3, [r2, #40]	; 0x28
//			SM_ApplParam.InitialBatteryVoltage = (float)Appl_EEPParam.stm32.EEP_CC_CutOffVoltage;
			DC_CONTACTOR_OFF();
 80201e0:	2201      	movs	r2, #1
 80201e2:	2102      	movs	r1, #2
 80201e4:	483f      	ldr	r0, [pc, #252]	; (80202e4 <StartSelftestCCPrepare+0x14c>)
 80201e6:	f7f3 fdd7 	bl	8013d98 <HAL_GPIO_WritePin>
		}
		SM_ApplParam.ap_PrepareCounter1++;
 80201ea:	4b3d      	ldr	r3, [pc, #244]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80201ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80201ee:	3301      	adds	r3, #1
 80201f0:	4a3b      	ldr	r2, [pc, #236]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80201f2:	63d3      	str	r3, [r2, #60]	; 0x3c
		if(SM_ApplParam.ap_PrepareCounter1 >= (2500/loopms)){
 80201f4:	4b3a      	ldr	r3, [pc, #232]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80201f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80201f8:	79fa      	ldrb	r2, [r7, #7]
 80201fa:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80201fe:	fb91 f2f2 	sdiv	r2, r1, r2
 8020202:	4293      	cmp	r3, r2
 8020204:	d361      	bcc.n	80202ca <StartSelftestCCPrepare+0x132>
			DC_CONTACTOR_OFF();
 8020206:	2201      	movs	r2, #1
 8020208:	2102      	movs	r1, #2
 802020a:	4836      	ldr	r0, [pc, #216]	; (80202e4 <StartSelftestCCPrepare+0x14c>)
 802020c:	f7f3 fdc4 	bl	8013d98 <HAL_GPIO_WritePin>
			CAPCONTACTOR_ON();
 8020210:	2200      	movs	r2, #0
 8020212:	2180      	movs	r1, #128	; 0x80
 8020214:	4834      	ldr	r0, [pc, #208]	; (80202e8 <StartSelftestCCPrepare+0x150>)
 8020216:	f7f3 fdbf 	bl	8013d98 <HAL_GPIO_WritePin>
			SM_ApplParam.ap_PrepareMode = 1;
 802021a:	4b31      	ldr	r3, [pc, #196]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 802021c:	2201      	movs	r2, #1
 802021e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			SM_ApplParam.PreparePercentage = (SM_ApplParam.RealtimeVoltage/(SM_ApplParam.InitialBatteryVoltage*0.7))*100;
 8020222:	4b2f      	ldr	r3, [pc, #188]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 8020224:	689b      	ldr	r3, [r3, #8]
 8020226:	4618      	mov	r0, r3
 8020228:	f7f0 f8c6 	bl	80103b8 <__aeabi_f2d>
 802022c:	4604      	mov	r4, r0
 802022e:	460d      	mov	r5, r1
 8020230:	4b2b      	ldr	r3, [pc, #172]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 8020232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020234:	4618      	mov	r0, r3
 8020236:	f7f0 f8bf 	bl	80103b8 <__aeabi_f2d>
 802023a:	a327      	add	r3, pc, #156	; (adr r3, 80202d8 <StartSelftestCCPrepare+0x140>)
 802023c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020240:	f7f0 f912 	bl	8010468 <__aeabi_dmul>
 8020244:	4602      	mov	r2, r0
 8020246:	460b      	mov	r3, r1
 8020248:	4620      	mov	r0, r4
 802024a:	4629      	mov	r1, r5
 802024c:	f7f0 fa36 	bl	80106bc <__aeabi_ddiv>
 8020250:	4602      	mov	r2, r0
 8020252:	460b      	mov	r3, r1
 8020254:	4610      	mov	r0, r2
 8020256:	4619      	mov	r1, r3
 8020258:	f04f 0200 	mov.w	r2, #0
 802025c:	4b23      	ldr	r3, [pc, #140]	; (80202ec <StartSelftestCCPrepare+0x154>)
 802025e:	f7f0 f903 	bl	8010468 <__aeabi_dmul>
 8020262:	4602      	mov	r2, r0
 8020264:	460b      	mov	r3, r1
 8020266:	4610      	mov	r0, r2
 8020268:	4619      	mov	r1, r3
 802026a:	f7f0 fbf5 	bl	8010a58 <__aeabi_d2f>
 802026e:	4603      	mov	r3, r0
 8020270:	4a1b      	ldr	r2, [pc, #108]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 8020272:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(SM_ApplParam.RealtimeVoltage > (SM_ApplParam.InitialBatteryVoltage*0.7)){
 8020274:	4b1a      	ldr	r3, [pc, #104]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 8020276:	689b      	ldr	r3, [r3, #8]
 8020278:	4618      	mov	r0, r3
 802027a:	f7f0 f89d 	bl	80103b8 <__aeabi_f2d>
 802027e:	4604      	mov	r4, r0
 8020280:	460d      	mov	r5, r1
 8020282:	4b17      	ldr	r3, [pc, #92]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 8020284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020286:	4618      	mov	r0, r3
 8020288:	f7f0 f896 	bl	80103b8 <__aeabi_f2d>
 802028c:	a312      	add	r3, pc, #72	; (adr r3, 80202d8 <StartSelftestCCPrepare+0x140>)
 802028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020292:	f7f0 f8e9 	bl	8010468 <__aeabi_dmul>
 8020296:	4602      	mov	r2, r0
 8020298:	460b      	mov	r3, r1
 802029a:	4620      	mov	r0, r4
 802029c:	4629      	mov	r1, r5
 802029e:	f7f0 fb73 	bl	8010988 <__aeabi_dcmpgt>
 80202a2:	4603      	mov	r3, r0
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	d100      	bne.n	80202aa <StartSelftestCCPrepare+0x112>
				SM_ApplParam.PreparePercentage = 0;

			}
		}
	}
}
 80202a8:	e00f      	b.n	80202ca <StartSelftestCCPrepare+0x132>
				StartCurrentProvidingLoop();
 80202aa:	f7ff fc73 	bl	801fb94 <StartCurrentProvidingLoop>
				SM_ApplParam.ap_PrepareCounter1 = 0;
 80202ae:	4b0c      	ldr	r3, [pc, #48]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80202b0:	2200      	movs	r2, #0
 80202b2:	63da      	str	r2, [r3, #60]	; 0x3c
				SM_ApplParam.ap_PrepareCounter0 = 0;
 80202b4:	4b0a      	ldr	r3, [pc, #40]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80202b6:	2200      	movs	r2, #0
 80202b8:	639a      	str	r2, [r3, #56]	; 0x38
				SM_ApplParam.ap_PrepareMode = 0;
 80202ba:	4b09      	ldr	r3, [pc, #36]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80202bc:	2200      	movs	r2, #0
 80202be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				SM_ApplParam.PreparePercentage = 0;
 80202c2:	4b07      	ldr	r3, [pc, #28]	; (80202e0 <StartSelftestCCPrepare+0x148>)
 80202c4:	f04f 0200 	mov.w	r2, #0
 80202c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80202ca:	bf00      	nop
 80202cc:	3708      	adds	r7, #8
 80202ce:	46bd      	mov	sp, r7
 80202d0:	bdb0      	pop	{r4, r5, r7, pc}
 80202d2:	bf00      	nop
 80202d4:	f3af 8000 	nop.w
 80202d8:	66666666 	.word	0x66666666
 80202dc:	3fe66666 	.word	0x3fe66666
 80202e0:	20005034 	.word	0x20005034
 80202e4:	40020400 	.word	0x40020400
 80202e8:	40020800 	.word	0x40020800
 80202ec:	40590000 	.word	0x40590000

080202f0 <VishwaAdcInit>:
------------------------------------------------------------------------------*/
#define ADC_TEST 				(0)
#define NUMBER_OF_CONVERSIONS	(10)
#define ADC_THRESHOLD			(7)

void VishwaAdcInit(void){
 80202f0:	b580      	push	{r7, lr}
 80202f2:	af00      	add	r7, sp, #0
	/*Vishwesh : 4 ADC configured, However only 2 being used
	 * ADC samples at rate of 10kHz. Good enough for 150 Hz pulses
	 * */

	memset(Appl_u16pAdcDmaValues,0,sizeof(Appl_u16pAdcDmaValues));
 80202f4:	2208      	movs	r2, #8
 80202f6:	2100      	movs	r1, #0
 80202f8:	481b      	ldr	r0, [pc, #108]	; (8020368 <VishwaAdcInit+0x78>)
 80202fa:	f003 ff3d 	bl	8024178 <memset>
	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Appl_u16pAdcDmaValues, 4)){
 80202fe:	2204      	movs	r2, #4
 8020300:	4919      	ldr	r1, [pc, #100]	; (8020368 <VishwaAdcInit+0x78>)
 8020302:	481a      	ldr	r0, [pc, #104]	; (802036c <VishwaAdcInit+0x7c>)
 8020304:	f7f2 f8e6 	bl	80124d4 <HAL_ADC_Start_DMA>
 8020308:	4603      	mov	r3, r0
 802030a:	2b00      	cmp	r3, #0
 802030c:	d001      	beq.n	8020312 <VishwaAdcInit+0x22>
		Error_Handler();
 802030e:	f7f1 fbc5 	bl	8011a9c <Error_Handler>
	}
	RectifiedSineAnalyzer_Config(&Sinev1,10000,0.1);
 8020312:	eddf 0a17 	vldr	s1, [pc, #92]	; 8020370 <VishwaAdcInit+0x80>
 8020316:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8020374 <VishwaAdcInit+0x84>
 802031a:	4817      	ldr	r0, [pc, #92]	; (8020378 <VishwaAdcInit+0x88>)
 802031c:	f000 f9b6 	bl	802068c <RectifiedSineAnalyzer_Config>
	RectifiedSineAnalyzer_Config(&Sinev2,10000,0.1);
 8020320:	eddf 0a13 	vldr	s1, [pc, #76]	; 8020370 <VishwaAdcInit+0x80>
 8020324:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8020374 <VishwaAdcInit+0x84>
 8020328:	4814      	ldr	r0, [pc, #80]	; (802037c <VishwaAdcInit+0x8c>)
 802032a:	f000 f9af 	bl	802068c <RectifiedSineAnalyzer_Config>
	RectifiedSineAnalyzer_Config(&Sinei1,10000,0.1);
 802032e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8020370 <VishwaAdcInit+0x80>
 8020332:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8020374 <VishwaAdcInit+0x84>
 8020336:	4812      	ldr	r0, [pc, #72]	; (8020380 <VishwaAdcInit+0x90>)
 8020338:	f000 f9a8 	bl	802068c <RectifiedSineAnalyzer_Config>
	RectifiedSineAnalyzer_Config(&Sinei2,10000,0.1);
 802033c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8020370 <VishwaAdcInit+0x80>
 8020340:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8020374 <VishwaAdcInit+0x84>
 8020344:	480f      	ldr	r0, [pc, #60]	; (8020384 <VishwaAdcInit+0x94>)
 8020346:	f000 f9a1 	bl	802068c <RectifiedSineAnalyzer_Config>
	Sinev1.Recalibrateflag = 0;
 802034a:	4b0b      	ldr	r3, [pc, #44]	; (8020378 <VishwaAdcInit+0x88>)
 802034c:	2200      	movs	r2, #0
 802034e:	701a      	strb	r2, [r3, #0]
	Sinei1.Recalibrateflag = 0;
 8020350:	4b0b      	ldr	r3, [pc, #44]	; (8020380 <VishwaAdcInit+0x90>)
 8020352:	2200      	movs	r2, #0
 8020354:	701a      	strb	r2, [r3, #0]
	Sinev2.Recalibrateflag = 0;
 8020356:	4b09      	ldr	r3, [pc, #36]	; (802037c <VishwaAdcInit+0x8c>)
 8020358:	2200      	movs	r2, #0
 802035a:	701a      	strb	r2, [r3, #0]
	Sinei2.Recalibrateflag = 0;
 802035c:	4b09      	ldr	r3, [pc, #36]	; (8020384 <VishwaAdcInit+0x94>)
 802035e:	2200      	movs	r2, #0
 8020360:	701a      	strb	r2, [r3, #0]
}
 8020362:	bf00      	nop
 8020364:	bd80      	pop	{r7, pc}
 8020366:	bf00      	nop
 8020368:	20000940 	.word	0x20000940
 802036c:	20004ad4 	.word	0x20004ad4
 8020370:	3dcccccd 	.word	0x3dcccccd
 8020374:	461c4000 	.word	0x461c4000
 8020378:	200053e8 	.word	0x200053e8
 802037c:	20005364 	.word	0x20005364
 8020380:	20005328 	.word	0x20005328
 8020384:	200052b8 	.word	0x200052b8

08020388 <Appl_fncCalculateFeedbackShuntCurrent>:
  ptrArrNumbers[pos] = nextNum;
  //return the average
  return *ptrSum / len;
}

void Appl_fncCalculateFeedbackShuntCurrent(void){
 8020388:	b580      	push	{r7, lr}
 802038a:	af00      	add	r7, sp, #0
	static uint16_t AdcCalibCounter;
	if(Sinei1.Recalibrateflag == 1){
 802038c:	4b27      	ldr	r3, [pc, #156]	; (802042c <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 802038e:	781b      	ldrb	r3, [r3, #0]
 8020390:	2b00      	cmp	r3, #0
 8020392:	d01f      	beq.n	80203d4 <Appl_fncCalculateFeedbackShuntCurrent+0x4c>
		AdcCalibCounter++;
 8020394:	4b26      	ldr	r3, [pc, #152]	; (8020430 <Appl_fncCalculateFeedbackShuntCurrent+0xa8>)
 8020396:	881b      	ldrh	r3, [r3, #0]
 8020398:	3301      	adds	r3, #1
 802039a:	b29a      	uxth	r2, r3
 802039c:	4b24      	ldr	r3, [pc, #144]	; (8020430 <Appl_fncCalculateFeedbackShuntCurrent+0xa8>)
 802039e:	801a      	strh	r2, [r3, #0]
		Sinei1.SinemeasOffset = Appl_u16pAdcDmaValues[1] * ( VISHWA_ADC_4096_INVERSE);
 80203a0:	4b24      	ldr	r3, [pc, #144]	; (8020434 <Appl_fncCalculateFeedbackShuntCurrent+0xac>)
 80203a2:	885b      	ldrh	r3, [r3, #2]
 80203a4:	ee07 3a90 	vmov	s15, r3
 80203a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80203ac:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8020438 <Appl_fncCalculateFeedbackShuntCurrent+0xb0>
 80203b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80203b4:	4b1d      	ldr	r3, [pc, #116]	; (802042c <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 80203b6:	edc3 7a01 	vstr	s15, [r3, #4]
		if(AdcCalibCounter > 25000){
 80203ba:	4b1d      	ldr	r3, [pc, #116]	; (8020430 <Appl_fncCalculateFeedbackShuntCurrent+0xa8>)
 80203bc:	881b      	ldrh	r3, [r3, #0]
 80203be:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80203c2:	4293      	cmp	r3, r2
 80203c4:	d930      	bls.n	8020428 <Appl_fncCalculateFeedbackShuntCurrent+0xa0>
			AdcCalibCounter = 0;
 80203c6:	4b1a      	ldr	r3, [pc, #104]	; (8020430 <Appl_fncCalculateFeedbackShuntCurrent+0xa8>)
 80203c8:	2200      	movs	r2, #0
 80203ca:	801a      	strh	r2, [r3, #0]
			Sinei1.Recalibrateflag = 0;
 80203cc:	4b17      	ldr	r3, [pc, #92]	; (802042c <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 80203ce:	2200      	movs	r2, #0
 80203d0:	701a      	strb	r2, [r3, #0]
		RectifiedSineAnalyzer(&Sinei1);
//		SM_ApplParam.RealtimeShuntCurrent = Sinei1.vRms * VISHWA_I1_MAX_SENSE_AMPS;
		SM_ApplParam.RealtimeShuntCurrent_vrms = Sinei1.vRms * VISHWA_I1_MAX_SENSE_AMPS;
		SM_ApplParam.RealtimeShuntCurrent_vavg = Sinei1.vAvg * VISHWA_I1_MAX_SENSE_AMPS;
	}
}
 80203d2:	e029      	b.n	8020428 <Appl_fncCalculateFeedbackShuntCurrent+0xa0>
		Sinei1.SinemeasOffset = 0;
 80203d4:	4b15      	ldr	r3, [pc, #84]	; (802042c <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 80203d6:	f04f 0200 	mov.w	r2, #0
 80203da:	605a      	str	r2, [r3, #4]
		Sinei1.Sinemeaspu = (Appl_u16pAdcDmaValues[1] ) * VISHWA_ADC_4096_INVERSE ;
 80203dc:	4b15      	ldr	r3, [pc, #84]	; (8020434 <Appl_fncCalculateFeedbackShuntCurrent+0xac>)
 80203de:	885b      	ldrh	r3, [r3, #2]
 80203e0:	ee07 3a90 	vmov	s15, r3
 80203e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80203e8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8020438 <Appl_fncCalculateFeedbackShuntCurrent+0xb0>
 80203ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80203f0:	4b0e      	ldr	r3, [pc, #56]	; (802042c <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 80203f2:	edc3 7a02 	vstr	s15, [r3, #8]
		RectifiedSineAnalyzer(&Sinei1);
 80203f6:	480d      	ldr	r0, [pc, #52]	; (802042c <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 80203f8:	f000 f8c2 	bl	8020580 <RectifiedSineAnalyzer>
		SM_ApplParam.RealtimeShuntCurrent_vrms = Sinei1.vRms * VISHWA_I1_MAX_SENSE_AMPS;
 80203fc:	4b0b      	ldr	r3, [pc, #44]	; (802042c <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 80203fe:	ed93 7a05 	vldr	s14, [r3, #20]
 8020402:	4b0e      	ldr	r3, [pc, #56]	; (802043c <Appl_fncCalculateFeedbackShuntCurrent+0xb4>)
 8020404:	edd3 7a00 	vldr	s15, [r3]
 8020408:	ee67 7a27 	vmul.f32	s15, s14, s15
 802040c:	4b0c      	ldr	r3, [pc, #48]	; (8020440 <Appl_fncCalculateFeedbackShuntCurrent+0xb8>)
 802040e:	edc3 7a04 	vstr	s15, [r3, #16]
		SM_ApplParam.RealtimeShuntCurrent_vavg = Sinei1.vAvg * VISHWA_I1_MAX_SENSE_AMPS;
 8020412:	4b06      	ldr	r3, [pc, #24]	; (802042c <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 8020414:	ed93 7a06 	vldr	s14, [r3, #24]
 8020418:	4b08      	ldr	r3, [pc, #32]	; (802043c <Appl_fncCalculateFeedbackShuntCurrent+0xb4>)
 802041a:	edd3 7a00 	vldr	s15, [r3]
 802041e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020422:	4b07      	ldr	r3, [pc, #28]	; (8020440 <Appl_fncCalculateFeedbackShuntCurrent+0xb8>)
 8020424:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8020428:	bf00      	nop
 802042a:	bd80      	pop	{r7, pc}
 802042c:	20005328 	.word	0x20005328
 8020430:	20000948 	.word	0x20000948
 8020434:	20000940 	.word	0x20000940
 8020438:	39800000 	.word	0x39800000
 802043c:	200002c8 	.word	0x200002c8
 8020440:	20005034 	.word	0x20005034

08020444 <HAL_ADC_ConvCpltCallback>:
			if(FindPeakBufferHallCurrent[i]> peakValue)peakValue = FindPeakBufferHallCurrent[i];
		}
	}
	return peakValue;
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8020444:	b580      	push	{r7, lr}
 8020446:	b082      	sub	sp, #8
 8020448:	af00      	add	r7, sp, #0
 802044a:	6078      	str	r0, [r7, #4]
	Appl_fncCalculateFeedbackVoltage();
 802044c:	f000 f838 	bl	80204c0 <Appl_fncCalculateFeedbackVoltage>
//	Appl_fncCalculateFeedbackHallCurrent();
	Appl_fncCalculateFeedbackShuntCurrent();
 8020450:	f7ff ff9a 	bl	8020388 <Appl_fncCalculateFeedbackShuntCurrent>
	SM_ApplParam.RealtimeCurrent = SM_ApplParam.RealtimeShuntCurrent_vavg;
 8020454:	4b17      	ldr	r3, [pc, #92]	; (80204b4 <HAL_ADC_ConvCpltCallback+0x70>)
 8020456:	695b      	ldr	r3, [r3, #20]
 8020458:	4a16      	ldr	r2, [pc, #88]	; (80204b4 <HAL_ADC_ConvCpltCallback+0x70>)
 802045a:	60d3      	str	r3, [r2, #12]
	if((CAPCONTACTOR_STATE() == GPIO_PIN_RESET) || (DC_CONTACTOR_STATE() == GPIO_PIN_RESET)){
 802045c:	2180      	movs	r1, #128	; 0x80
 802045e:	4816      	ldr	r0, [pc, #88]	; (80204b8 <HAL_ADC_ConvCpltCallback+0x74>)
 8020460:	f7f3 fc82 	bl	8013d68 <HAL_GPIO_ReadPin>
 8020464:	4603      	mov	r3, r0
 8020466:	2b00      	cmp	r3, #0
 8020468:	d006      	beq.n	8020478 <HAL_ADC_ConvCpltCallback+0x34>
 802046a:	2102      	movs	r1, #2
 802046c:	4813      	ldr	r0, [pc, #76]	; (80204bc <HAL_ADC_ConvCpltCallback+0x78>)
 802046e:	f7f3 fc7b 	bl	8013d68 <HAL_GPIO_ReadPin>
 8020472:	4603      	mov	r3, r0
 8020474:	2b00      	cmp	r3, #0
 8020476:	d114      	bne.n	80204a2 <HAL_ADC_ConvCpltCallback+0x5e>
		SM_ApplParam.RealtimeVoltage = SM_ApplParam.Realtime_floatingVoltage_vavg;
 8020478:	4b0e      	ldr	r3, [pc, #56]	; (80204b4 <HAL_ADC_ConvCpltCallback+0x70>)
 802047a:	685b      	ldr	r3, [r3, #4]
 802047c:	4a0d      	ldr	r2, [pc, #52]	; (80204b4 <HAL_ADC_ConvCpltCallback+0x70>)
 802047e:	6093      	str	r3, [r2, #8]
		if(SM_ApplParam.RealtimeVoltage < 5) SM_ApplParam.RealtimeVoltage = 0;
 8020480:	4b0c      	ldr	r3, [pc, #48]	; (80204b4 <HAL_ADC_ConvCpltCallback+0x70>)
 8020482:	edd3 7a02 	vldr	s15, [r3, #8]
 8020486:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 802048a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020492:	d503      	bpl.n	802049c <HAL_ADC_ConvCpltCallback+0x58>
 8020494:	4b07      	ldr	r3, [pc, #28]	; (80204b4 <HAL_ADC_ConvCpltCallback+0x70>)
 8020496:	f04f 0200 	mov.w	r2, #0
 802049a:	609a      	str	r2, [r3, #8]
		Appl_AdcPhaseAngleDetermination();
 802049c:	f7fe fd2a 	bl	801eef4 <Appl_AdcPhaseAngleDetermination>
 80204a0:	e004      	b.n	80204ac <HAL_ADC_ConvCpltCallback+0x68>
	}
	else{
		SM_ApplParam.RealtimeVoltage = 0;
 80204a2:	4b04      	ldr	r3, [pc, #16]	; (80204b4 <HAL_ADC_ConvCpltCallback+0x70>)
 80204a4:	f04f 0200 	mov.w	r2, #0
 80204a8:	609a      	str	r2, [r3, #8]
	}

}
 80204aa:	bf00      	nop
 80204ac:	bf00      	nop
 80204ae:	3708      	adds	r7, #8
 80204b0:	46bd      	mov	sp, r7
 80204b2:	bd80      	pop	{r7, pc}
 80204b4:	20005034 	.word	0x20005034
 80204b8:	40020800 	.word	0x40020800
 80204bc:	40020400 	.word	0x40020400

080204c0 <Appl_fncCalculateFeedbackVoltage>:


void Appl_fncCalculateFeedbackVoltage(void){
 80204c0:	b580      	push	{r7, lr}
 80204c2:	af00      	add	r7, sp, #0
	Appl_u8MovingAvgPositionVoltage++;
	if(Appl_u8MovingAvgPositionVoltage>=MOVING_AVERAGE_SIZE_VOLTAGE)Appl_u8MovingAvgPositionVoltage=0;
	SM_ApplParam.Realtime_floatingVoltage = ((Appl_fltAdcRawValueVoltage * 3.3)*(1)/((4096.0)*(0.002123142))) - 0.005;
#endif
#if 1
	if(Sinev1.Recalibrateflag == 1){
 80204c4:	4b28      	ldr	r3, [pc, #160]	; (8020568 <Appl_fncCalculateFeedbackVoltage+0xa8>)
 80204c6:	781b      	ldrb	r3, [r3, #0]
 80204c8:	2b00      	cmp	r3, #0
 80204ca:	d01f      	beq.n	802050c <Appl_fncCalculateFeedbackVoltage+0x4c>
		AdcCalibCounter++;
 80204cc:	4b27      	ldr	r3, [pc, #156]	; (802056c <Appl_fncCalculateFeedbackVoltage+0xac>)
 80204ce:	881b      	ldrh	r3, [r3, #0]
 80204d0:	3301      	adds	r3, #1
 80204d2:	b29a      	uxth	r2, r3
 80204d4:	4b25      	ldr	r3, [pc, #148]	; (802056c <Appl_fncCalculateFeedbackVoltage+0xac>)
 80204d6:	801a      	strh	r2, [r3, #0]
		Sinev1.SinemeasOffset = Appl_u16pAdcDmaValues[0] * ( VISHWA_ADC_4096_INVERSE);
 80204d8:	4b25      	ldr	r3, [pc, #148]	; (8020570 <Appl_fncCalculateFeedbackVoltage+0xb0>)
 80204da:	881b      	ldrh	r3, [r3, #0]
 80204dc:	ee07 3a90 	vmov	s15, r3
 80204e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80204e4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8020574 <Appl_fncCalculateFeedbackVoltage+0xb4>
 80204e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80204ec:	4b1e      	ldr	r3, [pc, #120]	; (8020568 <Appl_fncCalculateFeedbackVoltage+0xa8>)
 80204ee:	edc3 7a01 	vstr	s15, [r3, #4]
		if(AdcCalibCounter > 25000){
 80204f2:	4b1e      	ldr	r3, [pc, #120]	; (802056c <Appl_fncCalculateFeedbackVoltage+0xac>)
 80204f4:	881b      	ldrh	r3, [r3, #0]
 80204f6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80204fa:	4293      	cmp	r3, r2
 80204fc:	d931      	bls.n	8020562 <Appl_fncCalculateFeedbackVoltage+0xa2>
			AdcCalibCounter = 0;
 80204fe:	4b1b      	ldr	r3, [pc, #108]	; (802056c <Appl_fncCalculateFeedbackVoltage+0xac>)
 8020500:	2200      	movs	r2, #0
 8020502:	801a      	strh	r2, [r3, #0]
			Sinev1.Recalibrateflag = 0;
 8020504:	4b18      	ldr	r3, [pc, #96]	; (8020568 <Appl_fncCalculateFeedbackVoltage+0xa8>)
 8020506:	2200      	movs	r2, #0
 8020508:	701a      	strb	r2, [r3, #0]
		RectifiedSineAnalyzer(&Sinev1);
		SM_ApplParam.Realtime_floatingVoltage_vrms = Sinev1.vRms * VISHWA_V1_MAX_SENSE_VOLTS;
		SM_ApplParam.Realtime_floatingVoltage_vavg = Sinev1.vAvg * VISHWA_V1_MAX_SENSE_VOLTS;
	}
#endif
}
 802050a:	e02a      	b.n	8020562 <Appl_fncCalculateFeedbackVoltage+0xa2>
		Sinev1.Sinemeaspu = Appl_u16pAdcDmaValues[0] * VISHWA_ADC_4096_INVERSE - Sinev1.SinemeasOffset;
 802050c:	4b18      	ldr	r3, [pc, #96]	; (8020570 <Appl_fncCalculateFeedbackVoltage+0xb0>)
 802050e:	881b      	ldrh	r3, [r3, #0]
 8020510:	ee07 3a90 	vmov	s15, r3
 8020514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020518:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8020574 <Appl_fncCalculateFeedbackVoltage+0xb4>
 802051c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020520:	4b11      	ldr	r3, [pc, #68]	; (8020568 <Appl_fncCalculateFeedbackVoltage+0xa8>)
 8020522:	edd3 7a01 	vldr	s15, [r3, #4]
 8020526:	ee77 7a67 	vsub.f32	s15, s14, s15
 802052a:	4b0f      	ldr	r3, [pc, #60]	; (8020568 <Appl_fncCalculateFeedbackVoltage+0xa8>)
 802052c:	edc3 7a02 	vstr	s15, [r3, #8]
		RectifiedSineAnalyzer(&Sinev1);
 8020530:	480d      	ldr	r0, [pc, #52]	; (8020568 <Appl_fncCalculateFeedbackVoltage+0xa8>)
 8020532:	f000 f825 	bl	8020580 <RectifiedSineAnalyzer>
		SM_ApplParam.Realtime_floatingVoltage_vrms = Sinev1.vRms * VISHWA_V1_MAX_SENSE_VOLTS;
 8020536:	4b0c      	ldr	r3, [pc, #48]	; (8020568 <Appl_fncCalculateFeedbackVoltage+0xa8>)
 8020538:	ed93 7a05 	vldr	s14, [r3, #20]
 802053c:	4b0e      	ldr	r3, [pc, #56]	; (8020578 <Appl_fncCalculateFeedbackVoltage+0xb8>)
 802053e:	edd3 7a00 	vldr	s15, [r3]
 8020542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020546:	4b0d      	ldr	r3, [pc, #52]	; (802057c <Appl_fncCalculateFeedbackVoltage+0xbc>)
 8020548:	edc3 7a00 	vstr	s15, [r3]
		SM_ApplParam.Realtime_floatingVoltage_vavg = Sinev1.vAvg * VISHWA_V1_MAX_SENSE_VOLTS;
 802054c:	4b06      	ldr	r3, [pc, #24]	; (8020568 <Appl_fncCalculateFeedbackVoltage+0xa8>)
 802054e:	ed93 7a06 	vldr	s14, [r3, #24]
 8020552:	4b09      	ldr	r3, [pc, #36]	; (8020578 <Appl_fncCalculateFeedbackVoltage+0xb8>)
 8020554:	edd3 7a00 	vldr	s15, [r3]
 8020558:	ee67 7a27 	vmul.f32	s15, s14, s15
 802055c:	4b07      	ldr	r3, [pc, #28]	; (802057c <Appl_fncCalculateFeedbackVoltage+0xbc>)
 802055e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8020562:	bf00      	nop
 8020564:	bd80      	pop	{r7, pc}
 8020566:	bf00      	nop
 8020568:	200053e8 	.word	0x200053e8
 802056c:	2000094a 	.word	0x2000094a
 8020570:	20000940 	.word	0x20000940
 8020574:	39800000 	.word	0x39800000
 8020578:	200002c4 	.word	0x200002c4
 802057c:	20005034 	.word	0x20005034

08020580 <RectifiedSineAnalyzer>:

uint32_t noofsamples=200;

void RectifiedSineAnalyzer(vishwaAdc* v){
 8020580:	b580      	push	{r7, lr}
 8020582:	b082      	sub	sp, #8
 8020584:	af00      	add	r7, sp, #0
 8020586:	6078      	str	r0, [r7, #4]
	v->nSamples++;
 8020588:	687b      	ldr	r3, [r7, #4]
 802058a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802058c:	1c5a      	adds	r2, r3, #1
 802058e:	687b      	ldr	r3, [r7, #4]
 8020590:	62da      	str	r2, [r3, #44]	; 0x2c
	v->vSum = v->vSum+v->Sinemeaspu;
 8020592:	687b      	ldr	r3, [r7, #4]
 8020594:	ed93 7a08 	vldr	s14, [r3, #32]
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	edd3 7a02 	vldr	s15, [r3, #8]
 802059e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	edc3 7a08 	vstr	s15, [r3, #32]
    v->vSqrSum = v->vSqrSum+(v->Sinemeaspu*v->Sinemeaspu);
 80205a8:	687b      	ldr	r3, [r7, #4]
 80205aa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80205ae:	687b      	ldr	r3, [r7, #4]
 80205b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80205ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80205be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    v->vEma = v->vEma+(v->emaFilterMultiplier*(v->Sinemeaspu - v->vEma));
 80205c8:	687b      	ldr	r3, [r7, #4]
 80205ca:	ed93 7a07 	vldr	s14, [r3, #28]
 80205ce:	687b      	ldr	r3, [r7, #4]
 80205d0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	ed93 6a02 	vldr	s12, [r3, #8]
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80205e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80205e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80205e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	edc3 7a07 	vstr	s15, [r3, #28]
    if(v->nSamples >= noofsamples)
 80205f2:	687b      	ldr	r3, [r7, #4]
 80205f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80205f6:	461a      	mov	r2, r3
 80205f8:	4b23      	ldr	r3, [pc, #140]	; (8020688 <RectifiedSineAnalyzer+0x108>)
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	429a      	cmp	r2, r3
 80205fe:	d33f      	bcc.n	8020680 <RectifiedSineAnalyzer+0x100>
    {
        v->inverse_nSamples = (1.0f)/(v->nSamples);
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020604:	ee07 3a90 	vmov	s15, r3
 8020608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802060c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        v->sqrt_inverse_nSamples = sqrtf(v->inverse_nSamples);
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8020620:	eeb0 0a67 	vmov.f32	s0, s15
 8020624:	f003 fd28 	bl	8024078 <sqrtf>
 8020628:	eef0 7a40 	vmov.f32	s15, s0
 802062c:	687b      	ldr	r3, [r7, #4]
 802062e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        v->vAvg = (v->vSum*v->inverse_nSamples);
 8020632:	687b      	ldr	r3, [r7, #4]
 8020634:	ed93 7a08 	vldr	s14, [r3, #32]
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 802063e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020642:	687b      	ldr	r3, [r7, #4]
 8020644:	edc3 7a06 	vstr	s15, [r3, #24]
        v->vRms = sqrtf(v->vSqrSum)*v->sqrt_inverse_nSamples;
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 802064e:	eeb0 0a67 	vmov.f32	s0, s15
 8020652:	f003 fd11 	bl	8024078 <sqrtf>
 8020656:	eeb0 7a40 	vmov.f32	s14, s0
 802065a:	687b      	ldr	r3, [r7, #4]
 802065c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8020660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	edc3 7a05 	vstr	s15, [r3, #20]
        v->nSamples=0;
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	2200      	movs	r2, #0
 802066e:	62da      	str	r2, [r3, #44]	; 0x2c
        v->vSum=0;
 8020670:	687b      	ldr	r3, [r7, #4]
 8020672:	f04f 0200 	mov.w	r2, #0
 8020676:	621a      	str	r2, [r3, #32]
        v->vSqrSum=0;
 8020678:	687b      	ldr	r3, [r7, #4]
 802067a:	f04f 0200 	mov.w	r2, #0
 802067e:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8020680:	bf00      	nop
 8020682:	3708      	adds	r7, #8
 8020684:	46bd      	mov	sp, r7
 8020686:	bd80      	pop	{r7, pc}
 8020688:	200002cc 	.word	0x200002cc

0802068c <RectifiedSineAnalyzer_Config>:

void RectifiedSineAnalyzer_Config(vishwaAdc* v,float isrFrequency, float threshold){
 802068c:	b480      	push	{r7}
 802068e:	b085      	sub	sp, #20
 8020690:	af00      	add	r7, sp, #0
 8020692:	60f8      	str	r0, [r7, #12]
 8020694:	ed87 0a02 	vstr	s0, [r7, #8]
 8020698:	edc7 0a01 	vstr	s1, [r7, #4]
    v->sampleFreq = (float)(isrFrequency);
 802069c:	68fb      	ldr	r3, [r7, #12]
 802069e:	68ba      	ldr	r2, [r7, #8]
 80206a0:	60da      	str	r2, [r3, #12]
    v->threshold = (float)(threshold);
 80206a2:	68fb      	ldr	r3, [r7, #12]
 80206a4:	687a      	ldr	r2, [r7, #4]
 80206a6:	611a      	str	r2, [r3, #16]
    v->emaFilterMultiplier=2.0f/isrFrequency;
 80206a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80206ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80206b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80206b4:	68fb      	ldr	r3, [r7, #12]
 80206b6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 80206ba:	bf00      	nop
 80206bc:	3714      	adds	r7, #20
 80206be:	46bd      	mov	sp, r7
 80206c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206c4:	4770      	bx	lr

080206c6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80206c6:	b580      	push	{r7, lr}
 80206c8:	b084      	sub	sp, #16
 80206ca:	af00      	add	r7, sp, #0
 80206cc:	6078      	str	r0, [r7, #4]
 80206ce:	460b      	mov	r3, r1
 80206d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80206d2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80206d6:	f003 fc8b 	bl	8023ff0 <USBD_static_malloc>
 80206da:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80206dc:	68fb      	ldr	r3, [r7, #12]
 80206de:	2b00      	cmp	r3, #0
 80206e0:	d105      	bne.n	80206ee <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80206e2:	687b      	ldr	r3, [r7, #4]
 80206e4:	2200      	movs	r2, #0
 80206e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80206ea:	2302      	movs	r3, #2
 80206ec:	e066      	b.n	80207bc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80206ee:	687b      	ldr	r3, [r7, #4]
 80206f0:	68fa      	ldr	r2, [r7, #12]
 80206f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80206f6:	687b      	ldr	r3, [r7, #4]
 80206f8:	7c1b      	ldrb	r3, [r3, #16]
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d119      	bne.n	8020732 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80206fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020702:	2202      	movs	r2, #2
 8020704:	2181      	movs	r1, #129	; 0x81
 8020706:	6878      	ldr	r0, [r7, #4]
 8020708:	f003 fb01 	bl	8023d0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	2201      	movs	r2, #1
 8020710:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020716:	2202      	movs	r2, #2
 8020718:	2101      	movs	r1, #1
 802071a:	6878      	ldr	r0, [r7, #4]
 802071c:	f003 faf7 	bl	8023d0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8020720:	687b      	ldr	r3, [r7, #4]
 8020722:	2201      	movs	r2, #1
 8020724:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8020728:	687b      	ldr	r3, [r7, #4]
 802072a:	2210      	movs	r2, #16
 802072c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8020730:	e016      	b.n	8020760 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020732:	2340      	movs	r3, #64	; 0x40
 8020734:	2202      	movs	r2, #2
 8020736:	2181      	movs	r1, #129	; 0x81
 8020738:	6878      	ldr	r0, [r7, #4]
 802073a:	f003 fae8 	bl	8023d0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	2201      	movs	r2, #1
 8020742:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020744:	2340      	movs	r3, #64	; 0x40
 8020746:	2202      	movs	r2, #2
 8020748:	2101      	movs	r1, #1
 802074a:	6878      	ldr	r0, [r7, #4]
 802074c:	f003 fadf 	bl	8023d0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8020750:	687b      	ldr	r3, [r7, #4]
 8020752:	2201      	movs	r2, #1
 8020754:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	2210      	movs	r2, #16
 802075c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8020760:	2308      	movs	r3, #8
 8020762:	2203      	movs	r2, #3
 8020764:	2182      	movs	r1, #130	; 0x82
 8020766:	6878      	ldr	r0, [r7, #4]
 8020768:	f003 fad1 	bl	8023d0e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	2201      	movs	r2, #1
 8020770:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802077a:	681b      	ldr	r3, [r3, #0]
 802077c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 802077e:	68fb      	ldr	r3, [r7, #12]
 8020780:	2200      	movs	r2, #0
 8020782:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8020786:	68fb      	ldr	r3, [r7, #12]
 8020788:	2200      	movs	r2, #0
 802078a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	7c1b      	ldrb	r3, [r3, #16]
 8020792:	2b00      	cmp	r3, #0
 8020794:	d109      	bne.n	80207aa <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020796:	68fb      	ldr	r3, [r7, #12]
 8020798:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802079c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80207a0:	2101      	movs	r1, #1
 80207a2:	6878      	ldr	r0, [r7, #4]
 80207a4:	f003 fba2 	bl	8023eec <USBD_LL_PrepareReceive>
 80207a8:	e007      	b.n	80207ba <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80207aa:	68fb      	ldr	r3, [r7, #12]
 80207ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80207b0:	2340      	movs	r3, #64	; 0x40
 80207b2:	2101      	movs	r1, #1
 80207b4:	6878      	ldr	r0, [r7, #4]
 80207b6:	f003 fb99 	bl	8023eec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80207ba:	2300      	movs	r3, #0
}
 80207bc:	4618      	mov	r0, r3
 80207be:	3710      	adds	r7, #16
 80207c0:	46bd      	mov	sp, r7
 80207c2:	bd80      	pop	{r7, pc}

080207c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80207c4:	b580      	push	{r7, lr}
 80207c6:	b082      	sub	sp, #8
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	6078      	str	r0, [r7, #4]
 80207cc:	460b      	mov	r3, r1
 80207ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80207d0:	2181      	movs	r1, #129	; 0x81
 80207d2:	6878      	ldr	r0, [r7, #4]
 80207d4:	f003 fac1 	bl	8023d5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	2200      	movs	r2, #0
 80207dc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80207de:	2101      	movs	r1, #1
 80207e0:	6878      	ldr	r0, [r7, #4]
 80207e2:	f003 faba 	bl	8023d5a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80207e6:	687b      	ldr	r3, [r7, #4]
 80207e8:	2200      	movs	r2, #0
 80207ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80207ee:	2182      	movs	r1, #130	; 0x82
 80207f0:	6878      	ldr	r0, [r7, #4]
 80207f2:	f003 fab2 	bl	8023d5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80207f6:	687b      	ldr	r3, [r7, #4]
 80207f8:	2200      	movs	r2, #0
 80207fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	2200      	movs	r2, #0
 8020802:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8020806:	687b      	ldr	r3, [r7, #4]
 8020808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802080c:	2b00      	cmp	r3, #0
 802080e:	d00e      	beq.n	802082e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020816:	685b      	ldr	r3, [r3, #4]
 8020818:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020820:	4618      	mov	r0, r3
 8020822:	f003 fbf3 	bl	802400c <USBD_static_free>
    pdev->pClassData = NULL;
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	2200      	movs	r2, #0
 802082a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 802082e:	2300      	movs	r3, #0
}
 8020830:	4618      	mov	r0, r3
 8020832:	3708      	adds	r7, #8
 8020834:	46bd      	mov	sp, r7
 8020836:	bd80      	pop	{r7, pc}

08020838 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8020838:	b580      	push	{r7, lr}
 802083a:	b086      	sub	sp, #24
 802083c:	af00      	add	r7, sp, #0
 802083e:	6078      	str	r0, [r7, #4]
 8020840:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020842:	687b      	ldr	r3, [r7, #4]
 8020844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020848:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 802084a:	2300      	movs	r3, #0
 802084c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 802084e:	2300      	movs	r3, #0
 8020850:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8020852:	2300      	movs	r3, #0
 8020854:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8020856:	693b      	ldr	r3, [r7, #16]
 8020858:	2b00      	cmp	r3, #0
 802085a:	d101      	bne.n	8020860 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 802085c:	2303      	movs	r3, #3
 802085e:	e0af      	b.n	80209c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020860:	683b      	ldr	r3, [r7, #0]
 8020862:	781b      	ldrb	r3, [r3, #0]
 8020864:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020868:	2b00      	cmp	r3, #0
 802086a:	d03f      	beq.n	80208ec <USBD_CDC_Setup+0xb4>
 802086c:	2b20      	cmp	r3, #32
 802086e:	f040 809f 	bne.w	80209b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8020872:	683b      	ldr	r3, [r7, #0]
 8020874:	88db      	ldrh	r3, [r3, #6]
 8020876:	2b00      	cmp	r3, #0
 8020878:	d02e      	beq.n	80208d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 802087a:	683b      	ldr	r3, [r7, #0]
 802087c:	781b      	ldrb	r3, [r3, #0]
 802087e:	b25b      	sxtb	r3, r3
 8020880:	2b00      	cmp	r3, #0
 8020882:	da16      	bge.n	80208b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020884:	687b      	ldr	r3, [r7, #4]
 8020886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802088a:	689b      	ldr	r3, [r3, #8]
 802088c:	683a      	ldr	r2, [r7, #0]
 802088e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8020890:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020892:	683a      	ldr	r2, [r7, #0]
 8020894:	88d2      	ldrh	r2, [r2, #6]
 8020896:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8020898:	683b      	ldr	r3, [r7, #0]
 802089a:	88db      	ldrh	r3, [r3, #6]
 802089c:	2b07      	cmp	r3, #7
 802089e:	bf28      	it	cs
 80208a0:	2307      	movcs	r3, #7
 80208a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80208a4:	693b      	ldr	r3, [r7, #16]
 80208a6:	89fa      	ldrh	r2, [r7, #14]
 80208a8:	4619      	mov	r1, r3
 80208aa:	6878      	ldr	r0, [r7, #4]
 80208ac:	f001 fb43 	bl	8021f36 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80208b0:	e085      	b.n	80209be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80208b2:	683b      	ldr	r3, [r7, #0]
 80208b4:	785a      	ldrb	r2, [r3, #1]
 80208b6:	693b      	ldr	r3, [r7, #16]
 80208b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80208bc:	683b      	ldr	r3, [r7, #0]
 80208be:	88db      	ldrh	r3, [r3, #6]
 80208c0:	b2da      	uxtb	r2, r3
 80208c2:	693b      	ldr	r3, [r7, #16]
 80208c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80208c8:	6939      	ldr	r1, [r7, #16]
 80208ca:	683b      	ldr	r3, [r7, #0]
 80208cc:	88db      	ldrh	r3, [r3, #6]
 80208ce:	461a      	mov	r2, r3
 80208d0:	6878      	ldr	r0, [r7, #4]
 80208d2:	f001 fb5c 	bl	8021f8e <USBD_CtlPrepareRx>
      break;
 80208d6:	e072      	b.n	80209be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80208de:	689b      	ldr	r3, [r3, #8]
 80208e0:	683a      	ldr	r2, [r7, #0]
 80208e2:	7850      	ldrb	r0, [r2, #1]
 80208e4:	2200      	movs	r2, #0
 80208e6:	6839      	ldr	r1, [r7, #0]
 80208e8:	4798      	blx	r3
      break;
 80208ea:	e068      	b.n	80209be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80208ec:	683b      	ldr	r3, [r7, #0]
 80208ee:	785b      	ldrb	r3, [r3, #1]
 80208f0:	2b0b      	cmp	r3, #11
 80208f2:	d852      	bhi.n	802099a <USBD_CDC_Setup+0x162>
 80208f4:	a201      	add	r2, pc, #4	; (adr r2, 80208fc <USBD_CDC_Setup+0xc4>)
 80208f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80208fa:	bf00      	nop
 80208fc:	0802092d 	.word	0x0802092d
 8020900:	080209a9 	.word	0x080209a9
 8020904:	0802099b 	.word	0x0802099b
 8020908:	0802099b 	.word	0x0802099b
 802090c:	0802099b 	.word	0x0802099b
 8020910:	0802099b 	.word	0x0802099b
 8020914:	0802099b 	.word	0x0802099b
 8020918:	0802099b 	.word	0x0802099b
 802091c:	0802099b 	.word	0x0802099b
 8020920:	0802099b 	.word	0x0802099b
 8020924:	08020957 	.word	0x08020957
 8020928:	08020981 	.word	0x08020981
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802092c:	687b      	ldr	r3, [r7, #4]
 802092e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020932:	b2db      	uxtb	r3, r3
 8020934:	2b03      	cmp	r3, #3
 8020936:	d107      	bne.n	8020948 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8020938:	f107 030a 	add.w	r3, r7, #10
 802093c:	2202      	movs	r2, #2
 802093e:	4619      	mov	r1, r3
 8020940:	6878      	ldr	r0, [r7, #4]
 8020942:	f001 faf8 	bl	8021f36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020946:	e032      	b.n	80209ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8020948:	6839      	ldr	r1, [r7, #0]
 802094a:	6878      	ldr	r0, [r7, #4]
 802094c:	f001 fa82 	bl	8021e54 <USBD_CtlError>
            ret = USBD_FAIL;
 8020950:	2303      	movs	r3, #3
 8020952:	75fb      	strb	r3, [r7, #23]
          break;
 8020954:	e02b      	b.n	80209ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802095c:	b2db      	uxtb	r3, r3
 802095e:	2b03      	cmp	r3, #3
 8020960:	d107      	bne.n	8020972 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8020962:	f107 030d 	add.w	r3, r7, #13
 8020966:	2201      	movs	r2, #1
 8020968:	4619      	mov	r1, r3
 802096a:	6878      	ldr	r0, [r7, #4]
 802096c:	f001 fae3 	bl	8021f36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020970:	e01d      	b.n	80209ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8020972:	6839      	ldr	r1, [r7, #0]
 8020974:	6878      	ldr	r0, [r7, #4]
 8020976:	f001 fa6d 	bl	8021e54 <USBD_CtlError>
            ret = USBD_FAIL;
 802097a:	2303      	movs	r3, #3
 802097c:	75fb      	strb	r3, [r7, #23]
          break;
 802097e:	e016      	b.n	80209ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020986:	b2db      	uxtb	r3, r3
 8020988:	2b03      	cmp	r3, #3
 802098a:	d00f      	beq.n	80209ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 802098c:	6839      	ldr	r1, [r7, #0]
 802098e:	6878      	ldr	r0, [r7, #4]
 8020990:	f001 fa60 	bl	8021e54 <USBD_CtlError>
            ret = USBD_FAIL;
 8020994:	2303      	movs	r3, #3
 8020996:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8020998:	e008      	b.n	80209ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 802099a:	6839      	ldr	r1, [r7, #0]
 802099c:	6878      	ldr	r0, [r7, #4]
 802099e:	f001 fa59 	bl	8021e54 <USBD_CtlError>
          ret = USBD_FAIL;
 80209a2:	2303      	movs	r3, #3
 80209a4:	75fb      	strb	r3, [r7, #23]
          break;
 80209a6:	e002      	b.n	80209ae <USBD_CDC_Setup+0x176>
          break;
 80209a8:	bf00      	nop
 80209aa:	e008      	b.n	80209be <USBD_CDC_Setup+0x186>
          break;
 80209ac:	bf00      	nop
      }
      break;
 80209ae:	e006      	b.n	80209be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80209b0:	6839      	ldr	r1, [r7, #0]
 80209b2:	6878      	ldr	r0, [r7, #4]
 80209b4:	f001 fa4e 	bl	8021e54 <USBD_CtlError>
      ret = USBD_FAIL;
 80209b8:	2303      	movs	r3, #3
 80209ba:	75fb      	strb	r3, [r7, #23]
      break;
 80209bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80209be:	7dfb      	ldrb	r3, [r7, #23]
}
 80209c0:	4618      	mov	r0, r3
 80209c2:	3718      	adds	r7, #24
 80209c4:	46bd      	mov	sp, r7
 80209c6:	bd80      	pop	{r7, pc}

080209c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80209c8:	b580      	push	{r7, lr}
 80209ca:	b084      	sub	sp, #16
 80209cc:	af00      	add	r7, sp, #0
 80209ce:	6078      	str	r0, [r7, #4]
 80209d0:	460b      	mov	r3, r1
 80209d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80209da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80209dc:	687b      	ldr	r3, [r7, #4]
 80209de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	d101      	bne.n	80209ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80209e6:	2303      	movs	r3, #3
 80209e8:	e04f      	b.n	8020a8a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80209ea:	687b      	ldr	r3, [r7, #4]
 80209ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80209f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80209f2:	78fa      	ldrb	r2, [r7, #3]
 80209f4:	6879      	ldr	r1, [r7, #4]
 80209f6:	4613      	mov	r3, r2
 80209f8:	009b      	lsls	r3, r3, #2
 80209fa:	4413      	add	r3, r2
 80209fc:	009b      	lsls	r3, r3, #2
 80209fe:	440b      	add	r3, r1
 8020a00:	3318      	adds	r3, #24
 8020a02:	681b      	ldr	r3, [r3, #0]
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	d029      	beq.n	8020a5c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8020a08:	78fa      	ldrb	r2, [r7, #3]
 8020a0a:	6879      	ldr	r1, [r7, #4]
 8020a0c:	4613      	mov	r3, r2
 8020a0e:	009b      	lsls	r3, r3, #2
 8020a10:	4413      	add	r3, r2
 8020a12:	009b      	lsls	r3, r3, #2
 8020a14:	440b      	add	r3, r1
 8020a16:	3318      	adds	r3, #24
 8020a18:	681a      	ldr	r2, [r3, #0]
 8020a1a:	78f9      	ldrb	r1, [r7, #3]
 8020a1c:	68f8      	ldr	r0, [r7, #12]
 8020a1e:	460b      	mov	r3, r1
 8020a20:	00db      	lsls	r3, r3, #3
 8020a22:	1a5b      	subs	r3, r3, r1
 8020a24:	009b      	lsls	r3, r3, #2
 8020a26:	4403      	add	r3, r0
 8020a28:	3344      	adds	r3, #68	; 0x44
 8020a2a:	681b      	ldr	r3, [r3, #0]
 8020a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8020a30:	fb03 f301 	mul.w	r3, r3, r1
 8020a34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	d110      	bne.n	8020a5c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8020a3a:	78fa      	ldrb	r2, [r7, #3]
 8020a3c:	6879      	ldr	r1, [r7, #4]
 8020a3e:	4613      	mov	r3, r2
 8020a40:	009b      	lsls	r3, r3, #2
 8020a42:	4413      	add	r3, r2
 8020a44:	009b      	lsls	r3, r3, #2
 8020a46:	440b      	add	r3, r1
 8020a48:	3318      	adds	r3, #24
 8020a4a:	2200      	movs	r2, #0
 8020a4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8020a4e:	78f9      	ldrb	r1, [r7, #3]
 8020a50:	2300      	movs	r3, #0
 8020a52:	2200      	movs	r2, #0
 8020a54:	6878      	ldr	r0, [r7, #4]
 8020a56:	f003 fa28 	bl	8023eaa <USBD_LL_Transmit>
 8020a5a:	e015      	b.n	8020a88 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8020a5c:	68bb      	ldr	r3, [r7, #8]
 8020a5e:	2200      	movs	r2, #0
 8020a60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020a6a:	691b      	ldr	r3, [r3, #16]
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	d00b      	beq.n	8020a88 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8020a70:	687b      	ldr	r3, [r7, #4]
 8020a72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020a76:	691b      	ldr	r3, [r3, #16]
 8020a78:	68ba      	ldr	r2, [r7, #8]
 8020a7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8020a7e:	68ba      	ldr	r2, [r7, #8]
 8020a80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8020a84:	78fa      	ldrb	r2, [r7, #3]
 8020a86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8020a88:	2300      	movs	r3, #0
}
 8020a8a:	4618      	mov	r0, r3
 8020a8c:	3710      	adds	r7, #16
 8020a8e:	46bd      	mov	sp, r7
 8020a90:	bd80      	pop	{r7, pc}

08020a92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8020a92:	b580      	push	{r7, lr}
 8020a94:	b084      	sub	sp, #16
 8020a96:	af00      	add	r7, sp, #0
 8020a98:	6078      	str	r0, [r7, #4]
 8020a9a:	460b      	mov	r3, r1
 8020a9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020aa4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	d101      	bne.n	8020ab4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8020ab0:	2303      	movs	r3, #3
 8020ab2:	e015      	b.n	8020ae0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8020ab4:	78fb      	ldrb	r3, [r7, #3]
 8020ab6:	4619      	mov	r1, r3
 8020ab8:	6878      	ldr	r0, [r7, #4]
 8020aba:	f003 fa38 	bl	8023f2e <USBD_LL_GetRxDataSize>
 8020abe:	4602      	mov	r2, r0
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020acc:	68db      	ldr	r3, [r3, #12]
 8020ace:	68fa      	ldr	r2, [r7, #12]
 8020ad0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8020ad4:	68fa      	ldr	r2, [r7, #12]
 8020ad6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8020ada:	4611      	mov	r1, r2
 8020adc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8020ade:	2300      	movs	r3, #0
}
 8020ae0:	4618      	mov	r0, r3
 8020ae2:	3710      	adds	r7, #16
 8020ae4:	46bd      	mov	sp, r7
 8020ae6:	bd80      	pop	{r7, pc}

08020ae8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8020ae8:	b580      	push	{r7, lr}
 8020aea:	b084      	sub	sp, #16
 8020aec:	af00      	add	r7, sp, #0
 8020aee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020af6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8020af8:	68fb      	ldr	r3, [r7, #12]
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d101      	bne.n	8020b02 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8020afe:	2303      	movs	r3, #3
 8020b00:	e01b      	b.n	8020b3a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	d015      	beq.n	8020b38 <USBD_CDC_EP0_RxReady+0x50>
 8020b0c:	68fb      	ldr	r3, [r7, #12]
 8020b0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8020b12:	2bff      	cmp	r3, #255	; 0xff
 8020b14:	d010      	beq.n	8020b38 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020b1c:	689b      	ldr	r3, [r3, #8]
 8020b1e:	68fa      	ldr	r2, [r7, #12]
 8020b20:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8020b24:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8020b26:	68fa      	ldr	r2, [r7, #12]
 8020b28:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020b2c:	b292      	uxth	r2, r2
 8020b2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8020b30:	68fb      	ldr	r3, [r7, #12]
 8020b32:	22ff      	movs	r2, #255	; 0xff
 8020b34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8020b38:	2300      	movs	r3, #0
}
 8020b3a:	4618      	mov	r0, r3
 8020b3c:	3710      	adds	r7, #16
 8020b3e:	46bd      	mov	sp, r7
 8020b40:	bd80      	pop	{r7, pc}
	...

08020b44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8020b44:	b480      	push	{r7}
 8020b46:	b083      	sub	sp, #12
 8020b48:	af00      	add	r7, sp, #0
 8020b4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8020b4c:	687b      	ldr	r3, [r7, #4]
 8020b4e:	2243      	movs	r2, #67	; 0x43
 8020b50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8020b52:	4b03      	ldr	r3, [pc, #12]	; (8020b60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8020b54:	4618      	mov	r0, r3
 8020b56:	370c      	adds	r7, #12
 8020b58:	46bd      	mov	sp, r7
 8020b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b5e:	4770      	bx	lr
 8020b60:	20000358 	.word	0x20000358

08020b64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8020b64:	b480      	push	{r7}
 8020b66:	b083      	sub	sp, #12
 8020b68:	af00      	add	r7, sp, #0
 8020b6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8020b6c:	687b      	ldr	r3, [r7, #4]
 8020b6e:	2243      	movs	r2, #67	; 0x43
 8020b70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8020b72:	4b03      	ldr	r3, [pc, #12]	; (8020b80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8020b74:	4618      	mov	r0, r3
 8020b76:	370c      	adds	r7, #12
 8020b78:	46bd      	mov	sp, r7
 8020b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b7e:	4770      	bx	lr
 8020b80:	20000314 	.word	0x20000314

08020b84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8020b84:	b480      	push	{r7}
 8020b86:	b083      	sub	sp, #12
 8020b88:	af00      	add	r7, sp, #0
 8020b8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8020b8c:	687b      	ldr	r3, [r7, #4]
 8020b8e:	2243      	movs	r2, #67	; 0x43
 8020b90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8020b92:	4b03      	ldr	r3, [pc, #12]	; (8020ba0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8020b94:	4618      	mov	r0, r3
 8020b96:	370c      	adds	r7, #12
 8020b98:	46bd      	mov	sp, r7
 8020b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b9e:	4770      	bx	lr
 8020ba0:	2000039c 	.word	0x2000039c

08020ba4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8020ba4:	b480      	push	{r7}
 8020ba6:	b083      	sub	sp, #12
 8020ba8:	af00      	add	r7, sp, #0
 8020baa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	220a      	movs	r2, #10
 8020bb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8020bb2:	4b03      	ldr	r3, [pc, #12]	; (8020bc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8020bb4:	4618      	mov	r0, r3
 8020bb6:	370c      	adds	r7, #12
 8020bb8:	46bd      	mov	sp, r7
 8020bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bbe:	4770      	bx	lr
 8020bc0:	200002d0 	.word	0x200002d0

08020bc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8020bc4:	b480      	push	{r7}
 8020bc6:	b083      	sub	sp, #12
 8020bc8:	af00      	add	r7, sp, #0
 8020bca:	6078      	str	r0, [r7, #4]
 8020bcc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8020bce:	683b      	ldr	r3, [r7, #0]
 8020bd0:	2b00      	cmp	r3, #0
 8020bd2:	d101      	bne.n	8020bd8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8020bd4:	2303      	movs	r3, #3
 8020bd6:	e004      	b.n	8020be2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	683a      	ldr	r2, [r7, #0]
 8020bdc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8020be0:	2300      	movs	r3, #0
}
 8020be2:	4618      	mov	r0, r3
 8020be4:	370c      	adds	r7, #12
 8020be6:	46bd      	mov	sp, r7
 8020be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bec:	4770      	bx	lr

08020bee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8020bee:	b480      	push	{r7}
 8020bf0:	b087      	sub	sp, #28
 8020bf2:	af00      	add	r7, sp, #0
 8020bf4:	60f8      	str	r0, [r7, #12]
 8020bf6:	60b9      	str	r1, [r7, #8]
 8020bf8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020bfa:	68fb      	ldr	r3, [r7, #12]
 8020bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020c00:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8020c02:	697b      	ldr	r3, [r7, #20]
 8020c04:	2b00      	cmp	r3, #0
 8020c06:	d101      	bne.n	8020c0c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8020c08:	2303      	movs	r3, #3
 8020c0a:	e008      	b.n	8020c1e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8020c0c:	697b      	ldr	r3, [r7, #20]
 8020c0e:	68ba      	ldr	r2, [r7, #8]
 8020c10:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8020c14:	697b      	ldr	r3, [r7, #20]
 8020c16:	687a      	ldr	r2, [r7, #4]
 8020c18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8020c1c:	2300      	movs	r3, #0
}
 8020c1e:	4618      	mov	r0, r3
 8020c20:	371c      	adds	r7, #28
 8020c22:	46bd      	mov	sp, r7
 8020c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c28:	4770      	bx	lr

08020c2a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8020c2a:	b480      	push	{r7}
 8020c2c:	b085      	sub	sp, #20
 8020c2e:	af00      	add	r7, sp, #0
 8020c30:	6078      	str	r0, [r7, #4]
 8020c32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020c3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8020c3c:	68fb      	ldr	r3, [r7, #12]
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d101      	bne.n	8020c46 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8020c42:	2303      	movs	r3, #3
 8020c44:	e004      	b.n	8020c50 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8020c46:	68fb      	ldr	r3, [r7, #12]
 8020c48:	683a      	ldr	r2, [r7, #0]
 8020c4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8020c4e:	2300      	movs	r3, #0
}
 8020c50:	4618      	mov	r0, r3
 8020c52:	3714      	adds	r7, #20
 8020c54:	46bd      	mov	sp, r7
 8020c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c5a:	4770      	bx	lr

08020c5c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8020c5c:	b580      	push	{r7, lr}
 8020c5e:	b084      	sub	sp, #16
 8020c60:	af00      	add	r7, sp, #0
 8020c62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020c6a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8020c6c:	2301      	movs	r3, #1
 8020c6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d101      	bne.n	8020c7e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8020c7a:	2303      	movs	r3, #3
 8020c7c:	e01a      	b.n	8020cb4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8020c7e:	68bb      	ldr	r3, [r7, #8]
 8020c80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d114      	bne.n	8020cb2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8020c88:	68bb      	ldr	r3, [r7, #8]
 8020c8a:	2201      	movs	r2, #1
 8020c8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8020c90:	68bb      	ldr	r3, [r7, #8]
 8020c92:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8020c9a:	68bb      	ldr	r3, [r7, #8]
 8020c9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8020ca0:	68bb      	ldr	r3, [r7, #8]
 8020ca2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8020ca6:	2181      	movs	r1, #129	; 0x81
 8020ca8:	6878      	ldr	r0, [r7, #4]
 8020caa:	f003 f8fe 	bl	8023eaa <USBD_LL_Transmit>

    ret = USBD_OK;
 8020cae:	2300      	movs	r3, #0
 8020cb0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8020cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8020cb4:	4618      	mov	r0, r3
 8020cb6:	3710      	adds	r7, #16
 8020cb8:	46bd      	mov	sp, r7
 8020cba:	bd80      	pop	{r7, pc}

08020cbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8020cbc:	b580      	push	{r7, lr}
 8020cbe:	b084      	sub	sp, #16
 8020cc0:	af00      	add	r7, sp, #0
 8020cc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020cc4:	687b      	ldr	r3, [r7, #4]
 8020cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020cca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8020ccc:	687b      	ldr	r3, [r7, #4]
 8020cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020cd2:	2b00      	cmp	r3, #0
 8020cd4:	d101      	bne.n	8020cda <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8020cd6:	2303      	movs	r3, #3
 8020cd8:	e016      	b.n	8020d08 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	7c1b      	ldrb	r3, [r3, #16]
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d109      	bne.n	8020cf6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020ce2:	68fb      	ldr	r3, [r7, #12]
 8020ce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8020ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020cec:	2101      	movs	r1, #1
 8020cee:	6878      	ldr	r0, [r7, #4]
 8020cf0:	f003 f8fc 	bl	8023eec <USBD_LL_PrepareReceive>
 8020cf4:	e007      	b.n	8020d06 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020cf6:	68fb      	ldr	r3, [r7, #12]
 8020cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8020cfc:	2340      	movs	r3, #64	; 0x40
 8020cfe:	2101      	movs	r1, #1
 8020d00:	6878      	ldr	r0, [r7, #4]
 8020d02:	f003 f8f3 	bl	8023eec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8020d06:	2300      	movs	r3, #0
}
 8020d08:	4618      	mov	r0, r3
 8020d0a:	3710      	adds	r7, #16
 8020d0c:	46bd      	mov	sp, r7
 8020d0e:	bd80      	pop	{r7, pc}

08020d10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020d10:	b580      	push	{r7, lr}
 8020d12:	b086      	sub	sp, #24
 8020d14:	af00      	add	r7, sp, #0
 8020d16:	60f8      	str	r0, [r7, #12]
 8020d18:	60b9      	str	r1, [r7, #8]
 8020d1a:	4613      	mov	r3, r2
 8020d1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020d1e:	68fb      	ldr	r3, [r7, #12]
 8020d20:	2b00      	cmp	r3, #0
 8020d22:	d101      	bne.n	8020d28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020d24:	2303      	movs	r3, #3
 8020d26:	e01f      	b.n	8020d68 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8020d28:	68fb      	ldr	r3, [r7, #12]
 8020d2a:	2200      	movs	r2, #0
 8020d2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8020d30:	68fb      	ldr	r3, [r7, #12]
 8020d32:	2200      	movs	r2, #0
 8020d34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8020d38:	68fb      	ldr	r3, [r7, #12]
 8020d3a:	2200      	movs	r2, #0
 8020d3c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020d40:	68bb      	ldr	r3, [r7, #8]
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d003      	beq.n	8020d4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020d46:	68fb      	ldr	r3, [r7, #12]
 8020d48:	68ba      	ldr	r2, [r7, #8]
 8020d4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020d4e:	68fb      	ldr	r3, [r7, #12]
 8020d50:	2201      	movs	r2, #1
 8020d52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8020d56:	68fb      	ldr	r3, [r7, #12]
 8020d58:	79fa      	ldrb	r2, [r7, #7]
 8020d5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8020d5c:	68f8      	ldr	r0, [r7, #12]
 8020d5e:	f002 ff69 	bl	8023c34 <USBD_LL_Init>
 8020d62:	4603      	mov	r3, r0
 8020d64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8020d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8020d68:	4618      	mov	r0, r3
 8020d6a:	3718      	adds	r7, #24
 8020d6c:	46bd      	mov	sp, r7
 8020d6e:	bd80      	pop	{r7, pc}

08020d70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020d70:	b580      	push	{r7, lr}
 8020d72:	b084      	sub	sp, #16
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	6078      	str	r0, [r7, #4]
 8020d78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020d7a:	2300      	movs	r3, #0
 8020d7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8020d7e:	683b      	ldr	r3, [r7, #0]
 8020d80:	2b00      	cmp	r3, #0
 8020d82:	d101      	bne.n	8020d88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8020d84:	2303      	movs	r3, #3
 8020d86:	e016      	b.n	8020db6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8020d88:	687b      	ldr	r3, [r7, #4]
 8020d8a:	683a      	ldr	r2, [r7, #0]
 8020d8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8020d90:	687b      	ldr	r3, [r7, #4]
 8020d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	d00b      	beq.n	8020db4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8020d9c:	687b      	ldr	r3, [r7, #4]
 8020d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020da4:	f107 020e 	add.w	r2, r7, #14
 8020da8:	4610      	mov	r0, r2
 8020daa:	4798      	blx	r3
 8020dac:	4602      	mov	r2, r0
 8020dae:	687b      	ldr	r3, [r7, #4]
 8020db0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8020db4:	2300      	movs	r3, #0
}
 8020db6:	4618      	mov	r0, r3
 8020db8:	3710      	adds	r7, #16
 8020dba:	46bd      	mov	sp, r7
 8020dbc:	bd80      	pop	{r7, pc}

08020dbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020dbe:	b580      	push	{r7, lr}
 8020dc0:	b082      	sub	sp, #8
 8020dc2:	af00      	add	r7, sp, #0
 8020dc4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8020dc6:	6878      	ldr	r0, [r7, #4]
 8020dc8:	f002 ff86 	bl	8023cd8 <USBD_LL_Start>
 8020dcc:	4603      	mov	r3, r0
}
 8020dce:	4618      	mov	r0, r3
 8020dd0:	3708      	adds	r7, #8
 8020dd2:	46bd      	mov	sp, r7
 8020dd4:	bd80      	pop	{r7, pc}

08020dd6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020dd6:	b480      	push	{r7}
 8020dd8:	b083      	sub	sp, #12
 8020dda:	af00      	add	r7, sp, #0
 8020ddc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020dde:	2300      	movs	r3, #0
}
 8020de0:	4618      	mov	r0, r3
 8020de2:	370c      	adds	r7, #12
 8020de4:	46bd      	mov	sp, r7
 8020de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dea:	4770      	bx	lr

08020dec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020dec:	b580      	push	{r7, lr}
 8020dee:	b084      	sub	sp, #16
 8020df0:	af00      	add	r7, sp, #0
 8020df2:	6078      	str	r0, [r7, #4]
 8020df4:	460b      	mov	r3, r1
 8020df6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020df8:	2303      	movs	r3, #3
 8020dfa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e02:	2b00      	cmp	r3, #0
 8020e04:	d009      	beq.n	8020e1a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e0c:	681b      	ldr	r3, [r3, #0]
 8020e0e:	78fa      	ldrb	r2, [r7, #3]
 8020e10:	4611      	mov	r1, r2
 8020e12:	6878      	ldr	r0, [r7, #4]
 8020e14:	4798      	blx	r3
 8020e16:	4603      	mov	r3, r0
 8020e18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8020e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8020e1c:	4618      	mov	r0, r3
 8020e1e:	3710      	adds	r7, #16
 8020e20:	46bd      	mov	sp, r7
 8020e22:	bd80      	pop	{r7, pc}

08020e24 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020e24:	b580      	push	{r7, lr}
 8020e26:	b082      	sub	sp, #8
 8020e28:	af00      	add	r7, sp, #0
 8020e2a:	6078      	str	r0, [r7, #4]
 8020e2c:	460b      	mov	r3, r1
 8020e2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	d007      	beq.n	8020e4a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8020e3a:	687b      	ldr	r3, [r7, #4]
 8020e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e40:	685b      	ldr	r3, [r3, #4]
 8020e42:	78fa      	ldrb	r2, [r7, #3]
 8020e44:	4611      	mov	r1, r2
 8020e46:	6878      	ldr	r0, [r7, #4]
 8020e48:	4798      	blx	r3
  }

  return USBD_OK;
 8020e4a:	2300      	movs	r3, #0
}
 8020e4c:	4618      	mov	r0, r3
 8020e4e:	3708      	adds	r7, #8
 8020e50:	46bd      	mov	sp, r7
 8020e52:	bd80      	pop	{r7, pc}

08020e54 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020e54:	b580      	push	{r7, lr}
 8020e56:	b084      	sub	sp, #16
 8020e58:	af00      	add	r7, sp, #0
 8020e5a:	6078      	str	r0, [r7, #4]
 8020e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020e64:	6839      	ldr	r1, [r7, #0]
 8020e66:	4618      	mov	r0, r3
 8020e68:	f000 ffba 	bl	8021de0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020e6c:	687b      	ldr	r3, [r7, #4]
 8020e6e:	2201      	movs	r2, #1
 8020e70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8020e74:	687b      	ldr	r3, [r7, #4]
 8020e76:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8020e7a:	461a      	mov	r2, r3
 8020e7c:	687b      	ldr	r3, [r7, #4]
 8020e7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020e88:	f003 031f 	and.w	r3, r3, #31
 8020e8c:	2b02      	cmp	r3, #2
 8020e8e:	d01a      	beq.n	8020ec6 <USBD_LL_SetupStage+0x72>
 8020e90:	2b02      	cmp	r3, #2
 8020e92:	d822      	bhi.n	8020eda <USBD_LL_SetupStage+0x86>
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	d002      	beq.n	8020e9e <USBD_LL_SetupStage+0x4a>
 8020e98:	2b01      	cmp	r3, #1
 8020e9a:	d00a      	beq.n	8020eb2 <USBD_LL_SetupStage+0x5e>
 8020e9c:	e01d      	b.n	8020eda <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8020e9e:	687b      	ldr	r3, [r7, #4]
 8020ea0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020ea4:	4619      	mov	r1, r3
 8020ea6:	6878      	ldr	r0, [r7, #4]
 8020ea8:	f000 fa62 	bl	8021370 <USBD_StdDevReq>
 8020eac:	4603      	mov	r3, r0
 8020eae:	73fb      	strb	r3, [r7, #15]
      break;
 8020eb0:	e020      	b.n	8020ef4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8020eb2:	687b      	ldr	r3, [r7, #4]
 8020eb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020eb8:	4619      	mov	r1, r3
 8020eba:	6878      	ldr	r0, [r7, #4]
 8020ebc:	f000 fac6 	bl	802144c <USBD_StdItfReq>
 8020ec0:	4603      	mov	r3, r0
 8020ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8020ec4:	e016      	b.n	8020ef4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020ecc:	4619      	mov	r1, r3
 8020ece:	6878      	ldr	r0, [r7, #4]
 8020ed0:	f000 fb05 	bl	80214de <USBD_StdEPReq>
 8020ed4:	4603      	mov	r3, r0
 8020ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8020ed8:	e00c      	b.n	8020ef4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020eda:	687b      	ldr	r3, [r7, #4]
 8020edc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020ee0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8020ee4:	b2db      	uxtb	r3, r3
 8020ee6:	4619      	mov	r1, r3
 8020ee8:	6878      	ldr	r0, [r7, #4]
 8020eea:	f002 ff55 	bl	8023d98 <USBD_LL_StallEP>
 8020eee:	4603      	mov	r3, r0
 8020ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8020ef2:	bf00      	nop
  }

  return ret;
 8020ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8020ef6:	4618      	mov	r0, r3
 8020ef8:	3710      	adds	r7, #16
 8020efa:	46bd      	mov	sp, r7
 8020efc:	bd80      	pop	{r7, pc}

08020efe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8020efe:	b580      	push	{r7, lr}
 8020f00:	b086      	sub	sp, #24
 8020f02:	af00      	add	r7, sp, #0
 8020f04:	60f8      	str	r0, [r7, #12]
 8020f06:	460b      	mov	r3, r1
 8020f08:	607a      	str	r2, [r7, #4]
 8020f0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8020f0c:	7afb      	ldrb	r3, [r7, #11]
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	d138      	bne.n	8020f84 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8020f12:	68fb      	ldr	r3, [r7, #12]
 8020f14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8020f18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8020f1a:	68fb      	ldr	r3, [r7, #12]
 8020f1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8020f20:	2b03      	cmp	r3, #3
 8020f22:	d14a      	bne.n	8020fba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8020f24:	693b      	ldr	r3, [r7, #16]
 8020f26:	689a      	ldr	r2, [r3, #8]
 8020f28:	693b      	ldr	r3, [r7, #16]
 8020f2a:	68db      	ldr	r3, [r3, #12]
 8020f2c:	429a      	cmp	r2, r3
 8020f2e:	d913      	bls.n	8020f58 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8020f30:	693b      	ldr	r3, [r7, #16]
 8020f32:	689a      	ldr	r2, [r3, #8]
 8020f34:	693b      	ldr	r3, [r7, #16]
 8020f36:	68db      	ldr	r3, [r3, #12]
 8020f38:	1ad2      	subs	r2, r2, r3
 8020f3a:	693b      	ldr	r3, [r7, #16]
 8020f3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8020f3e:	693b      	ldr	r3, [r7, #16]
 8020f40:	68da      	ldr	r2, [r3, #12]
 8020f42:	693b      	ldr	r3, [r7, #16]
 8020f44:	689b      	ldr	r3, [r3, #8]
 8020f46:	4293      	cmp	r3, r2
 8020f48:	bf28      	it	cs
 8020f4a:	4613      	movcs	r3, r2
 8020f4c:	461a      	mov	r2, r3
 8020f4e:	6879      	ldr	r1, [r7, #4]
 8020f50:	68f8      	ldr	r0, [r7, #12]
 8020f52:	f001 f839 	bl	8021fc8 <USBD_CtlContinueRx>
 8020f56:	e030      	b.n	8020fba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020f58:	68fb      	ldr	r3, [r7, #12]
 8020f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020f5e:	b2db      	uxtb	r3, r3
 8020f60:	2b03      	cmp	r3, #3
 8020f62:	d10b      	bne.n	8020f7c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8020f64:	68fb      	ldr	r3, [r7, #12]
 8020f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f6a:	691b      	ldr	r3, [r3, #16]
 8020f6c:	2b00      	cmp	r3, #0
 8020f6e:	d005      	beq.n	8020f7c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8020f70:	68fb      	ldr	r3, [r7, #12]
 8020f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f76:	691b      	ldr	r3, [r3, #16]
 8020f78:	68f8      	ldr	r0, [r7, #12]
 8020f7a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8020f7c:	68f8      	ldr	r0, [r7, #12]
 8020f7e:	f001 f834 	bl	8021fea <USBD_CtlSendStatus>
 8020f82:	e01a      	b.n	8020fba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020f84:	68fb      	ldr	r3, [r7, #12]
 8020f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020f8a:	b2db      	uxtb	r3, r3
 8020f8c:	2b03      	cmp	r3, #3
 8020f8e:	d114      	bne.n	8020fba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8020f90:	68fb      	ldr	r3, [r7, #12]
 8020f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f96:	699b      	ldr	r3, [r3, #24]
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	d00e      	beq.n	8020fba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8020f9c:	68fb      	ldr	r3, [r7, #12]
 8020f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fa2:	699b      	ldr	r3, [r3, #24]
 8020fa4:	7afa      	ldrb	r2, [r7, #11]
 8020fa6:	4611      	mov	r1, r2
 8020fa8:	68f8      	ldr	r0, [r7, #12]
 8020faa:	4798      	blx	r3
 8020fac:	4603      	mov	r3, r0
 8020fae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8020fb0:	7dfb      	ldrb	r3, [r7, #23]
 8020fb2:	2b00      	cmp	r3, #0
 8020fb4:	d001      	beq.n	8020fba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8020fb6:	7dfb      	ldrb	r3, [r7, #23]
 8020fb8:	e000      	b.n	8020fbc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8020fba:	2300      	movs	r3, #0
}
 8020fbc:	4618      	mov	r0, r3
 8020fbe:	3718      	adds	r7, #24
 8020fc0:	46bd      	mov	sp, r7
 8020fc2:	bd80      	pop	{r7, pc}

08020fc4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8020fc4:	b580      	push	{r7, lr}
 8020fc6:	b086      	sub	sp, #24
 8020fc8:	af00      	add	r7, sp, #0
 8020fca:	60f8      	str	r0, [r7, #12]
 8020fcc:	460b      	mov	r3, r1
 8020fce:	607a      	str	r2, [r7, #4]
 8020fd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8020fd2:	7afb      	ldrb	r3, [r7, #11]
 8020fd4:	2b00      	cmp	r3, #0
 8020fd6:	d16b      	bne.n	80210b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8020fd8:	68fb      	ldr	r3, [r7, #12]
 8020fda:	3314      	adds	r3, #20
 8020fdc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8020fde:	68fb      	ldr	r3, [r7, #12]
 8020fe0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8020fe4:	2b02      	cmp	r3, #2
 8020fe6:	d156      	bne.n	8021096 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8020fe8:	693b      	ldr	r3, [r7, #16]
 8020fea:	689a      	ldr	r2, [r3, #8]
 8020fec:	693b      	ldr	r3, [r7, #16]
 8020fee:	68db      	ldr	r3, [r3, #12]
 8020ff0:	429a      	cmp	r2, r3
 8020ff2:	d914      	bls.n	802101e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8020ff4:	693b      	ldr	r3, [r7, #16]
 8020ff6:	689a      	ldr	r2, [r3, #8]
 8020ff8:	693b      	ldr	r3, [r7, #16]
 8020ffa:	68db      	ldr	r3, [r3, #12]
 8020ffc:	1ad2      	subs	r2, r2, r3
 8020ffe:	693b      	ldr	r3, [r7, #16]
 8021000:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8021002:	693b      	ldr	r3, [r7, #16]
 8021004:	689b      	ldr	r3, [r3, #8]
 8021006:	461a      	mov	r2, r3
 8021008:	6879      	ldr	r1, [r7, #4]
 802100a:	68f8      	ldr	r0, [r7, #12]
 802100c:	f000 ffae 	bl	8021f6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021010:	2300      	movs	r3, #0
 8021012:	2200      	movs	r2, #0
 8021014:	2100      	movs	r1, #0
 8021016:	68f8      	ldr	r0, [r7, #12]
 8021018:	f002 ff68 	bl	8023eec <USBD_LL_PrepareReceive>
 802101c:	e03b      	b.n	8021096 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 802101e:	693b      	ldr	r3, [r7, #16]
 8021020:	68da      	ldr	r2, [r3, #12]
 8021022:	693b      	ldr	r3, [r7, #16]
 8021024:	689b      	ldr	r3, [r3, #8]
 8021026:	429a      	cmp	r2, r3
 8021028:	d11c      	bne.n	8021064 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802102a:	693b      	ldr	r3, [r7, #16]
 802102c:	685a      	ldr	r2, [r3, #4]
 802102e:	693b      	ldr	r3, [r7, #16]
 8021030:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8021032:	429a      	cmp	r2, r3
 8021034:	d316      	bcc.n	8021064 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8021036:	693b      	ldr	r3, [r7, #16]
 8021038:	685a      	ldr	r2, [r3, #4]
 802103a:	68fb      	ldr	r3, [r7, #12]
 802103c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8021040:	429a      	cmp	r2, r3
 8021042:	d20f      	bcs.n	8021064 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021044:	2200      	movs	r2, #0
 8021046:	2100      	movs	r1, #0
 8021048:	68f8      	ldr	r0, [r7, #12]
 802104a:	f000 ff8f 	bl	8021f6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802104e:	68fb      	ldr	r3, [r7, #12]
 8021050:	2200      	movs	r2, #0
 8021052:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021056:	2300      	movs	r3, #0
 8021058:	2200      	movs	r2, #0
 802105a:	2100      	movs	r1, #0
 802105c:	68f8      	ldr	r0, [r7, #12]
 802105e:	f002 ff45 	bl	8023eec <USBD_LL_PrepareReceive>
 8021062:	e018      	b.n	8021096 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021064:	68fb      	ldr	r3, [r7, #12]
 8021066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802106a:	b2db      	uxtb	r3, r3
 802106c:	2b03      	cmp	r3, #3
 802106e:	d10b      	bne.n	8021088 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8021070:	68fb      	ldr	r3, [r7, #12]
 8021072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021076:	68db      	ldr	r3, [r3, #12]
 8021078:	2b00      	cmp	r3, #0
 802107a:	d005      	beq.n	8021088 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 802107c:	68fb      	ldr	r3, [r7, #12]
 802107e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021082:	68db      	ldr	r3, [r3, #12]
 8021084:	68f8      	ldr	r0, [r7, #12]
 8021086:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8021088:	2180      	movs	r1, #128	; 0x80
 802108a:	68f8      	ldr	r0, [r7, #12]
 802108c:	f002 fe84 	bl	8023d98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8021090:	68f8      	ldr	r0, [r7, #12]
 8021092:	f000 ffbd 	bl	8022010 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802109c:	2b01      	cmp	r3, #1
 802109e:	d122      	bne.n	80210e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80210a0:	68f8      	ldr	r0, [r7, #12]
 80210a2:	f7ff fe98 	bl	8020dd6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80210a6:	68fb      	ldr	r3, [r7, #12]
 80210a8:	2200      	movs	r2, #0
 80210aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80210ae:	e01a      	b.n	80210e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80210b0:	68fb      	ldr	r3, [r7, #12]
 80210b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80210b6:	b2db      	uxtb	r3, r3
 80210b8:	2b03      	cmp	r3, #3
 80210ba:	d114      	bne.n	80210e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80210bc:	68fb      	ldr	r3, [r7, #12]
 80210be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80210c2:	695b      	ldr	r3, [r3, #20]
 80210c4:	2b00      	cmp	r3, #0
 80210c6:	d00e      	beq.n	80210e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80210c8:	68fb      	ldr	r3, [r7, #12]
 80210ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80210ce:	695b      	ldr	r3, [r3, #20]
 80210d0:	7afa      	ldrb	r2, [r7, #11]
 80210d2:	4611      	mov	r1, r2
 80210d4:	68f8      	ldr	r0, [r7, #12]
 80210d6:	4798      	blx	r3
 80210d8:	4603      	mov	r3, r0
 80210da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80210dc:	7dfb      	ldrb	r3, [r7, #23]
 80210de:	2b00      	cmp	r3, #0
 80210e0:	d001      	beq.n	80210e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80210e2:	7dfb      	ldrb	r3, [r7, #23]
 80210e4:	e000      	b.n	80210e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80210e6:	2300      	movs	r3, #0
}
 80210e8:	4618      	mov	r0, r3
 80210ea:	3718      	adds	r7, #24
 80210ec:	46bd      	mov	sp, r7
 80210ee:	bd80      	pop	{r7, pc}

080210f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80210f0:	b580      	push	{r7, lr}
 80210f2:	b082      	sub	sp, #8
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	2201      	movs	r2, #1
 80210fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	2200      	movs	r2, #0
 8021104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	2200      	movs	r2, #0
 802110c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	2200      	movs	r2, #0
 8021112:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802111c:	2b00      	cmp	r3, #0
 802111e:	d101      	bne.n	8021124 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8021120:	2303      	movs	r3, #3
 8021122:	e02f      	b.n	8021184 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8021124:	687b      	ldr	r3, [r7, #4]
 8021126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802112a:	2b00      	cmp	r3, #0
 802112c:	d00f      	beq.n	802114e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021134:	685b      	ldr	r3, [r3, #4]
 8021136:	2b00      	cmp	r3, #0
 8021138:	d009      	beq.n	802114e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021140:	685b      	ldr	r3, [r3, #4]
 8021142:	687a      	ldr	r2, [r7, #4]
 8021144:	6852      	ldr	r2, [r2, #4]
 8021146:	b2d2      	uxtb	r2, r2
 8021148:	4611      	mov	r1, r2
 802114a:	6878      	ldr	r0, [r7, #4]
 802114c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802114e:	2340      	movs	r3, #64	; 0x40
 8021150:	2200      	movs	r2, #0
 8021152:	2100      	movs	r1, #0
 8021154:	6878      	ldr	r0, [r7, #4]
 8021156:	f002 fdda 	bl	8023d0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	2201      	movs	r2, #1
 802115e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	2240      	movs	r2, #64	; 0x40
 8021166:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802116a:	2340      	movs	r3, #64	; 0x40
 802116c:	2200      	movs	r2, #0
 802116e:	2180      	movs	r1, #128	; 0x80
 8021170:	6878      	ldr	r0, [r7, #4]
 8021172:	f002 fdcc 	bl	8023d0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	2201      	movs	r2, #1
 802117a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802117c:	687b      	ldr	r3, [r7, #4]
 802117e:	2240      	movs	r2, #64	; 0x40
 8021180:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8021182:	2300      	movs	r3, #0
}
 8021184:	4618      	mov	r0, r3
 8021186:	3708      	adds	r7, #8
 8021188:	46bd      	mov	sp, r7
 802118a:	bd80      	pop	{r7, pc}

0802118c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802118c:	b480      	push	{r7}
 802118e:	b083      	sub	sp, #12
 8021190:	af00      	add	r7, sp, #0
 8021192:	6078      	str	r0, [r7, #4]
 8021194:	460b      	mov	r3, r1
 8021196:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	78fa      	ldrb	r2, [r7, #3]
 802119c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 802119e:	2300      	movs	r3, #0
}
 80211a0:	4618      	mov	r0, r3
 80211a2:	370c      	adds	r7, #12
 80211a4:	46bd      	mov	sp, r7
 80211a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211aa:	4770      	bx	lr

080211ac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80211ac:	b480      	push	{r7}
 80211ae:	b083      	sub	sp, #12
 80211b0:	af00      	add	r7, sp, #0
 80211b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80211b4:	687b      	ldr	r3, [r7, #4]
 80211b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80211ba:	b2da      	uxtb	r2, r3
 80211bc:	687b      	ldr	r3, [r7, #4]
 80211be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	2204      	movs	r2, #4
 80211c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80211ca:	2300      	movs	r3, #0
}
 80211cc:	4618      	mov	r0, r3
 80211ce:	370c      	adds	r7, #12
 80211d0:	46bd      	mov	sp, r7
 80211d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d6:	4770      	bx	lr

080211d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80211d8:	b480      	push	{r7}
 80211da:	b083      	sub	sp, #12
 80211dc:	af00      	add	r7, sp, #0
 80211de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80211e6:	b2db      	uxtb	r3, r3
 80211e8:	2b04      	cmp	r3, #4
 80211ea:	d106      	bne.n	80211fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80211ec:	687b      	ldr	r3, [r7, #4]
 80211ee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80211f2:	b2da      	uxtb	r2, r3
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80211fa:	2300      	movs	r3, #0
}
 80211fc:	4618      	mov	r0, r3
 80211fe:	370c      	adds	r7, #12
 8021200:	46bd      	mov	sp, r7
 8021202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021206:	4770      	bx	lr

08021208 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8021208:	b580      	push	{r7, lr}
 802120a:	b082      	sub	sp, #8
 802120c:	af00      	add	r7, sp, #0
 802120e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021216:	2b00      	cmp	r3, #0
 8021218:	d101      	bne.n	802121e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 802121a:	2303      	movs	r3, #3
 802121c:	e012      	b.n	8021244 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021224:	b2db      	uxtb	r3, r3
 8021226:	2b03      	cmp	r3, #3
 8021228:	d10b      	bne.n	8021242 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021230:	69db      	ldr	r3, [r3, #28]
 8021232:	2b00      	cmp	r3, #0
 8021234:	d005      	beq.n	8021242 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802123c:	69db      	ldr	r3, [r3, #28]
 802123e:	6878      	ldr	r0, [r7, #4]
 8021240:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021242:	2300      	movs	r3, #0
}
 8021244:	4618      	mov	r0, r3
 8021246:	3708      	adds	r7, #8
 8021248:	46bd      	mov	sp, r7
 802124a:	bd80      	pop	{r7, pc}

0802124c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 802124c:	b580      	push	{r7, lr}
 802124e:	b082      	sub	sp, #8
 8021250:	af00      	add	r7, sp, #0
 8021252:	6078      	str	r0, [r7, #4]
 8021254:	460b      	mov	r3, r1
 8021256:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802125e:	2b00      	cmp	r3, #0
 8021260:	d101      	bne.n	8021266 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8021262:	2303      	movs	r3, #3
 8021264:	e014      	b.n	8021290 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802126c:	b2db      	uxtb	r3, r3
 802126e:	2b03      	cmp	r3, #3
 8021270:	d10d      	bne.n	802128e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021278:	6a1b      	ldr	r3, [r3, #32]
 802127a:	2b00      	cmp	r3, #0
 802127c:	d007      	beq.n	802128e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021284:	6a1b      	ldr	r3, [r3, #32]
 8021286:	78fa      	ldrb	r2, [r7, #3]
 8021288:	4611      	mov	r1, r2
 802128a:	6878      	ldr	r0, [r7, #4]
 802128c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802128e:	2300      	movs	r3, #0
}
 8021290:	4618      	mov	r0, r3
 8021292:	3708      	adds	r7, #8
 8021294:	46bd      	mov	sp, r7
 8021296:	bd80      	pop	{r7, pc}

08021298 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8021298:	b580      	push	{r7, lr}
 802129a:	b082      	sub	sp, #8
 802129c:	af00      	add	r7, sp, #0
 802129e:	6078      	str	r0, [r7, #4]
 80212a0:	460b      	mov	r3, r1
 80212a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	d101      	bne.n	80212b2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80212ae:	2303      	movs	r3, #3
 80212b0:	e014      	b.n	80212dc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212b8:	b2db      	uxtb	r3, r3
 80212ba:	2b03      	cmp	r3, #3
 80212bc:	d10d      	bne.n	80212da <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80212be:	687b      	ldr	r3, [r7, #4]
 80212c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	d007      	beq.n	80212da <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80212ca:	687b      	ldr	r3, [r7, #4]
 80212cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80212d2:	78fa      	ldrb	r2, [r7, #3]
 80212d4:	4611      	mov	r1, r2
 80212d6:	6878      	ldr	r0, [r7, #4]
 80212d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80212da:	2300      	movs	r3, #0
}
 80212dc:	4618      	mov	r0, r3
 80212de:	3708      	adds	r7, #8
 80212e0:	46bd      	mov	sp, r7
 80212e2:	bd80      	pop	{r7, pc}

080212e4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80212e4:	b480      	push	{r7}
 80212e6:	b083      	sub	sp, #12
 80212e8:	af00      	add	r7, sp, #0
 80212ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80212ec:	2300      	movs	r3, #0
}
 80212ee:	4618      	mov	r0, r3
 80212f0:	370c      	adds	r7, #12
 80212f2:	46bd      	mov	sp, r7
 80212f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212f8:	4770      	bx	lr

080212fa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80212fa:	b580      	push	{r7, lr}
 80212fc:	b082      	sub	sp, #8
 80212fe:	af00      	add	r7, sp, #0
 8021300:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	2201      	movs	r2, #1
 8021306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 802130a:	687b      	ldr	r3, [r7, #4]
 802130c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021310:	2b00      	cmp	r3, #0
 8021312:	d009      	beq.n	8021328 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802131a:	685b      	ldr	r3, [r3, #4]
 802131c:	687a      	ldr	r2, [r7, #4]
 802131e:	6852      	ldr	r2, [r2, #4]
 8021320:	b2d2      	uxtb	r2, r2
 8021322:	4611      	mov	r1, r2
 8021324:	6878      	ldr	r0, [r7, #4]
 8021326:	4798      	blx	r3
  }

  return USBD_OK;
 8021328:	2300      	movs	r3, #0
}
 802132a:	4618      	mov	r0, r3
 802132c:	3708      	adds	r7, #8
 802132e:	46bd      	mov	sp, r7
 8021330:	bd80      	pop	{r7, pc}

08021332 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8021332:	b480      	push	{r7}
 8021334:	b087      	sub	sp, #28
 8021336:	af00      	add	r7, sp, #0
 8021338:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 802133a:	687b      	ldr	r3, [r7, #4]
 802133c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 802133e:	697b      	ldr	r3, [r7, #20]
 8021340:	781b      	ldrb	r3, [r3, #0]
 8021342:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8021344:	697b      	ldr	r3, [r7, #20]
 8021346:	3301      	adds	r3, #1
 8021348:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 802134a:	697b      	ldr	r3, [r7, #20]
 802134c:	781b      	ldrb	r3, [r3, #0]
 802134e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8021350:	8a3b      	ldrh	r3, [r7, #16]
 8021352:	021b      	lsls	r3, r3, #8
 8021354:	b21a      	sxth	r2, r3
 8021356:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802135a:	4313      	orrs	r3, r2
 802135c:	b21b      	sxth	r3, r3
 802135e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8021360:	89fb      	ldrh	r3, [r7, #14]
}
 8021362:	4618      	mov	r0, r3
 8021364:	371c      	adds	r7, #28
 8021366:	46bd      	mov	sp, r7
 8021368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802136c:	4770      	bx	lr
	...

08021370 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021370:	b580      	push	{r7, lr}
 8021372:	b084      	sub	sp, #16
 8021374:	af00      	add	r7, sp, #0
 8021376:	6078      	str	r0, [r7, #4]
 8021378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802137a:	2300      	movs	r3, #0
 802137c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802137e:	683b      	ldr	r3, [r7, #0]
 8021380:	781b      	ldrb	r3, [r3, #0]
 8021382:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021386:	2b40      	cmp	r3, #64	; 0x40
 8021388:	d005      	beq.n	8021396 <USBD_StdDevReq+0x26>
 802138a:	2b40      	cmp	r3, #64	; 0x40
 802138c:	d853      	bhi.n	8021436 <USBD_StdDevReq+0xc6>
 802138e:	2b00      	cmp	r3, #0
 8021390:	d00b      	beq.n	80213aa <USBD_StdDevReq+0x3a>
 8021392:	2b20      	cmp	r3, #32
 8021394:	d14f      	bne.n	8021436 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021396:	687b      	ldr	r3, [r7, #4]
 8021398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802139c:	689b      	ldr	r3, [r3, #8]
 802139e:	6839      	ldr	r1, [r7, #0]
 80213a0:	6878      	ldr	r0, [r7, #4]
 80213a2:	4798      	blx	r3
 80213a4:	4603      	mov	r3, r0
 80213a6:	73fb      	strb	r3, [r7, #15]
      break;
 80213a8:	e04a      	b.n	8021440 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80213aa:	683b      	ldr	r3, [r7, #0]
 80213ac:	785b      	ldrb	r3, [r3, #1]
 80213ae:	2b09      	cmp	r3, #9
 80213b0:	d83b      	bhi.n	802142a <USBD_StdDevReq+0xba>
 80213b2:	a201      	add	r2, pc, #4	; (adr r2, 80213b8 <USBD_StdDevReq+0x48>)
 80213b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80213b8:	0802140d 	.word	0x0802140d
 80213bc:	08021421 	.word	0x08021421
 80213c0:	0802142b 	.word	0x0802142b
 80213c4:	08021417 	.word	0x08021417
 80213c8:	0802142b 	.word	0x0802142b
 80213cc:	080213eb 	.word	0x080213eb
 80213d0:	080213e1 	.word	0x080213e1
 80213d4:	0802142b 	.word	0x0802142b
 80213d8:	08021403 	.word	0x08021403
 80213dc:	080213f5 	.word	0x080213f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80213e0:	6839      	ldr	r1, [r7, #0]
 80213e2:	6878      	ldr	r0, [r7, #4]
 80213e4:	f000 f9de 	bl	80217a4 <USBD_GetDescriptor>
          break;
 80213e8:	e024      	b.n	8021434 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80213ea:	6839      	ldr	r1, [r7, #0]
 80213ec:	6878      	ldr	r0, [r7, #4]
 80213ee:	f000 fb6d 	bl	8021acc <USBD_SetAddress>
          break;
 80213f2:	e01f      	b.n	8021434 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80213f4:	6839      	ldr	r1, [r7, #0]
 80213f6:	6878      	ldr	r0, [r7, #4]
 80213f8:	f000 fbac 	bl	8021b54 <USBD_SetConfig>
 80213fc:	4603      	mov	r3, r0
 80213fe:	73fb      	strb	r3, [r7, #15]
          break;
 8021400:	e018      	b.n	8021434 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021402:	6839      	ldr	r1, [r7, #0]
 8021404:	6878      	ldr	r0, [r7, #4]
 8021406:	f000 fc4b 	bl	8021ca0 <USBD_GetConfig>
          break;
 802140a:	e013      	b.n	8021434 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 802140c:	6839      	ldr	r1, [r7, #0]
 802140e:	6878      	ldr	r0, [r7, #4]
 8021410:	f000 fc7c 	bl	8021d0c <USBD_GetStatus>
          break;
 8021414:	e00e      	b.n	8021434 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8021416:	6839      	ldr	r1, [r7, #0]
 8021418:	6878      	ldr	r0, [r7, #4]
 802141a:	f000 fcab 	bl	8021d74 <USBD_SetFeature>
          break;
 802141e:	e009      	b.n	8021434 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021420:	6839      	ldr	r1, [r7, #0]
 8021422:	6878      	ldr	r0, [r7, #4]
 8021424:	f000 fcba 	bl	8021d9c <USBD_ClrFeature>
          break;
 8021428:	e004      	b.n	8021434 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 802142a:	6839      	ldr	r1, [r7, #0]
 802142c:	6878      	ldr	r0, [r7, #4]
 802142e:	f000 fd11 	bl	8021e54 <USBD_CtlError>
          break;
 8021432:	bf00      	nop
      }
      break;
 8021434:	e004      	b.n	8021440 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8021436:	6839      	ldr	r1, [r7, #0]
 8021438:	6878      	ldr	r0, [r7, #4]
 802143a:	f000 fd0b 	bl	8021e54 <USBD_CtlError>
      break;
 802143e:	bf00      	nop
  }

  return ret;
 8021440:	7bfb      	ldrb	r3, [r7, #15]
}
 8021442:	4618      	mov	r0, r3
 8021444:	3710      	adds	r7, #16
 8021446:	46bd      	mov	sp, r7
 8021448:	bd80      	pop	{r7, pc}
 802144a:	bf00      	nop

0802144c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802144c:	b580      	push	{r7, lr}
 802144e:	b084      	sub	sp, #16
 8021450:	af00      	add	r7, sp, #0
 8021452:	6078      	str	r0, [r7, #4]
 8021454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021456:	2300      	movs	r3, #0
 8021458:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802145a:	683b      	ldr	r3, [r7, #0]
 802145c:	781b      	ldrb	r3, [r3, #0]
 802145e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021462:	2b40      	cmp	r3, #64	; 0x40
 8021464:	d005      	beq.n	8021472 <USBD_StdItfReq+0x26>
 8021466:	2b40      	cmp	r3, #64	; 0x40
 8021468:	d82f      	bhi.n	80214ca <USBD_StdItfReq+0x7e>
 802146a:	2b00      	cmp	r3, #0
 802146c:	d001      	beq.n	8021472 <USBD_StdItfReq+0x26>
 802146e:	2b20      	cmp	r3, #32
 8021470:	d12b      	bne.n	80214ca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021478:	b2db      	uxtb	r3, r3
 802147a:	3b01      	subs	r3, #1
 802147c:	2b02      	cmp	r3, #2
 802147e:	d81d      	bhi.n	80214bc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021480:	683b      	ldr	r3, [r7, #0]
 8021482:	889b      	ldrh	r3, [r3, #4]
 8021484:	b2db      	uxtb	r3, r3
 8021486:	2b01      	cmp	r3, #1
 8021488:	d813      	bhi.n	80214b2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021490:	689b      	ldr	r3, [r3, #8]
 8021492:	6839      	ldr	r1, [r7, #0]
 8021494:	6878      	ldr	r0, [r7, #4]
 8021496:	4798      	blx	r3
 8021498:	4603      	mov	r3, r0
 802149a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 802149c:	683b      	ldr	r3, [r7, #0]
 802149e:	88db      	ldrh	r3, [r3, #6]
 80214a0:	2b00      	cmp	r3, #0
 80214a2:	d110      	bne.n	80214c6 <USBD_StdItfReq+0x7a>
 80214a4:	7bfb      	ldrb	r3, [r7, #15]
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	d10d      	bne.n	80214c6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80214aa:	6878      	ldr	r0, [r7, #4]
 80214ac:	f000 fd9d 	bl	8021fea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80214b0:	e009      	b.n	80214c6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80214b2:	6839      	ldr	r1, [r7, #0]
 80214b4:	6878      	ldr	r0, [r7, #4]
 80214b6:	f000 fccd 	bl	8021e54 <USBD_CtlError>
          break;
 80214ba:	e004      	b.n	80214c6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80214bc:	6839      	ldr	r1, [r7, #0]
 80214be:	6878      	ldr	r0, [r7, #4]
 80214c0:	f000 fcc8 	bl	8021e54 <USBD_CtlError>
          break;
 80214c4:	e000      	b.n	80214c8 <USBD_StdItfReq+0x7c>
          break;
 80214c6:	bf00      	nop
      }
      break;
 80214c8:	e004      	b.n	80214d4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80214ca:	6839      	ldr	r1, [r7, #0]
 80214cc:	6878      	ldr	r0, [r7, #4]
 80214ce:	f000 fcc1 	bl	8021e54 <USBD_CtlError>
      break;
 80214d2:	bf00      	nop
  }

  return ret;
 80214d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80214d6:	4618      	mov	r0, r3
 80214d8:	3710      	adds	r7, #16
 80214da:	46bd      	mov	sp, r7
 80214dc:	bd80      	pop	{r7, pc}

080214de <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80214de:	b580      	push	{r7, lr}
 80214e0:	b084      	sub	sp, #16
 80214e2:	af00      	add	r7, sp, #0
 80214e4:	6078      	str	r0, [r7, #4]
 80214e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80214e8:	2300      	movs	r3, #0
 80214ea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80214ec:	683b      	ldr	r3, [r7, #0]
 80214ee:	889b      	ldrh	r3, [r3, #4]
 80214f0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80214f2:	683b      	ldr	r3, [r7, #0]
 80214f4:	781b      	ldrb	r3, [r3, #0]
 80214f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80214fa:	2b40      	cmp	r3, #64	; 0x40
 80214fc:	d007      	beq.n	802150e <USBD_StdEPReq+0x30>
 80214fe:	2b40      	cmp	r3, #64	; 0x40
 8021500:	f200 8145 	bhi.w	802178e <USBD_StdEPReq+0x2b0>
 8021504:	2b00      	cmp	r3, #0
 8021506:	d00c      	beq.n	8021522 <USBD_StdEPReq+0x44>
 8021508:	2b20      	cmp	r3, #32
 802150a:	f040 8140 	bne.w	802178e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802150e:	687b      	ldr	r3, [r7, #4]
 8021510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021514:	689b      	ldr	r3, [r3, #8]
 8021516:	6839      	ldr	r1, [r7, #0]
 8021518:	6878      	ldr	r0, [r7, #4]
 802151a:	4798      	blx	r3
 802151c:	4603      	mov	r3, r0
 802151e:	73fb      	strb	r3, [r7, #15]
      break;
 8021520:	e13a      	b.n	8021798 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021522:	683b      	ldr	r3, [r7, #0]
 8021524:	785b      	ldrb	r3, [r3, #1]
 8021526:	2b03      	cmp	r3, #3
 8021528:	d007      	beq.n	802153a <USBD_StdEPReq+0x5c>
 802152a:	2b03      	cmp	r3, #3
 802152c:	f300 8129 	bgt.w	8021782 <USBD_StdEPReq+0x2a4>
 8021530:	2b00      	cmp	r3, #0
 8021532:	d07f      	beq.n	8021634 <USBD_StdEPReq+0x156>
 8021534:	2b01      	cmp	r3, #1
 8021536:	d03c      	beq.n	80215b2 <USBD_StdEPReq+0xd4>
 8021538:	e123      	b.n	8021782 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021540:	b2db      	uxtb	r3, r3
 8021542:	2b02      	cmp	r3, #2
 8021544:	d002      	beq.n	802154c <USBD_StdEPReq+0x6e>
 8021546:	2b03      	cmp	r3, #3
 8021548:	d016      	beq.n	8021578 <USBD_StdEPReq+0x9a>
 802154a:	e02c      	b.n	80215a6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802154c:	7bbb      	ldrb	r3, [r7, #14]
 802154e:	2b00      	cmp	r3, #0
 8021550:	d00d      	beq.n	802156e <USBD_StdEPReq+0x90>
 8021552:	7bbb      	ldrb	r3, [r7, #14]
 8021554:	2b80      	cmp	r3, #128	; 0x80
 8021556:	d00a      	beq.n	802156e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021558:	7bbb      	ldrb	r3, [r7, #14]
 802155a:	4619      	mov	r1, r3
 802155c:	6878      	ldr	r0, [r7, #4]
 802155e:	f002 fc1b 	bl	8023d98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021562:	2180      	movs	r1, #128	; 0x80
 8021564:	6878      	ldr	r0, [r7, #4]
 8021566:	f002 fc17 	bl	8023d98 <USBD_LL_StallEP>
 802156a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802156c:	e020      	b.n	80215b0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 802156e:	6839      	ldr	r1, [r7, #0]
 8021570:	6878      	ldr	r0, [r7, #4]
 8021572:	f000 fc6f 	bl	8021e54 <USBD_CtlError>
              break;
 8021576:	e01b      	b.n	80215b0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021578:	683b      	ldr	r3, [r7, #0]
 802157a:	885b      	ldrh	r3, [r3, #2]
 802157c:	2b00      	cmp	r3, #0
 802157e:	d10e      	bne.n	802159e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8021580:	7bbb      	ldrb	r3, [r7, #14]
 8021582:	2b00      	cmp	r3, #0
 8021584:	d00b      	beq.n	802159e <USBD_StdEPReq+0xc0>
 8021586:	7bbb      	ldrb	r3, [r7, #14]
 8021588:	2b80      	cmp	r3, #128	; 0x80
 802158a:	d008      	beq.n	802159e <USBD_StdEPReq+0xc0>
 802158c:	683b      	ldr	r3, [r7, #0]
 802158e:	88db      	ldrh	r3, [r3, #6]
 8021590:	2b00      	cmp	r3, #0
 8021592:	d104      	bne.n	802159e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8021594:	7bbb      	ldrb	r3, [r7, #14]
 8021596:	4619      	mov	r1, r3
 8021598:	6878      	ldr	r0, [r7, #4]
 802159a:	f002 fbfd 	bl	8023d98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 802159e:	6878      	ldr	r0, [r7, #4]
 80215a0:	f000 fd23 	bl	8021fea <USBD_CtlSendStatus>

              break;
 80215a4:	e004      	b.n	80215b0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80215a6:	6839      	ldr	r1, [r7, #0]
 80215a8:	6878      	ldr	r0, [r7, #4]
 80215aa:	f000 fc53 	bl	8021e54 <USBD_CtlError>
              break;
 80215ae:	bf00      	nop
          }
          break;
 80215b0:	e0ec      	b.n	802178c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80215b2:	687b      	ldr	r3, [r7, #4]
 80215b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80215b8:	b2db      	uxtb	r3, r3
 80215ba:	2b02      	cmp	r3, #2
 80215bc:	d002      	beq.n	80215c4 <USBD_StdEPReq+0xe6>
 80215be:	2b03      	cmp	r3, #3
 80215c0:	d016      	beq.n	80215f0 <USBD_StdEPReq+0x112>
 80215c2:	e030      	b.n	8021626 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80215c4:	7bbb      	ldrb	r3, [r7, #14]
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d00d      	beq.n	80215e6 <USBD_StdEPReq+0x108>
 80215ca:	7bbb      	ldrb	r3, [r7, #14]
 80215cc:	2b80      	cmp	r3, #128	; 0x80
 80215ce:	d00a      	beq.n	80215e6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80215d0:	7bbb      	ldrb	r3, [r7, #14]
 80215d2:	4619      	mov	r1, r3
 80215d4:	6878      	ldr	r0, [r7, #4]
 80215d6:	f002 fbdf 	bl	8023d98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80215da:	2180      	movs	r1, #128	; 0x80
 80215dc:	6878      	ldr	r0, [r7, #4]
 80215de:	f002 fbdb 	bl	8023d98 <USBD_LL_StallEP>
 80215e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80215e4:	e025      	b.n	8021632 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80215e6:	6839      	ldr	r1, [r7, #0]
 80215e8:	6878      	ldr	r0, [r7, #4]
 80215ea:	f000 fc33 	bl	8021e54 <USBD_CtlError>
              break;
 80215ee:	e020      	b.n	8021632 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80215f0:	683b      	ldr	r3, [r7, #0]
 80215f2:	885b      	ldrh	r3, [r3, #2]
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	d11b      	bne.n	8021630 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80215f8:	7bbb      	ldrb	r3, [r7, #14]
 80215fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80215fe:	2b00      	cmp	r3, #0
 8021600:	d004      	beq.n	802160c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8021602:	7bbb      	ldrb	r3, [r7, #14]
 8021604:	4619      	mov	r1, r3
 8021606:	6878      	ldr	r0, [r7, #4]
 8021608:	f002 fbe5 	bl	8023dd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 802160c:	6878      	ldr	r0, [r7, #4]
 802160e:	f000 fcec 	bl	8021fea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021618:	689b      	ldr	r3, [r3, #8]
 802161a:	6839      	ldr	r1, [r7, #0]
 802161c:	6878      	ldr	r0, [r7, #4]
 802161e:	4798      	blx	r3
 8021620:	4603      	mov	r3, r0
 8021622:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8021624:	e004      	b.n	8021630 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8021626:	6839      	ldr	r1, [r7, #0]
 8021628:	6878      	ldr	r0, [r7, #4]
 802162a:	f000 fc13 	bl	8021e54 <USBD_CtlError>
              break;
 802162e:	e000      	b.n	8021632 <USBD_StdEPReq+0x154>
              break;
 8021630:	bf00      	nop
          }
          break;
 8021632:	e0ab      	b.n	802178c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802163a:	b2db      	uxtb	r3, r3
 802163c:	2b02      	cmp	r3, #2
 802163e:	d002      	beq.n	8021646 <USBD_StdEPReq+0x168>
 8021640:	2b03      	cmp	r3, #3
 8021642:	d032      	beq.n	80216aa <USBD_StdEPReq+0x1cc>
 8021644:	e097      	b.n	8021776 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021646:	7bbb      	ldrb	r3, [r7, #14]
 8021648:	2b00      	cmp	r3, #0
 802164a:	d007      	beq.n	802165c <USBD_StdEPReq+0x17e>
 802164c:	7bbb      	ldrb	r3, [r7, #14]
 802164e:	2b80      	cmp	r3, #128	; 0x80
 8021650:	d004      	beq.n	802165c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8021652:	6839      	ldr	r1, [r7, #0]
 8021654:	6878      	ldr	r0, [r7, #4]
 8021656:	f000 fbfd 	bl	8021e54 <USBD_CtlError>
                break;
 802165a:	e091      	b.n	8021780 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802165c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021660:	2b00      	cmp	r3, #0
 8021662:	da0b      	bge.n	802167c <USBD_StdEPReq+0x19e>
 8021664:	7bbb      	ldrb	r3, [r7, #14]
 8021666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802166a:	4613      	mov	r3, r2
 802166c:	009b      	lsls	r3, r3, #2
 802166e:	4413      	add	r3, r2
 8021670:	009b      	lsls	r3, r3, #2
 8021672:	3310      	adds	r3, #16
 8021674:	687a      	ldr	r2, [r7, #4]
 8021676:	4413      	add	r3, r2
 8021678:	3304      	adds	r3, #4
 802167a:	e00b      	b.n	8021694 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802167c:	7bbb      	ldrb	r3, [r7, #14]
 802167e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021682:	4613      	mov	r3, r2
 8021684:	009b      	lsls	r3, r3, #2
 8021686:	4413      	add	r3, r2
 8021688:	009b      	lsls	r3, r3, #2
 802168a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802168e:	687a      	ldr	r2, [r7, #4]
 8021690:	4413      	add	r3, r2
 8021692:	3304      	adds	r3, #4
 8021694:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021696:	68bb      	ldr	r3, [r7, #8]
 8021698:	2200      	movs	r2, #0
 802169a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802169c:	68bb      	ldr	r3, [r7, #8]
 802169e:	2202      	movs	r2, #2
 80216a0:	4619      	mov	r1, r3
 80216a2:	6878      	ldr	r0, [r7, #4]
 80216a4:	f000 fc47 	bl	8021f36 <USBD_CtlSendData>
              break;
 80216a8:	e06a      	b.n	8021780 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80216aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	da11      	bge.n	80216d6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80216b2:	7bbb      	ldrb	r3, [r7, #14]
 80216b4:	f003 020f 	and.w	r2, r3, #15
 80216b8:	6879      	ldr	r1, [r7, #4]
 80216ba:	4613      	mov	r3, r2
 80216bc:	009b      	lsls	r3, r3, #2
 80216be:	4413      	add	r3, r2
 80216c0:	009b      	lsls	r3, r3, #2
 80216c2:	440b      	add	r3, r1
 80216c4:	3324      	adds	r3, #36	; 0x24
 80216c6:	881b      	ldrh	r3, [r3, #0]
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d117      	bne.n	80216fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80216cc:	6839      	ldr	r1, [r7, #0]
 80216ce:	6878      	ldr	r0, [r7, #4]
 80216d0:	f000 fbc0 	bl	8021e54 <USBD_CtlError>
                  break;
 80216d4:	e054      	b.n	8021780 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80216d6:	7bbb      	ldrb	r3, [r7, #14]
 80216d8:	f003 020f 	and.w	r2, r3, #15
 80216dc:	6879      	ldr	r1, [r7, #4]
 80216de:	4613      	mov	r3, r2
 80216e0:	009b      	lsls	r3, r3, #2
 80216e2:	4413      	add	r3, r2
 80216e4:	009b      	lsls	r3, r3, #2
 80216e6:	440b      	add	r3, r1
 80216e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80216ec:	881b      	ldrh	r3, [r3, #0]
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d104      	bne.n	80216fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80216f2:	6839      	ldr	r1, [r7, #0]
 80216f4:	6878      	ldr	r0, [r7, #4]
 80216f6:	f000 fbad 	bl	8021e54 <USBD_CtlError>
                  break;
 80216fa:	e041      	b.n	8021780 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80216fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021700:	2b00      	cmp	r3, #0
 8021702:	da0b      	bge.n	802171c <USBD_StdEPReq+0x23e>
 8021704:	7bbb      	ldrb	r3, [r7, #14]
 8021706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802170a:	4613      	mov	r3, r2
 802170c:	009b      	lsls	r3, r3, #2
 802170e:	4413      	add	r3, r2
 8021710:	009b      	lsls	r3, r3, #2
 8021712:	3310      	adds	r3, #16
 8021714:	687a      	ldr	r2, [r7, #4]
 8021716:	4413      	add	r3, r2
 8021718:	3304      	adds	r3, #4
 802171a:	e00b      	b.n	8021734 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802171c:	7bbb      	ldrb	r3, [r7, #14]
 802171e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021722:	4613      	mov	r3, r2
 8021724:	009b      	lsls	r3, r3, #2
 8021726:	4413      	add	r3, r2
 8021728:	009b      	lsls	r3, r3, #2
 802172a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802172e:	687a      	ldr	r2, [r7, #4]
 8021730:	4413      	add	r3, r2
 8021732:	3304      	adds	r3, #4
 8021734:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021736:	7bbb      	ldrb	r3, [r7, #14]
 8021738:	2b00      	cmp	r3, #0
 802173a:	d002      	beq.n	8021742 <USBD_StdEPReq+0x264>
 802173c:	7bbb      	ldrb	r3, [r7, #14]
 802173e:	2b80      	cmp	r3, #128	; 0x80
 8021740:	d103      	bne.n	802174a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8021742:	68bb      	ldr	r3, [r7, #8]
 8021744:	2200      	movs	r2, #0
 8021746:	601a      	str	r2, [r3, #0]
 8021748:	e00e      	b.n	8021768 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802174a:	7bbb      	ldrb	r3, [r7, #14]
 802174c:	4619      	mov	r1, r3
 802174e:	6878      	ldr	r0, [r7, #4]
 8021750:	f002 fb60 	bl	8023e14 <USBD_LL_IsStallEP>
 8021754:	4603      	mov	r3, r0
 8021756:	2b00      	cmp	r3, #0
 8021758:	d003      	beq.n	8021762 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 802175a:	68bb      	ldr	r3, [r7, #8]
 802175c:	2201      	movs	r2, #1
 802175e:	601a      	str	r2, [r3, #0]
 8021760:	e002      	b.n	8021768 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8021762:	68bb      	ldr	r3, [r7, #8]
 8021764:	2200      	movs	r2, #0
 8021766:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021768:	68bb      	ldr	r3, [r7, #8]
 802176a:	2202      	movs	r2, #2
 802176c:	4619      	mov	r1, r3
 802176e:	6878      	ldr	r0, [r7, #4]
 8021770:	f000 fbe1 	bl	8021f36 <USBD_CtlSendData>
              break;
 8021774:	e004      	b.n	8021780 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8021776:	6839      	ldr	r1, [r7, #0]
 8021778:	6878      	ldr	r0, [r7, #4]
 802177a:	f000 fb6b 	bl	8021e54 <USBD_CtlError>
              break;
 802177e:	bf00      	nop
          }
          break;
 8021780:	e004      	b.n	802178c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8021782:	6839      	ldr	r1, [r7, #0]
 8021784:	6878      	ldr	r0, [r7, #4]
 8021786:	f000 fb65 	bl	8021e54 <USBD_CtlError>
          break;
 802178a:	bf00      	nop
      }
      break;
 802178c:	e004      	b.n	8021798 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 802178e:	6839      	ldr	r1, [r7, #0]
 8021790:	6878      	ldr	r0, [r7, #4]
 8021792:	f000 fb5f 	bl	8021e54 <USBD_CtlError>
      break;
 8021796:	bf00      	nop
  }

  return ret;
 8021798:	7bfb      	ldrb	r3, [r7, #15]
}
 802179a:	4618      	mov	r0, r3
 802179c:	3710      	adds	r7, #16
 802179e:	46bd      	mov	sp, r7
 80217a0:	bd80      	pop	{r7, pc}
	...

080217a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80217a4:	b580      	push	{r7, lr}
 80217a6:	b084      	sub	sp, #16
 80217a8:	af00      	add	r7, sp, #0
 80217aa:	6078      	str	r0, [r7, #4]
 80217ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80217ae:	2300      	movs	r3, #0
 80217b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80217b2:	2300      	movs	r3, #0
 80217b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80217b6:	2300      	movs	r3, #0
 80217b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80217ba:	683b      	ldr	r3, [r7, #0]
 80217bc:	885b      	ldrh	r3, [r3, #2]
 80217be:	0a1b      	lsrs	r3, r3, #8
 80217c0:	b29b      	uxth	r3, r3
 80217c2:	3b01      	subs	r3, #1
 80217c4:	2b0e      	cmp	r3, #14
 80217c6:	f200 8152 	bhi.w	8021a6e <USBD_GetDescriptor+0x2ca>
 80217ca:	a201      	add	r2, pc, #4	; (adr r2, 80217d0 <USBD_GetDescriptor+0x2c>)
 80217cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80217d0:	08021841 	.word	0x08021841
 80217d4:	08021859 	.word	0x08021859
 80217d8:	08021899 	.word	0x08021899
 80217dc:	08021a6f 	.word	0x08021a6f
 80217e0:	08021a6f 	.word	0x08021a6f
 80217e4:	08021a0f 	.word	0x08021a0f
 80217e8:	08021a3b 	.word	0x08021a3b
 80217ec:	08021a6f 	.word	0x08021a6f
 80217f0:	08021a6f 	.word	0x08021a6f
 80217f4:	08021a6f 	.word	0x08021a6f
 80217f8:	08021a6f 	.word	0x08021a6f
 80217fc:	08021a6f 	.word	0x08021a6f
 8021800:	08021a6f 	.word	0x08021a6f
 8021804:	08021a6f 	.word	0x08021a6f
 8021808:	0802180d 	.word	0x0802180d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021812:	69db      	ldr	r3, [r3, #28]
 8021814:	2b00      	cmp	r3, #0
 8021816:	d00b      	beq.n	8021830 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8021818:	687b      	ldr	r3, [r7, #4]
 802181a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802181e:	69db      	ldr	r3, [r3, #28]
 8021820:	687a      	ldr	r2, [r7, #4]
 8021822:	7c12      	ldrb	r2, [r2, #16]
 8021824:	f107 0108 	add.w	r1, r7, #8
 8021828:	4610      	mov	r0, r2
 802182a:	4798      	blx	r3
 802182c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802182e:	e126      	b.n	8021a7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021830:	6839      	ldr	r1, [r7, #0]
 8021832:	6878      	ldr	r0, [r7, #4]
 8021834:	f000 fb0e 	bl	8021e54 <USBD_CtlError>
        err++;
 8021838:	7afb      	ldrb	r3, [r7, #11]
 802183a:	3301      	adds	r3, #1
 802183c:	72fb      	strb	r3, [r7, #11]
      break;
 802183e:	e11e      	b.n	8021a7e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021840:	687b      	ldr	r3, [r7, #4]
 8021842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021846:	681b      	ldr	r3, [r3, #0]
 8021848:	687a      	ldr	r2, [r7, #4]
 802184a:	7c12      	ldrb	r2, [r2, #16]
 802184c:	f107 0108 	add.w	r1, r7, #8
 8021850:	4610      	mov	r0, r2
 8021852:	4798      	blx	r3
 8021854:	60f8      	str	r0, [r7, #12]
      break;
 8021856:	e112      	b.n	8021a7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021858:	687b      	ldr	r3, [r7, #4]
 802185a:	7c1b      	ldrb	r3, [r3, #16]
 802185c:	2b00      	cmp	r3, #0
 802185e:	d10d      	bne.n	802187c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021860:	687b      	ldr	r3, [r7, #4]
 8021862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021868:	f107 0208 	add.w	r2, r7, #8
 802186c:	4610      	mov	r0, r2
 802186e:	4798      	blx	r3
 8021870:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021872:	68fb      	ldr	r3, [r7, #12]
 8021874:	3301      	adds	r3, #1
 8021876:	2202      	movs	r2, #2
 8021878:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802187a:	e100      	b.n	8021a7e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802187c:	687b      	ldr	r3, [r7, #4]
 802187e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021884:	f107 0208 	add.w	r2, r7, #8
 8021888:	4610      	mov	r0, r2
 802188a:	4798      	blx	r3
 802188c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802188e:	68fb      	ldr	r3, [r7, #12]
 8021890:	3301      	adds	r3, #1
 8021892:	2202      	movs	r2, #2
 8021894:	701a      	strb	r2, [r3, #0]
      break;
 8021896:	e0f2      	b.n	8021a7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021898:	683b      	ldr	r3, [r7, #0]
 802189a:	885b      	ldrh	r3, [r3, #2]
 802189c:	b2db      	uxtb	r3, r3
 802189e:	2b05      	cmp	r3, #5
 80218a0:	f200 80ac 	bhi.w	80219fc <USBD_GetDescriptor+0x258>
 80218a4:	a201      	add	r2, pc, #4	; (adr r2, 80218ac <USBD_GetDescriptor+0x108>)
 80218a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218aa:	bf00      	nop
 80218ac:	080218c5 	.word	0x080218c5
 80218b0:	080218f9 	.word	0x080218f9
 80218b4:	0802192d 	.word	0x0802192d
 80218b8:	08021961 	.word	0x08021961
 80218bc:	08021995 	.word	0x08021995
 80218c0:	080219c9 	.word	0x080219c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80218c4:	687b      	ldr	r3, [r7, #4]
 80218c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80218ca:	685b      	ldr	r3, [r3, #4]
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	d00b      	beq.n	80218e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80218d0:	687b      	ldr	r3, [r7, #4]
 80218d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80218d6:	685b      	ldr	r3, [r3, #4]
 80218d8:	687a      	ldr	r2, [r7, #4]
 80218da:	7c12      	ldrb	r2, [r2, #16]
 80218dc:	f107 0108 	add.w	r1, r7, #8
 80218e0:	4610      	mov	r0, r2
 80218e2:	4798      	blx	r3
 80218e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80218e6:	e091      	b.n	8021a0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80218e8:	6839      	ldr	r1, [r7, #0]
 80218ea:	6878      	ldr	r0, [r7, #4]
 80218ec:	f000 fab2 	bl	8021e54 <USBD_CtlError>
            err++;
 80218f0:	7afb      	ldrb	r3, [r7, #11]
 80218f2:	3301      	adds	r3, #1
 80218f4:	72fb      	strb	r3, [r7, #11]
          break;
 80218f6:	e089      	b.n	8021a0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80218fe:	689b      	ldr	r3, [r3, #8]
 8021900:	2b00      	cmp	r3, #0
 8021902:	d00b      	beq.n	802191c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021904:	687b      	ldr	r3, [r7, #4]
 8021906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802190a:	689b      	ldr	r3, [r3, #8]
 802190c:	687a      	ldr	r2, [r7, #4]
 802190e:	7c12      	ldrb	r2, [r2, #16]
 8021910:	f107 0108 	add.w	r1, r7, #8
 8021914:	4610      	mov	r0, r2
 8021916:	4798      	blx	r3
 8021918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802191a:	e077      	b.n	8021a0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802191c:	6839      	ldr	r1, [r7, #0]
 802191e:	6878      	ldr	r0, [r7, #4]
 8021920:	f000 fa98 	bl	8021e54 <USBD_CtlError>
            err++;
 8021924:	7afb      	ldrb	r3, [r7, #11]
 8021926:	3301      	adds	r3, #1
 8021928:	72fb      	strb	r3, [r7, #11]
          break;
 802192a:	e06f      	b.n	8021a0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802192c:	687b      	ldr	r3, [r7, #4]
 802192e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021932:	68db      	ldr	r3, [r3, #12]
 8021934:	2b00      	cmp	r3, #0
 8021936:	d00b      	beq.n	8021950 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802193e:	68db      	ldr	r3, [r3, #12]
 8021940:	687a      	ldr	r2, [r7, #4]
 8021942:	7c12      	ldrb	r2, [r2, #16]
 8021944:	f107 0108 	add.w	r1, r7, #8
 8021948:	4610      	mov	r0, r2
 802194a:	4798      	blx	r3
 802194c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802194e:	e05d      	b.n	8021a0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021950:	6839      	ldr	r1, [r7, #0]
 8021952:	6878      	ldr	r0, [r7, #4]
 8021954:	f000 fa7e 	bl	8021e54 <USBD_CtlError>
            err++;
 8021958:	7afb      	ldrb	r3, [r7, #11]
 802195a:	3301      	adds	r3, #1
 802195c:	72fb      	strb	r3, [r7, #11]
          break;
 802195e:	e055      	b.n	8021a0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021966:	691b      	ldr	r3, [r3, #16]
 8021968:	2b00      	cmp	r3, #0
 802196a:	d00b      	beq.n	8021984 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021972:	691b      	ldr	r3, [r3, #16]
 8021974:	687a      	ldr	r2, [r7, #4]
 8021976:	7c12      	ldrb	r2, [r2, #16]
 8021978:	f107 0108 	add.w	r1, r7, #8
 802197c:	4610      	mov	r0, r2
 802197e:	4798      	blx	r3
 8021980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021982:	e043      	b.n	8021a0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021984:	6839      	ldr	r1, [r7, #0]
 8021986:	6878      	ldr	r0, [r7, #4]
 8021988:	f000 fa64 	bl	8021e54 <USBD_CtlError>
            err++;
 802198c:	7afb      	ldrb	r3, [r7, #11]
 802198e:	3301      	adds	r3, #1
 8021990:	72fb      	strb	r3, [r7, #11]
          break;
 8021992:	e03b      	b.n	8021a0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802199a:	695b      	ldr	r3, [r3, #20]
 802199c:	2b00      	cmp	r3, #0
 802199e:	d00b      	beq.n	80219b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80219a0:	687b      	ldr	r3, [r7, #4]
 80219a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219a6:	695b      	ldr	r3, [r3, #20]
 80219a8:	687a      	ldr	r2, [r7, #4]
 80219aa:	7c12      	ldrb	r2, [r2, #16]
 80219ac:	f107 0108 	add.w	r1, r7, #8
 80219b0:	4610      	mov	r0, r2
 80219b2:	4798      	blx	r3
 80219b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80219b6:	e029      	b.n	8021a0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80219b8:	6839      	ldr	r1, [r7, #0]
 80219ba:	6878      	ldr	r0, [r7, #4]
 80219bc:	f000 fa4a 	bl	8021e54 <USBD_CtlError>
            err++;
 80219c0:	7afb      	ldrb	r3, [r7, #11]
 80219c2:	3301      	adds	r3, #1
 80219c4:	72fb      	strb	r3, [r7, #11]
          break;
 80219c6:	e021      	b.n	8021a0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80219c8:	687b      	ldr	r3, [r7, #4]
 80219ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219ce:	699b      	ldr	r3, [r3, #24]
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d00b      	beq.n	80219ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219da:	699b      	ldr	r3, [r3, #24]
 80219dc:	687a      	ldr	r2, [r7, #4]
 80219de:	7c12      	ldrb	r2, [r2, #16]
 80219e0:	f107 0108 	add.w	r1, r7, #8
 80219e4:	4610      	mov	r0, r2
 80219e6:	4798      	blx	r3
 80219e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80219ea:	e00f      	b.n	8021a0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80219ec:	6839      	ldr	r1, [r7, #0]
 80219ee:	6878      	ldr	r0, [r7, #4]
 80219f0:	f000 fa30 	bl	8021e54 <USBD_CtlError>
            err++;
 80219f4:	7afb      	ldrb	r3, [r7, #11]
 80219f6:	3301      	adds	r3, #1
 80219f8:	72fb      	strb	r3, [r7, #11]
          break;
 80219fa:	e007      	b.n	8021a0c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80219fc:	6839      	ldr	r1, [r7, #0]
 80219fe:	6878      	ldr	r0, [r7, #4]
 8021a00:	f000 fa28 	bl	8021e54 <USBD_CtlError>
          err++;
 8021a04:	7afb      	ldrb	r3, [r7, #11]
 8021a06:	3301      	adds	r3, #1
 8021a08:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021a0a:	bf00      	nop
      }
      break;
 8021a0c:	e037      	b.n	8021a7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	7c1b      	ldrb	r3, [r3, #16]
 8021a12:	2b00      	cmp	r3, #0
 8021a14:	d109      	bne.n	8021a2a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021a16:	687b      	ldr	r3, [r7, #4]
 8021a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021a1e:	f107 0208 	add.w	r2, r7, #8
 8021a22:	4610      	mov	r0, r2
 8021a24:	4798      	blx	r3
 8021a26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021a28:	e029      	b.n	8021a7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021a2a:	6839      	ldr	r1, [r7, #0]
 8021a2c:	6878      	ldr	r0, [r7, #4]
 8021a2e:	f000 fa11 	bl	8021e54 <USBD_CtlError>
        err++;
 8021a32:	7afb      	ldrb	r3, [r7, #11]
 8021a34:	3301      	adds	r3, #1
 8021a36:	72fb      	strb	r3, [r7, #11]
      break;
 8021a38:	e021      	b.n	8021a7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	7c1b      	ldrb	r3, [r3, #16]
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	d10d      	bne.n	8021a5e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a4a:	f107 0208 	add.w	r2, r7, #8
 8021a4e:	4610      	mov	r0, r2
 8021a50:	4798      	blx	r3
 8021a52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021a54:	68fb      	ldr	r3, [r7, #12]
 8021a56:	3301      	adds	r3, #1
 8021a58:	2207      	movs	r2, #7
 8021a5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021a5c:	e00f      	b.n	8021a7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021a5e:	6839      	ldr	r1, [r7, #0]
 8021a60:	6878      	ldr	r0, [r7, #4]
 8021a62:	f000 f9f7 	bl	8021e54 <USBD_CtlError>
        err++;
 8021a66:	7afb      	ldrb	r3, [r7, #11]
 8021a68:	3301      	adds	r3, #1
 8021a6a:	72fb      	strb	r3, [r7, #11]
      break;
 8021a6c:	e007      	b.n	8021a7e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021a6e:	6839      	ldr	r1, [r7, #0]
 8021a70:	6878      	ldr	r0, [r7, #4]
 8021a72:	f000 f9ef 	bl	8021e54 <USBD_CtlError>
      err++;
 8021a76:	7afb      	ldrb	r3, [r7, #11]
 8021a78:	3301      	adds	r3, #1
 8021a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8021a7c:	bf00      	nop
  }

  if (err != 0U)
 8021a7e:	7afb      	ldrb	r3, [r7, #11]
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	d11e      	bne.n	8021ac2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021a84:	683b      	ldr	r3, [r7, #0]
 8021a86:	88db      	ldrh	r3, [r3, #6]
 8021a88:	2b00      	cmp	r3, #0
 8021a8a:	d016      	beq.n	8021aba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021a8c:	893b      	ldrh	r3, [r7, #8]
 8021a8e:	2b00      	cmp	r3, #0
 8021a90:	d00e      	beq.n	8021ab0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021a92:	683b      	ldr	r3, [r7, #0]
 8021a94:	88da      	ldrh	r2, [r3, #6]
 8021a96:	893b      	ldrh	r3, [r7, #8]
 8021a98:	4293      	cmp	r3, r2
 8021a9a:	bf28      	it	cs
 8021a9c:	4613      	movcs	r3, r2
 8021a9e:	b29b      	uxth	r3, r3
 8021aa0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021aa2:	893b      	ldrh	r3, [r7, #8]
 8021aa4:	461a      	mov	r2, r3
 8021aa6:	68f9      	ldr	r1, [r7, #12]
 8021aa8:	6878      	ldr	r0, [r7, #4]
 8021aaa:	f000 fa44 	bl	8021f36 <USBD_CtlSendData>
 8021aae:	e009      	b.n	8021ac4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021ab0:	6839      	ldr	r1, [r7, #0]
 8021ab2:	6878      	ldr	r0, [r7, #4]
 8021ab4:	f000 f9ce 	bl	8021e54 <USBD_CtlError>
 8021ab8:	e004      	b.n	8021ac4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021aba:	6878      	ldr	r0, [r7, #4]
 8021abc:	f000 fa95 	bl	8021fea <USBD_CtlSendStatus>
 8021ac0:	e000      	b.n	8021ac4 <USBD_GetDescriptor+0x320>
    return;
 8021ac2:	bf00      	nop
  }
}
 8021ac4:	3710      	adds	r7, #16
 8021ac6:	46bd      	mov	sp, r7
 8021ac8:	bd80      	pop	{r7, pc}
 8021aca:	bf00      	nop

08021acc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021acc:	b580      	push	{r7, lr}
 8021ace:	b084      	sub	sp, #16
 8021ad0:	af00      	add	r7, sp, #0
 8021ad2:	6078      	str	r0, [r7, #4]
 8021ad4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021ad6:	683b      	ldr	r3, [r7, #0]
 8021ad8:	889b      	ldrh	r3, [r3, #4]
 8021ada:	2b00      	cmp	r3, #0
 8021adc:	d131      	bne.n	8021b42 <USBD_SetAddress+0x76>
 8021ade:	683b      	ldr	r3, [r7, #0]
 8021ae0:	88db      	ldrh	r3, [r3, #6]
 8021ae2:	2b00      	cmp	r3, #0
 8021ae4:	d12d      	bne.n	8021b42 <USBD_SetAddress+0x76>
 8021ae6:	683b      	ldr	r3, [r7, #0]
 8021ae8:	885b      	ldrh	r3, [r3, #2]
 8021aea:	2b7f      	cmp	r3, #127	; 0x7f
 8021aec:	d829      	bhi.n	8021b42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021aee:	683b      	ldr	r3, [r7, #0]
 8021af0:	885b      	ldrh	r3, [r3, #2]
 8021af2:	b2db      	uxtb	r3, r3
 8021af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021af8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021afa:	687b      	ldr	r3, [r7, #4]
 8021afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021b00:	b2db      	uxtb	r3, r3
 8021b02:	2b03      	cmp	r3, #3
 8021b04:	d104      	bne.n	8021b10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8021b06:	6839      	ldr	r1, [r7, #0]
 8021b08:	6878      	ldr	r0, [r7, #4]
 8021b0a:	f000 f9a3 	bl	8021e54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b0e:	e01d      	b.n	8021b4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021b10:	687b      	ldr	r3, [r7, #4]
 8021b12:	7bfa      	ldrb	r2, [r7, #15]
 8021b14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021b18:	7bfb      	ldrb	r3, [r7, #15]
 8021b1a:	4619      	mov	r1, r3
 8021b1c:	6878      	ldr	r0, [r7, #4]
 8021b1e:	f002 f9a5 	bl	8023e6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021b22:	6878      	ldr	r0, [r7, #4]
 8021b24:	f000 fa61 	bl	8021fea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021b28:	7bfb      	ldrb	r3, [r7, #15]
 8021b2a:	2b00      	cmp	r3, #0
 8021b2c:	d004      	beq.n	8021b38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	2202      	movs	r2, #2
 8021b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b36:	e009      	b.n	8021b4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021b38:	687b      	ldr	r3, [r7, #4]
 8021b3a:	2201      	movs	r2, #1
 8021b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b40:	e004      	b.n	8021b4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021b42:	6839      	ldr	r1, [r7, #0]
 8021b44:	6878      	ldr	r0, [r7, #4]
 8021b46:	f000 f985 	bl	8021e54 <USBD_CtlError>
  }
}
 8021b4a:	bf00      	nop
 8021b4c:	bf00      	nop
 8021b4e:	3710      	adds	r7, #16
 8021b50:	46bd      	mov	sp, r7
 8021b52:	bd80      	pop	{r7, pc}

08021b54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021b54:	b580      	push	{r7, lr}
 8021b56:	b084      	sub	sp, #16
 8021b58:	af00      	add	r7, sp, #0
 8021b5a:	6078      	str	r0, [r7, #4]
 8021b5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021b5e:	2300      	movs	r3, #0
 8021b60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021b62:	683b      	ldr	r3, [r7, #0]
 8021b64:	885b      	ldrh	r3, [r3, #2]
 8021b66:	b2da      	uxtb	r2, r3
 8021b68:	4b4c      	ldr	r3, [pc, #304]	; (8021c9c <USBD_SetConfig+0x148>)
 8021b6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021b6c:	4b4b      	ldr	r3, [pc, #300]	; (8021c9c <USBD_SetConfig+0x148>)
 8021b6e:	781b      	ldrb	r3, [r3, #0]
 8021b70:	2b01      	cmp	r3, #1
 8021b72:	d905      	bls.n	8021b80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021b74:	6839      	ldr	r1, [r7, #0]
 8021b76:	6878      	ldr	r0, [r7, #4]
 8021b78:	f000 f96c 	bl	8021e54 <USBD_CtlError>
    return USBD_FAIL;
 8021b7c:	2303      	movs	r3, #3
 8021b7e:	e088      	b.n	8021c92 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021b86:	b2db      	uxtb	r3, r3
 8021b88:	2b02      	cmp	r3, #2
 8021b8a:	d002      	beq.n	8021b92 <USBD_SetConfig+0x3e>
 8021b8c:	2b03      	cmp	r3, #3
 8021b8e:	d025      	beq.n	8021bdc <USBD_SetConfig+0x88>
 8021b90:	e071      	b.n	8021c76 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8021b92:	4b42      	ldr	r3, [pc, #264]	; (8021c9c <USBD_SetConfig+0x148>)
 8021b94:	781b      	ldrb	r3, [r3, #0]
 8021b96:	2b00      	cmp	r3, #0
 8021b98:	d01c      	beq.n	8021bd4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8021b9a:	4b40      	ldr	r3, [pc, #256]	; (8021c9c <USBD_SetConfig+0x148>)
 8021b9c:	781b      	ldrb	r3, [r3, #0]
 8021b9e:	461a      	mov	r2, r3
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021ba4:	4b3d      	ldr	r3, [pc, #244]	; (8021c9c <USBD_SetConfig+0x148>)
 8021ba6:	781b      	ldrb	r3, [r3, #0]
 8021ba8:	4619      	mov	r1, r3
 8021baa:	6878      	ldr	r0, [r7, #4]
 8021bac:	f7ff f91e 	bl	8020dec <USBD_SetClassConfig>
 8021bb0:	4603      	mov	r3, r0
 8021bb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8021bb4:	7bfb      	ldrb	r3, [r7, #15]
 8021bb6:	2b00      	cmp	r3, #0
 8021bb8:	d004      	beq.n	8021bc4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8021bba:	6839      	ldr	r1, [r7, #0]
 8021bbc:	6878      	ldr	r0, [r7, #4]
 8021bbe:	f000 f949 	bl	8021e54 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021bc2:	e065      	b.n	8021c90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021bc4:	6878      	ldr	r0, [r7, #4]
 8021bc6:	f000 fa10 	bl	8021fea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021bca:	687b      	ldr	r3, [r7, #4]
 8021bcc:	2203      	movs	r2, #3
 8021bce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021bd2:	e05d      	b.n	8021c90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021bd4:	6878      	ldr	r0, [r7, #4]
 8021bd6:	f000 fa08 	bl	8021fea <USBD_CtlSendStatus>
      break;
 8021bda:	e059      	b.n	8021c90 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8021bdc:	4b2f      	ldr	r3, [pc, #188]	; (8021c9c <USBD_SetConfig+0x148>)
 8021bde:	781b      	ldrb	r3, [r3, #0]
 8021be0:	2b00      	cmp	r3, #0
 8021be2:	d112      	bne.n	8021c0a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	2202      	movs	r2, #2
 8021be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8021bec:	4b2b      	ldr	r3, [pc, #172]	; (8021c9c <USBD_SetConfig+0x148>)
 8021bee:	781b      	ldrb	r3, [r3, #0]
 8021bf0:	461a      	mov	r2, r3
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021bf6:	4b29      	ldr	r3, [pc, #164]	; (8021c9c <USBD_SetConfig+0x148>)
 8021bf8:	781b      	ldrb	r3, [r3, #0]
 8021bfa:	4619      	mov	r1, r3
 8021bfc:	6878      	ldr	r0, [r7, #4]
 8021bfe:	f7ff f911 	bl	8020e24 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8021c02:	6878      	ldr	r0, [r7, #4]
 8021c04:	f000 f9f1 	bl	8021fea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021c08:	e042      	b.n	8021c90 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8021c0a:	4b24      	ldr	r3, [pc, #144]	; (8021c9c <USBD_SetConfig+0x148>)
 8021c0c:	781b      	ldrb	r3, [r3, #0]
 8021c0e:	461a      	mov	r2, r3
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	685b      	ldr	r3, [r3, #4]
 8021c14:	429a      	cmp	r2, r3
 8021c16:	d02a      	beq.n	8021c6e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	685b      	ldr	r3, [r3, #4]
 8021c1c:	b2db      	uxtb	r3, r3
 8021c1e:	4619      	mov	r1, r3
 8021c20:	6878      	ldr	r0, [r7, #4]
 8021c22:	f7ff f8ff 	bl	8020e24 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8021c26:	4b1d      	ldr	r3, [pc, #116]	; (8021c9c <USBD_SetConfig+0x148>)
 8021c28:	781b      	ldrb	r3, [r3, #0]
 8021c2a:	461a      	mov	r2, r3
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021c30:	4b1a      	ldr	r3, [pc, #104]	; (8021c9c <USBD_SetConfig+0x148>)
 8021c32:	781b      	ldrb	r3, [r3, #0]
 8021c34:	4619      	mov	r1, r3
 8021c36:	6878      	ldr	r0, [r7, #4]
 8021c38:	f7ff f8d8 	bl	8020dec <USBD_SetClassConfig>
 8021c3c:	4603      	mov	r3, r0
 8021c3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8021c40:	7bfb      	ldrb	r3, [r7, #15]
 8021c42:	2b00      	cmp	r3, #0
 8021c44:	d00f      	beq.n	8021c66 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8021c46:	6839      	ldr	r1, [r7, #0]
 8021c48:	6878      	ldr	r0, [r7, #4]
 8021c4a:	f000 f903 	bl	8021e54 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021c4e:	687b      	ldr	r3, [r7, #4]
 8021c50:	685b      	ldr	r3, [r3, #4]
 8021c52:	b2db      	uxtb	r3, r3
 8021c54:	4619      	mov	r1, r3
 8021c56:	6878      	ldr	r0, [r7, #4]
 8021c58:	f7ff f8e4 	bl	8020e24 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	2202      	movs	r2, #2
 8021c60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021c64:	e014      	b.n	8021c90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021c66:	6878      	ldr	r0, [r7, #4]
 8021c68:	f000 f9bf 	bl	8021fea <USBD_CtlSendStatus>
      break;
 8021c6c:	e010      	b.n	8021c90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021c6e:	6878      	ldr	r0, [r7, #4]
 8021c70:	f000 f9bb 	bl	8021fea <USBD_CtlSendStatus>
      break;
 8021c74:	e00c      	b.n	8021c90 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8021c76:	6839      	ldr	r1, [r7, #0]
 8021c78:	6878      	ldr	r0, [r7, #4]
 8021c7a:	f000 f8eb 	bl	8021e54 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021c7e:	4b07      	ldr	r3, [pc, #28]	; (8021c9c <USBD_SetConfig+0x148>)
 8021c80:	781b      	ldrb	r3, [r3, #0]
 8021c82:	4619      	mov	r1, r3
 8021c84:	6878      	ldr	r0, [r7, #4]
 8021c86:	f7ff f8cd 	bl	8020e24 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8021c8a:	2303      	movs	r3, #3
 8021c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8021c8e:	bf00      	nop
  }

  return ret;
 8021c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8021c92:	4618      	mov	r0, r3
 8021c94:	3710      	adds	r7, #16
 8021c96:	46bd      	mov	sp, r7
 8021c98:	bd80      	pop	{r7, pc}
 8021c9a:	bf00      	nop
 8021c9c:	2000094c 	.word	0x2000094c

08021ca0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ca0:	b580      	push	{r7, lr}
 8021ca2:	b082      	sub	sp, #8
 8021ca4:	af00      	add	r7, sp, #0
 8021ca6:	6078      	str	r0, [r7, #4]
 8021ca8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021caa:	683b      	ldr	r3, [r7, #0]
 8021cac:	88db      	ldrh	r3, [r3, #6]
 8021cae:	2b01      	cmp	r3, #1
 8021cb0:	d004      	beq.n	8021cbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8021cb2:	6839      	ldr	r1, [r7, #0]
 8021cb4:	6878      	ldr	r0, [r7, #4]
 8021cb6:	f000 f8cd 	bl	8021e54 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021cba:	e023      	b.n	8021d04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021cc2:	b2db      	uxtb	r3, r3
 8021cc4:	2b02      	cmp	r3, #2
 8021cc6:	dc02      	bgt.n	8021cce <USBD_GetConfig+0x2e>
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	dc03      	bgt.n	8021cd4 <USBD_GetConfig+0x34>
 8021ccc:	e015      	b.n	8021cfa <USBD_GetConfig+0x5a>
 8021cce:	2b03      	cmp	r3, #3
 8021cd0:	d00b      	beq.n	8021cea <USBD_GetConfig+0x4a>
 8021cd2:	e012      	b.n	8021cfa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	2200      	movs	r2, #0
 8021cd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	3308      	adds	r3, #8
 8021cde:	2201      	movs	r2, #1
 8021ce0:	4619      	mov	r1, r3
 8021ce2:	6878      	ldr	r0, [r7, #4]
 8021ce4:	f000 f927 	bl	8021f36 <USBD_CtlSendData>
        break;
 8021ce8:	e00c      	b.n	8021d04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	3304      	adds	r3, #4
 8021cee:	2201      	movs	r2, #1
 8021cf0:	4619      	mov	r1, r3
 8021cf2:	6878      	ldr	r0, [r7, #4]
 8021cf4:	f000 f91f 	bl	8021f36 <USBD_CtlSendData>
        break;
 8021cf8:	e004      	b.n	8021d04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8021cfa:	6839      	ldr	r1, [r7, #0]
 8021cfc:	6878      	ldr	r0, [r7, #4]
 8021cfe:	f000 f8a9 	bl	8021e54 <USBD_CtlError>
        break;
 8021d02:	bf00      	nop
}
 8021d04:	bf00      	nop
 8021d06:	3708      	adds	r7, #8
 8021d08:	46bd      	mov	sp, r7
 8021d0a:	bd80      	pop	{r7, pc}

08021d0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d0c:	b580      	push	{r7, lr}
 8021d0e:	b082      	sub	sp, #8
 8021d10:	af00      	add	r7, sp, #0
 8021d12:	6078      	str	r0, [r7, #4]
 8021d14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021d16:	687b      	ldr	r3, [r7, #4]
 8021d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021d1c:	b2db      	uxtb	r3, r3
 8021d1e:	3b01      	subs	r3, #1
 8021d20:	2b02      	cmp	r3, #2
 8021d22:	d81e      	bhi.n	8021d62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021d24:	683b      	ldr	r3, [r7, #0]
 8021d26:	88db      	ldrh	r3, [r3, #6]
 8021d28:	2b02      	cmp	r3, #2
 8021d2a:	d004      	beq.n	8021d36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8021d2c:	6839      	ldr	r1, [r7, #0]
 8021d2e:	6878      	ldr	r0, [r7, #4]
 8021d30:	f000 f890 	bl	8021e54 <USBD_CtlError>
        break;
 8021d34:	e01a      	b.n	8021d6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	2201      	movs	r2, #1
 8021d3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	d005      	beq.n	8021d52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	68db      	ldr	r3, [r3, #12]
 8021d4a:	f043 0202 	orr.w	r2, r3, #2
 8021d4e:	687b      	ldr	r3, [r7, #4]
 8021d50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	330c      	adds	r3, #12
 8021d56:	2202      	movs	r2, #2
 8021d58:	4619      	mov	r1, r3
 8021d5a:	6878      	ldr	r0, [r7, #4]
 8021d5c:	f000 f8eb 	bl	8021f36 <USBD_CtlSendData>
      break;
 8021d60:	e004      	b.n	8021d6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8021d62:	6839      	ldr	r1, [r7, #0]
 8021d64:	6878      	ldr	r0, [r7, #4]
 8021d66:	f000 f875 	bl	8021e54 <USBD_CtlError>
      break;
 8021d6a:	bf00      	nop
  }
}
 8021d6c:	bf00      	nop
 8021d6e:	3708      	adds	r7, #8
 8021d70:	46bd      	mov	sp, r7
 8021d72:	bd80      	pop	{r7, pc}

08021d74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d74:	b580      	push	{r7, lr}
 8021d76:	b082      	sub	sp, #8
 8021d78:	af00      	add	r7, sp, #0
 8021d7a:	6078      	str	r0, [r7, #4]
 8021d7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021d7e:	683b      	ldr	r3, [r7, #0]
 8021d80:	885b      	ldrh	r3, [r3, #2]
 8021d82:	2b01      	cmp	r3, #1
 8021d84:	d106      	bne.n	8021d94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8021d86:	687b      	ldr	r3, [r7, #4]
 8021d88:	2201      	movs	r2, #1
 8021d8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8021d8e:	6878      	ldr	r0, [r7, #4]
 8021d90:	f000 f92b 	bl	8021fea <USBD_CtlSendStatus>
  }
}
 8021d94:	bf00      	nop
 8021d96:	3708      	adds	r7, #8
 8021d98:	46bd      	mov	sp, r7
 8021d9a:	bd80      	pop	{r7, pc}

08021d9c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d9c:	b580      	push	{r7, lr}
 8021d9e:	b082      	sub	sp, #8
 8021da0:	af00      	add	r7, sp, #0
 8021da2:	6078      	str	r0, [r7, #4]
 8021da4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021dac:	b2db      	uxtb	r3, r3
 8021dae:	3b01      	subs	r3, #1
 8021db0:	2b02      	cmp	r3, #2
 8021db2:	d80b      	bhi.n	8021dcc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021db4:	683b      	ldr	r3, [r7, #0]
 8021db6:	885b      	ldrh	r3, [r3, #2]
 8021db8:	2b01      	cmp	r3, #1
 8021dba:	d10c      	bne.n	8021dd6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8021dbc:	687b      	ldr	r3, [r7, #4]
 8021dbe:	2200      	movs	r2, #0
 8021dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8021dc4:	6878      	ldr	r0, [r7, #4]
 8021dc6:	f000 f910 	bl	8021fea <USBD_CtlSendStatus>
      }
      break;
 8021dca:	e004      	b.n	8021dd6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8021dcc:	6839      	ldr	r1, [r7, #0]
 8021dce:	6878      	ldr	r0, [r7, #4]
 8021dd0:	f000 f840 	bl	8021e54 <USBD_CtlError>
      break;
 8021dd4:	e000      	b.n	8021dd8 <USBD_ClrFeature+0x3c>
      break;
 8021dd6:	bf00      	nop
  }
}
 8021dd8:	bf00      	nop
 8021dda:	3708      	adds	r7, #8
 8021ddc:	46bd      	mov	sp, r7
 8021dde:	bd80      	pop	{r7, pc}

08021de0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021de0:	b580      	push	{r7, lr}
 8021de2:	b084      	sub	sp, #16
 8021de4:	af00      	add	r7, sp, #0
 8021de6:	6078      	str	r0, [r7, #4]
 8021de8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8021dea:	683b      	ldr	r3, [r7, #0]
 8021dec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8021dee:	68fb      	ldr	r3, [r7, #12]
 8021df0:	781a      	ldrb	r2, [r3, #0]
 8021df2:	687b      	ldr	r3, [r7, #4]
 8021df4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8021df6:	68fb      	ldr	r3, [r7, #12]
 8021df8:	3301      	adds	r3, #1
 8021dfa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8021dfc:	68fb      	ldr	r3, [r7, #12]
 8021dfe:	781a      	ldrb	r2, [r3, #0]
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8021e04:	68fb      	ldr	r3, [r7, #12]
 8021e06:	3301      	adds	r3, #1
 8021e08:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8021e0a:	68f8      	ldr	r0, [r7, #12]
 8021e0c:	f7ff fa91 	bl	8021332 <SWAPBYTE>
 8021e10:	4603      	mov	r3, r0
 8021e12:	461a      	mov	r2, r3
 8021e14:	687b      	ldr	r3, [r7, #4]
 8021e16:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8021e18:	68fb      	ldr	r3, [r7, #12]
 8021e1a:	3301      	adds	r3, #1
 8021e1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021e1e:	68fb      	ldr	r3, [r7, #12]
 8021e20:	3301      	adds	r3, #1
 8021e22:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8021e24:	68f8      	ldr	r0, [r7, #12]
 8021e26:	f7ff fa84 	bl	8021332 <SWAPBYTE>
 8021e2a:	4603      	mov	r3, r0
 8021e2c:	461a      	mov	r2, r3
 8021e2e:	687b      	ldr	r3, [r7, #4]
 8021e30:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8021e32:	68fb      	ldr	r3, [r7, #12]
 8021e34:	3301      	adds	r3, #1
 8021e36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021e38:	68fb      	ldr	r3, [r7, #12]
 8021e3a:	3301      	adds	r3, #1
 8021e3c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8021e3e:	68f8      	ldr	r0, [r7, #12]
 8021e40:	f7ff fa77 	bl	8021332 <SWAPBYTE>
 8021e44:	4603      	mov	r3, r0
 8021e46:	461a      	mov	r2, r3
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	80da      	strh	r2, [r3, #6]
}
 8021e4c:	bf00      	nop
 8021e4e:	3710      	adds	r7, #16
 8021e50:	46bd      	mov	sp, r7
 8021e52:	bd80      	pop	{r7, pc}

08021e54 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e54:	b580      	push	{r7, lr}
 8021e56:	b082      	sub	sp, #8
 8021e58:	af00      	add	r7, sp, #0
 8021e5a:	6078      	str	r0, [r7, #4]
 8021e5c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021e5e:	2180      	movs	r1, #128	; 0x80
 8021e60:	6878      	ldr	r0, [r7, #4]
 8021e62:	f001 ff99 	bl	8023d98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021e66:	2100      	movs	r1, #0
 8021e68:	6878      	ldr	r0, [r7, #4]
 8021e6a:	f001 ff95 	bl	8023d98 <USBD_LL_StallEP>
}
 8021e6e:	bf00      	nop
 8021e70:	3708      	adds	r7, #8
 8021e72:	46bd      	mov	sp, r7
 8021e74:	bd80      	pop	{r7, pc}

08021e76 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021e76:	b580      	push	{r7, lr}
 8021e78:	b086      	sub	sp, #24
 8021e7a:	af00      	add	r7, sp, #0
 8021e7c:	60f8      	str	r0, [r7, #12]
 8021e7e:	60b9      	str	r1, [r7, #8]
 8021e80:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021e82:	2300      	movs	r3, #0
 8021e84:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8021e86:	68fb      	ldr	r3, [r7, #12]
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	d036      	beq.n	8021efa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8021e8c:	68fb      	ldr	r3, [r7, #12]
 8021e8e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8021e90:	6938      	ldr	r0, [r7, #16]
 8021e92:	f000 f836 	bl	8021f02 <USBD_GetLen>
 8021e96:	4603      	mov	r3, r0
 8021e98:	3301      	adds	r3, #1
 8021e9a:	b29b      	uxth	r3, r3
 8021e9c:	005b      	lsls	r3, r3, #1
 8021e9e:	b29a      	uxth	r2, r3
 8021ea0:	687b      	ldr	r3, [r7, #4]
 8021ea2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8021ea4:	7dfb      	ldrb	r3, [r7, #23]
 8021ea6:	68ba      	ldr	r2, [r7, #8]
 8021ea8:	4413      	add	r3, r2
 8021eaa:	687a      	ldr	r2, [r7, #4]
 8021eac:	7812      	ldrb	r2, [r2, #0]
 8021eae:	701a      	strb	r2, [r3, #0]
  idx++;
 8021eb0:	7dfb      	ldrb	r3, [r7, #23]
 8021eb2:	3301      	adds	r3, #1
 8021eb4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8021eb6:	7dfb      	ldrb	r3, [r7, #23]
 8021eb8:	68ba      	ldr	r2, [r7, #8]
 8021eba:	4413      	add	r3, r2
 8021ebc:	2203      	movs	r2, #3
 8021ebe:	701a      	strb	r2, [r3, #0]
  idx++;
 8021ec0:	7dfb      	ldrb	r3, [r7, #23]
 8021ec2:	3301      	adds	r3, #1
 8021ec4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8021ec6:	e013      	b.n	8021ef0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8021ec8:	7dfb      	ldrb	r3, [r7, #23]
 8021eca:	68ba      	ldr	r2, [r7, #8]
 8021ecc:	4413      	add	r3, r2
 8021ece:	693a      	ldr	r2, [r7, #16]
 8021ed0:	7812      	ldrb	r2, [r2, #0]
 8021ed2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8021ed4:	693b      	ldr	r3, [r7, #16]
 8021ed6:	3301      	adds	r3, #1
 8021ed8:	613b      	str	r3, [r7, #16]
    idx++;
 8021eda:	7dfb      	ldrb	r3, [r7, #23]
 8021edc:	3301      	adds	r3, #1
 8021ede:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8021ee0:	7dfb      	ldrb	r3, [r7, #23]
 8021ee2:	68ba      	ldr	r2, [r7, #8]
 8021ee4:	4413      	add	r3, r2
 8021ee6:	2200      	movs	r2, #0
 8021ee8:	701a      	strb	r2, [r3, #0]
    idx++;
 8021eea:	7dfb      	ldrb	r3, [r7, #23]
 8021eec:	3301      	adds	r3, #1
 8021eee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8021ef0:	693b      	ldr	r3, [r7, #16]
 8021ef2:	781b      	ldrb	r3, [r3, #0]
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	d1e7      	bne.n	8021ec8 <USBD_GetString+0x52>
 8021ef8:	e000      	b.n	8021efc <USBD_GetString+0x86>
    return;
 8021efa:	bf00      	nop
  }
}
 8021efc:	3718      	adds	r7, #24
 8021efe:	46bd      	mov	sp, r7
 8021f00:	bd80      	pop	{r7, pc}

08021f02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8021f02:	b480      	push	{r7}
 8021f04:	b085      	sub	sp, #20
 8021f06:	af00      	add	r7, sp, #0
 8021f08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8021f0a:	2300      	movs	r3, #0
 8021f0c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8021f12:	e005      	b.n	8021f20 <USBD_GetLen+0x1e>
  {
    len++;
 8021f14:	7bfb      	ldrb	r3, [r7, #15]
 8021f16:	3301      	adds	r3, #1
 8021f18:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8021f1a:	68bb      	ldr	r3, [r7, #8]
 8021f1c:	3301      	adds	r3, #1
 8021f1e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8021f20:	68bb      	ldr	r3, [r7, #8]
 8021f22:	781b      	ldrb	r3, [r3, #0]
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	d1f5      	bne.n	8021f14 <USBD_GetLen+0x12>
  }

  return len;
 8021f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8021f2a:	4618      	mov	r0, r3
 8021f2c:	3714      	adds	r7, #20
 8021f2e:	46bd      	mov	sp, r7
 8021f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f34:	4770      	bx	lr

08021f36 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8021f36:	b580      	push	{r7, lr}
 8021f38:	b084      	sub	sp, #16
 8021f3a:	af00      	add	r7, sp, #0
 8021f3c:	60f8      	str	r0, [r7, #12]
 8021f3e:	60b9      	str	r1, [r7, #8]
 8021f40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8021f42:	68fb      	ldr	r3, [r7, #12]
 8021f44:	2202      	movs	r2, #2
 8021f46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8021f4a:	68fb      	ldr	r3, [r7, #12]
 8021f4c:	687a      	ldr	r2, [r7, #4]
 8021f4e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8021f50:	68fb      	ldr	r3, [r7, #12]
 8021f52:	687a      	ldr	r2, [r7, #4]
 8021f54:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	68ba      	ldr	r2, [r7, #8]
 8021f5a:	2100      	movs	r1, #0
 8021f5c:	68f8      	ldr	r0, [r7, #12]
 8021f5e:	f001 ffa4 	bl	8023eaa <USBD_LL_Transmit>

  return USBD_OK;
 8021f62:	2300      	movs	r3, #0
}
 8021f64:	4618      	mov	r0, r3
 8021f66:	3710      	adds	r7, #16
 8021f68:	46bd      	mov	sp, r7
 8021f6a:	bd80      	pop	{r7, pc}

08021f6c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8021f6c:	b580      	push	{r7, lr}
 8021f6e:	b084      	sub	sp, #16
 8021f70:	af00      	add	r7, sp, #0
 8021f72:	60f8      	str	r0, [r7, #12]
 8021f74:	60b9      	str	r1, [r7, #8]
 8021f76:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	68ba      	ldr	r2, [r7, #8]
 8021f7c:	2100      	movs	r1, #0
 8021f7e:	68f8      	ldr	r0, [r7, #12]
 8021f80:	f001 ff93 	bl	8023eaa <USBD_LL_Transmit>

  return USBD_OK;
 8021f84:	2300      	movs	r3, #0
}
 8021f86:	4618      	mov	r0, r3
 8021f88:	3710      	adds	r7, #16
 8021f8a:	46bd      	mov	sp, r7
 8021f8c:	bd80      	pop	{r7, pc}

08021f8e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8021f8e:	b580      	push	{r7, lr}
 8021f90:	b084      	sub	sp, #16
 8021f92:	af00      	add	r7, sp, #0
 8021f94:	60f8      	str	r0, [r7, #12]
 8021f96:	60b9      	str	r1, [r7, #8]
 8021f98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8021f9a:	68fb      	ldr	r3, [r7, #12]
 8021f9c:	2203      	movs	r2, #3
 8021f9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8021fa2:	68fb      	ldr	r3, [r7, #12]
 8021fa4:	687a      	ldr	r2, [r7, #4]
 8021fa6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8021faa:	68fb      	ldr	r3, [r7, #12]
 8021fac:	687a      	ldr	r2, [r7, #4]
 8021fae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	68ba      	ldr	r2, [r7, #8]
 8021fb6:	2100      	movs	r1, #0
 8021fb8:	68f8      	ldr	r0, [r7, #12]
 8021fba:	f001 ff97 	bl	8023eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021fbe:	2300      	movs	r3, #0
}
 8021fc0:	4618      	mov	r0, r3
 8021fc2:	3710      	adds	r7, #16
 8021fc4:	46bd      	mov	sp, r7
 8021fc6:	bd80      	pop	{r7, pc}

08021fc8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8021fc8:	b580      	push	{r7, lr}
 8021fca:	b084      	sub	sp, #16
 8021fcc:	af00      	add	r7, sp, #0
 8021fce:	60f8      	str	r0, [r7, #12]
 8021fd0:	60b9      	str	r1, [r7, #8]
 8021fd2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021fd4:	687b      	ldr	r3, [r7, #4]
 8021fd6:	68ba      	ldr	r2, [r7, #8]
 8021fd8:	2100      	movs	r1, #0
 8021fda:	68f8      	ldr	r0, [r7, #12]
 8021fdc:	f001 ff86 	bl	8023eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021fe0:	2300      	movs	r3, #0
}
 8021fe2:	4618      	mov	r0, r3
 8021fe4:	3710      	adds	r7, #16
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	bd80      	pop	{r7, pc}

08021fea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8021fea:	b580      	push	{r7, lr}
 8021fec:	b082      	sub	sp, #8
 8021fee:	af00      	add	r7, sp, #0
 8021ff0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8021ff2:	687b      	ldr	r3, [r7, #4]
 8021ff4:	2204      	movs	r2, #4
 8021ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8021ffa:	2300      	movs	r3, #0
 8021ffc:	2200      	movs	r2, #0
 8021ffe:	2100      	movs	r1, #0
 8022000:	6878      	ldr	r0, [r7, #4]
 8022002:	f001 ff52 	bl	8023eaa <USBD_LL_Transmit>

  return USBD_OK;
 8022006:	2300      	movs	r3, #0
}
 8022008:	4618      	mov	r0, r3
 802200a:	3708      	adds	r7, #8
 802200c:	46bd      	mov	sp, r7
 802200e:	bd80      	pop	{r7, pc}

08022010 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022010:	b580      	push	{r7, lr}
 8022012:	b082      	sub	sp, #8
 8022014:	af00      	add	r7, sp, #0
 8022016:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	2205      	movs	r2, #5
 802201c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022020:	2300      	movs	r3, #0
 8022022:	2200      	movs	r2, #0
 8022024:	2100      	movs	r1, #0
 8022026:	6878      	ldr	r0, [r7, #4]
 8022028:	f001 ff60 	bl	8023eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 802202c:	2300      	movs	r3, #0
}
 802202e:	4618      	mov	r0, r3
 8022030:	3708      	adds	r7, #8
 8022032:	46bd      	mov	sp, r7
 8022034:	bd80      	pop	{r7, pc}

08022036 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8022036:	b480      	push	{r7}
 8022038:	b085      	sub	sp, #20
 802203a:	af00      	add	r7, sp, #0
 802203c:	4603      	mov	r3, r0
 802203e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8022040:	2300      	movs	r3, #0
 8022042:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8022044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8022048:	2b84      	cmp	r3, #132	; 0x84
 802204a:	d005      	beq.n	8022058 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 802204c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022050:	68fb      	ldr	r3, [r7, #12]
 8022052:	4413      	add	r3, r2
 8022054:	3303      	adds	r3, #3
 8022056:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8022058:	68fb      	ldr	r3, [r7, #12]
}
 802205a:	4618      	mov	r0, r3
 802205c:	3714      	adds	r7, #20
 802205e:	46bd      	mov	sp, r7
 8022060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022064:	4770      	bx	lr

08022066 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8022066:	b580      	push	{r7, lr}
 8022068:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 802206a:	f000 fb15 	bl	8022698 <vTaskStartScheduler>
  
  return osOK;
 802206e:	2300      	movs	r3, #0
}
 8022070:	4618      	mov	r0, r3
 8022072:	bd80      	pop	{r7, pc}

08022074 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8022074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022076:	b089      	sub	sp, #36	; 0x24
 8022078:	af04      	add	r7, sp, #16
 802207a:	6078      	str	r0, [r7, #4]
 802207c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	695b      	ldr	r3, [r3, #20]
 8022082:	2b00      	cmp	r3, #0
 8022084:	d020      	beq.n	80220c8 <osThreadCreate+0x54>
 8022086:	687b      	ldr	r3, [r7, #4]
 8022088:	699b      	ldr	r3, [r3, #24]
 802208a:	2b00      	cmp	r3, #0
 802208c:	d01c      	beq.n	80220c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	685c      	ldr	r4, [r3, #4]
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	681d      	ldr	r5, [r3, #0]
 8022096:	687b      	ldr	r3, [r7, #4]
 8022098:	691e      	ldr	r6, [r3, #16]
 802209a:	687b      	ldr	r3, [r7, #4]
 802209c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80220a0:	4618      	mov	r0, r3
 80220a2:	f7ff ffc8 	bl	8022036 <makeFreeRtosPriority>
 80220a6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	695b      	ldr	r3, [r3, #20]
 80220ac:	687a      	ldr	r2, [r7, #4]
 80220ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80220b0:	9202      	str	r2, [sp, #8]
 80220b2:	9301      	str	r3, [sp, #4]
 80220b4:	9100      	str	r1, [sp, #0]
 80220b6:	683b      	ldr	r3, [r7, #0]
 80220b8:	4632      	mov	r2, r6
 80220ba:	4629      	mov	r1, r5
 80220bc:	4620      	mov	r0, r4
 80220be:	f000 f8d9 	bl	8022274 <xTaskCreateStatic>
 80220c2:	4603      	mov	r3, r0
 80220c4:	60fb      	str	r3, [r7, #12]
 80220c6:	e01c      	b.n	8022102 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80220c8:	687b      	ldr	r3, [r7, #4]
 80220ca:	685c      	ldr	r4, [r3, #4]
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80220d4:	b29e      	uxth	r6, r3
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80220dc:	4618      	mov	r0, r3
 80220de:	f7ff ffaa 	bl	8022036 <makeFreeRtosPriority>
 80220e2:	4602      	mov	r2, r0
 80220e4:	f107 030c 	add.w	r3, r7, #12
 80220e8:	9301      	str	r3, [sp, #4]
 80220ea:	9200      	str	r2, [sp, #0]
 80220ec:	683b      	ldr	r3, [r7, #0]
 80220ee:	4632      	mov	r2, r6
 80220f0:	4629      	mov	r1, r5
 80220f2:	4620      	mov	r0, r4
 80220f4:	f000 f91b 	bl	802232e <xTaskCreate>
 80220f8:	4603      	mov	r3, r0
 80220fa:	2b01      	cmp	r3, #1
 80220fc:	d001      	beq.n	8022102 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80220fe:	2300      	movs	r3, #0
 8022100:	e000      	b.n	8022104 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8022102:	68fb      	ldr	r3, [r7, #12]
}
 8022104:	4618      	mov	r0, r3
 8022106:	3714      	adds	r7, #20
 8022108:	46bd      	mov	sp, r7
 802210a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802210c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 802210c:	b480      	push	{r7}
 802210e:	b083      	sub	sp, #12
 8022110:	af00      	add	r7, sp, #0
 8022112:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	f103 0208 	add.w	r2, r3, #8
 802211a:	687b      	ldr	r3, [r7, #4]
 802211c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	f04f 32ff 	mov.w	r2, #4294967295
 8022124:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	f103 0208 	add.w	r2, r3, #8
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8022130:	687b      	ldr	r3, [r7, #4]
 8022132:	f103 0208 	add.w	r2, r3, #8
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	2200      	movs	r2, #0
 802213e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8022140:	bf00      	nop
 8022142:	370c      	adds	r7, #12
 8022144:	46bd      	mov	sp, r7
 8022146:	f85d 7b04 	ldr.w	r7, [sp], #4
 802214a:	4770      	bx	lr

0802214c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 802214c:	b480      	push	{r7}
 802214e:	b083      	sub	sp, #12
 8022150:	af00      	add	r7, sp, #0
 8022152:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8022154:	687b      	ldr	r3, [r7, #4]
 8022156:	2200      	movs	r2, #0
 8022158:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 802215a:	bf00      	nop
 802215c:	370c      	adds	r7, #12
 802215e:	46bd      	mov	sp, r7
 8022160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022164:	4770      	bx	lr

08022166 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8022166:	b480      	push	{r7}
 8022168:	b085      	sub	sp, #20
 802216a:	af00      	add	r7, sp, #0
 802216c:	6078      	str	r0, [r7, #4]
 802216e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	685b      	ldr	r3, [r3, #4]
 8022174:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8022176:	683b      	ldr	r3, [r7, #0]
 8022178:	68fa      	ldr	r2, [r7, #12]
 802217a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 802217c:	68fb      	ldr	r3, [r7, #12]
 802217e:	689a      	ldr	r2, [r3, #8]
 8022180:	683b      	ldr	r3, [r7, #0]
 8022182:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8022184:	68fb      	ldr	r3, [r7, #12]
 8022186:	689b      	ldr	r3, [r3, #8]
 8022188:	683a      	ldr	r2, [r7, #0]
 802218a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 802218c:	68fb      	ldr	r3, [r7, #12]
 802218e:	683a      	ldr	r2, [r7, #0]
 8022190:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8022192:	683b      	ldr	r3, [r7, #0]
 8022194:	687a      	ldr	r2, [r7, #4]
 8022196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	681b      	ldr	r3, [r3, #0]
 802219c:	1c5a      	adds	r2, r3, #1
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	601a      	str	r2, [r3, #0]
}
 80221a2:	bf00      	nop
 80221a4:	3714      	adds	r7, #20
 80221a6:	46bd      	mov	sp, r7
 80221a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ac:	4770      	bx	lr

080221ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80221ae:	b480      	push	{r7}
 80221b0:	b085      	sub	sp, #20
 80221b2:	af00      	add	r7, sp, #0
 80221b4:	6078      	str	r0, [r7, #4]
 80221b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80221b8:	683b      	ldr	r3, [r7, #0]
 80221ba:	681b      	ldr	r3, [r3, #0]
 80221bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80221be:	68bb      	ldr	r3, [r7, #8]
 80221c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80221c4:	d103      	bne.n	80221ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80221c6:	687b      	ldr	r3, [r7, #4]
 80221c8:	691b      	ldr	r3, [r3, #16]
 80221ca:	60fb      	str	r3, [r7, #12]
 80221cc:	e00c      	b.n	80221e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80221ce:	687b      	ldr	r3, [r7, #4]
 80221d0:	3308      	adds	r3, #8
 80221d2:	60fb      	str	r3, [r7, #12]
 80221d4:	e002      	b.n	80221dc <vListInsert+0x2e>
 80221d6:	68fb      	ldr	r3, [r7, #12]
 80221d8:	685b      	ldr	r3, [r3, #4]
 80221da:	60fb      	str	r3, [r7, #12]
 80221dc:	68fb      	ldr	r3, [r7, #12]
 80221de:	685b      	ldr	r3, [r3, #4]
 80221e0:	681b      	ldr	r3, [r3, #0]
 80221e2:	68ba      	ldr	r2, [r7, #8]
 80221e4:	429a      	cmp	r2, r3
 80221e6:	d2f6      	bcs.n	80221d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80221e8:	68fb      	ldr	r3, [r7, #12]
 80221ea:	685a      	ldr	r2, [r3, #4]
 80221ec:	683b      	ldr	r3, [r7, #0]
 80221ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80221f0:	683b      	ldr	r3, [r7, #0]
 80221f2:	685b      	ldr	r3, [r3, #4]
 80221f4:	683a      	ldr	r2, [r7, #0]
 80221f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80221f8:	683b      	ldr	r3, [r7, #0]
 80221fa:	68fa      	ldr	r2, [r7, #12]
 80221fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80221fe:	68fb      	ldr	r3, [r7, #12]
 8022200:	683a      	ldr	r2, [r7, #0]
 8022202:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8022204:	683b      	ldr	r3, [r7, #0]
 8022206:	687a      	ldr	r2, [r7, #4]
 8022208:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	681b      	ldr	r3, [r3, #0]
 802220e:	1c5a      	adds	r2, r3, #1
 8022210:	687b      	ldr	r3, [r7, #4]
 8022212:	601a      	str	r2, [r3, #0]
}
 8022214:	bf00      	nop
 8022216:	3714      	adds	r7, #20
 8022218:	46bd      	mov	sp, r7
 802221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802221e:	4770      	bx	lr

08022220 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8022220:	b480      	push	{r7}
 8022222:	b085      	sub	sp, #20
 8022224:	af00      	add	r7, sp, #0
 8022226:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8022228:	687b      	ldr	r3, [r7, #4]
 802222a:	691b      	ldr	r3, [r3, #16]
 802222c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 802222e:	687b      	ldr	r3, [r7, #4]
 8022230:	685b      	ldr	r3, [r3, #4]
 8022232:	687a      	ldr	r2, [r7, #4]
 8022234:	6892      	ldr	r2, [r2, #8]
 8022236:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	689b      	ldr	r3, [r3, #8]
 802223c:	687a      	ldr	r2, [r7, #4]
 802223e:	6852      	ldr	r2, [r2, #4]
 8022240:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8022242:	68fb      	ldr	r3, [r7, #12]
 8022244:	685b      	ldr	r3, [r3, #4]
 8022246:	687a      	ldr	r2, [r7, #4]
 8022248:	429a      	cmp	r2, r3
 802224a:	d103      	bne.n	8022254 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	689a      	ldr	r2, [r3, #8]
 8022250:	68fb      	ldr	r3, [r7, #12]
 8022252:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	2200      	movs	r2, #0
 8022258:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 802225a:	68fb      	ldr	r3, [r7, #12]
 802225c:	681b      	ldr	r3, [r3, #0]
 802225e:	1e5a      	subs	r2, r3, #1
 8022260:	68fb      	ldr	r3, [r7, #12]
 8022262:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8022264:	68fb      	ldr	r3, [r7, #12]
 8022266:	681b      	ldr	r3, [r3, #0]
}
 8022268:	4618      	mov	r0, r3
 802226a:	3714      	adds	r7, #20
 802226c:	46bd      	mov	sp, r7
 802226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022272:	4770      	bx	lr

08022274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8022274:	b580      	push	{r7, lr}
 8022276:	b08e      	sub	sp, #56	; 0x38
 8022278:	af04      	add	r7, sp, #16
 802227a:	60f8      	str	r0, [r7, #12]
 802227c:	60b9      	str	r1, [r7, #8]
 802227e:	607a      	str	r2, [r7, #4]
 8022280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8022282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022284:	2b00      	cmp	r3, #0
 8022286:	d10a      	bne.n	802229e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8022288:	f04f 0350 	mov.w	r3, #80	; 0x50
 802228c:	f383 8811 	msr	BASEPRI, r3
 8022290:	f3bf 8f6f 	isb	sy
 8022294:	f3bf 8f4f 	dsb	sy
 8022298:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 802229a:	bf00      	nop
 802229c:	e7fe      	b.n	802229c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 802229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d10a      	bne.n	80222ba <xTaskCreateStatic+0x46>
	__asm volatile
 80222a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80222a8:	f383 8811 	msr	BASEPRI, r3
 80222ac:	f3bf 8f6f 	isb	sy
 80222b0:	f3bf 8f4f 	dsb	sy
 80222b4:	61fb      	str	r3, [r7, #28]
}
 80222b6:	bf00      	nop
 80222b8:	e7fe      	b.n	80222b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80222ba:	2354      	movs	r3, #84	; 0x54
 80222bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80222be:	693b      	ldr	r3, [r7, #16]
 80222c0:	2b54      	cmp	r3, #84	; 0x54
 80222c2:	d00a      	beq.n	80222da <xTaskCreateStatic+0x66>
	__asm volatile
 80222c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80222c8:	f383 8811 	msr	BASEPRI, r3
 80222cc:	f3bf 8f6f 	isb	sy
 80222d0:	f3bf 8f4f 	dsb	sy
 80222d4:	61bb      	str	r3, [r7, #24]
}
 80222d6:	bf00      	nop
 80222d8:	e7fe      	b.n	80222d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80222da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80222dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80222de:	2b00      	cmp	r3, #0
 80222e0:	d01e      	beq.n	8022320 <xTaskCreateStatic+0xac>
 80222e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80222e4:	2b00      	cmp	r3, #0
 80222e6:	d01b      	beq.n	8022320 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80222e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80222ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80222ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80222f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80222f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222f4:	2202      	movs	r2, #2
 80222f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80222fa:	2300      	movs	r3, #0
 80222fc:	9303      	str	r3, [sp, #12]
 80222fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022300:	9302      	str	r3, [sp, #8]
 8022302:	f107 0314 	add.w	r3, r7, #20
 8022306:	9301      	str	r3, [sp, #4]
 8022308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802230a:	9300      	str	r3, [sp, #0]
 802230c:	683b      	ldr	r3, [r7, #0]
 802230e:	687a      	ldr	r2, [r7, #4]
 8022310:	68b9      	ldr	r1, [r7, #8]
 8022312:	68f8      	ldr	r0, [r7, #12]
 8022314:	f000 f850 	bl	80223b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8022318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802231a:	f000 f8d5 	bl	80224c8 <prvAddNewTaskToReadyList>
 802231e:	e001      	b.n	8022324 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8022320:	2300      	movs	r3, #0
 8022322:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8022324:	697b      	ldr	r3, [r7, #20]
	}
 8022326:	4618      	mov	r0, r3
 8022328:	3728      	adds	r7, #40	; 0x28
 802232a:	46bd      	mov	sp, r7
 802232c:	bd80      	pop	{r7, pc}

0802232e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 802232e:	b580      	push	{r7, lr}
 8022330:	b08c      	sub	sp, #48	; 0x30
 8022332:	af04      	add	r7, sp, #16
 8022334:	60f8      	str	r0, [r7, #12]
 8022336:	60b9      	str	r1, [r7, #8]
 8022338:	603b      	str	r3, [r7, #0]
 802233a:	4613      	mov	r3, r2
 802233c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 802233e:	88fb      	ldrh	r3, [r7, #6]
 8022340:	009b      	lsls	r3, r3, #2
 8022342:	4618      	mov	r0, r3
 8022344:	f000 ff10 	bl	8023168 <pvPortMalloc>
 8022348:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 802234a:	697b      	ldr	r3, [r7, #20]
 802234c:	2b00      	cmp	r3, #0
 802234e:	d00e      	beq.n	802236e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8022350:	2054      	movs	r0, #84	; 0x54
 8022352:	f000 ff09 	bl	8023168 <pvPortMalloc>
 8022356:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8022358:	69fb      	ldr	r3, [r7, #28]
 802235a:	2b00      	cmp	r3, #0
 802235c:	d003      	beq.n	8022366 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 802235e:	69fb      	ldr	r3, [r7, #28]
 8022360:	697a      	ldr	r2, [r7, #20]
 8022362:	631a      	str	r2, [r3, #48]	; 0x30
 8022364:	e005      	b.n	8022372 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8022366:	6978      	ldr	r0, [r7, #20]
 8022368:	f000 ffca 	bl	8023300 <vPortFree>
 802236c:	e001      	b.n	8022372 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 802236e:	2300      	movs	r3, #0
 8022370:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8022372:	69fb      	ldr	r3, [r7, #28]
 8022374:	2b00      	cmp	r3, #0
 8022376:	d017      	beq.n	80223a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8022378:	69fb      	ldr	r3, [r7, #28]
 802237a:	2200      	movs	r2, #0
 802237c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8022380:	88fa      	ldrh	r2, [r7, #6]
 8022382:	2300      	movs	r3, #0
 8022384:	9303      	str	r3, [sp, #12]
 8022386:	69fb      	ldr	r3, [r7, #28]
 8022388:	9302      	str	r3, [sp, #8]
 802238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802238c:	9301      	str	r3, [sp, #4]
 802238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022390:	9300      	str	r3, [sp, #0]
 8022392:	683b      	ldr	r3, [r7, #0]
 8022394:	68b9      	ldr	r1, [r7, #8]
 8022396:	68f8      	ldr	r0, [r7, #12]
 8022398:	f000 f80e 	bl	80223b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802239c:	69f8      	ldr	r0, [r7, #28]
 802239e:	f000 f893 	bl	80224c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80223a2:	2301      	movs	r3, #1
 80223a4:	61bb      	str	r3, [r7, #24]
 80223a6:	e002      	b.n	80223ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80223a8:	f04f 33ff 	mov.w	r3, #4294967295
 80223ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80223ae:	69bb      	ldr	r3, [r7, #24]
	}
 80223b0:	4618      	mov	r0, r3
 80223b2:	3720      	adds	r7, #32
 80223b4:	46bd      	mov	sp, r7
 80223b6:	bd80      	pop	{r7, pc}

080223b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80223b8:	b580      	push	{r7, lr}
 80223ba:	b088      	sub	sp, #32
 80223bc:	af00      	add	r7, sp, #0
 80223be:	60f8      	str	r0, [r7, #12]
 80223c0:	60b9      	str	r1, [r7, #8]
 80223c2:	607a      	str	r2, [r7, #4]
 80223c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80223c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80223d0:	3b01      	subs	r3, #1
 80223d2:	009b      	lsls	r3, r3, #2
 80223d4:	4413      	add	r3, r2
 80223d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80223d8:	69bb      	ldr	r3, [r7, #24]
 80223da:	f023 0307 	bic.w	r3, r3, #7
 80223de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80223e0:	69bb      	ldr	r3, [r7, #24]
 80223e2:	f003 0307 	and.w	r3, r3, #7
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d00a      	beq.n	8022400 <prvInitialiseNewTask+0x48>
	__asm volatile
 80223ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80223ee:	f383 8811 	msr	BASEPRI, r3
 80223f2:	f3bf 8f6f 	isb	sy
 80223f6:	f3bf 8f4f 	dsb	sy
 80223fa:	617b      	str	r3, [r7, #20]
}
 80223fc:	bf00      	nop
 80223fe:	e7fe      	b.n	80223fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8022400:	68bb      	ldr	r3, [r7, #8]
 8022402:	2b00      	cmp	r3, #0
 8022404:	d01f      	beq.n	8022446 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8022406:	2300      	movs	r3, #0
 8022408:	61fb      	str	r3, [r7, #28]
 802240a:	e012      	b.n	8022432 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 802240c:	68ba      	ldr	r2, [r7, #8]
 802240e:	69fb      	ldr	r3, [r7, #28]
 8022410:	4413      	add	r3, r2
 8022412:	7819      	ldrb	r1, [r3, #0]
 8022414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022416:	69fb      	ldr	r3, [r7, #28]
 8022418:	4413      	add	r3, r2
 802241a:	3334      	adds	r3, #52	; 0x34
 802241c:	460a      	mov	r2, r1
 802241e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8022420:	68ba      	ldr	r2, [r7, #8]
 8022422:	69fb      	ldr	r3, [r7, #28]
 8022424:	4413      	add	r3, r2
 8022426:	781b      	ldrb	r3, [r3, #0]
 8022428:	2b00      	cmp	r3, #0
 802242a:	d006      	beq.n	802243a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802242c:	69fb      	ldr	r3, [r7, #28]
 802242e:	3301      	adds	r3, #1
 8022430:	61fb      	str	r3, [r7, #28]
 8022432:	69fb      	ldr	r3, [r7, #28]
 8022434:	2b0f      	cmp	r3, #15
 8022436:	d9e9      	bls.n	802240c <prvInitialiseNewTask+0x54>
 8022438:	e000      	b.n	802243c <prvInitialiseNewTask+0x84>
			{
				break;
 802243a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 802243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802243e:	2200      	movs	r2, #0
 8022440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8022444:	e003      	b.n	802244e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8022446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022448:	2200      	movs	r2, #0
 802244a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 802244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022450:	2b06      	cmp	r3, #6
 8022452:	d901      	bls.n	8022458 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8022454:	2306      	movs	r3, #6
 8022456:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8022458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802245a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802245c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 802245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022462:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8022464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022466:	2200      	movs	r2, #0
 8022468:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802246c:	3304      	adds	r3, #4
 802246e:	4618      	mov	r0, r3
 8022470:	f7ff fe6c 	bl	802214c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8022474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022476:	3318      	adds	r3, #24
 8022478:	4618      	mov	r0, r3
 802247a:	f7ff fe67 	bl	802214c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 802247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022482:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022486:	f1c3 0207 	rsb	r2, r3, #7
 802248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802248c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 802248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022492:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8022494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022496:	2200      	movs	r2, #0
 8022498:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 802249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802249c:	2200      	movs	r2, #0
 802249e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80224a2:	683a      	ldr	r2, [r7, #0]
 80224a4:	68f9      	ldr	r1, [r7, #12]
 80224a6:	69b8      	ldr	r0, [r7, #24]
 80224a8:	f000 fc50 	bl	8022d4c <pxPortInitialiseStack>
 80224ac:	4602      	mov	r2, r0
 80224ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80224b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80224b4:	2b00      	cmp	r3, #0
 80224b6:	d002      	beq.n	80224be <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80224b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80224ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80224bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80224be:	bf00      	nop
 80224c0:	3720      	adds	r7, #32
 80224c2:	46bd      	mov	sp, r7
 80224c4:	bd80      	pop	{r7, pc}
	...

080224c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80224c8:	b580      	push	{r7, lr}
 80224ca:	b082      	sub	sp, #8
 80224cc:	af00      	add	r7, sp, #0
 80224ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80224d0:	f000 fd68 	bl	8022fa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80224d4:	4b2a      	ldr	r3, [pc, #168]	; (8022580 <prvAddNewTaskToReadyList+0xb8>)
 80224d6:	681b      	ldr	r3, [r3, #0]
 80224d8:	3301      	adds	r3, #1
 80224da:	4a29      	ldr	r2, [pc, #164]	; (8022580 <prvAddNewTaskToReadyList+0xb8>)
 80224dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80224de:	4b29      	ldr	r3, [pc, #164]	; (8022584 <prvAddNewTaskToReadyList+0xbc>)
 80224e0:	681b      	ldr	r3, [r3, #0]
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	d109      	bne.n	80224fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80224e6:	4a27      	ldr	r2, [pc, #156]	; (8022584 <prvAddNewTaskToReadyList+0xbc>)
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80224ec:	4b24      	ldr	r3, [pc, #144]	; (8022580 <prvAddNewTaskToReadyList+0xb8>)
 80224ee:	681b      	ldr	r3, [r3, #0]
 80224f0:	2b01      	cmp	r3, #1
 80224f2:	d110      	bne.n	8022516 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80224f4:	f000 fb06 	bl	8022b04 <prvInitialiseTaskLists>
 80224f8:	e00d      	b.n	8022516 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80224fa:	4b23      	ldr	r3, [pc, #140]	; (8022588 <prvAddNewTaskToReadyList+0xc0>)
 80224fc:	681b      	ldr	r3, [r3, #0]
 80224fe:	2b00      	cmp	r3, #0
 8022500:	d109      	bne.n	8022516 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8022502:	4b20      	ldr	r3, [pc, #128]	; (8022584 <prvAddNewTaskToReadyList+0xbc>)
 8022504:	681b      	ldr	r3, [r3, #0]
 8022506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022508:	687b      	ldr	r3, [r7, #4]
 802250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802250c:	429a      	cmp	r2, r3
 802250e:	d802      	bhi.n	8022516 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8022510:	4a1c      	ldr	r2, [pc, #112]	; (8022584 <prvAddNewTaskToReadyList+0xbc>)
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8022516:	4b1d      	ldr	r3, [pc, #116]	; (802258c <prvAddNewTaskToReadyList+0xc4>)
 8022518:	681b      	ldr	r3, [r3, #0]
 802251a:	3301      	adds	r3, #1
 802251c:	4a1b      	ldr	r2, [pc, #108]	; (802258c <prvAddNewTaskToReadyList+0xc4>)
 802251e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8022520:	687b      	ldr	r3, [r7, #4]
 8022522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022524:	2201      	movs	r2, #1
 8022526:	409a      	lsls	r2, r3
 8022528:	4b19      	ldr	r3, [pc, #100]	; (8022590 <prvAddNewTaskToReadyList+0xc8>)
 802252a:	681b      	ldr	r3, [r3, #0]
 802252c:	4313      	orrs	r3, r2
 802252e:	4a18      	ldr	r2, [pc, #96]	; (8022590 <prvAddNewTaskToReadyList+0xc8>)
 8022530:	6013      	str	r3, [r2, #0]
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022536:	4613      	mov	r3, r2
 8022538:	009b      	lsls	r3, r3, #2
 802253a:	4413      	add	r3, r2
 802253c:	009b      	lsls	r3, r3, #2
 802253e:	4a15      	ldr	r2, [pc, #84]	; (8022594 <prvAddNewTaskToReadyList+0xcc>)
 8022540:	441a      	add	r2, r3
 8022542:	687b      	ldr	r3, [r7, #4]
 8022544:	3304      	adds	r3, #4
 8022546:	4619      	mov	r1, r3
 8022548:	4610      	mov	r0, r2
 802254a:	f7ff fe0c 	bl	8022166 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 802254e:	f000 fd59 	bl	8023004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8022552:	4b0d      	ldr	r3, [pc, #52]	; (8022588 <prvAddNewTaskToReadyList+0xc0>)
 8022554:	681b      	ldr	r3, [r3, #0]
 8022556:	2b00      	cmp	r3, #0
 8022558:	d00e      	beq.n	8022578 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 802255a:	4b0a      	ldr	r3, [pc, #40]	; (8022584 <prvAddNewTaskToReadyList+0xbc>)
 802255c:	681b      	ldr	r3, [r3, #0]
 802255e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022564:	429a      	cmp	r2, r3
 8022566:	d207      	bcs.n	8022578 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8022568:	4b0b      	ldr	r3, [pc, #44]	; (8022598 <prvAddNewTaskToReadyList+0xd0>)
 802256a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802256e:	601a      	str	r2, [r3, #0]
 8022570:	f3bf 8f4f 	dsb	sy
 8022574:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8022578:	bf00      	nop
 802257a:	3708      	adds	r7, #8
 802257c:	46bd      	mov	sp, r7
 802257e:	bd80      	pop	{r7, pc}
 8022580:	20000a50 	.word	0x20000a50
 8022584:	20000950 	.word	0x20000950
 8022588:	20000a5c 	.word	0x20000a5c
 802258c:	20000a6c 	.word	0x20000a6c
 8022590:	20000a58 	.word	0x20000a58
 8022594:	20000954 	.word	0x20000954
 8022598:	e000ed04 	.word	0xe000ed04

0802259c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 802259c:	b580      	push	{r7, lr}
 802259e:	b08a      	sub	sp, #40	; 0x28
 80225a0:	af00      	add	r7, sp, #0
 80225a2:	6078      	str	r0, [r7, #4]
 80225a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80225a6:	2300      	movs	r3, #0
 80225a8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80225aa:	687b      	ldr	r3, [r7, #4]
 80225ac:	2b00      	cmp	r3, #0
 80225ae:	d10a      	bne.n	80225c6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80225b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225b4:	f383 8811 	msr	BASEPRI, r3
 80225b8:	f3bf 8f6f 	isb	sy
 80225bc:	f3bf 8f4f 	dsb	sy
 80225c0:	617b      	str	r3, [r7, #20]
}
 80225c2:	bf00      	nop
 80225c4:	e7fe      	b.n	80225c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80225c6:	683b      	ldr	r3, [r7, #0]
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	d10a      	bne.n	80225e2 <vTaskDelayUntil+0x46>
	__asm volatile
 80225cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225d0:	f383 8811 	msr	BASEPRI, r3
 80225d4:	f3bf 8f6f 	isb	sy
 80225d8:	f3bf 8f4f 	dsb	sy
 80225dc:	613b      	str	r3, [r7, #16]
}
 80225de:	bf00      	nop
 80225e0:	e7fe      	b.n	80225e0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80225e2:	4b2a      	ldr	r3, [pc, #168]	; (802268c <vTaskDelayUntil+0xf0>)
 80225e4:	681b      	ldr	r3, [r3, #0]
 80225e6:	2b00      	cmp	r3, #0
 80225e8:	d00a      	beq.n	8022600 <vTaskDelayUntil+0x64>
	__asm volatile
 80225ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225ee:	f383 8811 	msr	BASEPRI, r3
 80225f2:	f3bf 8f6f 	isb	sy
 80225f6:	f3bf 8f4f 	dsb	sy
 80225fa:	60fb      	str	r3, [r7, #12]
}
 80225fc:	bf00      	nop
 80225fe:	e7fe      	b.n	80225fe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8022600:	f000 f8aa 	bl	8022758 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8022604:	4b22      	ldr	r3, [pc, #136]	; (8022690 <vTaskDelayUntil+0xf4>)
 8022606:	681b      	ldr	r3, [r3, #0]
 8022608:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	681b      	ldr	r3, [r3, #0]
 802260e:	683a      	ldr	r2, [r7, #0]
 8022610:	4413      	add	r3, r2
 8022612:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	681b      	ldr	r3, [r3, #0]
 8022618:	6a3a      	ldr	r2, [r7, #32]
 802261a:	429a      	cmp	r2, r3
 802261c:	d20b      	bcs.n	8022636 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	681b      	ldr	r3, [r3, #0]
 8022622:	69fa      	ldr	r2, [r7, #28]
 8022624:	429a      	cmp	r2, r3
 8022626:	d211      	bcs.n	802264c <vTaskDelayUntil+0xb0>
 8022628:	69fa      	ldr	r2, [r7, #28]
 802262a:	6a3b      	ldr	r3, [r7, #32]
 802262c:	429a      	cmp	r2, r3
 802262e:	d90d      	bls.n	802264c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8022630:	2301      	movs	r3, #1
 8022632:	627b      	str	r3, [r7, #36]	; 0x24
 8022634:	e00a      	b.n	802264c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8022636:	687b      	ldr	r3, [r7, #4]
 8022638:	681b      	ldr	r3, [r3, #0]
 802263a:	69fa      	ldr	r2, [r7, #28]
 802263c:	429a      	cmp	r2, r3
 802263e:	d303      	bcc.n	8022648 <vTaskDelayUntil+0xac>
 8022640:	69fa      	ldr	r2, [r7, #28]
 8022642:	6a3b      	ldr	r3, [r7, #32]
 8022644:	429a      	cmp	r2, r3
 8022646:	d901      	bls.n	802264c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8022648:	2301      	movs	r3, #1
 802264a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	69fa      	ldr	r2, [r7, #28]
 8022650:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8022652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022654:	2b00      	cmp	r3, #0
 8022656:	d006      	beq.n	8022666 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8022658:	69fa      	ldr	r2, [r7, #28]
 802265a:	6a3b      	ldr	r3, [r7, #32]
 802265c:	1ad3      	subs	r3, r2, r3
 802265e:	2100      	movs	r1, #0
 8022660:	4618      	mov	r0, r3
 8022662:	f000 fb0d 	bl	8022c80 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8022666:	f000 f885 	bl	8022774 <xTaskResumeAll>
 802266a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802266c:	69bb      	ldr	r3, [r7, #24]
 802266e:	2b00      	cmp	r3, #0
 8022670:	d107      	bne.n	8022682 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8022672:	4b08      	ldr	r3, [pc, #32]	; (8022694 <vTaskDelayUntil+0xf8>)
 8022674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022678:	601a      	str	r2, [r3, #0]
 802267a:	f3bf 8f4f 	dsb	sy
 802267e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8022682:	bf00      	nop
 8022684:	3728      	adds	r7, #40	; 0x28
 8022686:	46bd      	mov	sp, r7
 8022688:	bd80      	pop	{r7, pc}
 802268a:	bf00      	nop
 802268c:	20000a78 	.word	0x20000a78
 8022690:	20000a54 	.word	0x20000a54
 8022694:	e000ed04 	.word	0xe000ed04

08022698 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8022698:	b580      	push	{r7, lr}
 802269a:	b08a      	sub	sp, #40	; 0x28
 802269c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 802269e:	2300      	movs	r3, #0
 80226a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80226a2:	2300      	movs	r3, #0
 80226a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80226a6:	463a      	mov	r2, r7
 80226a8:	1d39      	adds	r1, r7, #4
 80226aa:	f107 0308 	add.w	r3, r7, #8
 80226ae:	4618      	mov	r0, r3
 80226b0:	f7ee fb9e 	bl	8010df0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80226b4:	6839      	ldr	r1, [r7, #0]
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	68ba      	ldr	r2, [r7, #8]
 80226ba:	9202      	str	r2, [sp, #8]
 80226bc:	9301      	str	r3, [sp, #4]
 80226be:	2300      	movs	r3, #0
 80226c0:	9300      	str	r3, [sp, #0]
 80226c2:	2300      	movs	r3, #0
 80226c4:	460a      	mov	r2, r1
 80226c6:	491e      	ldr	r1, [pc, #120]	; (8022740 <vTaskStartScheduler+0xa8>)
 80226c8:	481e      	ldr	r0, [pc, #120]	; (8022744 <vTaskStartScheduler+0xac>)
 80226ca:	f7ff fdd3 	bl	8022274 <xTaskCreateStatic>
 80226ce:	4603      	mov	r3, r0
 80226d0:	4a1d      	ldr	r2, [pc, #116]	; (8022748 <vTaskStartScheduler+0xb0>)
 80226d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80226d4:	4b1c      	ldr	r3, [pc, #112]	; (8022748 <vTaskStartScheduler+0xb0>)
 80226d6:	681b      	ldr	r3, [r3, #0]
 80226d8:	2b00      	cmp	r3, #0
 80226da:	d002      	beq.n	80226e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80226dc:	2301      	movs	r3, #1
 80226de:	617b      	str	r3, [r7, #20]
 80226e0:	e001      	b.n	80226e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80226e2:	2300      	movs	r3, #0
 80226e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80226e6:	697b      	ldr	r3, [r7, #20]
 80226e8:	2b01      	cmp	r3, #1
 80226ea:	d116      	bne.n	802271a <vTaskStartScheduler+0x82>
	__asm volatile
 80226ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80226f0:	f383 8811 	msr	BASEPRI, r3
 80226f4:	f3bf 8f6f 	isb	sy
 80226f8:	f3bf 8f4f 	dsb	sy
 80226fc:	613b      	str	r3, [r7, #16]
}
 80226fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8022700:	4b12      	ldr	r3, [pc, #72]	; (802274c <vTaskStartScheduler+0xb4>)
 8022702:	f04f 32ff 	mov.w	r2, #4294967295
 8022706:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8022708:	4b11      	ldr	r3, [pc, #68]	; (8022750 <vTaskStartScheduler+0xb8>)
 802270a:	2201      	movs	r2, #1
 802270c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 802270e:	4b11      	ldr	r3, [pc, #68]	; (8022754 <vTaskStartScheduler+0xbc>)
 8022710:	2200      	movs	r2, #0
 8022712:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8022714:	f000 fba4 	bl	8022e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8022718:	e00e      	b.n	8022738 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 802271a:	697b      	ldr	r3, [r7, #20]
 802271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022720:	d10a      	bne.n	8022738 <vTaskStartScheduler+0xa0>
	__asm volatile
 8022722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022726:	f383 8811 	msr	BASEPRI, r3
 802272a:	f3bf 8f6f 	isb	sy
 802272e:	f3bf 8f4f 	dsb	sy
 8022732:	60fb      	str	r3, [r7, #12]
}
 8022734:	bf00      	nop
 8022736:	e7fe      	b.n	8022736 <vTaskStartScheduler+0x9e>
}
 8022738:	bf00      	nop
 802273a:	3718      	adds	r7, #24
 802273c:	46bd      	mov	sp, r7
 802273e:	bd80      	pop	{r7, pc}
 8022740:	08027040 	.word	0x08027040
 8022744:	08022ad5 	.word	0x08022ad5
 8022748:	20000a74 	.word	0x20000a74
 802274c:	20000a70 	.word	0x20000a70
 8022750:	20000a5c 	.word	0x20000a5c
 8022754:	20000a54 	.word	0x20000a54

08022758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8022758:	b480      	push	{r7}
 802275a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 802275c:	4b04      	ldr	r3, [pc, #16]	; (8022770 <vTaskSuspendAll+0x18>)
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	3301      	adds	r3, #1
 8022762:	4a03      	ldr	r2, [pc, #12]	; (8022770 <vTaskSuspendAll+0x18>)
 8022764:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8022766:	bf00      	nop
 8022768:	46bd      	mov	sp, r7
 802276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802276e:	4770      	bx	lr
 8022770:	20000a78 	.word	0x20000a78

08022774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8022774:	b580      	push	{r7, lr}
 8022776:	b084      	sub	sp, #16
 8022778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802277a:	2300      	movs	r3, #0
 802277c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802277e:	2300      	movs	r3, #0
 8022780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8022782:	4b41      	ldr	r3, [pc, #260]	; (8022888 <xTaskResumeAll+0x114>)
 8022784:	681b      	ldr	r3, [r3, #0]
 8022786:	2b00      	cmp	r3, #0
 8022788:	d10a      	bne.n	80227a0 <xTaskResumeAll+0x2c>
	__asm volatile
 802278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802278e:	f383 8811 	msr	BASEPRI, r3
 8022792:	f3bf 8f6f 	isb	sy
 8022796:	f3bf 8f4f 	dsb	sy
 802279a:	603b      	str	r3, [r7, #0]
}
 802279c:	bf00      	nop
 802279e:	e7fe      	b.n	802279e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80227a0:	f000 fc00 	bl	8022fa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80227a4:	4b38      	ldr	r3, [pc, #224]	; (8022888 <xTaskResumeAll+0x114>)
 80227a6:	681b      	ldr	r3, [r3, #0]
 80227a8:	3b01      	subs	r3, #1
 80227aa:	4a37      	ldr	r2, [pc, #220]	; (8022888 <xTaskResumeAll+0x114>)
 80227ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80227ae:	4b36      	ldr	r3, [pc, #216]	; (8022888 <xTaskResumeAll+0x114>)
 80227b0:	681b      	ldr	r3, [r3, #0]
 80227b2:	2b00      	cmp	r3, #0
 80227b4:	d161      	bne.n	802287a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80227b6:	4b35      	ldr	r3, [pc, #212]	; (802288c <xTaskResumeAll+0x118>)
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	2b00      	cmp	r3, #0
 80227bc:	d05d      	beq.n	802287a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80227be:	e02e      	b.n	802281e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80227c0:	4b33      	ldr	r3, [pc, #204]	; (8022890 <xTaskResumeAll+0x11c>)
 80227c2:	68db      	ldr	r3, [r3, #12]
 80227c4:	68db      	ldr	r3, [r3, #12]
 80227c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80227c8:	68fb      	ldr	r3, [r7, #12]
 80227ca:	3318      	adds	r3, #24
 80227cc:	4618      	mov	r0, r3
 80227ce:	f7ff fd27 	bl	8022220 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80227d2:	68fb      	ldr	r3, [r7, #12]
 80227d4:	3304      	adds	r3, #4
 80227d6:	4618      	mov	r0, r3
 80227d8:	f7ff fd22 	bl	8022220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80227dc:	68fb      	ldr	r3, [r7, #12]
 80227de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80227e0:	2201      	movs	r2, #1
 80227e2:	409a      	lsls	r2, r3
 80227e4:	4b2b      	ldr	r3, [pc, #172]	; (8022894 <xTaskResumeAll+0x120>)
 80227e6:	681b      	ldr	r3, [r3, #0]
 80227e8:	4313      	orrs	r3, r2
 80227ea:	4a2a      	ldr	r2, [pc, #168]	; (8022894 <xTaskResumeAll+0x120>)
 80227ec:	6013      	str	r3, [r2, #0]
 80227ee:	68fb      	ldr	r3, [r7, #12]
 80227f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227f2:	4613      	mov	r3, r2
 80227f4:	009b      	lsls	r3, r3, #2
 80227f6:	4413      	add	r3, r2
 80227f8:	009b      	lsls	r3, r3, #2
 80227fa:	4a27      	ldr	r2, [pc, #156]	; (8022898 <xTaskResumeAll+0x124>)
 80227fc:	441a      	add	r2, r3
 80227fe:	68fb      	ldr	r3, [r7, #12]
 8022800:	3304      	adds	r3, #4
 8022802:	4619      	mov	r1, r3
 8022804:	4610      	mov	r0, r2
 8022806:	f7ff fcae 	bl	8022166 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802280a:	68fb      	ldr	r3, [r7, #12]
 802280c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802280e:	4b23      	ldr	r3, [pc, #140]	; (802289c <xTaskResumeAll+0x128>)
 8022810:	681b      	ldr	r3, [r3, #0]
 8022812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022814:	429a      	cmp	r2, r3
 8022816:	d302      	bcc.n	802281e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8022818:	4b21      	ldr	r3, [pc, #132]	; (80228a0 <xTaskResumeAll+0x12c>)
 802281a:	2201      	movs	r2, #1
 802281c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802281e:	4b1c      	ldr	r3, [pc, #112]	; (8022890 <xTaskResumeAll+0x11c>)
 8022820:	681b      	ldr	r3, [r3, #0]
 8022822:	2b00      	cmp	r3, #0
 8022824:	d1cc      	bne.n	80227c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8022826:	68fb      	ldr	r3, [r7, #12]
 8022828:	2b00      	cmp	r3, #0
 802282a:	d001      	beq.n	8022830 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 802282c:	f000 fa08 	bl	8022c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8022830:	4b1c      	ldr	r3, [pc, #112]	; (80228a4 <xTaskResumeAll+0x130>)
 8022832:	681b      	ldr	r3, [r3, #0]
 8022834:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	2b00      	cmp	r3, #0
 802283a:	d010      	beq.n	802285e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 802283c:	f000 f836 	bl	80228ac <xTaskIncrementTick>
 8022840:	4603      	mov	r3, r0
 8022842:	2b00      	cmp	r3, #0
 8022844:	d002      	beq.n	802284c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8022846:	4b16      	ldr	r3, [pc, #88]	; (80228a0 <xTaskResumeAll+0x12c>)
 8022848:	2201      	movs	r2, #1
 802284a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	3b01      	subs	r3, #1
 8022850:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	2b00      	cmp	r3, #0
 8022856:	d1f1      	bne.n	802283c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8022858:	4b12      	ldr	r3, [pc, #72]	; (80228a4 <xTaskResumeAll+0x130>)
 802285a:	2200      	movs	r2, #0
 802285c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 802285e:	4b10      	ldr	r3, [pc, #64]	; (80228a0 <xTaskResumeAll+0x12c>)
 8022860:	681b      	ldr	r3, [r3, #0]
 8022862:	2b00      	cmp	r3, #0
 8022864:	d009      	beq.n	802287a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8022866:	2301      	movs	r3, #1
 8022868:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802286a:	4b0f      	ldr	r3, [pc, #60]	; (80228a8 <xTaskResumeAll+0x134>)
 802286c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022870:	601a      	str	r2, [r3, #0]
 8022872:	f3bf 8f4f 	dsb	sy
 8022876:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802287a:	f000 fbc3 	bl	8023004 <vPortExitCritical>

	return xAlreadyYielded;
 802287e:	68bb      	ldr	r3, [r7, #8]
}
 8022880:	4618      	mov	r0, r3
 8022882:	3710      	adds	r7, #16
 8022884:	46bd      	mov	sp, r7
 8022886:	bd80      	pop	{r7, pc}
 8022888:	20000a78 	.word	0x20000a78
 802288c:	20000a50 	.word	0x20000a50
 8022890:	20000a10 	.word	0x20000a10
 8022894:	20000a58 	.word	0x20000a58
 8022898:	20000954 	.word	0x20000954
 802289c:	20000950 	.word	0x20000950
 80228a0:	20000a64 	.word	0x20000a64
 80228a4:	20000a60 	.word	0x20000a60
 80228a8:	e000ed04 	.word	0xe000ed04

080228ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80228ac:	b580      	push	{r7, lr}
 80228ae:	b086      	sub	sp, #24
 80228b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80228b2:	2300      	movs	r3, #0
 80228b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80228b6:	4b4e      	ldr	r3, [pc, #312]	; (80229f0 <xTaskIncrementTick+0x144>)
 80228b8:	681b      	ldr	r3, [r3, #0]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	f040 808e 	bne.w	80229dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80228c0:	4b4c      	ldr	r3, [pc, #304]	; (80229f4 <xTaskIncrementTick+0x148>)
 80228c2:	681b      	ldr	r3, [r3, #0]
 80228c4:	3301      	adds	r3, #1
 80228c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80228c8:	4a4a      	ldr	r2, [pc, #296]	; (80229f4 <xTaskIncrementTick+0x148>)
 80228ca:	693b      	ldr	r3, [r7, #16]
 80228cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80228ce:	693b      	ldr	r3, [r7, #16]
 80228d0:	2b00      	cmp	r3, #0
 80228d2:	d120      	bne.n	8022916 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80228d4:	4b48      	ldr	r3, [pc, #288]	; (80229f8 <xTaskIncrementTick+0x14c>)
 80228d6:	681b      	ldr	r3, [r3, #0]
 80228d8:	681b      	ldr	r3, [r3, #0]
 80228da:	2b00      	cmp	r3, #0
 80228dc:	d00a      	beq.n	80228f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80228de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80228e2:	f383 8811 	msr	BASEPRI, r3
 80228e6:	f3bf 8f6f 	isb	sy
 80228ea:	f3bf 8f4f 	dsb	sy
 80228ee:	603b      	str	r3, [r7, #0]
}
 80228f0:	bf00      	nop
 80228f2:	e7fe      	b.n	80228f2 <xTaskIncrementTick+0x46>
 80228f4:	4b40      	ldr	r3, [pc, #256]	; (80229f8 <xTaskIncrementTick+0x14c>)
 80228f6:	681b      	ldr	r3, [r3, #0]
 80228f8:	60fb      	str	r3, [r7, #12]
 80228fa:	4b40      	ldr	r3, [pc, #256]	; (80229fc <xTaskIncrementTick+0x150>)
 80228fc:	681b      	ldr	r3, [r3, #0]
 80228fe:	4a3e      	ldr	r2, [pc, #248]	; (80229f8 <xTaskIncrementTick+0x14c>)
 8022900:	6013      	str	r3, [r2, #0]
 8022902:	4a3e      	ldr	r2, [pc, #248]	; (80229fc <xTaskIncrementTick+0x150>)
 8022904:	68fb      	ldr	r3, [r7, #12]
 8022906:	6013      	str	r3, [r2, #0]
 8022908:	4b3d      	ldr	r3, [pc, #244]	; (8022a00 <xTaskIncrementTick+0x154>)
 802290a:	681b      	ldr	r3, [r3, #0]
 802290c:	3301      	adds	r3, #1
 802290e:	4a3c      	ldr	r2, [pc, #240]	; (8022a00 <xTaskIncrementTick+0x154>)
 8022910:	6013      	str	r3, [r2, #0]
 8022912:	f000 f995 	bl	8022c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8022916:	4b3b      	ldr	r3, [pc, #236]	; (8022a04 <xTaskIncrementTick+0x158>)
 8022918:	681b      	ldr	r3, [r3, #0]
 802291a:	693a      	ldr	r2, [r7, #16]
 802291c:	429a      	cmp	r2, r3
 802291e:	d348      	bcc.n	80229b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022920:	4b35      	ldr	r3, [pc, #212]	; (80229f8 <xTaskIncrementTick+0x14c>)
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	681b      	ldr	r3, [r3, #0]
 8022926:	2b00      	cmp	r3, #0
 8022928:	d104      	bne.n	8022934 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802292a:	4b36      	ldr	r3, [pc, #216]	; (8022a04 <xTaskIncrementTick+0x158>)
 802292c:	f04f 32ff 	mov.w	r2, #4294967295
 8022930:	601a      	str	r2, [r3, #0]
					break;
 8022932:	e03e      	b.n	80229b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022934:	4b30      	ldr	r3, [pc, #192]	; (80229f8 <xTaskIncrementTick+0x14c>)
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	68db      	ldr	r3, [r3, #12]
 802293a:	68db      	ldr	r3, [r3, #12]
 802293c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802293e:	68bb      	ldr	r3, [r7, #8]
 8022940:	685b      	ldr	r3, [r3, #4]
 8022942:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8022944:	693a      	ldr	r2, [r7, #16]
 8022946:	687b      	ldr	r3, [r7, #4]
 8022948:	429a      	cmp	r2, r3
 802294a:	d203      	bcs.n	8022954 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 802294c:	4a2d      	ldr	r2, [pc, #180]	; (8022a04 <xTaskIncrementTick+0x158>)
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8022952:	e02e      	b.n	80229b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022954:	68bb      	ldr	r3, [r7, #8]
 8022956:	3304      	adds	r3, #4
 8022958:	4618      	mov	r0, r3
 802295a:	f7ff fc61 	bl	8022220 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802295e:	68bb      	ldr	r3, [r7, #8]
 8022960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022962:	2b00      	cmp	r3, #0
 8022964:	d004      	beq.n	8022970 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8022966:	68bb      	ldr	r3, [r7, #8]
 8022968:	3318      	adds	r3, #24
 802296a:	4618      	mov	r0, r3
 802296c:	f7ff fc58 	bl	8022220 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8022970:	68bb      	ldr	r3, [r7, #8]
 8022972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022974:	2201      	movs	r2, #1
 8022976:	409a      	lsls	r2, r3
 8022978:	4b23      	ldr	r3, [pc, #140]	; (8022a08 <xTaskIncrementTick+0x15c>)
 802297a:	681b      	ldr	r3, [r3, #0]
 802297c:	4313      	orrs	r3, r2
 802297e:	4a22      	ldr	r2, [pc, #136]	; (8022a08 <xTaskIncrementTick+0x15c>)
 8022980:	6013      	str	r3, [r2, #0]
 8022982:	68bb      	ldr	r3, [r7, #8]
 8022984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022986:	4613      	mov	r3, r2
 8022988:	009b      	lsls	r3, r3, #2
 802298a:	4413      	add	r3, r2
 802298c:	009b      	lsls	r3, r3, #2
 802298e:	4a1f      	ldr	r2, [pc, #124]	; (8022a0c <xTaskIncrementTick+0x160>)
 8022990:	441a      	add	r2, r3
 8022992:	68bb      	ldr	r3, [r7, #8]
 8022994:	3304      	adds	r3, #4
 8022996:	4619      	mov	r1, r3
 8022998:	4610      	mov	r0, r2
 802299a:	f7ff fbe4 	bl	8022166 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802299e:	68bb      	ldr	r3, [r7, #8]
 80229a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80229a2:	4b1b      	ldr	r3, [pc, #108]	; (8022a10 <xTaskIncrementTick+0x164>)
 80229a4:	681b      	ldr	r3, [r3, #0]
 80229a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229a8:	429a      	cmp	r2, r3
 80229aa:	d3b9      	bcc.n	8022920 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80229ac:	2301      	movs	r3, #1
 80229ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80229b0:	e7b6      	b.n	8022920 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80229b2:	4b17      	ldr	r3, [pc, #92]	; (8022a10 <xTaskIncrementTick+0x164>)
 80229b4:	681b      	ldr	r3, [r3, #0]
 80229b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80229b8:	4914      	ldr	r1, [pc, #80]	; (8022a0c <xTaskIncrementTick+0x160>)
 80229ba:	4613      	mov	r3, r2
 80229bc:	009b      	lsls	r3, r3, #2
 80229be:	4413      	add	r3, r2
 80229c0:	009b      	lsls	r3, r3, #2
 80229c2:	440b      	add	r3, r1
 80229c4:	681b      	ldr	r3, [r3, #0]
 80229c6:	2b01      	cmp	r3, #1
 80229c8:	d901      	bls.n	80229ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80229ca:	2301      	movs	r3, #1
 80229cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80229ce:	4b11      	ldr	r3, [pc, #68]	; (8022a14 <xTaskIncrementTick+0x168>)
 80229d0:	681b      	ldr	r3, [r3, #0]
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	d007      	beq.n	80229e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80229d6:	2301      	movs	r3, #1
 80229d8:	617b      	str	r3, [r7, #20]
 80229da:	e004      	b.n	80229e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80229dc:	4b0e      	ldr	r3, [pc, #56]	; (8022a18 <xTaskIncrementTick+0x16c>)
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	3301      	adds	r3, #1
 80229e2:	4a0d      	ldr	r2, [pc, #52]	; (8022a18 <xTaskIncrementTick+0x16c>)
 80229e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80229e6:	697b      	ldr	r3, [r7, #20]
}
 80229e8:	4618      	mov	r0, r3
 80229ea:	3718      	adds	r7, #24
 80229ec:	46bd      	mov	sp, r7
 80229ee:	bd80      	pop	{r7, pc}
 80229f0:	20000a78 	.word	0x20000a78
 80229f4:	20000a54 	.word	0x20000a54
 80229f8:	20000a08 	.word	0x20000a08
 80229fc:	20000a0c 	.word	0x20000a0c
 8022a00:	20000a68 	.word	0x20000a68
 8022a04:	20000a70 	.word	0x20000a70
 8022a08:	20000a58 	.word	0x20000a58
 8022a0c:	20000954 	.word	0x20000954
 8022a10:	20000950 	.word	0x20000950
 8022a14:	20000a64 	.word	0x20000a64
 8022a18:	20000a60 	.word	0x20000a60

08022a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8022a1c:	b480      	push	{r7}
 8022a1e:	b087      	sub	sp, #28
 8022a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8022a22:	4b27      	ldr	r3, [pc, #156]	; (8022ac0 <vTaskSwitchContext+0xa4>)
 8022a24:	681b      	ldr	r3, [r3, #0]
 8022a26:	2b00      	cmp	r3, #0
 8022a28:	d003      	beq.n	8022a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8022a2a:	4b26      	ldr	r3, [pc, #152]	; (8022ac4 <vTaskSwitchContext+0xa8>)
 8022a2c:	2201      	movs	r2, #1
 8022a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8022a30:	e03f      	b.n	8022ab2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8022a32:	4b24      	ldr	r3, [pc, #144]	; (8022ac4 <vTaskSwitchContext+0xa8>)
 8022a34:	2200      	movs	r2, #0
 8022a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022a38:	4b23      	ldr	r3, [pc, #140]	; (8022ac8 <vTaskSwitchContext+0xac>)
 8022a3a:	681b      	ldr	r3, [r3, #0]
 8022a3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8022a3e:	68fb      	ldr	r3, [r7, #12]
 8022a40:	fab3 f383 	clz	r3, r3
 8022a44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8022a46:	7afb      	ldrb	r3, [r7, #11]
 8022a48:	f1c3 031f 	rsb	r3, r3, #31
 8022a4c:	617b      	str	r3, [r7, #20]
 8022a4e:	491f      	ldr	r1, [pc, #124]	; (8022acc <vTaskSwitchContext+0xb0>)
 8022a50:	697a      	ldr	r2, [r7, #20]
 8022a52:	4613      	mov	r3, r2
 8022a54:	009b      	lsls	r3, r3, #2
 8022a56:	4413      	add	r3, r2
 8022a58:	009b      	lsls	r3, r3, #2
 8022a5a:	440b      	add	r3, r1
 8022a5c:	681b      	ldr	r3, [r3, #0]
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d10a      	bne.n	8022a78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8022a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a66:	f383 8811 	msr	BASEPRI, r3
 8022a6a:	f3bf 8f6f 	isb	sy
 8022a6e:	f3bf 8f4f 	dsb	sy
 8022a72:	607b      	str	r3, [r7, #4]
}
 8022a74:	bf00      	nop
 8022a76:	e7fe      	b.n	8022a76 <vTaskSwitchContext+0x5a>
 8022a78:	697a      	ldr	r2, [r7, #20]
 8022a7a:	4613      	mov	r3, r2
 8022a7c:	009b      	lsls	r3, r3, #2
 8022a7e:	4413      	add	r3, r2
 8022a80:	009b      	lsls	r3, r3, #2
 8022a82:	4a12      	ldr	r2, [pc, #72]	; (8022acc <vTaskSwitchContext+0xb0>)
 8022a84:	4413      	add	r3, r2
 8022a86:	613b      	str	r3, [r7, #16]
 8022a88:	693b      	ldr	r3, [r7, #16]
 8022a8a:	685b      	ldr	r3, [r3, #4]
 8022a8c:	685a      	ldr	r2, [r3, #4]
 8022a8e:	693b      	ldr	r3, [r7, #16]
 8022a90:	605a      	str	r2, [r3, #4]
 8022a92:	693b      	ldr	r3, [r7, #16]
 8022a94:	685a      	ldr	r2, [r3, #4]
 8022a96:	693b      	ldr	r3, [r7, #16]
 8022a98:	3308      	adds	r3, #8
 8022a9a:	429a      	cmp	r2, r3
 8022a9c:	d104      	bne.n	8022aa8 <vTaskSwitchContext+0x8c>
 8022a9e:	693b      	ldr	r3, [r7, #16]
 8022aa0:	685b      	ldr	r3, [r3, #4]
 8022aa2:	685a      	ldr	r2, [r3, #4]
 8022aa4:	693b      	ldr	r3, [r7, #16]
 8022aa6:	605a      	str	r2, [r3, #4]
 8022aa8:	693b      	ldr	r3, [r7, #16]
 8022aaa:	685b      	ldr	r3, [r3, #4]
 8022aac:	68db      	ldr	r3, [r3, #12]
 8022aae:	4a08      	ldr	r2, [pc, #32]	; (8022ad0 <vTaskSwitchContext+0xb4>)
 8022ab0:	6013      	str	r3, [r2, #0]
}
 8022ab2:	bf00      	nop
 8022ab4:	371c      	adds	r7, #28
 8022ab6:	46bd      	mov	sp, r7
 8022ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022abc:	4770      	bx	lr
 8022abe:	bf00      	nop
 8022ac0:	20000a78 	.word	0x20000a78
 8022ac4:	20000a64 	.word	0x20000a64
 8022ac8:	20000a58 	.word	0x20000a58
 8022acc:	20000954 	.word	0x20000954
 8022ad0:	20000950 	.word	0x20000950

08022ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8022ad4:	b580      	push	{r7, lr}
 8022ad6:	b082      	sub	sp, #8
 8022ad8:	af00      	add	r7, sp, #0
 8022ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8022adc:	f000 f852 	bl	8022b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8022ae0:	4b06      	ldr	r3, [pc, #24]	; (8022afc <prvIdleTask+0x28>)
 8022ae2:	681b      	ldr	r3, [r3, #0]
 8022ae4:	2b01      	cmp	r3, #1
 8022ae6:	d9f9      	bls.n	8022adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8022ae8:	4b05      	ldr	r3, [pc, #20]	; (8022b00 <prvIdleTask+0x2c>)
 8022aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022aee:	601a      	str	r2, [r3, #0]
 8022af0:	f3bf 8f4f 	dsb	sy
 8022af4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8022af8:	e7f0      	b.n	8022adc <prvIdleTask+0x8>
 8022afa:	bf00      	nop
 8022afc:	20000954 	.word	0x20000954
 8022b00:	e000ed04 	.word	0xe000ed04

08022b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8022b04:	b580      	push	{r7, lr}
 8022b06:	b082      	sub	sp, #8
 8022b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8022b0a:	2300      	movs	r3, #0
 8022b0c:	607b      	str	r3, [r7, #4]
 8022b0e:	e00c      	b.n	8022b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8022b10:	687a      	ldr	r2, [r7, #4]
 8022b12:	4613      	mov	r3, r2
 8022b14:	009b      	lsls	r3, r3, #2
 8022b16:	4413      	add	r3, r2
 8022b18:	009b      	lsls	r3, r3, #2
 8022b1a:	4a12      	ldr	r2, [pc, #72]	; (8022b64 <prvInitialiseTaskLists+0x60>)
 8022b1c:	4413      	add	r3, r2
 8022b1e:	4618      	mov	r0, r3
 8022b20:	f7ff faf4 	bl	802210c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8022b24:	687b      	ldr	r3, [r7, #4]
 8022b26:	3301      	adds	r3, #1
 8022b28:	607b      	str	r3, [r7, #4]
 8022b2a:	687b      	ldr	r3, [r7, #4]
 8022b2c:	2b06      	cmp	r3, #6
 8022b2e:	d9ef      	bls.n	8022b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8022b30:	480d      	ldr	r0, [pc, #52]	; (8022b68 <prvInitialiseTaskLists+0x64>)
 8022b32:	f7ff faeb 	bl	802210c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8022b36:	480d      	ldr	r0, [pc, #52]	; (8022b6c <prvInitialiseTaskLists+0x68>)
 8022b38:	f7ff fae8 	bl	802210c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8022b3c:	480c      	ldr	r0, [pc, #48]	; (8022b70 <prvInitialiseTaskLists+0x6c>)
 8022b3e:	f7ff fae5 	bl	802210c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8022b42:	480c      	ldr	r0, [pc, #48]	; (8022b74 <prvInitialiseTaskLists+0x70>)
 8022b44:	f7ff fae2 	bl	802210c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8022b48:	480b      	ldr	r0, [pc, #44]	; (8022b78 <prvInitialiseTaskLists+0x74>)
 8022b4a:	f7ff fadf 	bl	802210c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8022b4e:	4b0b      	ldr	r3, [pc, #44]	; (8022b7c <prvInitialiseTaskLists+0x78>)
 8022b50:	4a05      	ldr	r2, [pc, #20]	; (8022b68 <prvInitialiseTaskLists+0x64>)
 8022b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8022b54:	4b0a      	ldr	r3, [pc, #40]	; (8022b80 <prvInitialiseTaskLists+0x7c>)
 8022b56:	4a05      	ldr	r2, [pc, #20]	; (8022b6c <prvInitialiseTaskLists+0x68>)
 8022b58:	601a      	str	r2, [r3, #0]
}
 8022b5a:	bf00      	nop
 8022b5c:	3708      	adds	r7, #8
 8022b5e:	46bd      	mov	sp, r7
 8022b60:	bd80      	pop	{r7, pc}
 8022b62:	bf00      	nop
 8022b64:	20000954 	.word	0x20000954
 8022b68:	200009e0 	.word	0x200009e0
 8022b6c:	200009f4 	.word	0x200009f4
 8022b70:	20000a10 	.word	0x20000a10
 8022b74:	20000a24 	.word	0x20000a24
 8022b78:	20000a3c 	.word	0x20000a3c
 8022b7c:	20000a08 	.word	0x20000a08
 8022b80:	20000a0c 	.word	0x20000a0c

08022b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8022b84:	b580      	push	{r7, lr}
 8022b86:	b082      	sub	sp, #8
 8022b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022b8a:	e019      	b.n	8022bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8022b8c:	f000 fa0a 	bl	8022fa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022b90:	4b10      	ldr	r3, [pc, #64]	; (8022bd4 <prvCheckTasksWaitingTermination+0x50>)
 8022b92:	68db      	ldr	r3, [r3, #12]
 8022b94:	68db      	ldr	r3, [r3, #12]
 8022b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	3304      	adds	r3, #4
 8022b9c:	4618      	mov	r0, r3
 8022b9e:	f7ff fb3f 	bl	8022220 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8022ba2:	4b0d      	ldr	r3, [pc, #52]	; (8022bd8 <prvCheckTasksWaitingTermination+0x54>)
 8022ba4:	681b      	ldr	r3, [r3, #0]
 8022ba6:	3b01      	subs	r3, #1
 8022ba8:	4a0b      	ldr	r2, [pc, #44]	; (8022bd8 <prvCheckTasksWaitingTermination+0x54>)
 8022baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8022bac:	4b0b      	ldr	r3, [pc, #44]	; (8022bdc <prvCheckTasksWaitingTermination+0x58>)
 8022bae:	681b      	ldr	r3, [r3, #0]
 8022bb0:	3b01      	subs	r3, #1
 8022bb2:	4a0a      	ldr	r2, [pc, #40]	; (8022bdc <prvCheckTasksWaitingTermination+0x58>)
 8022bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8022bb6:	f000 fa25 	bl	8023004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8022bba:	6878      	ldr	r0, [r7, #4]
 8022bbc:	f000 f810 	bl	8022be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022bc0:	4b06      	ldr	r3, [pc, #24]	; (8022bdc <prvCheckTasksWaitingTermination+0x58>)
 8022bc2:	681b      	ldr	r3, [r3, #0]
 8022bc4:	2b00      	cmp	r3, #0
 8022bc6:	d1e1      	bne.n	8022b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8022bc8:	bf00      	nop
 8022bca:	bf00      	nop
 8022bcc:	3708      	adds	r7, #8
 8022bce:	46bd      	mov	sp, r7
 8022bd0:	bd80      	pop	{r7, pc}
 8022bd2:	bf00      	nop
 8022bd4:	20000a24 	.word	0x20000a24
 8022bd8:	20000a50 	.word	0x20000a50
 8022bdc:	20000a38 	.word	0x20000a38

08022be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8022be0:	b580      	push	{r7, lr}
 8022be2:	b084      	sub	sp, #16
 8022be4:	af00      	add	r7, sp, #0
 8022be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8022be8:	687b      	ldr	r3, [r7, #4]
 8022bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d108      	bne.n	8022c04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022bf6:	4618      	mov	r0, r3
 8022bf8:	f000 fb82 	bl	8023300 <vPortFree>
				vPortFree( pxTCB );
 8022bfc:	6878      	ldr	r0, [r7, #4]
 8022bfe:	f000 fb7f 	bl	8023300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8022c02:	e018      	b.n	8022c36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8022c04:	687b      	ldr	r3, [r7, #4]
 8022c06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8022c0a:	2b01      	cmp	r3, #1
 8022c0c:	d103      	bne.n	8022c16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8022c0e:	6878      	ldr	r0, [r7, #4]
 8022c10:	f000 fb76 	bl	8023300 <vPortFree>
	}
 8022c14:	e00f      	b.n	8022c36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8022c16:	687b      	ldr	r3, [r7, #4]
 8022c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8022c1c:	2b02      	cmp	r3, #2
 8022c1e:	d00a      	beq.n	8022c36 <prvDeleteTCB+0x56>
	__asm volatile
 8022c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022c24:	f383 8811 	msr	BASEPRI, r3
 8022c28:	f3bf 8f6f 	isb	sy
 8022c2c:	f3bf 8f4f 	dsb	sy
 8022c30:	60fb      	str	r3, [r7, #12]
}
 8022c32:	bf00      	nop
 8022c34:	e7fe      	b.n	8022c34 <prvDeleteTCB+0x54>
	}
 8022c36:	bf00      	nop
 8022c38:	3710      	adds	r7, #16
 8022c3a:	46bd      	mov	sp, r7
 8022c3c:	bd80      	pop	{r7, pc}
	...

08022c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8022c40:	b480      	push	{r7}
 8022c42:	b083      	sub	sp, #12
 8022c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022c46:	4b0c      	ldr	r3, [pc, #48]	; (8022c78 <prvResetNextTaskUnblockTime+0x38>)
 8022c48:	681b      	ldr	r3, [r3, #0]
 8022c4a:	681b      	ldr	r3, [r3, #0]
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	d104      	bne.n	8022c5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8022c50:	4b0a      	ldr	r3, [pc, #40]	; (8022c7c <prvResetNextTaskUnblockTime+0x3c>)
 8022c52:	f04f 32ff 	mov.w	r2, #4294967295
 8022c56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8022c58:	e008      	b.n	8022c6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022c5a:	4b07      	ldr	r3, [pc, #28]	; (8022c78 <prvResetNextTaskUnblockTime+0x38>)
 8022c5c:	681b      	ldr	r3, [r3, #0]
 8022c5e:	68db      	ldr	r3, [r3, #12]
 8022c60:	68db      	ldr	r3, [r3, #12]
 8022c62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8022c64:	687b      	ldr	r3, [r7, #4]
 8022c66:	685b      	ldr	r3, [r3, #4]
 8022c68:	4a04      	ldr	r2, [pc, #16]	; (8022c7c <prvResetNextTaskUnblockTime+0x3c>)
 8022c6a:	6013      	str	r3, [r2, #0]
}
 8022c6c:	bf00      	nop
 8022c6e:	370c      	adds	r7, #12
 8022c70:	46bd      	mov	sp, r7
 8022c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c76:	4770      	bx	lr
 8022c78:	20000a08 	.word	0x20000a08
 8022c7c:	20000a70 	.word	0x20000a70

08022c80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8022c80:	b580      	push	{r7, lr}
 8022c82:	b084      	sub	sp, #16
 8022c84:	af00      	add	r7, sp, #0
 8022c86:	6078      	str	r0, [r7, #4]
 8022c88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8022c8a:	4b29      	ldr	r3, [pc, #164]	; (8022d30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8022c8c:	681b      	ldr	r3, [r3, #0]
 8022c8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022c90:	4b28      	ldr	r3, [pc, #160]	; (8022d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8022c92:	681b      	ldr	r3, [r3, #0]
 8022c94:	3304      	adds	r3, #4
 8022c96:	4618      	mov	r0, r3
 8022c98:	f7ff fac2 	bl	8022220 <uxListRemove>
 8022c9c:	4603      	mov	r3, r0
 8022c9e:	2b00      	cmp	r3, #0
 8022ca0:	d10b      	bne.n	8022cba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8022ca2:	4b24      	ldr	r3, [pc, #144]	; (8022d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8022ca4:	681b      	ldr	r3, [r3, #0]
 8022ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ca8:	2201      	movs	r2, #1
 8022caa:	fa02 f303 	lsl.w	r3, r2, r3
 8022cae:	43da      	mvns	r2, r3
 8022cb0:	4b21      	ldr	r3, [pc, #132]	; (8022d38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8022cb2:	681b      	ldr	r3, [r3, #0]
 8022cb4:	4013      	ands	r3, r2
 8022cb6:	4a20      	ldr	r2, [pc, #128]	; (8022d38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8022cb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8022cba:	687b      	ldr	r3, [r7, #4]
 8022cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022cc0:	d10a      	bne.n	8022cd8 <prvAddCurrentTaskToDelayedList+0x58>
 8022cc2:	683b      	ldr	r3, [r7, #0]
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	d007      	beq.n	8022cd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022cc8:	4b1a      	ldr	r3, [pc, #104]	; (8022d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8022cca:	681b      	ldr	r3, [r3, #0]
 8022ccc:	3304      	adds	r3, #4
 8022cce:	4619      	mov	r1, r3
 8022cd0:	481a      	ldr	r0, [pc, #104]	; (8022d3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8022cd2:	f7ff fa48 	bl	8022166 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8022cd6:	e026      	b.n	8022d26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8022cd8:	68fa      	ldr	r2, [r7, #12]
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	4413      	add	r3, r2
 8022cde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8022ce0:	4b14      	ldr	r3, [pc, #80]	; (8022d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8022ce2:	681b      	ldr	r3, [r3, #0]
 8022ce4:	68ba      	ldr	r2, [r7, #8]
 8022ce6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8022ce8:	68ba      	ldr	r2, [r7, #8]
 8022cea:	68fb      	ldr	r3, [r7, #12]
 8022cec:	429a      	cmp	r2, r3
 8022cee:	d209      	bcs.n	8022d04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022cf0:	4b13      	ldr	r3, [pc, #76]	; (8022d40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8022cf2:	681a      	ldr	r2, [r3, #0]
 8022cf4:	4b0f      	ldr	r3, [pc, #60]	; (8022d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8022cf6:	681b      	ldr	r3, [r3, #0]
 8022cf8:	3304      	adds	r3, #4
 8022cfa:	4619      	mov	r1, r3
 8022cfc:	4610      	mov	r0, r2
 8022cfe:	f7ff fa56 	bl	80221ae <vListInsert>
}
 8022d02:	e010      	b.n	8022d26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022d04:	4b0f      	ldr	r3, [pc, #60]	; (8022d44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8022d06:	681a      	ldr	r2, [r3, #0]
 8022d08:	4b0a      	ldr	r3, [pc, #40]	; (8022d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8022d0a:	681b      	ldr	r3, [r3, #0]
 8022d0c:	3304      	adds	r3, #4
 8022d0e:	4619      	mov	r1, r3
 8022d10:	4610      	mov	r0, r2
 8022d12:	f7ff fa4c 	bl	80221ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8022d16:	4b0c      	ldr	r3, [pc, #48]	; (8022d48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8022d18:	681b      	ldr	r3, [r3, #0]
 8022d1a:	68ba      	ldr	r2, [r7, #8]
 8022d1c:	429a      	cmp	r2, r3
 8022d1e:	d202      	bcs.n	8022d26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8022d20:	4a09      	ldr	r2, [pc, #36]	; (8022d48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8022d22:	68bb      	ldr	r3, [r7, #8]
 8022d24:	6013      	str	r3, [r2, #0]
}
 8022d26:	bf00      	nop
 8022d28:	3710      	adds	r7, #16
 8022d2a:	46bd      	mov	sp, r7
 8022d2c:	bd80      	pop	{r7, pc}
 8022d2e:	bf00      	nop
 8022d30:	20000a54 	.word	0x20000a54
 8022d34:	20000950 	.word	0x20000950
 8022d38:	20000a58 	.word	0x20000a58
 8022d3c:	20000a3c 	.word	0x20000a3c
 8022d40:	20000a0c 	.word	0x20000a0c
 8022d44:	20000a08 	.word	0x20000a08
 8022d48:	20000a70 	.word	0x20000a70

08022d4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8022d4c:	b480      	push	{r7}
 8022d4e:	b085      	sub	sp, #20
 8022d50:	af00      	add	r7, sp, #0
 8022d52:	60f8      	str	r0, [r7, #12]
 8022d54:	60b9      	str	r1, [r7, #8]
 8022d56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8022d58:	68fb      	ldr	r3, [r7, #12]
 8022d5a:	3b04      	subs	r3, #4
 8022d5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8022d5e:	68fb      	ldr	r3, [r7, #12]
 8022d60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8022d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8022d66:	68fb      	ldr	r3, [r7, #12]
 8022d68:	3b04      	subs	r3, #4
 8022d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8022d6c:	68bb      	ldr	r3, [r7, #8]
 8022d6e:	f023 0201 	bic.w	r2, r3, #1
 8022d72:	68fb      	ldr	r3, [r7, #12]
 8022d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8022d76:	68fb      	ldr	r3, [r7, #12]
 8022d78:	3b04      	subs	r3, #4
 8022d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8022d7c:	4a0c      	ldr	r2, [pc, #48]	; (8022db0 <pxPortInitialiseStack+0x64>)
 8022d7e:	68fb      	ldr	r3, [r7, #12]
 8022d80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8022d82:	68fb      	ldr	r3, [r7, #12]
 8022d84:	3b14      	subs	r3, #20
 8022d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8022d88:	687a      	ldr	r2, [r7, #4]
 8022d8a:	68fb      	ldr	r3, [r7, #12]
 8022d8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8022d8e:	68fb      	ldr	r3, [r7, #12]
 8022d90:	3b04      	subs	r3, #4
 8022d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8022d94:	68fb      	ldr	r3, [r7, #12]
 8022d96:	f06f 0202 	mvn.w	r2, #2
 8022d9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8022d9c:	68fb      	ldr	r3, [r7, #12]
 8022d9e:	3b20      	subs	r3, #32
 8022da0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8022da2:	68fb      	ldr	r3, [r7, #12]
}
 8022da4:	4618      	mov	r0, r3
 8022da6:	3714      	adds	r7, #20
 8022da8:	46bd      	mov	sp, r7
 8022daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dae:	4770      	bx	lr
 8022db0:	08022db5 	.word	0x08022db5

08022db4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8022db4:	b480      	push	{r7}
 8022db6:	b085      	sub	sp, #20
 8022db8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8022dba:	2300      	movs	r3, #0
 8022dbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8022dbe:	4b12      	ldr	r3, [pc, #72]	; (8022e08 <prvTaskExitError+0x54>)
 8022dc0:	681b      	ldr	r3, [r3, #0]
 8022dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022dc6:	d00a      	beq.n	8022dde <prvTaskExitError+0x2a>
	__asm volatile
 8022dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022dcc:	f383 8811 	msr	BASEPRI, r3
 8022dd0:	f3bf 8f6f 	isb	sy
 8022dd4:	f3bf 8f4f 	dsb	sy
 8022dd8:	60fb      	str	r3, [r7, #12]
}
 8022dda:	bf00      	nop
 8022ddc:	e7fe      	b.n	8022ddc <prvTaskExitError+0x28>
	__asm volatile
 8022dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022de2:	f383 8811 	msr	BASEPRI, r3
 8022de6:	f3bf 8f6f 	isb	sy
 8022dea:	f3bf 8f4f 	dsb	sy
 8022dee:	60bb      	str	r3, [r7, #8]
}
 8022df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8022df2:	bf00      	nop
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	2b00      	cmp	r3, #0
 8022df8:	d0fc      	beq.n	8022df4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8022dfa:	bf00      	nop
 8022dfc:	bf00      	nop
 8022dfe:	3714      	adds	r7, #20
 8022e00:	46bd      	mov	sp, r7
 8022e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e06:	4770      	bx	lr
 8022e08:	200003e0 	.word	0x200003e0
 8022e0c:	00000000 	.word	0x00000000

08022e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8022e10:	4b07      	ldr	r3, [pc, #28]	; (8022e30 <pxCurrentTCBConst2>)
 8022e12:	6819      	ldr	r1, [r3, #0]
 8022e14:	6808      	ldr	r0, [r1, #0]
 8022e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e1a:	f380 8809 	msr	PSP, r0
 8022e1e:	f3bf 8f6f 	isb	sy
 8022e22:	f04f 0000 	mov.w	r0, #0
 8022e26:	f380 8811 	msr	BASEPRI, r0
 8022e2a:	4770      	bx	lr
 8022e2c:	f3af 8000 	nop.w

08022e30 <pxCurrentTCBConst2>:
 8022e30:	20000950 	.word	0x20000950
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8022e34:	bf00      	nop
 8022e36:	bf00      	nop

08022e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8022e38:	4808      	ldr	r0, [pc, #32]	; (8022e5c <prvPortStartFirstTask+0x24>)
 8022e3a:	6800      	ldr	r0, [r0, #0]
 8022e3c:	6800      	ldr	r0, [r0, #0]
 8022e3e:	f380 8808 	msr	MSP, r0
 8022e42:	f04f 0000 	mov.w	r0, #0
 8022e46:	f380 8814 	msr	CONTROL, r0
 8022e4a:	b662      	cpsie	i
 8022e4c:	b661      	cpsie	f
 8022e4e:	f3bf 8f4f 	dsb	sy
 8022e52:	f3bf 8f6f 	isb	sy
 8022e56:	df00      	svc	0
 8022e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8022e5a:	bf00      	nop
 8022e5c:	e000ed08 	.word	0xe000ed08

08022e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8022e60:	b580      	push	{r7, lr}
 8022e62:	b086      	sub	sp, #24
 8022e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8022e66:	4b46      	ldr	r3, [pc, #280]	; (8022f80 <xPortStartScheduler+0x120>)
 8022e68:	681b      	ldr	r3, [r3, #0]
 8022e6a:	4a46      	ldr	r2, [pc, #280]	; (8022f84 <xPortStartScheduler+0x124>)
 8022e6c:	4293      	cmp	r3, r2
 8022e6e:	d10a      	bne.n	8022e86 <xPortStartScheduler+0x26>
	__asm volatile
 8022e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022e74:	f383 8811 	msr	BASEPRI, r3
 8022e78:	f3bf 8f6f 	isb	sy
 8022e7c:	f3bf 8f4f 	dsb	sy
 8022e80:	613b      	str	r3, [r7, #16]
}
 8022e82:	bf00      	nop
 8022e84:	e7fe      	b.n	8022e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8022e86:	4b3e      	ldr	r3, [pc, #248]	; (8022f80 <xPortStartScheduler+0x120>)
 8022e88:	681b      	ldr	r3, [r3, #0]
 8022e8a:	4a3f      	ldr	r2, [pc, #252]	; (8022f88 <xPortStartScheduler+0x128>)
 8022e8c:	4293      	cmp	r3, r2
 8022e8e:	d10a      	bne.n	8022ea6 <xPortStartScheduler+0x46>
	__asm volatile
 8022e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022e94:	f383 8811 	msr	BASEPRI, r3
 8022e98:	f3bf 8f6f 	isb	sy
 8022e9c:	f3bf 8f4f 	dsb	sy
 8022ea0:	60fb      	str	r3, [r7, #12]
}
 8022ea2:	bf00      	nop
 8022ea4:	e7fe      	b.n	8022ea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8022ea6:	4b39      	ldr	r3, [pc, #228]	; (8022f8c <xPortStartScheduler+0x12c>)
 8022ea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8022eaa:	697b      	ldr	r3, [r7, #20]
 8022eac:	781b      	ldrb	r3, [r3, #0]
 8022eae:	b2db      	uxtb	r3, r3
 8022eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8022eb2:	697b      	ldr	r3, [r7, #20]
 8022eb4:	22ff      	movs	r2, #255	; 0xff
 8022eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8022eb8:	697b      	ldr	r3, [r7, #20]
 8022eba:	781b      	ldrb	r3, [r3, #0]
 8022ebc:	b2db      	uxtb	r3, r3
 8022ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8022ec0:	78fb      	ldrb	r3, [r7, #3]
 8022ec2:	b2db      	uxtb	r3, r3
 8022ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8022ec8:	b2da      	uxtb	r2, r3
 8022eca:	4b31      	ldr	r3, [pc, #196]	; (8022f90 <xPortStartScheduler+0x130>)
 8022ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8022ece:	4b31      	ldr	r3, [pc, #196]	; (8022f94 <xPortStartScheduler+0x134>)
 8022ed0:	2207      	movs	r2, #7
 8022ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8022ed4:	e009      	b.n	8022eea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8022ed6:	4b2f      	ldr	r3, [pc, #188]	; (8022f94 <xPortStartScheduler+0x134>)
 8022ed8:	681b      	ldr	r3, [r3, #0]
 8022eda:	3b01      	subs	r3, #1
 8022edc:	4a2d      	ldr	r2, [pc, #180]	; (8022f94 <xPortStartScheduler+0x134>)
 8022ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8022ee0:	78fb      	ldrb	r3, [r7, #3]
 8022ee2:	b2db      	uxtb	r3, r3
 8022ee4:	005b      	lsls	r3, r3, #1
 8022ee6:	b2db      	uxtb	r3, r3
 8022ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8022eea:	78fb      	ldrb	r3, [r7, #3]
 8022eec:	b2db      	uxtb	r3, r3
 8022eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022ef2:	2b80      	cmp	r3, #128	; 0x80
 8022ef4:	d0ef      	beq.n	8022ed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8022ef6:	4b27      	ldr	r3, [pc, #156]	; (8022f94 <xPortStartScheduler+0x134>)
 8022ef8:	681b      	ldr	r3, [r3, #0]
 8022efa:	f1c3 0307 	rsb	r3, r3, #7
 8022efe:	2b04      	cmp	r3, #4
 8022f00:	d00a      	beq.n	8022f18 <xPortStartScheduler+0xb8>
	__asm volatile
 8022f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022f06:	f383 8811 	msr	BASEPRI, r3
 8022f0a:	f3bf 8f6f 	isb	sy
 8022f0e:	f3bf 8f4f 	dsb	sy
 8022f12:	60bb      	str	r3, [r7, #8]
}
 8022f14:	bf00      	nop
 8022f16:	e7fe      	b.n	8022f16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8022f18:	4b1e      	ldr	r3, [pc, #120]	; (8022f94 <xPortStartScheduler+0x134>)
 8022f1a:	681b      	ldr	r3, [r3, #0]
 8022f1c:	021b      	lsls	r3, r3, #8
 8022f1e:	4a1d      	ldr	r2, [pc, #116]	; (8022f94 <xPortStartScheduler+0x134>)
 8022f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8022f22:	4b1c      	ldr	r3, [pc, #112]	; (8022f94 <xPortStartScheduler+0x134>)
 8022f24:	681b      	ldr	r3, [r3, #0]
 8022f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8022f2a:	4a1a      	ldr	r2, [pc, #104]	; (8022f94 <xPortStartScheduler+0x134>)
 8022f2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8022f2e:	687b      	ldr	r3, [r7, #4]
 8022f30:	b2da      	uxtb	r2, r3
 8022f32:	697b      	ldr	r3, [r7, #20]
 8022f34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8022f36:	4b18      	ldr	r3, [pc, #96]	; (8022f98 <xPortStartScheduler+0x138>)
 8022f38:	681b      	ldr	r3, [r3, #0]
 8022f3a:	4a17      	ldr	r2, [pc, #92]	; (8022f98 <xPortStartScheduler+0x138>)
 8022f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8022f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8022f42:	4b15      	ldr	r3, [pc, #84]	; (8022f98 <xPortStartScheduler+0x138>)
 8022f44:	681b      	ldr	r3, [r3, #0]
 8022f46:	4a14      	ldr	r2, [pc, #80]	; (8022f98 <xPortStartScheduler+0x138>)
 8022f48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8022f4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8022f4e:	f000 f8dd 	bl	802310c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8022f52:	4b12      	ldr	r3, [pc, #72]	; (8022f9c <xPortStartScheduler+0x13c>)
 8022f54:	2200      	movs	r2, #0
 8022f56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8022f58:	f000 f8fc 	bl	8023154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8022f5c:	4b10      	ldr	r3, [pc, #64]	; (8022fa0 <xPortStartScheduler+0x140>)
 8022f5e:	681b      	ldr	r3, [r3, #0]
 8022f60:	4a0f      	ldr	r2, [pc, #60]	; (8022fa0 <xPortStartScheduler+0x140>)
 8022f62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8022f66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8022f68:	f7ff ff66 	bl	8022e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8022f6c:	f7ff fd56 	bl	8022a1c <vTaskSwitchContext>
	prvTaskExitError();
 8022f70:	f7ff ff20 	bl	8022db4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8022f74:	2300      	movs	r3, #0
}
 8022f76:	4618      	mov	r0, r3
 8022f78:	3718      	adds	r7, #24
 8022f7a:	46bd      	mov	sp, r7
 8022f7c:	bd80      	pop	{r7, pc}
 8022f7e:	bf00      	nop
 8022f80:	e000ed00 	.word	0xe000ed00
 8022f84:	410fc271 	.word	0x410fc271
 8022f88:	410fc270 	.word	0x410fc270
 8022f8c:	e000e400 	.word	0xe000e400
 8022f90:	20000a7c 	.word	0x20000a7c
 8022f94:	20000a80 	.word	0x20000a80
 8022f98:	e000ed20 	.word	0xe000ed20
 8022f9c:	200003e0 	.word	0x200003e0
 8022fa0:	e000ef34 	.word	0xe000ef34

08022fa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8022fa4:	b480      	push	{r7}
 8022fa6:	b083      	sub	sp, #12
 8022fa8:	af00      	add	r7, sp, #0
	__asm volatile
 8022faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022fae:	f383 8811 	msr	BASEPRI, r3
 8022fb2:	f3bf 8f6f 	isb	sy
 8022fb6:	f3bf 8f4f 	dsb	sy
 8022fba:	607b      	str	r3, [r7, #4]
}
 8022fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8022fbe:	4b0f      	ldr	r3, [pc, #60]	; (8022ffc <vPortEnterCritical+0x58>)
 8022fc0:	681b      	ldr	r3, [r3, #0]
 8022fc2:	3301      	adds	r3, #1
 8022fc4:	4a0d      	ldr	r2, [pc, #52]	; (8022ffc <vPortEnterCritical+0x58>)
 8022fc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8022fc8:	4b0c      	ldr	r3, [pc, #48]	; (8022ffc <vPortEnterCritical+0x58>)
 8022fca:	681b      	ldr	r3, [r3, #0]
 8022fcc:	2b01      	cmp	r3, #1
 8022fce:	d10f      	bne.n	8022ff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8022fd0:	4b0b      	ldr	r3, [pc, #44]	; (8023000 <vPortEnterCritical+0x5c>)
 8022fd2:	681b      	ldr	r3, [r3, #0]
 8022fd4:	b2db      	uxtb	r3, r3
 8022fd6:	2b00      	cmp	r3, #0
 8022fd8:	d00a      	beq.n	8022ff0 <vPortEnterCritical+0x4c>
	__asm volatile
 8022fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022fde:	f383 8811 	msr	BASEPRI, r3
 8022fe2:	f3bf 8f6f 	isb	sy
 8022fe6:	f3bf 8f4f 	dsb	sy
 8022fea:	603b      	str	r3, [r7, #0]
}
 8022fec:	bf00      	nop
 8022fee:	e7fe      	b.n	8022fee <vPortEnterCritical+0x4a>
	}
}
 8022ff0:	bf00      	nop
 8022ff2:	370c      	adds	r7, #12
 8022ff4:	46bd      	mov	sp, r7
 8022ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ffa:	4770      	bx	lr
 8022ffc:	200003e0 	.word	0x200003e0
 8023000:	e000ed04 	.word	0xe000ed04

08023004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8023004:	b480      	push	{r7}
 8023006:	b083      	sub	sp, #12
 8023008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802300a:	4b12      	ldr	r3, [pc, #72]	; (8023054 <vPortExitCritical+0x50>)
 802300c:	681b      	ldr	r3, [r3, #0]
 802300e:	2b00      	cmp	r3, #0
 8023010:	d10a      	bne.n	8023028 <vPortExitCritical+0x24>
	__asm volatile
 8023012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023016:	f383 8811 	msr	BASEPRI, r3
 802301a:	f3bf 8f6f 	isb	sy
 802301e:	f3bf 8f4f 	dsb	sy
 8023022:	607b      	str	r3, [r7, #4]
}
 8023024:	bf00      	nop
 8023026:	e7fe      	b.n	8023026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8023028:	4b0a      	ldr	r3, [pc, #40]	; (8023054 <vPortExitCritical+0x50>)
 802302a:	681b      	ldr	r3, [r3, #0]
 802302c:	3b01      	subs	r3, #1
 802302e:	4a09      	ldr	r2, [pc, #36]	; (8023054 <vPortExitCritical+0x50>)
 8023030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8023032:	4b08      	ldr	r3, [pc, #32]	; (8023054 <vPortExitCritical+0x50>)
 8023034:	681b      	ldr	r3, [r3, #0]
 8023036:	2b00      	cmp	r3, #0
 8023038:	d105      	bne.n	8023046 <vPortExitCritical+0x42>
 802303a:	2300      	movs	r3, #0
 802303c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 802303e:	683b      	ldr	r3, [r7, #0]
 8023040:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8023044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8023046:	bf00      	nop
 8023048:	370c      	adds	r7, #12
 802304a:	46bd      	mov	sp, r7
 802304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023050:	4770      	bx	lr
 8023052:	bf00      	nop
 8023054:	200003e0 	.word	0x200003e0
	...

08023060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8023060:	f3ef 8009 	mrs	r0, PSP
 8023064:	f3bf 8f6f 	isb	sy
 8023068:	4b15      	ldr	r3, [pc, #84]	; (80230c0 <pxCurrentTCBConst>)
 802306a:	681a      	ldr	r2, [r3, #0]
 802306c:	f01e 0f10 	tst.w	lr, #16
 8023070:	bf08      	it	eq
 8023072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8023076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802307a:	6010      	str	r0, [r2, #0]
 802307c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8023080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8023084:	f380 8811 	msr	BASEPRI, r0
 8023088:	f3bf 8f4f 	dsb	sy
 802308c:	f3bf 8f6f 	isb	sy
 8023090:	f7ff fcc4 	bl	8022a1c <vTaskSwitchContext>
 8023094:	f04f 0000 	mov.w	r0, #0
 8023098:	f380 8811 	msr	BASEPRI, r0
 802309c:	bc09      	pop	{r0, r3}
 802309e:	6819      	ldr	r1, [r3, #0]
 80230a0:	6808      	ldr	r0, [r1, #0]
 80230a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230a6:	f01e 0f10 	tst.w	lr, #16
 80230aa:	bf08      	it	eq
 80230ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80230b0:	f380 8809 	msr	PSP, r0
 80230b4:	f3bf 8f6f 	isb	sy
 80230b8:	4770      	bx	lr
 80230ba:	bf00      	nop
 80230bc:	f3af 8000 	nop.w

080230c0 <pxCurrentTCBConst>:
 80230c0:	20000950 	.word	0x20000950
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80230c4:	bf00      	nop
 80230c6:	bf00      	nop

080230c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80230c8:	b580      	push	{r7, lr}
 80230ca:	b082      	sub	sp, #8
 80230cc:	af00      	add	r7, sp, #0
	__asm volatile
 80230ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80230d2:	f383 8811 	msr	BASEPRI, r3
 80230d6:	f3bf 8f6f 	isb	sy
 80230da:	f3bf 8f4f 	dsb	sy
 80230de:	607b      	str	r3, [r7, #4]
}
 80230e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80230e2:	f7ff fbe3 	bl	80228ac <xTaskIncrementTick>
 80230e6:	4603      	mov	r3, r0
 80230e8:	2b00      	cmp	r3, #0
 80230ea:	d003      	beq.n	80230f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80230ec:	4b06      	ldr	r3, [pc, #24]	; (8023108 <SysTick_Handler+0x40>)
 80230ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80230f2:	601a      	str	r2, [r3, #0]
 80230f4:	2300      	movs	r3, #0
 80230f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80230f8:	683b      	ldr	r3, [r7, #0]
 80230fa:	f383 8811 	msr	BASEPRI, r3
}
 80230fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8023100:	bf00      	nop
 8023102:	3708      	adds	r7, #8
 8023104:	46bd      	mov	sp, r7
 8023106:	bd80      	pop	{r7, pc}
 8023108:	e000ed04 	.word	0xe000ed04

0802310c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802310c:	b480      	push	{r7}
 802310e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8023110:	4b0b      	ldr	r3, [pc, #44]	; (8023140 <vPortSetupTimerInterrupt+0x34>)
 8023112:	2200      	movs	r2, #0
 8023114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8023116:	4b0b      	ldr	r3, [pc, #44]	; (8023144 <vPortSetupTimerInterrupt+0x38>)
 8023118:	2200      	movs	r2, #0
 802311a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802311c:	4b0a      	ldr	r3, [pc, #40]	; (8023148 <vPortSetupTimerInterrupt+0x3c>)
 802311e:	681b      	ldr	r3, [r3, #0]
 8023120:	4a0a      	ldr	r2, [pc, #40]	; (802314c <vPortSetupTimerInterrupt+0x40>)
 8023122:	fba2 2303 	umull	r2, r3, r2, r3
 8023126:	099b      	lsrs	r3, r3, #6
 8023128:	4a09      	ldr	r2, [pc, #36]	; (8023150 <vPortSetupTimerInterrupt+0x44>)
 802312a:	3b01      	subs	r3, #1
 802312c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802312e:	4b04      	ldr	r3, [pc, #16]	; (8023140 <vPortSetupTimerInterrupt+0x34>)
 8023130:	2207      	movs	r2, #7
 8023132:	601a      	str	r2, [r3, #0]
}
 8023134:	bf00      	nop
 8023136:	46bd      	mov	sp, r7
 8023138:	f85d 7b04 	ldr.w	r7, [sp], #4
 802313c:	4770      	bx	lr
 802313e:	bf00      	nop
 8023140:	e000e010 	.word	0xe000e010
 8023144:	e000e018 	.word	0xe000e018
 8023148:	20000000 	.word	0x20000000
 802314c:	10624dd3 	.word	0x10624dd3
 8023150:	e000e014 	.word	0xe000e014

08023154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8023154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8023164 <vPortEnableVFP+0x10>
 8023158:	6801      	ldr	r1, [r0, #0]
 802315a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802315e:	6001      	str	r1, [r0, #0]
 8023160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8023162:	bf00      	nop
 8023164:	e000ed88 	.word	0xe000ed88

08023168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8023168:	b580      	push	{r7, lr}
 802316a:	b08a      	sub	sp, #40	; 0x28
 802316c:	af00      	add	r7, sp, #0
 802316e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8023170:	2300      	movs	r3, #0
 8023172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8023174:	f7ff faf0 	bl	8022758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8023178:	4b5b      	ldr	r3, [pc, #364]	; (80232e8 <pvPortMalloc+0x180>)
 802317a:	681b      	ldr	r3, [r3, #0]
 802317c:	2b00      	cmp	r3, #0
 802317e:	d101      	bne.n	8023184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8023180:	f000 f920 	bl	80233c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8023184:	4b59      	ldr	r3, [pc, #356]	; (80232ec <pvPortMalloc+0x184>)
 8023186:	681a      	ldr	r2, [r3, #0]
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	4013      	ands	r3, r2
 802318c:	2b00      	cmp	r3, #0
 802318e:	f040 8093 	bne.w	80232b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8023192:	687b      	ldr	r3, [r7, #4]
 8023194:	2b00      	cmp	r3, #0
 8023196:	d01d      	beq.n	80231d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8023198:	2208      	movs	r2, #8
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	4413      	add	r3, r2
 802319e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	f003 0307 	and.w	r3, r3, #7
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	d014      	beq.n	80231d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80231aa:	687b      	ldr	r3, [r7, #4]
 80231ac:	f023 0307 	bic.w	r3, r3, #7
 80231b0:	3308      	adds	r3, #8
 80231b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80231b4:	687b      	ldr	r3, [r7, #4]
 80231b6:	f003 0307 	and.w	r3, r3, #7
 80231ba:	2b00      	cmp	r3, #0
 80231bc:	d00a      	beq.n	80231d4 <pvPortMalloc+0x6c>
	__asm volatile
 80231be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80231c2:	f383 8811 	msr	BASEPRI, r3
 80231c6:	f3bf 8f6f 	isb	sy
 80231ca:	f3bf 8f4f 	dsb	sy
 80231ce:	617b      	str	r3, [r7, #20]
}
 80231d0:	bf00      	nop
 80231d2:	e7fe      	b.n	80231d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	2b00      	cmp	r3, #0
 80231d8:	d06e      	beq.n	80232b8 <pvPortMalloc+0x150>
 80231da:	4b45      	ldr	r3, [pc, #276]	; (80232f0 <pvPortMalloc+0x188>)
 80231dc:	681b      	ldr	r3, [r3, #0]
 80231de:	687a      	ldr	r2, [r7, #4]
 80231e0:	429a      	cmp	r2, r3
 80231e2:	d869      	bhi.n	80232b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80231e4:	4b43      	ldr	r3, [pc, #268]	; (80232f4 <pvPortMalloc+0x18c>)
 80231e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80231e8:	4b42      	ldr	r3, [pc, #264]	; (80232f4 <pvPortMalloc+0x18c>)
 80231ea:	681b      	ldr	r3, [r3, #0]
 80231ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80231ee:	e004      	b.n	80231fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80231f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80231f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80231f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80231f6:	681b      	ldr	r3, [r3, #0]
 80231f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80231fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80231fc:	685b      	ldr	r3, [r3, #4]
 80231fe:	687a      	ldr	r2, [r7, #4]
 8023200:	429a      	cmp	r2, r3
 8023202:	d903      	bls.n	802320c <pvPortMalloc+0xa4>
 8023204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023206:	681b      	ldr	r3, [r3, #0]
 8023208:	2b00      	cmp	r3, #0
 802320a:	d1f1      	bne.n	80231f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802320c:	4b36      	ldr	r3, [pc, #216]	; (80232e8 <pvPortMalloc+0x180>)
 802320e:	681b      	ldr	r3, [r3, #0]
 8023210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023212:	429a      	cmp	r2, r3
 8023214:	d050      	beq.n	80232b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8023216:	6a3b      	ldr	r3, [r7, #32]
 8023218:	681b      	ldr	r3, [r3, #0]
 802321a:	2208      	movs	r2, #8
 802321c:	4413      	add	r3, r2
 802321e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8023220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023222:	681a      	ldr	r2, [r3, #0]
 8023224:	6a3b      	ldr	r3, [r7, #32]
 8023226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8023228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802322a:	685a      	ldr	r2, [r3, #4]
 802322c:	687b      	ldr	r3, [r7, #4]
 802322e:	1ad2      	subs	r2, r2, r3
 8023230:	2308      	movs	r3, #8
 8023232:	005b      	lsls	r3, r3, #1
 8023234:	429a      	cmp	r2, r3
 8023236:	d91f      	bls.n	8023278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8023238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802323a:	687b      	ldr	r3, [r7, #4]
 802323c:	4413      	add	r3, r2
 802323e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8023240:	69bb      	ldr	r3, [r7, #24]
 8023242:	f003 0307 	and.w	r3, r3, #7
 8023246:	2b00      	cmp	r3, #0
 8023248:	d00a      	beq.n	8023260 <pvPortMalloc+0xf8>
	__asm volatile
 802324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802324e:	f383 8811 	msr	BASEPRI, r3
 8023252:	f3bf 8f6f 	isb	sy
 8023256:	f3bf 8f4f 	dsb	sy
 802325a:	613b      	str	r3, [r7, #16]
}
 802325c:	bf00      	nop
 802325e:	e7fe      	b.n	802325e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8023260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023262:	685a      	ldr	r2, [r3, #4]
 8023264:	687b      	ldr	r3, [r7, #4]
 8023266:	1ad2      	subs	r2, r2, r3
 8023268:	69bb      	ldr	r3, [r7, #24]
 802326a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 802326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802326e:	687a      	ldr	r2, [r7, #4]
 8023270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8023272:	69b8      	ldr	r0, [r7, #24]
 8023274:	f000 f908 	bl	8023488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8023278:	4b1d      	ldr	r3, [pc, #116]	; (80232f0 <pvPortMalloc+0x188>)
 802327a:	681a      	ldr	r2, [r3, #0]
 802327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802327e:	685b      	ldr	r3, [r3, #4]
 8023280:	1ad3      	subs	r3, r2, r3
 8023282:	4a1b      	ldr	r2, [pc, #108]	; (80232f0 <pvPortMalloc+0x188>)
 8023284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8023286:	4b1a      	ldr	r3, [pc, #104]	; (80232f0 <pvPortMalloc+0x188>)
 8023288:	681a      	ldr	r2, [r3, #0]
 802328a:	4b1b      	ldr	r3, [pc, #108]	; (80232f8 <pvPortMalloc+0x190>)
 802328c:	681b      	ldr	r3, [r3, #0]
 802328e:	429a      	cmp	r2, r3
 8023290:	d203      	bcs.n	802329a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8023292:	4b17      	ldr	r3, [pc, #92]	; (80232f0 <pvPortMalloc+0x188>)
 8023294:	681b      	ldr	r3, [r3, #0]
 8023296:	4a18      	ldr	r2, [pc, #96]	; (80232f8 <pvPortMalloc+0x190>)
 8023298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802329c:	685a      	ldr	r2, [r3, #4]
 802329e:	4b13      	ldr	r3, [pc, #76]	; (80232ec <pvPortMalloc+0x184>)
 80232a0:	681b      	ldr	r3, [r3, #0]
 80232a2:	431a      	orrs	r2, r3
 80232a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80232a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232aa:	2200      	movs	r2, #0
 80232ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80232ae:	4b13      	ldr	r3, [pc, #76]	; (80232fc <pvPortMalloc+0x194>)
 80232b0:	681b      	ldr	r3, [r3, #0]
 80232b2:	3301      	adds	r3, #1
 80232b4:	4a11      	ldr	r2, [pc, #68]	; (80232fc <pvPortMalloc+0x194>)
 80232b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80232b8:	f7ff fa5c 	bl	8022774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80232bc:	69fb      	ldr	r3, [r7, #28]
 80232be:	f003 0307 	and.w	r3, r3, #7
 80232c2:	2b00      	cmp	r3, #0
 80232c4:	d00a      	beq.n	80232dc <pvPortMalloc+0x174>
	__asm volatile
 80232c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80232ca:	f383 8811 	msr	BASEPRI, r3
 80232ce:	f3bf 8f6f 	isb	sy
 80232d2:	f3bf 8f4f 	dsb	sy
 80232d6:	60fb      	str	r3, [r7, #12]
}
 80232d8:	bf00      	nop
 80232da:	e7fe      	b.n	80232da <pvPortMalloc+0x172>
	return pvReturn;
 80232dc:	69fb      	ldr	r3, [r7, #28]
}
 80232de:	4618      	mov	r0, r3
 80232e0:	3728      	adds	r7, #40	; 0x28
 80232e2:	46bd      	mov	sp, r7
 80232e4:	bd80      	pop	{r7, pc}
 80232e6:	bf00      	nop
 80232e8:	2000468c 	.word	0x2000468c
 80232ec:	200046a0 	.word	0x200046a0
 80232f0:	20004690 	.word	0x20004690
 80232f4:	20004684 	.word	0x20004684
 80232f8:	20004694 	.word	0x20004694
 80232fc:	20004698 	.word	0x20004698

08023300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8023300:	b580      	push	{r7, lr}
 8023302:	b086      	sub	sp, #24
 8023304:	af00      	add	r7, sp, #0
 8023306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8023308:	687b      	ldr	r3, [r7, #4]
 802330a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 802330c:	687b      	ldr	r3, [r7, #4]
 802330e:	2b00      	cmp	r3, #0
 8023310:	d04d      	beq.n	80233ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8023312:	2308      	movs	r3, #8
 8023314:	425b      	negs	r3, r3
 8023316:	697a      	ldr	r2, [r7, #20]
 8023318:	4413      	add	r3, r2
 802331a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802331c:	697b      	ldr	r3, [r7, #20]
 802331e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8023320:	693b      	ldr	r3, [r7, #16]
 8023322:	685a      	ldr	r2, [r3, #4]
 8023324:	4b24      	ldr	r3, [pc, #144]	; (80233b8 <vPortFree+0xb8>)
 8023326:	681b      	ldr	r3, [r3, #0]
 8023328:	4013      	ands	r3, r2
 802332a:	2b00      	cmp	r3, #0
 802332c:	d10a      	bne.n	8023344 <vPortFree+0x44>
	__asm volatile
 802332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023332:	f383 8811 	msr	BASEPRI, r3
 8023336:	f3bf 8f6f 	isb	sy
 802333a:	f3bf 8f4f 	dsb	sy
 802333e:	60fb      	str	r3, [r7, #12]
}
 8023340:	bf00      	nop
 8023342:	e7fe      	b.n	8023342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8023344:	693b      	ldr	r3, [r7, #16]
 8023346:	681b      	ldr	r3, [r3, #0]
 8023348:	2b00      	cmp	r3, #0
 802334a:	d00a      	beq.n	8023362 <vPortFree+0x62>
	__asm volatile
 802334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023350:	f383 8811 	msr	BASEPRI, r3
 8023354:	f3bf 8f6f 	isb	sy
 8023358:	f3bf 8f4f 	dsb	sy
 802335c:	60bb      	str	r3, [r7, #8]
}
 802335e:	bf00      	nop
 8023360:	e7fe      	b.n	8023360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8023362:	693b      	ldr	r3, [r7, #16]
 8023364:	685a      	ldr	r2, [r3, #4]
 8023366:	4b14      	ldr	r3, [pc, #80]	; (80233b8 <vPortFree+0xb8>)
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	4013      	ands	r3, r2
 802336c:	2b00      	cmp	r3, #0
 802336e:	d01e      	beq.n	80233ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8023370:	693b      	ldr	r3, [r7, #16]
 8023372:	681b      	ldr	r3, [r3, #0]
 8023374:	2b00      	cmp	r3, #0
 8023376:	d11a      	bne.n	80233ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8023378:	693b      	ldr	r3, [r7, #16]
 802337a:	685a      	ldr	r2, [r3, #4]
 802337c:	4b0e      	ldr	r3, [pc, #56]	; (80233b8 <vPortFree+0xb8>)
 802337e:	681b      	ldr	r3, [r3, #0]
 8023380:	43db      	mvns	r3, r3
 8023382:	401a      	ands	r2, r3
 8023384:	693b      	ldr	r3, [r7, #16]
 8023386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8023388:	f7ff f9e6 	bl	8022758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802338c:	693b      	ldr	r3, [r7, #16]
 802338e:	685a      	ldr	r2, [r3, #4]
 8023390:	4b0a      	ldr	r3, [pc, #40]	; (80233bc <vPortFree+0xbc>)
 8023392:	681b      	ldr	r3, [r3, #0]
 8023394:	4413      	add	r3, r2
 8023396:	4a09      	ldr	r2, [pc, #36]	; (80233bc <vPortFree+0xbc>)
 8023398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802339a:	6938      	ldr	r0, [r7, #16]
 802339c:	f000 f874 	bl	8023488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80233a0:	4b07      	ldr	r3, [pc, #28]	; (80233c0 <vPortFree+0xc0>)
 80233a2:	681b      	ldr	r3, [r3, #0]
 80233a4:	3301      	adds	r3, #1
 80233a6:	4a06      	ldr	r2, [pc, #24]	; (80233c0 <vPortFree+0xc0>)
 80233a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80233aa:	f7ff f9e3 	bl	8022774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80233ae:	bf00      	nop
 80233b0:	3718      	adds	r7, #24
 80233b2:	46bd      	mov	sp, r7
 80233b4:	bd80      	pop	{r7, pc}
 80233b6:	bf00      	nop
 80233b8:	200046a0 	.word	0x200046a0
 80233bc:	20004690 	.word	0x20004690
 80233c0:	2000469c 	.word	0x2000469c

080233c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80233c4:	b480      	push	{r7}
 80233c6:	b085      	sub	sp, #20
 80233c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80233ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80233ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80233d0:	4b27      	ldr	r3, [pc, #156]	; (8023470 <prvHeapInit+0xac>)
 80233d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80233d4:	68fb      	ldr	r3, [r7, #12]
 80233d6:	f003 0307 	and.w	r3, r3, #7
 80233da:	2b00      	cmp	r3, #0
 80233dc:	d00c      	beq.n	80233f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80233de:	68fb      	ldr	r3, [r7, #12]
 80233e0:	3307      	adds	r3, #7
 80233e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80233e4:	68fb      	ldr	r3, [r7, #12]
 80233e6:	f023 0307 	bic.w	r3, r3, #7
 80233ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80233ec:	68ba      	ldr	r2, [r7, #8]
 80233ee:	68fb      	ldr	r3, [r7, #12]
 80233f0:	1ad3      	subs	r3, r2, r3
 80233f2:	4a1f      	ldr	r2, [pc, #124]	; (8023470 <prvHeapInit+0xac>)
 80233f4:	4413      	add	r3, r2
 80233f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80233f8:	68fb      	ldr	r3, [r7, #12]
 80233fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80233fc:	4a1d      	ldr	r2, [pc, #116]	; (8023474 <prvHeapInit+0xb0>)
 80233fe:	687b      	ldr	r3, [r7, #4]
 8023400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8023402:	4b1c      	ldr	r3, [pc, #112]	; (8023474 <prvHeapInit+0xb0>)
 8023404:	2200      	movs	r2, #0
 8023406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8023408:	687b      	ldr	r3, [r7, #4]
 802340a:	68ba      	ldr	r2, [r7, #8]
 802340c:	4413      	add	r3, r2
 802340e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8023410:	2208      	movs	r2, #8
 8023412:	68fb      	ldr	r3, [r7, #12]
 8023414:	1a9b      	subs	r3, r3, r2
 8023416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8023418:	68fb      	ldr	r3, [r7, #12]
 802341a:	f023 0307 	bic.w	r3, r3, #7
 802341e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8023420:	68fb      	ldr	r3, [r7, #12]
 8023422:	4a15      	ldr	r2, [pc, #84]	; (8023478 <prvHeapInit+0xb4>)
 8023424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8023426:	4b14      	ldr	r3, [pc, #80]	; (8023478 <prvHeapInit+0xb4>)
 8023428:	681b      	ldr	r3, [r3, #0]
 802342a:	2200      	movs	r2, #0
 802342c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802342e:	4b12      	ldr	r3, [pc, #72]	; (8023478 <prvHeapInit+0xb4>)
 8023430:	681b      	ldr	r3, [r3, #0]
 8023432:	2200      	movs	r2, #0
 8023434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8023436:	687b      	ldr	r3, [r7, #4]
 8023438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802343a:	683b      	ldr	r3, [r7, #0]
 802343c:	68fa      	ldr	r2, [r7, #12]
 802343e:	1ad2      	subs	r2, r2, r3
 8023440:	683b      	ldr	r3, [r7, #0]
 8023442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8023444:	4b0c      	ldr	r3, [pc, #48]	; (8023478 <prvHeapInit+0xb4>)
 8023446:	681a      	ldr	r2, [r3, #0]
 8023448:	683b      	ldr	r3, [r7, #0]
 802344a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802344c:	683b      	ldr	r3, [r7, #0]
 802344e:	685b      	ldr	r3, [r3, #4]
 8023450:	4a0a      	ldr	r2, [pc, #40]	; (802347c <prvHeapInit+0xb8>)
 8023452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8023454:	683b      	ldr	r3, [r7, #0]
 8023456:	685b      	ldr	r3, [r3, #4]
 8023458:	4a09      	ldr	r2, [pc, #36]	; (8023480 <prvHeapInit+0xbc>)
 802345a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802345c:	4b09      	ldr	r3, [pc, #36]	; (8023484 <prvHeapInit+0xc0>)
 802345e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8023462:	601a      	str	r2, [r3, #0]
}
 8023464:	bf00      	nop
 8023466:	3714      	adds	r7, #20
 8023468:	46bd      	mov	sp, r7
 802346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802346e:	4770      	bx	lr
 8023470:	20000a84 	.word	0x20000a84
 8023474:	20004684 	.word	0x20004684
 8023478:	2000468c 	.word	0x2000468c
 802347c:	20004694 	.word	0x20004694
 8023480:	20004690 	.word	0x20004690
 8023484:	200046a0 	.word	0x200046a0

08023488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8023488:	b480      	push	{r7}
 802348a:	b085      	sub	sp, #20
 802348c:	af00      	add	r7, sp, #0
 802348e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8023490:	4b28      	ldr	r3, [pc, #160]	; (8023534 <prvInsertBlockIntoFreeList+0xac>)
 8023492:	60fb      	str	r3, [r7, #12]
 8023494:	e002      	b.n	802349c <prvInsertBlockIntoFreeList+0x14>
 8023496:	68fb      	ldr	r3, [r7, #12]
 8023498:	681b      	ldr	r3, [r3, #0]
 802349a:	60fb      	str	r3, [r7, #12]
 802349c:	68fb      	ldr	r3, [r7, #12]
 802349e:	681b      	ldr	r3, [r3, #0]
 80234a0:	687a      	ldr	r2, [r7, #4]
 80234a2:	429a      	cmp	r2, r3
 80234a4:	d8f7      	bhi.n	8023496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80234a6:	68fb      	ldr	r3, [r7, #12]
 80234a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80234aa:	68fb      	ldr	r3, [r7, #12]
 80234ac:	685b      	ldr	r3, [r3, #4]
 80234ae:	68ba      	ldr	r2, [r7, #8]
 80234b0:	4413      	add	r3, r2
 80234b2:	687a      	ldr	r2, [r7, #4]
 80234b4:	429a      	cmp	r2, r3
 80234b6:	d108      	bne.n	80234ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80234b8:	68fb      	ldr	r3, [r7, #12]
 80234ba:	685a      	ldr	r2, [r3, #4]
 80234bc:	687b      	ldr	r3, [r7, #4]
 80234be:	685b      	ldr	r3, [r3, #4]
 80234c0:	441a      	add	r2, r3
 80234c2:	68fb      	ldr	r3, [r7, #12]
 80234c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80234c6:	68fb      	ldr	r3, [r7, #12]
 80234c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80234ca:	687b      	ldr	r3, [r7, #4]
 80234cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	685b      	ldr	r3, [r3, #4]
 80234d2:	68ba      	ldr	r2, [r7, #8]
 80234d4:	441a      	add	r2, r3
 80234d6:	68fb      	ldr	r3, [r7, #12]
 80234d8:	681b      	ldr	r3, [r3, #0]
 80234da:	429a      	cmp	r2, r3
 80234dc:	d118      	bne.n	8023510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80234de:	68fb      	ldr	r3, [r7, #12]
 80234e0:	681a      	ldr	r2, [r3, #0]
 80234e2:	4b15      	ldr	r3, [pc, #84]	; (8023538 <prvInsertBlockIntoFreeList+0xb0>)
 80234e4:	681b      	ldr	r3, [r3, #0]
 80234e6:	429a      	cmp	r2, r3
 80234e8:	d00d      	beq.n	8023506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80234ea:	687b      	ldr	r3, [r7, #4]
 80234ec:	685a      	ldr	r2, [r3, #4]
 80234ee:	68fb      	ldr	r3, [r7, #12]
 80234f0:	681b      	ldr	r3, [r3, #0]
 80234f2:	685b      	ldr	r3, [r3, #4]
 80234f4:	441a      	add	r2, r3
 80234f6:	687b      	ldr	r3, [r7, #4]
 80234f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80234fa:	68fb      	ldr	r3, [r7, #12]
 80234fc:	681b      	ldr	r3, [r3, #0]
 80234fe:	681a      	ldr	r2, [r3, #0]
 8023500:	687b      	ldr	r3, [r7, #4]
 8023502:	601a      	str	r2, [r3, #0]
 8023504:	e008      	b.n	8023518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8023506:	4b0c      	ldr	r3, [pc, #48]	; (8023538 <prvInsertBlockIntoFreeList+0xb0>)
 8023508:	681a      	ldr	r2, [r3, #0]
 802350a:	687b      	ldr	r3, [r7, #4]
 802350c:	601a      	str	r2, [r3, #0]
 802350e:	e003      	b.n	8023518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8023510:	68fb      	ldr	r3, [r7, #12]
 8023512:	681a      	ldr	r2, [r3, #0]
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8023518:	68fa      	ldr	r2, [r7, #12]
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	429a      	cmp	r2, r3
 802351e:	d002      	beq.n	8023526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8023520:	68fb      	ldr	r3, [r7, #12]
 8023522:	687a      	ldr	r2, [r7, #4]
 8023524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8023526:	bf00      	nop
 8023528:	3714      	adds	r7, #20
 802352a:	46bd      	mov	sp, r7
 802352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023530:	4770      	bx	lr
 8023532:	bf00      	nop
 8023534:	20004684 	.word	0x20004684
 8023538:	2000468c 	.word	0x2000468c

0802353c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802353c:	b580      	push	{r7, lr}
 802353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8023540:	2201      	movs	r2, #1
 8023542:	4912      	ldr	r1, [pc, #72]	; (802358c <MX_USB_DEVICE_Init+0x50>)
 8023544:	4812      	ldr	r0, [pc, #72]	; (8023590 <MX_USB_DEVICE_Init+0x54>)
 8023546:	f7fd fbe3 	bl	8020d10 <USBD_Init>
 802354a:	4603      	mov	r3, r0
 802354c:	2b00      	cmp	r3, #0
 802354e:	d001      	beq.n	8023554 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8023550:	f7ee faa4 	bl	8011a9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8023554:	490f      	ldr	r1, [pc, #60]	; (8023594 <MX_USB_DEVICE_Init+0x58>)
 8023556:	480e      	ldr	r0, [pc, #56]	; (8023590 <MX_USB_DEVICE_Init+0x54>)
 8023558:	f7fd fc0a 	bl	8020d70 <USBD_RegisterClass>
 802355c:	4603      	mov	r3, r0
 802355e:	2b00      	cmp	r3, #0
 8023560:	d001      	beq.n	8023566 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8023562:	f7ee fa9b 	bl	8011a9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8023566:	490c      	ldr	r1, [pc, #48]	; (8023598 <MX_USB_DEVICE_Init+0x5c>)
 8023568:	4809      	ldr	r0, [pc, #36]	; (8023590 <MX_USB_DEVICE_Init+0x54>)
 802356a:	f7fd fb2b 	bl	8020bc4 <USBD_CDC_RegisterInterface>
 802356e:	4603      	mov	r3, r0
 8023570:	2b00      	cmp	r3, #0
 8023572:	d001      	beq.n	8023578 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8023574:	f7ee fa92 	bl	8011a9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8023578:	4805      	ldr	r0, [pc, #20]	; (8023590 <MX_USB_DEVICE_Init+0x54>)
 802357a:	f7fd fc20 	bl	8020dbe <USBD_Start>
 802357e:	4603      	mov	r3, r0
 8023580:	2b00      	cmp	r3, #0
 8023582:	d001      	beq.n	8023588 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8023584:	f7ee fa8a 	bl	8011a9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8023588:	bf00      	nop
 802358a:	bd80      	pop	{r7, pc}
 802358c:	200003f8 	.word	0x200003f8
 8023590:	20005424 	.word	0x20005424
 8023594:	200002dc 	.word	0x200002dc
 8023598:	200003e4 	.word	0x200003e4

0802359c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 802359c:	b580      	push	{r7, lr}
 802359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80235a0:	2200      	movs	r2, #0
 80235a2:	4905      	ldr	r1, [pc, #20]	; (80235b8 <CDC_Init_HS+0x1c>)
 80235a4:	4805      	ldr	r0, [pc, #20]	; (80235bc <CDC_Init_HS+0x20>)
 80235a6:	f7fd fb22 	bl	8020bee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80235aa:	4905      	ldr	r1, [pc, #20]	; (80235c0 <CDC_Init_HS+0x24>)
 80235ac:	4803      	ldr	r0, [pc, #12]	; (80235bc <CDC_Init_HS+0x20>)
 80235ae:	f7fd fb3c 	bl	8020c2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80235b2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80235b4:	4618      	mov	r0, r3
 80235b6:	bd80      	pop	{r7, pc}
 80235b8:	20005ef4 	.word	0x20005ef4
 80235bc:	20005424 	.word	0x20005424
 80235c0:	200056f4 	.word	0x200056f4

080235c4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80235c4:	b480      	push	{r7}
 80235c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80235c8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80235ca:	4618      	mov	r0, r3
 80235cc:	46bd      	mov	sp, r7
 80235ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235d2:	4770      	bx	lr

080235d4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80235d4:	b480      	push	{r7}
 80235d6:	b083      	sub	sp, #12
 80235d8:	af00      	add	r7, sp, #0
 80235da:	4603      	mov	r3, r0
 80235dc:	6039      	str	r1, [r7, #0]
 80235de:	71fb      	strb	r3, [r7, #7]
 80235e0:	4613      	mov	r3, r2
 80235e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80235e4:	79fb      	ldrb	r3, [r7, #7]
 80235e6:	2b23      	cmp	r3, #35	; 0x23
 80235e8:	d84a      	bhi.n	8023680 <CDC_Control_HS+0xac>
 80235ea:	a201      	add	r2, pc, #4	; (adr r2, 80235f0 <CDC_Control_HS+0x1c>)
 80235ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80235f0:	08023681 	.word	0x08023681
 80235f4:	08023681 	.word	0x08023681
 80235f8:	08023681 	.word	0x08023681
 80235fc:	08023681 	.word	0x08023681
 8023600:	08023681 	.word	0x08023681
 8023604:	08023681 	.word	0x08023681
 8023608:	08023681 	.word	0x08023681
 802360c:	08023681 	.word	0x08023681
 8023610:	08023681 	.word	0x08023681
 8023614:	08023681 	.word	0x08023681
 8023618:	08023681 	.word	0x08023681
 802361c:	08023681 	.word	0x08023681
 8023620:	08023681 	.word	0x08023681
 8023624:	08023681 	.word	0x08023681
 8023628:	08023681 	.word	0x08023681
 802362c:	08023681 	.word	0x08023681
 8023630:	08023681 	.word	0x08023681
 8023634:	08023681 	.word	0x08023681
 8023638:	08023681 	.word	0x08023681
 802363c:	08023681 	.word	0x08023681
 8023640:	08023681 	.word	0x08023681
 8023644:	08023681 	.word	0x08023681
 8023648:	08023681 	.word	0x08023681
 802364c:	08023681 	.word	0x08023681
 8023650:	08023681 	.word	0x08023681
 8023654:	08023681 	.word	0x08023681
 8023658:	08023681 	.word	0x08023681
 802365c:	08023681 	.word	0x08023681
 8023660:	08023681 	.word	0x08023681
 8023664:	08023681 	.word	0x08023681
 8023668:	08023681 	.word	0x08023681
 802366c:	08023681 	.word	0x08023681
 8023670:	08023681 	.word	0x08023681
 8023674:	08023681 	.word	0x08023681
 8023678:	08023681 	.word	0x08023681
 802367c:	08023681 	.word	0x08023681
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8023680:	bf00      	nop
  }

  return (USBD_OK);
 8023682:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8023684:	4618      	mov	r0, r3
 8023686:	370c      	adds	r7, #12
 8023688:	46bd      	mov	sp, r7
 802368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802368e:	4770      	bx	lr

08023690 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8023690:	b580      	push	{r7, lr}
 8023692:	b082      	sub	sp, #8
 8023694:	af00      	add	r7, sp, #0
 8023696:	6078      	str	r0, [r7, #4]
 8023698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 802369a:	6879      	ldr	r1, [r7, #4]
 802369c:	4805      	ldr	r0, [pc, #20]	; (80236b4 <CDC_Receive_HS+0x24>)
 802369e:	f7fd fac4 	bl	8020c2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80236a2:	4804      	ldr	r0, [pc, #16]	; (80236b4 <CDC_Receive_HS+0x24>)
 80236a4:	f7fd fb0a 	bl	8020cbc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80236a8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80236aa:	4618      	mov	r0, r3
 80236ac:	3708      	adds	r7, #8
 80236ae:	46bd      	mov	sp, r7
 80236b0:	bd80      	pop	{r7, pc}
 80236b2:	bf00      	nop
 80236b4:	20005424 	.word	0x20005424

080236b8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80236b8:	b580      	push	{r7, lr}
 80236ba:	b084      	sub	sp, #16
 80236bc:	af00      	add	r7, sp, #0
 80236be:	6078      	str	r0, [r7, #4]
 80236c0:	460b      	mov	r3, r1
 80236c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80236c4:	2300      	movs	r3, #0
 80236c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80236c8:	4b0d      	ldr	r3, [pc, #52]	; (8023700 <CDC_Transmit_HS+0x48>)
 80236ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80236ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80236d0:	68bb      	ldr	r3, [r7, #8]
 80236d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80236d6:	2b00      	cmp	r3, #0
 80236d8:	d001      	beq.n	80236de <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80236da:	2301      	movs	r3, #1
 80236dc:	e00b      	b.n	80236f6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80236de:	887b      	ldrh	r3, [r7, #2]
 80236e0:	461a      	mov	r2, r3
 80236e2:	6879      	ldr	r1, [r7, #4]
 80236e4:	4806      	ldr	r0, [pc, #24]	; (8023700 <CDC_Transmit_HS+0x48>)
 80236e6:	f7fd fa82 	bl	8020bee <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80236ea:	4805      	ldr	r0, [pc, #20]	; (8023700 <CDC_Transmit_HS+0x48>)
 80236ec:	f7fd fab6 	bl	8020c5c <USBD_CDC_TransmitPacket>
 80236f0:	4603      	mov	r3, r0
 80236f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80236f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80236f6:	4618      	mov	r0, r3
 80236f8:	3710      	adds	r7, #16
 80236fa:	46bd      	mov	sp, r7
 80236fc:	bd80      	pop	{r7, pc}
 80236fe:	bf00      	nop
 8023700:	20005424 	.word	0x20005424

08023704 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8023704:	b480      	push	{r7}
 8023706:	b087      	sub	sp, #28
 8023708:	af00      	add	r7, sp, #0
 802370a:	60f8      	str	r0, [r7, #12]
 802370c:	60b9      	str	r1, [r7, #8]
 802370e:	4613      	mov	r3, r2
 8023710:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8023712:	2300      	movs	r3, #0
 8023714:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8023716:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802371a:	4618      	mov	r0, r3
 802371c:	371c      	adds	r7, #28
 802371e:	46bd      	mov	sp, r7
 8023720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023724:	4770      	bx	lr
	...

08023728 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023728:	b480      	push	{r7}
 802372a:	b083      	sub	sp, #12
 802372c:	af00      	add	r7, sp, #0
 802372e:	4603      	mov	r3, r0
 8023730:	6039      	str	r1, [r7, #0]
 8023732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8023734:	683b      	ldr	r3, [r7, #0]
 8023736:	2212      	movs	r2, #18
 8023738:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 802373a:	4b03      	ldr	r3, [pc, #12]	; (8023748 <USBD_HS_DeviceDescriptor+0x20>)
}
 802373c:	4618      	mov	r0, r3
 802373e:	370c      	adds	r7, #12
 8023740:	46bd      	mov	sp, r7
 8023742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023746:	4770      	bx	lr
 8023748:	20000418 	.word	0x20000418

0802374c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802374c:	b480      	push	{r7}
 802374e:	b083      	sub	sp, #12
 8023750:	af00      	add	r7, sp, #0
 8023752:	4603      	mov	r3, r0
 8023754:	6039      	str	r1, [r7, #0]
 8023756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8023758:	683b      	ldr	r3, [r7, #0]
 802375a:	2204      	movs	r2, #4
 802375c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802375e:	4b03      	ldr	r3, [pc, #12]	; (802376c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8023760:	4618      	mov	r0, r3
 8023762:	370c      	adds	r7, #12
 8023764:	46bd      	mov	sp, r7
 8023766:	f85d 7b04 	ldr.w	r7, [sp], #4
 802376a:	4770      	bx	lr
 802376c:	20000438 	.word	0x20000438

08023770 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023770:	b580      	push	{r7, lr}
 8023772:	b082      	sub	sp, #8
 8023774:	af00      	add	r7, sp, #0
 8023776:	4603      	mov	r3, r0
 8023778:	6039      	str	r1, [r7, #0]
 802377a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 802377c:	79fb      	ldrb	r3, [r7, #7]
 802377e:	2b00      	cmp	r3, #0
 8023780:	d105      	bne.n	802378e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8023782:	683a      	ldr	r2, [r7, #0]
 8023784:	4907      	ldr	r1, [pc, #28]	; (80237a4 <USBD_HS_ProductStrDescriptor+0x34>)
 8023786:	4808      	ldr	r0, [pc, #32]	; (80237a8 <USBD_HS_ProductStrDescriptor+0x38>)
 8023788:	f7fe fb75 	bl	8021e76 <USBD_GetString>
 802378c:	e004      	b.n	8023798 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 802378e:	683a      	ldr	r2, [r7, #0]
 8023790:	4904      	ldr	r1, [pc, #16]	; (80237a4 <USBD_HS_ProductStrDescriptor+0x34>)
 8023792:	4805      	ldr	r0, [pc, #20]	; (80237a8 <USBD_HS_ProductStrDescriptor+0x38>)
 8023794:	f7fe fb6f 	bl	8021e76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8023798:	4b02      	ldr	r3, [pc, #8]	; (80237a4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 802379a:	4618      	mov	r0, r3
 802379c:	3708      	adds	r7, #8
 802379e:	46bd      	mov	sp, r7
 80237a0:	bd80      	pop	{r7, pc}
 80237a2:	bf00      	nop
 80237a4:	200066f4 	.word	0x200066f4
 80237a8:	08027048 	.word	0x08027048

080237ac <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80237ac:	b580      	push	{r7, lr}
 80237ae:	b082      	sub	sp, #8
 80237b0:	af00      	add	r7, sp, #0
 80237b2:	4603      	mov	r3, r0
 80237b4:	6039      	str	r1, [r7, #0]
 80237b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80237b8:	683a      	ldr	r2, [r7, #0]
 80237ba:	4904      	ldr	r1, [pc, #16]	; (80237cc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80237bc:	4804      	ldr	r0, [pc, #16]	; (80237d0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80237be:	f7fe fb5a 	bl	8021e76 <USBD_GetString>
  return USBD_StrDesc;
 80237c2:	4b02      	ldr	r3, [pc, #8]	; (80237cc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80237c4:	4618      	mov	r0, r3
 80237c6:	3708      	adds	r7, #8
 80237c8:	46bd      	mov	sp, r7
 80237ca:	bd80      	pop	{r7, pc}
 80237cc:	200066f4 	.word	0x200066f4
 80237d0:	08027060 	.word	0x08027060

080237d4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80237d4:	b580      	push	{r7, lr}
 80237d6:	b082      	sub	sp, #8
 80237d8:	af00      	add	r7, sp, #0
 80237da:	4603      	mov	r3, r0
 80237dc:	6039      	str	r1, [r7, #0]
 80237de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80237e0:	683b      	ldr	r3, [r7, #0]
 80237e2:	221a      	movs	r2, #26
 80237e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80237e6:	f000 f855 	bl	8023894 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80237ea:	4b02      	ldr	r3, [pc, #8]	; (80237f4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80237ec:	4618      	mov	r0, r3
 80237ee:	3708      	adds	r7, #8
 80237f0:	46bd      	mov	sp, r7
 80237f2:	bd80      	pop	{r7, pc}
 80237f4:	2000043c 	.word	0x2000043c

080237f8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80237f8:	b580      	push	{r7, lr}
 80237fa:	b082      	sub	sp, #8
 80237fc:	af00      	add	r7, sp, #0
 80237fe:	4603      	mov	r3, r0
 8023800:	6039      	str	r1, [r7, #0]
 8023802:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8023804:	79fb      	ldrb	r3, [r7, #7]
 8023806:	2b00      	cmp	r3, #0
 8023808:	d105      	bne.n	8023816 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 802380a:	683a      	ldr	r2, [r7, #0]
 802380c:	4907      	ldr	r1, [pc, #28]	; (802382c <USBD_HS_ConfigStrDescriptor+0x34>)
 802380e:	4808      	ldr	r0, [pc, #32]	; (8023830 <USBD_HS_ConfigStrDescriptor+0x38>)
 8023810:	f7fe fb31 	bl	8021e76 <USBD_GetString>
 8023814:	e004      	b.n	8023820 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8023816:	683a      	ldr	r2, [r7, #0]
 8023818:	4904      	ldr	r1, [pc, #16]	; (802382c <USBD_HS_ConfigStrDescriptor+0x34>)
 802381a:	4805      	ldr	r0, [pc, #20]	; (8023830 <USBD_HS_ConfigStrDescriptor+0x38>)
 802381c:	f7fe fb2b 	bl	8021e76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8023820:	4b02      	ldr	r3, [pc, #8]	; (802382c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8023822:	4618      	mov	r0, r3
 8023824:	3708      	adds	r7, #8
 8023826:	46bd      	mov	sp, r7
 8023828:	bd80      	pop	{r7, pc}
 802382a:	bf00      	nop
 802382c:	200066f4 	.word	0x200066f4
 8023830:	08027074 	.word	0x08027074

08023834 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023834:	b580      	push	{r7, lr}
 8023836:	b082      	sub	sp, #8
 8023838:	af00      	add	r7, sp, #0
 802383a:	4603      	mov	r3, r0
 802383c:	6039      	str	r1, [r7, #0]
 802383e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8023840:	79fb      	ldrb	r3, [r7, #7]
 8023842:	2b00      	cmp	r3, #0
 8023844:	d105      	bne.n	8023852 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8023846:	683a      	ldr	r2, [r7, #0]
 8023848:	4907      	ldr	r1, [pc, #28]	; (8023868 <USBD_HS_InterfaceStrDescriptor+0x34>)
 802384a:	4808      	ldr	r0, [pc, #32]	; (802386c <USBD_HS_InterfaceStrDescriptor+0x38>)
 802384c:	f7fe fb13 	bl	8021e76 <USBD_GetString>
 8023850:	e004      	b.n	802385c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8023852:	683a      	ldr	r2, [r7, #0]
 8023854:	4904      	ldr	r1, [pc, #16]	; (8023868 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8023856:	4805      	ldr	r0, [pc, #20]	; (802386c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8023858:	f7fe fb0d 	bl	8021e76 <USBD_GetString>
  }
  return USBD_StrDesc;
 802385c:	4b02      	ldr	r3, [pc, #8]	; (8023868 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 802385e:	4618      	mov	r0, r3
 8023860:	3708      	adds	r7, #8
 8023862:	46bd      	mov	sp, r7
 8023864:	bd80      	pop	{r7, pc}
 8023866:	bf00      	nop
 8023868:	200066f4 	.word	0x200066f4
 802386c:	08027080 	.word	0x08027080

08023870 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023870:	b480      	push	{r7}
 8023872:	b083      	sub	sp, #12
 8023874:	af00      	add	r7, sp, #0
 8023876:	4603      	mov	r3, r0
 8023878:	6039      	str	r1, [r7, #0]
 802387a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 802387c:	683b      	ldr	r3, [r7, #0]
 802387e:	220c      	movs	r2, #12
 8023880:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8023882:	4b03      	ldr	r3, [pc, #12]	; (8023890 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8023884:	4618      	mov	r0, r3
 8023886:	370c      	adds	r7, #12
 8023888:	46bd      	mov	sp, r7
 802388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802388e:	4770      	bx	lr
 8023890:	2000042c 	.word	0x2000042c

08023894 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8023894:	b580      	push	{r7, lr}
 8023896:	b084      	sub	sp, #16
 8023898:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802389a:	4b0f      	ldr	r3, [pc, #60]	; (80238d8 <Get_SerialNum+0x44>)
 802389c:	681b      	ldr	r3, [r3, #0]
 802389e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80238a0:	4b0e      	ldr	r3, [pc, #56]	; (80238dc <Get_SerialNum+0x48>)
 80238a2:	681b      	ldr	r3, [r3, #0]
 80238a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80238a6:	4b0e      	ldr	r3, [pc, #56]	; (80238e0 <Get_SerialNum+0x4c>)
 80238a8:	681b      	ldr	r3, [r3, #0]
 80238aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80238ac:	68fa      	ldr	r2, [r7, #12]
 80238ae:	687b      	ldr	r3, [r7, #4]
 80238b0:	4413      	add	r3, r2
 80238b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80238b4:	68fb      	ldr	r3, [r7, #12]
 80238b6:	2b00      	cmp	r3, #0
 80238b8:	d009      	beq.n	80238ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80238ba:	2208      	movs	r2, #8
 80238bc:	4909      	ldr	r1, [pc, #36]	; (80238e4 <Get_SerialNum+0x50>)
 80238be:	68f8      	ldr	r0, [r7, #12]
 80238c0:	f000 f814 	bl	80238ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80238c4:	2204      	movs	r2, #4
 80238c6:	4908      	ldr	r1, [pc, #32]	; (80238e8 <Get_SerialNum+0x54>)
 80238c8:	68b8      	ldr	r0, [r7, #8]
 80238ca:	f000 f80f 	bl	80238ec <IntToUnicode>
  }
}
 80238ce:	bf00      	nop
 80238d0:	3710      	adds	r7, #16
 80238d2:	46bd      	mov	sp, r7
 80238d4:	bd80      	pop	{r7, pc}
 80238d6:	bf00      	nop
 80238d8:	1fff7a10 	.word	0x1fff7a10
 80238dc:	1fff7a14 	.word	0x1fff7a14
 80238e0:	1fff7a18 	.word	0x1fff7a18
 80238e4:	2000043e 	.word	0x2000043e
 80238e8:	2000044e 	.word	0x2000044e

080238ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80238ec:	b480      	push	{r7}
 80238ee:	b087      	sub	sp, #28
 80238f0:	af00      	add	r7, sp, #0
 80238f2:	60f8      	str	r0, [r7, #12]
 80238f4:	60b9      	str	r1, [r7, #8]
 80238f6:	4613      	mov	r3, r2
 80238f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80238fa:	2300      	movs	r3, #0
 80238fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80238fe:	2300      	movs	r3, #0
 8023900:	75fb      	strb	r3, [r7, #23]
 8023902:	e027      	b.n	8023954 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8023904:	68fb      	ldr	r3, [r7, #12]
 8023906:	0f1b      	lsrs	r3, r3, #28
 8023908:	2b09      	cmp	r3, #9
 802390a:	d80b      	bhi.n	8023924 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802390c:	68fb      	ldr	r3, [r7, #12]
 802390e:	0f1b      	lsrs	r3, r3, #28
 8023910:	b2da      	uxtb	r2, r3
 8023912:	7dfb      	ldrb	r3, [r7, #23]
 8023914:	005b      	lsls	r3, r3, #1
 8023916:	4619      	mov	r1, r3
 8023918:	68bb      	ldr	r3, [r7, #8]
 802391a:	440b      	add	r3, r1
 802391c:	3230      	adds	r2, #48	; 0x30
 802391e:	b2d2      	uxtb	r2, r2
 8023920:	701a      	strb	r2, [r3, #0]
 8023922:	e00a      	b.n	802393a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023924:	68fb      	ldr	r3, [r7, #12]
 8023926:	0f1b      	lsrs	r3, r3, #28
 8023928:	b2da      	uxtb	r2, r3
 802392a:	7dfb      	ldrb	r3, [r7, #23]
 802392c:	005b      	lsls	r3, r3, #1
 802392e:	4619      	mov	r1, r3
 8023930:	68bb      	ldr	r3, [r7, #8]
 8023932:	440b      	add	r3, r1
 8023934:	3237      	adds	r2, #55	; 0x37
 8023936:	b2d2      	uxtb	r2, r2
 8023938:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802393a:	68fb      	ldr	r3, [r7, #12]
 802393c:	011b      	lsls	r3, r3, #4
 802393e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8023940:	7dfb      	ldrb	r3, [r7, #23]
 8023942:	005b      	lsls	r3, r3, #1
 8023944:	3301      	adds	r3, #1
 8023946:	68ba      	ldr	r2, [r7, #8]
 8023948:	4413      	add	r3, r2
 802394a:	2200      	movs	r2, #0
 802394c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802394e:	7dfb      	ldrb	r3, [r7, #23]
 8023950:	3301      	adds	r3, #1
 8023952:	75fb      	strb	r3, [r7, #23]
 8023954:	7dfa      	ldrb	r2, [r7, #23]
 8023956:	79fb      	ldrb	r3, [r7, #7]
 8023958:	429a      	cmp	r2, r3
 802395a:	d3d3      	bcc.n	8023904 <IntToUnicode+0x18>
  }
}
 802395c:	bf00      	nop
 802395e:	bf00      	nop
 8023960:	371c      	adds	r7, #28
 8023962:	46bd      	mov	sp, r7
 8023964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023968:	4770      	bx	lr
	...

0802396c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802396c:	b580      	push	{r7, lr}
 802396e:	b0a0      	sub	sp, #128	; 0x80
 8023970:	af00      	add	r7, sp, #0
 8023972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023974:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8023978:	2200      	movs	r2, #0
 802397a:	601a      	str	r2, [r3, #0]
 802397c:	605a      	str	r2, [r3, #4]
 802397e:	609a      	str	r2, [r3, #8]
 8023980:	60da      	str	r2, [r3, #12]
 8023982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8023984:	f107 0310 	add.w	r3, r7, #16
 8023988:	225c      	movs	r2, #92	; 0x5c
 802398a:	2100      	movs	r1, #0
 802398c:	4618      	mov	r0, r3
 802398e:	f000 fbf3 	bl	8024178 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	681b      	ldr	r3, [r3, #0]
 8023996:	4a2b      	ldr	r2, [pc, #172]	; (8023a44 <HAL_PCD_MspInit+0xd8>)
 8023998:	4293      	cmp	r3, r2
 802399a:	d14e      	bne.n	8023a3a <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 802399c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80239a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 80239a2:	2304      	movs	r3, #4
 80239a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 80239a6:	2360      	movs	r3, #96	; 0x60
 80239a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80239aa:	2302      	movs	r3, #2
 80239ac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80239ae:	2304      	movs	r3, #4
 80239b0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80239b2:	2301      	movs	r3, #1
 80239b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80239b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80239ba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80239bc:	f107 0310 	add.w	r3, r7, #16
 80239c0:	4618      	mov	r0, r3
 80239c2:	f7f2 fd5f 	bl	8016484 <HAL_RCCEx_PeriphCLKConfig>
 80239c6:	4603      	mov	r3, r0
 80239c8:	2b00      	cmp	r3, #0
 80239ca:	d001      	beq.n	80239d0 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 80239cc:	f7ee f866 	bl	8011a9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80239d0:	2300      	movs	r3, #0
 80239d2:	60fb      	str	r3, [r7, #12]
 80239d4:	4b1c      	ldr	r3, [pc, #112]	; (8023a48 <HAL_PCD_MspInit+0xdc>)
 80239d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239d8:	4a1b      	ldr	r2, [pc, #108]	; (8023a48 <HAL_PCD_MspInit+0xdc>)
 80239da:	f043 0302 	orr.w	r3, r3, #2
 80239de:	6313      	str	r3, [r2, #48]	; 0x30
 80239e0:	4b19      	ldr	r3, [pc, #100]	; (8023a48 <HAL_PCD_MspInit+0xdc>)
 80239e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239e4:	f003 0302 	and.w	r3, r3, #2
 80239e8:	60fb      	str	r3, [r7, #12]
 80239ea:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80239ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80239f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80239f2:	2302      	movs	r3, #2
 80239f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80239f6:	2300      	movs	r3, #0
 80239f8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80239fa:	2303      	movs	r3, #3
 80239fc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80239fe:	230c      	movs	r3, #12
 8023a00:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023a02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8023a06:	4619      	mov	r1, r3
 8023a08:	4810      	ldr	r0, [pc, #64]	; (8023a4c <HAL_PCD_MspInit+0xe0>)
 8023a0a:	f7f0 f819 	bl	8013a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8023a0e:	2300      	movs	r3, #0
 8023a10:	60bb      	str	r3, [r7, #8]
 8023a12:	4b0d      	ldr	r3, [pc, #52]	; (8023a48 <HAL_PCD_MspInit+0xdc>)
 8023a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a16:	4a0c      	ldr	r2, [pc, #48]	; (8023a48 <HAL_PCD_MspInit+0xdc>)
 8023a18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8023a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8023a1e:	4b0a      	ldr	r3, [pc, #40]	; (8023a48 <HAL_PCD_MspInit+0xdc>)
 8023a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8023a26:	60bb      	str	r3, [r7, #8]
 8023a28:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8023a2a:	2200      	movs	r2, #0
 8023a2c:	2105      	movs	r1, #5
 8023a2e:	204d      	movs	r0, #77	; 0x4d
 8023a30:	f7ef f9dc 	bl	8012dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8023a34:	204d      	movs	r0, #77	; 0x4d
 8023a36:	f7ef f9f5 	bl	8012e24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8023a3a:	bf00      	nop
 8023a3c:	3780      	adds	r7, #128	; 0x80
 8023a3e:	46bd      	mov	sp, r7
 8023a40:	bd80      	pop	{r7, pc}
 8023a42:	bf00      	nop
 8023a44:	40040000 	.word	0x40040000
 8023a48:	40023800 	.word	0x40023800
 8023a4c:	40020400 	.word	0x40020400

08023a50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023a50:	b580      	push	{r7, lr}
 8023a52:	b082      	sub	sp, #8
 8023a54:	af00      	add	r7, sp, #0
 8023a56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8023a58:	687b      	ldr	r3, [r7, #4]
 8023a5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8023a64:	4619      	mov	r1, r3
 8023a66:	4610      	mov	r0, r2
 8023a68:	f7fd f9f4 	bl	8020e54 <USBD_LL_SetupStage>
}
 8023a6c:	bf00      	nop
 8023a6e:	3708      	adds	r7, #8
 8023a70:	46bd      	mov	sp, r7
 8023a72:	bd80      	pop	{r7, pc}

08023a74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023a74:	b580      	push	{r7, lr}
 8023a76:	b082      	sub	sp, #8
 8023a78:	af00      	add	r7, sp, #0
 8023a7a:	6078      	str	r0, [r7, #4]
 8023a7c:	460b      	mov	r3, r1
 8023a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8023a80:	687b      	ldr	r3, [r7, #4]
 8023a82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8023a86:	78fa      	ldrb	r2, [r7, #3]
 8023a88:	6879      	ldr	r1, [r7, #4]
 8023a8a:	4613      	mov	r3, r2
 8023a8c:	00db      	lsls	r3, r3, #3
 8023a8e:	1a9b      	subs	r3, r3, r2
 8023a90:	009b      	lsls	r3, r3, #2
 8023a92:	440b      	add	r3, r1
 8023a94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8023a98:	681a      	ldr	r2, [r3, #0]
 8023a9a:	78fb      	ldrb	r3, [r7, #3]
 8023a9c:	4619      	mov	r1, r3
 8023a9e:	f7fd fa2e 	bl	8020efe <USBD_LL_DataOutStage>
}
 8023aa2:	bf00      	nop
 8023aa4:	3708      	adds	r7, #8
 8023aa6:	46bd      	mov	sp, r7
 8023aa8:	bd80      	pop	{r7, pc}

08023aaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023aaa:	b580      	push	{r7, lr}
 8023aac:	b082      	sub	sp, #8
 8023aae:	af00      	add	r7, sp, #0
 8023ab0:	6078      	str	r0, [r7, #4]
 8023ab2:	460b      	mov	r3, r1
 8023ab4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8023ab6:	687b      	ldr	r3, [r7, #4]
 8023ab8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8023abc:	78fa      	ldrb	r2, [r7, #3]
 8023abe:	6879      	ldr	r1, [r7, #4]
 8023ac0:	4613      	mov	r3, r2
 8023ac2:	00db      	lsls	r3, r3, #3
 8023ac4:	1a9b      	subs	r3, r3, r2
 8023ac6:	009b      	lsls	r3, r3, #2
 8023ac8:	440b      	add	r3, r1
 8023aca:	3348      	adds	r3, #72	; 0x48
 8023acc:	681a      	ldr	r2, [r3, #0]
 8023ace:	78fb      	ldrb	r3, [r7, #3]
 8023ad0:	4619      	mov	r1, r3
 8023ad2:	f7fd fa77 	bl	8020fc4 <USBD_LL_DataInStage>
}
 8023ad6:	bf00      	nop
 8023ad8:	3708      	adds	r7, #8
 8023ada:	46bd      	mov	sp, r7
 8023adc:	bd80      	pop	{r7, pc}

08023ade <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023ade:	b580      	push	{r7, lr}
 8023ae0:	b082      	sub	sp, #8
 8023ae2:	af00      	add	r7, sp, #0
 8023ae4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8023ae6:	687b      	ldr	r3, [r7, #4]
 8023ae8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023aec:	4618      	mov	r0, r3
 8023aee:	f7fd fb8b 	bl	8021208 <USBD_LL_SOF>
}
 8023af2:	bf00      	nop
 8023af4:	3708      	adds	r7, #8
 8023af6:	46bd      	mov	sp, r7
 8023af8:	bd80      	pop	{r7, pc}

08023afa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023afa:	b580      	push	{r7, lr}
 8023afc:	b084      	sub	sp, #16
 8023afe:	af00      	add	r7, sp, #0
 8023b00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8023b02:	2301      	movs	r3, #1
 8023b04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8023b06:	687b      	ldr	r3, [r7, #4]
 8023b08:	68db      	ldr	r3, [r3, #12]
 8023b0a:	2b00      	cmp	r3, #0
 8023b0c:	d102      	bne.n	8023b14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8023b0e:	2300      	movs	r3, #0
 8023b10:	73fb      	strb	r3, [r7, #15]
 8023b12:	e008      	b.n	8023b26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8023b14:	687b      	ldr	r3, [r7, #4]
 8023b16:	68db      	ldr	r3, [r3, #12]
 8023b18:	2b02      	cmp	r3, #2
 8023b1a:	d102      	bne.n	8023b22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8023b1c:	2301      	movs	r3, #1
 8023b1e:	73fb      	strb	r3, [r7, #15]
 8023b20:	e001      	b.n	8023b26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8023b22:	f7ed ffbb 	bl	8011a9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023b2c:	7bfa      	ldrb	r2, [r7, #15]
 8023b2e:	4611      	mov	r1, r2
 8023b30:	4618      	mov	r0, r3
 8023b32:	f7fd fb2b 	bl	802118c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023b36:	687b      	ldr	r3, [r7, #4]
 8023b38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023b3c:	4618      	mov	r0, r3
 8023b3e:	f7fd fad7 	bl	80210f0 <USBD_LL_Reset>
}
 8023b42:	bf00      	nop
 8023b44:	3710      	adds	r7, #16
 8023b46:	46bd      	mov	sp, r7
 8023b48:	bd80      	pop	{r7, pc}
	...

08023b4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023b4c:	b580      	push	{r7, lr}
 8023b4e:	b082      	sub	sp, #8
 8023b50:	af00      	add	r7, sp, #0
 8023b52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8023b54:	687b      	ldr	r3, [r7, #4]
 8023b56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023b5a:	4618      	mov	r0, r3
 8023b5c:	f7fd fb26 	bl	80211ac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023b60:	687b      	ldr	r3, [r7, #4]
 8023b62:	681b      	ldr	r3, [r3, #0]
 8023b64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8023b68:	681b      	ldr	r3, [r3, #0]
 8023b6a:	687a      	ldr	r2, [r7, #4]
 8023b6c:	6812      	ldr	r2, [r2, #0]
 8023b6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8023b72:	f043 0301 	orr.w	r3, r3, #1
 8023b76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8023b78:	687b      	ldr	r3, [r7, #4]
 8023b7a:	6a1b      	ldr	r3, [r3, #32]
 8023b7c:	2b00      	cmp	r3, #0
 8023b7e:	d005      	beq.n	8023b8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023b80:	4b04      	ldr	r3, [pc, #16]	; (8023b94 <HAL_PCD_SuspendCallback+0x48>)
 8023b82:	691b      	ldr	r3, [r3, #16]
 8023b84:	4a03      	ldr	r2, [pc, #12]	; (8023b94 <HAL_PCD_SuspendCallback+0x48>)
 8023b86:	f043 0306 	orr.w	r3, r3, #6
 8023b8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8023b8c:	bf00      	nop
 8023b8e:	3708      	adds	r7, #8
 8023b90:	46bd      	mov	sp, r7
 8023b92:	bd80      	pop	{r7, pc}
 8023b94:	e000ed00 	.word	0xe000ed00

08023b98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023b98:	b580      	push	{r7, lr}
 8023b9a:	b082      	sub	sp, #8
 8023b9c:	af00      	add	r7, sp, #0
 8023b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8023ba0:	687b      	ldr	r3, [r7, #4]
 8023ba2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023ba6:	4618      	mov	r0, r3
 8023ba8:	f7fd fb16 	bl	80211d8 <USBD_LL_Resume>
}
 8023bac:	bf00      	nop
 8023bae:	3708      	adds	r7, #8
 8023bb0:	46bd      	mov	sp, r7
 8023bb2:	bd80      	pop	{r7, pc}

08023bb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023bb4:	b580      	push	{r7, lr}
 8023bb6:	b082      	sub	sp, #8
 8023bb8:	af00      	add	r7, sp, #0
 8023bba:	6078      	str	r0, [r7, #4]
 8023bbc:	460b      	mov	r3, r1
 8023bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8023bc0:	687b      	ldr	r3, [r7, #4]
 8023bc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023bc6:	78fa      	ldrb	r2, [r7, #3]
 8023bc8:	4611      	mov	r1, r2
 8023bca:	4618      	mov	r0, r3
 8023bcc:	f7fd fb64 	bl	8021298 <USBD_LL_IsoOUTIncomplete>
}
 8023bd0:	bf00      	nop
 8023bd2:	3708      	adds	r7, #8
 8023bd4:	46bd      	mov	sp, r7
 8023bd6:	bd80      	pop	{r7, pc}

08023bd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023bd8:	b580      	push	{r7, lr}
 8023bda:	b082      	sub	sp, #8
 8023bdc:	af00      	add	r7, sp, #0
 8023bde:	6078      	str	r0, [r7, #4]
 8023be0:	460b      	mov	r3, r1
 8023be2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8023be4:	687b      	ldr	r3, [r7, #4]
 8023be6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023bea:	78fa      	ldrb	r2, [r7, #3]
 8023bec:	4611      	mov	r1, r2
 8023bee:	4618      	mov	r0, r3
 8023bf0:	f7fd fb2c 	bl	802124c <USBD_LL_IsoINIncomplete>
}
 8023bf4:	bf00      	nop
 8023bf6:	3708      	adds	r7, #8
 8023bf8:	46bd      	mov	sp, r7
 8023bfa:	bd80      	pop	{r7, pc}

08023bfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023bfc:	b580      	push	{r7, lr}
 8023bfe:	b082      	sub	sp, #8
 8023c00:	af00      	add	r7, sp, #0
 8023c02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8023c04:	687b      	ldr	r3, [r7, #4]
 8023c06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023c0a:	4618      	mov	r0, r3
 8023c0c:	f7fd fb6a 	bl	80212e4 <USBD_LL_DevConnected>
}
 8023c10:	bf00      	nop
 8023c12:	3708      	adds	r7, #8
 8023c14:	46bd      	mov	sp, r7
 8023c16:	bd80      	pop	{r7, pc}

08023c18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023c18:	b580      	push	{r7, lr}
 8023c1a:	b082      	sub	sp, #8
 8023c1c:	af00      	add	r7, sp, #0
 8023c1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023c26:	4618      	mov	r0, r3
 8023c28:	f7fd fb67 	bl	80212fa <USBD_LL_DevDisconnected>
}
 8023c2c:	bf00      	nop
 8023c2e:	3708      	adds	r7, #8
 8023c30:	46bd      	mov	sp, r7
 8023c32:	bd80      	pop	{r7, pc}

08023c34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8023c34:	b580      	push	{r7, lr}
 8023c36:	b082      	sub	sp, #8
 8023c38:	af00      	add	r7, sp, #0
 8023c3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	781b      	ldrb	r3, [r3, #0]
 8023c40:	2b01      	cmp	r3, #1
 8023c42:	d140      	bne.n	8023cc6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8023c44:	4a22      	ldr	r2, [pc, #136]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	4a20      	ldr	r2, [pc, #128]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8023c54:	4b1e      	ldr	r3, [pc, #120]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c56:	4a1f      	ldr	r2, [pc, #124]	; (8023cd4 <USBD_LL_Init+0xa0>)
 8023c58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8023c5a:	4b1d      	ldr	r3, [pc, #116]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c5c:	2208      	movs	r2, #8
 8023c5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8023c60:	4b1b      	ldr	r3, [pc, #108]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c62:	2202      	movs	r2, #2
 8023c64:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8023c66:	4b1a      	ldr	r3, [pc, #104]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c68:	2200      	movs	r2, #0
 8023c6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8023c6c:	4b18      	ldr	r3, [pc, #96]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c6e:	2202      	movs	r2, #2
 8023c70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8023c72:	4b17      	ldr	r3, [pc, #92]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c74:	2200      	movs	r2, #0
 8023c76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8023c78:	4b15      	ldr	r3, [pc, #84]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c7a:	2200      	movs	r2, #0
 8023c7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8023c7e:	4b14      	ldr	r3, [pc, #80]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c80:	2200      	movs	r2, #0
 8023c82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8023c84:	4b12      	ldr	r3, [pc, #72]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c86:	2200      	movs	r2, #0
 8023c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8023c8a:	4b11      	ldr	r3, [pc, #68]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c8c:	2200      	movs	r2, #0
 8023c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8023c90:	4b0f      	ldr	r3, [pc, #60]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c92:	2200      	movs	r2, #0
 8023c94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8023c96:	480e      	ldr	r0, [pc, #56]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023c98:	f7f1 f889 	bl	8014dae <HAL_PCD_Init>
 8023c9c:	4603      	mov	r3, r0
 8023c9e:	2b00      	cmp	r3, #0
 8023ca0:	d001      	beq.n	8023ca6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8023ca2:	f7ed fefb 	bl	8011a9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8023ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8023caa:	4809      	ldr	r0, [pc, #36]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023cac:	f7f2 fa19 	bl	80160e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8023cb0:	2280      	movs	r2, #128	; 0x80
 8023cb2:	2100      	movs	r1, #0
 8023cb4:	4806      	ldr	r0, [pc, #24]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023cb6:	f7f2 f9cd 	bl	8016054 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8023cba:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8023cbe:	2101      	movs	r1, #1
 8023cc0:	4803      	ldr	r0, [pc, #12]	; (8023cd0 <USBD_LL_Init+0x9c>)
 8023cc2:	f7f2 f9c7 	bl	8016054 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8023cc6:	2300      	movs	r3, #0
}
 8023cc8:	4618      	mov	r0, r3
 8023cca:	3708      	adds	r7, #8
 8023ccc:	46bd      	mov	sp, r7
 8023cce:	bd80      	pop	{r7, pc}
 8023cd0:	200068f4 	.word	0x200068f4
 8023cd4:	40040000 	.word	0x40040000

08023cd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8023cd8:	b580      	push	{r7, lr}
 8023cda:	b084      	sub	sp, #16
 8023cdc:	af00      	add	r7, sp, #0
 8023cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023ce0:	2300      	movs	r3, #0
 8023ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023ce4:	2300      	movs	r3, #0
 8023ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023cee:	4618      	mov	r0, r3
 8023cf0:	f7f1 f981 	bl	8014ff6 <HAL_PCD_Start>
 8023cf4:	4603      	mov	r3, r0
 8023cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023cf8:	7bfb      	ldrb	r3, [r7, #15]
 8023cfa:	4618      	mov	r0, r3
 8023cfc:	f000 f990 	bl	8024020 <USBD_Get_USB_Status>
 8023d00:	4603      	mov	r3, r0
 8023d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8023d06:	4618      	mov	r0, r3
 8023d08:	3710      	adds	r7, #16
 8023d0a:	46bd      	mov	sp, r7
 8023d0c:	bd80      	pop	{r7, pc}

08023d0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8023d0e:	b580      	push	{r7, lr}
 8023d10:	b084      	sub	sp, #16
 8023d12:	af00      	add	r7, sp, #0
 8023d14:	6078      	str	r0, [r7, #4]
 8023d16:	4608      	mov	r0, r1
 8023d18:	4611      	mov	r1, r2
 8023d1a:	461a      	mov	r2, r3
 8023d1c:	4603      	mov	r3, r0
 8023d1e:	70fb      	strb	r3, [r7, #3]
 8023d20:	460b      	mov	r3, r1
 8023d22:	70bb      	strb	r3, [r7, #2]
 8023d24:	4613      	mov	r3, r2
 8023d26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023d28:	2300      	movs	r3, #0
 8023d2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023d2c:	2300      	movs	r3, #0
 8023d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023d30:	687b      	ldr	r3, [r7, #4]
 8023d32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8023d36:	78bb      	ldrb	r3, [r7, #2]
 8023d38:	883a      	ldrh	r2, [r7, #0]
 8023d3a:	78f9      	ldrb	r1, [r7, #3]
 8023d3c:	f7f1 fd92 	bl	8015864 <HAL_PCD_EP_Open>
 8023d40:	4603      	mov	r3, r0
 8023d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023d44:	7bfb      	ldrb	r3, [r7, #15]
 8023d46:	4618      	mov	r0, r3
 8023d48:	f000 f96a 	bl	8024020 <USBD_Get_USB_Status>
 8023d4c:	4603      	mov	r3, r0
 8023d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8023d52:	4618      	mov	r0, r3
 8023d54:	3710      	adds	r7, #16
 8023d56:	46bd      	mov	sp, r7
 8023d58:	bd80      	pop	{r7, pc}

08023d5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023d5a:	b580      	push	{r7, lr}
 8023d5c:	b084      	sub	sp, #16
 8023d5e:	af00      	add	r7, sp, #0
 8023d60:	6078      	str	r0, [r7, #4]
 8023d62:	460b      	mov	r3, r1
 8023d64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023d66:	2300      	movs	r3, #0
 8023d68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023d6a:	2300      	movs	r3, #0
 8023d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023d6e:	687b      	ldr	r3, [r7, #4]
 8023d70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023d74:	78fa      	ldrb	r2, [r7, #3]
 8023d76:	4611      	mov	r1, r2
 8023d78:	4618      	mov	r0, r3
 8023d7a:	f7f1 fddb 	bl	8015934 <HAL_PCD_EP_Close>
 8023d7e:	4603      	mov	r3, r0
 8023d80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023d82:	7bfb      	ldrb	r3, [r7, #15]
 8023d84:	4618      	mov	r0, r3
 8023d86:	f000 f94b 	bl	8024020 <USBD_Get_USB_Status>
 8023d8a:	4603      	mov	r3, r0
 8023d8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023d8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8023d90:	4618      	mov	r0, r3
 8023d92:	3710      	adds	r7, #16
 8023d94:	46bd      	mov	sp, r7
 8023d96:	bd80      	pop	{r7, pc}

08023d98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023d98:	b580      	push	{r7, lr}
 8023d9a:	b084      	sub	sp, #16
 8023d9c:	af00      	add	r7, sp, #0
 8023d9e:	6078      	str	r0, [r7, #4]
 8023da0:	460b      	mov	r3, r1
 8023da2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023da4:	2300      	movs	r3, #0
 8023da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023da8:	2300      	movs	r3, #0
 8023daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023dac:	687b      	ldr	r3, [r7, #4]
 8023dae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023db2:	78fa      	ldrb	r2, [r7, #3]
 8023db4:	4611      	mov	r1, r2
 8023db6:	4618      	mov	r0, r3
 8023db8:	f7f1 feb3 	bl	8015b22 <HAL_PCD_EP_SetStall>
 8023dbc:	4603      	mov	r3, r0
 8023dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023dc0:	7bfb      	ldrb	r3, [r7, #15]
 8023dc2:	4618      	mov	r0, r3
 8023dc4:	f000 f92c 	bl	8024020 <USBD_Get_USB_Status>
 8023dc8:	4603      	mov	r3, r0
 8023dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8023dce:	4618      	mov	r0, r3
 8023dd0:	3710      	adds	r7, #16
 8023dd2:	46bd      	mov	sp, r7
 8023dd4:	bd80      	pop	{r7, pc}

08023dd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023dd6:	b580      	push	{r7, lr}
 8023dd8:	b084      	sub	sp, #16
 8023dda:	af00      	add	r7, sp, #0
 8023ddc:	6078      	str	r0, [r7, #4]
 8023dde:	460b      	mov	r3, r1
 8023de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023de2:	2300      	movs	r3, #0
 8023de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023de6:	2300      	movs	r3, #0
 8023de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023df0:	78fa      	ldrb	r2, [r7, #3]
 8023df2:	4611      	mov	r1, r2
 8023df4:	4618      	mov	r0, r3
 8023df6:	f7f1 fef8 	bl	8015bea <HAL_PCD_EP_ClrStall>
 8023dfa:	4603      	mov	r3, r0
 8023dfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023dfe:	7bfb      	ldrb	r3, [r7, #15]
 8023e00:	4618      	mov	r0, r3
 8023e02:	f000 f90d 	bl	8024020 <USBD_Get_USB_Status>
 8023e06:	4603      	mov	r3, r0
 8023e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8023e0c:	4618      	mov	r0, r3
 8023e0e:	3710      	adds	r7, #16
 8023e10:	46bd      	mov	sp, r7
 8023e12:	bd80      	pop	{r7, pc}

08023e14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023e14:	b480      	push	{r7}
 8023e16:	b085      	sub	sp, #20
 8023e18:	af00      	add	r7, sp, #0
 8023e1a:	6078      	str	r0, [r7, #4]
 8023e1c:	460b      	mov	r3, r1
 8023e1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023e20:	687b      	ldr	r3, [r7, #4]
 8023e22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023e26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8023e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	da0b      	bge.n	8023e48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023e30:	78fb      	ldrb	r3, [r7, #3]
 8023e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8023e36:	68f9      	ldr	r1, [r7, #12]
 8023e38:	4613      	mov	r3, r2
 8023e3a:	00db      	lsls	r3, r3, #3
 8023e3c:	1a9b      	subs	r3, r3, r2
 8023e3e:	009b      	lsls	r3, r3, #2
 8023e40:	440b      	add	r3, r1
 8023e42:	333e      	adds	r3, #62	; 0x3e
 8023e44:	781b      	ldrb	r3, [r3, #0]
 8023e46:	e00b      	b.n	8023e60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023e48:	78fb      	ldrb	r3, [r7, #3]
 8023e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8023e4e:	68f9      	ldr	r1, [r7, #12]
 8023e50:	4613      	mov	r3, r2
 8023e52:	00db      	lsls	r3, r3, #3
 8023e54:	1a9b      	subs	r3, r3, r2
 8023e56:	009b      	lsls	r3, r3, #2
 8023e58:	440b      	add	r3, r1
 8023e5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8023e5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8023e60:	4618      	mov	r0, r3
 8023e62:	3714      	adds	r7, #20
 8023e64:	46bd      	mov	sp, r7
 8023e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e6a:	4770      	bx	lr

08023e6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8023e6c:	b580      	push	{r7, lr}
 8023e6e:	b084      	sub	sp, #16
 8023e70:	af00      	add	r7, sp, #0
 8023e72:	6078      	str	r0, [r7, #4]
 8023e74:	460b      	mov	r3, r1
 8023e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023e78:	2300      	movs	r3, #0
 8023e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023e7c:	2300      	movs	r3, #0
 8023e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023e80:	687b      	ldr	r3, [r7, #4]
 8023e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023e86:	78fa      	ldrb	r2, [r7, #3]
 8023e88:	4611      	mov	r1, r2
 8023e8a:	4618      	mov	r0, r3
 8023e8c:	f7f1 fcc5 	bl	801581a <HAL_PCD_SetAddress>
 8023e90:	4603      	mov	r3, r0
 8023e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023e94:	7bfb      	ldrb	r3, [r7, #15]
 8023e96:	4618      	mov	r0, r3
 8023e98:	f000 f8c2 	bl	8024020 <USBD_Get_USB_Status>
 8023e9c:	4603      	mov	r3, r0
 8023e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8023ea2:	4618      	mov	r0, r3
 8023ea4:	3710      	adds	r7, #16
 8023ea6:	46bd      	mov	sp, r7
 8023ea8:	bd80      	pop	{r7, pc}

08023eaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8023eaa:	b580      	push	{r7, lr}
 8023eac:	b086      	sub	sp, #24
 8023eae:	af00      	add	r7, sp, #0
 8023eb0:	60f8      	str	r0, [r7, #12]
 8023eb2:	607a      	str	r2, [r7, #4]
 8023eb4:	603b      	str	r3, [r7, #0]
 8023eb6:	460b      	mov	r3, r1
 8023eb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023eba:	2300      	movs	r3, #0
 8023ebc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023ebe:	2300      	movs	r3, #0
 8023ec0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023ec2:	68fb      	ldr	r3, [r7, #12]
 8023ec4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8023ec8:	7af9      	ldrb	r1, [r7, #11]
 8023eca:	683b      	ldr	r3, [r7, #0]
 8023ecc:	687a      	ldr	r2, [r7, #4]
 8023ece:	f7f1 fdde 	bl	8015a8e <HAL_PCD_EP_Transmit>
 8023ed2:	4603      	mov	r3, r0
 8023ed4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023ed6:	7dfb      	ldrb	r3, [r7, #23]
 8023ed8:	4618      	mov	r0, r3
 8023eda:	f000 f8a1 	bl	8024020 <USBD_Get_USB_Status>
 8023ede:	4603      	mov	r3, r0
 8023ee0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8023ee2:	7dbb      	ldrb	r3, [r7, #22]
}
 8023ee4:	4618      	mov	r0, r3
 8023ee6:	3718      	adds	r7, #24
 8023ee8:	46bd      	mov	sp, r7
 8023eea:	bd80      	pop	{r7, pc}

08023eec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8023eec:	b580      	push	{r7, lr}
 8023eee:	b086      	sub	sp, #24
 8023ef0:	af00      	add	r7, sp, #0
 8023ef2:	60f8      	str	r0, [r7, #12]
 8023ef4:	607a      	str	r2, [r7, #4]
 8023ef6:	603b      	str	r3, [r7, #0]
 8023ef8:	460b      	mov	r3, r1
 8023efa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023efc:	2300      	movs	r3, #0
 8023efe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023f00:	2300      	movs	r3, #0
 8023f02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023f04:	68fb      	ldr	r3, [r7, #12]
 8023f06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8023f0a:	7af9      	ldrb	r1, [r7, #11]
 8023f0c:	683b      	ldr	r3, [r7, #0]
 8023f0e:	687a      	ldr	r2, [r7, #4]
 8023f10:	f7f1 fd5a 	bl	80159c8 <HAL_PCD_EP_Receive>
 8023f14:	4603      	mov	r3, r0
 8023f16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023f18:	7dfb      	ldrb	r3, [r7, #23]
 8023f1a:	4618      	mov	r0, r3
 8023f1c:	f000 f880 	bl	8024020 <USBD_Get_USB_Status>
 8023f20:	4603      	mov	r3, r0
 8023f22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8023f24:	7dbb      	ldrb	r3, [r7, #22]
}
 8023f26:	4618      	mov	r0, r3
 8023f28:	3718      	adds	r7, #24
 8023f2a:	46bd      	mov	sp, r7
 8023f2c:	bd80      	pop	{r7, pc}

08023f2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023f2e:	b580      	push	{r7, lr}
 8023f30:	b082      	sub	sp, #8
 8023f32:	af00      	add	r7, sp, #0
 8023f34:	6078      	str	r0, [r7, #4]
 8023f36:	460b      	mov	r3, r1
 8023f38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023f40:	78fa      	ldrb	r2, [r7, #3]
 8023f42:	4611      	mov	r1, r2
 8023f44:	4618      	mov	r0, r3
 8023f46:	f7f1 fd8a 	bl	8015a5e <HAL_PCD_EP_GetRxCount>
 8023f4a:	4603      	mov	r3, r0
}
 8023f4c:	4618      	mov	r0, r3
 8023f4e:	3708      	adds	r7, #8
 8023f50:	46bd      	mov	sp, r7
 8023f52:	bd80      	pop	{r7, pc}

08023f54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8023f54:	b580      	push	{r7, lr}
 8023f56:	b082      	sub	sp, #8
 8023f58:	af00      	add	r7, sp, #0
 8023f5a:	6078      	str	r0, [r7, #4]
 8023f5c:	460b      	mov	r3, r1
 8023f5e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8023f60:	78fb      	ldrb	r3, [r7, #3]
 8023f62:	2b00      	cmp	r3, #0
 8023f64:	d002      	beq.n	8023f6c <HAL_PCDEx_LPM_Callback+0x18>
 8023f66:	2b01      	cmp	r3, #1
 8023f68:	d01f      	beq.n	8023faa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8023f6a:	e03b      	b.n	8023fe4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8023f6c:	687b      	ldr	r3, [r7, #4]
 8023f6e:	6a1b      	ldr	r3, [r3, #32]
 8023f70:	2b00      	cmp	r3, #0
 8023f72:	d007      	beq.n	8023f84 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8023f74:	f7ec fff2 	bl	8010f5c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023f78:	4b1c      	ldr	r3, [pc, #112]	; (8023fec <HAL_PCDEx_LPM_Callback+0x98>)
 8023f7a:	691b      	ldr	r3, [r3, #16]
 8023f7c:	4a1b      	ldr	r2, [pc, #108]	; (8023fec <HAL_PCDEx_LPM_Callback+0x98>)
 8023f7e:	f023 0306 	bic.w	r3, r3, #6
 8023f82:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023f84:	687b      	ldr	r3, [r7, #4]
 8023f86:	681b      	ldr	r3, [r3, #0]
 8023f88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8023f8c:	681b      	ldr	r3, [r3, #0]
 8023f8e:	687a      	ldr	r2, [r7, #4]
 8023f90:	6812      	ldr	r2, [r2, #0]
 8023f92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8023f96:	f023 0301 	bic.w	r3, r3, #1
 8023f9a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8023f9c:	687b      	ldr	r3, [r7, #4]
 8023f9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023fa2:	4618      	mov	r0, r3
 8023fa4:	f7fd f918 	bl	80211d8 <USBD_LL_Resume>
    break;
 8023fa8:	e01c      	b.n	8023fe4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023faa:	687b      	ldr	r3, [r7, #4]
 8023fac:	681b      	ldr	r3, [r3, #0]
 8023fae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8023fb2:	681b      	ldr	r3, [r3, #0]
 8023fb4:	687a      	ldr	r2, [r7, #4]
 8023fb6:	6812      	ldr	r2, [r2, #0]
 8023fb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8023fbc:	f043 0301 	orr.w	r3, r3, #1
 8023fc0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8023fc2:	687b      	ldr	r3, [r7, #4]
 8023fc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8023fc8:	4618      	mov	r0, r3
 8023fca:	f7fd f8ef 	bl	80211ac <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8023fce:	687b      	ldr	r3, [r7, #4]
 8023fd0:	6a1b      	ldr	r3, [r3, #32]
 8023fd2:	2b00      	cmp	r3, #0
 8023fd4:	d005      	beq.n	8023fe2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023fd6:	4b05      	ldr	r3, [pc, #20]	; (8023fec <HAL_PCDEx_LPM_Callback+0x98>)
 8023fd8:	691b      	ldr	r3, [r3, #16]
 8023fda:	4a04      	ldr	r2, [pc, #16]	; (8023fec <HAL_PCDEx_LPM_Callback+0x98>)
 8023fdc:	f043 0306 	orr.w	r3, r3, #6
 8023fe0:	6113      	str	r3, [r2, #16]
    break;
 8023fe2:	bf00      	nop
}
 8023fe4:	bf00      	nop
 8023fe6:	3708      	adds	r7, #8
 8023fe8:	46bd      	mov	sp, r7
 8023fea:	bd80      	pop	{r7, pc}
 8023fec:	e000ed00 	.word	0xe000ed00

08023ff0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8023ff0:	b480      	push	{r7}
 8023ff2:	b083      	sub	sp, #12
 8023ff4:	af00      	add	r7, sp, #0
 8023ff6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8023ff8:	4b03      	ldr	r3, [pc, #12]	; (8024008 <USBD_static_malloc+0x18>)
}
 8023ffa:	4618      	mov	r0, r3
 8023ffc:	370c      	adds	r7, #12
 8023ffe:	46bd      	mov	sp, r7
 8024000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024004:	4770      	bx	lr
 8024006:	bf00      	nop
 8024008:	200046a4 	.word	0x200046a4

0802400c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 802400c:	b480      	push	{r7}
 802400e:	b083      	sub	sp, #12
 8024010:	af00      	add	r7, sp, #0
 8024012:	6078      	str	r0, [r7, #4]

}
 8024014:	bf00      	nop
 8024016:	370c      	adds	r7, #12
 8024018:	46bd      	mov	sp, r7
 802401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802401e:	4770      	bx	lr

08024020 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8024020:	b480      	push	{r7}
 8024022:	b085      	sub	sp, #20
 8024024:	af00      	add	r7, sp, #0
 8024026:	4603      	mov	r3, r0
 8024028:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802402a:	2300      	movs	r3, #0
 802402c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802402e:	79fb      	ldrb	r3, [r7, #7]
 8024030:	2b03      	cmp	r3, #3
 8024032:	d817      	bhi.n	8024064 <USBD_Get_USB_Status+0x44>
 8024034:	a201      	add	r2, pc, #4	; (adr r2, 802403c <USBD_Get_USB_Status+0x1c>)
 8024036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802403a:	bf00      	nop
 802403c:	0802404d 	.word	0x0802404d
 8024040:	08024053 	.word	0x08024053
 8024044:	08024059 	.word	0x08024059
 8024048:	0802405f 	.word	0x0802405f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 802404c:	2300      	movs	r3, #0
 802404e:	73fb      	strb	r3, [r7, #15]
    break;
 8024050:	e00b      	b.n	802406a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8024052:	2303      	movs	r3, #3
 8024054:	73fb      	strb	r3, [r7, #15]
    break;
 8024056:	e008      	b.n	802406a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8024058:	2301      	movs	r3, #1
 802405a:	73fb      	strb	r3, [r7, #15]
    break;
 802405c:	e005      	b.n	802406a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802405e:	2303      	movs	r3, #3
 8024060:	73fb      	strb	r3, [r7, #15]
    break;
 8024062:	e002      	b.n	802406a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8024064:	2303      	movs	r3, #3
 8024066:	73fb      	strb	r3, [r7, #15]
    break;
 8024068:	bf00      	nop
  }
  return usb_status;
 802406a:	7bfb      	ldrb	r3, [r7, #15]
}
 802406c:	4618      	mov	r0, r3
 802406e:	3714      	adds	r7, #20
 8024070:	46bd      	mov	sp, r7
 8024072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024076:	4770      	bx	lr

08024078 <sqrtf>:
 8024078:	b508      	push	{r3, lr}
 802407a:	ed2d 8b02 	vpush	{d8}
 802407e:	eeb0 8a40 	vmov.f32	s16, s0
 8024082:	f000 f81f 	bl	80240c4 <__ieee754_sqrtf>
 8024086:	4b0d      	ldr	r3, [pc, #52]	; (80240bc <sqrtf+0x44>)
 8024088:	f993 3000 	ldrsb.w	r3, [r3]
 802408c:	3301      	adds	r3, #1
 802408e:	d011      	beq.n	80240b4 <sqrtf+0x3c>
 8024090:	eeb4 8a48 	vcmp.f32	s16, s16
 8024094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024098:	d60c      	bvs.n	80240b4 <sqrtf+0x3c>
 802409a:	eddf 8a09 	vldr	s17, [pc, #36]	; 80240c0 <sqrtf+0x48>
 802409e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80240a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240a6:	d505      	bpl.n	80240b4 <sqrtf+0x3c>
 80240a8:	f000 f810 	bl	80240cc <__errno>
 80240ac:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80240b0:	2321      	movs	r3, #33	; 0x21
 80240b2:	6003      	str	r3, [r0, #0]
 80240b4:	ecbd 8b02 	vpop	{d8}
 80240b8:	bd08      	pop	{r3, pc}
 80240ba:	bf00      	nop
 80240bc:	20000456 	.word	0x20000456
 80240c0:	00000000 	.word	0x00000000

080240c4 <__ieee754_sqrtf>:
 80240c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80240c8:	4770      	bx	lr
	...

080240cc <__errno>:
 80240cc:	4b01      	ldr	r3, [pc, #4]	; (80240d4 <__errno+0x8>)
 80240ce:	6818      	ldr	r0, [r3, #0]
 80240d0:	4770      	bx	lr
 80240d2:	bf00      	nop
 80240d4:	20000458 	.word	0x20000458

080240d8 <__libc_init_array>:
 80240d8:	b570      	push	{r4, r5, r6, lr}
 80240da:	4d0d      	ldr	r5, [pc, #52]	; (8024110 <__libc_init_array+0x38>)
 80240dc:	4c0d      	ldr	r4, [pc, #52]	; (8024114 <__libc_init_array+0x3c>)
 80240de:	1b64      	subs	r4, r4, r5
 80240e0:	10a4      	asrs	r4, r4, #2
 80240e2:	2600      	movs	r6, #0
 80240e4:	42a6      	cmp	r6, r4
 80240e6:	d109      	bne.n	80240fc <__libc_init_array+0x24>
 80240e8:	4d0b      	ldr	r5, [pc, #44]	; (8024118 <__libc_init_array+0x40>)
 80240ea:	4c0c      	ldr	r4, [pc, #48]	; (802411c <__libc_init_array+0x44>)
 80240ec:	f002 fec8 	bl	8026e80 <_init>
 80240f0:	1b64      	subs	r4, r4, r5
 80240f2:	10a4      	asrs	r4, r4, #2
 80240f4:	2600      	movs	r6, #0
 80240f6:	42a6      	cmp	r6, r4
 80240f8:	d105      	bne.n	8024106 <__libc_init_array+0x2e>
 80240fa:	bd70      	pop	{r4, r5, r6, pc}
 80240fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8024100:	4798      	blx	r3
 8024102:	3601      	adds	r6, #1
 8024104:	e7ee      	b.n	80240e4 <__libc_init_array+0xc>
 8024106:	f855 3b04 	ldr.w	r3, [r5], #4
 802410a:	4798      	blx	r3
 802410c:	3601      	adds	r6, #1
 802410e:	e7f2      	b.n	80240f6 <__libc_init_array+0x1e>
 8024110:	080001cc 	.word	0x080001cc
 8024114:	080001cc 	.word	0x080001cc
 8024118:	080001cc 	.word	0x080001cc
 802411c:	080001d0 	.word	0x080001d0

08024120 <malloc>:
 8024120:	4b02      	ldr	r3, [pc, #8]	; (802412c <malloc+0xc>)
 8024122:	4601      	mov	r1, r0
 8024124:	6818      	ldr	r0, [r3, #0]
 8024126:	f000 b87f 	b.w	8024228 <_malloc_r>
 802412a:	bf00      	nop
 802412c:	20000458 	.word	0x20000458

08024130 <free>:
 8024130:	4b02      	ldr	r3, [pc, #8]	; (802413c <free+0xc>)
 8024132:	4601      	mov	r1, r0
 8024134:	6818      	ldr	r0, [r3, #0]
 8024136:	f000 b827 	b.w	8024188 <_free_r>
 802413a:	bf00      	nop
 802413c:	20000458 	.word	0x20000458

08024140 <memcmp>:
 8024140:	b530      	push	{r4, r5, lr}
 8024142:	3901      	subs	r1, #1
 8024144:	2400      	movs	r4, #0
 8024146:	42a2      	cmp	r2, r4
 8024148:	d101      	bne.n	802414e <memcmp+0xe>
 802414a:	2000      	movs	r0, #0
 802414c:	e005      	b.n	802415a <memcmp+0x1a>
 802414e:	5d03      	ldrb	r3, [r0, r4]
 8024150:	3401      	adds	r4, #1
 8024152:	5d0d      	ldrb	r5, [r1, r4]
 8024154:	42ab      	cmp	r3, r5
 8024156:	d0f6      	beq.n	8024146 <memcmp+0x6>
 8024158:	1b58      	subs	r0, r3, r5
 802415a:	bd30      	pop	{r4, r5, pc}

0802415c <memcpy>:
 802415c:	440a      	add	r2, r1
 802415e:	4291      	cmp	r1, r2
 8024160:	f100 33ff 	add.w	r3, r0, #4294967295
 8024164:	d100      	bne.n	8024168 <memcpy+0xc>
 8024166:	4770      	bx	lr
 8024168:	b510      	push	{r4, lr}
 802416a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802416e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024172:	4291      	cmp	r1, r2
 8024174:	d1f9      	bne.n	802416a <memcpy+0xe>
 8024176:	bd10      	pop	{r4, pc}

08024178 <memset>:
 8024178:	4402      	add	r2, r0
 802417a:	4603      	mov	r3, r0
 802417c:	4293      	cmp	r3, r2
 802417e:	d100      	bne.n	8024182 <memset+0xa>
 8024180:	4770      	bx	lr
 8024182:	f803 1b01 	strb.w	r1, [r3], #1
 8024186:	e7f9      	b.n	802417c <memset+0x4>

08024188 <_free_r>:
 8024188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802418a:	2900      	cmp	r1, #0
 802418c:	d048      	beq.n	8024220 <_free_r+0x98>
 802418e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024192:	9001      	str	r0, [sp, #4]
 8024194:	2b00      	cmp	r3, #0
 8024196:	f1a1 0404 	sub.w	r4, r1, #4
 802419a:	bfb8      	it	lt
 802419c:	18e4      	addlt	r4, r4, r3
 802419e:	f001 fbb3 	bl	8025908 <__malloc_lock>
 80241a2:	4a20      	ldr	r2, [pc, #128]	; (8024224 <_free_r+0x9c>)
 80241a4:	9801      	ldr	r0, [sp, #4]
 80241a6:	6813      	ldr	r3, [r2, #0]
 80241a8:	4615      	mov	r5, r2
 80241aa:	b933      	cbnz	r3, 80241ba <_free_r+0x32>
 80241ac:	6063      	str	r3, [r4, #4]
 80241ae:	6014      	str	r4, [r2, #0]
 80241b0:	b003      	add	sp, #12
 80241b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80241b6:	f001 bbad 	b.w	8025914 <__malloc_unlock>
 80241ba:	42a3      	cmp	r3, r4
 80241bc:	d90b      	bls.n	80241d6 <_free_r+0x4e>
 80241be:	6821      	ldr	r1, [r4, #0]
 80241c0:	1862      	adds	r2, r4, r1
 80241c2:	4293      	cmp	r3, r2
 80241c4:	bf04      	itt	eq
 80241c6:	681a      	ldreq	r2, [r3, #0]
 80241c8:	685b      	ldreq	r3, [r3, #4]
 80241ca:	6063      	str	r3, [r4, #4]
 80241cc:	bf04      	itt	eq
 80241ce:	1852      	addeq	r2, r2, r1
 80241d0:	6022      	streq	r2, [r4, #0]
 80241d2:	602c      	str	r4, [r5, #0]
 80241d4:	e7ec      	b.n	80241b0 <_free_r+0x28>
 80241d6:	461a      	mov	r2, r3
 80241d8:	685b      	ldr	r3, [r3, #4]
 80241da:	b10b      	cbz	r3, 80241e0 <_free_r+0x58>
 80241dc:	42a3      	cmp	r3, r4
 80241de:	d9fa      	bls.n	80241d6 <_free_r+0x4e>
 80241e0:	6811      	ldr	r1, [r2, #0]
 80241e2:	1855      	adds	r5, r2, r1
 80241e4:	42a5      	cmp	r5, r4
 80241e6:	d10b      	bne.n	8024200 <_free_r+0x78>
 80241e8:	6824      	ldr	r4, [r4, #0]
 80241ea:	4421      	add	r1, r4
 80241ec:	1854      	adds	r4, r2, r1
 80241ee:	42a3      	cmp	r3, r4
 80241f0:	6011      	str	r1, [r2, #0]
 80241f2:	d1dd      	bne.n	80241b0 <_free_r+0x28>
 80241f4:	681c      	ldr	r4, [r3, #0]
 80241f6:	685b      	ldr	r3, [r3, #4]
 80241f8:	6053      	str	r3, [r2, #4]
 80241fa:	4421      	add	r1, r4
 80241fc:	6011      	str	r1, [r2, #0]
 80241fe:	e7d7      	b.n	80241b0 <_free_r+0x28>
 8024200:	d902      	bls.n	8024208 <_free_r+0x80>
 8024202:	230c      	movs	r3, #12
 8024204:	6003      	str	r3, [r0, #0]
 8024206:	e7d3      	b.n	80241b0 <_free_r+0x28>
 8024208:	6825      	ldr	r5, [r4, #0]
 802420a:	1961      	adds	r1, r4, r5
 802420c:	428b      	cmp	r3, r1
 802420e:	bf04      	itt	eq
 8024210:	6819      	ldreq	r1, [r3, #0]
 8024212:	685b      	ldreq	r3, [r3, #4]
 8024214:	6063      	str	r3, [r4, #4]
 8024216:	bf04      	itt	eq
 8024218:	1949      	addeq	r1, r1, r5
 802421a:	6021      	streq	r1, [r4, #0]
 802421c:	6054      	str	r4, [r2, #4]
 802421e:	e7c7      	b.n	80241b0 <_free_r+0x28>
 8024220:	b003      	add	sp, #12
 8024222:	bd30      	pop	{r4, r5, pc}
 8024224:	200048c4 	.word	0x200048c4

08024228 <_malloc_r>:
 8024228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802422a:	1ccd      	adds	r5, r1, #3
 802422c:	f025 0503 	bic.w	r5, r5, #3
 8024230:	3508      	adds	r5, #8
 8024232:	2d0c      	cmp	r5, #12
 8024234:	bf38      	it	cc
 8024236:	250c      	movcc	r5, #12
 8024238:	2d00      	cmp	r5, #0
 802423a:	4606      	mov	r6, r0
 802423c:	db01      	blt.n	8024242 <_malloc_r+0x1a>
 802423e:	42a9      	cmp	r1, r5
 8024240:	d903      	bls.n	802424a <_malloc_r+0x22>
 8024242:	230c      	movs	r3, #12
 8024244:	6033      	str	r3, [r6, #0]
 8024246:	2000      	movs	r0, #0
 8024248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802424a:	f001 fb5d 	bl	8025908 <__malloc_lock>
 802424e:	4921      	ldr	r1, [pc, #132]	; (80242d4 <_malloc_r+0xac>)
 8024250:	680a      	ldr	r2, [r1, #0]
 8024252:	4614      	mov	r4, r2
 8024254:	b99c      	cbnz	r4, 802427e <_malloc_r+0x56>
 8024256:	4f20      	ldr	r7, [pc, #128]	; (80242d8 <_malloc_r+0xb0>)
 8024258:	683b      	ldr	r3, [r7, #0]
 802425a:	b923      	cbnz	r3, 8024266 <_malloc_r+0x3e>
 802425c:	4621      	mov	r1, r4
 802425e:	4630      	mov	r0, r6
 8024260:	f000 fca6 	bl	8024bb0 <_sbrk_r>
 8024264:	6038      	str	r0, [r7, #0]
 8024266:	4629      	mov	r1, r5
 8024268:	4630      	mov	r0, r6
 802426a:	f000 fca1 	bl	8024bb0 <_sbrk_r>
 802426e:	1c43      	adds	r3, r0, #1
 8024270:	d123      	bne.n	80242ba <_malloc_r+0x92>
 8024272:	230c      	movs	r3, #12
 8024274:	6033      	str	r3, [r6, #0]
 8024276:	4630      	mov	r0, r6
 8024278:	f001 fb4c 	bl	8025914 <__malloc_unlock>
 802427c:	e7e3      	b.n	8024246 <_malloc_r+0x1e>
 802427e:	6823      	ldr	r3, [r4, #0]
 8024280:	1b5b      	subs	r3, r3, r5
 8024282:	d417      	bmi.n	80242b4 <_malloc_r+0x8c>
 8024284:	2b0b      	cmp	r3, #11
 8024286:	d903      	bls.n	8024290 <_malloc_r+0x68>
 8024288:	6023      	str	r3, [r4, #0]
 802428a:	441c      	add	r4, r3
 802428c:	6025      	str	r5, [r4, #0]
 802428e:	e004      	b.n	802429a <_malloc_r+0x72>
 8024290:	6863      	ldr	r3, [r4, #4]
 8024292:	42a2      	cmp	r2, r4
 8024294:	bf0c      	ite	eq
 8024296:	600b      	streq	r3, [r1, #0]
 8024298:	6053      	strne	r3, [r2, #4]
 802429a:	4630      	mov	r0, r6
 802429c:	f001 fb3a 	bl	8025914 <__malloc_unlock>
 80242a0:	f104 000b 	add.w	r0, r4, #11
 80242a4:	1d23      	adds	r3, r4, #4
 80242a6:	f020 0007 	bic.w	r0, r0, #7
 80242aa:	1ac2      	subs	r2, r0, r3
 80242ac:	d0cc      	beq.n	8024248 <_malloc_r+0x20>
 80242ae:	1a1b      	subs	r3, r3, r0
 80242b0:	50a3      	str	r3, [r4, r2]
 80242b2:	e7c9      	b.n	8024248 <_malloc_r+0x20>
 80242b4:	4622      	mov	r2, r4
 80242b6:	6864      	ldr	r4, [r4, #4]
 80242b8:	e7cc      	b.n	8024254 <_malloc_r+0x2c>
 80242ba:	1cc4      	adds	r4, r0, #3
 80242bc:	f024 0403 	bic.w	r4, r4, #3
 80242c0:	42a0      	cmp	r0, r4
 80242c2:	d0e3      	beq.n	802428c <_malloc_r+0x64>
 80242c4:	1a21      	subs	r1, r4, r0
 80242c6:	4630      	mov	r0, r6
 80242c8:	f000 fc72 	bl	8024bb0 <_sbrk_r>
 80242cc:	3001      	adds	r0, #1
 80242ce:	d1dd      	bne.n	802428c <_malloc_r+0x64>
 80242d0:	e7cf      	b.n	8024272 <_malloc_r+0x4a>
 80242d2:	bf00      	nop
 80242d4:	200048c4 	.word	0x200048c4
 80242d8:	200048c8 	.word	0x200048c8

080242dc <__cvt>:
 80242dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80242e0:	ec55 4b10 	vmov	r4, r5, d0
 80242e4:	2d00      	cmp	r5, #0
 80242e6:	460e      	mov	r6, r1
 80242e8:	4619      	mov	r1, r3
 80242ea:	462b      	mov	r3, r5
 80242ec:	bfbb      	ittet	lt
 80242ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80242f2:	461d      	movlt	r5, r3
 80242f4:	2300      	movge	r3, #0
 80242f6:	232d      	movlt	r3, #45	; 0x2d
 80242f8:	700b      	strb	r3, [r1, #0]
 80242fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80242fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8024300:	4691      	mov	r9, r2
 8024302:	f023 0820 	bic.w	r8, r3, #32
 8024306:	bfbc      	itt	lt
 8024308:	4622      	movlt	r2, r4
 802430a:	4614      	movlt	r4, r2
 802430c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024310:	d005      	beq.n	802431e <__cvt+0x42>
 8024312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8024316:	d100      	bne.n	802431a <__cvt+0x3e>
 8024318:	3601      	adds	r6, #1
 802431a:	2102      	movs	r1, #2
 802431c:	e000      	b.n	8024320 <__cvt+0x44>
 802431e:	2103      	movs	r1, #3
 8024320:	ab03      	add	r3, sp, #12
 8024322:	9301      	str	r3, [sp, #4]
 8024324:	ab02      	add	r3, sp, #8
 8024326:	9300      	str	r3, [sp, #0]
 8024328:	ec45 4b10 	vmov	d0, r4, r5
 802432c:	4653      	mov	r3, sl
 802432e:	4632      	mov	r2, r6
 8024330:	f000 fcfa 	bl	8024d28 <_dtoa_r>
 8024334:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8024338:	4607      	mov	r7, r0
 802433a:	d102      	bne.n	8024342 <__cvt+0x66>
 802433c:	f019 0f01 	tst.w	r9, #1
 8024340:	d022      	beq.n	8024388 <__cvt+0xac>
 8024342:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024346:	eb07 0906 	add.w	r9, r7, r6
 802434a:	d110      	bne.n	802436e <__cvt+0x92>
 802434c:	783b      	ldrb	r3, [r7, #0]
 802434e:	2b30      	cmp	r3, #48	; 0x30
 8024350:	d10a      	bne.n	8024368 <__cvt+0x8c>
 8024352:	2200      	movs	r2, #0
 8024354:	2300      	movs	r3, #0
 8024356:	4620      	mov	r0, r4
 8024358:	4629      	mov	r1, r5
 802435a:	f7ec faed 	bl	8010938 <__aeabi_dcmpeq>
 802435e:	b918      	cbnz	r0, 8024368 <__cvt+0x8c>
 8024360:	f1c6 0601 	rsb	r6, r6, #1
 8024364:	f8ca 6000 	str.w	r6, [sl]
 8024368:	f8da 3000 	ldr.w	r3, [sl]
 802436c:	4499      	add	r9, r3
 802436e:	2200      	movs	r2, #0
 8024370:	2300      	movs	r3, #0
 8024372:	4620      	mov	r0, r4
 8024374:	4629      	mov	r1, r5
 8024376:	f7ec fadf 	bl	8010938 <__aeabi_dcmpeq>
 802437a:	b108      	cbz	r0, 8024380 <__cvt+0xa4>
 802437c:	f8cd 900c 	str.w	r9, [sp, #12]
 8024380:	2230      	movs	r2, #48	; 0x30
 8024382:	9b03      	ldr	r3, [sp, #12]
 8024384:	454b      	cmp	r3, r9
 8024386:	d307      	bcc.n	8024398 <__cvt+0xbc>
 8024388:	9b03      	ldr	r3, [sp, #12]
 802438a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802438c:	1bdb      	subs	r3, r3, r7
 802438e:	4638      	mov	r0, r7
 8024390:	6013      	str	r3, [r2, #0]
 8024392:	b004      	add	sp, #16
 8024394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024398:	1c59      	adds	r1, r3, #1
 802439a:	9103      	str	r1, [sp, #12]
 802439c:	701a      	strb	r2, [r3, #0]
 802439e:	e7f0      	b.n	8024382 <__cvt+0xa6>

080243a0 <__exponent>:
 80243a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80243a2:	4603      	mov	r3, r0
 80243a4:	2900      	cmp	r1, #0
 80243a6:	bfb8      	it	lt
 80243a8:	4249      	neglt	r1, r1
 80243aa:	f803 2b02 	strb.w	r2, [r3], #2
 80243ae:	bfb4      	ite	lt
 80243b0:	222d      	movlt	r2, #45	; 0x2d
 80243b2:	222b      	movge	r2, #43	; 0x2b
 80243b4:	2909      	cmp	r1, #9
 80243b6:	7042      	strb	r2, [r0, #1]
 80243b8:	dd2a      	ble.n	8024410 <__exponent+0x70>
 80243ba:	f10d 0407 	add.w	r4, sp, #7
 80243be:	46a4      	mov	ip, r4
 80243c0:	270a      	movs	r7, #10
 80243c2:	46a6      	mov	lr, r4
 80243c4:	460a      	mov	r2, r1
 80243c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80243ca:	fb07 1516 	mls	r5, r7, r6, r1
 80243ce:	3530      	adds	r5, #48	; 0x30
 80243d0:	2a63      	cmp	r2, #99	; 0x63
 80243d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80243d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80243da:	4631      	mov	r1, r6
 80243dc:	dcf1      	bgt.n	80243c2 <__exponent+0x22>
 80243de:	3130      	adds	r1, #48	; 0x30
 80243e0:	f1ae 0502 	sub.w	r5, lr, #2
 80243e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80243e8:	1c44      	adds	r4, r0, #1
 80243ea:	4629      	mov	r1, r5
 80243ec:	4561      	cmp	r1, ip
 80243ee:	d30a      	bcc.n	8024406 <__exponent+0x66>
 80243f0:	f10d 0209 	add.w	r2, sp, #9
 80243f4:	eba2 020e 	sub.w	r2, r2, lr
 80243f8:	4565      	cmp	r5, ip
 80243fa:	bf88      	it	hi
 80243fc:	2200      	movhi	r2, #0
 80243fe:	4413      	add	r3, r2
 8024400:	1a18      	subs	r0, r3, r0
 8024402:	b003      	add	sp, #12
 8024404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024406:	f811 2b01 	ldrb.w	r2, [r1], #1
 802440a:	f804 2f01 	strb.w	r2, [r4, #1]!
 802440e:	e7ed      	b.n	80243ec <__exponent+0x4c>
 8024410:	2330      	movs	r3, #48	; 0x30
 8024412:	3130      	adds	r1, #48	; 0x30
 8024414:	7083      	strb	r3, [r0, #2]
 8024416:	70c1      	strb	r1, [r0, #3]
 8024418:	1d03      	adds	r3, r0, #4
 802441a:	e7f1      	b.n	8024400 <__exponent+0x60>

0802441c <_printf_float>:
 802441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024420:	ed2d 8b02 	vpush	{d8}
 8024424:	b08d      	sub	sp, #52	; 0x34
 8024426:	460c      	mov	r4, r1
 8024428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802442c:	4616      	mov	r6, r2
 802442e:	461f      	mov	r7, r3
 8024430:	4605      	mov	r5, r0
 8024432:	f001 fa65 	bl	8025900 <_localeconv_r>
 8024436:	f8d0 a000 	ldr.w	sl, [r0]
 802443a:	4650      	mov	r0, sl
 802443c:	f7eb fe00 	bl	8010040 <strlen>
 8024440:	2300      	movs	r3, #0
 8024442:	930a      	str	r3, [sp, #40]	; 0x28
 8024444:	6823      	ldr	r3, [r4, #0]
 8024446:	9305      	str	r3, [sp, #20]
 8024448:	f8d8 3000 	ldr.w	r3, [r8]
 802444c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8024450:	3307      	adds	r3, #7
 8024452:	f023 0307 	bic.w	r3, r3, #7
 8024456:	f103 0208 	add.w	r2, r3, #8
 802445a:	f8c8 2000 	str.w	r2, [r8]
 802445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024462:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8024466:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802446a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802446e:	9307      	str	r3, [sp, #28]
 8024470:	f8cd 8018 	str.w	r8, [sp, #24]
 8024474:	ee08 0a10 	vmov	s16, r0
 8024478:	4b9f      	ldr	r3, [pc, #636]	; (80246f8 <_printf_float+0x2dc>)
 802447a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802447e:	f04f 32ff 	mov.w	r2, #4294967295
 8024482:	f7ec fa8b 	bl	801099c <__aeabi_dcmpun>
 8024486:	bb88      	cbnz	r0, 80244ec <_printf_float+0xd0>
 8024488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802448c:	4b9a      	ldr	r3, [pc, #616]	; (80246f8 <_printf_float+0x2dc>)
 802448e:	f04f 32ff 	mov.w	r2, #4294967295
 8024492:	f7ec fa65 	bl	8010960 <__aeabi_dcmple>
 8024496:	bb48      	cbnz	r0, 80244ec <_printf_float+0xd0>
 8024498:	2200      	movs	r2, #0
 802449a:	2300      	movs	r3, #0
 802449c:	4640      	mov	r0, r8
 802449e:	4649      	mov	r1, r9
 80244a0:	f7ec fa54 	bl	801094c <__aeabi_dcmplt>
 80244a4:	b110      	cbz	r0, 80244ac <_printf_float+0x90>
 80244a6:	232d      	movs	r3, #45	; 0x2d
 80244a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80244ac:	4b93      	ldr	r3, [pc, #588]	; (80246fc <_printf_float+0x2e0>)
 80244ae:	4894      	ldr	r0, [pc, #592]	; (8024700 <_printf_float+0x2e4>)
 80244b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80244b4:	bf94      	ite	ls
 80244b6:	4698      	movls	r8, r3
 80244b8:	4680      	movhi	r8, r0
 80244ba:	2303      	movs	r3, #3
 80244bc:	6123      	str	r3, [r4, #16]
 80244be:	9b05      	ldr	r3, [sp, #20]
 80244c0:	f023 0204 	bic.w	r2, r3, #4
 80244c4:	6022      	str	r2, [r4, #0]
 80244c6:	f04f 0900 	mov.w	r9, #0
 80244ca:	9700      	str	r7, [sp, #0]
 80244cc:	4633      	mov	r3, r6
 80244ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80244d0:	4621      	mov	r1, r4
 80244d2:	4628      	mov	r0, r5
 80244d4:	f000 f9d8 	bl	8024888 <_printf_common>
 80244d8:	3001      	adds	r0, #1
 80244da:	f040 8090 	bne.w	80245fe <_printf_float+0x1e2>
 80244de:	f04f 30ff 	mov.w	r0, #4294967295
 80244e2:	b00d      	add	sp, #52	; 0x34
 80244e4:	ecbd 8b02 	vpop	{d8}
 80244e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244ec:	4642      	mov	r2, r8
 80244ee:	464b      	mov	r3, r9
 80244f0:	4640      	mov	r0, r8
 80244f2:	4649      	mov	r1, r9
 80244f4:	f7ec fa52 	bl	801099c <__aeabi_dcmpun>
 80244f8:	b140      	cbz	r0, 802450c <_printf_float+0xf0>
 80244fa:	464b      	mov	r3, r9
 80244fc:	2b00      	cmp	r3, #0
 80244fe:	bfbc      	itt	lt
 8024500:	232d      	movlt	r3, #45	; 0x2d
 8024502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8024506:	487f      	ldr	r0, [pc, #508]	; (8024704 <_printf_float+0x2e8>)
 8024508:	4b7f      	ldr	r3, [pc, #508]	; (8024708 <_printf_float+0x2ec>)
 802450a:	e7d1      	b.n	80244b0 <_printf_float+0x94>
 802450c:	6863      	ldr	r3, [r4, #4]
 802450e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8024512:	9206      	str	r2, [sp, #24]
 8024514:	1c5a      	adds	r2, r3, #1
 8024516:	d13f      	bne.n	8024598 <_printf_float+0x17c>
 8024518:	2306      	movs	r3, #6
 802451a:	6063      	str	r3, [r4, #4]
 802451c:	9b05      	ldr	r3, [sp, #20]
 802451e:	6861      	ldr	r1, [r4, #4]
 8024520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8024524:	2300      	movs	r3, #0
 8024526:	9303      	str	r3, [sp, #12]
 8024528:	ab0a      	add	r3, sp, #40	; 0x28
 802452a:	e9cd b301 	strd	fp, r3, [sp, #4]
 802452e:	ab09      	add	r3, sp, #36	; 0x24
 8024530:	ec49 8b10 	vmov	d0, r8, r9
 8024534:	9300      	str	r3, [sp, #0]
 8024536:	6022      	str	r2, [r4, #0]
 8024538:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802453c:	4628      	mov	r0, r5
 802453e:	f7ff fecd 	bl	80242dc <__cvt>
 8024542:	9b06      	ldr	r3, [sp, #24]
 8024544:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024546:	2b47      	cmp	r3, #71	; 0x47
 8024548:	4680      	mov	r8, r0
 802454a:	d108      	bne.n	802455e <_printf_float+0x142>
 802454c:	1cc8      	adds	r0, r1, #3
 802454e:	db02      	blt.n	8024556 <_printf_float+0x13a>
 8024550:	6863      	ldr	r3, [r4, #4]
 8024552:	4299      	cmp	r1, r3
 8024554:	dd41      	ble.n	80245da <_printf_float+0x1be>
 8024556:	f1ab 0b02 	sub.w	fp, fp, #2
 802455a:	fa5f fb8b 	uxtb.w	fp, fp
 802455e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8024562:	d820      	bhi.n	80245a6 <_printf_float+0x18a>
 8024564:	3901      	subs	r1, #1
 8024566:	465a      	mov	r2, fp
 8024568:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802456c:	9109      	str	r1, [sp, #36]	; 0x24
 802456e:	f7ff ff17 	bl	80243a0 <__exponent>
 8024572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024574:	1813      	adds	r3, r2, r0
 8024576:	2a01      	cmp	r2, #1
 8024578:	4681      	mov	r9, r0
 802457a:	6123      	str	r3, [r4, #16]
 802457c:	dc02      	bgt.n	8024584 <_printf_float+0x168>
 802457e:	6822      	ldr	r2, [r4, #0]
 8024580:	07d2      	lsls	r2, r2, #31
 8024582:	d501      	bpl.n	8024588 <_printf_float+0x16c>
 8024584:	3301      	adds	r3, #1
 8024586:	6123      	str	r3, [r4, #16]
 8024588:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802458c:	2b00      	cmp	r3, #0
 802458e:	d09c      	beq.n	80244ca <_printf_float+0xae>
 8024590:	232d      	movs	r3, #45	; 0x2d
 8024592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024596:	e798      	b.n	80244ca <_printf_float+0xae>
 8024598:	9a06      	ldr	r2, [sp, #24]
 802459a:	2a47      	cmp	r2, #71	; 0x47
 802459c:	d1be      	bne.n	802451c <_printf_float+0x100>
 802459e:	2b00      	cmp	r3, #0
 80245a0:	d1bc      	bne.n	802451c <_printf_float+0x100>
 80245a2:	2301      	movs	r3, #1
 80245a4:	e7b9      	b.n	802451a <_printf_float+0xfe>
 80245a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80245aa:	d118      	bne.n	80245de <_printf_float+0x1c2>
 80245ac:	2900      	cmp	r1, #0
 80245ae:	6863      	ldr	r3, [r4, #4]
 80245b0:	dd0b      	ble.n	80245ca <_printf_float+0x1ae>
 80245b2:	6121      	str	r1, [r4, #16]
 80245b4:	b913      	cbnz	r3, 80245bc <_printf_float+0x1a0>
 80245b6:	6822      	ldr	r2, [r4, #0]
 80245b8:	07d0      	lsls	r0, r2, #31
 80245ba:	d502      	bpl.n	80245c2 <_printf_float+0x1a6>
 80245bc:	3301      	adds	r3, #1
 80245be:	440b      	add	r3, r1
 80245c0:	6123      	str	r3, [r4, #16]
 80245c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80245c4:	f04f 0900 	mov.w	r9, #0
 80245c8:	e7de      	b.n	8024588 <_printf_float+0x16c>
 80245ca:	b913      	cbnz	r3, 80245d2 <_printf_float+0x1b6>
 80245cc:	6822      	ldr	r2, [r4, #0]
 80245ce:	07d2      	lsls	r2, r2, #31
 80245d0:	d501      	bpl.n	80245d6 <_printf_float+0x1ba>
 80245d2:	3302      	adds	r3, #2
 80245d4:	e7f4      	b.n	80245c0 <_printf_float+0x1a4>
 80245d6:	2301      	movs	r3, #1
 80245d8:	e7f2      	b.n	80245c0 <_printf_float+0x1a4>
 80245da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80245de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245e0:	4299      	cmp	r1, r3
 80245e2:	db05      	blt.n	80245f0 <_printf_float+0x1d4>
 80245e4:	6823      	ldr	r3, [r4, #0]
 80245e6:	6121      	str	r1, [r4, #16]
 80245e8:	07d8      	lsls	r0, r3, #31
 80245ea:	d5ea      	bpl.n	80245c2 <_printf_float+0x1a6>
 80245ec:	1c4b      	adds	r3, r1, #1
 80245ee:	e7e7      	b.n	80245c0 <_printf_float+0x1a4>
 80245f0:	2900      	cmp	r1, #0
 80245f2:	bfd4      	ite	le
 80245f4:	f1c1 0202 	rsble	r2, r1, #2
 80245f8:	2201      	movgt	r2, #1
 80245fa:	4413      	add	r3, r2
 80245fc:	e7e0      	b.n	80245c0 <_printf_float+0x1a4>
 80245fe:	6823      	ldr	r3, [r4, #0]
 8024600:	055a      	lsls	r2, r3, #21
 8024602:	d407      	bmi.n	8024614 <_printf_float+0x1f8>
 8024604:	6923      	ldr	r3, [r4, #16]
 8024606:	4642      	mov	r2, r8
 8024608:	4631      	mov	r1, r6
 802460a:	4628      	mov	r0, r5
 802460c:	47b8      	blx	r7
 802460e:	3001      	adds	r0, #1
 8024610:	d12c      	bne.n	802466c <_printf_float+0x250>
 8024612:	e764      	b.n	80244de <_printf_float+0xc2>
 8024614:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8024618:	f240 80e0 	bls.w	80247dc <_printf_float+0x3c0>
 802461c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8024620:	2200      	movs	r2, #0
 8024622:	2300      	movs	r3, #0
 8024624:	f7ec f988 	bl	8010938 <__aeabi_dcmpeq>
 8024628:	2800      	cmp	r0, #0
 802462a:	d034      	beq.n	8024696 <_printf_float+0x27a>
 802462c:	4a37      	ldr	r2, [pc, #220]	; (802470c <_printf_float+0x2f0>)
 802462e:	2301      	movs	r3, #1
 8024630:	4631      	mov	r1, r6
 8024632:	4628      	mov	r0, r5
 8024634:	47b8      	blx	r7
 8024636:	3001      	adds	r0, #1
 8024638:	f43f af51 	beq.w	80244de <_printf_float+0xc2>
 802463c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024640:	429a      	cmp	r2, r3
 8024642:	db02      	blt.n	802464a <_printf_float+0x22e>
 8024644:	6823      	ldr	r3, [r4, #0]
 8024646:	07d8      	lsls	r0, r3, #31
 8024648:	d510      	bpl.n	802466c <_printf_float+0x250>
 802464a:	ee18 3a10 	vmov	r3, s16
 802464e:	4652      	mov	r2, sl
 8024650:	4631      	mov	r1, r6
 8024652:	4628      	mov	r0, r5
 8024654:	47b8      	blx	r7
 8024656:	3001      	adds	r0, #1
 8024658:	f43f af41 	beq.w	80244de <_printf_float+0xc2>
 802465c:	f04f 0800 	mov.w	r8, #0
 8024660:	f104 091a 	add.w	r9, r4, #26
 8024664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024666:	3b01      	subs	r3, #1
 8024668:	4543      	cmp	r3, r8
 802466a:	dc09      	bgt.n	8024680 <_printf_float+0x264>
 802466c:	6823      	ldr	r3, [r4, #0]
 802466e:	079b      	lsls	r3, r3, #30
 8024670:	f100 8105 	bmi.w	802487e <_printf_float+0x462>
 8024674:	68e0      	ldr	r0, [r4, #12]
 8024676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024678:	4298      	cmp	r0, r3
 802467a:	bfb8      	it	lt
 802467c:	4618      	movlt	r0, r3
 802467e:	e730      	b.n	80244e2 <_printf_float+0xc6>
 8024680:	2301      	movs	r3, #1
 8024682:	464a      	mov	r2, r9
 8024684:	4631      	mov	r1, r6
 8024686:	4628      	mov	r0, r5
 8024688:	47b8      	blx	r7
 802468a:	3001      	adds	r0, #1
 802468c:	f43f af27 	beq.w	80244de <_printf_float+0xc2>
 8024690:	f108 0801 	add.w	r8, r8, #1
 8024694:	e7e6      	b.n	8024664 <_printf_float+0x248>
 8024696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024698:	2b00      	cmp	r3, #0
 802469a:	dc39      	bgt.n	8024710 <_printf_float+0x2f4>
 802469c:	4a1b      	ldr	r2, [pc, #108]	; (802470c <_printf_float+0x2f0>)
 802469e:	2301      	movs	r3, #1
 80246a0:	4631      	mov	r1, r6
 80246a2:	4628      	mov	r0, r5
 80246a4:	47b8      	blx	r7
 80246a6:	3001      	adds	r0, #1
 80246a8:	f43f af19 	beq.w	80244de <_printf_float+0xc2>
 80246ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80246b0:	4313      	orrs	r3, r2
 80246b2:	d102      	bne.n	80246ba <_printf_float+0x29e>
 80246b4:	6823      	ldr	r3, [r4, #0]
 80246b6:	07d9      	lsls	r1, r3, #31
 80246b8:	d5d8      	bpl.n	802466c <_printf_float+0x250>
 80246ba:	ee18 3a10 	vmov	r3, s16
 80246be:	4652      	mov	r2, sl
 80246c0:	4631      	mov	r1, r6
 80246c2:	4628      	mov	r0, r5
 80246c4:	47b8      	blx	r7
 80246c6:	3001      	adds	r0, #1
 80246c8:	f43f af09 	beq.w	80244de <_printf_float+0xc2>
 80246cc:	f04f 0900 	mov.w	r9, #0
 80246d0:	f104 0a1a 	add.w	sl, r4, #26
 80246d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246d6:	425b      	negs	r3, r3
 80246d8:	454b      	cmp	r3, r9
 80246da:	dc01      	bgt.n	80246e0 <_printf_float+0x2c4>
 80246dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80246de:	e792      	b.n	8024606 <_printf_float+0x1ea>
 80246e0:	2301      	movs	r3, #1
 80246e2:	4652      	mov	r2, sl
 80246e4:	4631      	mov	r1, r6
 80246e6:	4628      	mov	r0, r5
 80246e8:	47b8      	blx	r7
 80246ea:	3001      	adds	r0, #1
 80246ec:	f43f aef7 	beq.w	80244de <_printf_float+0xc2>
 80246f0:	f109 0901 	add.w	r9, r9, #1
 80246f4:	e7ee      	b.n	80246d4 <_printf_float+0x2b8>
 80246f6:	bf00      	nop
 80246f8:	7fefffff 	.word	0x7fefffff
 80246fc:	080270b4 	.word	0x080270b4
 8024700:	080270b8 	.word	0x080270b8
 8024704:	080270c0 	.word	0x080270c0
 8024708:	080270bc 	.word	0x080270bc
 802470c:	080270c4 	.word	0x080270c4
 8024710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024714:	429a      	cmp	r2, r3
 8024716:	bfa8      	it	ge
 8024718:	461a      	movge	r2, r3
 802471a:	2a00      	cmp	r2, #0
 802471c:	4691      	mov	r9, r2
 802471e:	dc37      	bgt.n	8024790 <_printf_float+0x374>
 8024720:	f04f 0b00 	mov.w	fp, #0
 8024724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024728:	f104 021a 	add.w	r2, r4, #26
 802472c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802472e:	9305      	str	r3, [sp, #20]
 8024730:	eba3 0309 	sub.w	r3, r3, r9
 8024734:	455b      	cmp	r3, fp
 8024736:	dc33      	bgt.n	80247a0 <_printf_float+0x384>
 8024738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802473c:	429a      	cmp	r2, r3
 802473e:	db3b      	blt.n	80247b8 <_printf_float+0x39c>
 8024740:	6823      	ldr	r3, [r4, #0]
 8024742:	07da      	lsls	r2, r3, #31
 8024744:	d438      	bmi.n	80247b8 <_printf_float+0x39c>
 8024746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024748:	9b05      	ldr	r3, [sp, #20]
 802474a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802474c:	1ad3      	subs	r3, r2, r3
 802474e:	eba2 0901 	sub.w	r9, r2, r1
 8024752:	4599      	cmp	r9, r3
 8024754:	bfa8      	it	ge
 8024756:	4699      	movge	r9, r3
 8024758:	f1b9 0f00 	cmp.w	r9, #0
 802475c:	dc35      	bgt.n	80247ca <_printf_float+0x3ae>
 802475e:	f04f 0800 	mov.w	r8, #0
 8024762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024766:	f104 0a1a 	add.w	sl, r4, #26
 802476a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802476e:	1a9b      	subs	r3, r3, r2
 8024770:	eba3 0309 	sub.w	r3, r3, r9
 8024774:	4543      	cmp	r3, r8
 8024776:	f77f af79 	ble.w	802466c <_printf_float+0x250>
 802477a:	2301      	movs	r3, #1
 802477c:	4652      	mov	r2, sl
 802477e:	4631      	mov	r1, r6
 8024780:	4628      	mov	r0, r5
 8024782:	47b8      	blx	r7
 8024784:	3001      	adds	r0, #1
 8024786:	f43f aeaa 	beq.w	80244de <_printf_float+0xc2>
 802478a:	f108 0801 	add.w	r8, r8, #1
 802478e:	e7ec      	b.n	802476a <_printf_float+0x34e>
 8024790:	4613      	mov	r3, r2
 8024792:	4631      	mov	r1, r6
 8024794:	4642      	mov	r2, r8
 8024796:	4628      	mov	r0, r5
 8024798:	47b8      	blx	r7
 802479a:	3001      	adds	r0, #1
 802479c:	d1c0      	bne.n	8024720 <_printf_float+0x304>
 802479e:	e69e      	b.n	80244de <_printf_float+0xc2>
 80247a0:	2301      	movs	r3, #1
 80247a2:	4631      	mov	r1, r6
 80247a4:	4628      	mov	r0, r5
 80247a6:	9205      	str	r2, [sp, #20]
 80247a8:	47b8      	blx	r7
 80247aa:	3001      	adds	r0, #1
 80247ac:	f43f ae97 	beq.w	80244de <_printf_float+0xc2>
 80247b0:	9a05      	ldr	r2, [sp, #20]
 80247b2:	f10b 0b01 	add.w	fp, fp, #1
 80247b6:	e7b9      	b.n	802472c <_printf_float+0x310>
 80247b8:	ee18 3a10 	vmov	r3, s16
 80247bc:	4652      	mov	r2, sl
 80247be:	4631      	mov	r1, r6
 80247c0:	4628      	mov	r0, r5
 80247c2:	47b8      	blx	r7
 80247c4:	3001      	adds	r0, #1
 80247c6:	d1be      	bne.n	8024746 <_printf_float+0x32a>
 80247c8:	e689      	b.n	80244de <_printf_float+0xc2>
 80247ca:	9a05      	ldr	r2, [sp, #20]
 80247cc:	464b      	mov	r3, r9
 80247ce:	4442      	add	r2, r8
 80247d0:	4631      	mov	r1, r6
 80247d2:	4628      	mov	r0, r5
 80247d4:	47b8      	blx	r7
 80247d6:	3001      	adds	r0, #1
 80247d8:	d1c1      	bne.n	802475e <_printf_float+0x342>
 80247da:	e680      	b.n	80244de <_printf_float+0xc2>
 80247dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80247de:	2a01      	cmp	r2, #1
 80247e0:	dc01      	bgt.n	80247e6 <_printf_float+0x3ca>
 80247e2:	07db      	lsls	r3, r3, #31
 80247e4:	d538      	bpl.n	8024858 <_printf_float+0x43c>
 80247e6:	2301      	movs	r3, #1
 80247e8:	4642      	mov	r2, r8
 80247ea:	4631      	mov	r1, r6
 80247ec:	4628      	mov	r0, r5
 80247ee:	47b8      	blx	r7
 80247f0:	3001      	adds	r0, #1
 80247f2:	f43f ae74 	beq.w	80244de <_printf_float+0xc2>
 80247f6:	ee18 3a10 	vmov	r3, s16
 80247fa:	4652      	mov	r2, sl
 80247fc:	4631      	mov	r1, r6
 80247fe:	4628      	mov	r0, r5
 8024800:	47b8      	blx	r7
 8024802:	3001      	adds	r0, #1
 8024804:	f43f ae6b 	beq.w	80244de <_printf_float+0xc2>
 8024808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802480c:	2200      	movs	r2, #0
 802480e:	2300      	movs	r3, #0
 8024810:	f7ec f892 	bl	8010938 <__aeabi_dcmpeq>
 8024814:	b9d8      	cbnz	r0, 802484e <_printf_float+0x432>
 8024816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024818:	f108 0201 	add.w	r2, r8, #1
 802481c:	3b01      	subs	r3, #1
 802481e:	4631      	mov	r1, r6
 8024820:	4628      	mov	r0, r5
 8024822:	47b8      	blx	r7
 8024824:	3001      	adds	r0, #1
 8024826:	d10e      	bne.n	8024846 <_printf_float+0x42a>
 8024828:	e659      	b.n	80244de <_printf_float+0xc2>
 802482a:	2301      	movs	r3, #1
 802482c:	4652      	mov	r2, sl
 802482e:	4631      	mov	r1, r6
 8024830:	4628      	mov	r0, r5
 8024832:	47b8      	blx	r7
 8024834:	3001      	adds	r0, #1
 8024836:	f43f ae52 	beq.w	80244de <_printf_float+0xc2>
 802483a:	f108 0801 	add.w	r8, r8, #1
 802483e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024840:	3b01      	subs	r3, #1
 8024842:	4543      	cmp	r3, r8
 8024844:	dcf1      	bgt.n	802482a <_printf_float+0x40e>
 8024846:	464b      	mov	r3, r9
 8024848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802484c:	e6dc      	b.n	8024608 <_printf_float+0x1ec>
 802484e:	f04f 0800 	mov.w	r8, #0
 8024852:	f104 0a1a 	add.w	sl, r4, #26
 8024856:	e7f2      	b.n	802483e <_printf_float+0x422>
 8024858:	2301      	movs	r3, #1
 802485a:	4642      	mov	r2, r8
 802485c:	e7df      	b.n	802481e <_printf_float+0x402>
 802485e:	2301      	movs	r3, #1
 8024860:	464a      	mov	r2, r9
 8024862:	4631      	mov	r1, r6
 8024864:	4628      	mov	r0, r5
 8024866:	47b8      	blx	r7
 8024868:	3001      	adds	r0, #1
 802486a:	f43f ae38 	beq.w	80244de <_printf_float+0xc2>
 802486e:	f108 0801 	add.w	r8, r8, #1
 8024872:	68e3      	ldr	r3, [r4, #12]
 8024874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024876:	1a5b      	subs	r3, r3, r1
 8024878:	4543      	cmp	r3, r8
 802487a:	dcf0      	bgt.n	802485e <_printf_float+0x442>
 802487c:	e6fa      	b.n	8024674 <_printf_float+0x258>
 802487e:	f04f 0800 	mov.w	r8, #0
 8024882:	f104 0919 	add.w	r9, r4, #25
 8024886:	e7f4      	b.n	8024872 <_printf_float+0x456>

08024888 <_printf_common>:
 8024888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802488c:	4616      	mov	r6, r2
 802488e:	4699      	mov	r9, r3
 8024890:	688a      	ldr	r2, [r1, #8]
 8024892:	690b      	ldr	r3, [r1, #16]
 8024894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024898:	4293      	cmp	r3, r2
 802489a:	bfb8      	it	lt
 802489c:	4613      	movlt	r3, r2
 802489e:	6033      	str	r3, [r6, #0]
 80248a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80248a4:	4607      	mov	r7, r0
 80248a6:	460c      	mov	r4, r1
 80248a8:	b10a      	cbz	r2, 80248ae <_printf_common+0x26>
 80248aa:	3301      	adds	r3, #1
 80248ac:	6033      	str	r3, [r6, #0]
 80248ae:	6823      	ldr	r3, [r4, #0]
 80248b0:	0699      	lsls	r1, r3, #26
 80248b2:	bf42      	ittt	mi
 80248b4:	6833      	ldrmi	r3, [r6, #0]
 80248b6:	3302      	addmi	r3, #2
 80248b8:	6033      	strmi	r3, [r6, #0]
 80248ba:	6825      	ldr	r5, [r4, #0]
 80248bc:	f015 0506 	ands.w	r5, r5, #6
 80248c0:	d106      	bne.n	80248d0 <_printf_common+0x48>
 80248c2:	f104 0a19 	add.w	sl, r4, #25
 80248c6:	68e3      	ldr	r3, [r4, #12]
 80248c8:	6832      	ldr	r2, [r6, #0]
 80248ca:	1a9b      	subs	r3, r3, r2
 80248cc:	42ab      	cmp	r3, r5
 80248ce:	dc26      	bgt.n	802491e <_printf_common+0x96>
 80248d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80248d4:	1e13      	subs	r3, r2, #0
 80248d6:	6822      	ldr	r2, [r4, #0]
 80248d8:	bf18      	it	ne
 80248da:	2301      	movne	r3, #1
 80248dc:	0692      	lsls	r2, r2, #26
 80248de:	d42b      	bmi.n	8024938 <_printf_common+0xb0>
 80248e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80248e4:	4649      	mov	r1, r9
 80248e6:	4638      	mov	r0, r7
 80248e8:	47c0      	blx	r8
 80248ea:	3001      	adds	r0, #1
 80248ec:	d01e      	beq.n	802492c <_printf_common+0xa4>
 80248ee:	6823      	ldr	r3, [r4, #0]
 80248f0:	68e5      	ldr	r5, [r4, #12]
 80248f2:	6832      	ldr	r2, [r6, #0]
 80248f4:	f003 0306 	and.w	r3, r3, #6
 80248f8:	2b04      	cmp	r3, #4
 80248fa:	bf08      	it	eq
 80248fc:	1aad      	subeq	r5, r5, r2
 80248fe:	68a3      	ldr	r3, [r4, #8]
 8024900:	6922      	ldr	r2, [r4, #16]
 8024902:	bf0c      	ite	eq
 8024904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024908:	2500      	movne	r5, #0
 802490a:	4293      	cmp	r3, r2
 802490c:	bfc4      	itt	gt
 802490e:	1a9b      	subgt	r3, r3, r2
 8024910:	18ed      	addgt	r5, r5, r3
 8024912:	2600      	movs	r6, #0
 8024914:	341a      	adds	r4, #26
 8024916:	42b5      	cmp	r5, r6
 8024918:	d11a      	bne.n	8024950 <_printf_common+0xc8>
 802491a:	2000      	movs	r0, #0
 802491c:	e008      	b.n	8024930 <_printf_common+0xa8>
 802491e:	2301      	movs	r3, #1
 8024920:	4652      	mov	r2, sl
 8024922:	4649      	mov	r1, r9
 8024924:	4638      	mov	r0, r7
 8024926:	47c0      	blx	r8
 8024928:	3001      	adds	r0, #1
 802492a:	d103      	bne.n	8024934 <_printf_common+0xac>
 802492c:	f04f 30ff 	mov.w	r0, #4294967295
 8024930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024934:	3501      	adds	r5, #1
 8024936:	e7c6      	b.n	80248c6 <_printf_common+0x3e>
 8024938:	18e1      	adds	r1, r4, r3
 802493a:	1c5a      	adds	r2, r3, #1
 802493c:	2030      	movs	r0, #48	; 0x30
 802493e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024942:	4422      	add	r2, r4
 8024944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802494c:	3302      	adds	r3, #2
 802494e:	e7c7      	b.n	80248e0 <_printf_common+0x58>
 8024950:	2301      	movs	r3, #1
 8024952:	4622      	mov	r2, r4
 8024954:	4649      	mov	r1, r9
 8024956:	4638      	mov	r0, r7
 8024958:	47c0      	blx	r8
 802495a:	3001      	adds	r0, #1
 802495c:	d0e6      	beq.n	802492c <_printf_common+0xa4>
 802495e:	3601      	adds	r6, #1
 8024960:	e7d9      	b.n	8024916 <_printf_common+0x8e>
	...

08024964 <_printf_i>:
 8024964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024968:	460c      	mov	r4, r1
 802496a:	4691      	mov	r9, r2
 802496c:	7e27      	ldrb	r7, [r4, #24]
 802496e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024970:	2f78      	cmp	r7, #120	; 0x78
 8024972:	4680      	mov	r8, r0
 8024974:	469a      	mov	sl, r3
 8024976:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802497a:	d807      	bhi.n	802498c <_printf_i+0x28>
 802497c:	2f62      	cmp	r7, #98	; 0x62
 802497e:	d80a      	bhi.n	8024996 <_printf_i+0x32>
 8024980:	2f00      	cmp	r7, #0
 8024982:	f000 80d8 	beq.w	8024b36 <_printf_i+0x1d2>
 8024986:	2f58      	cmp	r7, #88	; 0x58
 8024988:	f000 80a3 	beq.w	8024ad2 <_printf_i+0x16e>
 802498c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024994:	e03a      	b.n	8024a0c <_printf_i+0xa8>
 8024996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802499a:	2b15      	cmp	r3, #21
 802499c:	d8f6      	bhi.n	802498c <_printf_i+0x28>
 802499e:	a001      	add	r0, pc, #4	; (adr r0, 80249a4 <_printf_i+0x40>)
 80249a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80249a4:	080249fd 	.word	0x080249fd
 80249a8:	08024a11 	.word	0x08024a11
 80249ac:	0802498d 	.word	0x0802498d
 80249b0:	0802498d 	.word	0x0802498d
 80249b4:	0802498d 	.word	0x0802498d
 80249b8:	0802498d 	.word	0x0802498d
 80249bc:	08024a11 	.word	0x08024a11
 80249c0:	0802498d 	.word	0x0802498d
 80249c4:	0802498d 	.word	0x0802498d
 80249c8:	0802498d 	.word	0x0802498d
 80249cc:	0802498d 	.word	0x0802498d
 80249d0:	08024b1d 	.word	0x08024b1d
 80249d4:	08024a41 	.word	0x08024a41
 80249d8:	08024aff 	.word	0x08024aff
 80249dc:	0802498d 	.word	0x0802498d
 80249e0:	0802498d 	.word	0x0802498d
 80249e4:	08024b3f 	.word	0x08024b3f
 80249e8:	0802498d 	.word	0x0802498d
 80249ec:	08024a41 	.word	0x08024a41
 80249f0:	0802498d 	.word	0x0802498d
 80249f4:	0802498d 	.word	0x0802498d
 80249f8:	08024b07 	.word	0x08024b07
 80249fc:	680b      	ldr	r3, [r1, #0]
 80249fe:	1d1a      	adds	r2, r3, #4
 8024a00:	681b      	ldr	r3, [r3, #0]
 8024a02:	600a      	str	r2, [r1, #0]
 8024a04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024a0c:	2301      	movs	r3, #1
 8024a0e:	e0a3      	b.n	8024b58 <_printf_i+0x1f4>
 8024a10:	6825      	ldr	r5, [r4, #0]
 8024a12:	6808      	ldr	r0, [r1, #0]
 8024a14:	062e      	lsls	r6, r5, #24
 8024a16:	f100 0304 	add.w	r3, r0, #4
 8024a1a:	d50a      	bpl.n	8024a32 <_printf_i+0xce>
 8024a1c:	6805      	ldr	r5, [r0, #0]
 8024a1e:	600b      	str	r3, [r1, #0]
 8024a20:	2d00      	cmp	r5, #0
 8024a22:	da03      	bge.n	8024a2c <_printf_i+0xc8>
 8024a24:	232d      	movs	r3, #45	; 0x2d
 8024a26:	426d      	negs	r5, r5
 8024a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024a2c:	485e      	ldr	r0, [pc, #376]	; (8024ba8 <_printf_i+0x244>)
 8024a2e:	230a      	movs	r3, #10
 8024a30:	e019      	b.n	8024a66 <_printf_i+0x102>
 8024a32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8024a36:	6805      	ldr	r5, [r0, #0]
 8024a38:	600b      	str	r3, [r1, #0]
 8024a3a:	bf18      	it	ne
 8024a3c:	b22d      	sxthne	r5, r5
 8024a3e:	e7ef      	b.n	8024a20 <_printf_i+0xbc>
 8024a40:	680b      	ldr	r3, [r1, #0]
 8024a42:	6825      	ldr	r5, [r4, #0]
 8024a44:	1d18      	adds	r0, r3, #4
 8024a46:	6008      	str	r0, [r1, #0]
 8024a48:	0628      	lsls	r0, r5, #24
 8024a4a:	d501      	bpl.n	8024a50 <_printf_i+0xec>
 8024a4c:	681d      	ldr	r5, [r3, #0]
 8024a4e:	e002      	b.n	8024a56 <_printf_i+0xf2>
 8024a50:	0669      	lsls	r1, r5, #25
 8024a52:	d5fb      	bpl.n	8024a4c <_printf_i+0xe8>
 8024a54:	881d      	ldrh	r5, [r3, #0]
 8024a56:	4854      	ldr	r0, [pc, #336]	; (8024ba8 <_printf_i+0x244>)
 8024a58:	2f6f      	cmp	r7, #111	; 0x6f
 8024a5a:	bf0c      	ite	eq
 8024a5c:	2308      	moveq	r3, #8
 8024a5e:	230a      	movne	r3, #10
 8024a60:	2100      	movs	r1, #0
 8024a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024a66:	6866      	ldr	r6, [r4, #4]
 8024a68:	60a6      	str	r6, [r4, #8]
 8024a6a:	2e00      	cmp	r6, #0
 8024a6c:	bfa2      	ittt	ge
 8024a6e:	6821      	ldrge	r1, [r4, #0]
 8024a70:	f021 0104 	bicge.w	r1, r1, #4
 8024a74:	6021      	strge	r1, [r4, #0]
 8024a76:	b90d      	cbnz	r5, 8024a7c <_printf_i+0x118>
 8024a78:	2e00      	cmp	r6, #0
 8024a7a:	d04d      	beq.n	8024b18 <_printf_i+0x1b4>
 8024a7c:	4616      	mov	r6, r2
 8024a7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8024a82:	fb03 5711 	mls	r7, r3, r1, r5
 8024a86:	5dc7      	ldrb	r7, [r0, r7]
 8024a88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024a8c:	462f      	mov	r7, r5
 8024a8e:	42bb      	cmp	r3, r7
 8024a90:	460d      	mov	r5, r1
 8024a92:	d9f4      	bls.n	8024a7e <_printf_i+0x11a>
 8024a94:	2b08      	cmp	r3, #8
 8024a96:	d10b      	bne.n	8024ab0 <_printf_i+0x14c>
 8024a98:	6823      	ldr	r3, [r4, #0]
 8024a9a:	07df      	lsls	r7, r3, #31
 8024a9c:	d508      	bpl.n	8024ab0 <_printf_i+0x14c>
 8024a9e:	6923      	ldr	r3, [r4, #16]
 8024aa0:	6861      	ldr	r1, [r4, #4]
 8024aa2:	4299      	cmp	r1, r3
 8024aa4:	bfde      	ittt	le
 8024aa6:	2330      	movle	r3, #48	; 0x30
 8024aa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024aac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024ab0:	1b92      	subs	r2, r2, r6
 8024ab2:	6122      	str	r2, [r4, #16]
 8024ab4:	f8cd a000 	str.w	sl, [sp]
 8024ab8:	464b      	mov	r3, r9
 8024aba:	aa03      	add	r2, sp, #12
 8024abc:	4621      	mov	r1, r4
 8024abe:	4640      	mov	r0, r8
 8024ac0:	f7ff fee2 	bl	8024888 <_printf_common>
 8024ac4:	3001      	adds	r0, #1
 8024ac6:	d14c      	bne.n	8024b62 <_printf_i+0x1fe>
 8024ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8024acc:	b004      	add	sp, #16
 8024ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024ad2:	4835      	ldr	r0, [pc, #212]	; (8024ba8 <_printf_i+0x244>)
 8024ad4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8024ad8:	6823      	ldr	r3, [r4, #0]
 8024ada:	680e      	ldr	r6, [r1, #0]
 8024adc:	061f      	lsls	r7, r3, #24
 8024ade:	f856 5b04 	ldr.w	r5, [r6], #4
 8024ae2:	600e      	str	r6, [r1, #0]
 8024ae4:	d514      	bpl.n	8024b10 <_printf_i+0x1ac>
 8024ae6:	07d9      	lsls	r1, r3, #31
 8024ae8:	bf44      	itt	mi
 8024aea:	f043 0320 	orrmi.w	r3, r3, #32
 8024aee:	6023      	strmi	r3, [r4, #0]
 8024af0:	b91d      	cbnz	r5, 8024afa <_printf_i+0x196>
 8024af2:	6823      	ldr	r3, [r4, #0]
 8024af4:	f023 0320 	bic.w	r3, r3, #32
 8024af8:	6023      	str	r3, [r4, #0]
 8024afa:	2310      	movs	r3, #16
 8024afc:	e7b0      	b.n	8024a60 <_printf_i+0xfc>
 8024afe:	6823      	ldr	r3, [r4, #0]
 8024b00:	f043 0320 	orr.w	r3, r3, #32
 8024b04:	6023      	str	r3, [r4, #0]
 8024b06:	2378      	movs	r3, #120	; 0x78
 8024b08:	4828      	ldr	r0, [pc, #160]	; (8024bac <_printf_i+0x248>)
 8024b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024b0e:	e7e3      	b.n	8024ad8 <_printf_i+0x174>
 8024b10:	065e      	lsls	r6, r3, #25
 8024b12:	bf48      	it	mi
 8024b14:	b2ad      	uxthmi	r5, r5
 8024b16:	e7e6      	b.n	8024ae6 <_printf_i+0x182>
 8024b18:	4616      	mov	r6, r2
 8024b1a:	e7bb      	b.n	8024a94 <_printf_i+0x130>
 8024b1c:	680b      	ldr	r3, [r1, #0]
 8024b1e:	6826      	ldr	r6, [r4, #0]
 8024b20:	6960      	ldr	r0, [r4, #20]
 8024b22:	1d1d      	adds	r5, r3, #4
 8024b24:	600d      	str	r5, [r1, #0]
 8024b26:	0635      	lsls	r5, r6, #24
 8024b28:	681b      	ldr	r3, [r3, #0]
 8024b2a:	d501      	bpl.n	8024b30 <_printf_i+0x1cc>
 8024b2c:	6018      	str	r0, [r3, #0]
 8024b2e:	e002      	b.n	8024b36 <_printf_i+0x1d2>
 8024b30:	0671      	lsls	r1, r6, #25
 8024b32:	d5fb      	bpl.n	8024b2c <_printf_i+0x1c8>
 8024b34:	8018      	strh	r0, [r3, #0]
 8024b36:	2300      	movs	r3, #0
 8024b38:	6123      	str	r3, [r4, #16]
 8024b3a:	4616      	mov	r6, r2
 8024b3c:	e7ba      	b.n	8024ab4 <_printf_i+0x150>
 8024b3e:	680b      	ldr	r3, [r1, #0]
 8024b40:	1d1a      	adds	r2, r3, #4
 8024b42:	600a      	str	r2, [r1, #0]
 8024b44:	681e      	ldr	r6, [r3, #0]
 8024b46:	6862      	ldr	r2, [r4, #4]
 8024b48:	2100      	movs	r1, #0
 8024b4a:	4630      	mov	r0, r6
 8024b4c:	f7eb fa80 	bl	8010050 <memchr>
 8024b50:	b108      	cbz	r0, 8024b56 <_printf_i+0x1f2>
 8024b52:	1b80      	subs	r0, r0, r6
 8024b54:	6060      	str	r0, [r4, #4]
 8024b56:	6863      	ldr	r3, [r4, #4]
 8024b58:	6123      	str	r3, [r4, #16]
 8024b5a:	2300      	movs	r3, #0
 8024b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024b60:	e7a8      	b.n	8024ab4 <_printf_i+0x150>
 8024b62:	6923      	ldr	r3, [r4, #16]
 8024b64:	4632      	mov	r2, r6
 8024b66:	4649      	mov	r1, r9
 8024b68:	4640      	mov	r0, r8
 8024b6a:	47d0      	blx	sl
 8024b6c:	3001      	adds	r0, #1
 8024b6e:	d0ab      	beq.n	8024ac8 <_printf_i+0x164>
 8024b70:	6823      	ldr	r3, [r4, #0]
 8024b72:	079b      	lsls	r3, r3, #30
 8024b74:	d413      	bmi.n	8024b9e <_printf_i+0x23a>
 8024b76:	68e0      	ldr	r0, [r4, #12]
 8024b78:	9b03      	ldr	r3, [sp, #12]
 8024b7a:	4298      	cmp	r0, r3
 8024b7c:	bfb8      	it	lt
 8024b7e:	4618      	movlt	r0, r3
 8024b80:	e7a4      	b.n	8024acc <_printf_i+0x168>
 8024b82:	2301      	movs	r3, #1
 8024b84:	4632      	mov	r2, r6
 8024b86:	4649      	mov	r1, r9
 8024b88:	4640      	mov	r0, r8
 8024b8a:	47d0      	blx	sl
 8024b8c:	3001      	adds	r0, #1
 8024b8e:	d09b      	beq.n	8024ac8 <_printf_i+0x164>
 8024b90:	3501      	adds	r5, #1
 8024b92:	68e3      	ldr	r3, [r4, #12]
 8024b94:	9903      	ldr	r1, [sp, #12]
 8024b96:	1a5b      	subs	r3, r3, r1
 8024b98:	42ab      	cmp	r3, r5
 8024b9a:	dcf2      	bgt.n	8024b82 <_printf_i+0x21e>
 8024b9c:	e7eb      	b.n	8024b76 <_printf_i+0x212>
 8024b9e:	2500      	movs	r5, #0
 8024ba0:	f104 0619 	add.w	r6, r4, #25
 8024ba4:	e7f5      	b.n	8024b92 <_printf_i+0x22e>
 8024ba6:	bf00      	nop
 8024ba8:	080270c6 	.word	0x080270c6
 8024bac:	080270d7 	.word	0x080270d7

08024bb0 <_sbrk_r>:
 8024bb0:	b538      	push	{r3, r4, r5, lr}
 8024bb2:	4d06      	ldr	r5, [pc, #24]	; (8024bcc <_sbrk_r+0x1c>)
 8024bb4:	2300      	movs	r3, #0
 8024bb6:	4604      	mov	r4, r0
 8024bb8:	4608      	mov	r0, r1
 8024bba:	602b      	str	r3, [r5, #0]
 8024bbc:	f7ed fb6e 	bl	801229c <_sbrk>
 8024bc0:	1c43      	adds	r3, r0, #1
 8024bc2:	d102      	bne.n	8024bca <_sbrk_r+0x1a>
 8024bc4:	682b      	ldr	r3, [r5, #0]
 8024bc6:	b103      	cbz	r3, 8024bca <_sbrk_r+0x1a>
 8024bc8:	6023      	str	r3, [r4, #0]
 8024bca:	bd38      	pop	{r3, r4, r5, pc}
 8024bcc:	20006cfc 	.word	0x20006cfc

08024bd0 <siprintf>:
 8024bd0:	b40e      	push	{r1, r2, r3}
 8024bd2:	b500      	push	{lr}
 8024bd4:	b09c      	sub	sp, #112	; 0x70
 8024bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8024bd8:	9002      	str	r0, [sp, #8]
 8024bda:	9006      	str	r0, [sp, #24]
 8024bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024be0:	4809      	ldr	r0, [pc, #36]	; (8024c08 <siprintf+0x38>)
 8024be2:	9107      	str	r1, [sp, #28]
 8024be4:	9104      	str	r1, [sp, #16]
 8024be6:	4909      	ldr	r1, [pc, #36]	; (8024c0c <siprintf+0x3c>)
 8024be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8024bec:	9105      	str	r1, [sp, #20]
 8024bee:	6800      	ldr	r0, [r0, #0]
 8024bf0:	9301      	str	r3, [sp, #4]
 8024bf2:	a902      	add	r1, sp, #8
 8024bf4:	f001 fa7c 	bl	80260f0 <_svfiprintf_r>
 8024bf8:	9b02      	ldr	r3, [sp, #8]
 8024bfa:	2200      	movs	r2, #0
 8024bfc:	701a      	strb	r2, [r3, #0]
 8024bfe:	b01c      	add	sp, #112	; 0x70
 8024c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8024c04:	b003      	add	sp, #12
 8024c06:	4770      	bx	lr
 8024c08:	20000458 	.word	0x20000458
 8024c0c:	ffff0208 	.word	0xffff0208

08024c10 <quorem>:
 8024c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c14:	6903      	ldr	r3, [r0, #16]
 8024c16:	690c      	ldr	r4, [r1, #16]
 8024c18:	42a3      	cmp	r3, r4
 8024c1a:	4607      	mov	r7, r0
 8024c1c:	f2c0 8081 	blt.w	8024d22 <quorem+0x112>
 8024c20:	3c01      	subs	r4, #1
 8024c22:	f101 0814 	add.w	r8, r1, #20
 8024c26:	f100 0514 	add.w	r5, r0, #20
 8024c2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024c2e:	9301      	str	r3, [sp, #4]
 8024c30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8024c34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024c38:	3301      	adds	r3, #1
 8024c3a:	429a      	cmp	r2, r3
 8024c3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8024c40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8024c44:	fbb2 f6f3 	udiv	r6, r2, r3
 8024c48:	d331      	bcc.n	8024cae <quorem+0x9e>
 8024c4a:	f04f 0e00 	mov.w	lr, #0
 8024c4e:	4640      	mov	r0, r8
 8024c50:	46ac      	mov	ip, r5
 8024c52:	46f2      	mov	sl, lr
 8024c54:	f850 2b04 	ldr.w	r2, [r0], #4
 8024c58:	b293      	uxth	r3, r2
 8024c5a:	fb06 e303 	mla	r3, r6, r3, lr
 8024c5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8024c62:	b29b      	uxth	r3, r3
 8024c64:	ebaa 0303 	sub.w	r3, sl, r3
 8024c68:	0c12      	lsrs	r2, r2, #16
 8024c6a:	f8dc a000 	ldr.w	sl, [ip]
 8024c6e:	fb06 e202 	mla	r2, r6, r2, lr
 8024c72:	fa13 f38a 	uxtah	r3, r3, sl
 8024c76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8024c7a:	fa1f fa82 	uxth.w	sl, r2
 8024c7e:	f8dc 2000 	ldr.w	r2, [ip]
 8024c82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8024c86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024c8a:	b29b      	uxth	r3, r3
 8024c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024c90:	4581      	cmp	r9, r0
 8024c92:	f84c 3b04 	str.w	r3, [ip], #4
 8024c96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8024c9a:	d2db      	bcs.n	8024c54 <quorem+0x44>
 8024c9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8024ca0:	b92b      	cbnz	r3, 8024cae <quorem+0x9e>
 8024ca2:	9b01      	ldr	r3, [sp, #4]
 8024ca4:	3b04      	subs	r3, #4
 8024ca6:	429d      	cmp	r5, r3
 8024ca8:	461a      	mov	r2, r3
 8024caa:	d32e      	bcc.n	8024d0a <quorem+0xfa>
 8024cac:	613c      	str	r4, [r7, #16]
 8024cae:	4638      	mov	r0, r7
 8024cb0:	f001 f8b4 	bl	8025e1c <__mcmp>
 8024cb4:	2800      	cmp	r0, #0
 8024cb6:	db24      	blt.n	8024d02 <quorem+0xf2>
 8024cb8:	3601      	adds	r6, #1
 8024cba:	4628      	mov	r0, r5
 8024cbc:	f04f 0c00 	mov.w	ip, #0
 8024cc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8024cc4:	f8d0 e000 	ldr.w	lr, [r0]
 8024cc8:	b293      	uxth	r3, r2
 8024cca:	ebac 0303 	sub.w	r3, ip, r3
 8024cce:	0c12      	lsrs	r2, r2, #16
 8024cd0:	fa13 f38e 	uxtah	r3, r3, lr
 8024cd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8024cd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024cdc:	b29b      	uxth	r3, r3
 8024cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024ce2:	45c1      	cmp	r9, r8
 8024ce4:	f840 3b04 	str.w	r3, [r0], #4
 8024ce8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8024cec:	d2e8      	bcs.n	8024cc0 <quorem+0xb0>
 8024cee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024cf6:	b922      	cbnz	r2, 8024d02 <quorem+0xf2>
 8024cf8:	3b04      	subs	r3, #4
 8024cfa:	429d      	cmp	r5, r3
 8024cfc:	461a      	mov	r2, r3
 8024cfe:	d30a      	bcc.n	8024d16 <quorem+0x106>
 8024d00:	613c      	str	r4, [r7, #16]
 8024d02:	4630      	mov	r0, r6
 8024d04:	b003      	add	sp, #12
 8024d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d0a:	6812      	ldr	r2, [r2, #0]
 8024d0c:	3b04      	subs	r3, #4
 8024d0e:	2a00      	cmp	r2, #0
 8024d10:	d1cc      	bne.n	8024cac <quorem+0x9c>
 8024d12:	3c01      	subs	r4, #1
 8024d14:	e7c7      	b.n	8024ca6 <quorem+0x96>
 8024d16:	6812      	ldr	r2, [r2, #0]
 8024d18:	3b04      	subs	r3, #4
 8024d1a:	2a00      	cmp	r2, #0
 8024d1c:	d1f0      	bne.n	8024d00 <quorem+0xf0>
 8024d1e:	3c01      	subs	r4, #1
 8024d20:	e7eb      	b.n	8024cfa <quorem+0xea>
 8024d22:	2000      	movs	r0, #0
 8024d24:	e7ee      	b.n	8024d04 <quorem+0xf4>
	...

08024d28 <_dtoa_r>:
 8024d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d2c:	ed2d 8b02 	vpush	{d8}
 8024d30:	ec57 6b10 	vmov	r6, r7, d0
 8024d34:	b095      	sub	sp, #84	; 0x54
 8024d36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8024d38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8024d3c:	9105      	str	r1, [sp, #20]
 8024d3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8024d42:	4604      	mov	r4, r0
 8024d44:	9209      	str	r2, [sp, #36]	; 0x24
 8024d46:	930f      	str	r3, [sp, #60]	; 0x3c
 8024d48:	b975      	cbnz	r5, 8024d68 <_dtoa_r+0x40>
 8024d4a:	2010      	movs	r0, #16
 8024d4c:	f7ff f9e8 	bl	8024120 <malloc>
 8024d50:	4602      	mov	r2, r0
 8024d52:	6260      	str	r0, [r4, #36]	; 0x24
 8024d54:	b920      	cbnz	r0, 8024d60 <_dtoa_r+0x38>
 8024d56:	4bb2      	ldr	r3, [pc, #712]	; (8025020 <_dtoa_r+0x2f8>)
 8024d58:	21ea      	movs	r1, #234	; 0xea
 8024d5a:	48b2      	ldr	r0, [pc, #712]	; (8025024 <_dtoa_r+0x2fc>)
 8024d5c:	f001 fac8 	bl	80262f0 <__assert_func>
 8024d60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8024d64:	6005      	str	r5, [r0, #0]
 8024d66:	60c5      	str	r5, [r0, #12]
 8024d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024d6a:	6819      	ldr	r1, [r3, #0]
 8024d6c:	b151      	cbz	r1, 8024d84 <_dtoa_r+0x5c>
 8024d6e:	685a      	ldr	r2, [r3, #4]
 8024d70:	604a      	str	r2, [r1, #4]
 8024d72:	2301      	movs	r3, #1
 8024d74:	4093      	lsls	r3, r2
 8024d76:	608b      	str	r3, [r1, #8]
 8024d78:	4620      	mov	r0, r4
 8024d7a:	f000 fe11 	bl	80259a0 <_Bfree>
 8024d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024d80:	2200      	movs	r2, #0
 8024d82:	601a      	str	r2, [r3, #0]
 8024d84:	1e3b      	subs	r3, r7, #0
 8024d86:	bfb9      	ittee	lt
 8024d88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8024d8c:	9303      	strlt	r3, [sp, #12]
 8024d8e:	2300      	movge	r3, #0
 8024d90:	f8c8 3000 	strge.w	r3, [r8]
 8024d94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8024d98:	4ba3      	ldr	r3, [pc, #652]	; (8025028 <_dtoa_r+0x300>)
 8024d9a:	bfbc      	itt	lt
 8024d9c:	2201      	movlt	r2, #1
 8024d9e:	f8c8 2000 	strlt.w	r2, [r8]
 8024da2:	ea33 0309 	bics.w	r3, r3, r9
 8024da6:	d11b      	bne.n	8024de0 <_dtoa_r+0xb8>
 8024da8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024daa:	f242 730f 	movw	r3, #9999	; 0x270f
 8024dae:	6013      	str	r3, [r2, #0]
 8024db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8024db4:	4333      	orrs	r3, r6
 8024db6:	f000 857a 	beq.w	80258ae <_dtoa_r+0xb86>
 8024dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024dbc:	b963      	cbnz	r3, 8024dd8 <_dtoa_r+0xb0>
 8024dbe:	4b9b      	ldr	r3, [pc, #620]	; (802502c <_dtoa_r+0x304>)
 8024dc0:	e024      	b.n	8024e0c <_dtoa_r+0xe4>
 8024dc2:	4b9b      	ldr	r3, [pc, #620]	; (8025030 <_dtoa_r+0x308>)
 8024dc4:	9300      	str	r3, [sp, #0]
 8024dc6:	3308      	adds	r3, #8
 8024dc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024dca:	6013      	str	r3, [r2, #0]
 8024dcc:	9800      	ldr	r0, [sp, #0]
 8024dce:	b015      	add	sp, #84	; 0x54
 8024dd0:	ecbd 8b02 	vpop	{d8}
 8024dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024dd8:	4b94      	ldr	r3, [pc, #592]	; (802502c <_dtoa_r+0x304>)
 8024dda:	9300      	str	r3, [sp, #0]
 8024ddc:	3303      	adds	r3, #3
 8024dde:	e7f3      	b.n	8024dc8 <_dtoa_r+0xa0>
 8024de0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024de4:	2200      	movs	r2, #0
 8024de6:	ec51 0b17 	vmov	r0, r1, d7
 8024dea:	2300      	movs	r3, #0
 8024dec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8024df0:	f7eb fda2 	bl	8010938 <__aeabi_dcmpeq>
 8024df4:	4680      	mov	r8, r0
 8024df6:	b158      	cbz	r0, 8024e10 <_dtoa_r+0xe8>
 8024df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024dfa:	2301      	movs	r3, #1
 8024dfc:	6013      	str	r3, [r2, #0]
 8024dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024e00:	2b00      	cmp	r3, #0
 8024e02:	f000 8551 	beq.w	80258a8 <_dtoa_r+0xb80>
 8024e06:	488b      	ldr	r0, [pc, #556]	; (8025034 <_dtoa_r+0x30c>)
 8024e08:	6018      	str	r0, [r3, #0]
 8024e0a:	1e43      	subs	r3, r0, #1
 8024e0c:	9300      	str	r3, [sp, #0]
 8024e0e:	e7dd      	b.n	8024dcc <_dtoa_r+0xa4>
 8024e10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8024e14:	aa12      	add	r2, sp, #72	; 0x48
 8024e16:	a913      	add	r1, sp, #76	; 0x4c
 8024e18:	4620      	mov	r0, r4
 8024e1a:	f001 f8a3 	bl	8025f64 <__d2b>
 8024e1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8024e22:	4683      	mov	fp, r0
 8024e24:	2d00      	cmp	r5, #0
 8024e26:	d07c      	beq.n	8024f22 <_dtoa_r+0x1fa>
 8024e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024e2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8024e2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8024e32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8024e36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8024e3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8024e3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8024e42:	4b7d      	ldr	r3, [pc, #500]	; (8025038 <_dtoa_r+0x310>)
 8024e44:	2200      	movs	r2, #0
 8024e46:	4630      	mov	r0, r6
 8024e48:	4639      	mov	r1, r7
 8024e4a:	f7eb f955 	bl	80100f8 <__aeabi_dsub>
 8024e4e:	a36e      	add	r3, pc, #440	; (adr r3, 8025008 <_dtoa_r+0x2e0>)
 8024e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e54:	f7eb fb08 	bl	8010468 <__aeabi_dmul>
 8024e58:	a36d      	add	r3, pc, #436	; (adr r3, 8025010 <_dtoa_r+0x2e8>)
 8024e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e5e:	f7eb f94d 	bl	80100fc <__adddf3>
 8024e62:	4606      	mov	r6, r0
 8024e64:	4628      	mov	r0, r5
 8024e66:	460f      	mov	r7, r1
 8024e68:	f7eb fa94 	bl	8010394 <__aeabi_i2d>
 8024e6c:	a36a      	add	r3, pc, #424	; (adr r3, 8025018 <_dtoa_r+0x2f0>)
 8024e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e72:	f7eb faf9 	bl	8010468 <__aeabi_dmul>
 8024e76:	4602      	mov	r2, r0
 8024e78:	460b      	mov	r3, r1
 8024e7a:	4630      	mov	r0, r6
 8024e7c:	4639      	mov	r1, r7
 8024e7e:	f7eb f93d 	bl	80100fc <__adddf3>
 8024e82:	4606      	mov	r6, r0
 8024e84:	460f      	mov	r7, r1
 8024e86:	f7eb fd9f 	bl	80109c8 <__aeabi_d2iz>
 8024e8a:	2200      	movs	r2, #0
 8024e8c:	4682      	mov	sl, r0
 8024e8e:	2300      	movs	r3, #0
 8024e90:	4630      	mov	r0, r6
 8024e92:	4639      	mov	r1, r7
 8024e94:	f7eb fd5a 	bl	801094c <__aeabi_dcmplt>
 8024e98:	b148      	cbz	r0, 8024eae <_dtoa_r+0x186>
 8024e9a:	4650      	mov	r0, sl
 8024e9c:	f7eb fa7a 	bl	8010394 <__aeabi_i2d>
 8024ea0:	4632      	mov	r2, r6
 8024ea2:	463b      	mov	r3, r7
 8024ea4:	f7eb fd48 	bl	8010938 <__aeabi_dcmpeq>
 8024ea8:	b908      	cbnz	r0, 8024eae <_dtoa_r+0x186>
 8024eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024eae:	f1ba 0f16 	cmp.w	sl, #22
 8024eb2:	d854      	bhi.n	8024f5e <_dtoa_r+0x236>
 8024eb4:	4b61      	ldr	r3, [pc, #388]	; (802503c <_dtoa_r+0x314>)
 8024eb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8024eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ebe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8024ec2:	f7eb fd43 	bl	801094c <__aeabi_dcmplt>
 8024ec6:	2800      	cmp	r0, #0
 8024ec8:	d04b      	beq.n	8024f62 <_dtoa_r+0x23a>
 8024eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024ece:	2300      	movs	r3, #0
 8024ed0:	930e      	str	r3, [sp, #56]	; 0x38
 8024ed2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024ed4:	1b5d      	subs	r5, r3, r5
 8024ed6:	1e6b      	subs	r3, r5, #1
 8024ed8:	9304      	str	r3, [sp, #16]
 8024eda:	bf43      	ittte	mi
 8024edc:	2300      	movmi	r3, #0
 8024ede:	f1c5 0801 	rsbmi	r8, r5, #1
 8024ee2:	9304      	strmi	r3, [sp, #16]
 8024ee4:	f04f 0800 	movpl.w	r8, #0
 8024ee8:	f1ba 0f00 	cmp.w	sl, #0
 8024eec:	db3b      	blt.n	8024f66 <_dtoa_r+0x23e>
 8024eee:	9b04      	ldr	r3, [sp, #16]
 8024ef0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8024ef4:	4453      	add	r3, sl
 8024ef6:	9304      	str	r3, [sp, #16]
 8024ef8:	2300      	movs	r3, #0
 8024efa:	9306      	str	r3, [sp, #24]
 8024efc:	9b05      	ldr	r3, [sp, #20]
 8024efe:	2b09      	cmp	r3, #9
 8024f00:	d869      	bhi.n	8024fd6 <_dtoa_r+0x2ae>
 8024f02:	2b05      	cmp	r3, #5
 8024f04:	bfc4      	itt	gt
 8024f06:	3b04      	subgt	r3, #4
 8024f08:	9305      	strgt	r3, [sp, #20]
 8024f0a:	9b05      	ldr	r3, [sp, #20]
 8024f0c:	f1a3 0302 	sub.w	r3, r3, #2
 8024f10:	bfcc      	ite	gt
 8024f12:	2500      	movgt	r5, #0
 8024f14:	2501      	movle	r5, #1
 8024f16:	2b03      	cmp	r3, #3
 8024f18:	d869      	bhi.n	8024fee <_dtoa_r+0x2c6>
 8024f1a:	e8df f003 	tbb	[pc, r3]
 8024f1e:	4e2c      	.short	0x4e2c
 8024f20:	5a4c      	.short	0x5a4c
 8024f22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8024f26:	441d      	add	r5, r3
 8024f28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8024f2c:	2b20      	cmp	r3, #32
 8024f2e:	bfc1      	itttt	gt
 8024f30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8024f34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8024f38:	fa09 f303 	lslgt.w	r3, r9, r3
 8024f3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8024f40:	bfda      	itte	le
 8024f42:	f1c3 0320 	rsble	r3, r3, #32
 8024f46:	fa06 f003 	lslle.w	r0, r6, r3
 8024f4a:	4318      	orrgt	r0, r3
 8024f4c:	f7eb fa12 	bl	8010374 <__aeabi_ui2d>
 8024f50:	2301      	movs	r3, #1
 8024f52:	4606      	mov	r6, r0
 8024f54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8024f58:	3d01      	subs	r5, #1
 8024f5a:	9310      	str	r3, [sp, #64]	; 0x40
 8024f5c:	e771      	b.n	8024e42 <_dtoa_r+0x11a>
 8024f5e:	2301      	movs	r3, #1
 8024f60:	e7b6      	b.n	8024ed0 <_dtoa_r+0x1a8>
 8024f62:	900e      	str	r0, [sp, #56]	; 0x38
 8024f64:	e7b5      	b.n	8024ed2 <_dtoa_r+0x1aa>
 8024f66:	f1ca 0300 	rsb	r3, sl, #0
 8024f6a:	9306      	str	r3, [sp, #24]
 8024f6c:	2300      	movs	r3, #0
 8024f6e:	eba8 080a 	sub.w	r8, r8, sl
 8024f72:	930d      	str	r3, [sp, #52]	; 0x34
 8024f74:	e7c2      	b.n	8024efc <_dtoa_r+0x1d4>
 8024f76:	2300      	movs	r3, #0
 8024f78:	9308      	str	r3, [sp, #32]
 8024f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f7c:	2b00      	cmp	r3, #0
 8024f7e:	dc39      	bgt.n	8024ff4 <_dtoa_r+0x2cc>
 8024f80:	f04f 0901 	mov.w	r9, #1
 8024f84:	f8cd 9004 	str.w	r9, [sp, #4]
 8024f88:	464b      	mov	r3, r9
 8024f8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8024f8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8024f90:	2200      	movs	r2, #0
 8024f92:	6042      	str	r2, [r0, #4]
 8024f94:	2204      	movs	r2, #4
 8024f96:	f102 0614 	add.w	r6, r2, #20
 8024f9a:	429e      	cmp	r6, r3
 8024f9c:	6841      	ldr	r1, [r0, #4]
 8024f9e:	d92f      	bls.n	8025000 <_dtoa_r+0x2d8>
 8024fa0:	4620      	mov	r0, r4
 8024fa2:	f000 fcbd 	bl	8025920 <_Balloc>
 8024fa6:	9000      	str	r0, [sp, #0]
 8024fa8:	2800      	cmp	r0, #0
 8024faa:	d14b      	bne.n	8025044 <_dtoa_r+0x31c>
 8024fac:	4b24      	ldr	r3, [pc, #144]	; (8025040 <_dtoa_r+0x318>)
 8024fae:	4602      	mov	r2, r0
 8024fb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8024fb4:	e6d1      	b.n	8024d5a <_dtoa_r+0x32>
 8024fb6:	2301      	movs	r3, #1
 8024fb8:	e7de      	b.n	8024f78 <_dtoa_r+0x250>
 8024fba:	2300      	movs	r3, #0
 8024fbc:	9308      	str	r3, [sp, #32]
 8024fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fc0:	eb0a 0903 	add.w	r9, sl, r3
 8024fc4:	f109 0301 	add.w	r3, r9, #1
 8024fc8:	2b01      	cmp	r3, #1
 8024fca:	9301      	str	r3, [sp, #4]
 8024fcc:	bfb8      	it	lt
 8024fce:	2301      	movlt	r3, #1
 8024fd0:	e7dd      	b.n	8024f8e <_dtoa_r+0x266>
 8024fd2:	2301      	movs	r3, #1
 8024fd4:	e7f2      	b.n	8024fbc <_dtoa_r+0x294>
 8024fd6:	2501      	movs	r5, #1
 8024fd8:	2300      	movs	r3, #0
 8024fda:	9305      	str	r3, [sp, #20]
 8024fdc:	9508      	str	r5, [sp, #32]
 8024fde:	f04f 39ff 	mov.w	r9, #4294967295
 8024fe2:	2200      	movs	r2, #0
 8024fe4:	f8cd 9004 	str.w	r9, [sp, #4]
 8024fe8:	2312      	movs	r3, #18
 8024fea:	9209      	str	r2, [sp, #36]	; 0x24
 8024fec:	e7cf      	b.n	8024f8e <_dtoa_r+0x266>
 8024fee:	2301      	movs	r3, #1
 8024ff0:	9308      	str	r3, [sp, #32]
 8024ff2:	e7f4      	b.n	8024fde <_dtoa_r+0x2b6>
 8024ff4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8024ff8:	f8cd 9004 	str.w	r9, [sp, #4]
 8024ffc:	464b      	mov	r3, r9
 8024ffe:	e7c6      	b.n	8024f8e <_dtoa_r+0x266>
 8025000:	3101      	adds	r1, #1
 8025002:	6041      	str	r1, [r0, #4]
 8025004:	0052      	lsls	r2, r2, #1
 8025006:	e7c6      	b.n	8024f96 <_dtoa_r+0x26e>
 8025008:	636f4361 	.word	0x636f4361
 802500c:	3fd287a7 	.word	0x3fd287a7
 8025010:	8b60c8b3 	.word	0x8b60c8b3
 8025014:	3fc68a28 	.word	0x3fc68a28
 8025018:	509f79fb 	.word	0x509f79fb
 802501c:	3fd34413 	.word	0x3fd34413
 8025020:	080270f5 	.word	0x080270f5
 8025024:	0802710c 	.word	0x0802710c
 8025028:	7ff00000 	.word	0x7ff00000
 802502c:	080270f1 	.word	0x080270f1
 8025030:	080270e8 	.word	0x080270e8
 8025034:	080270c5 	.word	0x080270c5
 8025038:	3ff80000 	.word	0x3ff80000
 802503c:	08027208 	.word	0x08027208
 8025040:	0802716b 	.word	0x0802716b
 8025044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025046:	9a00      	ldr	r2, [sp, #0]
 8025048:	601a      	str	r2, [r3, #0]
 802504a:	9b01      	ldr	r3, [sp, #4]
 802504c:	2b0e      	cmp	r3, #14
 802504e:	f200 80ad 	bhi.w	80251ac <_dtoa_r+0x484>
 8025052:	2d00      	cmp	r5, #0
 8025054:	f000 80aa 	beq.w	80251ac <_dtoa_r+0x484>
 8025058:	f1ba 0f00 	cmp.w	sl, #0
 802505c:	dd36      	ble.n	80250cc <_dtoa_r+0x3a4>
 802505e:	4ac3      	ldr	r2, [pc, #780]	; (802536c <_dtoa_r+0x644>)
 8025060:	f00a 030f 	and.w	r3, sl, #15
 8025064:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8025068:	ed93 7b00 	vldr	d7, [r3]
 802506c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8025070:	ea4f 172a 	mov.w	r7, sl, asr #4
 8025074:	eeb0 8a47 	vmov.f32	s16, s14
 8025078:	eef0 8a67 	vmov.f32	s17, s15
 802507c:	d016      	beq.n	80250ac <_dtoa_r+0x384>
 802507e:	4bbc      	ldr	r3, [pc, #752]	; (8025370 <_dtoa_r+0x648>)
 8025080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8025084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025088:	f7eb fb18 	bl	80106bc <__aeabi_ddiv>
 802508c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025090:	f007 070f 	and.w	r7, r7, #15
 8025094:	2503      	movs	r5, #3
 8025096:	4eb6      	ldr	r6, [pc, #728]	; (8025370 <_dtoa_r+0x648>)
 8025098:	b957      	cbnz	r7, 80250b0 <_dtoa_r+0x388>
 802509a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802509e:	ec53 2b18 	vmov	r2, r3, d8
 80250a2:	f7eb fb0b 	bl	80106bc <__aeabi_ddiv>
 80250a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80250aa:	e029      	b.n	8025100 <_dtoa_r+0x3d8>
 80250ac:	2502      	movs	r5, #2
 80250ae:	e7f2      	b.n	8025096 <_dtoa_r+0x36e>
 80250b0:	07f9      	lsls	r1, r7, #31
 80250b2:	d508      	bpl.n	80250c6 <_dtoa_r+0x39e>
 80250b4:	ec51 0b18 	vmov	r0, r1, d8
 80250b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80250bc:	f7eb f9d4 	bl	8010468 <__aeabi_dmul>
 80250c0:	ec41 0b18 	vmov	d8, r0, r1
 80250c4:	3501      	adds	r5, #1
 80250c6:	107f      	asrs	r7, r7, #1
 80250c8:	3608      	adds	r6, #8
 80250ca:	e7e5      	b.n	8025098 <_dtoa_r+0x370>
 80250cc:	f000 80a6 	beq.w	802521c <_dtoa_r+0x4f4>
 80250d0:	f1ca 0600 	rsb	r6, sl, #0
 80250d4:	4ba5      	ldr	r3, [pc, #660]	; (802536c <_dtoa_r+0x644>)
 80250d6:	4fa6      	ldr	r7, [pc, #664]	; (8025370 <_dtoa_r+0x648>)
 80250d8:	f006 020f 	and.w	r2, r6, #15
 80250dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80250e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80250e8:	f7eb f9be 	bl	8010468 <__aeabi_dmul>
 80250ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80250f0:	1136      	asrs	r6, r6, #4
 80250f2:	2300      	movs	r3, #0
 80250f4:	2502      	movs	r5, #2
 80250f6:	2e00      	cmp	r6, #0
 80250f8:	f040 8085 	bne.w	8025206 <_dtoa_r+0x4de>
 80250fc:	2b00      	cmp	r3, #0
 80250fe:	d1d2      	bne.n	80250a6 <_dtoa_r+0x37e>
 8025100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025102:	2b00      	cmp	r3, #0
 8025104:	f000 808c 	beq.w	8025220 <_dtoa_r+0x4f8>
 8025108:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802510c:	4b99      	ldr	r3, [pc, #612]	; (8025374 <_dtoa_r+0x64c>)
 802510e:	2200      	movs	r2, #0
 8025110:	4630      	mov	r0, r6
 8025112:	4639      	mov	r1, r7
 8025114:	f7eb fc1a 	bl	801094c <__aeabi_dcmplt>
 8025118:	2800      	cmp	r0, #0
 802511a:	f000 8081 	beq.w	8025220 <_dtoa_r+0x4f8>
 802511e:	9b01      	ldr	r3, [sp, #4]
 8025120:	2b00      	cmp	r3, #0
 8025122:	d07d      	beq.n	8025220 <_dtoa_r+0x4f8>
 8025124:	f1b9 0f00 	cmp.w	r9, #0
 8025128:	dd3c      	ble.n	80251a4 <_dtoa_r+0x47c>
 802512a:	f10a 33ff 	add.w	r3, sl, #4294967295
 802512e:	9307      	str	r3, [sp, #28]
 8025130:	2200      	movs	r2, #0
 8025132:	4b91      	ldr	r3, [pc, #580]	; (8025378 <_dtoa_r+0x650>)
 8025134:	4630      	mov	r0, r6
 8025136:	4639      	mov	r1, r7
 8025138:	f7eb f996 	bl	8010468 <__aeabi_dmul>
 802513c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025140:	3501      	adds	r5, #1
 8025142:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8025146:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802514a:	4628      	mov	r0, r5
 802514c:	f7eb f922 	bl	8010394 <__aeabi_i2d>
 8025150:	4632      	mov	r2, r6
 8025152:	463b      	mov	r3, r7
 8025154:	f7eb f988 	bl	8010468 <__aeabi_dmul>
 8025158:	4b88      	ldr	r3, [pc, #544]	; (802537c <_dtoa_r+0x654>)
 802515a:	2200      	movs	r2, #0
 802515c:	f7ea ffce 	bl	80100fc <__adddf3>
 8025160:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8025164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025168:	9303      	str	r3, [sp, #12]
 802516a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802516c:	2b00      	cmp	r3, #0
 802516e:	d15c      	bne.n	802522a <_dtoa_r+0x502>
 8025170:	4b83      	ldr	r3, [pc, #524]	; (8025380 <_dtoa_r+0x658>)
 8025172:	2200      	movs	r2, #0
 8025174:	4630      	mov	r0, r6
 8025176:	4639      	mov	r1, r7
 8025178:	f7ea ffbe 	bl	80100f8 <__aeabi_dsub>
 802517c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025180:	4606      	mov	r6, r0
 8025182:	460f      	mov	r7, r1
 8025184:	f7eb fc00 	bl	8010988 <__aeabi_dcmpgt>
 8025188:	2800      	cmp	r0, #0
 802518a:	f040 8296 	bne.w	80256ba <_dtoa_r+0x992>
 802518e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8025192:	4630      	mov	r0, r6
 8025194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025198:	4639      	mov	r1, r7
 802519a:	f7eb fbd7 	bl	801094c <__aeabi_dcmplt>
 802519e:	2800      	cmp	r0, #0
 80251a0:	f040 8288 	bne.w	80256b4 <_dtoa_r+0x98c>
 80251a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80251a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80251ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80251ae:	2b00      	cmp	r3, #0
 80251b0:	f2c0 8158 	blt.w	8025464 <_dtoa_r+0x73c>
 80251b4:	f1ba 0f0e 	cmp.w	sl, #14
 80251b8:	f300 8154 	bgt.w	8025464 <_dtoa_r+0x73c>
 80251bc:	4b6b      	ldr	r3, [pc, #428]	; (802536c <_dtoa_r+0x644>)
 80251be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80251c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80251c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251c8:	2b00      	cmp	r3, #0
 80251ca:	f280 80e3 	bge.w	8025394 <_dtoa_r+0x66c>
 80251ce:	9b01      	ldr	r3, [sp, #4]
 80251d0:	2b00      	cmp	r3, #0
 80251d2:	f300 80df 	bgt.w	8025394 <_dtoa_r+0x66c>
 80251d6:	f040 826d 	bne.w	80256b4 <_dtoa_r+0x98c>
 80251da:	4b69      	ldr	r3, [pc, #420]	; (8025380 <_dtoa_r+0x658>)
 80251dc:	2200      	movs	r2, #0
 80251de:	4640      	mov	r0, r8
 80251e0:	4649      	mov	r1, r9
 80251e2:	f7eb f941 	bl	8010468 <__aeabi_dmul>
 80251e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80251ea:	f7eb fbc3 	bl	8010974 <__aeabi_dcmpge>
 80251ee:	9e01      	ldr	r6, [sp, #4]
 80251f0:	4637      	mov	r7, r6
 80251f2:	2800      	cmp	r0, #0
 80251f4:	f040 8243 	bne.w	802567e <_dtoa_r+0x956>
 80251f8:	9d00      	ldr	r5, [sp, #0]
 80251fa:	2331      	movs	r3, #49	; 0x31
 80251fc:	f805 3b01 	strb.w	r3, [r5], #1
 8025200:	f10a 0a01 	add.w	sl, sl, #1
 8025204:	e23f      	b.n	8025686 <_dtoa_r+0x95e>
 8025206:	07f2      	lsls	r2, r6, #31
 8025208:	d505      	bpl.n	8025216 <_dtoa_r+0x4ee>
 802520a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802520e:	f7eb f92b 	bl	8010468 <__aeabi_dmul>
 8025212:	3501      	adds	r5, #1
 8025214:	2301      	movs	r3, #1
 8025216:	1076      	asrs	r6, r6, #1
 8025218:	3708      	adds	r7, #8
 802521a:	e76c      	b.n	80250f6 <_dtoa_r+0x3ce>
 802521c:	2502      	movs	r5, #2
 802521e:	e76f      	b.n	8025100 <_dtoa_r+0x3d8>
 8025220:	9b01      	ldr	r3, [sp, #4]
 8025222:	f8cd a01c 	str.w	sl, [sp, #28]
 8025226:	930c      	str	r3, [sp, #48]	; 0x30
 8025228:	e78d      	b.n	8025146 <_dtoa_r+0x41e>
 802522a:	9900      	ldr	r1, [sp, #0]
 802522c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802522e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025230:	4b4e      	ldr	r3, [pc, #312]	; (802536c <_dtoa_r+0x644>)
 8025232:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025236:	4401      	add	r1, r0
 8025238:	9102      	str	r1, [sp, #8]
 802523a:	9908      	ldr	r1, [sp, #32]
 802523c:	eeb0 8a47 	vmov.f32	s16, s14
 8025240:	eef0 8a67 	vmov.f32	s17, s15
 8025244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025248:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802524c:	2900      	cmp	r1, #0
 802524e:	d045      	beq.n	80252dc <_dtoa_r+0x5b4>
 8025250:	494c      	ldr	r1, [pc, #304]	; (8025384 <_dtoa_r+0x65c>)
 8025252:	2000      	movs	r0, #0
 8025254:	f7eb fa32 	bl	80106bc <__aeabi_ddiv>
 8025258:	ec53 2b18 	vmov	r2, r3, d8
 802525c:	f7ea ff4c 	bl	80100f8 <__aeabi_dsub>
 8025260:	9d00      	ldr	r5, [sp, #0]
 8025262:	ec41 0b18 	vmov	d8, r0, r1
 8025266:	4639      	mov	r1, r7
 8025268:	4630      	mov	r0, r6
 802526a:	f7eb fbad 	bl	80109c8 <__aeabi_d2iz>
 802526e:	900c      	str	r0, [sp, #48]	; 0x30
 8025270:	f7eb f890 	bl	8010394 <__aeabi_i2d>
 8025274:	4602      	mov	r2, r0
 8025276:	460b      	mov	r3, r1
 8025278:	4630      	mov	r0, r6
 802527a:	4639      	mov	r1, r7
 802527c:	f7ea ff3c 	bl	80100f8 <__aeabi_dsub>
 8025280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025282:	3330      	adds	r3, #48	; 0x30
 8025284:	f805 3b01 	strb.w	r3, [r5], #1
 8025288:	ec53 2b18 	vmov	r2, r3, d8
 802528c:	4606      	mov	r6, r0
 802528e:	460f      	mov	r7, r1
 8025290:	f7eb fb5c 	bl	801094c <__aeabi_dcmplt>
 8025294:	2800      	cmp	r0, #0
 8025296:	d165      	bne.n	8025364 <_dtoa_r+0x63c>
 8025298:	4632      	mov	r2, r6
 802529a:	463b      	mov	r3, r7
 802529c:	4935      	ldr	r1, [pc, #212]	; (8025374 <_dtoa_r+0x64c>)
 802529e:	2000      	movs	r0, #0
 80252a0:	f7ea ff2a 	bl	80100f8 <__aeabi_dsub>
 80252a4:	ec53 2b18 	vmov	r2, r3, d8
 80252a8:	f7eb fb50 	bl	801094c <__aeabi_dcmplt>
 80252ac:	2800      	cmp	r0, #0
 80252ae:	f040 80b9 	bne.w	8025424 <_dtoa_r+0x6fc>
 80252b2:	9b02      	ldr	r3, [sp, #8]
 80252b4:	429d      	cmp	r5, r3
 80252b6:	f43f af75 	beq.w	80251a4 <_dtoa_r+0x47c>
 80252ba:	4b2f      	ldr	r3, [pc, #188]	; (8025378 <_dtoa_r+0x650>)
 80252bc:	ec51 0b18 	vmov	r0, r1, d8
 80252c0:	2200      	movs	r2, #0
 80252c2:	f7eb f8d1 	bl	8010468 <__aeabi_dmul>
 80252c6:	4b2c      	ldr	r3, [pc, #176]	; (8025378 <_dtoa_r+0x650>)
 80252c8:	ec41 0b18 	vmov	d8, r0, r1
 80252cc:	2200      	movs	r2, #0
 80252ce:	4630      	mov	r0, r6
 80252d0:	4639      	mov	r1, r7
 80252d2:	f7eb f8c9 	bl	8010468 <__aeabi_dmul>
 80252d6:	4606      	mov	r6, r0
 80252d8:	460f      	mov	r7, r1
 80252da:	e7c4      	b.n	8025266 <_dtoa_r+0x53e>
 80252dc:	ec51 0b17 	vmov	r0, r1, d7
 80252e0:	f7eb f8c2 	bl	8010468 <__aeabi_dmul>
 80252e4:	9b02      	ldr	r3, [sp, #8]
 80252e6:	9d00      	ldr	r5, [sp, #0]
 80252e8:	930c      	str	r3, [sp, #48]	; 0x30
 80252ea:	ec41 0b18 	vmov	d8, r0, r1
 80252ee:	4639      	mov	r1, r7
 80252f0:	4630      	mov	r0, r6
 80252f2:	f7eb fb69 	bl	80109c8 <__aeabi_d2iz>
 80252f6:	9011      	str	r0, [sp, #68]	; 0x44
 80252f8:	f7eb f84c 	bl	8010394 <__aeabi_i2d>
 80252fc:	4602      	mov	r2, r0
 80252fe:	460b      	mov	r3, r1
 8025300:	4630      	mov	r0, r6
 8025302:	4639      	mov	r1, r7
 8025304:	f7ea fef8 	bl	80100f8 <__aeabi_dsub>
 8025308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802530a:	3330      	adds	r3, #48	; 0x30
 802530c:	f805 3b01 	strb.w	r3, [r5], #1
 8025310:	9b02      	ldr	r3, [sp, #8]
 8025312:	429d      	cmp	r5, r3
 8025314:	4606      	mov	r6, r0
 8025316:	460f      	mov	r7, r1
 8025318:	f04f 0200 	mov.w	r2, #0
 802531c:	d134      	bne.n	8025388 <_dtoa_r+0x660>
 802531e:	4b19      	ldr	r3, [pc, #100]	; (8025384 <_dtoa_r+0x65c>)
 8025320:	ec51 0b18 	vmov	r0, r1, d8
 8025324:	f7ea feea 	bl	80100fc <__adddf3>
 8025328:	4602      	mov	r2, r0
 802532a:	460b      	mov	r3, r1
 802532c:	4630      	mov	r0, r6
 802532e:	4639      	mov	r1, r7
 8025330:	f7eb fb2a 	bl	8010988 <__aeabi_dcmpgt>
 8025334:	2800      	cmp	r0, #0
 8025336:	d175      	bne.n	8025424 <_dtoa_r+0x6fc>
 8025338:	ec53 2b18 	vmov	r2, r3, d8
 802533c:	4911      	ldr	r1, [pc, #68]	; (8025384 <_dtoa_r+0x65c>)
 802533e:	2000      	movs	r0, #0
 8025340:	f7ea feda 	bl	80100f8 <__aeabi_dsub>
 8025344:	4602      	mov	r2, r0
 8025346:	460b      	mov	r3, r1
 8025348:	4630      	mov	r0, r6
 802534a:	4639      	mov	r1, r7
 802534c:	f7eb fafe 	bl	801094c <__aeabi_dcmplt>
 8025350:	2800      	cmp	r0, #0
 8025352:	f43f af27 	beq.w	80251a4 <_dtoa_r+0x47c>
 8025356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025358:	1e6b      	subs	r3, r5, #1
 802535a:	930c      	str	r3, [sp, #48]	; 0x30
 802535c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025360:	2b30      	cmp	r3, #48	; 0x30
 8025362:	d0f8      	beq.n	8025356 <_dtoa_r+0x62e>
 8025364:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8025368:	e04a      	b.n	8025400 <_dtoa_r+0x6d8>
 802536a:	bf00      	nop
 802536c:	08027208 	.word	0x08027208
 8025370:	080271e0 	.word	0x080271e0
 8025374:	3ff00000 	.word	0x3ff00000
 8025378:	40240000 	.word	0x40240000
 802537c:	401c0000 	.word	0x401c0000
 8025380:	40140000 	.word	0x40140000
 8025384:	3fe00000 	.word	0x3fe00000
 8025388:	4baf      	ldr	r3, [pc, #700]	; (8025648 <_dtoa_r+0x920>)
 802538a:	f7eb f86d 	bl	8010468 <__aeabi_dmul>
 802538e:	4606      	mov	r6, r0
 8025390:	460f      	mov	r7, r1
 8025392:	e7ac      	b.n	80252ee <_dtoa_r+0x5c6>
 8025394:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8025398:	9d00      	ldr	r5, [sp, #0]
 802539a:	4642      	mov	r2, r8
 802539c:	464b      	mov	r3, r9
 802539e:	4630      	mov	r0, r6
 80253a0:	4639      	mov	r1, r7
 80253a2:	f7eb f98b 	bl	80106bc <__aeabi_ddiv>
 80253a6:	f7eb fb0f 	bl	80109c8 <__aeabi_d2iz>
 80253aa:	9002      	str	r0, [sp, #8]
 80253ac:	f7ea fff2 	bl	8010394 <__aeabi_i2d>
 80253b0:	4642      	mov	r2, r8
 80253b2:	464b      	mov	r3, r9
 80253b4:	f7eb f858 	bl	8010468 <__aeabi_dmul>
 80253b8:	4602      	mov	r2, r0
 80253ba:	460b      	mov	r3, r1
 80253bc:	4630      	mov	r0, r6
 80253be:	4639      	mov	r1, r7
 80253c0:	f7ea fe9a 	bl	80100f8 <__aeabi_dsub>
 80253c4:	9e02      	ldr	r6, [sp, #8]
 80253c6:	9f01      	ldr	r7, [sp, #4]
 80253c8:	3630      	adds	r6, #48	; 0x30
 80253ca:	f805 6b01 	strb.w	r6, [r5], #1
 80253ce:	9e00      	ldr	r6, [sp, #0]
 80253d0:	1bae      	subs	r6, r5, r6
 80253d2:	42b7      	cmp	r7, r6
 80253d4:	4602      	mov	r2, r0
 80253d6:	460b      	mov	r3, r1
 80253d8:	d137      	bne.n	802544a <_dtoa_r+0x722>
 80253da:	f7ea fe8f 	bl	80100fc <__adddf3>
 80253de:	4642      	mov	r2, r8
 80253e0:	464b      	mov	r3, r9
 80253e2:	4606      	mov	r6, r0
 80253e4:	460f      	mov	r7, r1
 80253e6:	f7eb facf 	bl	8010988 <__aeabi_dcmpgt>
 80253ea:	b9c8      	cbnz	r0, 8025420 <_dtoa_r+0x6f8>
 80253ec:	4642      	mov	r2, r8
 80253ee:	464b      	mov	r3, r9
 80253f0:	4630      	mov	r0, r6
 80253f2:	4639      	mov	r1, r7
 80253f4:	f7eb faa0 	bl	8010938 <__aeabi_dcmpeq>
 80253f8:	b110      	cbz	r0, 8025400 <_dtoa_r+0x6d8>
 80253fa:	9b02      	ldr	r3, [sp, #8]
 80253fc:	07d9      	lsls	r1, r3, #31
 80253fe:	d40f      	bmi.n	8025420 <_dtoa_r+0x6f8>
 8025400:	4620      	mov	r0, r4
 8025402:	4659      	mov	r1, fp
 8025404:	f000 facc 	bl	80259a0 <_Bfree>
 8025408:	2300      	movs	r3, #0
 802540a:	702b      	strb	r3, [r5, #0]
 802540c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802540e:	f10a 0001 	add.w	r0, sl, #1
 8025412:	6018      	str	r0, [r3, #0]
 8025414:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025416:	2b00      	cmp	r3, #0
 8025418:	f43f acd8 	beq.w	8024dcc <_dtoa_r+0xa4>
 802541c:	601d      	str	r5, [r3, #0]
 802541e:	e4d5      	b.n	8024dcc <_dtoa_r+0xa4>
 8025420:	f8cd a01c 	str.w	sl, [sp, #28]
 8025424:	462b      	mov	r3, r5
 8025426:	461d      	mov	r5, r3
 8025428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802542c:	2a39      	cmp	r2, #57	; 0x39
 802542e:	d108      	bne.n	8025442 <_dtoa_r+0x71a>
 8025430:	9a00      	ldr	r2, [sp, #0]
 8025432:	429a      	cmp	r2, r3
 8025434:	d1f7      	bne.n	8025426 <_dtoa_r+0x6fe>
 8025436:	9a07      	ldr	r2, [sp, #28]
 8025438:	9900      	ldr	r1, [sp, #0]
 802543a:	3201      	adds	r2, #1
 802543c:	9207      	str	r2, [sp, #28]
 802543e:	2230      	movs	r2, #48	; 0x30
 8025440:	700a      	strb	r2, [r1, #0]
 8025442:	781a      	ldrb	r2, [r3, #0]
 8025444:	3201      	adds	r2, #1
 8025446:	701a      	strb	r2, [r3, #0]
 8025448:	e78c      	b.n	8025364 <_dtoa_r+0x63c>
 802544a:	4b7f      	ldr	r3, [pc, #508]	; (8025648 <_dtoa_r+0x920>)
 802544c:	2200      	movs	r2, #0
 802544e:	f7eb f80b 	bl	8010468 <__aeabi_dmul>
 8025452:	2200      	movs	r2, #0
 8025454:	2300      	movs	r3, #0
 8025456:	4606      	mov	r6, r0
 8025458:	460f      	mov	r7, r1
 802545a:	f7eb fa6d 	bl	8010938 <__aeabi_dcmpeq>
 802545e:	2800      	cmp	r0, #0
 8025460:	d09b      	beq.n	802539a <_dtoa_r+0x672>
 8025462:	e7cd      	b.n	8025400 <_dtoa_r+0x6d8>
 8025464:	9a08      	ldr	r2, [sp, #32]
 8025466:	2a00      	cmp	r2, #0
 8025468:	f000 80c4 	beq.w	80255f4 <_dtoa_r+0x8cc>
 802546c:	9a05      	ldr	r2, [sp, #20]
 802546e:	2a01      	cmp	r2, #1
 8025470:	f300 80a8 	bgt.w	80255c4 <_dtoa_r+0x89c>
 8025474:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025476:	2a00      	cmp	r2, #0
 8025478:	f000 80a0 	beq.w	80255bc <_dtoa_r+0x894>
 802547c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8025480:	9e06      	ldr	r6, [sp, #24]
 8025482:	4645      	mov	r5, r8
 8025484:	9a04      	ldr	r2, [sp, #16]
 8025486:	2101      	movs	r1, #1
 8025488:	441a      	add	r2, r3
 802548a:	4620      	mov	r0, r4
 802548c:	4498      	add	r8, r3
 802548e:	9204      	str	r2, [sp, #16]
 8025490:	f000 fb42 	bl	8025b18 <__i2b>
 8025494:	4607      	mov	r7, r0
 8025496:	2d00      	cmp	r5, #0
 8025498:	dd0b      	ble.n	80254b2 <_dtoa_r+0x78a>
 802549a:	9b04      	ldr	r3, [sp, #16]
 802549c:	2b00      	cmp	r3, #0
 802549e:	dd08      	ble.n	80254b2 <_dtoa_r+0x78a>
 80254a0:	42ab      	cmp	r3, r5
 80254a2:	9a04      	ldr	r2, [sp, #16]
 80254a4:	bfa8      	it	ge
 80254a6:	462b      	movge	r3, r5
 80254a8:	eba8 0803 	sub.w	r8, r8, r3
 80254ac:	1aed      	subs	r5, r5, r3
 80254ae:	1ad3      	subs	r3, r2, r3
 80254b0:	9304      	str	r3, [sp, #16]
 80254b2:	9b06      	ldr	r3, [sp, #24]
 80254b4:	b1fb      	cbz	r3, 80254f6 <_dtoa_r+0x7ce>
 80254b6:	9b08      	ldr	r3, [sp, #32]
 80254b8:	2b00      	cmp	r3, #0
 80254ba:	f000 809f 	beq.w	80255fc <_dtoa_r+0x8d4>
 80254be:	2e00      	cmp	r6, #0
 80254c0:	dd11      	ble.n	80254e6 <_dtoa_r+0x7be>
 80254c2:	4639      	mov	r1, r7
 80254c4:	4632      	mov	r2, r6
 80254c6:	4620      	mov	r0, r4
 80254c8:	f000 fbe2 	bl	8025c90 <__pow5mult>
 80254cc:	465a      	mov	r2, fp
 80254ce:	4601      	mov	r1, r0
 80254d0:	4607      	mov	r7, r0
 80254d2:	4620      	mov	r0, r4
 80254d4:	f000 fb36 	bl	8025b44 <__multiply>
 80254d8:	4659      	mov	r1, fp
 80254da:	9007      	str	r0, [sp, #28]
 80254dc:	4620      	mov	r0, r4
 80254de:	f000 fa5f 	bl	80259a0 <_Bfree>
 80254e2:	9b07      	ldr	r3, [sp, #28]
 80254e4:	469b      	mov	fp, r3
 80254e6:	9b06      	ldr	r3, [sp, #24]
 80254e8:	1b9a      	subs	r2, r3, r6
 80254ea:	d004      	beq.n	80254f6 <_dtoa_r+0x7ce>
 80254ec:	4659      	mov	r1, fp
 80254ee:	4620      	mov	r0, r4
 80254f0:	f000 fbce 	bl	8025c90 <__pow5mult>
 80254f4:	4683      	mov	fp, r0
 80254f6:	2101      	movs	r1, #1
 80254f8:	4620      	mov	r0, r4
 80254fa:	f000 fb0d 	bl	8025b18 <__i2b>
 80254fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025500:	2b00      	cmp	r3, #0
 8025502:	4606      	mov	r6, r0
 8025504:	dd7c      	ble.n	8025600 <_dtoa_r+0x8d8>
 8025506:	461a      	mov	r2, r3
 8025508:	4601      	mov	r1, r0
 802550a:	4620      	mov	r0, r4
 802550c:	f000 fbc0 	bl	8025c90 <__pow5mult>
 8025510:	9b05      	ldr	r3, [sp, #20]
 8025512:	2b01      	cmp	r3, #1
 8025514:	4606      	mov	r6, r0
 8025516:	dd76      	ble.n	8025606 <_dtoa_r+0x8de>
 8025518:	2300      	movs	r3, #0
 802551a:	9306      	str	r3, [sp, #24]
 802551c:	6933      	ldr	r3, [r6, #16]
 802551e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8025522:	6918      	ldr	r0, [r3, #16]
 8025524:	f000 faa8 	bl	8025a78 <__hi0bits>
 8025528:	f1c0 0020 	rsb	r0, r0, #32
 802552c:	9b04      	ldr	r3, [sp, #16]
 802552e:	4418      	add	r0, r3
 8025530:	f010 001f 	ands.w	r0, r0, #31
 8025534:	f000 8086 	beq.w	8025644 <_dtoa_r+0x91c>
 8025538:	f1c0 0320 	rsb	r3, r0, #32
 802553c:	2b04      	cmp	r3, #4
 802553e:	dd7f      	ble.n	8025640 <_dtoa_r+0x918>
 8025540:	f1c0 001c 	rsb	r0, r0, #28
 8025544:	9b04      	ldr	r3, [sp, #16]
 8025546:	4403      	add	r3, r0
 8025548:	4480      	add	r8, r0
 802554a:	4405      	add	r5, r0
 802554c:	9304      	str	r3, [sp, #16]
 802554e:	f1b8 0f00 	cmp.w	r8, #0
 8025552:	dd05      	ble.n	8025560 <_dtoa_r+0x838>
 8025554:	4659      	mov	r1, fp
 8025556:	4642      	mov	r2, r8
 8025558:	4620      	mov	r0, r4
 802555a:	f000 fbf3 	bl	8025d44 <__lshift>
 802555e:	4683      	mov	fp, r0
 8025560:	9b04      	ldr	r3, [sp, #16]
 8025562:	2b00      	cmp	r3, #0
 8025564:	dd05      	ble.n	8025572 <_dtoa_r+0x84a>
 8025566:	4631      	mov	r1, r6
 8025568:	461a      	mov	r2, r3
 802556a:	4620      	mov	r0, r4
 802556c:	f000 fbea 	bl	8025d44 <__lshift>
 8025570:	4606      	mov	r6, r0
 8025572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025574:	2b00      	cmp	r3, #0
 8025576:	d069      	beq.n	802564c <_dtoa_r+0x924>
 8025578:	4631      	mov	r1, r6
 802557a:	4658      	mov	r0, fp
 802557c:	f000 fc4e 	bl	8025e1c <__mcmp>
 8025580:	2800      	cmp	r0, #0
 8025582:	da63      	bge.n	802564c <_dtoa_r+0x924>
 8025584:	2300      	movs	r3, #0
 8025586:	4659      	mov	r1, fp
 8025588:	220a      	movs	r2, #10
 802558a:	4620      	mov	r0, r4
 802558c:	f000 fa2a 	bl	80259e4 <__multadd>
 8025590:	9b08      	ldr	r3, [sp, #32]
 8025592:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025596:	4683      	mov	fp, r0
 8025598:	2b00      	cmp	r3, #0
 802559a:	f000 818f 	beq.w	80258bc <_dtoa_r+0xb94>
 802559e:	4639      	mov	r1, r7
 80255a0:	2300      	movs	r3, #0
 80255a2:	220a      	movs	r2, #10
 80255a4:	4620      	mov	r0, r4
 80255a6:	f000 fa1d 	bl	80259e4 <__multadd>
 80255aa:	f1b9 0f00 	cmp.w	r9, #0
 80255ae:	4607      	mov	r7, r0
 80255b0:	f300 808e 	bgt.w	80256d0 <_dtoa_r+0x9a8>
 80255b4:	9b05      	ldr	r3, [sp, #20]
 80255b6:	2b02      	cmp	r3, #2
 80255b8:	dc50      	bgt.n	802565c <_dtoa_r+0x934>
 80255ba:	e089      	b.n	80256d0 <_dtoa_r+0x9a8>
 80255bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80255be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80255c2:	e75d      	b.n	8025480 <_dtoa_r+0x758>
 80255c4:	9b01      	ldr	r3, [sp, #4]
 80255c6:	1e5e      	subs	r6, r3, #1
 80255c8:	9b06      	ldr	r3, [sp, #24]
 80255ca:	42b3      	cmp	r3, r6
 80255cc:	bfbf      	itttt	lt
 80255ce:	9b06      	ldrlt	r3, [sp, #24]
 80255d0:	9606      	strlt	r6, [sp, #24]
 80255d2:	1af2      	sublt	r2, r6, r3
 80255d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80255d6:	bfb6      	itet	lt
 80255d8:	189b      	addlt	r3, r3, r2
 80255da:	1b9e      	subge	r6, r3, r6
 80255dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80255de:	9b01      	ldr	r3, [sp, #4]
 80255e0:	bfb8      	it	lt
 80255e2:	2600      	movlt	r6, #0
 80255e4:	2b00      	cmp	r3, #0
 80255e6:	bfb5      	itete	lt
 80255e8:	eba8 0503 	sublt.w	r5, r8, r3
 80255ec:	9b01      	ldrge	r3, [sp, #4]
 80255ee:	2300      	movlt	r3, #0
 80255f0:	4645      	movge	r5, r8
 80255f2:	e747      	b.n	8025484 <_dtoa_r+0x75c>
 80255f4:	9e06      	ldr	r6, [sp, #24]
 80255f6:	9f08      	ldr	r7, [sp, #32]
 80255f8:	4645      	mov	r5, r8
 80255fa:	e74c      	b.n	8025496 <_dtoa_r+0x76e>
 80255fc:	9a06      	ldr	r2, [sp, #24]
 80255fe:	e775      	b.n	80254ec <_dtoa_r+0x7c4>
 8025600:	9b05      	ldr	r3, [sp, #20]
 8025602:	2b01      	cmp	r3, #1
 8025604:	dc18      	bgt.n	8025638 <_dtoa_r+0x910>
 8025606:	9b02      	ldr	r3, [sp, #8]
 8025608:	b9b3      	cbnz	r3, 8025638 <_dtoa_r+0x910>
 802560a:	9b03      	ldr	r3, [sp, #12]
 802560c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025610:	b9a3      	cbnz	r3, 802563c <_dtoa_r+0x914>
 8025612:	9b03      	ldr	r3, [sp, #12]
 8025614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025618:	0d1b      	lsrs	r3, r3, #20
 802561a:	051b      	lsls	r3, r3, #20
 802561c:	b12b      	cbz	r3, 802562a <_dtoa_r+0x902>
 802561e:	9b04      	ldr	r3, [sp, #16]
 8025620:	3301      	adds	r3, #1
 8025622:	9304      	str	r3, [sp, #16]
 8025624:	f108 0801 	add.w	r8, r8, #1
 8025628:	2301      	movs	r3, #1
 802562a:	9306      	str	r3, [sp, #24]
 802562c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802562e:	2b00      	cmp	r3, #0
 8025630:	f47f af74 	bne.w	802551c <_dtoa_r+0x7f4>
 8025634:	2001      	movs	r0, #1
 8025636:	e779      	b.n	802552c <_dtoa_r+0x804>
 8025638:	2300      	movs	r3, #0
 802563a:	e7f6      	b.n	802562a <_dtoa_r+0x902>
 802563c:	9b02      	ldr	r3, [sp, #8]
 802563e:	e7f4      	b.n	802562a <_dtoa_r+0x902>
 8025640:	d085      	beq.n	802554e <_dtoa_r+0x826>
 8025642:	4618      	mov	r0, r3
 8025644:	301c      	adds	r0, #28
 8025646:	e77d      	b.n	8025544 <_dtoa_r+0x81c>
 8025648:	40240000 	.word	0x40240000
 802564c:	9b01      	ldr	r3, [sp, #4]
 802564e:	2b00      	cmp	r3, #0
 8025650:	dc38      	bgt.n	80256c4 <_dtoa_r+0x99c>
 8025652:	9b05      	ldr	r3, [sp, #20]
 8025654:	2b02      	cmp	r3, #2
 8025656:	dd35      	ble.n	80256c4 <_dtoa_r+0x99c>
 8025658:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802565c:	f1b9 0f00 	cmp.w	r9, #0
 8025660:	d10d      	bne.n	802567e <_dtoa_r+0x956>
 8025662:	4631      	mov	r1, r6
 8025664:	464b      	mov	r3, r9
 8025666:	2205      	movs	r2, #5
 8025668:	4620      	mov	r0, r4
 802566a:	f000 f9bb 	bl	80259e4 <__multadd>
 802566e:	4601      	mov	r1, r0
 8025670:	4606      	mov	r6, r0
 8025672:	4658      	mov	r0, fp
 8025674:	f000 fbd2 	bl	8025e1c <__mcmp>
 8025678:	2800      	cmp	r0, #0
 802567a:	f73f adbd 	bgt.w	80251f8 <_dtoa_r+0x4d0>
 802567e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025680:	9d00      	ldr	r5, [sp, #0]
 8025682:	ea6f 0a03 	mvn.w	sl, r3
 8025686:	f04f 0800 	mov.w	r8, #0
 802568a:	4631      	mov	r1, r6
 802568c:	4620      	mov	r0, r4
 802568e:	f000 f987 	bl	80259a0 <_Bfree>
 8025692:	2f00      	cmp	r7, #0
 8025694:	f43f aeb4 	beq.w	8025400 <_dtoa_r+0x6d8>
 8025698:	f1b8 0f00 	cmp.w	r8, #0
 802569c:	d005      	beq.n	80256aa <_dtoa_r+0x982>
 802569e:	45b8      	cmp	r8, r7
 80256a0:	d003      	beq.n	80256aa <_dtoa_r+0x982>
 80256a2:	4641      	mov	r1, r8
 80256a4:	4620      	mov	r0, r4
 80256a6:	f000 f97b 	bl	80259a0 <_Bfree>
 80256aa:	4639      	mov	r1, r7
 80256ac:	4620      	mov	r0, r4
 80256ae:	f000 f977 	bl	80259a0 <_Bfree>
 80256b2:	e6a5      	b.n	8025400 <_dtoa_r+0x6d8>
 80256b4:	2600      	movs	r6, #0
 80256b6:	4637      	mov	r7, r6
 80256b8:	e7e1      	b.n	802567e <_dtoa_r+0x956>
 80256ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80256bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80256c0:	4637      	mov	r7, r6
 80256c2:	e599      	b.n	80251f8 <_dtoa_r+0x4d0>
 80256c4:	9b08      	ldr	r3, [sp, #32]
 80256c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80256ca:	2b00      	cmp	r3, #0
 80256cc:	f000 80fd 	beq.w	80258ca <_dtoa_r+0xba2>
 80256d0:	2d00      	cmp	r5, #0
 80256d2:	dd05      	ble.n	80256e0 <_dtoa_r+0x9b8>
 80256d4:	4639      	mov	r1, r7
 80256d6:	462a      	mov	r2, r5
 80256d8:	4620      	mov	r0, r4
 80256da:	f000 fb33 	bl	8025d44 <__lshift>
 80256de:	4607      	mov	r7, r0
 80256e0:	9b06      	ldr	r3, [sp, #24]
 80256e2:	2b00      	cmp	r3, #0
 80256e4:	d05c      	beq.n	80257a0 <_dtoa_r+0xa78>
 80256e6:	6879      	ldr	r1, [r7, #4]
 80256e8:	4620      	mov	r0, r4
 80256ea:	f000 f919 	bl	8025920 <_Balloc>
 80256ee:	4605      	mov	r5, r0
 80256f0:	b928      	cbnz	r0, 80256fe <_dtoa_r+0x9d6>
 80256f2:	4b80      	ldr	r3, [pc, #512]	; (80258f4 <_dtoa_r+0xbcc>)
 80256f4:	4602      	mov	r2, r0
 80256f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80256fa:	f7ff bb2e 	b.w	8024d5a <_dtoa_r+0x32>
 80256fe:	693a      	ldr	r2, [r7, #16]
 8025700:	3202      	adds	r2, #2
 8025702:	0092      	lsls	r2, r2, #2
 8025704:	f107 010c 	add.w	r1, r7, #12
 8025708:	300c      	adds	r0, #12
 802570a:	f7fe fd27 	bl	802415c <memcpy>
 802570e:	2201      	movs	r2, #1
 8025710:	4629      	mov	r1, r5
 8025712:	4620      	mov	r0, r4
 8025714:	f000 fb16 	bl	8025d44 <__lshift>
 8025718:	9b00      	ldr	r3, [sp, #0]
 802571a:	3301      	adds	r3, #1
 802571c:	9301      	str	r3, [sp, #4]
 802571e:	9b00      	ldr	r3, [sp, #0]
 8025720:	444b      	add	r3, r9
 8025722:	9307      	str	r3, [sp, #28]
 8025724:	9b02      	ldr	r3, [sp, #8]
 8025726:	f003 0301 	and.w	r3, r3, #1
 802572a:	46b8      	mov	r8, r7
 802572c:	9306      	str	r3, [sp, #24]
 802572e:	4607      	mov	r7, r0
 8025730:	9b01      	ldr	r3, [sp, #4]
 8025732:	4631      	mov	r1, r6
 8025734:	3b01      	subs	r3, #1
 8025736:	4658      	mov	r0, fp
 8025738:	9302      	str	r3, [sp, #8]
 802573a:	f7ff fa69 	bl	8024c10 <quorem>
 802573e:	4603      	mov	r3, r0
 8025740:	3330      	adds	r3, #48	; 0x30
 8025742:	9004      	str	r0, [sp, #16]
 8025744:	4641      	mov	r1, r8
 8025746:	4658      	mov	r0, fp
 8025748:	9308      	str	r3, [sp, #32]
 802574a:	f000 fb67 	bl	8025e1c <__mcmp>
 802574e:	463a      	mov	r2, r7
 8025750:	4681      	mov	r9, r0
 8025752:	4631      	mov	r1, r6
 8025754:	4620      	mov	r0, r4
 8025756:	f000 fb7d 	bl	8025e54 <__mdiff>
 802575a:	68c2      	ldr	r2, [r0, #12]
 802575c:	9b08      	ldr	r3, [sp, #32]
 802575e:	4605      	mov	r5, r0
 8025760:	bb02      	cbnz	r2, 80257a4 <_dtoa_r+0xa7c>
 8025762:	4601      	mov	r1, r0
 8025764:	4658      	mov	r0, fp
 8025766:	f000 fb59 	bl	8025e1c <__mcmp>
 802576a:	9b08      	ldr	r3, [sp, #32]
 802576c:	4602      	mov	r2, r0
 802576e:	4629      	mov	r1, r5
 8025770:	4620      	mov	r0, r4
 8025772:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8025776:	f000 f913 	bl	80259a0 <_Bfree>
 802577a:	9b05      	ldr	r3, [sp, #20]
 802577c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802577e:	9d01      	ldr	r5, [sp, #4]
 8025780:	ea43 0102 	orr.w	r1, r3, r2
 8025784:	9b06      	ldr	r3, [sp, #24]
 8025786:	430b      	orrs	r3, r1
 8025788:	9b08      	ldr	r3, [sp, #32]
 802578a:	d10d      	bne.n	80257a8 <_dtoa_r+0xa80>
 802578c:	2b39      	cmp	r3, #57	; 0x39
 802578e:	d029      	beq.n	80257e4 <_dtoa_r+0xabc>
 8025790:	f1b9 0f00 	cmp.w	r9, #0
 8025794:	dd01      	ble.n	802579a <_dtoa_r+0xa72>
 8025796:	9b04      	ldr	r3, [sp, #16]
 8025798:	3331      	adds	r3, #49	; 0x31
 802579a:	9a02      	ldr	r2, [sp, #8]
 802579c:	7013      	strb	r3, [r2, #0]
 802579e:	e774      	b.n	802568a <_dtoa_r+0x962>
 80257a0:	4638      	mov	r0, r7
 80257a2:	e7b9      	b.n	8025718 <_dtoa_r+0x9f0>
 80257a4:	2201      	movs	r2, #1
 80257a6:	e7e2      	b.n	802576e <_dtoa_r+0xa46>
 80257a8:	f1b9 0f00 	cmp.w	r9, #0
 80257ac:	db06      	blt.n	80257bc <_dtoa_r+0xa94>
 80257ae:	9905      	ldr	r1, [sp, #20]
 80257b0:	ea41 0909 	orr.w	r9, r1, r9
 80257b4:	9906      	ldr	r1, [sp, #24]
 80257b6:	ea59 0101 	orrs.w	r1, r9, r1
 80257ba:	d120      	bne.n	80257fe <_dtoa_r+0xad6>
 80257bc:	2a00      	cmp	r2, #0
 80257be:	ddec      	ble.n	802579a <_dtoa_r+0xa72>
 80257c0:	4659      	mov	r1, fp
 80257c2:	2201      	movs	r2, #1
 80257c4:	4620      	mov	r0, r4
 80257c6:	9301      	str	r3, [sp, #4]
 80257c8:	f000 fabc 	bl	8025d44 <__lshift>
 80257cc:	4631      	mov	r1, r6
 80257ce:	4683      	mov	fp, r0
 80257d0:	f000 fb24 	bl	8025e1c <__mcmp>
 80257d4:	2800      	cmp	r0, #0
 80257d6:	9b01      	ldr	r3, [sp, #4]
 80257d8:	dc02      	bgt.n	80257e0 <_dtoa_r+0xab8>
 80257da:	d1de      	bne.n	802579a <_dtoa_r+0xa72>
 80257dc:	07da      	lsls	r2, r3, #31
 80257de:	d5dc      	bpl.n	802579a <_dtoa_r+0xa72>
 80257e0:	2b39      	cmp	r3, #57	; 0x39
 80257e2:	d1d8      	bne.n	8025796 <_dtoa_r+0xa6e>
 80257e4:	9a02      	ldr	r2, [sp, #8]
 80257e6:	2339      	movs	r3, #57	; 0x39
 80257e8:	7013      	strb	r3, [r2, #0]
 80257ea:	462b      	mov	r3, r5
 80257ec:	461d      	mov	r5, r3
 80257ee:	3b01      	subs	r3, #1
 80257f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80257f4:	2a39      	cmp	r2, #57	; 0x39
 80257f6:	d050      	beq.n	802589a <_dtoa_r+0xb72>
 80257f8:	3201      	adds	r2, #1
 80257fa:	701a      	strb	r2, [r3, #0]
 80257fc:	e745      	b.n	802568a <_dtoa_r+0x962>
 80257fe:	2a00      	cmp	r2, #0
 8025800:	dd03      	ble.n	802580a <_dtoa_r+0xae2>
 8025802:	2b39      	cmp	r3, #57	; 0x39
 8025804:	d0ee      	beq.n	80257e4 <_dtoa_r+0xabc>
 8025806:	3301      	adds	r3, #1
 8025808:	e7c7      	b.n	802579a <_dtoa_r+0xa72>
 802580a:	9a01      	ldr	r2, [sp, #4]
 802580c:	9907      	ldr	r1, [sp, #28]
 802580e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8025812:	428a      	cmp	r2, r1
 8025814:	d02a      	beq.n	802586c <_dtoa_r+0xb44>
 8025816:	4659      	mov	r1, fp
 8025818:	2300      	movs	r3, #0
 802581a:	220a      	movs	r2, #10
 802581c:	4620      	mov	r0, r4
 802581e:	f000 f8e1 	bl	80259e4 <__multadd>
 8025822:	45b8      	cmp	r8, r7
 8025824:	4683      	mov	fp, r0
 8025826:	f04f 0300 	mov.w	r3, #0
 802582a:	f04f 020a 	mov.w	r2, #10
 802582e:	4641      	mov	r1, r8
 8025830:	4620      	mov	r0, r4
 8025832:	d107      	bne.n	8025844 <_dtoa_r+0xb1c>
 8025834:	f000 f8d6 	bl	80259e4 <__multadd>
 8025838:	4680      	mov	r8, r0
 802583a:	4607      	mov	r7, r0
 802583c:	9b01      	ldr	r3, [sp, #4]
 802583e:	3301      	adds	r3, #1
 8025840:	9301      	str	r3, [sp, #4]
 8025842:	e775      	b.n	8025730 <_dtoa_r+0xa08>
 8025844:	f000 f8ce 	bl	80259e4 <__multadd>
 8025848:	4639      	mov	r1, r7
 802584a:	4680      	mov	r8, r0
 802584c:	2300      	movs	r3, #0
 802584e:	220a      	movs	r2, #10
 8025850:	4620      	mov	r0, r4
 8025852:	f000 f8c7 	bl	80259e4 <__multadd>
 8025856:	4607      	mov	r7, r0
 8025858:	e7f0      	b.n	802583c <_dtoa_r+0xb14>
 802585a:	f1b9 0f00 	cmp.w	r9, #0
 802585e:	9a00      	ldr	r2, [sp, #0]
 8025860:	bfcc      	ite	gt
 8025862:	464d      	movgt	r5, r9
 8025864:	2501      	movle	r5, #1
 8025866:	4415      	add	r5, r2
 8025868:	f04f 0800 	mov.w	r8, #0
 802586c:	4659      	mov	r1, fp
 802586e:	2201      	movs	r2, #1
 8025870:	4620      	mov	r0, r4
 8025872:	9301      	str	r3, [sp, #4]
 8025874:	f000 fa66 	bl	8025d44 <__lshift>
 8025878:	4631      	mov	r1, r6
 802587a:	4683      	mov	fp, r0
 802587c:	f000 face 	bl	8025e1c <__mcmp>
 8025880:	2800      	cmp	r0, #0
 8025882:	dcb2      	bgt.n	80257ea <_dtoa_r+0xac2>
 8025884:	d102      	bne.n	802588c <_dtoa_r+0xb64>
 8025886:	9b01      	ldr	r3, [sp, #4]
 8025888:	07db      	lsls	r3, r3, #31
 802588a:	d4ae      	bmi.n	80257ea <_dtoa_r+0xac2>
 802588c:	462b      	mov	r3, r5
 802588e:	461d      	mov	r5, r3
 8025890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025894:	2a30      	cmp	r2, #48	; 0x30
 8025896:	d0fa      	beq.n	802588e <_dtoa_r+0xb66>
 8025898:	e6f7      	b.n	802568a <_dtoa_r+0x962>
 802589a:	9a00      	ldr	r2, [sp, #0]
 802589c:	429a      	cmp	r2, r3
 802589e:	d1a5      	bne.n	80257ec <_dtoa_r+0xac4>
 80258a0:	f10a 0a01 	add.w	sl, sl, #1
 80258a4:	2331      	movs	r3, #49	; 0x31
 80258a6:	e779      	b.n	802579c <_dtoa_r+0xa74>
 80258a8:	4b13      	ldr	r3, [pc, #76]	; (80258f8 <_dtoa_r+0xbd0>)
 80258aa:	f7ff baaf 	b.w	8024e0c <_dtoa_r+0xe4>
 80258ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80258b0:	2b00      	cmp	r3, #0
 80258b2:	f47f aa86 	bne.w	8024dc2 <_dtoa_r+0x9a>
 80258b6:	4b11      	ldr	r3, [pc, #68]	; (80258fc <_dtoa_r+0xbd4>)
 80258b8:	f7ff baa8 	b.w	8024e0c <_dtoa_r+0xe4>
 80258bc:	f1b9 0f00 	cmp.w	r9, #0
 80258c0:	dc03      	bgt.n	80258ca <_dtoa_r+0xba2>
 80258c2:	9b05      	ldr	r3, [sp, #20]
 80258c4:	2b02      	cmp	r3, #2
 80258c6:	f73f aec9 	bgt.w	802565c <_dtoa_r+0x934>
 80258ca:	9d00      	ldr	r5, [sp, #0]
 80258cc:	4631      	mov	r1, r6
 80258ce:	4658      	mov	r0, fp
 80258d0:	f7ff f99e 	bl	8024c10 <quorem>
 80258d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80258d8:	f805 3b01 	strb.w	r3, [r5], #1
 80258dc:	9a00      	ldr	r2, [sp, #0]
 80258de:	1aaa      	subs	r2, r5, r2
 80258e0:	4591      	cmp	r9, r2
 80258e2:	ddba      	ble.n	802585a <_dtoa_r+0xb32>
 80258e4:	4659      	mov	r1, fp
 80258e6:	2300      	movs	r3, #0
 80258e8:	220a      	movs	r2, #10
 80258ea:	4620      	mov	r0, r4
 80258ec:	f000 f87a 	bl	80259e4 <__multadd>
 80258f0:	4683      	mov	fp, r0
 80258f2:	e7eb      	b.n	80258cc <_dtoa_r+0xba4>
 80258f4:	0802716b 	.word	0x0802716b
 80258f8:	080270c4 	.word	0x080270c4
 80258fc:	080270e8 	.word	0x080270e8

08025900 <_localeconv_r>:
 8025900:	4800      	ldr	r0, [pc, #0]	; (8025904 <_localeconv_r+0x4>)
 8025902:	4770      	bx	lr
 8025904:	200005ac 	.word	0x200005ac

08025908 <__malloc_lock>:
 8025908:	4801      	ldr	r0, [pc, #4]	; (8025910 <__malloc_lock+0x8>)
 802590a:	f000 bd22 	b.w	8026352 <__retarget_lock_acquire_recursive>
 802590e:	bf00      	nop
 8025910:	20006d04 	.word	0x20006d04

08025914 <__malloc_unlock>:
 8025914:	4801      	ldr	r0, [pc, #4]	; (802591c <__malloc_unlock+0x8>)
 8025916:	f000 bd1d 	b.w	8026354 <__retarget_lock_release_recursive>
 802591a:	bf00      	nop
 802591c:	20006d04 	.word	0x20006d04

08025920 <_Balloc>:
 8025920:	b570      	push	{r4, r5, r6, lr}
 8025922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025924:	4604      	mov	r4, r0
 8025926:	460d      	mov	r5, r1
 8025928:	b976      	cbnz	r6, 8025948 <_Balloc+0x28>
 802592a:	2010      	movs	r0, #16
 802592c:	f7fe fbf8 	bl	8024120 <malloc>
 8025930:	4602      	mov	r2, r0
 8025932:	6260      	str	r0, [r4, #36]	; 0x24
 8025934:	b920      	cbnz	r0, 8025940 <_Balloc+0x20>
 8025936:	4b18      	ldr	r3, [pc, #96]	; (8025998 <_Balloc+0x78>)
 8025938:	4818      	ldr	r0, [pc, #96]	; (802599c <_Balloc+0x7c>)
 802593a:	2166      	movs	r1, #102	; 0x66
 802593c:	f000 fcd8 	bl	80262f0 <__assert_func>
 8025940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025944:	6006      	str	r6, [r0, #0]
 8025946:	60c6      	str	r6, [r0, #12]
 8025948:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802594a:	68f3      	ldr	r3, [r6, #12]
 802594c:	b183      	cbz	r3, 8025970 <_Balloc+0x50>
 802594e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025950:	68db      	ldr	r3, [r3, #12]
 8025952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8025956:	b9b8      	cbnz	r0, 8025988 <_Balloc+0x68>
 8025958:	2101      	movs	r1, #1
 802595a:	fa01 f605 	lsl.w	r6, r1, r5
 802595e:	1d72      	adds	r2, r6, #5
 8025960:	0092      	lsls	r2, r2, #2
 8025962:	4620      	mov	r0, r4
 8025964:	f000 fb5a 	bl	802601c <_calloc_r>
 8025968:	b160      	cbz	r0, 8025984 <_Balloc+0x64>
 802596a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802596e:	e00e      	b.n	802598e <_Balloc+0x6e>
 8025970:	2221      	movs	r2, #33	; 0x21
 8025972:	2104      	movs	r1, #4
 8025974:	4620      	mov	r0, r4
 8025976:	f000 fb51 	bl	802601c <_calloc_r>
 802597a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802597c:	60f0      	str	r0, [r6, #12]
 802597e:	68db      	ldr	r3, [r3, #12]
 8025980:	2b00      	cmp	r3, #0
 8025982:	d1e4      	bne.n	802594e <_Balloc+0x2e>
 8025984:	2000      	movs	r0, #0
 8025986:	bd70      	pop	{r4, r5, r6, pc}
 8025988:	6802      	ldr	r2, [r0, #0]
 802598a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802598e:	2300      	movs	r3, #0
 8025990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025994:	e7f7      	b.n	8025986 <_Balloc+0x66>
 8025996:	bf00      	nop
 8025998:	080270f5 	.word	0x080270f5
 802599c:	0802717c 	.word	0x0802717c

080259a0 <_Bfree>:
 80259a0:	b570      	push	{r4, r5, r6, lr}
 80259a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80259a4:	4605      	mov	r5, r0
 80259a6:	460c      	mov	r4, r1
 80259a8:	b976      	cbnz	r6, 80259c8 <_Bfree+0x28>
 80259aa:	2010      	movs	r0, #16
 80259ac:	f7fe fbb8 	bl	8024120 <malloc>
 80259b0:	4602      	mov	r2, r0
 80259b2:	6268      	str	r0, [r5, #36]	; 0x24
 80259b4:	b920      	cbnz	r0, 80259c0 <_Bfree+0x20>
 80259b6:	4b09      	ldr	r3, [pc, #36]	; (80259dc <_Bfree+0x3c>)
 80259b8:	4809      	ldr	r0, [pc, #36]	; (80259e0 <_Bfree+0x40>)
 80259ba:	218a      	movs	r1, #138	; 0x8a
 80259bc:	f000 fc98 	bl	80262f0 <__assert_func>
 80259c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80259c4:	6006      	str	r6, [r0, #0]
 80259c6:	60c6      	str	r6, [r0, #12]
 80259c8:	b13c      	cbz	r4, 80259da <_Bfree+0x3a>
 80259ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80259cc:	6862      	ldr	r2, [r4, #4]
 80259ce:	68db      	ldr	r3, [r3, #12]
 80259d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80259d4:	6021      	str	r1, [r4, #0]
 80259d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80259da:	bd70      	pop	{r4, r5, r6, pc}
 80259dc:	080270f5 	.word	0x080270f5
 80259e0:	0802717c 	.word	0x0802717c

080259e4 <__multadd>:
 80259e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80259e8:	690e      	ldr	r6, [r1, #16]
 80259ea:	4607      	mov	r7, r0
 80259ec:	4698      	mov	r8, r3
 80259ee:	460c      	mov	r4, r1
 80259f0:	f101 0014 	add.w	r0, r1, #20
 80259f4:	2300      	movs	r3, #0
 80259f6:	6805      	ldr	r5, [r0, #0]
 80259f8:	b2a9      	uxth	r1, r5
 80259fa:	fb02 8101 	mla	r1, r2, r1, r8
 80259fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8025a02:	0c2d      	lsrs	r5, r5, #16
 8025a04:	fb02 c505 	mla	r5, r2, r5, ip
 8025a08:	b289      	uxth	r1, r1
 8025a0a:	3301      	adds	r3, #1
 8025a0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8025a10:	429e      	cmp	r6, r3
 8025a12:	f840 1b04 	str.w	r1, [r0], #4
 8025a16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8025a1a:	dcec      	bgt.n	80259f6 <__multadd+0x12>
 8025a1c:	f1b8 0f00 	cmp.w	r8, #0
 8025a20:	d022      	beq.n	8025a68 <__multadd+0x84>
 8025a22:	68a3      	ldr	r3, [r4, #8]
 8025a24:	42b3      	cmp	r3, r6
 8025a26:	dc19      	bgt.n	8025a5c <__multadd+0x78>
 8025a28:	6861      	ldr	r1, [r4, #4]
 8025a2a:	4638      	mov	r0, r7
 8025a2c:	3101      	adds	r1, #1
 8025a2e:	f7ff ff77 	bl	8025920 <_Balloc>
 8025a32:	4605      	mov	r5, r0
 8025a34:	b928      	cbnz	r0, 8025a42 <__multadd+0x5e>
 8025a36:	4602      	mov	r2, r0
 8025a38:	4b0d      	ldr	r3, [pc, #52]	; (8025a70 <__multadd+0x8c>)
 8025a3a:	480e      	ldr	r0, [pc, #56]	; (8025a74 <__multadd+0x90>)
 8025a3c:	21b5      	movs	r1, #181	; 0xb5
 8025a3e:	f000 fc57 	bl	80262f0 <__assert_func>
 8025a42:	6922      	ldr	r2, [r4, #16]
 8025a44:	3202      	adds	r2, #2
 8025a46:	f104 010c 	add.w	r1, r4, #12
 8025a4a:	0092      	lsls	r2, r2, #2
 8025a4c:	300c      	adds	r0, #12
 8025a4e:	f7fe fb85 	bl	802415c <memcpy>
 8025a52:	4621      	mov	r1, r4
 8025a54:	4638      	mov	r0, r7
 8025a56:	f7ff ffa3 	bl	80259a0 <_Bfree>
 8025a5a:	462c      	mov	r4, r5
 8025a5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8025a60:	3601      	adds	r6, #1
 8025a62:	f8c3 8014 	str.w	r8, [r3, #20]
 8025a66:	6126      	str	r6, [r4, #16]
 8025a68:	4620      	mov	r0, r4
 8025a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a6e:	bf00      	nop
 8025a70:	0802716b 	.word	0x0802716b
 8025a74:	0802717c 	.word	0x0802717c

08025a78 <__hi0bits>:
 8025a78:	0c03      	lsrs	r3, r0, #16
 8025a7a:	041b      	lsls	r3, r3, #16
 8025a7c:	b9d3      	cbnz	r3, 8025ab4 <__hi0bits+0x3c>
 8025a7e:	0400      	lsls	r0, r0, #16
 8025a80:	2310      	movs	r3, #16
 8025a82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8025a86:	bf04      	itt	eq
 8025a88:	0200      	lsleq	r0, r0, #8
 8025a8a:	3308      	addeq	r3, #8
 8025a8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8025a90:	bf04      	itt	eq
 8025a92:	0100      	lsleq	r0, r0, #4
 8025a94:	3304      	addeq	r3, #4
 8025a96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8025a9a:	bf04      	itt	eq
 8025a9c:	0080      	lsleq	r0, r0, #2
 8025a9e:	3302      	addeq	r3, #2
 8025aa0:	2800      	cmp	r0, #0
 8025aa2:	db05      	blt.n	8025ab0 <__hi0bits+0x38>
 8025aa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8025aa8:	f103 0301 	add.w	r3, r3, #1
 8025aac:	bf08      	it	eq
 8025aae:	2320      	moveq	r3, #32
 8025ab0:	4618      	mov	r0, r3
 8025ab2:	4770      	bx	lr
 8025ab4:	2300      	movs	r3, #0
 8025ab6:	e7e4      	b.n	8025a82 <__hi0bits+0xa>

08025ab8 <__lo0bits>:
 8025ab8:	6803      	ldr	r3, [r0, #0]
 8025aba:	f013 0207 	ands.w	r2, r3, #7
 8025abe:	4601      	mov	r1, r0
 8025ac0:	d00b      	beq.n	8025ada <__lo0bits+0x22>
 8025ac2:	07da      	lsls	r2, r3, #31
 8025ac4:	d424      	bmi.n	8025b10 <__lo0bits+0x58>
 8025ac6:	0798      	lsls	r0, r3, #30
 8025ac8:	bf49      	itett	mi
 8025aca:	085b      	lsrmi	r3, r3, #1
 8025acc:	089b      	lsrpl	r3, r3, #2
 8025ace:	2001      	movmi	r0, #1
 8025ad0:	600b      	strmi	r3, [r1, #0]
 8025ad2:	bf5c      	itt	pl
 8025ad4:	600b      	strpl	r3, [r1, #0]
 8025ad6:	2002      	movpl	r0, #2
 8025ad8:	4770      	bx	lr
 8025ada:	b298      	uxth	r0, r3
 8025adc:	b9b0      	cbnz	r0, 8025b0c <__lo0bits+0x54>
 8025ade:	0c1b      	lsrs	r3, r3, #16
 8025ae0:	2010      	movs	r0, #16
 8025ae2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8025ae6:	bf04      	itt	eq
 8025ae8:	0a1b      	lsreq	r3, r3, #8
 8025aea:	3008      	addeq	r0, #8
 8025aec:	071a      	lsls	r2, r3, #28
 8025aee:	bf04      	itt	eq
 8025af0:	091b      	lsreq	r3, r3, #4
 8025af2:	3004      	addeq	r0, #4
 8025af4:	079a      	lsls	r2, r3, #30
 8025af6:	bf04      	itt	eq
 8025af8:	089b      	lsreq	r3, r3, #2
 8025afa:	3002      	addeq	r0, #2
 8025afc:	07da      	lsls	r2, r3, #31
 8025afe:	d403      	bmi.n	8025b08 <__lo0bits+0x50>
 8025b00:	085b      	lsrs	r3, r3, #1
 8025b02:	f100 0001 	add.w	r0, r0, #1
 8025b06:	d005      	beq.n	8025b14 <__lo0bits+0x5c>
 8025b08:	600b      	str	r3, [r1, #0]
 8025b0a:	4770      	bx	lr
 8025b0c:	4610      	mov	r0, r2
 8025b0e:	e7e8      	b.n	8025ae2 <__lo0bits+0x2a>
 8025b10:	2000      	movs	r0, #0
 8025b12:	4770      	bx	lr
 8025b14:	2020      	movs	r0, #32
 8025b16:	4770      	bx	lr

08025b18 <__i2b>:
 8025b18:	b510      	push	{r4, lr}
 8025b1a:	460c      	mov	r4, r1
 8025b1c:	2101      	movs	r1, #1
 8025b1e:	f7ff feff 	bl	8025920 <_Balloc>
 8025b22:	4602      	mov	r2, r0
 8025b24:	b928      	cbnz	r0, 8025b32 <__i2b+0x1a>
 8025b26:	4b05      	ldr	r3, [pc, #20]	; (8025b3c <__i2b+0x24>)
 8025b28:	4805      	ldr	r0, [pc, #20]	; (8025b40 <__i2b+0x28>)
 8025b2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8025b2e:	f000 fbdf 	bl	80262f0 <__assert_func>
 8025b32:	2301      	movs	r3, #1
 8025b34:	6144      	str	r4, [r0, #20]
 8025b36:	6103      	str	r3, [r0, #16]
 8025b38:	bd10      	pop	{r4, pc}
 8025b3a:	bf00      	nop
 8025b3c:	0802716b 	.word	0x0802716b
 8025b40:	0802717c 	.word	0x0802717c

08025b44 <__multiply>:
 8025b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b48:	4614      	mov	r4, r2
 8025b4a:	690a      	ldr	r2, [r1, #16]
 8025b4c:	6923      	ldr	r3, [r4, #16]
 8025b4e:	429a      	cmp	r2, r3
 8025b50:	bfb8      	it	lt
 8025b52:	460b      	movlt	r3, r1
 8025b54:	460d      	mov	r5, r1
 8025b56:	bfbc      	itt	lt
 8025b58:	4625      	movlt	r5, r4
 8025b5a:	461c      	movlt	r4, r3
 8025b5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8025b60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025b64:	68ab      	ldr	r3, [r5, #8]
 8025b66:	6869      	ldr	r1, [r5, #4]
 8025b68:	eb0a 0709 	add.w	r7, sl, r9
 8025b6c:	42bb      	cmp	r3, r7
 8025b6e:	b085      	sub	sp, #20
 8025b70:	bfb8      	it	lt
 8025b72:	3101      	addlt	r1, #1
 8025b74:	f7ff fed4 	bl	8025920 <_Balloc>
 8025b78:	b930      	cbnz	r0, 8025b88 <__multiply+0x44>
 8025b7a:	4602      	mov	r2, r0
 8025b7c:	4b42      	ldr	r3, [pc, #264]	; (8025c88 <__multiply+0x144>)
 8025b7e:	4843      	ldr	r0, [pc, #268]	; (8025c8c <__multiply+0x148>)
 8025b80:	f240 115d 	movw	r1, #349	; 0x15d
 8025b84:	f000 fbb4 	bl	80262f0 <__assert_func>
 8025b88:	f100 0614 	add.w	r6, r0, #20
 8025b8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8025b90:	4633      	mov	r3, r6
 8025b92:	2200      	movs	r2, #0
 8025b94:	4543      	cmp	r3, r8
 8025b96:	d31e      	bcc.n	8025bd6 <__multiply+0x92>
 8025b98:	f105 0c14 	add.w	ip, r5, #20
 8025b9c:	f104 0314 	add.w	r3, r4, #20
 8025ba0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8025ba4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8025ba8:	9202      	str	r2, [sp, #8]
 8025baa:	ebac 0205 	sub.w	r2, ip, r5
 8025bae:	3a15      	subs	r2, #21
 8025bb0:	f022 0203 	bic.w	r2, r2, #3
 8025bb4:	3204      	adds	r2, #4
 8025bb6:	f105 0115 	add.w	r1, r5, #21
 8025bba:	458c      	cmp	ip, r1
 8025bbc:	bf38      	it	cc
 8025bbe:	2204      	movcc	r2, #4
 8025bc0:	9201      	str	r2, [sp, #4]
 8025bc2:	9a02      	ldr	r2, [sp, #8]
 8025bc4:	9303      	str	r3, [sp, #12]
 8025bc6:	429a      	cmp	r2, r3
 8025bc8:	d808      	bhi.n	8025bdc <__multiply+0x98>
 8025bca:	2f00      	cmp	r7, #0
 8025bcc:	dc55      	bgt.n	8025c7a <__multiply+0x136>
 8025bce:	6107      	str	r7, [r0, #16]
 8025bd0:	b005      	add	sp, #20
 8025bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bd6:	f843 2b04 	str.w	r2, [r3], #4
 8025bda:	e7db      	b.n	8025b94 <__multiply+0x50>
 8025bdc:	f8b3 a000 	ldrh.w	sl, [r3]
 8025be0:	f1ba 0f00 	cmp.w	sl, #0
 8025be4:	d020      	beq.n	8025c28 <__multiply+0xe4>
 8025be6:	f105 0e14 	add.w	lr, r5, #20
 8025bea:	46b1      	mov	r9, r6
 8025bec:	2200      	movs	r2, #0
 8025bee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8025bf2:	f8d9 b000 	ldr.w	fp, [r9]
 8025bf6:	b2a1      	uxth	r1, r4
 8025bf8:	fa1f fb8b 	uxth.w	fp, fp
 8025bfc:	fb0a b101 	mla	r1, sl, r1, fp
 8025c00:	4411      	add	r1, r2
 8025c02:	f8d9 2000 	ldr.w	r2, [r9]
 8025c06:	0c24      	lsrs	r4, r4, #16
 8025c08:	0c12      	lsrs	r2, r2, #16
 8025c0a:	fb0a 2404 	mla	r4, sl, r4, r2
 8025c0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8025c12:	b289      	uxth	r1, r1
 8025c14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8025c18:	45f4      	cmp	ip, lr
 8025c1a:	f849 1b04 	str.w	r1, [r9], #4
 8025c1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8025c22:	d8e4      	bhi.n	8025bee <__multiply+0xaa>
 8025c24:	9901      	ldr	r1, [sp, #4]
 8025c26:	5072      	str	r2, [r6, r1]
 8025c28:	9a03      	ldr	r2, [sp, #12]
 8025c2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8025c2e:	3304      	adds	r3, #4
 8025c30:	f1b9 0f00 	cmp.w	r9, #0
 8025c34:	d01f      	beq.n	8025c76 <__multiply+0x132>
 8025c36:	6834      	ldr	r4, [r6, #0]
 8025c38:	f105 0114 	add.w	r1, r5, #20
 8025c3c:	46b6      	mov	lr, r6
 8025c3e:	f04f 0a00 	mov.w	sl, #0
 8025c42:	880a      	ldrh	r2, [r1, #0]
 8025c44:	f8be b002 	ldrh.w	fp, [lr, #2]
 8025c48:	fb09 b202 	mla	r2, r9, r2, fp
 8025c4c:	4492      	add	sl, r2
 8025c4e:	b2a4      	uxth	r4, r4
 8025c50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8025c54:	f84e 4b04 	str.w	r4, [lr], #4
 8025c58:	f851 4b04 	ldr.w	r4, [r1], #4
 8025c5c:	f8be 2000 	ldrh.w	r2, [lr]
 8025c60:	0c24      	lsrs	r4, r4, #16
 8025c62:	fb09 2404 	mla	r4, r9, r4, r2
 8025c66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8025c6a:	458c      	cmp	ip, r1
 8025c6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8025c70:	d8e7      	bhi.n	8025c42 <__multiply+0xfe>
 8025c72:	9a01      	ldr	r2, [sp, #4]
 8025c74:	50b4      	str	r4, [r6, r2]
 8025c76:	3604      	adds	r6, #4
 8025c78:	e7a3      	b.n	8025bc2 <__multiply+0x7e>
 8025c7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8025c7e:	2b00      	cmp	r3, #0
 8025c80:	d1a5      	bne.n	8025bce <__multiply+0x8a>
 8025c82:	3f01      	subs	r7, #1
 8025c84:	e7a1      	b.n	8025bca <__multiply+0x86>
 8025c86:	bf00      	nop
 8025c88:	0802716b 	.word	0x0802716b
 8025c8c:	0802717c 	.word	0x0802717c

08025c90 <__pow5mult>:
 8025c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025c94:	4615      	mov	r5, r2
 8025c96:	f012 0203 	ands.w	r2, r2, #3
 8025c9a:	4606      	mov	r6, r0
 8025c9c:	460f      	mov	r7, r1
 8025c9e:	d007      	beq.n	8025cb0 <__pow5mult+0x20>
 8025ca0:	4c25      	ldr	r4, [pc, #148]	; (8025d38 <__pow5mult+0xa8>)
 8025ca2:	3a01      	subs	r2, #1
 8025ca4:	2300      	movs	r3, #0
 8025ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025caa:	f7ff fe9b 	bl	80259e4 <__multadd>
 8025cae:	4607      	mov	r7, r0
 8025cb0:	10ad      	asrs	r5, r5, #2
 8025cb2:	d03d      	beq.n	8025d30 <__pow5mult+0xa0>
 8025cb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8025cb6:	b97c      	cbnz	r4, 8025cd8 <__pow5mult+0x48>
 8025cb8:	2010      	movs	r0, #16
 8025cba:	f7fe fa31 	bl	8024120 <malloc>
 8025cbe:	4602      	mov	r2, r0
 8025cc0:	6270      	str	r0, [r6, #36]	; 0x24
 8025cc2:	b928      	cbnz	r0, 8025cd0 <__pow5mult+0x40>
 8025cc4:	4b1d      	ldr	r3, [pc, #116]	; (8025d3c <__pow5mult+0xac>)
 8025cc6:	481e      	ldr	r0, [pc, #120]	; (8025d40 <__pow5mult+0xb0>)
 8025cc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8025ccc:	f000 fb10 	bl	80262f0 <__assert_func>
 8025cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8025cd4:	6004      	str	r4, [r0, #0]
 8025cd6:	60c4      	str	r4, [r0, #12]
 8025cd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8025cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8025ce0:	b94c      	cbnz	r4, 8025cf6 <__pow5mult+0x66>
 8025ce2:	f240 2171 	movw	r1, #625	; 0x271
 8025ce6:	4630      	mov	r0, r6
 8025ce8:	f7ff ff16 	bl	8025b18 <__i2b>
 8025cec:	2300      	movs	r3, #0
 8025cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8025cf2:	4604      	mov	r4, r0
 8025cf4:	6003      	str	r3, [r0, #0]
 8025cf6:	f04f 0900 	mov.w	r9, #0
 8025cfa:	07eb      	lsls	r3, r5, #31
 8025cfc:	d50a      	bpl.n	8025d14 <__pow5mult+0x84>
 8025cfe:	4639      	mov	r1, r7
 8025d00:	4622      	mov	r2, r4
 8025d02:	4630      	mov	r0, r6
 8025d04:	f7ff ff1e 	bl	8025b44 <__multiply>
 8025d08:	4639      	mov	r1, r7
 8025d0a:	4680      	mov	r8, r0
 8025d0c:	4630      	mov	r0, r6
 8025d0e:	f7ff fe47 	bl	80259a0 <_Bfree>
 8025d12:	4647      	mov	r7, r8
 8025d14:	106d      	asrs	r5, r5, #1
 8025d16:	d00b      	beq.n	8025d30 <__pow5mult+0xa0>
 8025d18:	6820      	ldr	r0, [r4, #0]
 8025d1a:	b938      	cbnz	r0, 8025d2c <__pow5mult+0x9c>
 8025d1c:	4622      	mov	r2, r4
 8025d1e:	4621      	mov	r1, r4
 8025d20:	4630      	mov	r0, r6
 8025d22:	f7ff ff0f 	bl	8025b44 <__multiply>
 8025d26:	6020      	str	r0, [r4, #0]
 8025d28:	f8c0 9000 	str.w	r9, [r0]
 8025d2c:	4604      	mov	r4, r0
 8025d2e:	e7e4      	b.n	8025cfa <__pow5mult+0x6a>
 8025d30:	4638      	mov	r0, r7
 8025d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d36:	bf00      	nop
 8025d38:	080272d0 	.word	0x080272d0
 8025d3c:	080270f5 	.word	0x080270f5
 8025d40:	0802717c 	.word	0x0802717c

08025d44 <__lshift>:
 8025d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025d48:	460c      	mov	r4, r1
 8025d4a:	6849      	ldr	r1, [r1, #4]
 8025d4c:	6923      	ldr	r3, [r4, #16]
 8025d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8025d52:	68a3      	ldr	r3, [r4, #8]
 8025d54:	4607      	mov	r7, r0
 8025d56:	4691      	mov	r9, r2
 8025d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8025d5c:	f108 0601 	add.w	r6, r8, #1
 8025d60:	42b3      	cmp	r3, r6
 8025d62:	db0b      	blt.n	8025d7c <__lshift+0x38>
 8025d64:	4638      	mov	r0, r7
 8025d66:	f7ff fddb 	bl	8025920 <_Balloc>
 8025d6a:	4605      	mov	r5, r0
 8025d6c:	b948      	cbnz	r0, 8025d82 <__lshift+0x3e>
 8025d6e:	4602      	mov	r2, r0
 8025d70:	4b28      	ldr	r3, [pc, #160]	; (8025e14 <__lshift+0xd0>)
 8025d72:	4829      	ldr	r0, [pc, #164]	; (8025e18 <__lshift+0xd4>)
 8025d74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8025d78:	f000 faba 	bl	80262f0 <__assert_func>
 8025d7c:	3101      	adds	r1, #1
 8025d7e:	005b      	lsls	r3, r3, #1
 8025d80:	e7ee      	b.n	8025d60 <__lshift+0x1c>
 8025d82:	2300      	movs	r3, #0
 8025d84:	f100 0114 	add.w	r1, r0, #20
 8025d88:	f100 0210 	add.w	r2, r0, #16
 8025d8c:	4618      	mov	r0, r3
 8025d8e:	4553      	cmp	r3, sl
 8025d90:	db33      	blt.n	8025dfa <__lshift+0xb6>
 8025d92:	6920      	ldr	r0, [r4, #16]
 8025d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8025d98:	f104 0314 	add.w	r3, r4, #20
 8025d9c:	f019 091f 	ands.w	r9, r9, #31
 8025da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8025da4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8025da8:	d02b      	beq.n	8025e02 <__lshift+0xbe>
 8025daa:	f1c9 0e20 	rsb	lr, r9, #32
 8025dae:	468a      	mov	sl, r1
 8025db0:	2200      	movs	r2, #0
 8025db2:	6818      	ldr	r0, [r3, #0]
 8025db4:	fa00 f009 	lsl.w	r0, r0, r9
 8025db8:	4302      	orrs	r2, r0
 8025dba:	f84a 2b04 	str.w	r2, [sl], #4
 8025dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8025dc2:	459c      	cmp	ip, r3
 8025dc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8025dc8:	d8f3      	bhi.n	8025db2 <__lshift+0x6e>
 8025dca:	ebac 0304 	sub.w	r3, ip, r4
 8025dce:	3b15      	subs	r3, #21
 8025dd0:	f023 0303 	bic.w	r3, r3, #3
 8025dd4:	3304      	adds	r3, #4
 8025dd6:	f104 0015 	add.w	r0, r4, #21
 8025dda:	4584      	cmp	ip, r0
 8025ddc:	bf38      	it	cc
 8025dde:	2304      	movcc	r3, #4
 8025de0:	50ca      	str	r2, [r1, r3]
 8025de2:	b10a      	cbz	r2, 8025de8 <__lshift+0xa4>
 8025de4:	f108 0602 	add.w	r6, r8, #2
 8025de8:	3e01      	subs	r6, #1
 8025dea:	4638      	mov	r0, r7
 8025dec:	612e      	str	r6, [r5, #16]
 8025dee:	4621      	mov	r1, r4
 8025df0:	f7ff fdd6 	bl	80259a0 <_Bfree>
 8025df4:	4628      	mov	r0, r5
 8025df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025dfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8025dfe:	3301      	adds	r3, #1
 8025e00:	e7c5      	b.n	8025d8e <__lshift+0x4a>
 8025e02:	3904      	subs	r1, #4
 8025e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8025e08:	f841 2f04 	str.w	r2, [r1, #4]!
 8025e0c:	459c      	cmp	ip, r3
 8025e0e:	d8f9      	bhi.n	8025e04 <__lshift+0xc0>
 8025e10:	e7ea      	b.n	8025de8 <__lshift+0xa4>
 8025e12:	bf00      	nop
 8025e14:	0802716b 	.word	0x0802716b
 8025e18:	0802717c 	.word	0x0802717c

08025e1c <__mcmp>:
 8025e1c:	b530      	push	{r4, r5, lr}
 8025e1e:	6902      	ldr	r2, [r0, #16]
 8025e20:	690c      	ldr	r4, [r1, #16]
 8025e22:	1b12      	subs	r2, r2, r4
 8025e24:	d10e      	bne.n	8025e44 <__mcmp+0x28>
 8025e26:	f100 0314 	add.w	r3, r0, #20
 8025e2a:	3114      	adds	r1, #20
 8025e2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8025e30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8025e34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8025e38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8025e3c:	42a5      	cmp	r5, r4
 8025e3e:	d003      	beq.n	8025e48 <__mcmp+0x2c>
 8025e40:	d305      	bcc.n	8025e4e <__mcmp+0x32>
 8025e42:	2201      	movs	r2, #1
 8025e44:	4610      	mov	r0, r2
 8025e46:	bd30      	pop	{r4, r5, pc}
 8025e48:	4283      	cmp	r3, r0
 8025e4a:	d3f3      	bcc.n	8025e34 <__mcmp+0x18>
 8025e4c:	e7fa      	b.n	8025e44 <__mcmp+0x28>
 8025e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8025e52:	e7f7      	b.n	8025e44 <__mcmp+0x28>

08025e54 <__mdiff>:
 8025e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e58:	460c      	mov	r4, r1
 8025e5a:	4606      	mov	r6, r0
 8025e5c:	4611      	mov	r1, r2
 8025e5e:	4620      	mov	r0, r4
 8025e60:	4617      	mov	r7, r2
 8025e62:	f7ff ffdb 	bl	8025e1c <__mcmp>
 8025e66:	1e05      	subs	r5, r0, #0
 8025e68:	d110      	bne.n	8025e8c <__mdiff+0x38>
 8025e6a:	4629      	mov	r1, r5
 8025e6c:	4630      	mov	r0, r6
 8025e6e:	f7ff fd57 	bl	8025920 <_Balloc>
 8025e72:	b930      	cbnz	r0, 8025e82 <__mdiff+0x2e>
 8025e74:	4b39      	ldr	r3, [pc, #228]	; (8025f5c <__mdiff+0x108>)
 8025e76:	4602      	mov	r2, r0
 8025e78:	f240 2132 	movw	r1, #562	; 0x232
 8025e7c:	4838      	ldr	r0, [pc, #224]	; (8025f60 <__mdiff+0x10c>)
 8025e7e:	f000 fa37 	bl	80262f0 <__assert_func>
 8025e82:	2301      	movs	r3, #1
 8025e84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8025e88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e8c:	bfa4      	itt	ge
 8025e8e:	463b      	movge	r3, r7
 8025e90:	4627      	movge	r7, r4
 8025e92:	4630      	mov	r0, r6
 8025e94:	6879      	ldr	r1, [r7, #4]
 8025e96:	bfa6      	itte	ge
 8025e98:	461c      	movge	r4, r3
 8025e9a:	2500      	movge	r5, #0
 8025e9c:	2501      	movlt	r5, #1
 8025e9e:	f7ff fd3f 	bl	8025920 <_Balloc>
 8025ea2:	b920      	cbnz	r0, 8025eae <__mdiff+0x5a>
 8025ea4:	4b2d      	ldr	r3, [pc, #180]	; (8025f5c <__mdiff+0x108>)
 8025ea6:	4602      	mov	r2, r0
 8025ea8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8025eac:	e7e6      	b.n	8025e7c <__mdiff+0x28>
 8025eae:	693e      	ldr	r6, [r7, #16]
 8025eb0:	60c5      	str	r5, [r0, #12]
 8025eb2:	6925      	ldr	r5, [r4, #16]
 8025eb4:	f107 0114 	add.w	r1, r7, #20
 8025eb8:	f104 0914 	add.w	r9, r4, #20
 8025ebc:	f100 0e14 	add.w	lr, r0, #20
 8025ec0:	f107 0210 	add.w	r2, r7, #16
 8025ec4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8025ec8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8025ecc:	46f2      	mov	sl, lr
 8025ece:	2700      	movs	r7, #0
 8025ed0:	f859 3b04 	ldr.w	r3, [r9], #4
 8025ed4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8025ed8:	fa1f f883 	uxth.w	r8, r3
 8025edc:	fa17 f78b 	uxtah	r7, r7, fp
 8025ee0:	0c1b      	lsrs	r3, r3, #16
 8025ee2:	eba7 0808 	sub.w	r8, r7, r8
 8025ee6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8025eea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8025eee:	fa1f f888 	uxth.w	r8, r8
 8025ef2:	141f      	asrs	r7, r3, #16
 8025ef4:	454d      	cmp	r5, r9
 8025ef6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8025efa:	f84a 3b04 	str.w	r3, [sl], #4
 8025efe:	d8e7      	bhi.n	8025ed0 <__mdiff+0x7c>
 8025f00:	1b2b      	subs	r3, r5, r4
 8025f02:	3b15      	subs	r3, #21
 8025f04:	f023 0303 	bic.w	r3, r3, #3
 8025f08:	3304      	adds	r3, #4
 8025f0a:	3415      	adds	r4, #21
 8025f0c:	42a5      	cmp	r5, r4
 8025f0e:	bf38      	it	cc
 8025f10:	2304      	movcc	r3, #4
 8025f12:	4419      	add	r1, r3
 8025f14:	4473      	add	r3, lr
 8025f16:	469e      	mov	lr, r3
 8025f18:	460d      	mov	r5, r1
 8025f1a:	4565      	cmp	r5, ip
 8025f1c:	d30e      	bcc.n	8025f3c <__mdiff+0xe8>
 8025f1e:	f10c 0203 	add.w	r2, ip, #3
 8025f22:	1a52      	subs	r2, r2, r1
 8025f24:	f022 0203 	bic.w	r2, r2, #3
 8025f28:	3903      	subs	r1, #3
 8025f2a:	458c      	cmp	ip, r1
 8025f2c:	bf38      	it	cc
 8025f2e:	2200      	movcc	r2, #0
 8025f30:	441a      	add	r2, r3
 8025f32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8025f36:	b17b      	cbz	r3, 8025f58 <__mdiff+0x104>
 8025f38:	6106      	str	r6, [r0, #16]
 8025f3a:	e7a5      	b.n	8025e88 <__mdiff+0x34>
 8025f3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8025f40:	fa17 f488 	uxtah	r4, r7, r8
 8025f44:	1422      	asrs	r2, r4, #16
 8025f46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8025f4a:	b2a4      	uxth	r4, r4
 8025f4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8025f50:	f84e 4b04 	str.w	r4, [lr], #4
 8025f54:	1417      	asrs	r7, r2, #16
 8025f56:	e7e0      	b.n	8025f1a <__mdiff+0xc6>
 8025f58:	3e01      	subs	r6, #1
 8025f5a:	e7ea      	b.n	8025f32 <__mdiff+0xde>
 8025f5c:	0802716b 	.word	0x0802716b
 8025f60:	0802717c 	.word	0x0802717c

08025f64 <__d2b>:
 8025f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025f68:	4689      	mov	r9, r1
 8025f6a:	2101      	movs	r1, #1
 8025f6c:	ec57 6b10 	vmov	r6, r7, d0
 8025f70:	4690      	mov	r8, r2
 8025f72:	f7ff fcd5 	bl	8025920 <_Balloc>
 8025f76:	4604      	mov	r4, r0
 8025f78:	b930      	cbnz	r0, 8025f88 <__d2b+0x24>
 8025f7a:	4602      	mov	r2, r0
 8025f7c:	4b25      	ldr	r3, [pc, #148]	; (8026014 <__d2b+0xb0>)
 8025f7e:	4826      	ldr	r0, [pc, #152]	; (8026018 <__d2b+0xb4>)
 8025f80:	f240 310a 	movw	r1, #778	; 0x30a
 8025f84:	f000 f9b4 	bl	80262f0 <__assert_func>
 8025f88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8025f8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8025f90:	bb35      	cbnz	r5, 8025fe0 <__d2b+0x7c>
 8025f92:	2e00      	cmp	r6, #0
 8025f94:	9301      	str	r3, [sp, #4]
 8025f96:	d028      	beq.n	8025fea <__d2b+0x86>
 8025f98:	4668      	mov	r0, sp
 8025f9a:	9600      	str	r6, [sp, #0]
 8025f9c:	f7ff fd8c 	bl	8025ab8 <__lo0bits>
 8025fa0:	9900      	ldr	r1, [sp, #0]
 8025fa2:	b300      	cbz	r0, 8025fe6 <__d2b+0x82>
 8025fa4:	9a01      	ldr	r2, [sp, #4]
 8025fa6:	f1c0 0320 	rsb	r3, r0, #32
 8025faa:	fa02 f303 	lsl.w	r3, r2, r3
 8025fae:	430b      	orrs	r3, r1
 8025fb0:	40c2      	lsrs	r2, r0
 8025fb2:	6163      	str	r3, [r4, #20]
 8025fb4:	9201      	str	r2, [sp, #4]
 8025fb6:	9b01      	ldr	r3, [sp, #4]
 8025fb8:	61a3      	str	r3, [r4, #24]
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	bf14      	ite	ne
 8025fbe:	2202      	movne	r2, #2
 8025fc0:	2201      	moveq	r2, #1
 8025fc2:	6122      	str	r2, [r4, #16]
 8025fc4:	b1d5      	cbz	r5, 8025ffc <__d2b+0x98>
 8025fc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8025fca:	4405      	add	r5, r0
 8025fcc:	f8c9 5000 	str.w	r5, [r9]
 8025fd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8025fd4:	f8c8 0000 	str.w	r0, [r8]
 8025fd8:	4620      	mov	r0, r4
 8025fda:	b003      	add	sp, #12
 8025fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8025fe4:	e7d5      	b.n	8025f92 <__d2b+0x2e>
 8025fe6:	6161      	str	r1, [r4, #20]
 8025fe8:	e7e5      	b.n	8025fb6 <__d2b+0x52>
 8025fea:	a801      	add	r0, sp, #4
 8025fec:	f7ff fd64 	bl	8025ab8 <__lo0bits>
 8025ff0:	9b01      	ldr	r3, [sp, #4]
 8025ff2:	6163      	str	r3, [r4, #20]
 8025ff4:	2201      	movs	r2, #1
 8025ff6:	6122      	str	r2, [r4, #16]
 8025ff8:	3020      	adds	r0, #32
 8025ffa:	e7e3      	b.n	8025fc4 <__d2b+0x60>
 8025ffc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026000:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8026004:	f8c9 0000 	str.w	r0, [r9]
 8026008:	6918      	ldr	r0, [r3, #16]
 802600a:	f7ff fd35 	bl	8025a78 <__hi0bits>
 802600e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026012:	e7df      	b.n	8025fd4 <__d2b+0x70>
 8026014:	0802716b 	.word	0x0802716b
 8026018:	0802717c 	.word	0x0802717c

0802601c <_calloc_r>:
 802601c:	b513      	push	{r0, r1, r4, lr}
 802601e:	434a      	muls	r2, r1
 8026020:	4611      	mov	r1, r2
 8026022:	9201      	str	r2, [sp, #4]
 8026024:	f7fe f900 	bl	8024228 <_malloc_r>
 8026028:	4604      	mov	r4, r0
 802602a:	b118      	cbz	r0, 8026034 <_calloc_r+0x18>
 802602c:	9a01      	ldr	r2, [sp, #4]
 802602e:	2100      	movs	r1, #0
 8026030:	f7fe f8a2 	bl	8024178 <memset>
 8026034:	4620      	mov	r0, r4
 8026036:	b002      	add	sp, #8
 8026038:	bd10      	pop	{r4, pc}

0802603a <__ssputs_r>:
 802603a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802603e:	688e      	ldr	r6, [r1, #8]
 8026040:	429e      	cmp	r6, r3
 8026042:	4682      	mov	sl, r0
 8026044:	460c      	mov	r4, r1
 8026046:	4690      	mov	r8, r2
 8026048:	461f      	mov	r7, r3
 802604a:	d838      	bhi.n	80260be <__ssputs_r+0x84>
 802604c:	898a      	ldrh	r2, [r1, #12]
 802604e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026052:	d032      	beq.n	80260ba <__ssputs_r+0x80>
 8026054:	6825      	ldr	r5, [r4, #0]
 8026056:	6909      	ldr	r1, [r1, #16]
 8026058:	eba5 0901 	sub.w	r9, r5, r1
 802605c:	6965      	ldr	r5, [r4, #20]
 802605e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026062:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026066:	3301      	adds	r3, #1
 8026068:	444b      	add	r3, r9
 802606a:	106d      	asrs	r5, r5, #1
 802606c:	429d      	cmp	r5, r3
 802606e:	bf38      	it	cc
 8026070:	461d      	movcc	r5, r3
 8026072:	0553      	lsls	r3, r2, #21
 8026074:	d531      	bpl.n	80260da <__ssputs_r+0xa0>
 8026076:	4629      	mov	r1, r5
 8026078:	f7fe f8d6 	bl	8024228 <_malloc_r>
 802607c:	4606      	mov	r6, r0
 802607e:	b950      	cbnz	r0, 8026096 <__ssputs_r+0x5c>
 8026080:	230c      	movs	r3, #12
 8026082:	f8ca 3000 	str.w	r3, [sl]
 8026086:	89a3      	ldrh	r3, [r4, #12]
 8026088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802608c:	81a3      	strh	r3, [r4, #12]
 802608e:	f04f 30ff 	mov.w	r0, #4294967295
 8026092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026096:	6921      	ldr	r1, [r4, #16]
 8026098:	464a      	mov	r2, r9
 802609a:	f7fe f85f 	bl	802415c <memcpy>
 802609e:	89a3      	ldrh	r3, [r4, #12]
 80260a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80260a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80260a8:	81a3      	strh	r3, [r4, #12]
 80260aa:	6126      	str	r6, [r4, #16]
 80260ac:	6165      	str	r5, [r4, #20]
 80260ae:	444e      	add	r6, r9
 80260b0:	eba5 0509 	sub.w	r5, r5, r9
 80260b4:	6026      	str	r6, [r4, #0]
 80260b6:	60a5      	str	r5, [r4, #8]
 80260b8:	463e      	mov	r6, r7
 80260ba:	42be      	cmp	r6, r7
 80260bc:	d900      	bls.n	80260c0 <__ssputs_r+0x86>
 80260be:	463e      	mov	r6, r7
 80260c0:	4632      	mov	r2, r6
 80260c2:	6820      	ldr	r0, [r4, #0]
 80260c4:	4641      	mov	r1, r8
 80260c6:	f000 f958 	bl	802637a <memmove>
 80260ca:	68a3      	ldr	r3, [r4, #8]
 80260cc:	6822      	ldr	r2, [r4, #0]
 80260ce:	1b9b      	subs	r3, r3, r6
 80260d0:	4432      	add	r2, r6
 80260d2:	60a3      	str	r3, [r4, #8]
 80260d4:	6022      	str	r2, [r4, #0]
 80260d6:	2000      	movs	r0, #0
 80260d8:	e7db      	b.n	8026092 <__ssputs_r+0x58>
 80260da:	462a      	mov	r2, r5
 80260dc:	f000 f967 	bl	80263ae <_realloc_r>
 80260e0:	4606      	mov	r6, r0
 80260e2:	2800      	cmp	r0, #0
 80260e4:	d1e1      	bne.n	80260aa <__ssputs_r+0x70>
 80260e6:	6921      	ldr	r1, [r4, #16]
 80260e8:	4650      	mov	r0, sl
 80260ea:	f7fe f84d 	bl	8024188 <_free_r>
 80260ee:	e7c7      	b.n	8026080 <__ssputs_r+0x46>

080260f0 <_svfiprintf_r>:
 80260f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80260f4:	4698      	mov	r8, r3
 80260f6:	898b      	ldrh	r3, [r1, #12]
 80260f8:	061b      	lsls	r3, r3, #24
 80260fa:	b09d      	sub	sp, #116	; 0x74
 80260fc:	4607      	mov	r7, r0
 80260fe:	460d      	mov	r5, r1
 8026100:	4614      	mov	r4, r2
 8026102:	d50e      	bpl.n	8026122 <_svfiprintf_r+0x32>
 8026104:	690b      	ldr	r3, [r1, #16]
 8026106:	b963      	cbnz	r3, 8026122 <_svfiprintf_r+0x32>
 8026108:	2140      	movs	r1, #64	; 0x40
 802610a:	f7fe f88d 	bl	8024228 <_malloc_r>
 802610e:	6028      	str	r0, [r5, #0]
 8026110:	6128      	str	r0, [r5, #16]
 8026112:	b920      	cbnz	r0, 802611e <_svfiprintf_r+0x2e>
 8026114:	230c      	movs	r3, #12
 8026116:	603b      	str	r3, [r7, #0]
 8026118:	f04f 30ff 	mov.w	r0, #4294967295
 802611c:	e0d1      	b.n	80262c2 <_svfiprintf_r+0x1d2>
 802611e:	2340      	movs	r3, #64	; 0x40
 8026120:	616b      	str	r3, [r5, #20]
 8026122:	2300      	movs	r3, #0
 8026124:	9309      	str	r3, [sp, #36]	; 0x24
 8026126:	2320      	movs	r3, #32
 8026128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802612c:	f8cd 800c 	str.w	r8, [sp, #12]
 8026130:	2330      	movs	r3, #48	; 0x30
 8026132:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80262dc <_svfiprintf_r+0x1ec>
 8026136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802613a:	f04f 0901 	mov.w	r9, #1
 802613e:	4623      	mov	r3, r4
 8026140:	469a      	mov	sl, r3
 8026142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026146:	b10a      	cbz	r2, 802614c <_svfiprintf_r+0x5c>
 8026148:	2a25      	cmp	r2, #37	; 0x25
 802614a:	d1f9      	bne.n	8026140 <_svfiprintf_r+0x50>
 802614c:	ebba 0b04 	subs.w	fp, sl, r4
 8026150:	d00b      	beq.n	802616a <_svfiprintf_r+0x7a>
 8026152:	465b      	mov	r3, fp
 8026154:	4622      	mov	r2, r4
 8026156:	4629      	mov	r1, r5
 8026158:	4638      	mov	r0, r7
 802615a:	f7ff ff6e 	bl	802603a <__ssputs_r>
 802615e:	3001      	adds	r0, #1
 8026160:	f000 80aa 	beq.w	80262b8 <_svfiprintf_r+0x1c8>
 8026164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026166:	445a      	add	r2, fp
 8026168:	9209      	str	r2, [sp, #36]	; 0x24
 802616a:	f89a 3000 	ldrb.w	r3, [sl]
 802616e:	2b00      	cmp	r3, #0
 8026170:	f000 80a2 	beq.w	80262b8 <_svfiprintf_r+0x1c8>
 8026174:	2300      	movs	r3, #0
 8026176:	f04f 32ff 	mov.w	r2, #4294967295
 802617a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802617e:	f10a 0a01 	add.w	sl, sl, #1
 8026182:	9304      	str	r3, [sp, #16]
 8026184:	9307      	str	r3, [sp, #28]
 8026186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802618a:	931a      	str	r3, [sp, #104]	; 0x68
 802618c:	4654      	mov	r4, sl
 802618e:	2205      	movs	r2, #5
 8026190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026194:	4851      	ldr	r0, [pc, #324]	; (80262dc <_svfiprintf_r+0x1ec>)
 8026196:	f7e9 ff5b 	bl	8010050 <memchr>
 802619a:	9a04      	ldr	r2, [sp, #16]
 802619c:	b9d8      	cbnz	r0, 80261d6 <_svfiprintf_r+0xe6>
 802619e:	06d0      	lsls	r0, r2, #27
 80261a0:	bf44      	itt	mi
 80261a2:	2320      	movmi	r3, #32
 80261a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80261a8:	0711      	lsls	r1, r2, #28
 80261aa:	bf44      	itt	mi
 80261ac:	232b      	movmi	r3, #43	; 0x2b
 80261ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80261b2:	f89a 3000 	ldrb.w	r3, [sl]
 80261b6:	2b2a      	cmp	r3, #42	; 0x2a
 80261b8:	d015      	beq.n	80261e6 <_svfiprintf_r+0xf6>
 80261ba:	9a07      	ldr	r2, [sp, #28]
 80261bc:	4654      	mov	r4, sl
 80261be:	2000      	movs	r0, #0
 80261c0:	f04f 0c0a 	mov.w	ip, #10
 80261c4:	4621      	mov	r1, r4
 80261c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80261ca:	3b30      	subs	r3, #48	; 0x30
 80261cc:	2b09      	cmp	r3, #9
 80261ce:	d94e      	bls.n	802626e <_svfiprintf_r+0x17e>
 80261d0:	b1b0      	cbz	r0, 8026200 <_svfiprintf_r+0x110>
 80261d2:	9207      	str	r2, [sp, #28]
 80261d4:	e014      	b.n	8026200 <_svfiprintf_r+0x110>
 80261d6:	eba0 0308 	sub.w	r3, r0, r8
 80261da:	fa09 f303 	lsl.w	r3, r9, r3
 80261de:	4313      	orrs	r3, r2
 80261e0:	9304      	str	r3, [sp, #16]
 80261e2:	46a2      	mov	sl, r4
 80261e4:	e7d2      	b.n	802618c <_svfiprintf_r+0x9c>
 80261e6:	9b03      	ldr	r3, [sp, #12]
 80261e8:	1d19      	adds	r1, r3, #4
 80261ea:	681b      	ldr	r3, [r3, #0]
 80261ec:	9103      	str	r1, [sp, #12]
 80261ee:	2b00      	cmp	r3, #0
 80261f0:	bfbb      	ittet	lt
 80261f2:	425b      	neglt	r3, r3
 80261f4:	f042 0202 	orrlt.w	r2, r2, #2
 80261f8:	9307      	strge	r3, [sp, #28]
 80261fa:	9307      	strlt	r3, [sp, #28]
 80261fc:	bfb8      	it	lt
 80261fe:	9204      	strlt	r2, [sp, #16]
 8026200:	7823      	ldrb	r3, [r4, #0]
 8026202:	2b2e      	cmp	r3, #46	; 0x2e
 8026204:	d10c      	bne.n	8026220 <_svfiprintf_r+0x130>
 8026206:	7863      	ldrb	r3, [r4, #1]
 8026208:	2b2a      	cmp	r3, #42	; 0x2a
 802620a:	d135      	bne.n	8026278 <_svfiprintf_r+0x188>
 802620c:	9b03      	ldr	r3, [sp, #12]
 802620e:	1d1a      	adds	r2, r3, #4
 8026210:	681b      	ldr	r3, [r3, #0]
 8026212:	9203      	str	r2, [sp, #12]
 8026214:	2b00      	cmp	r3, #0
 8026216:	bfb8      	it	lt
 8026218:	f04f 33ff 	movlt.w	r3, #4294967295
 802621c:	3402      	adds	r4, #2
 802621e:	9305      	str	r3, [sp, #20]
 8026220:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80262ec <_svfiprintf_r+0x1fc>
 8026224:	7821      	ldrb	r1, [r4, #0]
 8026226:	2203      	movs	r2, #3
 8026228:	4650      	mov	r0, sl
 802622a:	f7e9 ff11 	bl	8010050 <memchr>
 802622e:	b140      	cbz	r0, 8026242 <_svfiprintf_r+0x152>
 8026230:	2340      	movs	r3, #64	; 0x40
 8026232:	eba0 000a 	sub.w	r0, r0, sl
 8026236:	fa03 f000 	lsl.w	r0, r3, r0
 802623a:	9b04      	ldr	r3, [sp, #16]
 802623c:	4303      	orrs	r3, r0
 802623e:	3401      	adds	r4, #1
 8026240:	9304      	str	r3, [sp, #16]
 8026242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026246:	4826      	ldr	r0, [pc, #152]	; (80262e0 <_svfiprintf_r+0x1f0>)
 8026248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802624c:	2206      	movs	r2, #6
 802624e:	f7e9 feff 	bl	8010050 <memchr>
 8026252:	2800      	cmp	r0, #0
 8026254:	d038      	beq.n	80262c8 <_svfiprintf_r+0x1d8>
 8026256:	4b23      	ldr	r3, [pc, #140]	; (80262e4 <_svfiprintf_r+0x1f4>)
 8026258:	bb1b      	cbnz	r3, 80262a2 <_svfiprintf_r+0x1b2>
 802625a:	9b03      	ldr	r3, [sp, #12]
 802625c:	3307      	adds	r3, #7
 802625e:	f023 0307 	bic.w	r3, r3, #7
 8026262:	3308      	adds	r3, #8
 8026264:	9303      	str	r3, [sp, #12]
 8026266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026268:	4433      	add	r3, r6
 802626a:	9309      	str	r3, [sp, #36]	; 0x24
 802626c:	e767      	b.n	802613e <_svfiprintf_r+0x4e>
 802626e:	fb0c 3202 	mla	r2, ip, r2, r3
 8026272:	460c      	mov	r4, r1
 8026274:	2001      	movs	r0, #1
 8026276:	e7a5      	b.n	80261c4 <_svfiprintf_r+0xd4>
 8026278:	2300      	movs	r3, #0
 802627a:	3401      	adds	r4, #1
 802627c:	9305      	str	r3, [sp, #20]
 802627e:	4619      	mov	r1, r3
 8026280:	f04f 0c0a 	mov.w	ip, #10
 8026284:	4620      	mov	r0, r4
 8026286:	f810 2b01 	ldrb.w	r2, [r0], #1
 802628a:	3a30      	subs	r2, #48	; 0x30
 802628c:	2a09      	cmp	r2, #9
 802628e:	d903      	bls.n	8026298 <_svfiprintf_r+0x1a8>
 8026290:	2b00      	cmp	r3, #0
 8026292:	d0c5      	beq.n	8026220 <_svfiprintf_r+0x130>
 8026294:	9105      	str	r1, [sp, #20]
 8026296:	e7c3      	b.n	8026220 <_svfiprintf_r+0x130>
 8026298:	fb0c 2101 	mla	r1, ip, r1, r2
 802629c:	4604      	mov	r4, r0
 802629e:	2301      	movs	r3, #1
 80262a0:	e7f0      	b.n	8026284 <_svfiprintf_r+0x194>
 80262a2:	ab03      	add	r3, sp, #12
 80262a4:	9300      	str	r3, [sp, #0]
 80262a6:	462a      	mov	r2, r5
 80262a8:	4b0f      	ldr	r3, [pc, #60]	; (80262e8 <_svfiprintf_r+0x1f8>)
 80262aa:	a904      	add	r1, sp, #16
 80262ac:	4638      	mov	r0, r7
 80262ae:	f7fe f8b5 	bl	802441c <_printf_float>
 80262b2:	1c42      	adds	r2, r0, #1
 80262b4:	4606      	mov	r6, r0
 80262b6:	d1d6      	bne.n	8026266 <_svfiprintf_r+0x176>
 80262b8:	89ab      	ldrh	r3, [r5, #12]
 80262ba:	065b      	lsls	r3, r3, #25
 80262bc:	f53f af2c 	bmi.w	8026118 <_svfiprintf_r+0x28>
 80262c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80262c2:	b01d      	add	sp, #116	; 0x74
 80262c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262c8:	ab03      	add	r3, sp, #12
 80262ca:	9300      	str	r3, [sp, #0]
 80262cc:	462a      	mov	r2, r5
 80262ce:	4b06      	ldr	r3, [pc, #24]	; (80262e8 <_svfiprintf_r+0x1f8>)
 80262d0:	a904      	add	r1, sp, #16
 80262d2:	4638      	mov	r0, r7
 80262d4:	f7fe fb46 	bl	8024964 <_printf_i>
 80262d8:	e7eb      	b.n	80262b2 <_svfiprintf_r+0x1c2>
 80262da:	bf00      	nop
 80262dc:	080272dc 	.word	0x080272dc
 80262e0:	080272e6 	.word	0x080272e6
 80262e4:	0802441d 	.word	0x0802441d
 80262e8:	0802603b 	.word	0x0802603b
 80262ec:	080272e2 	.word	0x080272e2

080262f0 <__assert_func>:
 80262f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80262f2:	4614      	mov	r4, r2
 80262f4:	461a      	mov	r2, r3
 80262f6:	4b09      	ldr	r3, [pc, #36]	; (802631c <__assert_func+0x2c>)
 80262f8:	681b      	ldr	r3, [r3, #0]
 80262fa:	4605      	mov	r5, r0
 80262fc:	68d8      	ldr	r0, [r3, #12]
 80262fe:	b14c      	cbz	r4, 8026314 <__assert_func+0x24>
 8026300:	4b07      	ldr	r3, [pc, #28]	; (8026320 <__assert_func+0x30>)
 8026302:	9100      	str	r1, [sp, #0]
 8026304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026308:	4906      	ldr	r1, [pc, #24]	; (8026324 <__assert_func+0x34>)
 802630a:	462b      	mov	r3, r5
 802630c:	f000 f80e 	bl	802632c <fiprintf>
 8026310:	f000 fa9a 	bl	8026848 <abort>
 8026314:	4b04      	ldr	r3, [pc, #16]	; (8026328 <__assert_func+0x38>)
 8026316:	461c      	mov	r4, r3
 8026318:	e7f3      	b.n	8026302 <__assert_func+0x12>
 802631a:	bf00      	nop
 802631c:	20000458 	.word	0x20000458
 8026320:	080272ed 	.word	0x080272ed
 8026324:	080272fa 	.word	0x080272fa
 8026328:	08027328 	.word	0x08027328

0802632c <fiprintf>:
 802632c:	b40e      	push	{r1, r2, r3}
 802632e:	b503      	push	{r0, r1, lr}
 8026330:	4601      	mov	r1, r0
 8026332:	ab03      	add	r3, sp, #12
 8026334:	4805      	ldr	r0, [pc, #20]	; (802634c <fiprintf+0x20>)
 8026336:	f853 2b04 	ldr.w	r2, [r3], #4
 802633a:	6800      	ldr	r0, [r0, #0]
 802633c:	9301      	str	r3, [sp, #4]
 802633e:	f000 f885 	bl	802644c <_vfiprintf_r>
 8026342:	b002      	add	sp, #8
 8026344:	f85d eb04 	ldr.w	lr, [sp], #4
 8026348:	b003      	add	sp, #12
 802634a:	4770      	bx	lr
 802634c:	20000458 	.word	0x20000458

08026350 <__retarget_lock_init_recursive>:
 8026350:	4770      	bx	lr

08026352 <__retarget_lock_acquire_recursive>:
 8026352:	4770      	bx	lr

08026354 <__retarget_lock_release_recursive>:
 8026354:	4770      	bx	lr

08026356 <__ascii_mbtowc>:
 8026356:	b082      	sub	sp, #8
 8026358:	b901      	cbnz	r1, 802635c <__ascii_mbtowc+0x6>
 802635a:	a901      	add	r1, sp, #4
 802635c:	b142      	cbz	r2, 8026370 <__ascii_mbtowc+0x1a>
 802635e:	b14b      	cbz	r3, 8026374 <__ascii_mbtowc+0x1e>
 8026360:	7813      	ldrb	r3, [r2, #0]
 8026362:	600b      	str	r3, [r1, #0]
 8026364:	7812      	ldrb	r2, [r2, #0]
 8026366:	1e10      	subs	r0, r2, #0
 8026368:	bf18      	it	ne
 802636a:	2001      	movne	r0, #1
 802636c:	b002      	add	sp, #8
 802636e:	4770      	bx	lr
 8026370:	4610      	mov	r0, r2
 8026372:	e7fb      	b.n	802636c <__ascii_mbtowc+0x16>
 8026374:	f06f 0001 	mvn.w	r0, #1
 8026378:	e7f8      	b.n	802636c <__ascii_mbtowc+0x16>

0802637a <memmove>:
 802637a:	4288      	cmp	r0, r1
 802637c:	b510      	push	{r4, lr}
 802637e:	eb01 0402 	add.w	r4, r1, r2
 8026382:	d902      	bls.n	802638a <memmove+0x10>
 8026384:	4284      	cmp	r4, r0
 8026386:	4623      	mov	r3, r4
 8026388:	d807      	bhi.n	802639a <memmove+0x20>
 802638a:	1e43      	subs	r3, r0, #1
 802638c:	42a1      	cmp	r1, r4
 802638e:	d008      	beq.n	80263a2 <memmove+0x28>
 8026390:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026394:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026398:	e7f8      	b.n	802638c <memmove+0x12>
 802639a:	4402      	add	r2, r0
 802639c:	4601      	mov	r1, r0
 802639e:	428a      	cmp	r2, r1
 80263a0:	d100      	bne.n	80263a4 <memmove+0x2a>
 80263a2:	bd10      	pop	{r4, pc}
 80263a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80263a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80263ac:	e7f7      	b.n	802639e <memmove+0x24>

080263ae <_realloc_r>:
 80263ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263b0:	4607      	mov	r7, r0
 80263b2:	4614      	mov	r4, r2
 80263b4:	460e      	mov	r6, r1
 80263b6:	b921      	cbnz	r1, 80263c2 <_realloc_r+0x14>
 80263b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80263bc:	4611      	mov	r1, r2
 80263be:	f7fd bf33 	b.w	8024228 <_malloc_r>
 80263c2:	b922      	cbnz	r2, 80263ce <_realloc_r+0x20>
 80263c4:	f7fd fee0 	bl	8024188 <_free_r>
 80263c8:	4625      	mov	r5, r4
 80263ca:	4628      	mov	r0, r5
 80263cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80263ce:	f000 fc5f 	bl	8026c90 <_malloc_usable_size_r>
 80263d2:	42a0      	cmp	r0, r4
 80263d4:	d20f      	bcs.n	80263f6 <_realloc_r+0x48>
 80263d6:	4621      	mov	r1, r4
 80263d8:	4638      	mov	r0, r7
 80263da:	f7fd ff25 	bl	8024228 <_malloc_r>
 80263de:	4605      	mov	r5, r0
 80263e0:	2800      	cmp	r0, #0
 80263e2:	d0f2      	beq.n	80263ca <_realloc_r+0x1c>
 80263e4:	4631      	mov	r1, r6
 80263e6:	4622      	mov	r2, r4
 80263e8:	f7fd feb8 	bl	802415c <memcpy>
 80263ec:	4631      	mov	r1, r6
 80263ee:	4638      	mov	r0, r7
 80263f0:	f7fd feca 	bl	8024188 <_free_r>
 80263f4:	e7e9      	b.n	80263ca <_realloc_r+0x1c>
 80263f6:	4635      	mov	r5, r6
 80263f8:	e7e7      	b.n	80263ca <_realloc_r+0x1c>

080263fa <__sfputc_r>:
 80263fa:	6893      	ldr	r3, [r2, #8]
 80263fc:	3b01      	subs	r3, #1
 80263fe:	2b00      	cmp	r3, #0
 8026400:	b410      	push	{r4}
 8026402:	6093      	str	r3, [r2, #8]
 8026404:	da08      	bge.n	8026418 <__sfputc_r+0x1e>
 8026406:	6994      	ldr	r4, [r2, #24]
 8026408:	42a3      	cmp	r3, r4
 802640a:	db01      	blt.n	8026410 <__sfputc_r+0x16>
 802640c:	290a      	cmp	r1, #10
 802640e:	d103      	bne.n	8026418 <__sfputc_r+0x1e>
 8026410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026414:	f000 b94a 	b.w	80266ac <__swbuf_r>
 8026418:	6813      	ldr	r3, [r2, #0]
 802641a:	1c58      	adds	r0, r3, #1
 802641c:	6010      	str	r0, [r2, #0]
 802641e:	7019      	strb	r1, [r3, #0]
 8026420:	4608      	mov	r0, r1
 8026422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026426:	4770      	bx	lr

08026428 <__sfputs_r>:
 8026428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802642a:	4606      	mov	r6, r0
 802642c:	460f      	mov	r7, r1
 802642e:	4614      	mov	r4, r2
 8026430:	18d5      	adds	r5, r2, r3
 8026432:	42ac      	cmp	r4, r5
 8026434:	d101      	bne.n	802643a <__sfputs_r+0x12>
 8026436:	2000      	movs	r0, #0
 8026438:	e007      	b.n	802644a <__sfputs_r+0x22>
 802643a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802643e:	463a      	mov	r2, r7
 8026440:	4630      	mov	r0, r6
 8026442:	f7ff ffda 	bl	80263fa <__sfputc_r>
 8026446:	1c43      	adds	r3, r0, #1
 8026448:	d1f3      	bne.n	8026432 <__sfputs_r+0xa>
 802644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802644c <_vfiprintf_r>:
 802644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026450:	460d      	mov	r5, r1
 8026452:	b09d      	sub	sp, #116	; 0x74
 8026454:	4614      	mov	r4, r2
 8026456:	4698      	mov	r8, r3
 8026458:	4606      	mov	r6, r0
 802645a:	b118      	cbz	r0, 8026464 <_vfiprintf_r+0x18>
 802645c:	6983      	ldr	r3, [r0, #24]
 802645e:	b90b      	cbnz	r3, 8026464 <_vfiprintf_r+0x18>
 8026460:	f000 fb14 	bl	8026a8c <__sinit>
 8026464:	4b89      	ldr	r3, [pc, #548]	; (802668c <_vfiprintf_r+0x240>)
 8026466:	429d      	cmp	r5, r3
 8026468:	d11b      	bne.n	80264a2 <_vfiprintf_r+0x56>
 802646a:	6875      	ldr	r5, [r6, #4]
 802646c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802646e:	07d9      	lsls	r1, r3, #31
 8026470:	d405      	bmi.n	802647e <_vfiprintf_r+0x32>
 8026472:	89ab      	ldrh	r3, [r5, #12]
 8026474:	059a      	lsls	r2, r3, #22
 8026476:	d402      	bmi.n	802647e <_vfiprintf_r+0x32>
 8026478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802647a:	f7ff ff6a 	bl	8026352 <__retarget_lock_acquire_recursive>
 802647e:	89ab      	ldrh	r3, [r5, #12]
 8026480:	071b      	lsls	r3, r3, #28
 8026482:	d501      	bpl.n	8026488 <_vfiprintf_r+0x3c>
 8026484:	692b      	ldr	r3, [r5, #16]
 8026486:	b9eb      	cbnz	r3, 80264c4 <_vfiprintf_r+0x78>
 8026488:	4629      	mov	r1, r5
 802648a:	4630      	mov	r0, r6
 802648c:	f000 f96e 	bl	802676c <__swsetup_r>
 8026490:	b1c0      	cbz	r0, 80264c4 <_vfiprintf_r+0x78>
 8026492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026494:	07dc      	lsls	r4, r3, #31
 8026496:	d50e      	bpl.n	80264b6 <_vfiprintf_r+0x6a>
 8026498:	f04f 30ff 	mov.w	r0, #4294967295
 802649c:	b01d      	add	sp, #116	; 0x74
 802649e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264a2:	4b7b      	ldr	r3, [pc, #492]	; (8026690 <_vfiprintf_r+0x244>)
 80264a4:	429d      	cmp	r5, r3
 80264a6:	d101      	bne.n	80264ac <_vfiprintf_r+0x60>
 80264a8:	68b5      	ldr	r5, [r6, #8]
 80264aa:	e7df      	b.n	802646c <_vfiprintf_r+0x20>
 80264ac:	4b79      	ldr	r3, [pc, #484]	; (8026694 <_vfiprintf_r+0x248>)
 80264ae:	429d      	cmp	r5, r3
 80264b0:	bf08      	it	eq
 80264b2:	68f5      	ldreq	r5, [r6, #12]
 80264b4:	e7da      	b.n	802646c <_vfiprintf_r+0x20>
 80264b6:	89ab      	ldrh	r3, [r5, #12]
 80264b8:	0598      	lsls	r0, r3, #22
 80264ba:	d4ed      	bmi.n	8026498 <_vfiprintf_r+0x4c>
 80264bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80264be:	f7ff ff49 	bl	8026354 <__retarget_lock_release_recursive>
 80264c2:	e7e9      	b.n	8026498 <_vfiprintf_r+0x4c>
 80264c4:	2300      	movs	r3, #0
 80264c6:	9309      	str	r3, [sp, #36]	; 0x24
 80264c8:	2320      	movs	r3, #32
 80264ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80264ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80264d2:	2330      	movs	r3, #48	; 0x30
 80264d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026698 <_vfiprintf_r+0x24c>
 80264d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80264dc:	f04f 0901 	mov.w	r9, #1
 80264e0:	4623      	mov	r3, r4
 80264e2:	469a      	mov	sl, r3
 80264e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80264e8:	b10a      	cbz	r2, 80264ee <_vfiprintf_r+0xa2>
 80264ea:	2a25      	cmp	r2, #37	; 0x25
 80264ec:	d1f9      	bne.n	80264e2 <_vfiprintf_r+0x96>
 80264ee:	ebba 0b04 	subs.w	fp, sl, r4
 80264f2:	d00b      	beq.n	802650c <_vfiprintf_r+0xc0>
 80264f4:	465b      	mov	r3, fp
 80264f6:	4622      	mov	r2, r4
 80264f8:	4629      	mov	r1, r5
 80264fa:	4630      	mov	r0, r6
 80264fc:	f7ff ff94 	bl	8026428 <__sfputs_r>
 8026500:	3001      	adds	r0, #1
 8026502:	f000 80aa 	beq.w	802665a <_vfiprintf_r+0x20e>
 8026506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026508:	445a      	add	r2, fp
 802650a:	9209      	str	r2, [sp, #36]	; 0x24
 802650c:	f89a 3000 	ldrb.w	r3, [sl]
 8026510:	2b00      	cmp	r3, #0
 8026512:	f000 80a2 	beq.w	802665a <_vfiprintf_r+0x20e>
 8026516:	2300      	movs	r3, #0
 8026518:	f04f 32ff 	mov.w	r2, #4294967295
 802651c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026520:	f10a 0a01 	add.w	sl, sl, #1
 8026524:	9304      	str	r3, [sp, #16]
 8026526:	9307      	str	r3, [sp, #28]
 8026528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802652c:	931a      	str	r3, [sp, #104]	; 0x68
 802652e:	4654      	mov	r4, sl
 8026530:	2205      	movs	r2, #5
 8026532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026536:	4858      	ldr	r0, [pc, #352]	; (8026698 <_vfiprintf_r+0x24c>)
 8026538:	f7e9 fd8a 	bl	8010050 <memchr>
 802653c:	9a04      	ldr	r2, [sp, #16]
 802653e:	b9d8      	cbnz	r0, 8026578 <_vfiprintf_r+0x12c>
 8026540:	06d1      	lsls	r1, r2, #27
 8026542:	bf44      	itt	mi
 8026544:	2320      	movmi	r3, #32
 8026546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802654a:	0713      	lsls	r3, r2, #28
 802654c:	bf44      	itt	mi
 802654e:	232b      	movmi	r3, #43	; 0x2b
 8026550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026554:	f89a 3000 	ldrb.w	r3, [sl]
 8026558:	2b2a      	cmp	r3, #42	; 0x2a
 802655a:	d015      	beq.n	8026588 <_vfiprintf_r+0x13c>
 802655c:	9a07      	ldr	r2, [sp, #28]
 802655e:	4654      	mov	r4, sl
 8026560:	2000      	movs	r0, #0
 8026562:	f04f 0c0a 	mov.w	ip, #10
 8026566:	4621      	mov	r1, r4
 8026568:	f811 3b01 	ldrb.w	r3, [r1], #1
 802656c:	3b30      	subs	r3, #48	; 0x30
 802656e:	2b09      	cmp	r3, #9
 8026570:	d94e      	bls.n	8026610 <_vfiprintf_r+0x1c4>
 8026572:	b1b0      	cbz	r0, 80265a2 <_vfiprintf_r+0x156>
 8026574:	9207      	str	r2, [sp, #28]
 8026576:	e014      	b.n	80265a2 <_vfiprintf_r+0x156>
 8026578:	eba0 0308 	sub.w	r3, r0, r8
 802657c:	fa09 f303 	lsl.w	r3, r9, r3
 8026580:	4313      	orrs	r3, r2
 8026582:	9304      	str	r3, [sp, #16]
 8026584:	46a2      	mov	sl, r4
 8026586:	e7d2      	b.n	802652e <_vfiprintf_r+0xe2>
 8026588:	9b03      	ldr	r3, [sp, #12]
 802658a:	1d19      	adds	r1, r3, #4
 802658c:	681b      	ldr	r3, [r3, #0]
 802658e:	9103      	str	r1, [sp, #12]
 8026590:	2b00      	cmp	r3, #0
 8026592:	bfbb      	ittet	lt
 8026594:	425b      	neglt	r3, r3
 8026596:	f042 0202 	orrlt.w	r2, r2, #2
 802659a:	9307      	strge	r3, [sp, #28]
 802659c:	9307      	strlt	r3, [sp, #28]
 802659e:	bfb8      	it	lt
 80265a0:	9204      	strlt	r2, [sp, #16]
 80265a2:	7823      	ldrb	r3, [r4, #0]
 80265a4:	2b2e      	cmp	r3, #46	; 0x2e
 80265a6:	d10c      	bne.n	80265c2 <_vfiprintf_r+0x176>
 80265a8:	7863      	ldrb	r3, [r4, #1]
 80265aa:	2b2a      	cmp	r3, #42	; 0x2a
 80265ac:	d135      	bne.n	802661a <_vfiprintf_r+0x1ce>
 80265ae:	9b03      	ldr	r3, [sp, #12]
 80265b0:	1d1a      	adds	r2, r3, #4
 80265b2:	681b      	ldr	r3, [r3, #0]
 80265b4:	9203      	str	r2, [sp, #12]
 80265b6:	2b00      	cmp	r3, #0
 80265b8:	bfb8      	it	lt
 80265ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80265be:	3402      	adds	r4, #2
 80265c0:	9305      	str	r3, [sp, #20]
 80265c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80266a8 <_vfiprintf_r+0x25c>
 80265c6:	7821      	ldrb	r1, [r4, #0]
 80265c8:	2203      	movs	r2, #3
 80265ca:	4650      	mov	r0, sl
 80265cc:	f7e9 fd40 	bl	8010050 <memchr>
 80265d0:	b140      	cbz	r0, 80265e4 <_vfiprintf_r+0x198>
 80265d2:	2340      	movs	r3, #64	; 0x40
 80265d4:	eba0 000a 	sub.w	r0, r0, sl
 80265d8:	fa03 f000 	lsl.w	r0, r3, r0
 80265dc:	9b04      	ldr	r3, [sp, #16]
 80265de:	4303      	orrs	r3, r0
 80265e0:	3401      	adds	r4, #1
 80265e2:	9304      	str	r3, [sp, #16]
 80265e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80265e8:	482c      	ldr	r0, [pc, #176]	; (802669c <_vfiprintf_r+0x250>)
 80265ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80265ee:	2206      	movs	r2, #6
 80265f0:	f7e9 fd2e 	bl	8010050 <memchr>
 80265f4:	2800      	cmp	r0, #0
 80265f6:	d03f      	beq.n	8026678 <_vfiprintf_r+0x22c>
 80265f8:	4b29      	ldr	r3, [pc, #164]	; (80266a0 <_vfiprintf_r+0x254>)
 80265fa:	bb1b      	cbnz	r3, 8026644 <_vfiprintf_r+0x1f8>
 80265fc:	9b03      	ldr	r3, [sp, #12]
 80265fe:	3307      	adds	r3, #7
 8026600:	f023 0307 	bic.w	r3, r3, #7
 8026604:	3308      	adds	r3, #8
 8026606:	9303      	str	r3, [sp, #12]
 8026608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802660a:	443b      	add	r3, r7
 802660c:	9309      	str	r3, [sp, #36]	; 0x24
 802660e:	e767      	b.n	80264e0 <_vfiprintf_r+0x94>
 8026610:	fb0c 3202 	mla	r2, ip, r2, r3
 8026614:	460c      	mov	r4, r1
 8026616:	2001      	movs	r0, #1
 8026618:	e7a5      	b.n	8026566 <_vfiprintf_r+0x11a>
 802661a:	2300      	movs	r3, #0
 802661c:	3401      	adds	r4, #1
 802661e:	9305      	str	r3, [sp, #20]
 8026620:	4619      	mov	r1, r3
 8026622:	f04f 0c0a 	mov.w	ip, #10
 8026626:	4620      	mov	r0, r4
 8026628:	f810 2b01 	ldrb.w	r2, [r0], #1
 802662c:	3a30      	subs	r2, #48	; 0x30
 802662e:	2a09      	cmp	r2, #9
 8026630:	d903      	bls.n	802663a <_vfiprintf_r+0x1ee>
 8026632:	2b00      	cmp	r3, #0
 8026634:	d0c5      	beq.n	80265c2 <_vfiprintf_r+0x176>
 8026636:	9105      	str	r1, [sp, #20]
 8026638:	e7c3      	b.n	80265c2 <_vfiprintf_r+0x176>
 802663a:	fb0c 2101 	mla	r1, ip, r1, r2
 802663e:	4604      	mov	r4, r0
 8026640:	2301      	movs	r3, #1
 8026642:	e7f0      	b.n	8026626 <_vfiprintf_r+0x1da>
 8026644:	ab03      	add	r3, sp, #12
 8026646:	9300      	str	r3, [sp, #0]
 8026648:	462a      	mov	r2, r5
 802664a:	4b16      	ldr	r3, [pc, #88]	; (80266a4 <_vfiprintf_r+0x258>)
 802664c:	a904      	add	r1, sp, #16
 802664e:	4630      	mov	r0, r6
 8026650:	f7fd fee4 	bl	802441c <_printf_float>
 8026654:	4607      	mov	r7, r0
 8026656:	1c78      	adds	r0, r7, #1
 8026658:	d1d6      	bne.n	8026608 <_vfiprintf_r+0x1bc>
 802665a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802665c:	07d9      	lsls	r1, r3, #31
 802665e:	d405      	bmi.n	802666c <_vfiprintf_r+0x220>
 8026660:	89ab      	ldrh	r3, [r5, #12]
 8026662:	059a      	lsls	r2, r3, #22
 8026664:	d402      	bmi.n	802666c <_vfiprintf_r+0x220>
 8026666:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026668:	f7ff fe74 	bl	8026354 <__retarget_lock_release_recursive>
 802666c:	89ab      	ldrh	r3, [r5, #12]
 802666e:	065b      	lsls	r3, r3, #25
 8026670:	f53f af12 	bmi.w	8026498 <_vfiprintf_r+0x4c>
 8026674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026676:	e711      	b.n	802649c <_vfiprintf_r+0x50>
 8026678:	ab03      	add	r3, sp, #12
 802667a:	9300      	str	r3, [sp, #0]
 802667c:	462a      	mov	r2, r5
 802667e:	4b09      	ldr	r3, [pc, #36]	; (80266a4 <_vfiprintf_r+0x258>)
 8026680:	a904      	add	r1, sp, #16
 8026682:	4630      	mov	r0, r6
 8026684:	f7fe f96e 	bl	8024964 <_printf_i>
 8026688:	e7e4      	b.n	8026654 <_vfiprintf_r+0x208>
 802668a:	bf00      	nop
 802668c:	08027454 	.word	0x08027454
 8026690:	08027474 	.word	0x08027474
 8026694:	08027434 	.word	0x08027434
 8026698:	080272dc 	.word	0x080272dc
 802669c:	080272e6 	.word	0x080272e6
 80266a0:	0802441d 	.word	0x0802441d
 80266a4:	08026429 	.word	0x08026429
 80266a8:	080272e2 	.word	0x080272e2

080266ac <__swbuf_r>:
 80266ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266ae:	460e      	mov	r6, r1
 80266b0:	4614      	mov	r4, r2
 80266b2:	4605      	mov	r5, r0
 80266b4:	b118      	cbz	r0, 80266be <__swbuf_r+0x12>
 80266b6:	6983      	ldr	r3, [r0, #24]
 80266b8:	b90b      	cbnz	r3, 80266be <__swbuf_r+0x12>
 80266ba:	f000 f9e7 	bl	8026a8c <__sinit>
 80266be:	4b21      	ldr	r3, [pc, #132]	; (8026744 <__swbuf_r+0x98>)
 80266c0:	429c      	cmp	r4, r3
 80266c2:	d12b      	bne.n	802671c <__swbuf_r+0x70>
 80266c4:	686c      	ldr	r4, [r5, #4]
 80266c6:	69a3      	ldr	r3, [r4, #24]
 80266c8:	60a3      	str	r3, [r4, #8]
 80266ca:	89a3      	ldrh	r3, [r4, #12]
 80266cc:	071a      	lsls	r2, r3, #28
 80266ce:	d52f      	bpl.n	8026730 <__swbuf_r+0x84>
 80266d0:	6923      	ldr	r3, [r4, #16]
 80266d2:	b36b      	cbz	r3, 8026730 <__swbuf_r+0x84>
 80266d4:	6923      	ldr	r3, [r4, #16]
 80266d6:	6820      	ldr	r0, [r4, #0]
 80266d8:	1ac0      	subs	r0, r0, r3
 80266da:	6963      	ldr	r3, [r4, #20]
 80266dc:	b2f6      	uxtb	r6, r6
 80266de:	4283      	cmp	r3, r0
 80266e0:	4637      	mov	r7, r6
 80266e2:	dc04      	bgt.n	80266ee <__swbuf_r+0x42>
 80266e4:	4621      	mov	r1, r4
 80266e6:	4628      	mov	r0, r5
 80266e8:	f000 f93c 	bl	8026964 <_fflush_r>
 80266ec:	bb30      	cbnz	r0, 802673c <__swbuf_r+0x90>
 80266ee:	68a3      	ldr	r3, [r4, #8]
 80266f0:	3b01      	subs	r3, #1
 80266f2:	60a3      	str	r3, [r4, #8]
 80266f4:	6823      	ldr	r3, [r4, #0]
 80266f6:	1c5a      	adds	r2, r3, #1
 80266f8:	6022      	str	r2, [r4, #0]
 80266fa:	701e      	strb	r6, [r3, #0]
 80266fc:	6963      	ldr	r3, [r4, #20]
 80266fe:	3001      	adds	r0, #1
 8026700:	4283      	cmp	r3, r0
 8026702:	d004      	beq.n	802670e <__swbuf_r+0x62>
 8026704:	89a3      	ldrh	r3, [r4, #12]
 8026706:	07db      	lsls	r3, r3, #31
 8026708:	d506      	bpl.n	8026718 <__swbuf_r+0x6c>
 802670a:	2e0a      	cmp	r6, #10
 802670c:	d104      	bne.n	8026718 <__swbuf_r+0x6c>
 802670e:	4621      	mov	r1, r4
 8026710:	4628      	mov	r0, r5
 8026712:	f000 f927 	bl	8026964 <_fflush_r>
 8026716:	b988      	cbnz	r0, 802673c <__swbuf_r+0x90>
 8026718:	4638      	mov	r0, r7
 802671a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802671c:	4b0a      	ldr	r3, [pc, #40]	; (8026748 <__swbuf_r+0x9c>)
 802671e:	429c      	cmp	r4, r3
 8026720:	d101      	bne.n	8026726 <__swbuf_r+0x7a>
 8026722:	68ac      	ldr	r4, [r5, #8]
 8026724:	e7cf      	b.n	80266c6 <__swbuf_r+0x1a>
 8026726:	4b09      	ldr	r3, [pc, #36]	; (802674c <__swbuf_r+0xa0>)
 8026728:	429c      	cmp	r4, r3
 802672a:	bf08      	it	eq
 802672c:	68ec      	ldreq	r4, [r5, #12]
 802672e:	e7ca      	b.n	80266c6 <__swbuf_r+0x1a>
 8026730:	4621      	mov	r1, r4
 8026732:	4628      	mov	r0, r5
 8026734:	f000 f81a 	bl	802676c <__swsetup_r>
 8026738:	2800      	cmp	r0, #0
 802673a:	d0cb      	beq.n	80266d4 <__swbuf_r+0x28>
 802673c:	f04f 37ff 	mov.w	r7, #4294967295
 8026740:	e7ea      	b.n	8026718 <__swbuf_r+0x6c>
 8026742:	bf00      	nop
 8026744:	08027454 	.word	0x08027454
 8026748:	08027474 	.word	0x08027474
 802674c:	08027434 	.word	0x08027434

08026750 <__ascii_wctomb>:
 8026750:	b149      	cbz	r1, 8026766 <__ascii_wctomb+0x16>
 8026752:	2aff      	cmp	r2, #255	; 0xff
 8026754:	bf85      	ittet	hi
 8026756:	238a      	movhi	r3, #138	; 0x8a
 8026758:	6003      	strhi	r3, [r0, #0]
 802675a:	700a      	strbls	r2, [r1, #0]
 802675c:	f04f 30ff 	movhi.w	r0, #4294967295
 8026760:	bf98      	it	ls
 8026762:	2001      	movls	r0, #1
 8026764:	4770      	bx	lr
 8026766:	4608      	mov	r0, r1
 8026768:	4770      	bx	lr
	...

0802676c <__swsetup_r>:
 802676c:	4b32      	ldr	r3, [pc, #200]	; (8026838 <__swsetup_r+0xcc>)
 802676e:	b570      	push	{r4, r5, r6, lr}
 8026770:	681d      	ldr	r5, [r3, #0]
 8026772:	4606      	mov	r6, r0
 8026774:	460c      	mov	r4, r1
 8026776:	b125      	cbz	r5, 8026782 <__swsetup_r+0x16>
 8026778:	69ab      	ldr	r3, [r5, #24]
 802677a:	b913      	cbnz	r3, 8026782 <__swsetup_r+0x16>
 802677c:	4628      	mov	r0, r5
 802677e:	f000 f985 	bl	8026a8c <__sinit>
 8026782:	4b2e      	ldr	r3, [pc, #184]	; (802683c <__swsetup_r+0xd0>)
 8026784:	429c      	cmp	r4, r3
 8026786:	d10f      	bne.n	80267a8 <__swsetup_r+0x3c>
 8026788:	686c      	ldr	r4, [r5, #4]
 802678a:	89a3      	ldrh	r3, [r4, #12]
 802678c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026790:	0719      	lsls	r1, r3, #28
 8026792:	d42c      	bmi.n	80267ee <__swsetup_r+0x82>
 8026794:	06dd      	lsls	r5, r3, #27
 8026796:	d411      	bmi.n	80267bc <__swsetup_r+0x50>
 8026798:	2309      	movs	r3, #9
 802679a:	6033      	str	r3, [r6, #0]
 802679c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80267a0:	81a3      	strh	r3, [r4, #12]
 80267a2:	f04f 30ff 	mov.w	r0, #4294967295
 80267a6:	e03e      	b.n	8026826 <__swsetup_r+0xba>
 80267a8:	4b25      	ldr	r3, [pc, #148]	; (8026840 <__swsetup_r+0xd4>)
 80267aa:	429c      	cmp	r4, r3
 80267ac:	d101      	bne.n	80267b2 <__swsetup_r+0x46>
 80267ae:	68ac      	ldr	r4, [r5, #8]
 80267b0:	e7eb      	b.n	802678a <__swsetup_r+0x1e>
 80267b2:	4b24      	ldr	r3, [pc, #144]	; (8026844 <__swsetup_r+0xd8>)
 80267b4:	429c      	cmp	r4, r3
 80267b6:	bf08      	it	eq
 80267b8:	68ec      	ldreq	r4, [r5, #12]
 80267ba:	e7e6      	b.n	802678a <__swsetup_r+0x1e>
 80267bc:	0758      	lsls	r0, r3, #29
 80267be:	d512      	bpl.n	80267e6 <__swsetup_r+0x7a>
 80267c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80267c2:	b141      	cbz	r1, 80267d6 <__swsetup_r+0x6a>
 80267c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80267c8:	4299      	cmp	r1, r3
 80267ca:	d002      	beq.n	80267d2 <__swsetup_r+0x66>
 80267cc:	4630      	mov	r0, r6
 80267ce:	f7fd fcdb 	bl	8024188 <_free_r>
 80267d2:	2300      	movs	r3, #0
 80267d4:	6363      	str	r3, [r4, #52]	; 0x34
 80267d6:	89a3      	ldrh	r3, [r4, #12]
 80267d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80267dc:	81a3      	strh	r3, [r4, #12]
 80267de:	2300      	movs	r3, #0
 80267e0:	6063      	str	r3, [r4, #4]
 80267e2:	6923      	ldr	r3, [r4, #16]
 80267e4:	6023      	str	r3, [r4, #0]
 80267e6:	89a3      	ldrh	r3, [r4, #12]
 80267e8:	f043 0308 	orr.w	r3, r3, #8
 80267ec:	81a3      	strh	r3, [r4, #12]
 80267ee:	6923      	ldr	r3, [r4, #16]
 80267f0:	b94b      	cbnz	r3, 8026806 <__swsetup_r+0x9a>
 80267f2:	89a3      	ldrh	r3, [r4, #12]
 80267f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80267f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80267fc:	d003      	beq.n	8026806 <__swsetup_r+0x9a>
 80267fe:	4621      	mov	r1, r4
 8026800:	4630      	mov	r0, r6
 8026802:	f000 fa05 	bl	8026c10 <__smakebuf_r>
 8026806:	89a0      	ldrh	r0, [r4, #12]
 8026808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802680c:	f010 0301 	ands.w	r3, r0, #1
 8026810:	d00a      	beq.n	8026828 <__swsetup_r+0xbc>
 8026812:	2300      	movs	r3, #0
 8026814:	60a3      	str	r3, [r4, #8]
 8026816:	6963      	ldr	r3, [r4, #20]
 8026818:	425b      	negs	r3, r3
 802681a:	61a3      	str	r3, [r4, #24]
 802681c:	6923      	ldr	r3, [r4, #16]
 802681e:	b943      	cbnz	r3, 8026832 <__swsetup_r+0xc6>
 8026820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026824:	d1ba      	bne.n	802679c <__swsetup_r+0x30>
 8026826:	bd70      	pop	{r4, r5, r6, pc}
 8026828:	0781      	lsls	r1, r0, #30
 802682a:	bf58      	it	pl
 802682c:	6963      	ldrpl	r3, [r4, #20]
 802682e:	60a3      	str	r3, [r4, #8]
 8026830:	e7f4      	b.n	802681c <__swsetup_r+0xb0>
 8026832:	2000      	movs	r0, #0
 8026834:	e7f7      	b.n	8026826 <__swsetup_r+0xba>
 8026836:	bf00      	nop
 8026838:	20000458 	.word	0x20000458
 802683c:	08027454 	.word	0x08027454
 8026840:	08027474 	.word	0x08027474
 8026844:	08027434 	.word	0x08027434

08026848 <abort>:
 8026848:	b508      	push	{r3, lr}
 802684a:	2006      	movs	r0, #6
 802684c:	f000 fa50 	bl	8026cf0 <raise>
 8026850:	2001      	movs	r0, #1
 8026852:	f7eb fcab 	bl	80121ac <_exit>
	...

08026858 <__sflush_r>:
 8026858:	898a      	ldrh	r2, [r1, #12]
 802685a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802685e:	4605      	mov	r5, r0
 8026860:	0710      	lsls	r0, r2, #28
 8026862:	460c      	mov	r4, r1
 8026864:	d458      	bmi.n	8026918 <__sflush_r+0xc0>
 8026866:	684b      	ldr	r3, [r1, #4]
 8026868:	2b00      	cmp	r3, #0
 802686a:	dc05      	bgt.n	8026878 <__sflush_r+0x20>
 802686c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802686e:	2b00      	cmp	r3, #0
 8026870:	dc02      	bgt.n	8026878 <__sflush_r+0x20>
 8026872:	2000      	movs	r0, #0
 8026874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802687a:	2e00      	cmp	r6, #0
 802687c:	d0f9      	beq.n	8026872 <__sflush_r+0x1a>
 802687e:	2300      	movs	r3, #0
 8026880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026884:	682f      	ldr	r7, [r5, #0]
 8026886:	602b      	str	r3, [r5, #0]
 8026888:	d032      	beq.n	80268f0 <__sflush_r+0x98>
 802688a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802688c:	89a3      	ldrh	r3, [r4, #12]
 802688e:	075a      	lsls	r2, r3, #29
 8026890:	d505      	bpl.n	802689e <__sflush_r+0x46>
 8026892:	6863      	ldr	r3, [r4, #4]
 8026894:	1ac0      	subs	r0, r0, r3
 8026896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026898:	b10b      	cbz	r3, 802689e <__sflush_r+0x46>
 802689a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802689c:	1ac0      	subs	r0, r0, r3
 802689e:	2300      	movs	r3, #0
 80268a0:	4602      	mov	r2, r0
 80268a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80268a4:	6a21      	ldr	r1, [r4, #32]
 80268a6:	4628      	mov	r0, r5
 80268a8:	47b0      	blx	r6
 80268aa:	1c43      	adds	r3, r0, #1
 80268ac:	89a3      	ldrh	r3, [r4, #12]
 80268ae:	d106      	bne.n	80268be <__sflush_r+0x66>
 80268b0:	6829      	ldr	r1, [r5, #0]
 80268b2:	291d      	cmp	r1, #29
 80268b4:	d82c      	bhi.n	8026910 <__sflush_r+0xb8>
 80268b6:	4a2a      	ldr	r2, [pc, #168]	; (8026960 <__sflush_r+0x108>)
 80268b8:	40ca      	lsrs	r2, r1
 80268ba:	07d6      	lsls	r6, r2, #31
 80268bc:	d528      	bpl.n	8026910 <__sflush_r+0xb8>
 80268be:	2200      	movs	r2, #0
 80268c0:	6062      	str	r2, [r4, #4]
 80268c2:	04d9      	lsls	r1, r3, #19
 80268c4:	6922      	ldr	r2, [r4, #16]
 80268c6:	6022      	str	r2, [r4, #0]
 80268c8:	d504      	bpl.n	80268d4 <__sflush_r+0x7c>
 80268ca:	1c42      	adds	r2, r0, #1
 80268cc:	d101      	bne.n	80268d2 <__sflush_r+0x7a>
 80268ce:	682b      	ldr	r3, [r5, #0]
 80268d0:	b903      	cbnz	r3, 80268d4 <__sflush_r+0x7c>
 80268d2:	6560      	str	r0, [r4, #84]	; 0x54
 80268d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80268d6:	602f      	str	r7, [r5, #0]
 80268d8:	2900      	cmp	r1, #0
 80268da:	d0ca      	beq.n	8026872 <__sflush_r+0x1a>
 80268dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80268e0:	4299      	cmp	r1, r3
 80268e2:	d002      	beq.n	80268ea <__sflush_r+0x92>
 80268e4:	4628      	mov	r0, r5
 80268e6:	f7fd fc4f 	bl	8024188 <_free_r>
 80268ea:	2000      	movs	r0, #0
 80268ec:	6360      	str	r0, [r4, #52]	; 0x34
 80268ee:	e7c1      	b.n	8026874 <__sflush_r+0x1c>
 80268f0:	6a21      	ldr	r1, [r4, #32]
 80268f2:	2301      	movs	r3, #1
 80268f4:	4628      	mov	r0, r5
 80268f6:	47b0      	blx	r6
 80268f8:	1c41      	adds	r1, r0, #1
 80268fa:	d1c7      	bne.n	802688c <__sflush_r+0x34>
 80268fc:	682b      	ldr	r3, [r5, #0]
 80268fe:	2b00      	cmp	r3, #0
 8026900:	d0c4      	beq.n	802688c <__sflush_r+0x34>
 8026902:	2b1d      	cmp	r3, #29
 8026904:	d001      	beq.n	802690a <__sflush_r+0xb2>
 8026906:	2b16      	cmp	r3, #22
 8026908:	d101      	bne.n	802690e <__sflush_r+0xb6>
 802690a:	602f      	str	r7, [r5, #0]
 802690c:	e7b1      	b.n	8026872 <__sflush_r+0x1a>
 802690e:	89a3      	ldrh	r3, [r4, #12]
 8026910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026914:	81a3      	strh	r3, [r4, #12]
 8026916:	e7ad      	b.n	8026874 <__sflush_r+0x1c>
 8026918:	690f      	ldr	r7, [r1, #16]
 802691a:	2f00      	cmp	r7, #0
 802691c:	d0a9      	beq.n	8026872 <__sflush_r+0x1a>
 802691e:	0793      	lsls	r3, r2, #30
 8026920:	680e      	ldr	r6, [r1, #0]
 8026922:	bf08      	it	eq
 8026924:	694b      	ldreq	r3, [r1, #20]
 8026926:	600f      	str	r7, [r1, #0]
 8026928:	bf18      	it	ne
 802692a:	2300      	movne	r3, #0
 802692c:	eba6 0807 	sub.w	r8, r6, r7
 8026930:	608b      	str	r3, [r1, #8]
 8026932:	f1b8 0f00 	cmp.w	r8, #0
 8026936:	dd9c      	ble.n	8026872 <__sflush_r+0x1a>
 8026938:	6a21      	ldr	r1, [r4, #32]
 802693a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802693c:	4643      	mov	r3, r8
 802693e:	463a      	mov	r2, r7
 8026940:	4628      	mov	r0, r5
 8026942:	47b0      	blx	r6
 8026944:	2800      	cmp	r0, #0
 8026946:	dc06      	bgt.n	8026956 <__sflush_r+0xfe>
 8026948:	89a3      	ldrh	r3, [r4, #12]
 802694a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802694e:	81a3      	strh	r3, [r4, #12]
 8026950:	f04f 30ff 	mov.w	r0, #4294967295
 8026954:	e78e      	b.n	8026874 <__sflush_r+0x1c>
 8026956:	4407      	add	r7, r0
 8026958:	eba8 0800 	sub.w	r8, r8, r0
 802695c:	e7e9      	b.n	8026932 <__sflush_r+0xda>
 802695e:	bf00      	nop
 8026960:	20400001 	.word	0x20400001

08026964 <_fflush_r>:
 8026964:	b538      	push	{r3, r4, r5, lr}
 8026966:	690b      	ldr	r3, [r1, #16]
 8026968:	4605      	mov	r5, r0
 802696a:	460c      	mov	r4, r1
 802696c:	b913      	cbnz	r3, 8026974 <_fflush_r+0x10>
 802696e:	2500      	movs	r5, #0
 8026970:	4628      	mov	r0, r5
 8026972:	bd38      	pop	{r3, r4, r5, pc}
 8026974:	b118      	cbz	r0, 802697e <_fflush_r+0x1a>
 8026976:	6983      	ldr	r3, [r0, #24]
 8026978:	b90b      	cbnz	r3, 802697e <_fflush_r+0x1a>
 802697a:	f000 f887 	bl	8026a8c <__sinit>
 802697e:	4b14      	ldr	r3, [pc, #80]	; (80269d0 <_fflush_r+0x6c>)
 8026980:	429c      	cmp	r4, r3
 8026982:	d11b      	bne.n	80269bc <_fflush_r+0x58>
 8026984:	686c      	ldr	r4, [r5, #4]
 8026986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802698a:	2b00      	cmp	r3, #0
 802698c:	d0ef      	beq.n	802696e <_fflush_r+0xa>
 802698e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026990:	07d0      	lsls	r0, r2, #31
 8026992:	d404      	bmi.n	802699e <_fflush_r+0x3a>
 8026994:	0599      	lsls	r1, r3, #22
 8026996:	d402      	bmi.n	802699e <_fflush_r+0x3a>
 8026998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802699a:	f7ff fcda 	bl	8026352 <__retarget_lock_acquire_recursive>
 802699e:	4628      	mov	r0, r5
 80269a0:	4621      	mov	r1, r4
 80269a2:	f7ff ff59 	bl	8026858 <__sflush_r>
 80269a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80269a8:	07da      	lsls	r2, r3, #31
 80269aa:	4605      	mov	r5, r0
 80269ac:	d4e0      	bmi.n	8026970 <_fflush_r+0xc>
 80269ae:	89a3      	ldrh	r3, [r4, #12]
 80269b0:	059b      	lsls	r3, r3, #22
 80269b2:	d4dd      	bmi.n	8026970 <_fflush_r+0xc>
 80269b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80269b6:	f7ff fccd 	bl	8026354 <__retarget_lock_release_recursive>
 80269ba:	e7d9      	b.n	8026970 <_fflush_r+0xc>
 80269bc:	4b05      	ldr	r3, [pc, #20]	; (80269d4 <_fflush_r+0x70>)
 80269be:	429c      	cmp	r4, r3
 80269c0:	d101      	bne.n	80269c6 <_fflush_r+0x62>
 80269c2:	68ac      	ldr	r4, [r5, #8]
 80269c4:	e7df      	b.n	8026986 <_fflush_r+0x22>
 80269c6:	4b04      	ldr	r3, [pc, #16]	; (80269d8 <_fflush_r+0x74>)
 80269c8:	429c      	cmp	r4, r3
 80269ca:	bf08      	it	eq
 80269cc:	68ec      	ldreq	r4, [r5, #12]
 80269ce:	e7da      	b.n	8026986 <_fflush_r+0x22>
 80269d0:	08027454 	.word	0x08027454
 80269d4:	08027474 	.word	0x08027474
 80269d8:	08027434 	.word	0x08027434

080269dc <std>:
 80269dc:	2300      	movs	r3, #0
 80269de:	b510      	push	{r4, lr}
 80269e0:	4604      	mov	r4, r0
 80269e2:	e9c0 3300 	strd	r3, r3, [r0]
 80269e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80269ea:	6083      	str	r3, [r0, #8]
 80269ec:	8181      	strh	r1, [r0, #12]
 80269ee:	6643      	str	r3, [r0, #100]	; 0x64
 80269f0:	81c2      	strh	r2, [r0, #14]
 80269f2:	6183      	str	r3, [r0, #24]
 80269f4:	4619      	mov	r1, r3
 80269f6:	2208      	movs	r2, #8
 80269f8:	305c      	adds	r0, #92	; 0x5c
 80269fa:	f7fd fbbd 	bl	8024178 <memset>
 80269fe:	4b05      	ldr	r3, [pc, #20]	; (8026a14 <std+0x38>)
 8026a00:	6263      	str	r3, [r4, #36]	; 0x24
 8026a02:	4b05      	ldr	r3, [pc, #20]	; (8026a18 <std+0x3c>)
 8026a04:	62a3      	str	r3, [r4, #40]	; 0x28
 8026a06:	4b05      	ldr	r3, [pc, #20]	; (8026a1c <std+0x40>)
 8026a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026a0a:	4b05      	ldr	r3, [pc, #20]	; (8026a20 <std+0x44>)
 8026a0c:	6224      	str	r4, [r4, #32]
 8026a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8026a10:	bd10      	pop	{r4, pc}
 8026a12:	bf00      	nop
 8026a14:	08026d29 	.word	0x08026d29
 8026a18:	08026d4b 	.word	0x08026d4b
 8026a1c:	08026d83 	.word	0x08026d83
 8026a20:	08026da7 	.word	0x08026da7

08026a24 <_cleanup_r>:
 8026a24:	4901      	ldr	r1, [pc, #4]	; (8026a2c <_cleanup_r+0x8>)
 8026a26:	f000 b8af 	b.w	8026b88 <_fwalk_reent>
 8026a2a:	bf00      	nop
 8026a2c:	08026965 	.word	0x08026965

08026a30 <__sfmoreglue>:
 8026a30:	b570      	push	{r4, r5, r6, lr}
 8026a32:	1e4a      	subs	r2, r1, #1
 8026a34:	2568      	movs	r5, #104	; 0x68
 8026a36:	4355      	muls	r5, r2
 8026a38:	460e      	mov	r6, r1
 8026a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026a3e:	f7fd fbf3 	bl	8024228 <_malloc_r>
 8026a42:	4604      	mov	r4, r0
 8026a44:	b140      	cbz	r0, 8026a58 <__sfmoreglue+0x28>
 8026a46:	2100      	movs	r1, #0
 8026a48:	e9c0 1600 	strd	r1, r6, [r0]
 8026a4c:	300c      	adds	r0, #12
 8026a4e:	60a0      	str	r0, [r4, #8]
 8026a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026a54:	f7fd fb90 	bl	8024178 <memset>
 8026a58:	4620      	mov	r0, r4
 8026a5a:	bd70      	pop	{r4, r5, r6, pc}

08026a5c <__sfp_lock_acquire>:
 8026a5c:	4801      	ldr	r0, [pc, #4]	; (8026a64 <__sfp_lock_acquire+0x8>)
 8026a5e:	f7ff bc78 	b.w	8026352 <__retarget_lock_acquire_recursive>
 8026a62:	bf00      	nop
 8026a64:	20006d08 	.word	0x20006d08

08026a68 <__sfp_lock_release>:
 8026a68:	4801      	ldr	r0, [pc, #4]	; (8026a70 <__sfp_lock_release+0x8>)
 8026a6a:	f7ff bc73 	b.w	8026354 <__retarget_lock_release_recursive>
 8026a6e:	bf00      	nop
 8026a70:	20006d08 	.word	0x20006d08

08026a74 <__sinit_lock_acquire>:
 8026a74:	4801      	ldr	r0, [pc, #4]	; (8026a7c <__sinit_lock_acquire+0x8>)
 8026a76:	f7ff bc6c 	b.w	8026352 <__retarget_lock_acquire_recursive>
 8026a7a:	bf00      	nop
 8026a7c:	20006d03 	.word	0x20006d03

08026a80 <__sinit_lock_release>:
 8026a80:	4801      	ldr	r0, [pc, #4]	; (8026a88 <__sinit_lock_release+0x8>)
 8026a82:	f7ff bc67 	b.w	8026354 <__retarget_lock_release_recursive>
 8026a86:	bf00      	nop
 8026a88:	20006d03 	.word	0x20006d03

08026a8c <__sinit>:
 8026a8c:	b510      	push	{r4, lr}
 8026a8e:	4604      	mov	r4, r0
 8026a90:	f7ff fff0 	bl	8026a74 <__sinit_lock_acquire>
 8026a94:	69a3      	ldr	r3, [r4, #24]
 8026a96:	b11b      	cbz	r3, 8026aa0 <__sinit+0x14>
 8026a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026a9c:	f7ff bff0 	b.w	8026a80 <__sinit_lock_release>
 8026aa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026aa4:	6523      	str	r3, [r4, #80]	; 0x50
 8026aa6:	4b13      	ldr	r3, [pc, #76]	; (8026af4 <__sinit+0x68>)
 8026aa8:	4a13      	ldr	r2, [pc, #76]	; (8026af8 <__sinit+0x6c>)
 8026aaa:	681b      	ldr	r3, [r3, #0]
 8026aac:	62a2      	str	r2, [r4, #40]	; 0x28
 8026aae:	42a3      	cmp	r3, r4
 8026ab0:	bf04      	itt	eq
 8026ab2:	2301      	moveq	r3, #1
 8026ab4:	61a3      	streq	r3, [r4, #24]
 8026ab6:	4620      	mov	r0, r4
 8026ab8:	f000 f820 	bl	8026afc <__sfp>
 8026abc:	6060      	str	r0, [r4, #4]
 8026abe:	4620      	mov	r0, r4
 8026ac0:	f000 f81c 	bl	8026afc <__sfp>
 8026ac4:	60a0      	str	r0, [r4, #8]
 8026ac6:	4620      	mov	r0, r4
 8026ac8:	f000 f818 	bl	8026afc <__sfp>
 8026acc:	2200      	movs	r2, #0
 8026ace:	60e0      	str	r0, [r4, #12]
 8026ad0:	2104      	movs	r1, #4
 8026ad2:	6860      	ldr	r0, [r4, #4]
 8026ad4:	f7ff ff82 	bl	80269dc <std>
 8026ad8:	68a0      	ldr	r0, [r4, #8]
 8026ada:	2201      	movs	r2, #1
 8026adc:	2109      	movs	r1, #9
 8026ade:	f7ff ff7d 	bl	80269dc <std>
 8026ae2:	68e0      	ldr	r0, [r4, #12]
 8026ae4:	2202      	movs	r2, #2
 8026ae6:	2112      	movs	r1, #18
 8026ae8:	f7ff ff78 	bl	80269dc <std>
 8026aec:	2301      	movs	r3, #1
 8026aee:	61a3      	str	r3, [r4, #24]
 8026af0:	e7d2      	b.n	8026a98 <__sinit+0xc>
 8026af2:	bf00      	nop
 8026af4:	080270b0 	.word	0x080270b0
 8026af8:	08026a25 	.word	0x08026a25

08026afc <__sfp>:
 8026afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026afe:	4607      	mov	r7, r0
 8026b00:	f7ff ffac 	bl	8026a5c <__sfp_lock_acquire>
 8026b04:	4b1e      	ldr	r3, [pc, #120]	; (8026b80 <__sfp+0x84>)
 8026b06:	681e      	ldr	r6, [r3, #0]
 8026b08:	69b3      	ldr	r3, [r6, #24]
 8026b0a:	b913      	cbnz	r3, 8026b12 <__sfp+0x16>
 8026b0c:	4630      	mov	r0, r6
 8026b0e:	f7ff ffbd 	bl	8026a8c <__sinit>
 8026b12:	3648      	adds	r6, #72	; 0x48
 8026b14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026b18:	3b01      	subs	r3, #1
 8026b1a:	d503      	bpl.n	8026b24 <__sfp+0x28>
 8026b1c:	6833      	ldr	r3, [r6, #0]
 8026b1e:	b30b      	cbz	r3, 8026b64 <__sfp+0x68>
 8026b20:	6836      	ldr	r6, [r6, #0]
 8026b22:	e7f7      	b.n	8026b14 <__sfp+0x18>
 8026b24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026b28:	b9d5      	cbnz	r5, 8026b60 <__sfp+0x64>
 8026b2a:	4b16      	ldr	r3, [pc, #88]	; (8026b84 <__sfp+0x88>)
 8026b2c:	60e3      	str	r3, [r4, #12]
 8026b2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026b32:	6665      	str	r5, [r4, #100]	; 0x64
 8026b34:	f7ff fc0c 	bl	8026350 <__retarget_lock_init_recursive>
 8026b38:	f7ff ff96 	bl	8026a68 <__sfp_lock_release>
 8026b3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026b40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026b44:	6025      	str	r5, [r4, #0]
 8026b46:	61a5      	str	r5, [r4, #24]
 8026b48:	2208      	movs	r2, #8
 8026b4a:	4629      	mov	r1, r5
 8026b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026b50:	f7fd fb12 	bl	8024178 <memset>
 8026b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026b5c:	4620      	mov	r0, r4
 8026b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026b60:	3468      	adds	r4, #104	; 0x68
 8026b62:	e7d9      	b.n	8026b18 <__sfp+0x1c>
 8026b64:	2104      	movs	r1, #4
 8026b66:	4638      	mov	r0, r7
 8026b68:	f7ff ff62 	bl	8026a30 <__sfmoreglue>
 8026b6c:	4604      	mov	r4, r0
 8026b6e:	6030      	str	r0, [r6, #0]
 8026b70:	2800      	cmp	r0, #0
 8026b72:	d1d5      	bne.n	8026b20 <__sfp+0x24>
 8026b74:	f7ff ff78 	bl	8026a68 <__sfp_lock_release>
 8026b78:	230c      	movs	r3, #12
 8026b7a:	603b      	str	r3, [r7, #0]
 8026b7c:	e7ee      	b.n	8026b5c <__sfp+0x60>
 8026b7e:	bf00      	nop
 8026b80:	080270b0 	.word	0x080270b0
 8026b84:	ffff0001 	.word	0xffff0001

08026b88 <_fwalk_reent>:
 8026b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026b8c:	4606      	mov	r6, r0
 8026b8e:	4688      	mov	r8, r1
 8026b90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026b94:	2700      	movs	r7, #0
 8026b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8026b9e:	d505      	bpl.n	8026bac <_fwalk_reent+0x24>
 8026ba0:	6824      	ldr	r4, [r4, #0]
 8026ba2:	2c00      	cmp	r4, #0
 8026ba4:	d1f7      	bne.n	8026b96 <_fwalk_reent+0xe>
 8026ba6:	4638      	mov	r0, r7
 8026ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026bac:	89ab      	ldrh	r3, [r5, #12]
 8026bae:	2b01      	cmp	r3, #1
 8026bb0:	d907      	bls.n	8026bc2 <_fwalk_reent+0x3a>
 8026bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026bb6:	3301      	adds	r3, #1
 8026bb8:	d003      	beq.n	8026bc2 <_fwalk_reent+0x3a>
 8026bba:	4629      	mov	r1, r5
 8026bbc:	4630      	mov	r0, r6
 8026bbe:	47c0      	blx	r8
 8026bc0:	4307      	orrs	r7, r0
 8026bc2:	3568      	adds	r5, #104	; 0x68
 8026bc4:	e7e9      	b.n	8026b9a <_fwalk_reent+0x12>

08026bc6 <__swhatbuf_r>:
 8026bc6:	b570      	push	{r4, r5, r6, lr}
 8026bc8:	460e      	mov	r6, r1
 8026bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bce:	2900      	cmp	r1, #0
 8026bd0:	b096      	sub	sp, #88	; 0x58
 8026bd2:	4614      	mov	r4, r2
 8026bd4:	461d      	mov	r5, r3
 8026bd6:	da07      	bge.n	8026be8 <__swhatbuf_r+0x22>
 8026bd8:	2300      	movs	r3, #0
 8026bda:	602b      	str	r3, [r5, #0]
 8026bdc:	89b3      	ldrh	r3, [r6, #12]
 8026bde:	061a      	lsls	r2, r3, #24
 8026be0:	d410      	bmi.n	8026c04 <__swhatbuf_r+0x3e>
 8026be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026be6:	e00e      	b.n	8026c06 <__swhatbuf_r+0x40>
 8026be8:	466a      	mov	r2, sp
 8026bea:	f000 f903 	bl	8026df4 <_fstat_r>
 8026bee:	2800      	cmp	r0, #0
 8026bf0:	dbf2      	blt.n	8026bd8 <__swhatbuf_r+0x12>
 8026bf2:	9a01      	ldr	r2, [sp, #4]
 8026bf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026bf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026bfc:	425a      	negs	r2, r3
 8026bfe:	415a      	adcs	r2, r3
 8026c00:	602a      	str	r2, [r5, #0]
 8026c02:	e7ee      	b.n	8026be2 <__swhatbuf_r+0x1c>
 8026c04:	2340      	movs	r3, #64	; 0x40
 8026c06:	2000      	movs	r0, #0
 8026c08:	6023      	str	r3, [r4, #0]
 8026c0a:	b016      	add	sp, #88	; 0x58
 8026c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08026c10 <__smakebuf_r>:
 8026c10:	898b      	ldrh	r3, [r1, #12]
 8026c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026c14:	079d      	lsls	r5, r3, #30
 8026c16:	4606      	mov	r6, r0
 8026c18:	460c      	mov	r4, r1
 8026c1a:	d507      	bpl.n	8026c2c <__smakebuf_r+0x1c>
 8026c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026c20:	6023      	str	r3, [r4, #0]
 8026c22:	6123      	str	r3, [r4, #16]
 8026c24:	2301      	movs	r3, #1
 8026c26:	6163      	str	r3, [r4, #20]
 8026c28:	b002      	add	sp, #8
 8026c2a:	bd70      	pop	{r4, r5, r6, pc}
 8026c2c:	ab01      	add	r3, sp, #4
 8026c2e:	466a      	mov	r2, sp
 8026c30:	f7ff ffc9 	bl	8026bc6 <__swhatbuf_r>
 8026c34:	9900      	ldr	r1, [sp, #0]
 8026c36:	4605      	mov	r5, r0
 8026c38:	4630      	mov	r0, r6
 8026c3a:	f7fd faf5 	bl	8024228 <_malloc_r>
 8026c3e:	b948      	cbnz	r0, 8026c54 <__smakebuf_r+0x44>
 8026c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026c44:	059a      	lsls	r2, r3, #22
 8026c46:	d4ef      	bmi.n	8026c28 <__smakebuf_r+0x18>
 8026c48:	f023 0303 	bic.w	r3, r3, #3
 8026c4c:	f043 0302 	orr.w	r3, r3, #2
 8026c50:	81a3      	strh	r3, [r4, #12]
 8026c52:	e7e3      	b.n	8026c1c <__smakebuf_r+0xc>
 8026c54:	4b0d      	ldr	r3, [pc, #52]	; (8026c8c <__smakebuf_r+0x7c>)
 8026c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8026c58:	89a3      	ldrh	r3, [r4, #12]
 8026c5a:	6020      	str	r0, [r4, #0]
 8026c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026c60:	81a3      	strh	r3, [r4, #12]
 8026c62:	9b00      	ldr	r3, [sp, #0]
 8026c64:	6163      	str	r3, [r4, #20]
 8026c66:	9b01      	ldr	r3, [sp, #4]
 8026c68:	6120      	str	r0, [r4, #16]
 8026c6a:	b15b      	cbz	r3, 8026c84 <__smakebuf_r+0x74>
 8026c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026c70:	4630      	mov	r0, r6
 8026c72:	f000 f8d1 	bl	8026e18 <_isatty_r>
 8026c76:	b128      	cbz	r0, 8026c84 <__smakebuf_r+0x74>
 8026c78:	89a3      	ldrh	r3, [r4, #12]
 8026c7a:	f023 0303 	bic.w	r3, r3, #3
 8026c7e:	f043 0301 	orr.w	r3, r3, #1
 8026c82:	81a3      	strh	r3, [r4, #12]
 8026c84:	89a0      	ldrh	r0, [r4, #12]
 8026c86:	4305      	orrs	r5, r0
 8026c88:	81a5      	strh	r5, [r4, #12]
 8026c8a:	e7cd      	b.n	8026c28 <__smakebuf_r+0x18>
 8026c8c:	08026a25 	.word	0x08026a25

08026c90 <_malloc_usable_size_r>:
 8026c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026c94:	1f18      	subs	r0, r3, #4
 8026c96:	2b00      	cmp	r3, #0
 8026c98:	bfbc      	itt	lt
 8026c9a:	580b      	ldrlt	r3, [r1, r0]
 8026c9c:	18c0      	addlt	r0, r0, r3
 8026c9e:	4770      	bx	lr

08026ca0 <_raise_r>:
 8026ca0:	291f      	cmp	r1, #31
 8026ca2:	b538      	push	{r3, r4, r5, lr}
 8026ca4:	4604      	mov	r4, r0
 8026ca6:	460d      	mov	r5, r1
 8026ca8:	d904      	bls.n	8026cb4 <_raise_r+0x14>
 8026caa:	2316      	movs	r3, #22
 8026cac:	6003      	str	r3, [r0, #0]
 8026cae:	f04f 30ff 	mov.w	r0, #4294967295
 8026cb2:	bd38      	pop	{r3, r4, r5, pc}
 8026cb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026cb6:	b112      	cbz	r2, 8026cbe <_raise_r+0x1e>
 8026cb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026cbc:	b94b      	cbnz	r3, 8026cd2 <_raise_r+0x32>
 8026cbe:	4620      	mov	r0, r4
 8026cc0:	f000 f830 	bl	8026d24 <_getpid_r>
 8026cc4:	462a      	mov	r2, r5
 8026cc6:	4601      	mov	r1, r0
 8026cc8:	4620      	mov	r0, r4
 8026cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026cce:	f000 b817 	b.w	8026d00 <_kill_r>
 8026cd2:	2b01      	cmp	r3, #1
 8026cd4:	d00a      	beq.n	8026cec <_raise_r+0x4c>
 8026cd6:	1c59      	adds	r1, r3, #1
 8026cd8:	d103      	bne.n	8026ce2 <_raise_r+0x42>
 8026cda:	2316      	movs	r3, #22
 8026cdc:	6003      	str	r3, [r0, #0]
 8026cde:	2001      	movs	r0, #1
 8026ce0:	e7e7      	b.n	8026cb2 <_raise_r+0x12>
 8026ce2:	2400      	movs	r4, #0
 8026ce4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026ce8:	4628      	mov	r0, r5
 8026cea:	4798      	blx	r3
 8026cec:	2000      	movs	r0, #0
 8026cee:	e7e0      	b.n	8026cb2 <_raise_r+0x12>

08026cf0 <raise>:
 8026cf0:	4b02      	ldr	r3, [pc, #8]	; (8026cfc <raise+0xc>)
 8026cf2:	4601      	mov	r1, r0
 8026cf4:	6818      	ldr	r0, [r3, #0]
 8026cf6:	f7ff bfd3 	b.w	8026ca0 <_raise_r>
 8026cfa:	bf00      	nop
 8026cfc:	20000458 	.word	0x20000458

08026d00 <_kill_r>:
 8026d00:	b538      	push	{r3, r4, r5, lr}
 8026d02:	4d07      	ldr	r5, [pc, #28]	; (8026d20 <_kill_r+0x20>)
 8026d04:	2300      	movs	r3, #0
 8026d06:	4604      	mov	r4, r0
 8026d08:	4608      	mov	r0, r1
 8026d0a:	4611      	mov	r1, r2
 8026d0c:	602b      	str	r3, [r5, #0]
 8026d0e:	f7eb fa3d 	bl	801218c <_kill>
 8026d12:	1c43      	adds	r3, r0, #1
 8026d14:	d102      	bne.n	8026d1c <_kill_r+0x1c>
 8026d16:	682b      	ldr	r3, [r5, #0]
 8026d18:	b103      	cbz	r3, 8026d1c <_kill_r+0x1c>
 8026d1a:	6023      	str	r3, [r4, #0]
 8026d1c:	bd38      	pop	{r3, r4, r5, pc}
 8026d1e:	bf00      	nop
 8026d20:	20006cfc 	.word	0x20006cfc

08026d24 <_getpid_r>:
 8026d24:	f7eb ba2a 	b.w	801217c <_getpid>

08026d28 <__sread>:
 8026d28:	b510      	push	{r4, lr}
 8026d2a:	460c      	mov	r4, r1
 8026d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d30:	f000 f894 	bl	8026e5c <_read_r>
 8026d34:	2800      	cmp	r0, #0
 8026d36:	bfab      	itete	ge
 8026d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8026d3c:	181b      	addge	r3, r3, r0
 8026d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026d42:	bfac      	ite	ge
 8026d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8026d46:	81a3      	strhlt	r3, [r4, #12]
 8026d48:	bd10      	pop	{r4, pc}

08026d4a <__swrite>:
 8026d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d4e:	461f      	mov	r7, r3
 8026d50:	898b      	ldrh	r3, [r1, #12]
 8026d52:	05db      	lsls	r3, r3, #23
 8026d54:	4605      	mov	r5, r0
 8026d56:	460c      	mov	r4, r1
 8026d58:	4616      	mov	r6, r2
 8026d5a:	d505      	bpl.n	8026d68 <__swrite+0x1e>
 8026d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d60:	2302      	movs	r3, #2
 8026d62:	2200      	movs	r2, #0
 8026d64:	f000 f868 	bl	8026e38 <_lseek_r>
 8026d68:	89a3      	ldrh	r3, [r4, #12]
 8026d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026d72:	81a3      	strh	r3, [r4, #12]
 8026d74:	4632      	mov	r2, r6
 8026d76:	463b      	mov	r3, r7
 8026d78:	4628      	mov	r0, r5
 8026d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026d7e:	f000 b817 	b.w	8026db0 <_write_r>

08026d82 <__sseek>:
 8026d82:	b510      	push	{r4, lr}
 8026d84:	460c      	mov	r4, r1
 8026d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d8a:	f000 f855 	bl	8026e38 <_lseek_r>
 8026d8e:	1c43      	adds	r3, r0, #1
 8026d90:	89a3      	ldrh	r3, [r4, #12]
 8026d92:	bf15      	itete	ne
 8026d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8026d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026d9e:	81a3      	strheq	r3, [r4, #12]
 8026da0:	bf18      	it	ne
 8026da2:	81a3      	strhne	r3, [r4, #12]
 8026da4:	bd10      	pop	{r4, pc}

08026da6 <__sclose>:
 8026da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026daa:	f000 b813 	b.w	8026dd4 <_close_r>
	...

08026db0 <_write_r>:
 8026db0:	b538      	push	{r3, r4, r5, lr}
 8026db2:	4d07      	ldr	r5, [pc, #28]	; (8026dd0 <_write_r+0x20>)
 8026db4:	4604      	mov	r4, r0
 8026db6:	4608      	mov	r0, r1
 8026db8:	4611      	mov	r1, r2
 8026dba:	2200      	movs	r2, #0
 8026dbc:	602a      	str	r2, [r5, #0]
 8026dbe:	461a      	mov	r2, r3
 8026dc0:	f7eb fa1b 	bl	80121fa <_write>
 8026dc4:	1c43      	adds	r3, r0, #1
 8026dc6:	d102      	bne.n	8026dce <_write_r+0x1e>
 8026dc8:	682b      	ldr	r3, [r5, #0]
 8026dca:	b103      	cbz	r3, 8026dce <_write_r+0x1e>
 8026dcc:	6023      	str	r3, [r4, #0]
 8026dce:	bd38      	pop	{r3, r4, r5, pc}
 8026dd0:	20006cfc 	.word	0x20006cfc

08026dd4 <_close_r>:
 8026dd4:	b538      	push	{r3, r4, r5, lr}
 8026dd6:	4d06      	ldr	r5, [pc, #24]	; (8026df0 <_close_r+0x1c>)
 8026dd8:	2300      	movs	r3, #0
 8026dda:	4604      	mov	r4, r0
 8026ddc:	4608      	mov	r0, r1
 8026dde:	602b      	str	r3, [r5, #0]
 8026de0:	f7eb fa27 	bl	8012232 <_close>
 8026de4:	1c43      	adds	r3, r0, #1
 8026de6:	d102      	bne.n	8026dee <_close_r+0x1a>
 8026de8:	682b      	ldr	r3, [r5, #0]
 8026dea:	b103      	cbz	r3, 8026dee <_close_r+0x1a>
 8026dec:	6023      	str	r3, [r4, #0]
 8026dee:	bd38      	pop	{r3, r4, r5, pc}
 8026df0:	20006cfc 	.word	0x20006cfc

08026df4 <_fstat_r>:
 8026df4:	b538      	push	{r3, r4, r5, lr}
 8026df6:	4d07      	ldr	r5, [pc, #28]	; (8026e14 <_fstat_r+0x20>)
 8026df8:	2300      	movs	r3, #0
 8026dfa:	4604      	mov	r4, r0
 8026dfc:	4608      	mov	r0, r1
 8026dfe:	4611      	mov	r1, r2
 8026e00:	602b      	str	r3, [r5, #0]
 8026e02:	f7eb fa22 	bl	801224a <_fstat>
 8026e06:	1c43      	adds	r3, r0, #1
 8026e08:	d102      	bne.n	8026e10 <_fstat_r+0x1c>
 8026e0a:	682b      	ldr	r3, [r5, #0]
 8026e0c:	b103      	cbz	r3, 8026e10 <_fstat_r+0x1c>
 8026e0e:	6023      	str	r3, [r4, #0]
 8026e10:	bd38      	pop	{r3, r4, r5, pc}
 8026e12:	bf00      	nop
 8026e14:	20006cfc 	.word	0x20006cfc

08026e18 <_isatty_r>:
 8026e18:	b538      	push	{r3, r4, r5, lr}
 8026e1a:	4d06      	ldr	r5, [pc, #24]	; (8026e34 <_isatty_r+0x1c>)
 8026e1c:	2300      	movs	r3, #0
 8026e1e:	4604      	mov	r4, r0
 8026e20:	4608      	mov	r0, r1
 8026e22:	602b      	str	r3, [r5, #0]
 8026e24:	f7eb fa21 	bl	801226a <_isatty>
 8026e28:	1c43      	adds	r3, r0, #1
 8026e2a:	d102      	bne.n	8026e32 <_isatty_r+0x1a>
 8026e2c:	682b      	ldr	r3, [r5, #0]
 8026e2e:	b103      	cbz	r3, 8026e32 <_isatty_r+0x1a>
 8026e30:	6023      	str	r3, [r4, #0]
 8026e32:	bd38      	pop	{r3, r4, r5, pc}
 8026e34:	20006cfc 	.word	0x20006cfc

08026e38 <_lseek_r>:
 8026e38:	b538      	push	{r3, r4, r5, lr}
 8026e3a:	4d07      	ldr	r5, [pc, #28]	; (8026e58 <_lseek_r+0x20>)
 8026e3c:	4604      	mov	r4, r0
 8026e3e:	4608      	mov	r0, r1
 8026e40:	4611      	mov	r1, r2
 8026e42:	2200      	movs	r2, #0
 8026e44:	602a      	str	r2, [r5, #0]
 8026e46:	461a      	mov	r2, r3
 8026e48:	f7eb fa1a 	bl	8012280 <_lseek>
 8026e4c:	1c43      	adds	r3, r0, #1
 8026e4e:	d102      	bne.n	8026e56 <_lseek_r+0x1e>
 8026e50:	682b      	ldr	r3, [r5, #0]
 8026e52:	b103      	cbz	r3, 8026e56 <_lseek_r+0x1e>
 8026e54:	6023      	str	r3, [r4, #0]
 8026e56:	bd38      	pop	{r3, r4, r5, pc}
 8026e58:	20006cfc 	.word	0x20006cfc

08026e5c <_read_r>:
 8026e5c:	b538      	push	{r3, r4, r5, lr}
 8026e5e:	4d07      	ldr	r5, [pc, #28]	; (8026e7c <_read_r+0x20>)
 8026e60:	4604      	mov	r4, r0
 8026e62:	4608      	mov	r0, r1
 8026e64:	4611      	mov	r1, r2
 8026e66:	2200      	movs	r2, #0
 8026e68:	602a      	str	r2, [r5, #0]
 8026e6a:	461a      	mov	r2, r3
 8026e6c:	f7eb f9a8 	bl	80121c0 <_read>
 8026e70:	1c43      	adds	r3, r0, #1
 8026e72:	d102      	bne.n	8026e7a <_read_r+0x1e>
 8026e74:	682b      	ldr	r3, [r5, #0]
 8026e76:	b103      	cbz	r3, 8026e7a <_read_r+0x1e>
 8026e78:	6023      	str	r3, [r4, #0]
 8026e7a:	bd38      	pop	{r3, r4, r5, pc}
 8026e7c:	20006cfc 	.word	0x20006cfc

08026e80 <_init>:
 8026e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e82:	bf00      	nop
 8026e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026e86:	bc08      	pop	{r3}
 8026e88:	469e      	mov	lr, r3
 8026e8a:	4770      	bx	lr

08026e8c <_fini>:
 8026e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e8e:	bf00      	nop
 8026e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026e92:	bc08      	pop	{r3}
 8026e94:	469e      	mov	lr, r3
 8026e96:	4770      	bx	lr
