
QPS_0019_ThreePhaseSCR_RC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d00  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007bac  08022d00  08022d00  00032d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080001c4  080001c4  0004016c  2**0
                  CONTENTS
  4 .ARM          00000008  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080001cc  080001cc  0004016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080001cc  080001cc  000101cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0802a8ac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c94  20000170  0802aa18  00040170  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004e04  0802aa18  00044e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00070b22  00000000  00000000  0004019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ec2  00000000  00000000  000b0cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003fe8  00000000  00000000  000b8b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003cc0  00000000  00000000  000bcb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c809  00000000  00000000  000c0828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039917  00000000  00000000  000ed031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105eae  00000000  00000000  00126948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022c7f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000122b0  00000000  00000000  0022c84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000170 	.word	0x20000170
 801001c:	00000000 	.word	0x00000000
 8010020:	08022ce8 	.word	0x08022ce8

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000174 	.word	0x20000174
 801003c:	08022ce8 	.word	0x08022ce8

08010040 <memchr>:
 8010040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010044:	2a10      	cmp	r2, #16
 8010046:	db2b      	blt.n	80100a0 <memchr+0x60>
 8010048:	f010 0f07 	tst.w	r0, #7
 801004c:	d008      	beq.n	8010060 <memchr+0x20>
 801004e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010052:	3a01      	subs	r2, #1
 8010054:	428b      	cmp	r3, r1
 8010056:	d02d      	beq.n	80100b4 <memchr+0x74>
 8010058:	f010 0f07 	tst.w	r0, #7
 801005c:	b342      	cbz	r2, 80100b0 <memchr+0x70>
 801005e:	d1f6      	bne.n	801004e <memchr+0xe>
 8010060:	b4f0      	push	{r4, r5, r6, r7}
 8010062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801006a:	f022 0407 	bic.w	r4, r2, #7
 801006e:	f07f 0700 	mvns.w	r7, #0
 8010072:	2300      	movs	r3, #0
 8010074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010078:	3c08      	subs	r4, #8
 801007a:	ea85 0501 	eor.w	r5, r5, r1
 801007e:	ea86 0601 	eor.w	r6, r6, r1
 8010082:	fa85 f547 	uadd8	r5, r5, r7
 8010086:	faa3 f587 	sel	r5, r3, r7
 801008a:	fa86 f647 	uadd8	r6, r6, r7
 801008e:	faa5 f687 	sel	r6, r5, r7
 8010092:	b98e      	cbnz	r6, 80100b8 <memchr+0x78>
 8010094:	d1ee      	bne.n	8010074 <memchr+0x34>
 8010096:	bcf0      	pop	{r4, r5, r6, r7}
 8010098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801009c:	f002 0207 	and.w	r2, r2, #7
 80100a0:	b132      	cbz	r2, 80100b0 <memchr+0x70>
 80100a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80100a6:	3a01      	subs	r2, #1
 80100a8:	ea83 0301 	eor.w	r3, r3, r1
 80100ac:	b113      	cbz	r3, 80100b4 <memchr+0x74>
 80100ae:	d1f8      	bne.n	80100a2 <memchr+0x62>
 80100b0:	2000      	movs	r0, #0
 80100b2:	4770      	bx	lr
 80100b4:	3801      	subs	r0, #1
 80100b6:	4770      	bx	lr
 80100b8:	2d00      	cmp	r5, #0
 80100ba:	bf06      	itte	eq
 80100bc:	4635      	moveq	r5, r6
 80100be:	3803      	subeq	r0, #3
 80100c0:	3807      	subne	r0, #7
 80100c2:	f015 0f01 	tst.w	r5, #1
 80100c6:	d107      	bne.n	80100d8 <memchr+0x98>
 80100c8:	3001      	adds	r0, #1
 80100ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80100ce:	bf02      	ittt	eq
 80100d0:	3001      	addeq	r0, #1
 80100d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80100d6:	3001      	addeq	r0, #1
 80100d8:	bcf0      	pop	{r4, r5, r6, r7}
 80100da:	3801      	subs	r0, #1
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop

080100e0 <__aeabi_drsub>:
 80100e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80100e4:	e002      	b.n	80100ec <__adddf3>
 80100e6:	bf00      	nop

080100e8 <__aeabi_dsub>:
 80100e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080100ec <__adddf3>:
 80100ec:	b530      	push	{r4, r5, lr}
 80100ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80100f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80100f6:	ea94 0f05 	teq	r4, r5
 80100fa:	bf08      	it	eq
 80100fc:	ea90 0f02 	teqeq	r0, r2
 8010100:	bf1f      	itttt	ne
 8010102:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010106:	ea55 0c02 	orrsne.w	ip, r5, r2
 801010a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801010e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010112:	f000 80e2 	beq.w	80102da <__adddf3+0x1ee>
 8010116:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801011a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801011e:	bfb8      	it	lt
 8010120:	426d      	neglt	r5, r5
 8010122:	dd0c      	ble.n	801013e <__adddf3+0x52>
 8010124:	442c      	add	r4, r5
 8010126:	ea80 0202 	eor.w	r2, r0, r2
 801012a:	ea81 0303 	eor.w	r3, r1, r3
 801012e:	ea82 0000 	eor.w	r0, r2, r0
 8010132:	ea83 0101 	eor.w	r1, r3, r1
 8010136:	ea80 0202 	eor.w	r2, r0, r2
 801013a:	ea81 0303 	eor.w	r3, r1, r3
 801013e:	2d36      	cmp	r5, #54	; 0x36
 8010140:	bf88      	it	hi
 8010142:	bd30      	pophi	{r4, r5, pc}
 8010144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801014c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010154:	d002      	beq.n	801015c <__adddf3+0x70>
 8010156:	4240      	negs	r0, r0
 8010158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801015c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010160:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010168:	d002      	beq.n	8010170 <__adddf3+0x84>
 801016a:	4252      	negs	r2, r2
 801016c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010170:	ea94 0f05 	teq	r4, r5
 8010174:	f000 80a7 	beq.w	80102c6 <__adddf3+0x1da>
 8010178:	f1a4 0401 	sub.w	r4, r4, #1
 801017c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010180:	db0d      	blt.n	801019e <__adddf3+0xb2>
 8010182:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010186:	fa22 f205 	lsr.w	r2, r2, r5
 801018a:	1880      	adds	r0, r0, r2
 801018c:	f141 0100 	adc.w	r1, r1, #0
 8010190:	fa03 f20e 	lsl.w	r2, r3, lr
 8010194:	1880      	adds	r0, r0, r2
 8010196:	fa43 f305 	asr.w	r3, r3, r5
 801019a:	4159      	adcs	r1, r3
 801019c:	e00e      	b.n	80101bc <__adddf3+0xd0>
 801019e:	f1a5 0520 	sub.w	r5, r5, #32
 80101a2:	f10e 0e20 	add.w	lr, lr, #32
 80101a6:	2a01      	cmp	r2, #1
 80101a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80101ac:	bf28      	it	cs
 80101ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80101b2:	fa43 f305 	asr.w	r3, r3, r5
 80101b6:	18c0      	adds	r0, r0, r3
 80101b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80101bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80101c0:	d507      	bpl.n	80101d2 <__adddf3+0xe6>
 80101c2:	f04f 0e00 	mov.w	lr, #0
 80101c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80101ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80101ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80101d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80101d6:	d31b      	bcc.n	8010210 <__adddf3+0x124>
 80101d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80101dc:	d30c      	bcc.n	80101f8 <__adddf3+0x10c>
 80101de:	0849      	lsrs	r1, r1, #1
 80101e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80101e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80101e8:	f104 0401 	add.w	r4, r4, #1
 80101ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80101f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80101f4:	f080 809a 	bcs.w	801032c <__adddf3+0x240>
 80101f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80101fc:	bf08      	it	eq
 80101fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010202:	f150 0000 	adcs.w	r0, r0, #0
 8010206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801020a:	ea41 0105 	orr.w	r1, r1, r5
 801020e:	bd30      	pop	{r4, r5, pc}
 8010210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010214:	4140      	adcs	r0, r0
 8010216:	eb41 0101 	adc.w	r1, r1, r1
 801021a:	3c01      	subs	r4, #1
 801021c:	bf28      	it	cs
 801021e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8010222:	d2e9      	bcs.n	80101f8 <__adddf3+0x10c>
 8010224:	f091 0f00 	teq	r1, #0
 8010228:	bf04      	itt	eq
 801022a:	4601      	moveq	r1, r0
 801022c:	2000      	moveq	r0, #0
 801022e:	fab1 f381 	clz	r3, r1
 8010232:	bf08      	it	eq
 8010234:	3320      	addeq	r3, #32
 8010236:	f1a3 030b 	sub.w	r3, r3, #11
 801023a:	f1b3 0220 	subs.w	r2, r3, #32
 801023e:	da0c      	bge.n	801025a <__adddf3+0x16e>
 8010240:	320c      	adds	r2, #12
 8010242:	dd08      	ble.n	8010256 <__adddf3+0x16a>
 8010244:	f102 0c14 	add.w	ip, r2, #20
 8010248:	f1c2 020c 	rsb	r2, r2, #12
 801024c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010250:	fa21 f102 	lsr.w	r1, r1, r2
 8010254:	e00c      	b.n	8010270 <__adddf3+0x184>
 8010256:	f102 0214 	add.w	r2, r2, #20
 801025a:	bfd8      	it	le
 801025c:	f1c2 0c20 	rsble	ip, r2, #32
 8010260:	fa01 f102 	lsl.w	r1, r1, r2
 8010264:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010268:	bfdc      	itt	le
 801026a:	ea41 010c 	orrle.w	r1, r1, ip
 801026e:	4090      	lslle	r0, r2
 8010270:	1ae4      	subs	r4, r4, r3
 8010272:	bfa2      	ittt	ge
 8010274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010278:	4329      	orrge	r1, r5
 801027a:	bd30      	popge	{r4, r5, pc}
 801027c:	ea6f 0404 	mvn.w	r4, r4
 8010280:	3c1f      	subs	r4, #31
 8010282:	da1c      	bge.n	80102be <__adddf3+0x1d2>
 8010284:	340c      	adds	r4, #12
 8010286:	dc0e      	bgt.n	80102a6 <__adddf3+0x1ba>
 8010288:	f104 0414 	add.w	r4, r4, #20
 801028c:	f1c4 0220 	rsb	r2, r4, #32
 8010290:	fa20 f004 	lsr.w	r0, r0, r4
 8010294:	fa01 f302 	lsl.w	r3, r1, r2
 8010298:	ea40 0003 	orr.w	r0, r0, r3
 801029c:	fa21 f304 	lsr.w	r3, r1, r4
 80102a0:	ea45 0103 	orr.w	r1, r5, r3
 80102a4:	bd30      	pop	{r4, r5, pc}
 80102a6:	f1c4 040c 	rsb	r4, r4, #12
 80102aa:	f1c4 0220 	rsb	r2, r4, #32
 80102ae:	fa20 f002 	lsr.w	r0, r0, r2
 80102b2:	fa01 f304 	lsl.w	r3, r1, r4
 80102b6:	ea40 0003 	orr.w	r0, r0, r3
 80102ba:	4629      	mov	r1, r5
 80102bc:	bd30      	pop	{r4, r5, pc}
 80102be:	fa21 f004 	lsr.w	r0, r1, r4
 80102c2:	4629      	mov	r1, r5
 80102c4:	bd30      	pop	{r4, r5, pc}
 80102c6:	f094 0f00 	teq	r4, #0
 80102ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80102ce:	bf06      	itte	eq
 80102d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80102d4:	3401      	addeq	r4, #1
 80102d6:	3d01      	subne	r5, #1
 80102d8:	e74e      	b.n	8010178 <__adddf3+0x8c>
 80102da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80102de:	bf18      	it	ne
 80102e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e4:	d029      	beq.n	801033a <__adddf3+0x24e>
 80102e6:	ea94 0f05 	teq	r4, r5
 80102ea:	bf08      	it	eq
 80102ec:	ea90 0f02 	teqeq	r0, r2
 80102f0:	d005      	beq.n	80102fe <__adddf3+0x212>
 80102f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80102f6:	bf04      	itt	eq
 80102f8:	4619      	moveq	r1, r3
 80102fa:	4610      	moveq	r0, r2
 80102fc:	bd30      	pop	{r4, r5, pc}
 80102fe:	ea91 0f03 	teq	r1, r3
 8010302:	bf1e      	ittt	ne
 8010304:	2100      	movne	r1, #0
 8010306:	2000      	movne	r0, #0
 8010308:	bd30      	popne	{r4, r5, pc}
 801030a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801030e:	d105      	bne.n	801031c <__adddf3+0x230>
 8010310:	0040      	lsls	r0, r0, #1
 8010312:	4149      	adcs	r1, r1
 8010314:	bf28      	it	cs
 8010316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801031a:	bd30      	pop	{r4, r5, pc}
 801031c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010320:	bf3c      	itt	cc
 8010322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8010326:	bd30      	popcc	{r4, r5, pc}
 8010328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801032c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010334:	f04f 0000 	mov.w	r0, #0
 8010338:	bd30      	pop	{r4, r5, pc}
 801033a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801033e:	bf1a      	itte	ne
 8010340:	4619      	movne	r1, r3
 8010342:	4610      	movne	r0, r2
 8010344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010348:	bf1c      	itt	ne
 801034a:	460b      	movne	r3, r1
 801034c:	4602      	movne	r2, r0
 801034e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010352:	bf06      	itte	eq
 8010354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010358:	ea91 0f03 	teqeq	r1, r3
 801035c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010360:	bd30      	pop	{r4, r5, pc}
 8010362:	bf00      	nop

08010364 <__aeabi_ui2d>:
 8010364:	f090 0f00 	teq	r0, #0
 8010368:	bf04      	itt	eq
 801036a:	2100      	moveq	r1, #0
 801036c:	4770      	bxeq	lr
 801036e:	b530      	push	{r4, r5, lr}
 8010370:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010374:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010378:	f04f 0500 	mov.w	r5, #0
 801037c:	f04f 0100 	mov.w	r1, #0
 8010380:	e750      	b.n	8010224 <__adddf3+0x138>
 8010382:	bf00      	nop

08010384 <__aeabi_i2d>:
 8010384:	f090 0f00 	teq	r0, #0
 8010388:	bf04      	itt	eq
 801038a:	2100      	moveq	r1, #0
 801038c:	4770      	bxeq	lr
 801038e:	b530      	push	{r4, r5, lr}
 8010390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801039c:	bf48      	it	mi
 801039e:	4240      	negmi	r0, r0
 80103a0:	f04f 0100 	mov.w	r1, #0
 80103a4:	e73e      	b.n	8010224 <__adddf3+0x138>
 80103a6:	bf00      	nop

080103a8 <__aeabi_f2d>:
 80103a8:	0042      	lsls	r2, r0, #1
 80103aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80103ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80103b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80103b6:	bf1f      	itttt	ne
 80103b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80103bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80103c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80103c4:	4770      	bxne	lr
 80103c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80103ca:	bf08      	it	eq
 80103cc:	4770      	bxeq	lr
 80103ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80103d2:	bf04      	itt	eq
 80103d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80103d8:	4770      	bxeq	lr
 80103da:	b530      	push	{r4, r5, lr}
 80103dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80103e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80103e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80103e8:	e71c      	b.n	8010224 <__adddf3+0x138>
 80103ea:	bf00      	nop

080103ec <__aeabi_ul2d>:
 80103ec:	ea50 0201 	orrs.w	r2, r0, r1
 80103f0:	bf08      	it	eq
 80103f2:	4770      	bxeq	lr
 80103f4:	b530      	push	{r4, r5, lr}
 80103f6:	f04f 0500 	mov.w	r5, #0
 80103fa:	e00a      	b.n	8010412 <__aeabi_l2d+0x16>

080103fc <__aeabi_l2d>:
 80103fc:	ea50 0201 	orrs.w	r2, r0, r1
 8010400:	bf08      	it	eq
 8010402:	4770      	bxeq	lr
 8010404:	b530      	push	{r4, r5, lr}
 8010406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801040a:	d502      	bpl.n	8010412 <__aeabi_l2d+0x16>
 801040c:	4240      	negs	r0, r0
 801040e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010412:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010416:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801041a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801041e:	f43f aed8 	beq.w	80101d2 <__adddf3+0xe6>
 8010422:	f04f 0203 	mov.w	r2, #3
 8010426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801042a:	bf18      	it	ne
 801042c:	3203      	addne	r2, #3
 801042e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010432:	bf18      	it	ne
 8010434:	3203      	addne	r2, #3
 8010436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801043a:	f1c2 0320 	rsb	r3, r2, #32
 801043e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010442:	fa20 f002 	lsr.w	r0, r0, r2
 8010446:	fa01 fe03 	lsl.w	lr, r1, r3
 801044a:	ea40 000e 	orr.w	r0, r0, lr
 801044e:	fa21 f102 	lsr.w	r1, r1, r2
 8010452:	4414      	add	r4, r2
 8010454:	e6bd      	b.n	80101d2 <__adddf3+0xe6>
 8010456:	bf00      	nop

08010458 <__aeabi_dmul>:
 8010458:	b570      	push	{r4, r5, r6, lr}
 801045a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801045e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010466:	bf1d      	ittte	ne
 8010468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801046c:	ea94 0f0c 	teqne	r4, ip
 8010470:	ea95 0f0c 	teqne	r5, ip
 8010474:	f000 f8de 	bleq	8010634 <__aeabi_dmul+0x1dc>
 8010478:	442c      	add	r4, r5
 801047a:	ea81 0603 	eor.w	r6, r1, r3
 801047e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801048a:	bf18      	it	ne
 801048c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010498:	d038      	beq.n	801050c <__aeabi_dmul+0xb4>
 801049a:	fba0 ce02 	umull	ip, lr, r0, r2
 801049e:	f04f 0500 	mov.w	r5, #0
 80104a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80104a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80104aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80104ae:	f04f 0600 	mov.w	r6, #0
 80104b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80104b6:	f09c 0f00 	teq	ip, #0
 80104ba:	bf18      	it	ne
 80104bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80104c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80104c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80104c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80104cc:	d204      	bcs.n	80104d8 <__aeabi_dmul+0x80>
 80104ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80104d2:	416d      	adcs	r5, r5
 80104d4:	eb46 0606 	adc.w	r6, r6, r6
 80104d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80104dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80104e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80104e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80104e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80104ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80104f0:	bf88      	it	hi
 80104f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80104f6:	d81e      	bhi.n	8010536 <__aeabi_dmul+0xde>
 80104f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80104fc:	bf08      	it	eq
 80104fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8010502:	f150 0000 	adcs.w	r0, r0, #0
 8010506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801050a:	bd70      	pop	{r4, r5, r6, pc}
 801050c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010510:	ea46 0101 	orr.w	r1, r6, r1
 8010514:	ea40 0002 	orr.w	r0, r0, r2
 8010518:	ea81 0103 	eor.w	r1, r1, r3
 801051c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010520:	bfc2      	ittt	gt
 8010522:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801052a:	bd70      	popgt	{r4, r5, r6, pc}
 801052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010530:	f04f 0e00 	mov.w	lr, #0
 8010534:	3c01      	subs	r4, #1
 8010536:	f300 80ab 	bgt.w	8010690 <__aeabi_dmul+0x238>
 801053a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801053e:	bfde      	ittt	le
 8010540:	2000      	movle	r0, #0
 8010542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010546:	bd70      	pople	{r4, r5, r6, pc}
 8010548:	f1c4 0400 	rsb	r4, r4, #0
 801054c:	3c20      	subs	r4, #32
 801054e:	da35      	bge.n	80105bc <__aeabi_dmul+0x164>
 8010550:	340c      	adds	r4, #12
 8010552:	dc1b      	bgt.n	801058c <__aeabi_dmul+0x134>
 8010554:	f104 0414 	add.w	r4, r4, #20
 8010558:	f1c4 0520 	rsb	r5, r4, #32
 801055c:	fa00 f305 	lsl.w	r3, r0, r5
 8010560:	fa20 f004 	lsr.w	r0, r0, r4
 8010564:	fa01 f205 	lsl.w	r2, r1, r5
 8010568:	ea40 0002 	orr.w	r0, r0, r2
 801056c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010578:	fa21 f604 	lsr.w	r6, r1, r4
 801057c:	eb42 0106 	adc.w	r1, r2, r6
 8010580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010584:	bf08      	it	eq
 8010586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801058a:	bd70      	pop	{r4, r5, r6, pc}
 801058c:	f1c4 040c 	rsb	r4, r4, #12
 8010590:	f1c4 0520 	rsb	r5, r4, #32
 8010594:	fa00 f304 	lsl.w	r3, r0, r4
 8010598:	fa20 f005 	lsr.w	r0, r0, r5
 801059c:	fa01 f204 	lsl.w	r2, r1, r4
 80105a0:	ea40 0002 	orr.w	r0, r0, r2
 80105a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80105a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80105ac:	f141 0100 	adc.w	r1, r1, #0
 80105b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80105b4:	bf08      	it	eq
 80105b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	f1c4 0520 	rsb	r5, r4, #32
 80105c0:	fa00 f205 	lsl.w	r2, r0, r5
 80105c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80105c8:	fa20 f304 	lsr.w	r3, r0, r4
 80105cc:	fa01 f205 	lsl.w	r2, r1, r5
 80105d0:	ea43 0302 	orr.w	r3, r3, r2
 80105d4:	fa21 f004 	lsr.w	r0, r1, r4
 80105d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80105dc:	fa21 f204 	lsr.w	r2, r1, r4
 80105e0:	ea20 0002 	bic.w	r0, r0, r2
 80105e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80105e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80105ec:	bf08      	it	eq
 80105ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80105f2:	bd70      	pop	{r4, r5, r6, pc}
 80105f4:	f094 0f00 	teq	r4, #0
 80105f8:	d10f      	bne.n	801061a <__aeabi_dmul+0x1c2>
 80105fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80105fe:	0040      	lsls	r0, r0, #1
 8010600:	eb41 0101 	adc.w	r1, r1, r1
 8010604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010608:	bf08      	it	eq
 801060a:	3c01      	subeq	r4, #1
 801060c:	d0f7      	beq.n	80105fe <__aeabi_dmul+0x1a6>
 801060e:	ea41 0106 	orr.w	r1, r1, r6
 8010612:	f095 0f00 	teq	r5, #0
 8010616:	bf18      	it	ne
 8010618:	4770      	bxne	lr
 801061a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801061e:	0052      	lsls	r2, r2, #1
 8010620:	eb43 0303 	adc.w	r3, r3, r3
 8010624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010628:	bf08      	it	eq
 801062a:	3d01      	subeq	r5, #1
 801062c:	d0f7      	beq.n	801061e <__aeabi_dmul+0x1c6>
 801062e:	ea43 0306 	orr.w	r3, r3, r6
 8010632:	4770      	bx	lr
 8010634:	ea94 0f0c 	teq	r4, ip
 8010638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801063c:	bf18      	it	ne
 801063e:	ea95 0f0c 	teqne	r5, ip
 8010642:	d00c      	beq.n	801065e <__aeabi_dmul+0x206>
 8010644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010648:	bf18      	it	ne
 801064a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801064e:	d1d1      	bne.n	80105f4 <__aeabi_dmul+0x19c>
 8010650:	ea81 0103 	eor.w	r1, r1, r3
 8010654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010658:	f04f 0000 	mov.w	r0, #0
 801065c:	bd70      	pop	{r4, r5, r6, pc}
 801065e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010662:	bf06      	itte	eq
 8010664:	4610      	moveq	r0, r2
 8010666:	4619      	moveq	r1, r3
 8010668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801066c:	d019      	beq.n	80106a2 <__aeabi_dmul+0x24a>
 801066e:	ea94 0f0c 	teq	r4, ip
 8010672:	d102      	bne.n	801067a <__aeabi_dmul+0x222>
 8010674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010678:	d113      	bne.n	80106a2 <__aeabi_dmul+0x24a>
 801067a:	ea95 0f0c 	teq	r5, ip
 801067e:	d105      	bne.n	801068c <__aeabi_dmul+0x234>
 8010680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010684:	bf1c      	itt	ne
 8010686:	4610      	movne	r0, r2
 8010688:	4619      	movne	r1, r3
 801068a:	d10a      	bne.n	80106a2 <__aeabi_dmul+0x24a>
 801068c:	ea81 0103 	eor.w	r1, r1, r3
 8010690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801069c:	f04f 0000 	mov.w	r0, #0
 80106a0:	bd70      	pop	{r4, r5, r6, pc}
 80106a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80106a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80106aa:	bd70      	pop	{r4, r5, r6, pc}

080106ac <__aeabi_ddiv>:
 80106ac:	b570      	push	{r4, r5, r6, lr}
 80106ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80106b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80106b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80106ba:	bf1d      	ittte	ne
 80106bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80106c0:	ea94 0f0c 	teqne	r4, ip
 80106c4:	ea95 0f0c 	teqne	r5, ip
 80106c8:	f000 f8a7 	bleq	801081a <__aeabi_ddiv+0x16e>
 80106cc:	eba4 0405 	sub.w	r4, r4, r5
 80106d0:	ea81 0e03 	eor.w	lr, r1, r3
 80106d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80106d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80106dc:	f000 8088 	beq.w	80107f0 <__aeabi_ddiv+0x144>
 80106e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80106e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80106e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80106ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80106f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80106f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80106f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80106fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8010700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8010704:	429d      	cmp	r5, r3
 8010706:	bf08      	it	eq
 8010708:	4296      	cmpeq	r6, r2
 801070a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801070e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8010712:	d202      	bcs.n	801071a <__aeabi_ddiv+0x6e>
 8010714:	085b      	lsrs	r3, r3, #1
 8010716:	ea4f 0232 	mov.w	r2, r2, rrx
 801071a:	1ab6      	subs	r6, r6, r2
 801071c:	eb65 0503 	sbc.w	r5, r5, r3
 8010720:	085b      	lsrs	r3, r3, #1
 8010722:	ea4f 0232 	mov.w	r2, r2, rrx
 8010726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801072a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801072e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010732:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010736:	bf22      	ittt	cs
 8010738:	1ab6      	subcs	r6, r6, r2
 801073a:	4675      	movcs	r5, lr
 801073c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010740:	085b      	lsrs	r3, r3, #1
 8010742:	ea4f 0232 	mov.w	r2, r2, rrx
 8010746:	ebb6 0e02 	subs.w	lr, r6, r2
 801074a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801074e:	bf22      	ittt	cs
 8010750:	1ab6      	subcs	r6, r6, r2
 8010752:	4675      	movcs	r5, lr
 8010754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010758:	085b      	lsrs	r3, r3, #1
 801075a:	ea4f 0232 	mov.w	r2, r2, rrx
 801075e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010766:	bf22      	ittt	cs
 8010768:	1ab6      	subcs	r6, r6, r2
 801076a:	4675      	movcs	r5, lr
 801076c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010770:	085b      	lsrs	r3, r3, #1
 8010772:	ea4f 0232 	mov.w	r2, r2, rrx
 8010776:	ebb6 0e02 	subs.w	lr, r6, r2
 801077a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801077e:	bf22      	ittt	cs
 8010780:	1ab6      	subcs	r6, r6, r2
 8010782:	4675      	movcs	r5, lr
 8010784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010788:	ea55 0e06 	orrs.w	lr, r5, r6
 801078c:	d018      	beq.n	80107c0 <__aeabi_ddiv+0x114>
 801078e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010796:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801079a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801079e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80107a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80107a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80107aa:	d1c0      	bne.n	801072e <__aeabi_ddiv+0x82>
 80107ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107b0:	d10b      	bne.n	80107ca <__aeabi_ddiv+0x11e>
 80107b2:	ea41 0100 	orr.w	r1, r1, r0
 80107b6:	f04f 0000 	mov.w	r0, #0
 80107ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80107be:	e7b6      	b.n	801072e <__aeabi_ddiv+0x82>
 80107c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107c4:	bf04      	itt	eq
 80107c6:	4301      	orreq	r1, r0
 80107c8:	2000      	moveq	r0, #0
 80107ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80107ce:	bf88      	it	hi
 80107d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80107d4:	f63f aeaf 	bhi.w	8010536 <__aeabi_dmul+0xde>
 80107d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80107dc:	bf04      	itt	eq
 80107de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80107e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80107e6:	f150 0000 	adcs.w	r0, r0, #0
 80107ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80107ee:	bd70      	pop	{r4, r5, r6, pc}
 80107f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80107f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80107f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80107fc:	bfc2      	ittt	gt
 80107fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010806:	bd70      	popgt	{r4, r5, r6, pc}
 8010808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801080c:	f04f 0e00 	mov.w	lr, #0
 8010810:	3c01      	subs	r4, #1
 8010812:	e690      	b.n	8010536 <__aeabi_dmul+0xde>
 8010814:	ea45 0e06 	orr.w	lr, r5, r6
 8010818:	e68d      	b.n	8010536 <__aeabi_dmul+0xde>
 801081a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801081e:	ea94 0f0c 	teq	r4, ip
 8010822:	bf08      	it	eq
 8010824:	ea95 0f0c 	teqeq	r5, ip
 8010828:	f43f af3b 	beq.w	80106a2 <__aeabi_dmul+0x24a>
 801082c:	ea94 0f0c 	teq	r4, ip
 8010830:	d10a      	bne.n	8010848 <__aeabi_ddiv+0x19c>
 8010832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010836:	f47f af34 	bne.w	80106a2 <__aeabi_dmul+0x24a>
 801083a:	ea95 0f0c 	teq	r5, ip
 801083e:	f47f af25 	bne.w	801068c <__aeabi_dmul+0x234>
 8010842:	4610      	mov	r0, r2
 8010844:	4619      	mov	r1, r3
 8010846:	e72c      	b.n	80106a2 <__aeabi_dmul+0x24a>
 8010848:	ea95 0f0c 	teq	r5, ip
 801084c:	d106      	bne.n	801085c <__aeabi_ddiv+0x1b0>
 801084e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010852:	f43f aefd 	beq.w	8010650 <__aeabi_dmul+0x1f8>
 8010856:	4610      	mov	r0, r2
 8010858:	4619      	mov	r1, r3
 801085a:	e722      	b.n	80106a2 <__aeabi_dmul+0x24a>
 801085c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010860:	bf18      	it	ne
 8010862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010866:	f47f aec5 	bne.w	80105f4 <__aeabi_dmul+0x19c>
 801086a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801086e:	f47f af0d 	bne.w	801068c <__aeabi_dmul+0x234>
 8010872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010876:	f47f aeeb 	bne.w	8010650 <__aeabi_dmul+0x1f8>
 801087a:	e712      	b.n	80106a2 <__aeabi_dmul+0x24a>

0801087c <__gedf2>:
 801087c:	f04f 3cff 	mov.w	ip, #4294967295
 8010880:	e006      	b.n	8010890 <__cmpdf2+0x4>
 8010882:	bf00      	nop

08010884 <__ledf2>:
 8010884:	f04f 0c01 	mov.w	ip, #1
 8010888:	e002      	b.n	8010890 <__cmpdf2+0x4>
 801088a:	bf00      	nop

0801088c <__cmpdf2>:
 801088c:	f04f 0c01 	mov.w	ip, #1
 8010890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80108a0:	bf18      	it	ne
 80108a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80108a6:	d01b      	beq.n	80108e0 <__cmpdf2+0x54>
 80108a8:	b001      	add	sp, #4
 80108aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80108ae:	bf0c      	ite	eq
 80108b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80108b4:	ea91 0f03 	teqne	r1, r3
 80108b8:	bf02      	ittt	eq
 80108ba:	ea90 0f02 	teqeq	r0, r2
 80108be:	2000      	moveq	r0, #0
 80108c0:	4770      	bxeq	lr
 80108c2:	f110 0f00 	cmn.w	r0, #0
 80108c6:	ea91 0f03 	teq	r1, r3
 80108ca:	bf58      	it	pl
 80108cc:	4299      	cmppl	r1, r3
 80108ce:	bf08      	it	eq
 80108d0:	4290      	cmpeq	r0, r2
 80108d2:	bf2c      	ite	cs
 80108d4:	17d8      	asrcs	r0, r3, #31
 80108d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80108da:	f040 0001 	orr.w	r0, r0, #1
 80108de:	4770      	bx	lr
 80108e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80108e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80108e8:	d102      	bne.n	80108f0 <__cmpdf2+0x64>
 80108ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80108ee:	d107      	bne.n	8010900 <__cmpdf2+0x74>
 80108f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80108f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80108f8:	d1d6      	bne.n	80108a8 <__cmpdf2+0x1c>
 80108fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80108fe:	d0d3      	beq.n	80108a8 <__cmpdf2+0x1c>
 8010900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop

08010908 <__aeabi_cdrcmple>:
 8010908:	4684      	mov	ip, r0
 801090a:	4610      	mov	r0, r2
 801090c:	4662      	mov	r2, ip
 801090e:	468c      	mov	ip, r1
 8010910:	4619      	mov	r1, r3
 8010912:	4663      	mov	r3, ip
 8010914:	e000      	b.n	8010918 <__aeabi_cdcmpeq>
 8010916:	bf00      	nop

08010918 <__aeabi_cdcmpeq>:
 8010918:	b501      	push	{r0, lr}
 801091a:	f7ff ffb7 	bl	801088c <__cmpdf2>
 801091e:	2800      	cmp	r0, #0
 8010920:	bf48      	it	mi
 8010922:	f110 0f00 	cmnmi.w	r0, #0
 8010926:	bd01      	pop	{r0, pc}

08010928 <__aeabi_dcmpeq>:
 8010928:	f84d ed08 	str.w	lr, [sp, #-8]!
 801092c:	f7ff fff4 	bl	8010918 <__aeabi_cdcmpeq>
 8010930:	bf0c      	ite	eq
 8010932:	2001      	moveq	r0, #1
 8010934:	2000      	movne	r0, #0
 8010936:	f85d fb08 	ldr.w	pc, [sp], #8
 801093a:	bf00      	nop

0801093c <__aeabi_dcmplt>:
 801093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010940:	f7ff ffea 	bl	8010918 <__aeabi_cdcmpeq>
 8010944:	bf34      	ite	cc
 8010946:	2001      	movcc	r0, #1
 8010948:	2000      	movcs	r0, #0
 801094a:	f85d fb08 	ldr.w	pc, [sp], #8
 801094e:	bf00      	nop

08010950 <__aeabi_dcmple>:
 8010950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010954:	f7ff ffe0 	bl	8010918 <__aeabi_cdcmpeq>
 8010958:	bf94      	ite	ls
 801095a:	2001      	movls	r0, #1
 801095c:	2000      	movhi	r0, #0
 801095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010962:	bf00      	nop

08010964 <__aeabi_dcmpge>:
 8010964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010968:	f7ff ffce 	bl	8010908 <__aeabi_cdrcmple>
 801096c:	bf94      	ite	ls
 801096e:	2001      	movls	r0, #1
 8010970:	2000      	movhi	r0, #0
 8010972:	f85d fb08 	ldr.w	pc, [sp], #8
 8010976:	bf00      	nop

08010978 <__aeabi_dcmpgt>:
 8010978:	f84d ed08 	str.w	lr, [sp, #-8]!
 801097c:	f7ff ffc4 	bl	8010908 <__aeabi_cdrcmple>
 8010980:	bf34      	ite	cc
 8010982:	2001      	movcc	r0, #1
 8010984:	2000      	movcs	r0, #0
 8010986:	f85d fb08 	ldr.w	pc, [sp], #8
 801098a:	bf00      	nop

0801098c <__aeabi_d2iz>:
 801098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010994:	d215      	bcs.n	80109c2 <__aeabi_d2iz+0x36>
 8010996:	d511      	bpl.n	80109bc <__aeabi_d2iz+0x30>
 8010998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80109a0:	d912      	bls.n	80109c8 <__aeabi_d2iz+0x3c>
 80109a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80109a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80109aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80109ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80109b2:	fa23 f002 	lsr.w	r0, r3, r2
 80109b6:	bf18      	it	ne
 80109b8:	4240      	negne	r0, r0
 80109ba:	4770      	bx	lr
 80109bc:	f04f 0000 	mov.w	r0, #0
 80109c0:	4770      	bx	lr
 80109c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80109c6:	d105      	bne.n	80109d4 <__aeabi_d2iz+0x48>
 80109c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80109cc:	bf08      	it	eq
 80109ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80109d2:	4770      	bx	lr
 80109d4:	f04f 0000 	mov.w	r0, #0
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop

080109dc <__aeabi_d2uiz>:
 80109dc:	004a      	lsls	r2, r1, #1
 80109de:	d211      	bcs.n	8010a04 <__aeabi_d2uiz+0x28>
 80109e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80109e4:	d211      	bcs.n	8010a0a <__aeabi_d2uiz+0x2e>
 80109e6:	d50d      	bpl.n	8010a04 <__aeabi_d2uiz+0x28>
 80109e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80109ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80109f0:	d40e      	bmi.n	8010a10 <__aeabi_d2uiz+0x34>
 80109f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80109f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80109fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80109fe:	fa23 f002 	lsr.w	r0, r3, r2
 8010a02:	4770      	bx	lr
 8010a04:	f04f 0000 	mov.w	r0, #0
 8010a08:	4770      	bx	lr
 8010a0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010a0e:	d102      	bne.n	8010a16 <__aeabi_d2uiz+0x3a>
 8010a10:	f04f 30ff 	mov.w	r0, #4294967295
 8010a14:	4770      	bx	lr
 8010a16:	f04f 0000 	mov.w	r0, #0
 8010a1a:	4770      	bx	lr

08010a1c <__aeabi_d2f>:
 8010a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010a24:	bf24      	itt	cs
 8010a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010a2e:	d90d      	bls.n	8010a4c <__aeabi_d2f+0x30>
 8010a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010a44:	bf08      	it	eq
 8010a46:	f020 0001 	biceq.w	r0, r0, #1
 8010a4a:	4770      	bx	lr
 8010a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010a50:	d121      	bne.n	8010a96 <__aeabi_d2f+0x7a>
 8010a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010a56:	bfbc      	itt	lt
 8010a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010a5c:	4770      	bxlt	lr
 8010a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010a66:	f1c2 0218 	rsb	r2, r2, #24
 8010a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8010a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8010a72:	fa20 f002 	lsr.w	r0, r0, r2
 8010a76:	bf18      	it	ne
 8010a78:	f040 0001 	orrne.w	r0, r0, #1
 8010a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010a88:	ea40 000c 	orr.w	r0, r0, ip
 8010a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8010a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010a94:	e7cc      	b.n	8010a30 <__aeabi_d2f+0x14>
 8010a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010a9a:	d107      	bne.n	8010aac <__aeabi_d2f+0x90>
 8010a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010aa0:	bf1e      	ittt	ne
 8010aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010aaa:	4770      	bxne	lr
 8010aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010ab8:	4770      	bx	lr
 8010aba:	bf00      	nop

08010abc <__aeabi_uldivmod>:
 8010abc:	b953      	cbnz	r3, 8010ad4 <__aeabi_uldivmod+0x18>
 8010abe:	b94a      	cbnz	r2, 8010ad4 <__aeabi_uldivmod+0x18>
 8010ac0:	2900      	cmp	r1, #0
 8010ac2:	bf08      	it	eq
 8010ac4:	2800      	cmpeq	r0, #0
 8010ac6:	bf1c      	itt	ne
 8010ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8010acc:	f04f 30ff 	movne.w	r0, #4294967295
 8010ad0:	f000 b96e 	b.w	8010db0 <__aeabi_idiv0>
 8010ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8010ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010adc:	f000 f806 	bl	8010aec <__udivmoddi4>
 8010ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ae8:	b004      	add	sp, #16
 8010aea:	4770      	bx	lr

08010aec <__udivmoddi4>:
 8010aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010af0:	9d08      	ldr	r5, [sp, #32]
 8010af2:	4604      	mov	r4, r0
 8010af4:	468c      	mov	ip, r1
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	f040 8083 	bne.w	8010c02 <__udivmoddi4+0x116>
 8010afc:	428a      	cmp	r2, r1
 8010afe:	4617      	mov	r7, r2
 8010b00:	d947      	bls.n	8010b92 <__udivmoddi4+0xa6>
 8010b02:	fab2 f282 	clz	r2, r2
 8010b06:	b142      	cbz	r2, 8010b1a <__udivmoddi4+0x2e>
 8010b08:	f1c2 0020 	rsb	r0, r2, #32
 8010b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8010b10:	4091      	lsls	r1, r2
 8010b12:	4097      	lsls	r7, r2
 8010b14:	ea40 0c01 	orr.w	ip, r0, r1
 8010b18:	4094      	lsls	r4, r2
 8010b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8010b1e:	0c23      	lsrs	r3, r4, #16
 8010b20:	fbbc f6f8 	udiv	r6, ip, r8
 8010b24:	fa1f fe87 	uxth.w	lr, r7
 8010b28:	fb08 c116 	mls	r1, r8, r6, ip
 8010b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010b30:	fb06 f10e 	mul.w	r1, r6, lr
 8010b34:	4299      	cmp	r1, r3
 8010b36:	d909      	bls.n	8010b4c <__udivmoddi4+0x60>
 8010b38:	18fb      	adds	r3, r7, r3
 8010b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8010b3e:	f080 8119 	bcs.w	8010d74 <__udivmoddi4+0x288>
 8010b42:	4299      	cmp	r1, r3
 8010b44:	f240 8116 	bls.w	8010d74 <__udivmoddi4+0x288>
 8010b48:	3e02      	subs	r6, #2
 8010b4a:	443b      	add	r3, r7
 8010b4c:	1a5b      	subs	r3, r3, r1
 8010b4e:	b2a4      	uxth	r4, r4
 8010b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8010b54:	fb08 3310 	mls	r3, r8, r0, r3
 8010b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8010b60:	45a6      	cmp	lr, r4
 8010b62:	d909      	bls.n	8010b78 <__udivmoddi4+0x8c>
 8010b64:	193c      	adds	r4, r7, r4
 8010b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b6a:	f080 8105 	bcs.w	8010d78 <__udivmoddi4+0x28c>
 8010b6e:	45a6      	cmp	lr, r4
 8010b70:	f240 8102 	bls.w	8010d78 <__udivmoddi4+0x28c>
 8010b74:	3802      	subs	r0, #2
 8010b76:	443c      	add	r4, r7
 8010b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010b7c:	eba4 040e 	sub.w	r4, r4, lr
 8010b80:	2600      	movs	r6, #0
 8010b82:	b11d      	cbz	r5, 8010b8c <__udivmoddi4+0xa0>
 8010b84:	40d4      	lsrs	r4, r2
 8010b86:	2300      	movs	r3, #0
 8010b88:	e9c5 4300 	strd	r4, r3, [r5]
 8010b8c:	4631      	mov	r1, r6
 8010b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b92:	b902      	cbnz	r2, 8010b96 <__udivmoddi4+0xaa>
 8010b94:	deff      	udf	#255	; 0xff
 8010b96:	fab2 f282 	clz	r2, r2
 8010b9a:	2a00      	cmp	r2, #0
 8010b9c:	d150      	bne.n	8010c40 <__udivmoddi4+0x154>
 8010b9e:	1bcb      	subs	r3, r1, r7
 8010ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010ba4:	fa1f f887 	uxth.w	r8, r7
 8010ba8:	2601      	movs	r6, #1
 8010baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8010bae:	0c21      	lsrs	r1, r4, #16
 8010bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8010bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8010bbc:	428b      	cmp	r3, r1
 8010bbe:	d907      	bls.n	8010bd0 <__udivmoddi4+0xe4>
 8010bc0:	1879      	adds	r1, r7, r1
 8010bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8010bc6:	d202      	bcs.n	8010bce <__udivmoddi4+0xe2>
 8010bc8:	428b      	cmp	r3, r1
 8010bca:	f200 80e9 	bhi.w	8010da0 <__udivmoddi4+0x2b4>
 8010bce:	4684      	mov	ip, r0
 8010bd0:	1ac9      	subs	r1, r1, r3
 8010bd2:	b2a3      	uxth	r3, r4
 8010bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8010bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8010bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8010be0:	fb08 f800 	mul.w	r8, r8, r0
 8010be4:	45a0      	cmp	r8, r4
 8010be6:	d907      	bls.n	8010bf8 <__udivmoddi4+0x10c>
 8010be8:	193c      	adds	r4, r7, r4
 8010bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8010bee:	d202      	bcs.n	8010bf6 <__udivmoddi4+0x10a>
 8010bf0:	45a0      	cmp	r8, r4
 8010bf2:	f200 80d9 	bhi.w	8010da8 <__udivmoddi4+0x2bc>
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	eba4 0408 	sub.w	r4, r4, r8
 8010bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8010c00:	e7bf      	b.n	8010b82 <__udivmoddi4+0x96>
 8010c02:	428b      	cmp	r3, r1
 8010c04:	d909      	bls.n	8010c1a <__udivmoddi4+0x12e>
 8010c06:	2d00      	cmp	r5, #0
 8010c08:	f000 80b1 	beq.w	8010d6e <__udivmoddi4+0x282>
 8010c0c:	2600      	movs	r6, #0
 8010c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8010c12:	4630      	mov	r0, r6
 8010c14:	4631      	mov	r1, r6
 8010c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c1a:	fab3 f683 	clz	r6, r3
 8010c1e:	2e00      	cmp	r6, #0
 8010c20:	d14a      	bne.n	8010cb8 <__udivmoddi4+0x1cc>
 8010c22:	428b      	cmp	r3, r1
 8010c24:	d302      	bcc.n	8010c2c <__udivmoddi4+0x140>
 8010c26:	4282      	cmp	r2, r0
 8010c28:	f200 80b8 	bhi.w	8010d9c <__udivmoddi4+0x2b0>
 8010c2c:	1a84      	subs	r4, r0, r2
 8010c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8010c32:	2001      	movs	r0, #1
 8010c34:	468c      	mov	ip, r1
 8010c36:	2d00      	cmp	r5, #0
 8010c38:	d0a8      	beq.n	8010b8c <__udivmoddi4+0xa0>
 8010c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8010c3e:	e7a5      	b.n	8010b8c <__udivmoddi4+0xa0>
 8010c40:	f1c2 0320 	rsb	r3, r2, #32
 8010c44:	fa20 f603 	lsr.w	r6, r0, r3
 8010c48:	4097      	lsls	r7, r2
 8010c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8010c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010c52:	40d9      	lsrs	r1, r3
 8010c54:	4330      	orrs	r0, r6
 8010c56:	0c03      	lsrs	r3, r0, #16
 8010c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8010c5c:	fa1f f887 	uxth.w	r8, r7
 8010c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8010c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010c68:	fb06 f108 	mul.w	r1, r6, r8
 8010c6c:	4299      	cmp	r1, r3
 8010c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8010c72:	d909      	bls.n	8010c88 <__udivmoddi4+0x19c>
 8010c74:	18fb      	adds	r3, r7, r3
 8010c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8010c7a:	f080 808d 	bcs.w	8010d98 <__udivmoddi4+0x2ac>
 8010c7e:	4299      	cmp	r1, r3
 8010c80:	f240 808a 	bls.w	8010d98 <__udivmoddi4+0x2ac>
 8010c84:	3e02      	subs	r6, #2
 8010c86:	443b      	add	r3, r7
 8010c88:	1a5b      	subs	r3, r3, r1
 8010c8a:	b281      	uxth	r1, r0
 8010c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8010c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8010c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010c98:	fb00 f308 	mul.w	r3, r0, r8
 8010c9c:	428b      	cmp	r3, r1
 8010c9e:	d907      	bls.n	8010cb0 <__udivmoddi4+0x1c4>
 8010ca0:	1879      	adds	r1, r7, r1
 8010ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8010ca6:	d273      	bcs.n	8010d90 <__udivmoddi4+0x2a4>
 8010ca8:	428b      	cmp	r3, r1
 8010caa:	d971      	bls.n	8010d90 <__udivmoddi4+0x2a4>
 8010cac:	3802      	subs	r0, #2
 8010cae:	4439      	add	r1, r7
 8010cb0:	1acb      	subs	r3, r1, r3
 8010cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8010cb6:	e778      	b.n	8010baa <__udivmoddi4+0xbe>
 8010cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8010cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8010cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8010cc4:	431c      	orrs	r4, r3
 8010cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8010cca:	fa01 f306 	lsl.w	r3, r1, r6
 8010cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8010cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8010cd6:	431f      	orrs	r7, r3
 8010cd8:	0c3b      	lsrs	r3, r7, #16
 8010cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8010cde:	fa1f f884 	uxth.w	r8, r4
 8010ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8010ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8010cea:	fb09 fa08 	mul.w	sl, r9, r8
 8010cee:	458a      	cmp	sl, r1
 8010cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8010cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8010cf8:	d908      	bls.n	8010d0c <__udivmoddi4+0x220>
 8010cfa:	1861      	adds	r1, r4, r1
 8010cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8010d00:	d248      	bcs.n	8010d94 <__udivmoddi4+0x2a8>
 8010d02:	458a      	cmp	sl, r1
 8010d04:	d946      	bls.n	8010d94 <__udivmoddi4+0x2a8>
 8010d06:	f1a9 0902 	sub.w	r9, r9, #2
 8010d0a:	4421      	add	r1, r4
 8010d0c:	eba1 010a 	sub.w	r1, r1, sl
 8010d10:	b2bf      	uxth	r7, r7
 8010d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8010d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8010d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8010d1e:	fb00 f808 	mul.w	r8, r0, r8
 8010d22:	45b8      	cmp	r8, r7
 8010d24:	d907      	bls.n	8010d36 <__udivmoddi4+0x24a>
 8010d26:	19e7      	adds	r7, r4, r7
 8010d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8010d2c:	d22e      	bcs.n	8010d8c <__udivmoddi4+0x2a0>
 8010d2e:	45b8      	cmp	r8, r7
 8010d30:	d92c      	bls.n	8010d8c <__udivmoddi4+0x2a0>
 8010d32:	3802      	subs	r0, #2
 8010d34:	4427      	add	r7, r4
 8010d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010d3a:	eba7 0708 	sub.w	r7, r7, r8
 8010d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8010d42:	454f      	cmp	r7, r9
 8010d44:	46c6      	mov	lr, r8
 8010d46:	4649      	mov	r1, r9
 8010d48:	d31a      	bcc.n	8010d80 <__udivmoddi4+0x294>
 8010d4a:	d017      	beq.n	8010d7c <__udivmoddi4+0x290>
 8010d4c:	b15d      	cbz	r5, 8010d66 <__udivmoddi4+0x27a>
 8010d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8010d52:	eb67 0701 	sbc.w	r7, r7, r1
 8010d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8010d5a:	40f2      	lsrs	r2, r6
 8010d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8010d60:	40f7      	lsrs	r7, r6
 8010d62:	e9c5 2700 	strd	r2, r7, [r5]
 8010d66:	2600      	movs	r6, #0
 8010d68:	4631      	mov	r1, r6
 8010d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d6e:	462e      	mov	r6, r5
 8010d70:	4628      	mov	r0, r5
 8010d72:	e70b      	b.n	8010b8c <__udivmoddi4+0xa0>
 8010d74:	4606      	mov	r6, r0
 8010d76:	e6e9      	b.n	8010b4c <__udivmoddi4+0x60>
 8010d78:	4618      	mov	r0, r3
 8010d7a:	e6fd      	b.n	8010b78 <__udivmoddi4+0x8c>
 8010d7c:	4543      	cmp	r3, r8
 8010d7e:	d2e5      	bcs.n	8010d4c <__udivmoddi4+0x260>
 8010d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8010d84:	eb69 0104 	sbc.w	r1, r9, r4
 8010d88:	3801      	subs	r0, #1
 8010d8a:	e7df      	b.n	8010d4c <__udivmoddi4+0x260>
 8010d8c:	4608      	mov	r0, r1
 8010d8e:	e7d2      	b.n	8010d36 <__udivmoddi4+0x24a>
 8010d90:	4660      	mov	r0, ip
 8010d92:	e78d      	b.n	8010cb0 <__udivmoddi4+0x1c4>
 8010d94:	4681      	mov	r9, r0
 8010d96:	e7b9      	b.n	8010d0c <__udivmoddi4+0x220>
 8010d98:	4666      	mov	r6, ip
 8010d9a:	e775      	b.n	8010c88 <__udivmoddi4+0x19c>
 8010d9c:	4630      	mov	r0, r6
 8010d9e:	e74a      	b.n	8010c36 <__udivmoddi4+0x14a>
 8010da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8010da4:	4439      	add	r1, r7
 8010da6:	e713      	b.n	8010bd0 <__udivmoddi4+0xe4>
 8010da8:	3802      	subs	r0, #2
 8010daa:	443c      	add	r4, r7
 8010dac:	e724      	b.n	8010bf8 <__udivmoddi4+0x10c>
 8010dae:	bf00      	nop

08010db0 <__aeabi_idiv0>:
 8010db0:	4770      	bx	lr
 8010db2:	bf00      	nop

08010db4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	60f8      	str	r0, [r7, #12]
 8010dbc:	60b9      	str	r1, [r7, #8]
 8010dbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	4a07      	ldr	r2, [pc, #28]	; (8010de0 <vApplicationGetIdleTaskMemory+0x2c>)
 8010dc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	4a06      	ldr	r2, [pc, #24]	; (8010de4 <vApplicationGetIdleTaskMemory+0x30>)
 8010dca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2280      	movs	r2, #128	; 0x80
 8010dd0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8010dd2:	bf00      	nop
 8010dd4:	3714      	adds	r7, #20
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	2000018c 	.word	0x2000018c
 8010de4:	200001e0 	.word	0x200001e0

08010de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010de8:	b5b0      	push	{r4, r5, r7, lr}
 8010dea:	b0a4      	sub	sp, #144	; 0x90
 8010dec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010dee:	f001 fa8b 	bl	8012308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010df2:	f000 f893 	bl	8010f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010df6:	f000 fc4b 	bl	8011690 <MX_GPIO_Init>
  MX_DMA_Init();
 8010dfa:	f000 fc29 	bl	8011650 <MX_DMA_Init>
  MX_ADC1_Init();
 8010dfe:	f000 f8ff 	bl	8011000 <MX_ADC1_Init>
  MX_I2C1_Init();
 8010e02:	f000 f97b 	bl	80110fc <MX_I2C1_Init>
  MX_SPI2_Init();
 8010e06:	f000 f9a7 	bl	8011158 <MX_SPI2_Init>
  MX_TIM2_Init();
 8010e0a:	f000 f9db 	bl	80111c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8010e0e:	f000 fa25 	bl	801125c <MX_TIM3_Init>
  MX_TIM4_Init();
 8010e12:	f000 fa71 	bl	80112f8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8010e16:	f000 fabd 	bl	8011394 <MX_TIM5_Init>
  MX_TIM8_Init();
 8010e1a:	f000 fb75 	bl	8011508 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8010e1e:	f000 fbed 	bl	80115fc <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8010e22:	f000 fb05 	bl	8011430 <MX_TIM6_Init>
  MX_TIM7_Init();
 8010e26:	f000 fb39 	bl	801149c <MX_TIM7_Init>
  MX_UART5_Init();
 8010e2a:	f000 fbbd 	bl	80115a8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  SM_ECUInit();
 8010e2e:	f00b fbc9 	bl	801c5c4 <SM_ECUInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8010e32:	4b30      	ldr	r3, [pc, #192]	; (8010ef4 <main+0x10c>)
 8010e34:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8010e38:	461d      	mov	r5, r3
 8010e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010e42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8010e46:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010e4a:	2100      	movs	r1, #0
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f00e f881 	bl	801ef54 <osThreadCreate>
 8010e52:	4603      	mov	r3, r0
 8010e54:	4a28      	ldr	r2, [pc, #160]	; (8010ef8 <main+0x110>)
 8010e56:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityHigh, 0, 512);
 8010e58:	4b28      	ldr	r3, [pc, #160]	; (8010efc <main+0x114>)
 8010e5a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8010e5e:	461d      	mov	r5, r3
 8010e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010e68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 8010e6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010e70:	2100      	movs	r1, #0
 8010e72:	4618      	mov	r0, r3
 8010e74:	f00e f86e 	bl	801ef54 <osThreadCreate>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	4a21      	ldr	r2, [pc, #132]	; (8010f00 <main+0x118>)
 8010e7c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task50ms */
  osThreadDef(Task50ms, Task_50ms, osPriorityHigh, 0, 512);
 8010e7e:	4b21      	ldr	r3, [pc, #132]	; (8010f04 <main+0x11c>)
 8010e80:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8010e84:	461d      	mov	r5, r3
 8010e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010e8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task50msHandle = osThreadCreate(osThread(Task50ms), NULL);
 8010e92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010e96:	2100      	movs	r1, #0
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f00e f85b 	bl	801ef54 <osThreadCreate>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	4a19      	ldr	r2, [pc, #100]	; (8010f08 <main+0x120>)
 8010ea2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskStateMachin */
  osThreadDef(TaskStateMachin, Task_StateMachine, osPriorityHigh, 0, 512);
 8010ea4:	4b19      	ldr	r3, [pc, #100]	; (8010f0c <main+0x124>)
 8010ea6:	f107 0420 	add.w	r4, r7, #32
 8010eaa:	461d      	mov	r5, r3
 8010eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010eb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010eb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskStateMachinHandle = osThreadCreate(osThread(TaskStateMachin), NULL);
 8010eb8:	f107 0320 	add.w	r3, r7, #32
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f00e f848 	bl	801ef54 <osThreadCreate>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	4a12      	ldr	r2, [pc, #72]	; (8010f10 <main+0x128>)
 8010ec8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDisplay */
  osThreadDef(TaskDisplay, Task_Display, osPriorityHigh, 0, 512);
 8010eca:	4b12      	ldr	r3, [pc, #72]	; (8010f14 <main+0x12c>)
 8010ecc:	1d3c      	adds	r4, r7, #4
 8010ece:	461d      	mov	r5, r3
 8010ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ed4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010ed8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDisplayHandle = osThreadCreate(osThread(TaskDisplay), NULL);
 8010edc:	1d3b      	adds	r3, r7, #4
 8010ede:	2100      	movs	r1, #0
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f00e f837 	bl	801ef54 <osThreadCreate>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	4a0b      	ldr	r2, [pc, #44]	; (8010f18 <main+0x130>)
 8010eea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8010eec:	f00e f82b 	bl	801ef46 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8010ef0:	e7fe      	b.n	8010ef0 <main+0x108>
 8010ef2:	bf00      	nop
 8010ef4:	08022d40 	.word	0x08022d40
 8010ef8:	200046ac 	.word	0x200046ac
 8010efc:	08022d5c 	.word	0x08022d5c
 8010f00:	20004358 	.word	0x20004358
 8010f04:	08022d78 	.word	0x08022d78
 8010f08:	200046b0 	.word	0x200046b0
 8010f0c:	08022d94 	.word	0x08022d94
 8010f10:	200043b8 	.word	0x200043b8
 8010f14:	08022db0 	.word	0x08022db0
 8010f18:	2000435c 	.word	0x2000435c

08010f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b094      	sub	sp, #80	; 0x50
 8010f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010f22:	f107 031c 	add.w	r3, r7, #28
 8010f26:	2234      	movs	r2, #52	; 0x34
 8010f28:	2100      	movs	r1, #0
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f00f fb6a 	bl	8020604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010f30:	f107 0308 	add.w	r3, r7, #8
 8010f34:	2200      	movs	r2, #0
 8010f36:	601a      	str	r2, [r3, #0]
 8010f38:	605a      	str	r2, [r3, #4]
 8010f3a:	609a      	str	r2, [r3, #8]
 8010f3c:	60da      	str	r2, [r3, #12]
 8010f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010f40:	2300      	movs	r3, #0
 8010f42:	607b      	str	r3, [r7, #4]
 8010f44:	4b2c      	ldr	r3, [pc, #176]	; (8010ff8 <SystemClock_Config+0xdc>)
 8010f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f48:	4a2b      	ldr	r2, [pc, #172]	; (8010ff8 <SystemClock_Config+0xdc>)
 8010f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8010f50:	4b29      	ldr	r3, [pc, #164]	; (8010ff8 <SystemClock_Config+0xdc>)
 8010f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010f58:	607b      	str	r3, [r7, #4]
 8010f5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	603b      	str	r3, [r7, #0]
 8010f60:	4b26      	ldr	r3, [pc, #152]	; (8010ffc <SystemClock_Config+0xe0>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4a25      	ldr	r2, [pc, #148]	; (8010ffc <SystemClock_Config+0xe0>)
 8010f66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010f6a:	6013      	str	r3, [r2, #0]
 8010f6c:	4b23      	ldr	r3, [pc, #140]	; (8010ffc <SystemClock_Config+0xe0>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010f74:	603b      	str	r3, [r7, #0]
 8010f76:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010f80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010f82:	2302      	movs	r3, #2
 8010f84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010f86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8010f8c:	2304      	movs	r3, #4
 8010f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8010f90:	23b4      	movs	r3, #180	; 0xb4
 8010f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010f94:	2302      	movs	r3, #2
 8010f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8010f98:	2302      	movs	r3, #2
 8010f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010fa0:	f107 031c 	add.w	r3, r7, #28
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f004 f983 	bl	80152b0 <HAL_RCC_OscConfig>
 8010faa:	4603      	mov	r3, r0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d001      	beq.n	8010fb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8010fb0:	f000 fd60 	bl	8011a74 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8010fb4:	f003 fe2e 	bl	8014c14 <HAL_PWREx_EnableOverDrive>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d001      	beq.n	8010fc2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8010fbe:	f000 fd59 	bl	8011a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010fc2:	230f      	movs	r3, #15
 8010fc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010fc6:	2302      	movs	r3, #2
 8010fc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010fce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010fd8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010fda:	f107 0308 	add.w	r3, r7, #8
 8010fde:	2105      	movs	r1, #5
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f003 fe67 	bl	8014cb4 <HAL_RCC_ClockConfig>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d001      	beq.n	8010ff0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8010fec:	f000 fd42 	bl	8011a74 <Error_Handler>
  }
}
 8010ff0:	bf00      	nop
 8010ff2:	3750      	adds	r7, #80	; 0x50
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	40023800 	.word	0x40023800
 8010ffc:	40007000 	.word	0x40007000

08011000 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8011006:	463b      	mov	r3, r7
 8011008:	2200      	movs	r2, #0
 801100a:	601a      	str	r2, [r3, #0]
 801100c:	605a      	str	r2, [r3, #4]
 801100e:	609a      	str	r2, [r3, #8]
 8011010:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8011012:	4b38      	ldr	r3, [pc, #224]	; (80110f4 <MX_ADC1_Init+0xf4>)
 8011014:	4a38      	ldr	r2, [pc, #224]	; (80110f8 <MX_ADC1_Init+0xf8>)
 8011016:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8011018:	4b36      	ldr	r3, [pc, #216]	; (80110f4 <MX_ADC1_Init+0xf4>)
 801101a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801101e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8011020:	4b34      	ldr	r3, [pc, #208]	; (80110f4 <MX_ADC1_Init+0xf4>)
 8011022:	2200      	movs	r2, #0
 8011024:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8011026:	4b33      	ldr	r3, [pc, #204]	; (80110f4 <MX_ADC1_Init+0xf4>)
 8011028:	2201      	movs	r2, #1
 801102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 801102c:	4b31      	ldr	r3, [pc, #196]	; (80110f4 <MX_ADC1_Init+0xf4>)
 801102e:	2200      	movs	r2, #0
 8011030:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8011032:	4b30      	ldr	r3, [pc, #192]	; (80110f4 <MX_ADC1_Init+0xf4>)
 8011034:	2200      	movs	r2, #0
 8011036:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801103a:	4b2e      	ldr	r3, [pc, #184]	; (80110f4 <MX_ADC1_Init+0xf4>)
 801103c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011040:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8011042:	4b2c      	ldr	r3, [pc, #176]	; (80110f4 <MX_ADC1_Init+0xf4>)
 8011044:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8011048:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801104a:	4b2a      	ldr	r3, [pc, #168]	; (80110f4 <MX_ADC1_Init+0xf4>)
 801104c:	2200      	movs	r2, #0
 801104e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8011050:	4b28      	ldr	r3, [pc, #160]	; (80110f4 <MX_ADC1_Init+0xf4>)
 8011052:	2204      	movs	r2, #4
 8011054:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8011056:	4b27      	ldr	r3, [pc, #156]	; (80110f4 <MX_ADC1_Init+0xf4>)
 8011058:	2201      	movs	r2, #1
 801105a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801105e:	4b25      	ldr	r3, [pc, #148]	; (80110f4 <MX_ADC1_Init+0xf4>)
 8011060:	2201      	movs	r2, #1
 8011062:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011064:	4823      	ldr	r0, [pc, #140]	; (80110f4 <MX_ADC1_Init+0xf4>)
 8011066:	f001 f9b5 	bl	80123d4 <HAL_ADC_Init>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d001      	beq.n	8011074 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8011070:	f000 fd00 	bl	8011a74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8011074:	2300      	movs	r3, #0
 8011076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8011078:	2301      	movs	r3, #1
 801107a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 801107c:	2300      	movs	r3, #0
 801107e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011080:	463b      	mov	r3, r7
 8011082:	4619      	mov	r1, r3
 8011084:	481b      	ldr	r0, [pc, #108]	; (80110f4 <MX_ADC1_Init+0xf4>)
 8011086:	f001 fb0d 	bl	80126a4 <HAL_ADC_ConfigChannel>
 801108a:	4603      	mov	r3, r0
 801108c:	2b00      	cmp	r3, #0
 801108e:	d001      	beq.n	8011094 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8011090:	f000 fcf0 	bl	8011a74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8011094:	2301      	movs	r3, #1
 8011096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8011098:	2302      	movs	r3, #2
 801109a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 801109c:	2301      	movs	r3, #1
 801109e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80110a0:	463b      	mov	r3, r7
 80110a2:	4619      	mov	r1, r3
 80110a4:	4813      	ldr	r0, [pc, #76]	; (80110f4 <MX_ADC1_Init+0xf4>)
 80110a6:	f001 fafd 	bl	80126a4 <HAL_ADC_ConfigChannel>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d001      	beq.n	80110b4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80110b0:	f000 fce0 	bl	8011a74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80110b4:	2302      	movs	r3, #2
 80110b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80110b8:	2303      	movs	r3, #3
 80110ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80110bc:	463b      	mov	r3, r7
 80110be:	4619      	mov	r1, r3
 80110c0:	480c      	ldr	r0, [pc, #48]	; (80110f4 <MX_ADC1_Init+0xf4>)
 80110c2:	f001 faef 	bl	80126a4 <HAL_ADC_ConfigChannel>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d001      	beq.n	80110d0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80110cc:	f000 fcd2 	bl	8011a74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80110d0:	2303      	movs	r3, #3
 80110d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80110d4:	2304      	movs	r3, #4
 80110d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80110d8:	463b      	mov	r3, r7
 80110da:	4619      	mov	r1, r3
 80110dc:	4805      	ldr	r0, [pc, #20]	; (80110f4 <MX_ADC1_Init+0xf4>)
 80110de:	f001 fae1 	bl	80126a4 <HAL_ADC_ConfigChannel>
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d001      	beq.n	80110ec <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80110e8:	f000 fcc4 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80110ec:	bf00      	nop
 80110ee:	3710      	adds	r7, #16
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	200044b8 	.word	0x200044b8
 80110f8:	40012000 	.word	0x40012000

080110fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011100:	4b13      	ldr	r3, [pc, #76]	; (8011150 <MX_I2C1_Init+0x54>)
 8011102:	4a14      	ldr	r2, [pc, #80]	; (8011154 <MX_I2C1_Init+0x58>)
 8011104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8011106:	4b12      	ldr	r3, [pc, #72]	; (8011150 <MX_I2C1_Init+0x54>)
 8011108:	f24c 3250 	movw	r2, #50000	; 0xc350
 801110c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801110e:	4b10      	ldr	r3, [pc, #64]	; (8011150 <MX_I2C1_Init+0x54>)
 8011110:	2200      	movs	r2, #0
 8011112:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011114:	4b0e      	ldr	r3, [pc, #56]	; (8011150 <MX_I2C1_Init+0x54>)
 8011116:	2200      	movs	r2, #0
 8011118:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801111a:	4b0d      	ldr	r3, [pc, #52]	; (8011150 <MX_I2C1_Init+0x54>)
 801111c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011120:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011122:	4b0b      	ldr	r3, [pc, #44]	; (8011150 <MX_I2C1_Init+0x54>)
 8011124:	2200      	movs	r2, #0
 8011126:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011128:	4b09      	ldr	r3, [pc, #36]	; (8011150 <MX_I2C1_Init+0x54>)
 801112a:	2200      	movs	r2, #0
 801112c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801112e:	4b08      	ldr	r3, [pc, #32]	; (8011150 <MX_I2C1_Init+0x54>)
 8011130:	2200      	movs	r2, #0
 8011132:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011134:	4b06      	ldr	r3, [pc, #24]	; (8011150 <MX_I2C1_Init+0x54>)
 8011136:	2200      	movs	r2, #0
 8011138:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801113a:	4805      	ldr	r0, [pc, #20]	; (8011150 <MX_I2C1_Init+0x54>)
 801113c:	f002 fdaa 	bl	8013c94 <HAL_I2C_Init>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d001      	beq.n	801114a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8011146:	f000 fc95 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801114a:	bf00      	nop
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	200043bc 	.word	0x200043bc
 8011154:	40005400 	.word	0x40005400

08011158 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 801115c:	4b17      	ldr	r3, [pc, #92]	; (80111bc <MX_SPI2_Init+0x64>)
 801115e:	4a18      	ldr	r2, [pc, #96]	; (80111c0 <MX_SPI2_Init+0x68>)
 8011160:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011162:	4b16      	ldr	r3, [pc, #88]	; (80111bc <MX_SPI2_Init+0x64>)
 8011164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011168:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801116a:	4b14      	ldr	r3, [pc, #80]	; (80111bc <MX_SPI2_Init+0x64>)
 801116c:	2200      	movs	r2, #0
 801116e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8011170:	4b12      	ldr	r3, [pc, #72]	; (80111bc <MX_SPI2_Init+0x64>)
 8011172:	2200      	movs	r2, #0
 8011174:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011176:	4b11      	ldr	r3, [pc, #68]	; (80111bc <MX_SPI2_Init+0x64>)
 8011178:	2200      	movs	r2, #0
 801117a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801117c:	4b0f      	ldr	r3, [pc, #60]	; (80111bc <MX_SPI2_Init+0x64>)
 801117e:	2200      	movs	r2, #0
 8011180:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011182:	4b0e      	ldr	r3, [pc, #56]	; (80111bc <MX_SPI2_Init+0x64>)
 8011184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011188:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 801118a:	4b0c      	ldr	r3, [pc, #48]	; (80111bc <MX_SPI2_Init+0x64>)
 801118c:	2228      	movs	r2, #40	; 0x28
 801118e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011190:	4b0a      	ldr	r3, [pc, #40]	; (80111bc <MX_SPI2_Init+0x64>)
 8011192:	2200      	movs	r2, #0
 8011194:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011196:	4b09      	ldr	r3, [pc, #36]	; (80111bc <MX_SPI2_Init+0x64>)
 8011198:	2200      	movs	r2, #0
 801119a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801119c:	4b07      	ldr	r3, [pc, #28]	; (80111bc <MX_SPI2_Init+0x64>)
 801119e:	2200      	movs	r2, #0
 80111a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80111a2:	4b06      	ldr	r3, [pc, #24]	; (80111bc <MX_SPI2_Init+0x64>)
 80111a4:	220a      	movs	r2, #10
 80111a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80111a8:	4804      	ldr	r0, [pc, #16]	; (80111bc <MX_SPI2_Init+0x64>)
 80111aa:	f004 fb1f 	bl	80157ec <HAL_SPI_Init>
 80111ae:	4603      	mov	r3, r0
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d001      	beq.n	80111b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80111b4:	f000 fc5e 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80111b8:	bf00      	nop
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	20004360 	.word	0x20004360
 80111c0:	40003800 	.word	0x40003800

080111c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b086      	sub	sp, #24
 80111c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80111ca:	f107 0308 	add.w	r3, r7, #8
 80111ce:	2200      	movs	r2, #0
 80111d0:	601a      	str	r2, [r3, #0]
 80111d2:	605a      	str	r2, [r3, #4]
 80111d4:	609a      	str	r2, [r3, #8]
 80111d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80111d8:	463b      	mov	r3, r7
 80111da:	2200      	movs	r2, #0
 80111dc:	601a      	str	r2, [r3, #0]
 80111de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80111e0:	4b1d      	ldr	r3, [pc, #116]	; (8011258 <MX_TIM2_Init+0x94>)
 80111e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80111e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80111e8:	4b1b      	ldr	r3, [pc, #108]	; (8011258 <MX_TIM2_Init+0x94>)
 80111ea:	2203      	movs	r2, #3
 80111ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80111ee:	4b1a      	ldr	r3, [pc, #104]	; (8011258 <MX_TIM2_Init+0x94>)
 80111f0:	2200      	movs	r2, #0
 80111f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2250;
 80111f4:	4b18      	ldr	r3, [pc, #96]	; (8011258 <MX_TIM2_Init+0x94>)
 80111f6:	f640 02ca 	movw	r2, #2250	; 0x8ca
 80111fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80111fc:	4b16      	ldr	r3, [pc, #88]	; (8011258 <MX_TIM2_Init+0x94>)
 80111fe:	2200      	movs	r2, #0
 8011200:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011202:	4b15      	ldr	r3, [pc, #84]	; (8011258 <MX_TIM2_Init+0x94>)
 8011204:	2200      	movs	r2, #0
 8011206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8011208:	4813      	ldr	r0, [pc, #76]	; (8011258 <MX_TIM2_Init+0x94>)
 801120a:	f004 fd7f 	bl	8015d0c <HAL_TIM_Base_Init>
 801120e:	4603      	mov	r3, r0
 8011210:	2b00      	cmp	r3, #0
 8011212:	d001      	beq.n	8011218 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8011214:	f000 fc2e 	bl	8011a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801121c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801121e:	f107 0308 	add.w	r3, r7, #8
 8011222:	4619      	mov	r1, r3
 8011224:	480c      	ldr	r0, [pc, #48]	; (8011258 <MX_TIM2_Init+0x94>)
 8011226:	f004 ffa1 	bl	801616c <HAL_TIM_ConfigClockSource>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d001      	beq.n	8011234 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8011230:	f000 fc20 	bl	8011a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011234:	2320      	movs	r3, #32
 8011236:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011238:	2300      	movs	r3, #0
 801123a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801123c:	463b      	mov	r3, r7
 801123e:	4619      	mov	r1, r3
 8011240:	4805      	ldr	r0, [pc, #20]	; (8011258 <MX_TIM2_Init+0x94>)
 8011242:	f005 f9bd 	bl	80165c0 <HAL_TIMEx_MasterConfigSynchronization>
 8011246:	4603      	mov	r3, r0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d001      	beq.n	8011250 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 801124c:	f000 fc12 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8011250:	bf00      	nop
 8011252:	3718      	adds	r7, #24
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	2000461c 	.word	0x2000461c

0801125c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b086      	sub	sp, #24
 8011260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011262:	f107 0308 	add.w	r3, r7, #8
 8011266:	2200      	movs	r2, #0
 8011268:	601a      	str	r2, [r3, #0]
 801126a:	605a      	str	r2, [r3, #4]
 801126c:	609a      	str	r2, [r3, #8]
 801126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011270:	463b      	mov	r3, r7
 8011272:	2200      	movs	r2, #0
 8011274:	601a      	str	r2, [r3, #0]
 8011276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8011278:	4b1d      	ldr	r3, [pc, #116]	; (80112f0 <MX_TIM3_Init+0x94>)
 801127a:	4a1e      	ldr	r2, [pc, #120]	; (80112f4 <MX_TIM3_Init+0x98>)
 801127c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 801127e:	4b1c      	ldr	r3, [pc, #112]	; (80112f0 <MX_TIM3_Init+0x94>)
 8011280:	2201      	movs	r2, #1
 8011282:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011284:	4b1a      	ldr	r3, [pc, #104]	; (80112f0 <MX_TIM3_Init+0x94>)
 8011286:	2200      	movs	r2, #0
 8011288:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 45000;
 801128a:	4b19      	ldr	r3, [pc, #100]	; (80112f0 <MX_TIM3_Init+0x94>)
 801128c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8011290:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011292:	4b17      	ldr	r3, [pc, #92]	; (80112f0 <MX_TIM3_Init+0x94>)
 8011294:	2200      	movs	r2, #0
 8011296:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011298:	4b15      	ldr	r3, [pc, #84]	; (80112f0 <MX_TIM3_Init+0x94>)
 801129a:	2200      	movs	r2, #0
 801129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801129e:	4814      	ldr	r0, [pc, #80]	; (80112f0 <MX_TIM3_Init+0x94>)
 80112a0:	f004 fd34 	bl	8015d0c <HAL_TIM_Base_Init>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d001      	beq.n	80112ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80112aa:	f000 fbe3 	bl	8011a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80112ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80112b4:	f107 0308 	add.w	r3, r7, #8
 80112b8:	4619      	mov	r1, r3
 80112ba:	480d      	ldr	r0, [pc, #52]	; (80112f0 <MX_TIM3_Init+0x94>)
 80112bc:	f004 ff56 	bl	801616c <HAL_TIM_ConfigClockSource>
 80112c0:	4603      	mov	r3, r0
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d001      	beq.n	80112ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80112c6:	f000 fbd5 	bl	8011a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80112ca:	2300      	movs	r3, #0
 80112cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80112ce:	2300      	movs	r3, #0
 80112d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80112d2:	463b      	mov	r3, r7
 80112d4:	4619      	mov	r1, r3
 80112d6:	4806      	ldr	r0, [pc, #24]	; (80112f0 <MX_TIM3_Init+0x94>)
 80112d8:	f005 f972 	bl	80165c0 <HAL_TIMEx_MasterConfigSynchronization>
 80112dc:	4603      	mov	r3, r0
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d001      	beq.n	80112e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80112e2:	f000 fbc7 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80112e6:	bf00      	nop
 80112e8:	3718      	adds	r7, #24
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop
 80112f0:	20004664 	.word	0x20004664
 80112f4:	40000400 	.word	0x40000400

080112f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b086      	sub	sp, #24
 80112fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80112fe:	f107 0308 	add.w	r3, r7, #8
 8011302:	2200      	movs	r2, #0
 8011304:	601a      	str	r2, [r3, #0]
 8011306:	605a      	str	r2, [r3, #4]
 8011308:	609a      	str	r2, [r3, #8]
 801130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801130c:	463b      	mov	r3, r7
 801130e:	2200      	movs	r2, #0
 8011310:	601a      	str	r2, [r3, #0]
 8011312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8011314:	4b1d      	ldr	r3, [pc, #116]	; (801138c <MX_TIM4_Init+0x94>)
 8011316:	4a1e      	ldr	r2, [pc, #120]	; (8011390 <MX_TIM4_Init+0x98>)
 8011318:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 801131a:	4b1c      	ldr	r3, [pc, #112]	; (801138c <MX_TIM4_Init+0x94>)
 801131c:	224f      	movs	r2, #79	; 0x4f
 801131e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011320:	4b1a      	ldr	r3, [pc, #104]	; (801138c <MX_TIM4_Init+0x94>)
 8011322:	2200      	movs	r2, #0
 8011324:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8011326:	4b19      	ldr	r3, [pc, #100]	; (801138c <MX_TIM4_Init+0x94>)
 8011328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801132c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801132e:	4b17      	ldr	r3, [pc, #92]	; (801138c <MX_TIM4_Init+0x94>)
 8011330:	2200      	movs	r2, #0
 8011332:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011334:	4b15      	ldr	r3, [pc, #84]	; (801138c <MX_TIM4_Init+0x94>)
 8011336:	2200      	movs	r2, #0
 8011338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801133a:	4814      	ldr	r0, [pc, #80]	; (801138c <MX_TIM4_Init+0x94>)
 801133c:	f004 fce6 	bl	8015d0c <HAL_TIM_Base_Init>
 8011340:	4603      	mov	r3, r0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8011346:	f000 fb95 	bl	8011a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801134e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8011350:	f107 0308 	add.w	r3, r7, #8
 8011354:	4619      	mov	r1, r3
 8011356:	480d      	ldr	r0, [pc, #52]	; (801138c <MX_TIM4_Init+0x94>)
 8011358:	f004 ff08 	bl	801616c <HAL_TIM_ConfigClockSource>
 801135c:	4603      	mov	r3, r0
 801135e:	2b00      	cmp	r3, #0
 8011360:	d001      	beq.n	8011366 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8011362:	f000 fb87 	bl	8011a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011366:	2300      	movs	r3, #0
 8011368:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801136a:	2300      	movs	r3, #0
 801136c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 801136e:	463b      	mov	r3, r7
 8011370:	4619      	mov	r1, r3
 8011372:	4806      	ldr	r0, [pc, #24]	; (801138c <MX_TIM4_Init+0x94>)
 8011374:	f005 f924 	bl	80165c0 <HAL_TIMEx_MasterConfigSynchronization>
 8011378:	4603      	mov	r3, r0
 801137a:	2b00      	cmp	r3, #0
 801137c:	d001      	beq.n	8011382 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 801137e:	f000 fb79 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8011382:	bf00      	nop
 8011384:	3718      	adds	r7, #24
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	2000458c 	.word	0x2000458c
 8011390:	40000800 	.word	0x40000800

08011394 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b086      	sub	sp, #24
 8011398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801139a:	f107 0308 	add.w	r3, r7, #8
 801139e:	2200      	movs	r2, #0
 80113a0:	601a      	str	r2, [r3, #0]
 80113a2:	605a      	str	r2, [r3, #4]
 80113a4:	609a      	str	r2, [r3, #8]
 80113a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80113a8:	463b      	mov	r3, r7
 80113aa:	2200      	movs	r2, #0
 80113ac:	601a      	str	r2, [r3, #0]
 80113ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80113b0:	4b1d      	ldr	r3, [pc, #116]	; (8011428 <MX_TIM5_Init+0x94>)
 80113b2:	4a1e      	ldr	r2, [pc, #120]	; (801142c <MX_TIM5_Init+0x98>)
 80113b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 89;
 80113b6:	4b1c      	ldr	r3, [pc, #112]	; (8011428 <MX_TIM5_Init+0x94>)
 80113b8:	2259      	movs	r2, #89	; 0x59
 80113ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80113bc:	4b1a      	ldr	r3, [pc, #104]	; (8011428 <MX_TIM5_Init+0x94>)
 80113be:	2200      	movs	r2, #0
 80113c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80113c2:	4b19      	ldr	r3, [pc, #100]	; (8011428 <MX_TIM5_Init+0x94>)
 80113c4:	f04f 32ff 	mov.w	r2, #4294967295
 80113c8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80113ca:	4b17      	ldr	r3, [pc, #92]	; (8011428 <MX_TIM5_Init+0x94>)
 80113cc:	2200      	movs	r2, #0
 80113ce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80113d0:	4b15      	ldr	r3, [pc, #84]	; (8011428 <MX_TIM5_Init+0x94>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80113d6:	4814      	ldr	r0, [pc, #80]	; (8011428 <MX_TIM5_Init+0x94>)
 80113d8:	f004 fc98 	bl	8015d0c <HAL_TIM_Base_Init>
 80113dc:	4603      	mov	r3, r0
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d001      	beq.n	80113e6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80113e2:	f000 fb47 	bl	8011a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80113e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80113ec:	f107 0308 	add.w	r3, r7, #8
 80113f0:	4619      	mov	r1, r3
 80113f2:	480d      	ldr	r0, [pc, #52]	; (8011428 <MX_TIM5_Init+0x94>)
 80113f4:	f004 feba 	bl	801616c <HAL_TIM_ConfigClockSource>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d001      	beq.n	8011402 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80113fe:	f000 fb39 	bl	8011a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011402:	2300      	movs	r3, #0
 8011404:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011406:	2300      	movs	r3, #0
 8011408:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801140a:	463b      	mov	r3, r7
 801140c:	4619      	mov	r1, r3
 801140e:	4806      	ldr	r0, [pc, #24]	; (8011428 <MX_TIM5_Init+0x94>)
 8011410:	f005 f8d6 	bl	80165c0 <HAL_TIMEx_MasterConfigSynchronization>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	d001      	beq.n	801141e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 801141a:	f000 fb2b 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 801141e:	bf00      	nop
 8011420:	3718      	adds	r7, #24
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
 8011426:	bf00      	nop
 8011428:	200045d4 	.word	0x200045d4
 801142c:	40000c00 	.word	0x40000c00

08011430 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011436:	463b      	mov	r3, r7
 8011438:	2200      	movs	r2, #0
 801143a:	601a      	str	r2, [r3, #0]
 801143c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 801143e:	4b15      	ldr	r3, [pc, #84]	; (8011494 <MX_TIM6_Init+0x64>)
 8011440:	4a15      	ldr	r2, [pc, #84]	; (8011498 <MX_TIM6_Init+0x68>)
 8011442:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8011444:	4b13      	ldr	r3, [pc, #76]	; (8011494 <MX_TIM6_Init+0x64>)
 8011446:	2259      	movs	r2, #89	; 0x59
 8011448:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801144a:	4b12      	ldr	r3, [pc, #72]	; (8011494 <MX_TIM6_Init+0x64>)
 801144c:	2200      	movs	r2, #0
 801144e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8011450:	4b10      	ldr	r3, [pc, #64]	; (8011494 <MX_TIM6_Init+0x64>)
 8011452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011456:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011458:	4b0e      	ldr	r3, [pc, #56]	; (8011494 <MX_TIM6_Init+0x64>)
 801145a:	2200      	movs	r2, #0
 801145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801145e:	480d      	ldr	r0, [pc, #52]	; (8011494 <MX_TIM6_Init+0x64>)
 8011460:	f004 fc54 	bl	8015d0c <HAL_TIM_Base_Init>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d001      	beq.n	801146e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 801146a:	f000 fb03 	bl	8011a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801146e:	2300      	movs	r3, #0
 8011470:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011472:	2300      	movs	r3, #0
 8011474:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8011476:	463b      	mov	r3, r7
 8011478:	4619      	mov	r1, r3
 801147a:	4806      	ldr	r0, [pc, #24]	; (8011494 <MX_TIM6_Init+0x64>)
 801147c:	f005 f8a0 	bl	80165c0 <HAL_TIMEx_MasterConfigSynchronization>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d001      	beq.n	801148a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8011486:	f000 faf5 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 801148a:	bf00      	nop
 801148c:	3708      	adds	r7, #8
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	20004544 	.word	0x20004544
 8011498:	40001000 	.word	0x40001000

0801149c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80114a2:	463b      	mov	r3, r7
 80114a4:	2200      	movs	r2, #0
 80114a6:	601a      	str	r2, [r3, #0]
 80114a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80114aa:	4b15      	ldr	r3, [pc, #84]	; (8011500 <MX_TIM7_Init+0x64>)
 80114ac:	4a15      	ldr	r2, [pc, #84]	; (8011504 <MX_TIM7_Init+0x68>)
 80114ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 80114b0:	4b13      	ldr	r3, [pc, #76]	; (8011500 <MX_TIM7_Init+0x64>)
 80114b2:	2259      	movs	r2, #89	; 0x59
 80114b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80114b6:	4b12      	ldr	r3, [pc, #72]	; (8011500 <MX_TIM7_Init+0x64>)
 80114b8:	2200      	movs	r2, #0
 80114ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80114bc:	4b10      	ldr	r3, [pc, #64]	; (8011500 <MX_TIM7_Init+0x64>)
 80114be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114c2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80114c4:	4b0e      	ldr	r3, [pc, #56]	; (8011500 <MX_TIM7_Init+0x64>)
 80114c6:	2200      	movs	r2, #0
 80114c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80114ca:	480d      	ldr	r0, [pc, #52]	; (8011500 <MX_TIM7_Init+0x64>)
 80114cc:	f004 fc1e 	bl	8015d0c <HAL_TIM_Base_Init>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d001      	beq.n	80114da <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80114d6:	f000 facd 	bl	8011a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80114da:	2300      	movs	r3, #0
 80114dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80114de:	2300      	movs	r3, #0
 80114e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80114e2:	463b      	mov	r3, r7
 80114e4:	4619      	mov	r1, r3
 80114e6:	4806      	ldr	r0, [pc, #24]	; (8011500 <MX_TIM7_Init+0x64>)
 80114e8:	f005 f86a 	bl	80165c0 <HAL_TIMEx_MasterConfigSynchronization>
 80114ec:	4603      	mov	r3, r0
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d001      	beq.n	80114f6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80114f2:	f000 fabf 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80114f6:	bf00      	nop
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	200046b4 	.word	0x200046b4
 8011504:	40001400 	.word	0x40001400

08011508 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b086      	sub	sp, #24
 801150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801150e:	f107 0308 	add.w	r3, r7, #8
 8011512:	2200      	movs	r2, #0
 8011514:	601a      	str	r2, [r3, #0]
 8011516:	605a      	str	r2, [r3, #4]
 8011518:	609a      	str	r2, [r3, #8]
 801151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801151c:	463b      	mov	r3, r7
 801151e:	2200      	movs	r2, #0
 8011520:	601a      	str	r2, [r3, #0]
 8011522:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8011524:	4b1e      	ldr	r3, [pc, #120]	; (80115a0 <MX_TIM8_Init+0x98>)
 8011526:	4a1f      	ldr	r2, [pc, #124]	; (80115a4 <MX_TIM8_Init+0x9c>)
 8011528:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 801152a:	4b1d      	ldr	r3, [pc, #116]	; (80115a0 <MX_TIM8_Init+0x98>)
 801152c:	22b3      	movs	r2, #179	; 0xb3
 801152e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011530:	4b1b      	ldr	r3, [pc, #108]	; (80115a0 <MX_TIM8_Init+0x98>)
 8011532:	2200      	movs	r2, #0
 8011534:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8011536:	4b1a      	ldr	r3, [pc, #104]	; (80115a0 <MX_TIM8_Init+0x98>)
 8011538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801153c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801153e:	4b18      	ldr	r3, [pc, #96]	; (80115a0 <MX_TIM8_Init+0x98>)
 8011540:	2200      	movs	r2, #0
 8011542:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8011544:	4b16      	ldr	r3, [pc, #88]	; (80115a0 <MX_TIM8_Init+0x98>)
 8011546:	2200      	movs	r2, #0
 8011548:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801154a:	4b15      	ldr	r3, [pc, #84]	; (80115a0 <MX_TIM8_Init+0x98>)
 801154c:	2200      	movs	r2, #0
 801154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8011550:	4813      	ldr	r0, [pc, #76]	; (80115a0 <MX_TIM8_Init+0x98>)
 8011552:	f004 fbdb 	bl	8015d0c <HAL_TIM_Base_Init>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d001      	beq.n	8011560 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 801155c:	f000 fa8a 	bl	8011a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011564:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8011566:	f107 0308 	add.w	r3, r7, #8
 801156a:	4619      	mov	r1, r3
 801156c:	480c      	ldr	r0, [pc, #48]	; (80115a0 <MX_TIM8_Init+0x98>)
 801156e:	f004 fdfd 	bl	801616c <HAL_TIM_ConfigClockSource>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d001      	beq.n	801157c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8011578:	f000 fa7c 	bl	8011a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801157c:	2300      	movs	r3, #0
 801157e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011580:	2300      	movs	r3, #0
 8011582:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8011584:	463b      	mov	r3, r7
 8011586:	4619      	mov	r1, r3
 8011588:	4805      	ldr	r0, [pc, #20]	; (80115a0 <MX_TIM8_Init+0x98>)
 801158a:	f005 f819 	bl	80165c0 <HAL_TIMEx_MasterConfigSynchronization>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d001      	beq.n	8011598 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8011594:	f000 fa6e 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8011598:	bf00      	nop
 801159a:	3718      	adds	r7, #24
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	200046fc 	.word	0x200046fc
 80115a4:	40010400 	.word	0x40010400

080115a8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80115ac:	4b11      	ldr	r3, [pc, #68]	; (80115f4 <MX_UART5_Init+0x4c>)
 80115ae:	4a12      	ldr	r2, [pc, #72]	; (80115f8 <MX_UART5_Init+0x50>)
 80115b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80115b2:	4b10      	ldr	r3, [pc, #64]	; (80115f4 <MX_UART5_Init+0x4c>)
 80115b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80115b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80115ba:	4b0e      	ldr	r3, [pc, #56]	; (80115f4 <MX_UART5_Init+0x4c>)
 80115bc:	2200      	movs	r2, #0
 80115be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80115c0:	4b0c      	ldr	r3, [pc, #48]	; (80115f4 <MX_UART5_Init+0x4c>)
 80115c2:	2200      	movs	r2, #0
 80115c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80115c6:	4b0b      	ldr	r3, [pc, #44]	; (80115f4 <MX_UART5_Init+0x4c>)
 80115c8:	2200      	movs	r2, #0
 80115ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80115cc:	4b09      	ldr	r3, [pc, #36]	; (80115f4 <MX_UART5_Init+0x4c>)
 80115ce:	220c      	movs	r2, #12
 80115d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80115d2:	4b08      	ldr	r3, [pc, #32]	; (80115f4 <MX_UART5_Init+0x4c>)
 80115d4:	2200      	movs	r2, #0
 80115d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80115d8:	4b06      	ldr	r3, [pc, #24]	; (80115f4 <MX_UART5_Init+0x4c>)
 80115da:	2200      	movs	r2, #0
 80115dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80115de:	4805      	ldr	r0, [pc, #20]	; (80115f4 <MX_UART5_Init+0x4c>)
 80115e0:	f005 f87e 	bl	80166e0 <HAL_UART_Init>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d001      	beq.n	80115ee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80115ea:	f000 fa43 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80115ee:	bf00      	nop
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	20004500 	.word	0x20004500
 80115f8:	40005000 	.word	0x40005000

080115fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8011600:	4b11      	ldr	r3, [pc, #68]	; (8011648 <MX_USART1_UART_Init+0x4c>)
 8011602:	4a12      	ldr	r2, [pc, #72]	; (801164c <MX_USART1_UART_Init+0x50>)
 8011604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011606:	4b10      	ldr	r3, [pc, #64]	; (8011648 <MX_USART1_UART_Init+0x4c>)
 8011608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801160c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801160e:	4b0e      	ldr	r3, [pc, #56]	; (8011648 <MX_USART1_UART_Init+0x4c>)
 8011610:	2200      	movs	r2, #0
 8011612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011614:	4b0c      	ldr	r3, [pc, #48]	; (8011648 <MX_USART1_UART_Init+0x4c>)
 8011616:	2200      	movs	r2, #0
 8011618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801161a:	4b0b      	ldr	r3, [pc, #44]	; (8011648 <MX_USART1_UART_Init+0x4c>)
 801161c:	2200      	movs	r2, #0
 801161e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011620:	4b09      	ldr	r3, [pc, #36]	; (8011648 <MX_USART1_UART_Init+0x4c>)
 8011622:	220c      	movs	r2, #12
 8011624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011626:	4b08      	ldr	r3, [pc, #32]	; (8011648 <MX_USART1_UART_Init+0x4c>)
 8011628:	2200      	movs	r2, #0
 801162a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801162c:	4b06      	ldr	r3, [pc, #24]	; (8011648 <MX_USART1_UART_Init+0x4c>)
 801162e:	2200      	movs	r2, #0
 8011630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8011632:	4805      	ldr	r0, [pc, #20]	; (8011648 <MX_USART1_UART_Init+0x4c>)
 8011634:	f005 f854 	bl	80166e0 <HAL_UART_Init>
 8011638:	4603      	mov	r3, r0
 801163a:	2b00      	cmp	r3, #0
 801163c:	d001      	beq.n	8011642 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 801163e:	f000 fa19 	bl	8011a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8011642:	bf00      	nop
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	20004470 	.word	0x20004470
 801164c:	40011000 	.word	0x40011000

08011650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8011656:	2300      	movs	r3, #0
 8011658:	607b      	str	r3, [r7, #4]
 801165a:	4b0c      	ldr	r3, [pc, #48]	; (801168c <MX_DMA_Init+0x3c>)
 801165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801165e:	4a0b      	ldr	r2, [pc, #44]	; (801168c <MX_DMA_Init+0x3c>)
 8011660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011664:	6313      	str	r3, [r2, #48]	; 0x30
 8011666:	4b09      	ldr	r3, [pc, #36]	; (801168c <MX_DMA_Init+0x3c>)
 8011668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801166e:	607b      	str	r3, [r7, #4]
 8011670:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8011672:	2200      	movs	r2, #0
 8011674:	2105      	movs	r1, #5
 8011676:	2038      	movs	r0, #56	; 0x38
 8011678:	f001 fb7c 	bl	8012d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 801167c:	2038      	movs	r0, #56	; 0x38
 801167e:	f001 fb95 	bl	8012dac <HAL_NVIC_EnableIRQ>

}
 8011682:	bf00      	nop
 8011684:	3708      	adds	r7, #8
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	40023800 	.word	0x40023800

08011690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b08a      	sub	sp, #40	; 0x28
 8011694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011696:	f107 0314 	add.w	r3, r7, #20
 801169a:	2200      	movs	r2, #0
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	605a      	str	r2, [r3, #4]
 80116a0:	609a      	str	r2, [r3, #8]
 80116a2:	60da      	str	r2, [r3, #12]
 80116a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80116a6:	2300      	movs	r3, #0
 80116a8:	613b      	str	r3, [r7, #16]
 80116aa:	4b69      	ldr	r3, [pc, #420]	; (8011850 <MX_GPIO_Init+0x1c0>)
 80116ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ae:	4a68      	ldr	r2, [pc, #416]	; (8011850 <MX_GPIO_Init+0x1c0>)
 80116b0:	f043 0304 	orr.w	r3, r3, #4
 80116b4:	6313      	str	r3, [r2, #48]	; 0x30
 80116b6:	4b66      	ldr	r3, [pc, #408]	; (8011850 <MX_GPIO_Init+0x1c0>)
 80116b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ba:	f003 0304 	and.w	r3, r3, #4
 80116be:	613b      	str	r3, [r7, #16]
 80116c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80116c2:	2300      	movs	r3, #0
 80116c4:	60fb      	str	r3, [r7, #12]
 80116c6:	4b62      	ldr	r3, [pc, #392]	; (8011850 <MX_GPIO_Init+0x1c0>)
 80116c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ca:	4a61      	ldr	r2, [pc, #388]	; (8011850 <MX_GPIO_Init+0x1c0>)
 80116cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116d0:	6313      	str	r3, [r2, #48]	; 0x30
 80116d2:	4b5f      	ldr	r3, [pc, #380]	; (8011850 <MX_GPIO_Init+0x1c0>)
 80116d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116da:	60fb      	str	r3, [r7, #12]
 80116dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80116de:	2300      	movs	r3, #0
 80116e0:	60bb      	str	r3, [r7, #8]
 80116e2:	4b5b      	ldr	r3, [pc, #364]	; (8011850 <MX_GPIO_Init+0x1c0>)
 80116e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e6:	4a5a      	ldr	r2, [pc, #360]	; (8011850 <MX_GPIO_Init+0x1c0>)
 80116e8:	f043 0301 	orr.w	r3, r3, #1
 80116ec:	6313      	str	r3, [r2, #48]	; 0x30
 80116ee:	4b58      	ldr	r3, [pc, #352]	; (8011850 <MX_GPIO_Init+0x1c0>)
 80116f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f2:	f003 0301 	and.w	r3, r3, #1
 80116f6:	60bb      	str	r3, [r7, #8]
 80116f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80116fa:	2300      	movs	r3, #0
 80116fc:	607b      	str	r3, [r7, #4]
 80116fe:	4b54      	ldr	r3, [pc, #336]	; (8011850 <MX_GPIO_Init+0x1c0>)
 8011700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011702:	4a53      	ldr	r2, [pc, #332]	; (8011850 <MX_GPIO_Init+0x1c0>)
 8011704:	f043 0302 	orr.w	r3, r3, #2
 8011708:	6313      	str	r3, [r2, #48]	; 0x30
 801170a:	4b51      	ldr	r3, [pc, #324]	; (8011850 <MX_GPIO_Init+0x1c0>)
 801170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801170e:	f003 0302 	and.w	r3, r3, #2
 8011712:	607b      	str	r3, [r7, #4]
 8011714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011716:	2300      	movs	r3, #0
 8011718:	603b      	str	r3, [r7, #0]
 801171a:	4b4d      	ldr	r3, [pc, #308]	; (8011850 <MX_GPIO_Init+0x1c0>)
 801171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801171e:	4a4c      	ldr	r2, [pc, #304]	; (8011850 <MX_GPIO_Init+0x1c0>)
 8011720:	f043 0308 	orr.w	r3, r3, #8
 8011724:	6313      	str	r3, [r2, #48]	; 0x30
 8011726:	4b4a      	ldr	r3, [pc, #296]	; (8011850 <MX_GPIO_Init+0x1c0>)
 8011728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801172a:	f003 0308 	and.w	r3, r3, #8
 801172e:	603b      	str	r3, [r7, #0]
 8011730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uC_RS485_RE_Pin|uC_G2T_Pin|uC_G3T_Pin, GPIO_PIN_RESET);
 8011732:	2200      	movs	r2, #0
 8011734:	f648 0120 	movw	r1, #34848	; 0x8820
 8011738:	4846      	ldr	r0, [pc, #280]	; (8011854 <MX_GPIO_Init+0x1c4>)
 801173a:	f002 fa5f 	bl	8013bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, uC_TransistorSwitch1_Pin|uC_TransistorSwitch2_Pin|uC_TransistorSwitch3_Pin|uC_TransistorSwitch4_Pin
 801173e:	2200      	movs	r2, #0
 8011740:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8011744:	4844      	ldr	r0, [pc, #272]	; (8011858 <MX_GPIO_Init+0x1c8>)
 8011746:	f002 fa59 	bl	8013bfc <HAL_GPIO_WritePin>
                          |uC_TransistorSwitch5_Pin|uC_Relay_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, uC_TransistorSwitch6_Pin|uC_LedOnBoard_Pin|LCD_RS_Pin|uC_G1T_Pin
 801174a:	2200      	movs	r2, #0
 801174c:	f246 01a2 	movw	r1, #24738	; 0x60a2
 8011750:	4842      	ldr	r0, [pc, #264]	; (801185c <MX_GPIO_Init+0x1cc>)
 8011752:	f002 fa53 	bl	8013bfc <HAL_GPIO_WritePin>
                          |uC_RS485_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : uC_BattteryReverse_Pin uC_B1_Pin uC_B2_Pin uC_B3_Pin
                           uC_B4_Pin */
  GPIO_InitStruct.Pin = uC_BattteryReverse_Pin|uC_B1_Pin|uC_B2_Pin|uC_B3_Pin
 8011756:	f242 030f 	movw	r3, #8207	; 0x200f
 801175a:	617b      	str	r3, [r7, #20]
                          |uC_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801175c:	2300      	movs	r3, #0
 801175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011760:	2300      	movs	r3, #0
 8011762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011764:	f107 0314 	add.w	r3, r7, #20
 8011768:	4619      	mov	r1, r3
 801176a:	483b      	ldr	r0, [pc, #236]	; (8011858 <MX_GPIO_Init+0x1c8>)
 801176c:	f002 f89a 	bl	80138a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uC_RS485_RE_Pin */
  GPIO_InitStruct.Pin = uC_RS485_RE_Pin;
 8011770:	2320      	movs	r3, #32
 8011772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011774:	2301      	movs	r3, #1
 8011776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011778:	2300      	movs	r3, #0
 801177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801177c:	2300      	movs	r3, #0
 801177e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uC_RS485_RE_GPIO_Port, &GPIO_InitStruct);
 8011780:	f107 0314 	add.w	r3, r7, #20
 8011784:	4619      	mov	r1, r3
 8011786:	4833      	ldr	r0, [pc, #204]	; (8011854 <MX_GPIO_Init+0x1c4>)
 8011788:	f002 f88c 	bl	80138a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ZC1_Pin uC_ZC2_Pin uC_ZC3_Pin */
  GPIO_InitStruct.Pin = uC_ZC1_Pin|uC_ZC2_Pin|uC_ZC3_Pin;
 801178c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8011790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8011792:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8011796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011798:	2300      	movs	r3, #0
 801179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801179c:	f107 0314 	add.w	r3, r7, #20
 80117a0:	4619      	mov	r1, r3
 80117a2:	482c      	ldr	r0, [pc, #176]	; (8011854 <MX_GPIO_Init+0x1c4>)
 80117a4:	f002 f87e 	bl	80138a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_TransistorSwitch1_Pin uC_TransistorSwitch2_Pin uC_TransistorSwitch3_Pin uC_TransistorSwitch4_Pin
                           uC_TransistorSwitch5_Pin uC_Relay_Pin */
  GPIO_InitStruct.Pin = uC_TransistorSwitch1_Pin|uC_TransistorSwitch2_Pin|uC_TransistorSwitch3_Pin|uC_TransistorSwitch4_Pin
 80117a8:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80117ac:	617b      	str	r3, [r7, #20]
                          |uC_TransistorSwitch5_Pin|uC_Relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80117ae:	2301      	movs	r3, #1
 80117b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117b2:	2300      	movs	r3, #0
 80117b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80117b6:	2300      	movs	r3, #0
 80117b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80117ba:	f107 0314 	add.w	r3, r7, #20
 80117be:	4619      	mov	r1, r3
 80117c0:	4825      	ldr	r0, [pc, #148]	; (8011858 <MX_GPIO_Init+0x1c8>)
 80117c2:	f002 f86f 	bl	80138a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_TransistorSwitch6_Pin uC_LedOnBoard_Pin uC_RS485_DE_Pin */
  GPIO_InitStruct.Pin = uC_TransistorSwitch6_Pin|uC_LedOnBoard_Pin|uC_RS485_DE_Pin;
 80117c6:	f242 0382 	movw	r3, #8322	; 0x2082
 80117ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80117cc:	2301      	movs	r3, #1
 80117ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117d0:	2300      	movs	r3, #0
 80117d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80117d4:	2300      	movs	r3, #0
 80117d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80117d8:	f107 0314 	add.w	r3, r7, #20
 80117dc:	4619      	mov	r1, r3
 80117de:	481f      	ldr	r0, [pc, #124]	; (801185c <MX_GPIO_Init+0x1cc>)
 80117e0:	f002 f860 	bl	80138a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin uC_G1T_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|uC_G1T_Pin;
 80117e4:	f244 0320 	movw	r3, #16416	; 0x4020
 80117e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80117ea:	2301      	movs	r3, #1
 80117ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117ee:	2300      	movs	r3, #0
 80117f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80117f2:	2302      	movs	r3, #2
 80117f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80117f6:	f107 0314 	add.w	r3, r7, #20
 80117fa:	4619      	mov	r1, r3
 80117fc:	4817      	ldr	r0, [pc, #92]	; (801185c <MX_GPIO_Init+0x1cc>)
 80117fe:	f002 f851 	bl	80138a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_G2T_Pin uC_G3T_Pin */
  GPIO_InitStruct.Pin = uC_G2T_Pin|uC_G3T_Pin;
 8011802:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8011806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011808:	2301      	movs	r3, #1
 801180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801180c:	2300      	movs	r3, #0
 801180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011810:	2302      	movs	r3, #2
 8011812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011814:	f107 0314 	add.w	r3, r7, #20
 8011818:	4619      	mov	r1, r3
 801181a:	480e      	ldr	r0, [pc, #56]	; (8011854 <MX_GPIO_Init+0x1c4>)
 801181c:	f002 f842 	bl	80138a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uC_SCRTemp_Pin */
  GPIO_InitStruct.Pin = uC_SCRTemp_Pin;
 8011820:	2340      	movs	r3, #64	; 0x40
 8011822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011824:	2300      	movs	r3, #0
 8011826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011828:	2302      	movs	r3, #2
 801182a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uC_SCRTemp_GPIO_Port, &GPIO_InitStruct);
 801182c:	f107 0314 	add.w	r3, r7, #20
 8011830:	4619      	mov	r1, r3
 8011832:	480a      	ldr	r0, [pc, #40]	; (801185c <MX_GPIO_Init+0x1cc>)
 8011834:	f002 f836 	bl	80138a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8011838:	2200      	movs	r2, #0
 801183a:	2105      	movs	r1, #5
 801183c:	2017      	movs	r0, #23
 801183e:	f001 fa99 	bl	8012d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8011842:	2017      	movs	r0, #23
 8011844:	f001 fab2 	bl	8012dac <HAL_NVIC_EnableIRQ>

}
 8011848:	bf00      	nop
 801184a:	3728      	adds	r7, #40	; 0x28
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	40023800 	.word	0x40023800
 8011854:	40020000 	.word	0x40020000
 8011858:	40020800 	.word	0x40020800
 801185c:	40020400 	.word	0x40020400

08011860 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
	static uint32_t ApplDbg_TaskSCRTrigger_RunCounter_old = 0;
	static uint32_t ApplDbg_TaskDisplay_RunCounter_old = 0;
  /* Infinite loop */
  for(;;)
  {
	  if(ApplDbg_TaskDisplay_RunCounter!=ApplDbg_TaskDisplay_RunCounter_old){
 8011868:	4b16      	ldr	r3, [pc, #88]	; (80118c4 <StartDefaultTask+0x64>)
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	4b16      	ldr	r3, [pc, #88]	; (80118c8 <StartDefaultTask+0x68>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	429a      	cmp	r2, r3
 8011872:	d0f9      	beq.n	8011868 <StartDefaultTask+0x8>
		  ApplDbg_TaskDisplay_RunCounter_old = ApplDbg_TaskDisplay_RunCounter;
 8011874:	4b13      	ldr	r3, [pc, #76]	; (80118c4 <StartDefaultTask+0x64>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4a13      	ldr	r2, [pc, #76]	; (80118c8 <StartDefaultTask+0x68>)
 801187a:	6013      	str	r3, [r2, #0]
		  if((ApplDbg_Task10ms_RunCounter_old != ApplDbg_Task10ms_RunCounter) && \
 801187c:	4b13      	ldr	r3, [pc, #76]	; (80118cc <StartDefaultTask+0x6c>)
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	4b13      	ldr	r3, [pc, #76]	; (80118d0 <StartDefaultTask+0x70>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	429a      	cmp	r2, r3
 8011886:	d0ef      	beq.n	8011868 <StartDefaultTask+0x8>
				  (ApplDbg_Task50ms_RunCounter_old != ApplDbg_Task50ms_RunCounter) && \
 8011888:	4b12      	ldr	r3, [pc, #72]	; (80118d4 <StartDefaultTask+0x74>)
 801188a:	681a      	ldr	r2, [r3, #0]
 801188c:	4b12      	ldr	r3, [pc, #72]	; (80118d8 <StartDefaultTask+0x78>)
 801188e:	681b      	ldr	r3, [r3, #0]
		  if((ApplDbg_Task10ms_RunCounter_old != ApplDbg_Task10ms_RunCounter) && \
 8011890:	429a      	cmp	r2, r3
 8011892:	d0e9      	beq.n	8011868 <StartDefaultTask+0x8>
				  (ApplDbg_TaskSCRTrigger_RunCounter_old != ApplDbg_TaskSCRTrigger_RunCounter)){
 8011894:	4b11      	ldr	r3, [pc, #68]	; (80118dc <StartDefaultTask+0x7c>)
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	4b11      	ldr	r3, [pc, #68]	; (80118e0 <StartDefaultTask+0x80>)
 801189a:	681b      	ldr	r3, [r3, #0]
				  (ApplDbg_Task50ms_RunCounter_old != ApplDbg_Task50ms_RunCounter) && \
 801189c:	429a      	cmp	r2, r3
 801189e:	d0e3      	beq.n	8011868 <StartDefaultTask+0x8>
			  ApplDbg_TaskSCRTrigger_RunCounter_old = ApplDbg_TaskSCRTrigger_RunCounter;
 80118a0:	4b0f      	ldr	r3, [pc, #60]	; (80118e0 <StartDefaultTask+0x80>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	4a0d      	ldr	r2, [pc, #52]	; (80118dc <StartDefaultTask+0x7c>)
 80118a6:	6013      	str	r3, [r2, #0]
			  ApplDbg_Task50ms_RunCounter_old = ApplDbg_Task50ms_RunCounter;
 80118a8:	4b0b      	ldr	r3, [pc, #44]	; (80118d8 <StartDefaultTask+0x78>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4a09      	ldr	r2, [pc, #36]	; (80118d4 <StartDefaultTask+0x74>)
 80118ae:	6013      	str	r3, [r2, #0]
			  ApplDbg_Task10ms_RunCounter_old = ApplDbg_Task10ms_RunCounter;
 80118b0:	4b07      	ldr	r3, [pc, #28]	; (80118d0 <StartDefaultTask+0x70>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	4a05      	ldr	r2, [pc, #20]	; (80118cc <StartDefaultTask+0x6c>)
 80118b6:	6013      	str	r3, [r2, #0]
			  ONBOARDLED_TOGGLE();
 80118b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80118bc:	4809      	ldr	r0, [pc, #36]	; (80118e4 <StartDefaultTask+0x84>)
 80118be:	f002 f9b6 	bl	8013c2e <HAL_GPIO_TogglePin>
	  if(ApplDbg_TaskDisplay_RunCounter!=ApplDbg_TaskDisplay_RunCounter_old){
 80118c2:	e7d1      	b.n	8011868 <StartDefaultTask+0x8>
 80118c4:	200003ec 	.word	0x200003ec
 80118c8:	200003f0 	.word	0x200003f0
 80118cc:	200003f4 	.word	0x200003f4
 80118d0:	200003e0 	.word	0x200003e0
 80118d4:	200003f8 	.word	0x200003f8
 80118d8:	200003e4 	.word	0x200003e4
 80118dc:	200003fc 	.word	0x200003fc
 80118e0:	200003e8 	.word	0x200003e8
 80118e4:	40020400 	.word	0x40020400

080118e8 <Task_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
	static uint32_t FnclocalDbg_Task10ms_RunCounter = 0;
	static TickType_t Task_10ms_pxPreviousWakeTime;
  /* Infinite loop */
  for(;;)
  {
	  SM_10msTask();
 80118f0:	f00b fede 	bl	801d6b0 <SM_10msTask>
		FnclocalDbg_Task10ms_RunCounter++;
 80118f4:	4b0a      	ldr	r3, [pc, #40]	; (8011920 <Task_10ms+0x38>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	3301      	adds	r3, #1
 80118fa:	4a09      	ldr	r2, [pc, #36]	; (8011920 <Task_10ms+0x38>)
 80118fc:	6013      	str	r3, [r2, #0]
		if(FnclocalDbg_Task10ms_RunCounter>=100){
 80118fe:	4b08      	ldr	r3, [pc, #32]	; (8011920 <Task_10ms+0x38>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2b63      	cmp	r3, #99	; 0x63
 8011904:	d907      	bls.n	8011916 <Task_10ms+0x2e>
			FnclocalDbg_Task10ms_RunCounter = 0;
 8011906:	4b06      	ldr	r3, [pc, #24]	; (8011920 <Task_10ms+0x38>)
 8011908:	2200      	movs	r2, #0
 801190a:	601a      	str	r2, [r3, #0]
			ApplDbg_Task10ms_RunCounter++;
 801190c:	4b05      	ldr	r3, [pc, #20]	; (8011924 <Task_10ms+0x3c>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	3301      	adds	r3, #1
 8011912:	4a04      	ldr	r2, [pc, #16]	; (8011924 <Task_10ms+0x3c>)
 8011914:	6013      	str	r3, [r2, #0]
		}
		vTaskDelayUntil(&Task_10ms_pxPreviousWakeTime, 10);
 8011916:	210a      	movs	r1, #10
 8011918:	4803      	ldr	r0, [pc, #12]	; (8011928 <Task_10ms+0x40>)
 801191a:	f00d fdaf 	bl	801f47c <vTaskDelayUntil>
	  SM_10msTask();
 801191e:	e7e7      	b.n	80118f0 <Task_10ms+0x8>
 8011920:	20000400 	.word	0x20000400
 8011924:	200003e0 	.word	0x200003e0
 8011928:	20000404 	.word	0x20000404

0801192c <Task_50ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_50ms */
void Task_50ms(void const * argument)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
static uint32_t FnclocalDbg_Task50ms_RunCounter = 0;
static TickType_t Task_50ms_pxPreviousWakeTime;
  /* Infinite loop */
  for(;;)
  {
	  RunDiagnostics();
 8011934:	f007 fd6c 	bl	8019410 <RunDiagnostics>
	  FnclocalDbg_Task50ms_RunCounter++;
 8011938:	4b0a      	ldr	r3, [pc, #40]	; (8011964 <Task_50ms+0x38>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	3301      	adds	r3, #1
 801193e:	4a09      	ldr	r2, [pc, #36]	; (8011964 <Task_50ms+0x38>)
 8011940:	6013      	str	r3, [r2, #0]
	  if(FnclocalDbg_Task50ms_RunCounter>=20){
 8011942:	4b08      	ldr	r3, [pc, #32]	; (8011964 <Task_50ms+0x38>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2b13      	cmp	r3, #19
 8011948:	d907      	bls.n	801195a <Task_50ms+0x2e>
		  FnclocalDbg_Task50ms_RunCounter = 0;
 801194a:	4b06      	ldr	r3, [pc, #24]	; (8011964 <Task_50ms+0x38>)
 801194c:	2200      	movs	r2, #0
 801194e:	601a      	str	r2, [r3, #0]
		  ApplDbg_Task50ms_RunCounter++;
 8011950:	4b05      	ldr	r3, [pc, #20]	; (8011968 <Task_50ms+0x3c>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	3301      	adds	r3, #1
 8011956:	4a04      	ldr	r2, [pc, #16]	; (8011968 <Task_50ms+0x3c>)
 8011958:	6013      	str	r3, [r2, #0]
	  }
	  vTaskDelayUntil(&Task_50ms_pxPreviousWakeTime, 50);
 801195a:	2132      	movs	r1, #50	; 0x32
 801195c:	4803      	ldr	r0, [pc, #12]	; (801196c <Task_50ms+0x40>)
 801195e:	f00d fd8d 	bl	801f47c <vTaskDelayUntil>
	  RunDiagnostics();
 8011962:	e7e7      	b.n	8011934 <Task_50ms+0x8>
 8011964:	20000408 	.word	0x20000408
 8011968:	200003e4 	.word	0x200003e4
 801196c:	2000040c 	.word	0x2000040c

08011970 <Task_StateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_StateMachine */
void Task_StateMachine(void const * argument)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_StateMachine */
static uint32_t FnclocalDbg_TaskSCRTrigger_RunCounter = 0;
static TickType_t Task_SCRTrigger_pxPreviousWakeTime;
uint8_t loopms = 50;
 8011978:	2332      	movs	r3, #50	; 0x32
 801197a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  loopms = 50;
 801197c:	2332      	movs	r3, #50	; 0x32
 801197e:	73fb      	strb	r3, [r7, #15]
	  CommandLoop(loopms);
 8011980:	7bfb      	ldrb	r3, [r7, #15]
 8011982:	4618      	mov	r0, r3
 8011984:	f00a fb3a 	bl	801bffc <CommandLoop>
	  SM_StateMachineHandler(loopms);
 8011988:	7bfb      	ldrb	r3, [r7, #15]
 801198a:	4618      	mov	r0, r3
 801198c:	f00a feb0 	bl	801c6f0 <SM_StateMachineHandler>
	  FnclocalDbg_TaskSCRTrigger_RunCounter++;
 8011990:	4b0e      	ldr	r3, [pc, #56]	; (80119cc <Task_StateMachine+0x5c>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	3301      	adds	r3, #1
 8011996:	4a0d      	ldr	r2, [pc, #52]	; (80119cc <Task_StateMachine+0x5c>)
 8011998:	6013      	str	r3, [r2, #0]
	  if(FnclocalDbg_TaskSCRTrigger_RunCounter>=(1000/loopms)){
 801199a:	7bfb      	ldrb	r3, [r7, #15]
 801199c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80119a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80119a4:	461a      	mov	r2, r3
 80119a6:	4b09      	ldr	r3, [pc, #36]	; (80119cc <Task_StateMachine+0x5c>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d807      	bhi.n	80119be <Task_StateMachine+0x4e>
		  FnclocalDbg_TaskSCRTrigger_RunCounter = 0;
 80119ae:	4b07      	ldr	r3, [pc, #28]	; (80119cc <Task_StateMachine+0x5c>)
 80119b0:	2200      	movs	r2, #0
 80119b2:	601a      	str	r2, [r3, #0]
		  ApplDbg_TaskSCRTrigger_RunCounter++;
 80119b4:	4b06      	ldr	r3, [pc, #24]	; (80119d0 <Task_StateMachine+0x60>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	3301      	adds	r3, #1
 80119ba:	4a05      	ldr	r2, [pc, #20]	; (80119d0 <Task_StateMachine+0x60>)
 80119bc:	6013      	str	r3, [r2, #0]
	  }
	  vTaskDelayUntil(&Task_SCRTrigger_pxPreviousWakeTime, loopms);
 80119be:	7bfb      	ldrb	r3, [r7, #15]
 80119c0:	4619      	mov	r1, r3
 80119c2:	4804      	ldr	r0, [pc, #16]	; (80119d4 <Task_StateMachine+0x64>)
 80119c4:	f00d fd5a 	bl	801f47c <vTaskDelayUntil>
	  loopms = 50;
 80119c8:	e7d8      	b.n	801197c <Task_StateMachine+0xc>
 80119ca:	bf00      	nop
 80119cc:	20000410 	.word	0x20000410
 80119d0:	200003e8 	.word	0x200003e8
 80119d4:	20000414 	.word	0x20000414

080119d8 <Task_Display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Display */
void Task_Display(void const * argument)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b084      	sub	sp, #16
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Display */
	static uint32_t FnclocalDbg_TaskDisplay_RunCounter = 0;
	static TickType_t xLastWakeTime;
	uint8_t lopspeedms = 250;
 80119e0:	23fa      	movs	r3, #250	; 0xfa
 80119e2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  DisplayLoop(lopspeedms);
 80119e4:	7bfb      	ldrb	r3, [r7, #15]
 80119e6:	4618      	mov	r0, r3
 80119e8:	f007 feb2 	bl	8019750 <DisplayLoop>
//	  vishwaModbusLoop();
	  SerialCommunication(lopspeedms);
 80119ec:	7bfb      	ldrb	r3, [r7, #15]
 80119ee:	4618      	mov	r0, r3
 80119f0:	f009 fa26 	bl	801ae40 <SerialCommunication>
	  FnclocalDbg_TaskDisplay_RunCounter++;
 80119f4:	4b12      	ldr	r3, [pc, #72]	; (8011a40 <Task_Display+0x68>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	3301      	adds	r3, #1
 80119fa:	4a11      	ldr	r2, [pc, #68]	; (8011a40 <Task_Display+0x68>)
 80119fc:	6013      	str	r3, [r2, #0]
	  if(FnclocalDbg_TaskDisplay_RunCounter>=(1000/lopspeedms)){
 80119fe:	7bfb      	ldrb	r3, [r7, #15]
 8011a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011a04:	fb92 f3f3 	sdiv	r3, r2, r3
 8011a08:	461a      	mov	r2, r3
 8011a0a:	4b0d      	ldr	r3, [pc, #52]	; (8011a40 <Task_Display+0x68>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d807      	bhi.n	8011a22 <Task_Display+0x4a>
		  FnclocalDbg_TaskDisplay_RunCounter = 0;
 8011a12:	4b0b      	ldr	r3, [pc, #44]	; (8011a40 <Task_Display+0x68>)
 8011a14:	2200      	movs	r2, #0
 8011a16:	601a      	str	r2, [r3, #0]
		  ApplDbg_TaskDisplay_RunCounter++;
 8011a18:	4b0a      	ldr	r3, [pc, #40]	; (8011a44 <Task_Display+0x6c>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	4a09      	ldr	r2, [pc, #36]	; (8011a44 <Task_Display+0x6c>)
 8011a20:	6013      	str	r3, [r2, #0]
	  }
	    vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(lopspeedms));
 8011a22:	7bfb      	ldrb	r3, [r7, #15]
 8011a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011a28:	fb02 f303 	mul.w	r3, r2, r3
 8011a2c:	4a06      	ldr	r2, [pc, #24]	; (8011a48 <Task_Display+0x70>)
 8011a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a32:	099b      	lsrs	r3, r3, #6
 8011a34:	4619      	mov	r1, r3
 8011a36:	4805      	ldr	r0, [pc, #20]	; (8011a4c <Task_Display+0x74>)
 8011a38:	f00d fd20 	bl	801f47c <vTaskDelayUntil>
	  DisplayLoop(lopspeedms);
 8011a3c:	e7d2      	b.n	80119e4 <Task_Display+0xc>
 8011a3e:	bf00      	nop
 8011a40:	20000418 	.word	0x20000418
 8011a44:	200003ec 	.word	0x200003ec
 8011a48:	10624dd3 	.word	0x10624dd3
 8011a4c:	2000041c 	.word	0x2000041c

08011a50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	4a04      	ldr	r2, [pc, #16]	; (8011a70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d101      	bne.n	8011a66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8011a62:	f000 fc73 	bl	801234c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011a66:	bf00      	nop
 8011a68:	3708      	adds	r7, #8
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	40010000 	.word	0x40010000

08011a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011a74:	b480      	push	{r7}
 8011a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011a78:	b672      	cpsid	i
}
 8011a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011a7c:	e7fe      	b.n	8011a7c <Error_Handler+0x8>
	...

08011a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011a86:	2300      	movs	r3, #0
 8011a88:	607b      	str	r3, [r7, #4]
 8011a8a:	4b12      	ldr	r3, [pc, #72]	; (8011ad4 <HAL_MspInit+0x54>)
 8011a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a8e:	4a11      	ldr	r2, [pc, #68]	; (8011ad4 <HAL_MspInit+0x54>)
 8011a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011a94:	6453      	str	r3, [r2, #68]	; 0x44
 8011a96:	4b0f      	ldr	r3, [pc, #60]	; (8011ad4 <HAL_MspInit+0x54>)
 8011a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a9e:	607b      	str	r3, [r7, #4]
 8011aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	603b      	str	r3, [r7, #0]
 8011aa6:	4b0b      	ldr	r3, [pc, #44]	; (8011ad4 <HAL_MspInit+0x54>)
 8011aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aaa:	4a0a      	ldr	r2, [pc, #40]	; (8011ad4 <HAL_MspInit+0x54>)
 8011aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8011ab2:	4b08      	ldr	r3, [pc, #32]	; (8011ad4 <HAL_MspInit+0x54>)
 8011ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011aba:	603b      	str	r3, [r7, #0]
 8011abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8011abe:	2200      	movs	r2, #0
 8011ac0:	210f      	movs	r1, #15
 8011ac2:	f06f 0001 	mvn.w	r0, #1
 8011ac6:	f001 f955 	bl	8012d74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011aca:	bf00      	nop
 8011acc:	3708      	adds	r7, #8
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	40023800 	.word	0x40023800

08011ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b08a      	sub	sp, #40	; 0x28
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ae0:	f107 0314 	add.w	r3, r7, #20
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	601a      	str	r2, [r3, #0]
 8011ae8:	605a      	str	r2, [r3, #4]
 8011aea:	609a      	str	r2, [r3, #8]
 8011aec:	60da      	str	r2, [r3, #12]
 8011aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	4a2f      	ldr	r2, [pc, #188]	; (8011bb4 <HAL_ADC_MspInit+0xdc>)
 8011af6:	4293      	cmp	r3, r2
 8011af8:	d157      	bne.n	8011baa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8011afa:	2300      	movs	r3, #0
 8011afc:	613b      	str	r3, [r7, #16]
 8011afe:	4b2e      	ldr	r3, [pc, #184]	; (8011bb8 <HAL_ADC_MspInit+0xe0>)
 8011b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b02:	4a2d      	ldr	r2, [pc, #180]	; (8011bb8 <HAL_ADC_MspInit+0xe0>)
 8011b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b08:	6453      	str	r3, [r2, #68]	; 0x44
 8011b0a:	4b2b      	ldr	r3, [pc, #172]	; (8011bb8 <HAL_ADC_MspInit+0xe0>)
 8011b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b12:	613b      	str	r3, [r7, #16]
 8011b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b16:	2300      	movs	r3, #0
 8011b18:	60fb      	str	r3, [r7, #12]
 8011b1a:	4b27      	ldr	r3, [pc, #156]	; (8011bb8 <HAL_ADC_MspInit+0xe0>)
 8011b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b1e:	4a26      	ldr	r2, [pc, #152]	; (8011bb8 <HAL_ADC_MspInit+0xe0>)
 8011b20:	f043 0301 	orr.w	r3, r3, #1
 8011b24:	6313      	str	r3, [r2, #48]	; 0x30
 8011b26:	4b24      	ldr	r3, [pc, #144]	; (8011bb8 <HAL_ADC_MspInit+0xe0>)
 8011b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b2a:	f003 0301 	and.w	r3, r3, #1
 8011b2e:	60fb      	str	r3, [r7, #12]
 8011b30:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8011b32:	230f      	movs	r3, #15
 8011b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011b36:	2303      	movs	r3, #3
 8011b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b3e:	f107 0314 	add.w	r3, r7, #20
 8011b42:	4619      	mov	r1, r3
 8011b44:	481d      	ldr	r0, [pc, #116]	; (8011bbc <HAL_ADC_MspInit+0xe4>)
 8011b46:	f001 fead 	bl	80138a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8011b4a:	4b1d      	ldr	r3, [pc, #116]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b4c:	4a1d      	ldr	r2, [pc, #116]	; (8011bc4 <HAL_ADC_MspInit+0xec>)
 8011b4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8011b50:	4b1b      	ldr	r3, [pc, #108]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b52:	2200      	movs	r2, #0
 8011b54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011b56:	4b1a      	ldr	r3, [pc, #104]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b58:	2200      	movs	r2, #0
 8011b5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8011b5c:	4b18      	ldr	r3, [pc, #96]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b5e:	2200      	movs	r2, #0
 8011b60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8011b62:	4b17      	ldr	r3, [pc, #92]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011b68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8011b6a:	4b15      	ldr	r3, [pc, #84]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011b72:	4b13      	ldr	r3, [pc, #76]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011b78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8011b7a:	4b11      	ldr	r3, [pc, #68]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8011b82:	4b0f      	ldr	r3, [pc, #60]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b84:	2200      	movs	r2, #0
 8011b86:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8011b88:	4b0d      	ldr	r3, [pc, #52]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8011b8e:	480c      	ldr	r0, [pc, #48]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011b90:	f001 f91a 	bl	8012dc8 <HAL_DMA_Init>
 8011b94:	4603      	mov	r3, r0
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d001      	beq.n	8011b9e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8011b9a:	f7ff ff6b 	bl	8011a74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	4a07      	ldr	r2, [pc, #28]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8011ba4:	4a06      	ldr	r2, [pc, #24]	; (8011bc0 <HAL_ADC_MspInit+0xe8>)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8011baa:	bf00      	nop
 8011bac:	3728      	adds	r7, #40	; 0x28
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	40012000 	.word	0x40012000
 8011bb8:	40023800 	.word	0x40023800
 8011bbc:	40020000 	.word	0x40020000
 8011bc0:	20004410 	.word	0x20004410
 8011bc4:	40026410 	.word	0x40026410

08011bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b08a      	sub	sp, #40	; 0x28
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011bd0:	f107 0314 	add.w	r3, r7, #20
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	601a      	str	r2, [r3, #0]
 8011bd8:	605a      	str	r2, [r3, #4]
 8011bda:	609a      	str	r2, [r3, #8]
 8011bdc:	60da      	str	r2, [r3, #12]
 8011bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4a19      	ldr	r2, [pc, #100]	; (8011c4c <HAL_I2C_MspInit+0x84>)
 8011be6:	4293      	cmp	r3, r2
 8011be8:	d12c      	bne.n	8011c44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011bea:	2300      	movs	r3, #0
 8011bec:	613b      	str	r3, [r7, #16]
 8011bee:	4b18      	ldr	r3, [pc, #96]	; (8011c50 <HAL_I2C_MspInit+0x88>)
 8011bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bf2:	4a17      	ldr	r2, [pc, #92]	; (8011c50 <HAL_I2C_MspInit+0x88>)
 8011bf4:	f043 0302 	orr.w	r3, r3, #2
 8011bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8011bfa:	4b15      	ldr	r3, [pc, #84]	; (8011c50 <HAL_I2C_MspInit+0x88>)
 8011bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bfe:	f003 0302 	and.w	r3, r3, #2
 8011c02:	613b      	str	r3, [r7, #16]
 8011c04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8011c06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011c0c:	2312      	movs	r3, #18
 8011c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c10:	2300      	movs	r3, #0
 8011c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c14:	2303      	movs	r3, #3
 8011c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011c18:	2304      	movs	r3, #4
 8011c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011c1c:	f107 0314 	add.w	r3, r7, #20
 8011c20:	4619      	mov	r1, r3
 8011c22:	480c      	ldr	r0, [pc, #48]	; (8011c54 <HAL_I2C_MspInit+0x8c>)
 8011c24:	f001 fe3e 	bl	80138a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011c28:	2300      	movs	r3, #0
 8011c2a:	60fb      	str	r3, [r7, #12]
 8011c2c:	4b08      	ldr	r3, [pc, #32]	; (8011c50 <HAL_I2C_MspInit+0x88>)
 8011c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c30:	4a07      	ldr	r2, [pc, #28]	; (8011c50 <HAL_I2C_MspInit+0x88>)
 8011c32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011c36:	6413      	str	r3, [r2, #64]	; 0x40
 8011c38:	4b05      	ldr	r3, [pc, #20]	; (8011c50 <HAL_I2C_MspInit+0x88>)
 8011c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011c40:	60fb      	str	r3, [r7, #12]
 8011c42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8011c44:	bf00      	nop
 8011c46:	3728      	adds	r7, #40	; 0x28
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	40005400 	.word	0x40005400
 8011c50:	40023800 	.word	0x40023800
 8011c54:	40020400 	.word	0x40020400

08011c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b08a      	sub	sp, #40	; 0x28
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c60:	f107 0314 	add.w	r3, r7, #20
 8011c64:	2200      	movs	r2, #0
 8011c66:	601a      	str	r2, [r3, #0]
 8011c68:	605a      	str	r2, [r3, #4]
 8011c6a:	609a      	str	r2, [r3, #8]
 8011c6c:	60da      	str	r2, [r3, #12]
 8011c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4a19      	ldr	r2, [pc, #100]	; (8011cdc <HAL_SPI_MspInit+0x84>)
 8011c76:	4293      	cmp	r3, r2
 8011c78:	d12c      	bne.n	8011cd4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	613b      	str	r3, [r7, #16]
 8011c7e:	4b18      	ldr	r3, [pc, #96]	; (8011ce0 <HAL_SPI_MspInit+0x88>)
 8011c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c82:	4a17      	ldr	r2, [pc, #92]	; (8011ce0 <HAL_SPI_MspInit+0x88>)
 8011c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011c88:	6413      	str	r3, [r2, #64]	; 0x40
 8011c8a:	4b15      	ldr	r3, [pc, #84]	; (8011ce0 <HAL_SPI_MspInit+0x88>)
 8011c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c92:	613b      	str	r3, [r7, #16]
 8011c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011c96:	2300      	movs	r3, #0
 8011c98:	60fb      	str	r3, [r7, #12]
 8011c9a:	4b11      	ldr	r3, [pc, #68]	; (8011ce0 <HAL_SPI_MspInit+0x88>)
 8011c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c9e:	4a10      	ldr	r2, [pc, #64]	; (8011ce0 <HAL_SPI_MspInit+0x88>)
 8011ca0:	f043 0302 	orr.w	r3, r3, #2
 8011ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8011ca6:	4b0e      	ldr	r3, [pc, #56]	; (8011ce0 <HAL_SPI_MspInit+0x88>)
 8011ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011caa:	f003 0302 	and.w	r3, r3, #2
 8011cae:	60fb      	str	r3, [r7, #12]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RW_Pin;
 8011cb2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8011cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cb8:	2302      	movs	r3, #2
 8011cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011cc0:	2303      	movs	r3, #3
 8011cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011cc4:	2305      	movs	r3, #5
 8011cc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011cc8:	f107 0314 	add.w	r3, r7, #20
 8011ccc:	4619      	mov	r1, r3
 8011cce:	4805      	ldr	r0, [pc, #20]	; (8011ce4 <HAL_SPI_MspInit+0x8c>)
 8011cd0:	f001 fde8 	bl	80138a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8011cd4:	bf00      	nop
 8011cd6:	3728      	adds	r7, #40	; 0x28
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	40003800 	.word	0x40003800
 8011ce0:	40023800 	.word	0x40023800
 8011ce4:	40020400 	.word	0x40020400

08011ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b08a      	sub	sp, #40	; 0x28
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011cf8:	d10e      	bne.n	8011d18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8011cfe:	4b54      	ldr	r3, [pc, #336]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d02:	4a53      	ldr	r2, [pc, #332]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d04:	f043 0301 	orr.w	r3, r3, #1
 8011d08:	6413      	str	r3, [r2, #64]	; 0x40
 8011d0a:	4b51      	ldr	r3, [pc, #324]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d0e:	f003 0301 	and.w	r3, r3, #1
 8011d12:	627b      	str	r3, [r7, #36]	; 0x24
 8011d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8011d16:	e096      	b.n	8011e46 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM3)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4a4d      	ldr	r2, [pc, #308]	; (8011e54 <HAL_TIM_Base_MspInit+0x16c>)
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d116      	bne.n	8011d50 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011d22:	2300      	movs	r3, #0
 8011d24:	623b      	str	r3, [r7, #32]
 8011d26:	4b4a      	ldr	r3, [pc, #296]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d2a:	4a49      	ldr	r2, [pc, #292]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d2c:	f043 0302 	orr.w	r3, r3, #2
 8011d30:	6413      	str	r3, [r2, #64]	; 0x40
 8011d32:	4b47      	ldr	r3, [pc, #284]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d36:	f003 0302 	and.w	r3, r3, #2
 8011d3a:	623b      	str	r3, [r7, #32]
 8011d3c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8011d3e:	2200      	movs	r2, #0
 8011d40:	2105      	movs	r1, #5
 8011d42:	201d      	movs	r0, #29
 8011d44:	f001 f816 	bl	8012d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8011d48:	201d      	movs	r0, #29
 8011d4a:	f001 f82f 	bl	8012dac <HAL_NVIC_EnableIRQ>
}
 8011d4e:	e07a      	b.n	8011e46 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM4)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	4a40      	ldr	r2, [pc, #256]	; (8011e58 <HAL_TIM_Base_MspInit+0x170>)
 8011d56:	4293      	cmp	r3, r2
 8011d58:	d10e      	bne.n	8011d78 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	61fb      	str	r3, [r7, #28]
 8011d5e:	4b3c      	ldr	r3, [pc, #240]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d62:	4a3b      	ldr	r2, [pc, #236]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d64:	f043 0304 	orr.w	r3, r3, #4
 8011d68:	6413      	str	r3, [r2, #64]	; 0x40
 8011d6a:	4b39      	ldr	r3, [pc, #228]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d6e:	f003 0304 	and.w	r3, r3, #4
 8011d72:	61fb      	str	r3, [r7, #28]
 8011d74:	69fb      	ldr	r3, [r7, #28]
}
 8011d76:	e066      	b.n	8011e46 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM5)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	4a37      	ldr	r2, [pc, #220]	; (8011e5c <HAL_TIM_Base_MspInit+0x174>)
 8011d7e:	4293      	cmp	r3, r2
 8011d80:	d116      	bne.n	8011db0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8011d82:	2300      	movs	r3, #0
 8011d84:	61bb      	str	r3, [r7, #24]
 8011d86:	4b32      	ldr	r3, [pc, #200]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d8a:	4a31      	ldr	r2, [pc, #196]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d8c:	f043 0308 	orr.w	r3, r3, #8
 8011d90:	6413      	str	r3, [r2, #64]	; 0x40
 8011d92:	4b2f      	ldr	r3, [pc, #188]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d96:	f003 0308 	and.w	r3, r3, #8
 8011d9a:	61bb      	str	r3, [r7, #24]
 8011d9c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8011d9e:	2200      	movs	r2, #0
 8011da0:	2105      	movs	r1, #5
 8011da2:	2032      	movs	r0, #50	; 0x32
 8011da4:	f000 ffe6 	bl	8012d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8011da8:	2032      	movs	r0, #50	; 0x32
 8011daa:	f000 ffff 	bl	8012dac <HAL_NVIC_EnableIRQ>
}
 8011dae:	e04a      	b.n	8011e46 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM6)
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4a2a      	ldr	r2, [pc, #168]	; (8011e60 <HAL_TIM_Base_MspInit+0x178>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d116      	bne.n	8011de8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8011dba:	2300      	movs	r3, #0
 8011dbc:	617b      	str	r3, [r7, #20]
 8011dbe:	4b24      	ldr	r3, [pc, #144]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dc2:	4a23      	ldr	r2, [pc, #140]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011dc4:	f043 0310 	orr.w	r3, r3, #16
 8011dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8011dca:	4b21      	ldr	r3, [pc, #132]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dce:	f003 0310 	and.w	r3, r3, #16
 8011dd2:	617b      	str	r3, [r7, #20]
 8011dd4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	2105      	movs	r1, #5
 8011dda:	2036      	movs	r0, #54	; 0x36
 8011ddc:	f000 ffca 	bl	8012d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011de0:	2036      	movs	r0, #54	; 0x36
 8011de2:	f000 ffe3 	bl	8012dac <HAL_NVIC_EnableIRQ>
}
 8011de6:	e02e      	b.n	8011e46 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM7)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	4a1d      	ldr	r2, [pc, #116]	; (8011e64 <HAL_TIM_Base_MspInit+0x17c>)
 8011dee:	4293      	cmp	r3, r2
 8011df0:	d116      	bne.n	8011e20 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8011df2:	2300      	movs	r3, #0
 8011df4:	613b      	str	r3, [r7, #16]
 8011df6:	4b16      	ldr	r3, [pc, #88]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dfa:	4a15      	ldr	r2, [pc, #84]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011dfc:	f043 0320 	orr.w	r3, r3, #32
 8011e00:	6413      	str	r3, [r2, #64]	; 0x40
 8011e02:	4b13      	ldr	r3, [pc, #76]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e06:	f003 0320 	and.w	r3, r3, #32
 8011e0a:	613b      	str	r3, [r7, #16]
 8011e0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8011e0e:	2200      	movs	r2, #0
 8011e10:	2105      	movs	r1, #5
 8011e12:	2037      	movs	r0, #55	; 0x37
 8011e14:	f000 ffae 	bl	8012d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8011e18:	2037      	movs	r0, #55	; 0x37
 8011e1a:	f000 ffc7 	bl	8012dac <HAL_NVIC_EnableIRQ>
}
 8011e1e:	e012      	b.n	8011e46 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM8)
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	4a10      	ldr	r2, [pc, #64]	; (8011e68 <HAL_TIM_Base_MspInit+0x180>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d10d      	bne.n	8011e46 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	60fb      	str	r3, [r7, #12]
 8011e2e:	4b08      	ldr	r3, [pc, #32]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e32:	4a07      	ldr	r2, [pc, #28]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011e34:	f043 0302 	orr.w	r3, r3, #2
 8011e38:	6453      	str	r3, [r2, #68]	; 0x44
 8011e3a:	4b05      	ldr	r3, [pc, #20]	; (8011e50 <HAL_TIM_Base_MspInit+0x168>)
 8011e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e3e:	f003 0302 	and.w	r3, r3, #2
 8011e42:	60fb      	str	r3, [r7, #12]
 8011e44:	68fb      	ldr	r3, [r7, #12]
}
 8011e46:	bf00      	nop
 8011e48:	3728      	adds	r7, #40	; 0x28
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	40023800 	.word	0x40023800
 8011e54:	40000400 	.word	0x40000400
 8011e58:	40000800 	.word	0x40000800
 8011e5c:	40000c00 	.word	0x40000c00
 8011e60:	40001000 	.word	0x40001000
 8011e64:	40001400 	.word	0x40001400
 8011e68:	40010400 	.word	0x40010400

08011e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b08c      	sub	sp, #48	; 0x30
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e74:	f107 031c 	add.w	r3, r7, #28
 8011e78:	2200      	movs	r2, #0
 8011e7a:	601a      	str	r2, [r3, #0]
 8011e7c:	605a      	str	r2, [r3, #4]
 8011e7e:	609a      	str	r2, [r3, #8]
 8011e80:	60da      	str	r2, [r3, #12]
 8011e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	4a42      	ldr	r2, [pc, #264]	; (8011f94 <HAL_UART_MspInit+0x128>)
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	d14b      	bne.n	8011f26 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8011e8e:	2300      	movs	r3, #0
 8011e90:	61bb      	str	r3, [r7, #24]
 8011e92:	4b41      	ldr	r3, [pc, #260]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e96:	4a40      	ldr	r2, [pc, #256]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8011e9e:	4b3e      	ldr	r3, [pc, #248]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011ea6:	61bb      	str	r3, [r7, #24]
 8011ea8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011eaa:	2300      	movs	r3, #0
 8011eac:	617b      	str	r3, [r7, #20]
 8011eae:	4b3a      	ldr	r3, [pc, #232]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eb2:	4a39      	ldr	r2, [pc, #228]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011eb4:	f043 0304 	orr.w	r3, r3, #4
 8011eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8011eba:	4b37      	ldr	r3, [pc, #220]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ebe:	f003 0304 	and.w	r3, r3, #4
 8011ec2:	617b      	str	r3, [r7, #20]
 8011ec4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	613b      	str	r3, [r7, #16]
 8011eca:	4b33      	ldr	r3, [pc, #204]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ece:	4a32      	ldr	r2, [pc, #200]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011ed0:	f043 0308 	orr.w	r3, r3, #8
 8011ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8011ed6:	4b30      	ldr	r3, [pc, #192]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eda:	f003 0308 	and.w	r3, r3, #8
 8011ede:	613b      	str	r3, [r7, #16]
 8011ee0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8011ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ee8:	2302      	movs	r3, #2
 8011eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011eec:	2300      	movs	r3, #0
 8011eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ef0:	2303      	movs	r3, #3
 8011ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8011ef4:	2308      	movs	r3, #8
 8011ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011ef8:	f107 031c 	add.w	r3, r7, #28
 8011efc:	4619      	mov	r1, r3
 8011efe:	4827      	ldr	r0, [pc, #156]	; (8011f9c <HAL_UART_MspInit+0x130>)
 8011f00:	f001 fcd0 	bl	80138a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011f04:	2304      	movs	r3, #4
 8011f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f08:	2302      	movs	r3, #2
 8011f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f10:	2303      	movs	r3, #3
 8011f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8011f14:	2308      	movs	r3, #8
 8011f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011f18:	f107 031c 	add.w	r3, r7, #28
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	4820      	ldr	r0, [pc, #128]	; (8011fa0 <HAL_UART_MspInit+0x134>)
 8011f20:	f001 fcc0 	bl	80138a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8011f24:	e031      	b.n	8011f8a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	4a1e      	ldr	r2, [pc, #120]	; (8011fa4 <HAL_UART_MspInit+0x138>)
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d12c      	bne.n	8011f8a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8011f30:	2300      	movs	r3, #0
 8011f32:	60fb      	str	r3, [r7, #12]
 8011f34:	4b18      	ldr	r3, [pc, #96]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f38:	4a17      	ldr	r2, [pc, #92]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011f3a:	f043 0310 	orr.w	r3, r3, #16
 8011f3e:	6453      	str	r3, [r2, #68]	; 0x44
 8011f40:	4b15      	ldr	r3, [pc, #84]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f44:	f003 0310 	and.w	r3, r3, #16
 8011f48:	60fb      	str	r3, [r7, #12]
 8011f4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	60bb      	str	r3, [r7, #8]
 8011f50:	4b11      	ldr	r3, [pc, #68]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f54:	4a10      	ldr	r2, [pc, #64]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011f56:	f043 0301 	orr.w	r3, r3, #1
 8011f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8011f5c:	4b0e      	ldr	r3, [pc, #56]	; (8011f98 <HAL_UART_MspInit+0x12c>)
 8011f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f60:	f003 0301 	and.w	r3, r3, #1
 8011f64:	60bb      	str	r3, [r7, #8]
 8011f66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011f68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8011f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f6e:	2302      	movs	r3, #2
 8011f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f72:	2300      	movs	r3, #0
 8011f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f76:	2303      	movs	r3, #3
 8011f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011f7a:	2307      	movs	r3, #7
 8011f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f7e:	f107 031c 	add.w	r3, r7, #28
 8011f82:	4619      	mov	r1, r3
 8011f84:	4808      	ldr	r0, [pc, #32]	; (8011fa8 <HAL_UART_MspInit+0x13c>)
 8011f86:	f001 fc8d 	bl	80138a4 <HAL_GPIO_Init>
}
 8011f8a:	bf00      	nop
 8011f8c:	3730      	adds	r7, #48	; 0x30
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	40005000 	.word	0x40005000
 8011f98:	40023800 	.word	0x40023800
 8011f9c:	40020800 	.word	0x40020800
 8011fa0:	40020c00 	.word	0x40020c00
 8011fa4:	40011000 	.word	0x40011000
 8011fa8:	40020000 	.word	0x40020000

08011fac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b08c      	sub	sp, #48	; 0x30
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8011fb8:	2300      	movs	r3, #0
 8011fba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	6879      	ldr	r1, [r7, #4]
 8011fc0:	2019      	movs	r0, #25
 8011fc2:	f000 fed7 	bl	8012d74 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8011fc6:	2019      	movs	r0, #25
 8011fc8:	f000 fef0 	bl	8012dac <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8011fcc:	2300      	movs	r3, #0
 8011fce:	60fb      	str	r3, [r7, #12]
 8011fd0:	4b1f      	ldr	r3, [pc, #124]	; (8012050 <HAL_InitTick+0xa4>)
 8011fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fd4:	4a1e      	ldr	r2, [pc, #120]	; (8012050 <HAL_InitTick+0xa4>)
 8011fd6:	f043 0301 	orr.w	r3, r3, #1
 8011fda:	6453      	str	r3, [r2, #68]	; 0x44
 8011fdc:	4b1c      	ldr	r3, [pc, #112]	; (8012050 <HAL_InitTick+0xa4>)
 8011fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fe0:	f003 0301 	and.w	r3, r3, #1
 8011fe4:	60fb      	str	r3, [r7, #12]
 8011fe6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011fe8:	f107 0210 	add.w	r2, r7, #16
 8011fec:	f107 0314 	add.w	r3, r7, #20
 8011ff0:	4611      	mov	r1, r2
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f002 ff78 	bl	8014ee8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8011ff8:	f002 ff62 	bl	8014ec0 <HAL_RCC_GetPCLK2Freq>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	005b      	lsls	r3, r3, #1
 8012000:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012004:	4a13      	ldr	r2, [pc, #76]	; (8012054 <HAL_InitTick+0xa8>)
 8012006:	fba2 2303 	umull	r2, r3, r2, r3
 801200a:	0c9b      	lsrs	r3, r3, #18
 801200c:	3b01      	subs	r3, #1
 801200e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8012010:	4b11      	ldr	r3, [pc, #68]	; (8012058 <HAL_InitTick+0xac>)
 8012012:	4a12      	ldr	r2, [pc, #72]	; (801205c <HAL_InitTick+0xb0>)
 8012014:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8012016:	4b10      	ldr	r3, [pc, #64]	; (8012058 <HAL_InitTick+0xac>)
 8012018:	f240 32e7 	movw	r2, #999	; 0x3e7
 801201c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801201e:	4a0e      	ldr	r2, [pc, #56]	; (8012058 <HAL_InitTick+0xac>)
 8012020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012022:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012024:	4b0c      	ldr	r3, [pc, #48]	; (8012058 <HAL_InitTick+0xac>)
 8012026:	2200      	movs	r2, #0
 8012028:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801202a:	4b0b      	ldr	r3, [pc, #44]	; (8012058 <HAL_InitTick+0xac>)
 801202c:	2200      	movs	r2, #0
 801202e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8012030:	4809      	ldr	r0, [pc, #36]	; (8012058 <HAL_InitTick+0xac>)
 8012032:	f003 fe6b 	bl	8015d0c <HAL_TIM_Base_Init>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d104      	bne.n	8012046 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 801203c:	4806      	ldr	r0, [pc, #24]	; (8012058 <HAL_InitTick+0xac>)
 801203e:	f003 ff1d 	bl	8015e7c <HAL_TIM_Base_Start_IT>
 8012042:	4603      	mov	r3, r0
 8012044:	e000      	b.n	8012048 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8012046:	2301      	movs	r3, #1
}
 8012048:	4618      	mov	r0, r3
 801204a:	3730      	adds	r7, #48	; 0x30
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}
 8012050:	40023800 	.word	0x40023800
 8012054:	431bde83 	.word	0x431bde83
 8012058:	20004744 	.word	0x20004744
 801205c:	40010000 	.word	0x40010000

08012060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012060:	b480      	push	{r7}
 8012062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8012064:	e7fe      	b.n	8012064 <NMI_Handler+0x4>

08012066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012066:	b480      	push	{r7}
 8012068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801206a:	e7fe      	b.n	801206a <HardFault_Handler+0x4>

0801206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801206c:	b480      	push	{r7}
 801206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012070:	e7fe      	b.n	8012070 <MemManage_Handler+0x4>

08012072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012072:	b480      	push	{r7}
 8012074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012076:	e7fe      	b.n	8012076 <BusFault_Handler+0x4>

08012078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012078:	b480      	push	{r7}
 801207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801207c:	e7fe      	b.n	801207c <UsageFault_Handler+0x4>

0801207e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801207e:	b480      	push	{r7}
 8012080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012082:	bf00      	nop
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr

0801208c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8012090:	2040      	movs	r0, #64	; 0x40
 8012092:	f001 fde7 	bl	8013c64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8012096:	2080      	movs	r0, #128	; 0x80
 8012098:	f001 fde4 	bl	8013c64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 801209c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80120a0:	f001 fde0 	bl	8013c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80120a4:	bf00      	nop
 80120a6:	bd80      	pop	{r7, pc}

080120a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80120ac:	4802      	ldr	r0, [pc, #8]	; (80120b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80120ae:	f003 ff55 	bl	8015f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80120b2:	bf00      	nop
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	20004744 	.word	0x20004744

080120bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80120bc:	b480      	push	{r7}
 80120be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM3_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80120c0:	bf00      	nop
 80120c2:	46bd      	mov	sp, r7
 80120c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c8:	4770      	bx	lr

080120ca <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80120ca:	b580      	push	{r7, lr}
 80120cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	TIM5_Callback();
 80120ce:	f00b febd 	bl	801de4c <TIM5_Callback>
  /* USER CODE END TIM5_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim5);
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80120d2:	bf00      	nop
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	TIM6_Callback();
 80120da:	f00b ff13 	bl	801df04 <TIM6_Callback>
  /* USER CODE END TIM6_DAC_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80120de:	bf00      	nop
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80120e2:	b580      	push	{r7, lr}
 80120e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	TIM7_Callback();
 80120e6:	f00b ff6b 	bl	801dfc0 <TIM7_Callback>
  /* USER CODE END TIM7_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim7);
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80120ea:	bf00      	nop
 80120ec:	bd80      	pop	{r7, pc}
	...

080120f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80120f4:	4802      	ldr	r0, [pc, #8]	; (8012100 <DMA2_Stream0_IRQHandler+0x10>)
 80120f6:	f000 ff6d 	bl	8012fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80120fa:	bf00      	nop
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	20004410 	.word	0x20004410

08012104 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012104:	b480      	push	{r7}
 8012106:	af00      	add	r7, sp, #0
	return 1;
 8012108:	2301      	movs	r3, #1
}
 801210a:	4618      	mov	r0, r3
 801210c:	46bd      	mov	sp, r7
 801210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012112:	4770      	bx	lr

08012114 <_kill>:

int _kill(int pid, int sig)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801211e:	f00e fa11 	bl	8020544 <__errno>
 8012122:	4603      	mov	r3, r0
 8012124:	2216      	movs	r2, #22
 8012126:	601a      	str	r2, [r3, #0]
	return -1;
 8012128:	f04f 33ff 	mov.w	r3, #4294967295
}
 801212c:	4618      	mov	r0, r3
 801212e:	3708      	adds	r7, #8
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}

08012134 <_exit>:

void _exit (int status)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801213c:	f04f 31ff 	mov.w	r1, #4294967295
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f7ff ffe7 	bl	8012114 <_kill>
	while (1) {}		/* Make sure we hang here */
 8012146:	e7fe      	b.n	8012146 <_exit+0x12>

08012148 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b086      	sub	sp, #24
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012154:	2300      	movs	r3, #0
 8012156:	617b      	str	r3, [r7, #20]
 8012158:	e00a      	b.n	8012170 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801215a:	f3af 8000 	nop.w
 801215e:	4601      	mov	r1, r0
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	1c5a      	adds	r2, r3, #1
 8012164:	60ba      	str	r2, [r7, #8]
 8012166:	b2ca      	uxtb	r2, r1
 8012168:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	3301      	adds	r3, #1
 801216e:	617b      	str	r3, [r7, #20]
 8012170:	697a      	ldr	r2, [r7, #20]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	429a      	cmp	r2, r3
 8012176:	dbf0      	blt.n	801215a <_read+0x12>
	}

return len;
 8012178:	687b      	ldr	r3, [r7, #4]
}
 801217a:	4618      	mov	r0, r3
 801217c:	3718      	adds	r7, #24
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}

08012182 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012182:	b580      	push	{r7, lr}
 8012184:	b086      	sub	sp, #24
 8012186:	af00      	add	r7, sp, #0
 8012188:	60f8      	str	r0, [r7, #12]
 801218a:	60b9      	str	r1, [r7, #8]
 801218c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801218e:	2300      	movs	r3, #0
 8012190:	617b      	str	r3, [r7, #20]
 8012192:	e009      	b.n	80121a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	1c5a      	adds	r2, r3, #1
 8012198:	60ba      	str	r2, [r7, #8]
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	4618      	mov	r0, r3
 801219e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	3301      	adds	r3, #1
 80121a6:	617b      	str	r3, [r7, #20]
 80121a8:	697a      	ldr	r2, [r7, #20]
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	dbf1      	blt.n	8012194 <_write+0x12>
	}
	return len;
 80121b0:	687b      	ldr	r3, [r7, #4]
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3718      	adds	r7, #24
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}

080121ba <_close>:

int _close(int file)
{
 80121ba:	b480      	push	{r7}
 80121bc:	b083      	sub	sp, #12
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
	return -1;
 80121c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	370c      	adds	r7, #12
 80121ca:	46bd      	mov	sp, r7
 80121cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d0:	4770      	bx	lr

080121d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80121d2:	b480      	push	{r7}
 80121d4:	b083      	sub	sp, #12
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
 80121da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80121e2:	605a      	str	r2, [r3, #4]
	return 0;
 80121e4:	2300      	movs	r3, #0
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	370c      	adds	r7, #12
 80121ea:	46bd      	mov	sp, r7
 80121ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f0:	4770      	bx	lr

080121f2 <_isatty>:

int _isatty(int file)
{
 80121f2:	b480      	push	{r7}
 80121f4:	b083      	sub	sp, #12
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
	return 1;
 80121fa:	2301      	movs	r3, #1
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	370c      	adds	r7, #12
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr

08012208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012208:	b480      	push	{r7}
 801220a:	b085      	sub	sp, #20
 801220c:	af00      	add	r7, sp, #0
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	60b9      	str	r1, [r7, #8]
 8012212:	607a      	str	r2, [r7, #4]
	return 0;
 8012214:	2300      	movs	r3, #0
}
 8012216:	4618      	mov	r0, r3
 8012218:	3714      	adds	r7, #20
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr
	...

08012224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b086      	sub	sp, #24
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801222c:	4a14      	ldr	r2, [pc, #80]	; (8012280 <_sbrk+0x5c>)
 801222e:	4b15      	ldr	r3, [pc, #84]	; (8012284 <_sbrk+0x60>)
 8012230:	1ad3      	subs	r3, r2, r3
 8012232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012238:	4b13      	ldr	r3, [pc, #76]	; (8012288 <_sbrk+0x64>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d102      	bne.n	8012246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012240:	4b11      	ldr	r3, [pc, #68]	; (8012288 <_sbrk+0x64>)
 8012242:	4a12      	ldr	r2, [pc, #72]	; (801228c <_sbrk+0x68>)
 8012244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012246:	4b10      	ldr	r3, [pc, #64]	; (8012288 <_sbrk+0x64>)
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	4413      	add	r3, r2
 801224e:	693a      	ldr	r2, [r7, #16]
 8012250:	429a      	cmp	r2, r3
 8012252:	d207      	bcs.n	8012264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012254:	f00e f976 	bl	8020544 <__errno>
 8012258:	4603      	mov	r3, r0
 801225a:	220c      	movs	r2, #12
 801225c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801225e:	f04f 33ff 	mov.w	r3, #4294967295
 8012262:	e009      	b.n	8012278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012264:	4b08      	ldr	r3, [pc, #32]	; (8012288 <_sbrk+0x64>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801226a:	4b07      	ldr	r3, [pc, #28]	; (8012288 <_sbrk+0x64>)
 801226c:	681a      	ldr	r2, [r3, #0]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	4413      	add	r3, r2
 8012272:	4a05      	ldr	r2, [pc, #20]	; (8012288 <_sbrk+0x64>)
 8012274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012276:	68fb      	ldr	r3, [r7, #12]
}
 8012278:	4618      	mov	r0, r3
 801227a:	3718      	adds	r7, #24
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	20020000 	.word	0x20020000
 8012284:	00000400 	.word	0x00000400
 8012288:	20000420 	.word	0x20000420
 801228c:	20004e08 	.word	0x20004e08

08012290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012290:	b480      	push	{r7}
 8012292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012294:	4b06      	ldr	r3, [pc, #24]	; (80122b0 <SystemInit+0x20>)
 8012296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801229a:	4a05      	ldr	r2, [pc, #20]	; (80122b0 <SystemInit+0x20>)
 801229c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80122a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80122a4:	bf00      	nop
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	e000ed00 	.word	0xe000ed00

080122b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80122b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80122ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80122b8:	480d      	ldr	r0, [pc, #52]	; (80122f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80122ba:	490e      	ldr	r1, [pc, #56]	; (80122f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80122bc:	4a0e      	ldr	r2, [pc, #56]	; (80122f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80122be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80122c0:	e002      	b.n	80122c8 <LoopCopyDataInit>

080122c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80122c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80122c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80122c6:	3304      	adds	r3, #4

080122c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80122c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80122ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80122cc:	d3f9      	bcc.n	80122c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80122ce:	4a0b      	ldr	r2, [pc, #44]	; (80122fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80122d0:	4c0b      	ldr	r4, [pc, #44]	; (8012300 <LoopFillZerobss+0x26>)
  movs r3, #0
 80122d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80122d4:	e001      	b.n	80122da <LoopFillZerobss>

080122d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80122d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80122d8:	3204      	adds	r2, #4

080122da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80122da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80122dc:	d3fb      	bcc.n	80122d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80122de:	f7ff ffd7 	bl	8012290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80122e2:	f00e f935 	bl	8020550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80122e6:	f7fe fd7f 	bl	8010de8 <main>
  bx  lr    
 80122ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80122ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80122f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80122f4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80122f8:	0802a8ac 	.word	0x0802a8ac
  ldr r2, =_sbss
 80122fc:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8012300:	20004e04 	.word	0x20004e04

08012304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012304:	e7fe      	b.n	8012304 <ADC_IRQHandler>
	...

08012308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801230c:	4b0e      	ldr	r3, [pc, #56]	; (8012348 <HAL_Init+0x40>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	4a0d      	ldr	r2, [pc, #52]	; (8012348 <HAL_Init+0x40>)
 8012312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012316:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8012318:	4b0b      	ldr	r3, [pc, #44]	; (8012348 <HAL_Init+0x40>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	4a0a      	ldr	r2, [pc, #40]	; (8012348 <HAL_Init+0x40>)
 801231e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012322:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8012324:	4b08      	ldr	r3, [pc, #32]	; (8012348 <HAL_Init+0x40>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	4a07      	ldr	r2, [pc, #28]	; (8012348 <HAL_Init+0x40>)
 801232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801232e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012330:	2003      	movs	r0, #3
 8012332:	f000 fd14 	bl	8012d5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8012336:	200f      	movs	r0, #15
 8012338:	f7ff fe38 	bl	8011fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801233c:	f7ff fba0 	bl	8011a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8012340:	2300      	movs	r3, #0
}
 8012342:	4618      	mov	r0, r3
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	40023c00 	.word	0x40023c00

0801234c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801234c:	b480      	push	{r7}
 801234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8012350:	4b06      	ldr	r3, [pc, #24]	; (801236c <HAL_IncTick+0x20>)
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	461a      	mov	r2, r3
 8012356:	4b06      	ldr	r3, [pc, #24]	; (8012370 <HAL_IncTick+0x24>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	4413      	add	r3, r2
 801235c:	4a04      	ldr	r2, [pc, #16]	; (8012370 <HAL_IncTick+0x24>)
 801235e:	6013      	str	r3, [r2, #0]
}
 8012360:	bf00      	nop
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	20000008 	.word	0x20000008
 8012370:	2000478c 	.word	0x2000478c

08012374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012374:	b480      	push	{r7}
 8012376:	af00      	add	r7, sp, #0
  return uwTick;
 8012378:	4b03      	ldr	r3, [pc, #12]	; (8012388 <HAL_GetTick+0x14>)
 801237a:	681b      	ldr	r3, [r3, #0]
}
 801237c:	4618      	mov	r0, r3
 801237e:	46bd      	mov	sp, r7
 8012380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012384:	4770      	bx	lr
 8012386:	bf00      	nop
 8012388:	2000478c 	.word	0x2000478c

0801238c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012394:	f7ff ffee 	bl	8012374 <HAL_GetTick>
 8012398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123a4:	d005      	beq.n	80123b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80123a6:	4b0a      	ldr	r3, [pc, #40]	; (80123d0 <HAL_Delay+0x44>)
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	461a      	mov	r2, r3
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	4413      	add	r3, r2
 80123b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80123b2:	bf00      	nop
 80123b4:	f7ff ffde 	bl	8012374 <HAL_GetTick>
 80123b8:	4602      	mov	r2, r0
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	1ad3      	subs	r3, r2, r3
 80123be:	68fa      	ldr	r2, [r7, #12]
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d8f7      	bhi.n	80123b4 <HAL_Delay+0x28>
  {
  }
}
 80123c4:	bf00      	nop
 80123c6:	bf00      	nop
 80123c8:	3710      	adds	r7, #16
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	20000008 	.word	0x20000008

080123d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b084      	sub	sp, #16
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80123dc:	2300      	movs	r3, #0
 80123de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d101      	bne.n	80123ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80123e6:	2301      	movs	r3, #1
 80123e8:	e033      	b.n	8012452 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d109      	bne.n	8012406 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f7ff fb70 	bl	8011ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2200      	movs	r2, #0
 80123fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2200      	movs	r2, #0
 8012402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801240a:	f003 0310 	and.w	r3, r3, #16
 801240e:	2b00      	cmp	r3, #0
 8012410:	d118      	bne.n	8012444 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012416:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801241a:	f023 0302 	bic.w	r3, r3, #2
 801241e:	f043 0202 	orr.w	r2, r3, #2
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f000 fa6e 	bl	8012908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2200      	movs	r2, #0
 8012430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012436:	f023 0303 	bic.w	r3, r3, #3
 801243a:	f043 0201 	orr.w	r2, r3, #1
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	641a      	str	r2, [r3, #64]	; 0x40
 8012442:	e001      	b.n	8012448 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8012444:	2301      	movs	r3, #1
 8012446:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2200      	movs	r2, #0
 801244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8012450:	7bfb      	ldrb	r3, [r7, #15]
}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
	...

0801245c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b086      	sub	sp, #24
 8012460:	af00      	add	r7, sp, #0
 8012462:	60f8      	str	r0, [r7, #12]
 8012464:	60b9      	str	r1, [r7, #8]
 8012466:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8012468:	2300      	movs	r3, #0
 801246a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012472:	2b01      	cmp	r3, #1
 8012474:	d101      	bne.n	801247a <HAL_ADC_Start_DMA+0x1e>
 8012476:	2302      	movs	r3, #2
 8012478:	e0e9      	b.n	801264e <HAL_ADC_Start_DMA+0x1f2>
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	2201      	movs	r2, #1
 801247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	689b      	ldr	r3, [r3, #8]
 8012488:	f003 0301 	and.w	r3, r3, #1
 801248c:	2b01      	cmp	r3, #1
 801248e:	d018      	beq.n	80124c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	689a      	ldr	r2, [r3, #8]
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f042 0201 	orr.w	r2, r2, #1
 801249e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80124a0:	4b6d      	ldr	r3, [pc, #436]	; (8012658 <HAL_ADC_Start_DMA+0x1fc>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4a6d      	ldr	r2, [pc, #436]	; (801265c <HAL_ADC_Start_DMA+0x200>)
 80124a6:	fba2 2303 	umull	r2, r3, r2, r3
 80124aa:	0c9a      	lsrs	r2, r3, #18
 80124ac:	4613      	mov	r3, r2
 80124ae:	005b      	lsls	r3, r3, #1
 80124b0:	4413      	add	r3, r2
 80124b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80124b4:	e002      	b.n	80124bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	3b01      	subs	r3, #1
 80124ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d1f9      	bne.n	80124b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	689b      	ldr	r3, [r3, #8]
 80124c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124d0:	d107      	bne.n	80124e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	689a      	ldr	r2, [r3, #8]
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80124e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	689b      	ldr	r3, [r3, #8]
 80124e8:	f003 0301 	and.w	r3, r3, #1
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	f040 80a1 	bne.w	8012634 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80124fa:	f023 0301 	bic.w	r3, r3, #1
 80124fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	685b      	ldr	r3, [r3, #4]
 801250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012510:	2b00      	cmp	r3, #0
 8012512:	d007      	beq.n	8012524 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012518:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801251c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801252c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012530:	d106      	bne.n	8012540 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012536:	f023 0206 	bic.w	r2, r3, #6
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	645a      	str	r2, [r3, #68]	; 0x44
 801253e:	e002      	b.n	8012546 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	2200      	movs	r2, #0
 8012544:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	2200      	movs	r2, #0
 801254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801254e:	4b44      	ldr	r3, [pc, #272]	; (8012660 <HAL_ADC_Start_DMA+0x204>)
 8012550:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012556:	4a43      	ldr	r2, [pc, #268]	; (8012664 <HAL_ADC_Start_DMA+0x208>)
 8012558:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801255e:	4a42      	ldr	r2, [pc, #264]	; (8012668 <HAL_ADC_Start_DMA+0x20c>)
 8012560:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012566:	4a41      	ldr	r2, [pc, #260]	; (801266c <HAL_ADC_Start_DMA+0x210>)
 8012568:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8012572:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	685a      	ldr	r2, [r3, #4]
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8012582:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	689a      	ldr	r2, [r3, #8]
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012592:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	334c      	adds	r3, #76	; 0x4c
 801259e:	4619      	mov	r1, r3
 80125a0:	68ba      	ldr	r2, [r7, #8]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f000 fcbe 	bl	8012f24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	f003 031f 	and.w	r3, r3, #31
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d12a      	bne.n	801260a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4a2d      	ldr	r2, [pc, #180]	; (8012670 <HAL_ADC_Start_DMA+0x214>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d015      	beq.n	80125ea <HAL_ADC_Start_DMA+0x18e>
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	4a2c      	ldr	r2, [pc, #176]	; (8012674 <HAL_ADC_Start_DMA+0x218>)
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d105      	bne.n	80125d4 <HAL_ADC_Start_DMA+0x178>
 80125c8:	4b25      	ldr	r3, [pc, #148]	; (8012660 <HAL_ADC_Start_DMA+0x204>)
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	f003 031f 	and.w	r3, r3, #31
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d00a      	beq.n	80125ea <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	4a27      	ldr	r2, [pc, #156]	; (8012678 <HAL_ADC_Start_DMA+0x21c>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	d136      	bne.n	801264c <HAL_ADC_Start_DMA+0x1f0>
 80125de:	4b20      	ldr	r3, [pc, #128]	; (8012660 <HAL_ADC_Start_DMA+0x204>)
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	f003 0310 	and.w	r3, r3, #16
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d130      	bne.n	801264c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	689b      	ldr	r3, [r3, #8]
 80125f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d129      	bne.n	801264c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	689a      	ldr	r2, [r3, #8]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8012606:	609a      	str	r2, [r3, #8]
 8012608:	e020      	b.n	801264c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	4a18      	ldr	r2, [pc, #96]	; (8012670 <HAL_ADC_Start_DMA+0x214>)
 8012610:	4293      	cmp	r3, r2
 8012612:	d11b      	bne.n	801264c <HAL_ADC_Start_DMA+0x1f0>
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	689b      	ldr	r3, [r3, #8]
 801261a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801261e:	2b00      	cmp	r3, #0
 8012620:	d114      	bne.n	801264c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	689a      	ldr	r2, [r3, #8]
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8012630:	609a      	str	r2, [r3, #8]
 8012632:	e00b      	b.n	801264c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012638:	f043 0210 	orr.w	r2, r3, #16
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012644:	f043 0201 	orr.w	r2, r3, #1
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801264c:	2300      	movs	r3, #0
}
 801264e:	4618      	mov	r0, r3
 8012650:	3718      	adds	r7, #24
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	20000000 	.word	0x20000000
 801265c:	431bde83 	.word	0x431bde83
 8012660:	40012300 	.word	0x40012300
 8012664:	08012b01 	.word	0x08012b01
 8012668:	08012bbb 	.word	0x08012bbb
 801266c:	08012bd7 	.word	0x08012bd7
 8012670:	40012000 	.word	0x40012000
 8012674:	40012100 	.word	0x40012100
 8012678:	40012200 	.word	0x40012200

0801267c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801267c:	b480      	push	{r7}
 801267e:	b083      	sub	sp, #12
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8012684:	bf00      	nop
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr

08012690 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8012698:	bf00      	nop
 801269a:	370c      	adds	r7, #12
 801269c:	46bd      	mov	sp, r7
 801269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a2:	4770      	bx	lr

080126a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80126a4:	b480      	push	{r7}
 80126a6:	b085      	sub	sp, #20
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80126ae:	2300      	movs	r3, #0
 80126b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	d101      	bne.n	80126c0 <HAL_ADC_ConfigChannel+0x1c>
 80126bc:	2302      	movs	r3, #2
 80126be:	e113      	b.n	80128e8 <HAL_ADC_ConfigChannel+0x244>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2201      	movs	r2, #1
 80126c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b09      	cmp	r3, #9
 80126ce:	d925      	bls.n	801271c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	68d9      	ldr	r1, [r3, #12]
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	b29b      	uxth	r3, r3
 80126dc:	461a      	mov	r2, r3
 80126de:	4613      	mov	r3, r2
 80126e0:	005b      	lsls	r3, r3, #1
 80126e2:	4413      	add	r3, r2
 80126e4:	3b1e      	subs	r3, #30
 80126e6:	2207      	movs	r2, #7
 80126e8:	fa02 f303 	lsl.w	r3, r2, r3
 80126ec:	43da      	mvns	r2, r3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	400a      	ands	r2, r1
 80126f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	68d9      	ldr	r1, [r3, #12]
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	689a      	ldr	r2, [r3, #8]
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	b29b      	uxth	r3, r3
 8012706:	4618      	mov	r0, r3
 8012708:	4603      	mov	r3, r0
 801270a:	005b      	lsls	r3, r3, #1
 801270c:	4403      	add	r3, r0
 801270e:	3b1e      	subs	r3, #30
 8012710:	409a      	lsls	r2, r3
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	430a      	orrs	r2, r1
 8012718:	60da      	str	r2, [r3, #12]
 801271a:	e022      	b.n	8012762 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	6919      	ldr	r1, [r3, #16]
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	b29b      	uxth	r3, r3
 8012728:	461a      	mov	r2, r3
 801272a:	4613      	mov	r3, r2
 801272c:	005b      	lsls	r3, r3, #1
 801272e:	4413      	add	r3, r2
 8012730:	2207      	movs	r2, #7
 8012732:	fa02 f303 	lsl.w	r3, r2, r3
 8012736:	43da      	mvns	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	400a      	ands	r2, r1
 801273e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	6919      	ldr	r1, [r3, #16]
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	689a      	ldr	r2, [r3, #8]
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	b29b      	uxth	r3, r3
 8012750:	4618      	mov	r0, r3
 8012752:	4603      	mov	r3, r0
 8012754:	005b      	lsls	r3, r3, #1
 8012756:	4403      	add	r3, r0
 8012758:	409a      	lsls	r2, r3
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	430a      	orrs	r2, r1
 8012760:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	2b06      	cmp	r3, #6
 8012768:	d824      	bhi.n	80127b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	685a      	ldr	r2, [r3, #4]
 8012774:	4613      	mov	r3, r2
 8012776:	009b      	lsls	r3, r3, #2
 8012778:	4413      	add	r3, r2
 801277a:	3b05      	subs	r3, #5
 801277c:	221f      	movs	r2, #31
 801277e:	fa02 f303 	lsl.w	r3, r2, r3
 8012782:	43da      	mvns	r2, r3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	400a      	ands	r2, r1
 801278a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	b29b      	uxth	r3, r3
 8012798:	4618      	mov	r0, r3
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	685a      	ldr	r2, [r3, #4]
 801279e:	4613      	mov	r3, r2
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	4413      	add	r3, r2
 80127a4:	3b05      	subs	r3, #5
 80127a6:	fa00 f203 	lsl.w	r2, r0, r3
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	430a      	orrs	r2, r1
 80127b0:	635a      	str	r2, [r3, #52]	; 0x34
 80127b2:	e04c      	b.n	801284e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	2b0c      	cmp	r3, #12
 80127ba:	d824      	bhi.n	8012806 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	685a      	ldr	r2, [r3, #4]
 80127c6:	4613      	mov	r3, r2
 80127c8:	009b      	lsls	r3, r3, #2
 80127ca:	4413      	add	r3, r2
 80127cc:	3b23      	subs	r3, #35	; 0x23
 80127ce:	221f      	movs	r2, #31
 80127d0:	fa02 f303 	lsl.w	r3, r2, r3
 80127d4:	43da      	mvns	r2, r3
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	400a      	ands	r2, r1
 80127dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	4618      	mov	r0, r3
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	685a      	ldr	r2, [r3, #4]
 80127f0:	4613      	mov	r3, r2
 80127f2:	009b      	lsls	r3, r3, #2
 80127f4:	4413      	add	r3, r2
 80127f6:	3b23      	subs	r3, #35	; 0x23
 80127f8:	fa00 f203 	lsl.w	r2, r0, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	430a      	orrs	r2, r1
 8012802:	631a      	str	r2, [r3, #48]	; 0x30
 8012804:	e023      	b.n	801284e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	685a      	ldr	r2, [r3, #4]
 8012810:	4613      	mov	r3, r2
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	4413      	add	r3, r2
 8012816:	3b41      	subs	r3, #65	; 0x41
 8012818:	221f      	movs	r2, #31
 801281a:	fa02 f303 	lsl.w	r3, r2, r3
 801281e:	43da      	mvns	r2, r3
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	400a      	ands	r2, r1
 8012826:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	b29b      	uxth	r3, r3
 8012834:	4618      	mov	r0, r3
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	685a      	ldr	r2, [r3, #4]
 801283a:	4613      	mov	r3, r2
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	4413      	add	r3, r2
 8012840:	3b41      	subs	r3, #65	; 0x41
 8012842:	fa00 f203 	lsl.w	r2, r0, r3
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	430a      	orrs	r2, r1
 801284c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801284e:	4b29      	ldr	r3, [pc, #164]	; (80128f4 <HAL_ADC_ConfigChannel+0x250>)
 8012850:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4a28      	ldr	r2, [pc, #160]	; (80128f8 <HAL_ADC_ConfigChannel+0x254>)
 8012858:	4293      	cmp	r3, r2
 801285a:	d10f      	bne.n	801287c <HAL_ADC_ConfigChannel+0x1d8>
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2b12      	cmp	r3, #18
 8012862:	d10b      	bne.n	801287c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4a1d      	ldr	r2, [pc, #116]	; (80128f8 <HAL_ADC_ConfigChannel+0x254>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d12b      	bne.n	80128de <HAL_ADC_ConfigChannel+0x23a>
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4a1c      	ldr	r2, [pc, #112]	; (80128fc <HAL_ADC_ConfigChannel+0x258>)
 801288c:	4293      	cmp	r3, r2
 801288e:	d003      	beq.n	8012898 <HAL_ADC_ConfigChannel+0x1f4>
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b11      	cmp	r3, #17
 8012896:	d122      	bne.n	80128de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	4a11      	ldr	r2, [pc, #68]	; (80128fc <HAL_ADC_ConfigChannel+0x258>)
 80128b6:	4293      	cmp	r3, r2
 80128b8:	d111      	bne.n	80128de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80128ba:	4b11      	ldr	r3, [pc, #68]	; (8012900 <HAL_ADC_ConfigChannel+0x25c>)
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	4a11      	ldr	r2, [pc, #68]	; (8012904 <HAL_ADC_ConfigChannel+0x260>)
 80128c0:	fba2 2303 	umull	r2, r3, r2, r3
 80128c4:	0c9a      	lsrs	r2, r3, #18
 80128c6:	4613      	mov	r3, r2
 80128c8:	009b      	lsls	r3, r3, #2
 80128ca:	4413      	add	r3, r2
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80128d0:	e002      	b.n	80128d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	3b01      	subs	r3, #1
 80128d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d1f9      	bne.n	80128d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2200      	movs	r2, #0
 80128e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3714      	adds	r7, #20
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr
 80128f4:	40012300 	.word	0x40012300
 80128f8:	40012000 	.word	0x40012000
 80128fc:	10000012 	.word	0x10000012
 8012900:	20000000 	.word	0x20000000
 8012904:	431bde83 	.word	0x431bde83

08012908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8012908:	b480      	push	{r7}
 801290a:	b085      	sub	sp, #20
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8012910:	4b79      	ldr	r3, [pc, #484]	; (8012af8 <ADC_Init+0x1f0>)
 8012912:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	685a      	ldr	r2, [r3, #4]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	431a      	orrs	r2, r3
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	685a      	ldr	r2, [r3, #4]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801293c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	6859      	ldr	r1, [r3, #4]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	691b      	ldr	r3, [r3, #16]
 8012948:	021a      	lsls	r2, r3, #8
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	430a      	orrs	r2, r1
 8012950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	685a      	ldr	r2, [r3, #4]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8012960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	6859      	ldr	r1, [r3, #4]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	689a      	ldr	r2, [r3, #8]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	430a      	orrs	r2, r1
 8012972:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	689a      	ldr	r2, [r3, #8]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	6899      	ldr	r1, [r3, #8]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	68da      	ldr	r2, [r3, #12]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	430a      	orrs	r2, r1
 8012994:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801299a:	4a58      	ldr	r2, [pc, #352]	; (8012afc <ADC_Init+0x1f4>)
 801299c:	4293      	cmp	r3, r2
 801299e:	d022      	beq.n	80129e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	689a      	ldr	r2, [r3, #8]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80129ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	6899      	ldr	r1, [r3, #8]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	430a      	orrs	r2, r1
 80129c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	689a      	ldr	r2, [r3, #8]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80129d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	6899      	ldr	r1, [r3, #8]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	430a      	orrs	r2, r1
 80129e2:	609a      	str	r2, [r3, #8]
 80129e4:	e00f      	b.n	8012a06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	689a      	ldr	r2, [r3, #8]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80129f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	689a      	ldr	r2, [r3, #8]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012a04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	689a      	ldr	r2, [r3, #8]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f022 0202 	bic.w	r2, r2, #2
 8012a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	6899      	ldr	r1, [r3, #8]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	7e1b      	ldrb	r3, [r3, #24]
 8012a20:	005a      	lsls	r2, r3, #1
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	430a      	orrs	r2, r1
 8012a28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d01b      	beq.n	8012a6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	685a      	ldr	r2, [r3, #4]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012a42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	685a      	ldr	r2, [r3, #4]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8012a52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	6859      	ldr	r1, [r3, #4]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a5e:	3b01      	subs	r3, #1
 8012a60:	035a      	lsls	r2, r3, #13
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	430a      	orrs	r2, r1
 8012a68:	605a      	str	r2, [r3, #4]
 8012a6a:	e007      	b.n	8012a7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	685a      	ldr	r2, [r3, #4]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8012a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	69db      	ldr	r3, [r3, #28]
 8012a96:	3b01      	subs	r3, #1
 8012a98:	051a      	lsls	r2, r3, #20
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	430a      	orrs	r2, r1
 8012aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	689a      	ldr	r2, [r3, #8]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	6899      	ldr	r1, [r3, #8]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012abe:	025a      	lsls	r2, r3, #9
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	430a      	orrs	r2, r1
 8012ac6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	689a      	ldr	r2, [r3, #8]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	6899      	ldr	r1, [r3, #8]
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	695b      	ldr	r3, [r3, #20]
 8012ae2:	029a      	lsls	r2, r3, #10
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	430a      	orrs	r2, r1
 8012aea:	609a      	str	r2, [r3, #8]
}
 8012aec:	bf00      	nop
 8012aee:	3714      	adds	r7, #20
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr
 8012af8:	40012300 	.word	0x40012300
 8012afc:	0f000001 	.word	0x0f000001

08012b00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d13c      	bne.n	8012b94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	689b      	ldr	r3, [r3, #8]
 8012b2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d12b      	bne.n	8012b8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d127      	bne.n	8012b8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d006      	beq.n	8012b58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	689b      	ldr	r3, [r3, #8]
 8012b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d119      	bne.n	8012b8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	685a      	ldr	r2, [r3, #4]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f022 0220 	bic.w	r2, r2, #32
 8012b66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d105      	bne.n	8012b8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b84:	f043 0201 	orr.w	r2, r3, #1
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8012b8c:	68f8      	ldr	r0, [r7, #12]
 8012b8e:	f00c f88f 	bl	801ecb0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8012b92:	e00e      	b.n	8012bb2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b98:	f003 0310 	and.w	r3, r3, #16
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d003      	beq.n	8012ba8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8012ba0:	68f8      	ldr	r0, [r7, #12]
 8012ba2:	f7ff fd75 	bl	8012690 <HAL_ADC_ErrorCallback>
}
 8012ba6:	e004      	b.n	8012bb2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	4798      	blx	r3
}
 8012bb2:	bf00      	nop
 8012bb4:	3710      	adds	r7, #16
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}

08012bba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8012bba:	b580      	push	{r7, lr}
 8012bbc:	b084      	sub	sp, #16
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bc6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8012bc8:	68f8      	ldr	r0, [r7, #12]
 8012bca:	f7ff fd57 	bl	801267c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8012bce:	bf00      	nop
 8012bd0:	3710      	adds	r7, #16
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b084      	sub	sp, #16
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012be2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2240      	movs	r2, #64	; 0x40
 8012be8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bee:	f043 0204 	orr.w	r2, r3, #4
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8012bf6:	68f8      	ldr	r0, [r7, #12]
 8012bf8:	f7ff fd4a 	bl	8012690 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8012bfc:	bf00      	nop
 8012bfe:	3710      	adds	r7, #16
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012c04:	b480      	push	{r7}
 8012c06:	b085      	sub	sp, #20
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f003 0307 	and.w	r3, r3, #7
 8012c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012c14:	4b0c      	ldr	r3, [pc, #48]	; (8012c48 <__NVIC_SetPriorityGrouping+0x44>)
 8012c16:	68db      	ldr	r3, [r3, #12]
 8012c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012c1a:	68ba      	ldr	r2, [r7, #8]
 8012c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012c20:	4013      	ands	r3, r2
 8012c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012c36:	4a04      	ldr	r2, [pc, #16]	; (8012c48 <__NVIC_SetPriorityGrouping+0x44>)
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	60d3      	str	r3, [r2, #12]
}
 8012c3c:	bf00      	nop
 8012c3e:	3714      	adds	r7, #20
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr
 8012c48:	e000ed00 	.word	0xe000ed00

08012c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012c50:	4b04      	ldr	r3, [pc, #16]	; (8012c64 <__NVIC_GetPriorityGrouping+0x18>)
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	0a1b      	lsrs	r3, r3, #8
 8012c56:	f003 0307 	and.w	r3, r3, #7
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr
 8012c64:	e000ed00 	.word	0xe000ed00

08012c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	4603      	mov	r3, r0
 8012c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	db0b      	blt.n	8012c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012c7a:	79fb      	ldrb	r3, [r7, #7]
 8012c7c:	f003 021f 	and.w	r2, r3, #31
 8012c80:	4907      	ldr	r1, [pc, #28]	; (8012ca0 <__NVIC_EnableIRQ+0x38>)
 8012c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c86:	095b      	lsrs	r3, r3, #5
 8012c88:	2001      	movs	r0, #1
 8012c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8012c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012c92:	bf00      	nop
 8012c94:	370c      	adds	r7, #12
 8012c96:	46bd      	mov	sp, r7
 8012c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9c:	4770      	bx	lr
 8012c9e:	bf00      	nop
 8012ca0:	e000e100 	.word	0xe000e100

08012ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	4603      	mov	r3, r0
 8012cac:	6039      	str	r1, [r7, #0]
 8012cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	db0a      	blt.n	8012cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	b2da      	uxtb	r2, r3
 8012cbc:	490c      	ldr	r1, [pc, #48]	; (8012cf0 <__NVIC_SetPriority+0x4c>)
 8012cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cc2:	0112      	lsls	r2, r2, #4
 8012cc4:	b2d2      	uxtb	r2, r2
 8012cc6:	440b      	add	r3, r1
 8012cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012ccc:	e00a      	b.n	8012ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	b2da      	uxtb	r2, r3
 8012cd2:	4908      	ldr	r1, [pc, #32]	; (8012cf4 <__NVIC_SetPriority+0x50>)
 8012cd4:	79fb      	ldrb	r3, [r7, #7]
 8012cd6:	f003 030f 	and.w	r3, r3, #15
 8012cda:	3b04      	subs	r3, #4
 8012cdc:	0112      	lsls	r2, r2, #4
 8012cde:	b2d2      	uxtb	r2, r2
 8012ce0:	440b      	add	r3, r1
 8012ce2:	761a      	strb	r2, [r3, #24]
}
 8012ce4:	bf00      	nop
 8012ce6:	370c      	adds	r7, #12
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr
 8012cf0:	e000e100 	.word	0xe000e100
 8012cf4:	e000ed00 	.word	0xe000ed00

08012cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b089      	sub	sp, #36	; 0x24
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	60f8      	str	r0, [r7, #12]
 8012d00:	60b9      	str	r1, [r7, #8]
 8012d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	f003 0307 	and.w	r3, r3, #7
 8012d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012d0c:	69fb      	ldr	r3, [r7, #28]
 8012d0e:	f1c3 0307 	rsb	r3, r3, #7
 8012d12:	2b04      	cmp	r3, #4
 8012d14:	bf28      	it	cs
 8012d16:	2304      	movcs	r3, #4
 8012d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012d1a:	69fb      	ldr	r3, [r7, #28]
 8012d1c:	3304      	adds	r3, #4
 8012d1e:	2b06      	cmp	r3, #6
 8012d20:	d902      	bls.n	8012d28 <NVIC_EncodePriority+0x30>
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	3b03      	subs	r3, #3
 8012d26:	e000      	b.n	8012d2a <NVIC_EncodePriority+0x32>
 8012d28:	2300      	movs	r3, #0
 8012d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8012d30:	69bb      	ldr	r3, [r7, #24]
 8012d32:	fa02 f303 	lsl.w	r3, r2, r3
 8012d36:	43da      	mvns	r2, r3
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	401a      	ands	r2, r3
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012d40:	f04f 31ff 	mov.w	r1, #4294967295
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	fa01 f303 	lsl.w	r3, r1, r3
 8012d4a:	43d9      	mvns	r1, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012d50:	4313      	orrs	r3, r2
         );
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3724      	adds	r7, #36	; 0x24
 8012d56:	46bd      	mov	sp, r7
 8012d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5c:	4770      	bx	lr

08012d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012d5e:	b580      	push	{r7, lr}
 8012d60:	b082      	sub	sp, #8
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f7ff ff4c 	bl	8012c04 <__NVIC_SetPriorityGrouping>
}
 8012d6c:	bf00      	nop
 8012d6e:	3708      	adds	r7, #8
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}

08012d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b086      	sub	sp, #24
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	60b9      	str	r1, [r7, #8]
 8012d7e:	607a      	str	r2, [r7, #4]
 8012d80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012d82:	2300      	movs	r3, #0
 8012d84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8012d86:	f7ff ff61 	bl	8012c4c <__NVIC_GetPriorityGrouping>
 8012d8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	68b9      	ldr	r1, [r7, #8]
 8012d90:	6978      	ldr	r0, [r7, #20]
 8012d92:	f7ff ffb1 	bl	8012cf8 <NVIC_EncodePriority>
 8012d96:	4602      	mov	r2, r0
 8012d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d9c:	4611      	mov	r1, r2
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7ff ff80 	bl	8012ca4 <__NVIC_SetPriority>
}
 8012da4:	bf00      	nop
 8012da6:	3718      	adds	r7, #24
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	4603      	mov	r3, r0
 8012db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7ff ff54 	bl	8012c68 <__NVIC_EnableIRQ>
}
 8012dc0:	bf00      	nop
 8012dc2:	3708      	adds	r7, #8
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b086      	sub	sp, #24
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8012dd4:	f7ff face 	bl	8012374 <HAL_GetTick>
 8012dd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d101      	bne.n	8012de4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8012de0:	2301      	movs	r3, #1
 8012de2:	e099      	b.n	8012f18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2202      	movs	r2, #2
 8012de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2200      	movs	r2, #0
 8012df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	f022 0201 	bic.w	r2, r2, #1
 8012e02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012e04:	e00f      	b.n	8012e26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012e06:	f7ff fab5 	bl	8012374 <HAL_GetTick>
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	1ad3      	subs	r3, r2, r3
 8012e10:	2b05      	cmp	r3, #5
 8012e12:	d908      	bls.n	8012e26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2220      	movs	r2, #32
 8012e18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2203      	movs	r2, #3
 8012e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8012e22:	2303      	movs	r3, #3
 8012e24:	e078      	b.n	8012f18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	f003 0301 	and.w	r3, r3, #1
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d1e8      	bne.n	8012e06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012e3c:	697a      	ldr	r2, [r7, #20]
 8012e3e:	4b38      	ldr	r3, [pc, #224]	; (8012f20 <HAL_DMA_Init+0x158>)
 8012e40:	4013      	ands	r3, r2
 8012e42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	685a      	ldr	r2, [r3, #4]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	689b      	ldr	r3, [r3, #8]
 8012e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	691b      	ldr	r3, [r3, #16]
 8012e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	699b      	ldr	r3, [r3, #24]
 8012e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6a1b      	ldr	r3, [r3, #32]
 8012e70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012e72:	697a      	ldr	r2, [r7, #20]
 8012e74:	4313      	orrs	r3, r2
 8012e76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e7c:	2b04      	cmp	r3, #4
 8012e7e:	d107      	bne.n	8012e90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e88:	4313      	orrs	r3, r2
 8012e8a:	697a      	ldr	r2, [r7, #20]
 8012e8c:	4313      	orrs	r3, r2
 8012e8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	697a      	ldr	r2, [r7, #20]
 8012e96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	695b      	ldr	r3, [r3, #20]
 8012e9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	f023 0307 	bic.w	r3, r3, #7
 8012ea6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eac:	697a      	ldr	r2, [r7, #20]
 8012eae:	4313      	orrs	r3, r2
 8012eb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb6:	2b04      	cmp	r3, #4
 8012eb8:	d117      	bne.n	8012eea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ebe:	697a      	ldr	r2, [r7, #20]
 8012ec0:	4313      	orrs	r3, r2
 8012ec2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d00e      	beq.n	8012eea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f000 fa6f 	bl	80133b0 <DMA_CheckFifoParam>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d008      	beq.n	8012eea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2240      	movs	r2, #64	; 0x40
 8012edc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	e016      	b.n	8012f18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	697a      	ldr	r2, [r7, #20]
 8012ef0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f000 fa26 	bl	8013344 <DMA_CalcBaseAndBitshift>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f00:	223f      	movs	r2, #63	; 0x3f
 8012f02:	409a      	lsls	r2, r3
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2201      	movs	r2, #1
 8012f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8012f16:	2300      	movs	r3, #0
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3718      	adds	r7, #24
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	f010803f 	.word	0xf010803f

08012f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b086      	sub	sp, #24
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	60f8      	str	r0, [r7, #12]
 8012f2c:	60b9      	str	r1, [r7, #8]
 8012f2e:	607a      	str	r2, [r7, #4]
 8012f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012f32:	2300      	movs	r3, #0
 8012f34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	d101      	bne.n	8012f4a <HAL_DMA_Start_IT+0x26>
 8012f46:	2302      	movs	r3, #2
 8012f48:	e040      	b.n	8012fcc <HAL_DMA_Start_IT+0xa8>
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	2201      	movs	r2, #1
 8012f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012f58:	b2db      	uxtb	r3, r3
 8012f5a:	2b01      	cmp	r3, #1
 8012f5c:	d12f      	bne.n	8012fbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2202      	movs	r2, #2
 8012f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	687a      	ldr	r2, [r7, #4]
 8012f70:	68b9      	ldr	r1, [r7, #8]
 8012f72:	68f8      	ldr	r0, [r7, #12]
 8012f74:	f000 f9b8 	bl	80132e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f7c:	223f      	movs	r2, #63	; 0x3f
 8012f7e:	409a      	lsls	r2, r3
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	f042 0216 	orr.w	r2, r2, #22
 8012f92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d007      	beq.n	8012fac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	f042 0208 	orr.w	r2, r2, #8
 8012faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	681a      	ldr	r2, [r3, #0]
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	f042 0201 	orr.w	r2, r2, #1
 8012fba:	601a      	str	r2, [r3, #0]
 8012fbc:	e005      	b.n	8012fca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8012fc6:	2302      	movs	r3, #2
 8012fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8012fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3718      	adds	r7, #24
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b086      	sub	sp, #24
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8012fe0:	4b92      	ldr	r3, [pc, #584]	; (801322c <HAL_DMA_IRQHandler+0x258>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4a92      	ldr	r2, [pc, #584]	; (8013230 <HAL_DMA_IRQHandler+0x25c>)
 8012fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8012fea:	0a9b      	lsrs	r3, r3, #10
 8012fec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ff2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8012ff4:	693b      	ldr	r3, [r7, #16]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ffe:	2208      	movs	r2, #8
 8013000:	409a      	lsls	r2, r3
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	4013      	ands	r3, r2
 8013006:	2b00      	cmp	r3, #0
 8013008:	d01a      	beq.n	8013040 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	f003 0304 	and.w	r3, r3, #4
 8013014:	2b00      	cmp	r3, #0
 8013016:	d013      	beq.n	8013040 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	f022 0204 	bic.w	r2, r2, #4
 8013026:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801302c:	2208      	movs	r2, #8
 801302e:	409a      	lsls	r2, r3
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013038:	f043 0201 	orr.w	r2, r3, #1
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013044:	2201      	movs	r2, #1
 8013046:	409a      	lsls	r2, r3
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	4013      	ands	r3, r2
 801304c:	2b00      	cmp	r3, #0
 801304e:	d012      	beq.n	8013076 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	695b      	ldr	r3, [r3, #20]
 8013056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801305a:	2b00      	cmp	r3, #0
 801305c:	d00b      	beq.n	8013076 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013062:	2201      	movs	r2, #1
 8013064:	409a      	lsls	r2, r3
 8013066:	693b      	ldr	r3, [r7, #16]
 8013068:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801306e:	f043 0202 	orr.w	r2, r3, #2
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801307a:	2204      	movs	r2, #4
 801307c:	409a      	lsls	r2, r3
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	4013      	ands	r3, r2
 8013082:	2b00      	cmp	r3, #0
 8013084:	d012      	beq.n	80130ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	f003 0302 	and.w	r3, r3, #2
 8013090:	2b00      	cmp	r3, #0
 8013092:	d00b      	beq.n	80130ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013098:	2204      	movs	r2, #4
 801309a:	409a      	lsls	r2, r3
 801309c:	693b      	ldr	r3, [r7, #16]
 801309e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130a4:	f043 0204 	orr.w	r2, r3, #4
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80130b0:	2210      	movs	r2, #16
 80130b2:	409a      	lsls	r2, r3
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	4013      	ands	r3, r2
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d043      	beq.n	8013144 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	f003 0308 	and.w	r3, r3, #8
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d03c      	beq.n	8013144 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80130ce:	2210      	movs	r2, #16
 80130d0:	409a      	lsls	r2, r3
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d018      	beq.n	8013116 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d108      	bne.n	8013104 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d024      	beq.n	8013144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	4798      	blx	r3
 8013102:	e01f      	b.n	8013144 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013108:	2b00      	cmp	r3, #0
 801310a:	d01b      	beq.n	8013144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	4798      	blx	r3
 8013114:	e016      	b.n	8013144 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013120:	2b00      	cmp	r3, #0
 8013122:	d107      	bne.n	8013134 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	681a      	ldr	r2, [r3, #0]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	f022 0208 	bic.w	r2, r2, #8
 8013132:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013138:	2b00      	cmp	r3, #0
 801313a:	d003      	beq.n	8013144 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013148:	2220      	movs	r2, #32
 801314a:	409a      	lsls	r2, r3
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	4013      	ands	r3, r2
 8013150:	2b00      	cmp	r3, #0
 8013152:	f000 808e 	beq.w	8013272 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	f003 0310 	and.w	r3, r3, #16
 8013160:	2b00      	cmp	r3, #0
 8013162:	f000 8086 	beq.w	8013272 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801316a:	2220      	movs	r2, #32
 801316c:	409a      	lsls	r2, r3
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013178:	b2db      	uxtb	r3, r3
 801317a:	2b05      	cmp	r3, #5
 801317c:	d136      	bne.n	80131ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	681a      	ldr	r2, [r3, #0]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	f022 0216 	bic.w	r2, r2, #22
 801318c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	695a      	ldr	r2, [r3, #20]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801319c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d103      	bne.n	80131ae <HAL_DMA_IRQHandler+0x1da>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d007      	beq.n	80131be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	681a      	ldr	r2, [r3, #0]
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	f022 0208 	bic.w	r2, r2, #8
 80131bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131c2:	223f      	movs	r2, #63	; 0x3f
 80131c4:	409a      	lsls	r2, r3
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2201      	movs	r2, #1
 80131ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2200      	movs	r2, #0
 80131d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d07d      	beq.n	80132de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	4798      	blx	r3
        }
        return;
 80131ea:	e078      	b.n	80132de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d01c      	beq.n	8013234 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013204:	2b00      	cmp	r3, #0
 8013206:	d108      	bne.n	801321a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801320c:	2b00      	cmp	r3, #0
 801320e:	d030      	beq.n	8013272 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	4798      	blx	r3
 8013218:	e02b      	b.n	8013272 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801321e:	2b00      	cmp	r3, #0
 8013220:	d027      	beq.n	8013272 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	4798      	blx	r3
 801322a:	e022      	b.n	8013272 <HAL_DMA_IRQHandler+0x29e>
 801322c:	20000000 	.word	0x20000000
 8013230:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801323e:	2b00      	cmp	r3, #0
 8013240:	d10f      	bne.n	8013262 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	681a      	ldr	r2, [r3, #0]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	f022 0210 	bic.w	r2, r2, #16
 8013250:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2201      	movs	r2, #1
 8013256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2200      	movs	r2, #0
 801325e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013266:	2b00      	cmp	r3, #0
 8013268:	d003      	beq.n	8013272 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013276:	2b00      	cmp	r3, #0
 8013278:	d032      	beq.n	80132e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801327e:	f003 0301 	and.w	r3, r3, #1
 8013282:	2b00      	cmp	r3, #0
 8013284:	d022      	beq.n	80132cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2205      	movs	r2, #5
 801328a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	f022 0201 	bic.w	r2, r2, #1
 801329c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	3301      	adds	r3, #1
 80132a2:	60bb      	str	r3, [r7, #8]
 80132a4:	697a      	ldr	r2, [r7, #20]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d307      	bcc.n	80132ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	f003 0301 	and.w	r3, r3, #1
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d1f2      	bne.n	801329e <HAL_DMA_IRQHandler+0x2ca>
 80132b8:	e000      	b.n	80132bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80132ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2201      	movs	r2, #1
 80132c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2200      	movs	r2, #0
 80132c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d005      	beq.n	80132e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	4798      	blx	r3
 80132dc:	e000      	b.n	80132e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80132de:	bf00      	nop
    }
  }
}
 80132e0:	3718      	adds	r7, #24
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop

080132e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80132e8:	b480      	push	{r7}
 80132ea:	b085      	sub	sp, #20
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	607a      	str	r2, [r7, #4]
 80132f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013304:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	683a      	ldr	r2, [r7, #0]
 801330c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	2b40      	cmp	r3, #64	; 0x40
 8013314:	d108      	bne.n	8013328 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	687a      	ldr	r2, [r7, #4]
 801331c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8013326:	e007      	b.n	8013338 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	68ba      	ldr	r2, [r7, #8]
 801332e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	687a      	ldr	r2, [r7, #4]
 8013336:	60da      	str	r2, [r3, #12]
}
 8013338:	bf00      	nop
 801333a:	3714      	adds	r7, #20
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	b2db      	uxtb	r3, r3
 8013352:	3b10      	subs	r3, #16
 8013354:	4a14      	ldr	r2, [pc, #80]	; (80133a8 <DMA_CalcBaseAndBitshift+0x64>)
 8013356:	fba2 2303 	umull	r2, r3, r2, r3
 801335a:	091b      	lsrs	r3, r3, #4
 801335c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801335e:	4a13      	ldr	r2, [pc, #76]	; (80133ac <DMA_CalcBaseAndBitshift+0x68>)
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	4413      	add	r3, r2
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	461a      	mov	r2, r3
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2b03      	cmp	r3, #3
 8013370:	d909      	bls.n	8013386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801337a:	f023 0303 	bic.w	r3, r3, #3
 801337e:	1d1a      	adds	r2, r3, #4
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	659a      	str	r2, [r3, #88]	; 0x58
 8013384:	e007      	b.n	8013396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801338e:	f023 0303 	bic.w	r3, r3, #3
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801339a:	4618      	mov	r0, r3
 801339c:	3714      	adds	r7, #20
 801339e:	46bd      	mov	sp, r7
 80133a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop
 80133a8:	aaaaaaab 	.word	0xaaaaaaab
 80133ac:	080233b0 	.word	0x080233b0

080133b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80133b0:	b480      	push	{r7}
 80133b2:	b085      	sub	sp, #20
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80133b8:	2300      	movs	r3, #0
 80133ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	699b      	ldr	r3, [r3, #24]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d11f      	bne.n	801340a <DMA_CheckFifoParam+0x5a>
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	2b03      	cmp	r3, #3
 80133ce:	d856      	bhi.n	801347e <DMA_CheckFifoParam+0xce>
 80133d0:	a201      	add	r2, pc, #4	; (adr r2, 80133d8 <DMA_CheckFifoParam+0x28>)
 80133d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133d6:	bf00      	nop
 80133d8:	080133e9 	.word	0x080133e9
 80133dc:	080133fb 	.word	0x080133fb
 80133e0:	080133e9 	.word	0x080133e9
 80133e4:	0801347f 	.word	0x0801347f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d046      	beq.n	8013482 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80133f4:	2301      	movs	r3, #1
 80133f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80133f8:	e043      	b.n	8013482 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8013402:	d140      	bne.n	8013486 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8013404:	2301      	movs	r3, #1
 8013406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013408:	e03d      	b.n	8013486 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	699b      	ldr	r3, [r3, #24]
 801340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013412:	d121      	bne.n	8013458 <DMA_CheckFifoParam+0xa8>
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	2b03      	cmp	r3, #3
 8013418:	d837      	bhi.n	801348a <DMA_CheckFifoParam+0xda>
 801341a:	a201      	add	r2, pc, #4	; (adr r2, 8013420 <DMA_CheckFifoParam+0x70>)
 801341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013420:	08013431 	.word	0x08013431
 8013424:	08013437 	.word	0x08013437
 8013428:	08013431 	.word	0x08013431
 801342c:	08013449 	.word	0x08013449
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8013430:	2301      	movs	r3, #1
 8013432:	73fb      	strb	r3, [r7, #15]
      break;
 8013434:	e030      	b.n	8013498 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801343a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801343e:	2b00      	cmp	r3, #0
 8013440:	d025      	beq.n	801348e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8013442:	2301      	movs	r3, #1
 8013444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013446:	e022      	b.n	801348e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801344c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8013450:	d11f      	bne.n	8013492 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8013452:	2301      	movs	r3, #1
 8013454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8013456:	e01c      	b.n	8013492 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	2b02      	cmp	r3, #2
 801345c:	d903      	bls.n	8013466 <DMA_CheckFifoParam+0xb6>
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	2b03      	cmp	r3, #3
 8013462:	d003      	beq.n	801346c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8013464:	e018      	b.n	8013498 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8013466:	2301      	movs	r3, #1
 8013468:	73fb      	strb	r3, [r7, #15]
      break;
 801346a:	e015      	b.n	8013498 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013474:	2b00      	cmp	r3, #0
 8013476:	d00e      	beq.n	8013496 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8013478:	2301      	movs	r3, #1
 801347a:	73fb      	strb	r3, [r7, #15]
      break;
 801347c:	e00b      	b.n	8013496 <DMA_CheckFifoParam+0xe6>
      break;
 801347e:	bf00      	nop
 8013480:	e00a      	b.n	8013498 <DMA_CheckFifoParam+0xe8>
      break;
 8013482:	bf00      	nop
 8013484:	e008      	b.n	8013498 <DMA_CheckFifoParam+0xe8>
      break;
 8013486:	bf00      	nop
 8013488:	e006      	b.n	8013498 <DMA_CheckFifoParam+0xe8>
      break;
 801348a:	bf00      	nop
 801348c:	e004      	b.n	8013498 <DMA_CheckFifoParam+0xe8>
      break;
 801348e:	bf00      	nop
 8013490:	e002      	b.n	8013498 <DMA_CheckFifoParam+0xe8>
      break;   
 8013492:	bf00      	nop
 8013494:	e000      	b.n	8013498 <DMA_CheckFifoParam+0xe8>
      break;
 8013496:	bf00      	nop
    }
  } 
  
  return status; 
 8013498:	7bfb      	ldrb	r3, [r7, #15]
}
 801349a:	4618      	mov	r0, r3
 801349c:	3714      	adds	r7, #20
 801349e:	46bd      	mov	sp, r7
 80134a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a4:	4770      	bx	lr
 80134a6:	bf00      	nop

080134a8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b086      	sub	sp, #24
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80134b6:	2301      	movs	r3, #1
 80134b8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80134ba:	4b23      	ldr	r3, [pc, #140]	; (8013548 <HAL_FLASH_Program+0xa0>)
 80134bc:	7e1b      	ldrb	r3, [r3, #24]
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d101      	bne.n	80134c6 <HAL_FLASH_Program+0x1e>
 80134c2:	2302      	movs	r3, #2
 80134c4:	e03b      	b.n	801353e <HAL_FLASH_Program+0x96>
 80134c6:	4b20      	ldr	r3, [pc, #128]	; (8013548 <HAL_FLASH_Program+0xa0>)
 80134c8:	2201      	movs	r2, #1
 80134ca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80134cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80134d0:	f000 f860 	bl	8013594 <FLASH_WaitForLastOperation>
 80134d4:	4603      	mov	r3, r0
 80134d6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80134d8:	7dfb      	ldrb	r3, [r7, #23]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d12b      	bne.n	8013536 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d105      	bne.n	80134f0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80134e4:	783b      	ldrb	r3, [r7, #0]
 80134e6:	4619      	mov	r1, r3
 80134e8:	68b8      	ldr	r0, [r7, #8]
 80134ea:	f000 f90b 	bl	8013704 <FLASH_Program_Byte>
 80134ee:	e016      	b.n	801351e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	d105      	bne.n	8013502 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80134f6:	883b      	ldrh	r3, [r7, #0]
 80134f8:	4619      	mov	r1, r3
 80134fa:	68b8      	ldr	r0, [r7, #8]
 80134fc:	f000 f8de 	bl	80136bc <FLASH_Program_HalfWord>
 8013500:	e00d      	b.n	801351e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	2b02      	cmp	r3, #2
 8013506:	d105      	bne.n	8013514 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	4619      	mov	r1, r3
 801350c:	68b8      	ldr	r0, [r7, #8]
 801350e:	f000 f8b3 	bl	8013678 <FLASH_Program_Word>
 8013512:	e004      	b.n	801351e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8013514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013518:	68b8      	ldr	r0, [r7, #8]
 801351a:	f000 f87b 	bl	8013614 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801351e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013522:	f000 f837 	bl	8013594 <FLASH_WaitForLastOperation>
 8013526:	4603      	mov	r3, r0
 8013528:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801352a:	4b08      	ldr	r3, [pc, #32]	; (801354c <HAL_FLASH_Program+0xa4>)
 801352c:	691b      	ldr	r3, [r3, #16]
 801352e:	4a07      	ldr	r2, [pc, #28]	; (801354c <HAL_FLASH_Program+0xa4>)
 8013530:	f023 0301 	bic.w	r3, r3, #1
 8013534:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013536:	4b04      	ldr	r3, [pc, #16]	; (8013548 <HAL_FLASH_Program+0xa0>)
 8013538:	2200      	movs	r2, #0
 801353a:	761a      	strb	r2, [r3, #24]
  
  return status;
 801353c:	7dfb      	ldrb	r3, [r7, #23]
}
 801353e:	4618      	mov	r0, r3
 8013540:	3718      	adds	r7, #24
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
 8013546:	bf00      	nop
 8013548:	20004790 	.word	0x20004790
 801354c:	40023c00 	.word	0x40023c00

08013550 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8013550:	b480      	push	{r7}
 8013552:	b083      	sub	sp, #12
 8013554:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8013556:	2300      	movs	r3, #0
 8013558:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801355a:	4b0b      	ldr	r3, [pc, #44]	; (8013588 <HAL_FLASH_Unlock+0x38>)
 801355c:	691b      	ldr	r3, [r3, #16]
 801355e:	2b00      	cmp	r3, #0
 8013560:	da0b      	bge.n	801357a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8013562:	4b09      	ldr	r3, [pc, #36]	; (8013588 <HAL_FLASH_Unlock+0x38>)
 8013564:	4a09      	ldr	r2, [pc, #36]	; (801358c <HAL_FLASH_Unlock+0x3c>)
 8013566:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8013568:	4b07      	ldr	r3, [pc, #28]	; (8013588 <HAL_FLASH_Unlock+0x38>)
 801356a:	4a09      	ldr	r2, [pc, #36]	; (8013590 <HAL_FLASH_Unlock+0x40>)
 801356c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801356e:	4b06      	ldr	r3, [pc, #24]	; (8013588 <HAL_FLASH_Unlock+0x38>)
 8013570:	691b      	ldr	r3, [r3, #16]
 8013572:	2b00      	cmp	r3, #0
 8013574:	da01      	bge.n	801357a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8013576:	2301      	movs	r3, #1
 8013578:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801357a:	79fb      	ldrb	r3, [r7, #7]
}
 801357c:	4618      	mov	r0, r3
 801357e:	370c      	adds	r7, #12
 8013580:	46bd      	mov	sp, r7
 8013582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013586:	4770      	bx	lr
 8013588:	40023c00 	.word	0x40023c00
 801358c:	45670123 	.word	0x45670123
 8013590:	cdef89ab 	.word	0xcdef89ab

08013594 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8013594:	b580      	push	{r7, lr}
 8013596:	b084      	sub	sp, #16
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801359c:	2300      	movs	r3, #0
 801359e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80135a0:	4b1a      	ldr	r3, [pc, #104]	; (801360c <FLASH_WaitForLastOperation+0x78>)
 80135a2:	2200      	movs	r2, #0
 80135a4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80135a6:	f7fe fee5 	bl	8012374 <HAL_GetTick>
 80135aa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80135ac:	e010      	b.n	80135d0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135b4:	d00c      	beq.n	80135d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d007      	beq.n	80135cc <FLASH_WaitForLastOperation+0x38>
 80135bc:	f7fe feda 	bl	8012374 <HAL_GetTick>
 80135c0:	4602      	mov	r2, r0
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	1ad3      	subs	r3, r2, r3
 80135c6:	687a      	ldr	r2, [r7, #4]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d201      	bcs.n	80135d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80135cc:	2303      	movs	r3, #3
 80135ce:	e019      	b.n	8013604 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80135d0:	4b0f      	ldr	r3, [pc, #60]	; (8013610 <FLASH_WaitForLastOperation+0x7c>)
 80135d2:	68db      	ldr	r3, [r3, #12]
 80135d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d1e8      	bne.n	80135ae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80135dc:	4b0c      	ldr	r3, [pc, #48]	; (8013610 <FLASH_WaitForLastOperation+0x7c>)
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	f003 0301 	and.w	r3, r3, #1
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d002      	beq.n	80135ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80135e8:	4b09      	ldr	r3, [pc, #36]	; (8013610 <FLASH_WaitForLastOperation+0x7c>)
 80135ea:	2201      	movs	r2, #1
 80135ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80135ee:	4b08      	ldr	r3, [pc, #32]	; (8013610 <FLASH_WaitForLastOperation+0x7c>)
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d003      	beq.n	8013602 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80135fa:	f000 f8a5 	bl	8013748 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80135fe:	2301      	movs	r3, #1
 8013600:	e000      	b.n	8013604 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8013602:	2300      	movs	r3, #0
  
}  
 8013604:	4618      	mov	r0, r3
 8013606:	3710      	adds	r7, #16
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}
 801360c:	20004790 	.word	0x20004790
 8013610:	40023c00 	.word	0x40023c00

08013614 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8013614:	b480      	push	{r7}
 8013616:	b085      	sub	sp, #20
 8013618:	af00      	add	r7, sp, #0
 801361a:	60f8      	str	r0, [r7, #12]
 801361c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013620:	4b14      	ldr	r3, [pc, #80]	; (8013674 <FLASH_Program_DoubleWord+0x60>)
 8013622:	691b      	ldr	r3, [r3, #16]
 8013624:	4a13      	ldr	r2, [pc, #76]	; (8013674 <FLASH_Program_DoubleWord+0x60>)
 8013626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801362a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 801362c:	4b11      	ldr	r3, [pc, #68]	; (8013674 <FLASH_Program_DoubleWord+0x60>)
 801362e:	691b      	ldr	r3, [r3, #16]
 8013630:	4a10      	ldr	r2, [pc, #64]	; (8013674 <FLASH_Program_DoubleWord+0x60>)
 8013632:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8013636:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013638:	4b0e      	ldr	r3, [pc, #56]	; (8013674 <FLASH_Program_DoubleWord+0x60>)
 801363a:	691b      	ldr	r3, [r3, #16]
 801363c:	4a0d      	ldr	r2, [pc, #52]	; (8013674 <FLASH_Program_DoubleWord+0x60>)
 801363e:	f043 0301 	orr.w	r3, r3, #1
 8013642:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	683a      	ldr	r2, [r7, #0]
 8013648:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 801364a:	f3bf 8f6f 	isb	sy
}
 801364e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8013650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013654:	f04f 0200 	mov.w	r2, #0
 8013658:	f04f 0300 	mov.w	r3, #0
 801365c:	000a      	movs	r2, r1
 801365e:	2300      	movs	r3, #0
 8013660:	68f9      	ldr	r1, [r7, #12]
 8013662:	3104      	adds	r1, #4
 8013664:	4613      	mov	r3, r2
 8013666:	600b      	str	r3, [r1, #0]
}
 8013668:	bf00      	nop
 801366a:	3714      	adds	r7, #20
 801366c:	46bd      	mov	sp, r7
 801366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013672:	4770      	bx	lr
 8013674:	40023c00 	.word	0x40023c00

08013678 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8013678:	b480      	push	{r7}
 801367a:	b083      	sub	sp, #12
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013682:	4b0d      	ldr	r3, [pc, #52]	; (80136b8 <FLASH_Program_Word+0x40>)
 8013684:	691b      	ldr	r3, [r3, #16]
 8013686:	4a0c      	ldr	r2, [pc, #48]	; (80136b8 <FLASH_Program_Word+0x40>)
 8013688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801368c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801368e:	4b0a      	ldr	r3, [pc, #40]	; (80136b8 <FLASH_Program_Word+0x40>)
 8013690:	691b      	ldr	r3, [r3, #16]
 8013692:	4a09      	ldr	r2, [pc, #36]	; (80136b8 <FLASH_Program_Word+0x40>)
 8013694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013698:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801369a:	4b07      	ldr	r3, [pc, #28]	; (80136b8 <FLASH_Program_Word+0x40>)
 801369c:	691b      	ldr	r3, [r3, #16]
 801369e:	4a06      	ldr	r2, [pc, #24]	; (80136b8 <FLASH_Program_Word+0x40>)
 80136a0:	f043 0301 	orr.w	r3, r3, #1
 80136a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	683a      	ldr	r2, [r7, #0]
 80136aa:	601a      	str	r2, [r3, #0]
}
 80136ac:	bf00      	nop
 80136ae:	370c      	adds	r7, #12
 80136b0:	46bd      	mov	sp, r7
 80136b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b6:	4770      	bx	lr
 80136b8:	40023c00 	.word	0x40023c00

080136bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80136bc:	b480      	push	{r7}
 80136be:	b083      	sub	sp, #12
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	460b      	mov	r3, r1
 80136c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80136c8:	4b0d      	ldr	r3, [pc, #52]	; (8013700 <FLASH_Program_HalfWord+0x44>)
 80136ca:	691b      	ldr	r3, [r3, #16]
 80136cc:	4a0c      	ldr	r2, [pc, #48]	; (8013700 <FLASH_Program_HalfWord+0x44>)
 80136ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80136d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80136d4:	4b0a      	ldr	r3, [pc, #40]	; (8013700 <FLASH_Program_HalfWord+0x44>)
 80136d6:	691b      	ldr	r3, [r3, #16]
 80136d8:	4a09      	ldr	r2, [pc, #36]	; (8013700 <FLASH_Program_HalfWord+0x44>)
 80136da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80136de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80136e0:	4b07      	ldr	r3, [pc, #28]	; (8013700 <FLASH_Program_HalfWord+0x44>)
 80136e2:	691b      	ldr	r3, [r3, #16]
 80136e4:	4a06      	ldr	r2, [pc, #24]	; (8013700 <FLASH_Program_HalfWord+0x44>)
 80136e6:	f043 0301 	orr.w	r3, r3, #1
 80136ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	887a      	ldrh	r2, [r7, #2]
 80136f0:	801a      	strh	r2, [r3, #0]
}
 80136f2:	bf00      	nop
 80136f4:	370c      	adds	r7, #12
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr
 80136fe:	bf00      	nop
 8013700:	40023c00 	.word	0x40023c00

08013704 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8013704:	b480      	push	{r7}
 8013706:	b083      	sub	sp, #12
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	460b      	mov	r3, r1
 801370e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013710:	4b0c      	ldr	r3, [pc, #48]	; (8013744 <FLASH_Program_Byte+0x40>)
 8013712:	691b      	ldr	r3, [r3, #16]
 8013714:	4a0b      	ldr	r2, [pc, #44]	; (8013744 <FLASH_Program_Byte+0x40>)
 8013716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801371a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 801371c:	4b09      	ldr	r3, [pc, #36]	; (8013744 <FLASH_Program_Byte+0x40>)
 801371e:	4a09      	ldr	r2, [pc, #36]	; (8013744 <FLASH_Program_Byte+0x40>)
 8013720:	691b      	ldr	r3, [r3, #16]
 8013722:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013724:	4b07      	ldr	r3, [pc, #28]	; (8013744 <FLASH_Program_Byte+0x40>)
 8013726:	691b      	ldr	r3, [r3, #16]
 8013728:	4a06      	ldr	r2, [pc, #24]	; (8013744 <FLASH_Program_Byte+0x40>)
 801372a:	f043 0301 	orr.w	r3, r3, #1
 801372e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	78fa      	ldrb	r2, [r7, #3]
 8013734:	701a      	strb	r2, [r3, #0]
}
 8013736:	bf00      	nop
 8013738:	370c      	adds	r7, #12
 801373a:	46bd      	mov	sp, r7
 801373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013740:	4770      	bx	lr
 8013742:	bf00      	nop
 8013744:	40023c00 	.word	0x40023c00

08013748 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8013748:	b480      	push	{r7}
 801374a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 801374c:	4b2f      	ldr	r3, [pc, #188]	; (801380c <FLASH_SetErrorCode+0xc4>)
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	f003 0310 	and.w	r3, r3, #16
 8013754:	2b00      	cmp	r3, #0
 8013756:	d008      	beq.n	801376a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8013758:	4b2d      	ldr	r3, [pc, #180]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 801375a:	69db      	ldr	r3, [r3, #28]
 801375c:	f043 0310 	orr.w	r3, r3, #16
 8013760:	4a2b      	ldr	r2, [pc, #172]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 8013762:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8013764:	4b29      	ldr	r3, [pc, #164]	; (801380c <FLASH_SetErrorCode+0xc4>)
 8013766:	2210      	movs	r2, #16
 8013768:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801376a:	4b28      	ldr	r3, [pc, #160]	; (801380c <FLASH_SetErrorCode+0xc4>)
 801376c:	68db      	ldr	r3, [r3, #12]
 801376e:	f003 0320 	and.w	r3, r3, #32
 8013772:	2b00      	cmp	r3, #0
 8013774:	d008      	beq.n	8013788 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8013776:	4b26      	ldr	r3, [pc, #152]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 8013778:	69db      	ldr	r3, [r3, #28]
 801377a:	f043 0308 	orr.w	r3, r3, #8
 801377e:	4a24      	ldr	r2, [pc, #144]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 8013780:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8013782:	4b22      	ldr	r3, [pc, #136]	; (801380c <FLASH_SetErrorCode+0xc4>)
 8013784:	2220      	movs	r2, #32
 8013786:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8013788:	4b20      	ldr	r3, [pc, #128]	; (801380c <FLASH_SetErrorCode+0xc4>)
 801378a:	68db      	ldr	r3, [r3, #12]
 801378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013790:	2b00      	cmp	r3, #0
 8013792:	d008      	beq.n	80137a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8013794:	4b1e      	ldr	r3, [pc, #120]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 8013796:	69db      	ldr	r3, [r3, #28]
 8013798:	f043 0304 	orr.w	r3, r3, #4
 801379c:	4a1c      	ldr	r2, [pc, #112]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 801379e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80137a0:	4b1a      	ldr	r3, [pc, #104]	; (801380c <FLASH_SetErrorCode+0xc4>)
 80137a2:	2240      	movs	r2, #64	; 0x40
 80137a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80137a6:	4b19      	ldr	r3, [pc, #100]	; (801380c <FLASH_SetErrorCode+0xc4>)
 80137a8:	68db      	ldr	r3, [r3, #12]
 80137aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d008      	beq.n	80137c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80137b2:	4b17      	ldr	r3, [pc, #92]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 80137b4:	69db      	ldr	r3, [r3, #28]
 80137b6:	f043 0302 	orr.w	r3, r3, #2
 80137ba:	4a15      	ldr	r2, [pc, #84]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 80137bc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80137be:	4b13      	ldr	r3, [pc, #76]	; (801380c <FLASH_SetErrorCode+0xc4>)
 80137c0:	2280      	movs	r2, #128	; 0x80
 80137c2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80137c4:	4b11      	ldr	r3, [pc, #68]	; (801380c <FLASH_SetErrorCode+0xc4>)
 80137c6:	68db      	ldr	r3, [r3, #12]
 80137c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d009      	beq.n	80137e4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80137d0:	4b0f      	ldr	r3, [pc, #60]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 80137d2:	69db      	ldr	r3, [r3, #28]
 80137d4:	f043 0301 	orr.w	r3, r3, #1
 80137d8:	4a0d      	ldr	r2, [pc, #52]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 80137da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80137dc:	4b0b      	ldr	r3, [pc, #44]	; (801380c <FLASH_SetErrorCode+0xc4>)
 80137de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80137e2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80137e4:	4b09      	ldr	r3, [pc, #36]	; (801380c <FLASH_SetErrorCode+0xc4>)
 80137e6:	68db      	ldr	r3, [r3, #12]
 80137e8:	f003 0302 	and.w	r3, r3, #2
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d008      	beq.n	8013802 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80137f0:	4b07      	ldr	r3, [pc, #28]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 80137f2:	69db      	ldr	r3, [r3, #28]
 80137f4:	f043 0320 	orr.w	r3, r3, #32
 80137f8:	4a05      	ldr	r2, [pc, #20]	; (8013810 <FLASH_SetErrorCode+0xc8>)
 80137fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80137fc:	4b03      	ldr	r3, [pc, #12]	; (801380c <FLASH_SetErrorCode+0xc4>)
 80137fe:	2202      	movs	r2, #2
 8013800:	60da      	str	r2, [r3, #12]
  }
}
 8013802:	bf00      	nop
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr
 801380c:	40023c00 	.word	0x40023c00
 8013810:	20004790 	.word	0x20004790

08013814 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8013814:	b480      	push	{r7}
 8013816:	b085      	sub	sp, #20
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	460b      	mov	r3, r1
 801381e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8013820:	2300      	movs	r3, #0
 8013822:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8013824:	78fb      	ldrb	r3, [r7, #3]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d102      	bne.n	8013830 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 801382a:	2300      	movs	r3, #0
 801382c:	60fb      	str	r3, [r7, #12]
 801382e:	e010      	b.n	8013852 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8013830:	78fb      	ldrb	r3, [r7, #3]
 8013832:	2b01      	cmp	r3, #1
 8013834:	d103      	bne.n	801383e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8013836:	f44f 7380 	mov.w	r3, #256	; 0x100
 801383a:	60fb      	str	r3, [r7, #12]
 801383c:	e009      	b.n	8013852 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801383e:	78fb      	ldrb	r3, [r7, #3]
 8013840:	2b02      	cmp	r3, #2
 8013842:	d103      	bne.n	801384c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8013844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013848:	60fb      	str	r3, [r7, #12]
 801384a:	e002      	b.n	8013852 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 801384c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013850:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013852:	4b13      	ldr	r3, [pc, #76]	; (80138a0 <FLASH_Erase_Sector+0x8c>)
 8013854:	691b      	ldr	r3, [r3, #16]
 8013856:	4a12      	ldr	r2, [pc, #72]	; (80138a0 <FLASH_Erase_Sector+0x8c>)
 8013858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801385c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801385e:	4b10      	ldr	r3, [pc, #64]	; (80138a0 <FLASH_Erase_Sector+0x8c>)
 8013860:	691a      	ldr	r2, [r3, #16]
 8013862:	490f      	ldr	r1, [pc, #60]	; (80138a0 <FLASH_Erase_Sector+0x8c>)
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	4313      	orrs	r3, r2
 8013868:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801386a:	4b0d      	ldr	r3, [pc, #52]	; (80138a0 <FLASH_Erase_Sector+0x8c>)
 801386c:	691b      	ldr	r3, [r3, #16]
 801386e:	4a0c      	ldr	r2, [pc, #48]	; (80138a0 <FLASH_Erase_Sector+0x8c>)
 8013870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8013874:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8013876:	4b0a      	ldr	r3, [pc, #40]	; (80138a0 <FLASH_Erase_Sector+0x8c>)
 8013878:	691a      	ldr	r2, [r3, #16]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	00db      	lsls	r3, r3, #3
 801387e:	4313      	orrs	r3, r2
 8013880:	4a07      	ldr	r2, [pc, #28]	; (80138a0 <FLASH_Erase_Sector+0x8c>)
 8013882:	f043 0302 	orr.w	r3, r3, #2
 8013886:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8013888:	4b05      	ldr	r3, [pc, #20]	; (80138a0 <FLASH_Erase_Sector+0x8c>)
 801388a:	691b      	ldr	r3, [r3, #16]
 801388c:	4a04      	ldr	r2, [pc, #16]	; (80138a0 <FLASH_Erase_Sector+0x8c>)
 801388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013892:	6113      	str	r3, [r2, #16]
}
 8013894:	bf00      	nop
 8013896:	3714      	adds	r7, #20
 8013898:	46bd      	mov	sp, r7
 801389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389e:	4770      	bx	lr
 80138a0:	40023c00 	.word	0x40023c00

080138a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80138a4:	b480      	push	{r7}
 80138a6:	b089      	sub	sp, #36	; 0x24
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80138ae:	2300      	movs	r3, #0
 80138b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80138b2:	2300      	movs	r3, #0
 80138b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80138b6:	2300      	movs	r3, #0
 80138b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80138ba:	2300      	movs	r3, #0
 80138bc:	61fb      	str	r3, [r7, #28]
 80138be:	e165      	b.n	8013b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80138c0:	2201      	movs	r2, #1
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	fa02 f303 	lsl.w	r3, r2, r3
 80138c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	697a      	ldr	r2, [r7, #20]
 80138d0:	4013      	ands	r3, r2
 80138d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80138d4:	693a      	ldr	r2, [r7, #16]
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	429a      	cmp	r2, r3
 80138da:	f040 8154 	bne.w	8013b86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	f003 0303 	and.w	r3, r3, #3
 80138e6:	2b01      	cmp	r3, #1
 80138e8:	d005      	beq.n	80138f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	685b      	ldr	r3, [r3, #4]
 80138ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80138f2:	2b02      	cmp	r3, #2
 80138f4:	d130      	bne.n	8013958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	689b      	ldr	r3, [r3, #8]
 80138fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	005b      	lsls	r3, r3, #1
 8013900:	2203      	movs	r2, #3
 8013902:	fa02 f303 	lsl.w	r3, r2, r3
 8013906:	43db      	mvns	r3, r3
 8013908:	69ba      	ldr	r2, [r7, #24]
 801390a:	4013      	ands	r3, r2
 801390c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	68da      	ldr	r2, [r3, #12]
 8013912:	69fb      	ldr	r3, [r7, #28]
 8013914:	005b      	lsls	r3, r3, #1
 8013916:	fa02 f303 	lsl.w	r3, r2, r3
 801391a:	69ba      	ldr	r2, [r7, #24]
 801391c:	4313      	orrs	r3, r2
 801391e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	69ba      	ldr	r2, [r7, #24]
 8013924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	685b      	ldr	r3, [r3, #4]
 801392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801392c:	2201      	movs	r2, #1
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	fa02 f303 	lsl.w	r3, r2, r3
 8013934:	43db      	mvns	r3, r3
 8013936:	69ba      	ldr	r2, [r7, #24]
 8013938:	4013      	ands	r3, r2
 801393a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	685b      	ldr	r3, [r3, #4]
 8013940:	091b      	lsrs	r3, r3, #4
 8013942:	f003 0201 	and.w	r2, r3, #1
 8013946:	69fb      	ldr	r3, [r7, #28]
 8013948:	fa02 f303 	lsl.w	r3, r2, r3
 801394c:	69ba      	ldr	r2, [r7, #24]
 801394e:	4313      	orrs	r3, r2
 8013950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	69ba      	ldr	r2, [r7, #24]
 8013956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	685b      	ldr	r3, [r3, #4]
 801395c:	f003 0303 	and.w	r3, r3, #3
 8013960:	2b03      	cmp	r3, #3
 8013962:	d017      	beq.n	8013994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	68db      	ldr	r3, [r3, #12]
 8013968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801396a:	69fb      	ldr	r3, [r7, #28]
 801396c:	005b      	lsls	r3, r3, #1
 801396e:	2203      	movs	r2, #3
 8013970:	fa02 f303 	lsl.w	r3, r2, r3
 8013974:	43db      	mvns	r3, r3
 8013976:	69ba      	ldr	r2, [r7, #24]
 8013978:	4013      	ands	r3, r2
 801397a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	689a      	ldr	r2, [r3, #8]
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	005b      	lsls	r3, r3, #1
 8013984:	fa02 f303 	lsl.w	r3, r2, r3
 8013988:	69ba      	ldr	r2, [r7, #24]
 801398a:	4313      	orrs	r3, r2
 801398c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	69ba      	ldr	r2, [r7, #24]
 8013992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	685b      	ldr	r3, [r3, #4]
 8013998:	f003 0303 	and.w	r3, r3, #3
 801399c:	2b02      	cmp	r3, #2
 801399e:	d123      	bne.n	80139e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	08da      	lsrs	r2, r3, #3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	3208      	adds	r2, #8
 80139a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80139ae:	69fb      	ldr	r3, [r7, #28]
 80139b0:	f003 0307 	and.w	r3, r3, #7
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	220f      	movs	r2, #15
 80139b8:	fa02 f303 	lsl.w	r3, r2, r3
 80139bc:	43db      	mvns	r3, r3
 80139be:	69ba      	ldr	r2, [r7, #24]
 80139c0:	4013      	ands	r3, r2
 80139c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	691a      	ldr	r2, [r3, #16]
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	f003 0307 	and.w	r3, r3, #7
 80139ce:	009b      	lsls	r3, r3, #2
 80139d0:	fa02 f303 	lsl.w	r3, r2, r3
 80139d4:	69ba      	ldr	r2, [r7, #24]
 80139d6:	4313      	orrs	r3, r2
 80139d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80139da:	69fb      	ldr	r3, [r7, #28]
 80139dc:	08da      	lsrs	r2, r3, #3
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	3208      	adds	r2, #8
 80139e2:	69b9      	ldr	r1, [r7, #24]
 80139e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80139ee:	69fb      	ldr	r3, [r7, #28]
 80139f0:	005b      	lsls	r3, r3, #1
 80139f2:	2203      	movs	r2, #3
 80139f4:	fa02 f303 	lsl.w	r3, r2, r3
 80139f8:	43db      	mvns	r3, r3
 80139fa:	69ba      	ldr	r2, [r7, #24]
 80139fc:	4013      	ands	r3, r2
 80139fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	f003 0203 	and.w	r2, r3, #3
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	005b      	lsls	r3, r3, #1
 8013a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8013a10:	69ba      	ldr	r2, [r7, #24]
 8013a12:	4313      	orrs	r3, r2
 8013a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	69ba      	ldr	r2, [r7, #24]
 8013a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	685b      	ldr	r3, [r3, #4]
 8013a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	f000 80ae 	beq.w	8013b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	60fb      	str	r3, [r7, #12]
 8013a2e:	4b5d      	ldr	r3, [pc, #372]	; (8013ba4 <HAL_GPIO_Init+0x300>)
 8013a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a32:	4a5c      	ldr	r2, [pc, #368]	; (8013ba4 <HAL_GPIO_Init+0x300>)
 8013a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013a38:	6453      	str	r3, [r2, #68]	; 0x44
 8013a3a:	4b5a      	ldr	r3, [pc, #360]	; (8013ba4 <HAL_GPIO_Init+0x300>)
 8013a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013a42:	60fb      	str	r3, [r7, #12]
 8013a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8013a46:	4a58      	ldr	r2, [pc, #352]	; (8013ba8 <HAL_GPIO_Init+0x304>)
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	089b      	lsrs	r3, r3, #2
 8013a4c:	3302      	adds	r3, #2
 8013a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8013a54:	69fb      	ldr	r3, [r7, #28]
 8013a56:	f003 0303 	and.w	r3, r3, #3
 8013a5a:	009b      	lsls	r3, r3, #2
 8013a5c:	220f      	movs	r2, #15
 8013a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8013a62:	43db      	mvns	r3, r3
 8013a64:	69ba      	ldr	r2, [r7, #24]
 8013a66:	4013      	ands	r3, r2
 8013a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	4a4f      	ldr	r2, [pc, #316]	; (8013bac <HAL_GPIO_Init+0x308>)
 8013a6e:	4293      	cmp	r3, r2
 8013a70:	d025      	beq.n	8013abe <HAL_GPIO_Init+0x21a>
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	4a4e      	ldr	r2, [pc, #312]	; (8013bb0 <HAL_GPIO_Init+0x30c>)
 8013a76:	4293      	cmp	r3, r2
 8013a78:	d01f      	beq.n	8013aba <HAL_GPIO_Init+0x216>
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	4a4d      	ldr	r2, [pc, #308]	; (8013bb4 <HAL_GPIO_Init+0x310>)
 8013a7e:	4293      	cmp	r3, r2
 8013a80:	d019      	beq.n	8013ab6 <HAL_GPIO_Init+0x212>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4a4c      	ldr	r2, [pc, #304]	; (8013bb8 <HAL_GPIO_Init+0x314>)
 8013a86:	4293      	cmp	r3, r2
 8013a88:	d013      	beq.n	8013ab2 <HAL_GPIO_Init+0x20e>
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	4a4b      	ldr	r2, [pc, #300]	; (8013bbc <HAL_GPIO_Init+0x318>)
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d00d      	beq.n	8013aae <HAL_GPIO_Init+0x20a>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	4a4a      	ldr	r2, [pc, #296]	; (8013bc0 <HAL_GPIO_Init+0x31c>)
 8013a96:	4293      	cmp	r3, r2
 8013a98:	d007      	beq.n	8013aaa <HAL_GPIO_Init+0x206>
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	4a49      	ldr	r2, [pc, #292]	; (8013bc4 <HAL_GPIO_Init+0x320>)
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	d101      	bne.n	8013aa6 <HAL_GPIO_Init+0x202>
 8013aa2:	2306      	movs	r3, #6
 8013aa4:	e00c      	b.n	8013ac0 <HAL_GPIO_Init+0x21c>
 8013aa6:	2307      	movs	r3, #7
 8013aa8:	e00a      	b.n	8013ac0 <HAL_GPIO_Init+0x21c>
 8013aaa:	2305      	movs	r3, #5
 8013aac:	e008      	b.n	8013ac0 <HAL_GPIO_Init+0x21c>
 8013aae:	2304      	movs	r3, #4
 8013ab0:	e006      	b.n	8013ac0 <HAL_GPIO_Init+0x21c>
 8013ab2:	2303      	movs	r3, #3
 8013ab4:	e004      	b.n	8013ac0 <HAL_GPIO_Init+0x21c>
 8013ab6:	2302      	movs	r3, #2
 8013ab8:	e002      	b.n	8013ac0 <HAL_GPIO_Init+0x21c>
 8013aba:	2301      	movs	r3, #1
 8013abc:	e000      	b.n	8013ac0 <HAL_GPIO_Init+0x21c>
 8013abe:	2300      	movs	r3, #0
 8013ac0:	69fa      	ldr	r2, [r7, #28]
 8013ac2:	f002 0203 	and.w	r2, r2, #3
 8013ac6:	0092      	lsls	r2, r2, #2
 8013ac8:	4093      	lsls	r3, r2
 8013aca:	69ba      	ldr	r2, [r7, #24]
 8013acc:	4313      	orrs	r3, r2
 8013ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013ad0:	4935      	ldr	r1, [pc, #212]	; (8013ba8 <HAL_GPIO_Init+0x304>)
 8013ad2:	69fb      	ldr	r3, [r7, #28]
 8013ad4:	089b      	lsrs	r3, r3, #2
 8013ad6:	3302      	adds	r3, #2
 8013ad8:	69ba      	ldr	r2, [r7, #24]
 8013ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013ade:	4b3a      	ldr	r3, [pc, #232]	; (8013bc8 <HAL_GPIO_Init+0x324>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	43db      	mvns	r3, r3
 8013ae8:	69ba      	ldr	r2, [r7, #24]
 8013aea:	4013      	ands	r3, r2
 8013aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	685b      	ldr	r3, [r3, #4]
 8013af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d003      	beq.n	8013b02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8013afa:	69ba      	ldr	r2, [r7, #24]
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	4313      	orrs	r3, r2
 8013b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8013b02:	4a31      	ldr	r2, [pc, #196]	; (8013bc8 <HAL_GPIO_Init+0x324>)
 8013b04:	69bb      	ldr	r3, [r7, #24]
 8013b06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8013b08:	4b2f      	ldr	r3, [pc, #188]	; (8013bc8 <HAL_GPIO_Init+0x324>)
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013b0e:	693b      	ldr	r3, [r7, #16]
 8013b10:	43db      	mvns	r3, r3
 8013b12:	69ba      	ldr	r2, [r7, #24]
 8013b14:	4013      	ands	r3, r2
 8013b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d003      	beq.n	8013b2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8013b24:	69ba      	ldr	r2, [r7, #24]
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	4313      	orrs	r3, r2
 8013b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8013b2c:	4a26      	ldr	r2, [pc, #152]	; (8013bc8 <HAL_GPIO_Init+0x324>)
 8013b2e:	69bb      	ldr	r3, [r7, #24]
 8013b30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013b32:	4b25      	ldr	r3, [pc, #148]	; (8013bc8 <HAL_GPIO_Init+0x324>)
 8013b34:	689b      	ldr	r3, [r3, #8]
 8013b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	43db      	mvns	r3, r3
 8013b3c:	69ba      	ldr	r2, [r7, #24]
 8013b3e:	4013      	ands	r3, r2
 8013b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	685b      	ldr	r3, [r3, #4]
 8013b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d003      	beq.n	8013b56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8013b4e:	69ba      	ldr	r2, [r7, #24]
 8013b50:	693b      	ldr	r3, [r7, #16]
 8013b52:	4313      	orrs	r3, r2
 8013b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8013b56:	4a1c      	ldr	r2, [pc, #112]	; (8013bc8 <HAL_GPIO_Init+0x324>)
 8013b58:	69bb      	ldr	r3, [r7, #24]
 8013b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013b5c:	4b1a      	ldr	r3, [pc, #104]	; (8013bc8 <HAL_GPIO_Init+0x324>)
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013b62:	693b      	ldr	r3, [r7, #16]
 8013b64:	43db      	mvns	r3, r3
 8013b66:	69ba      	ldr	r2, [r7, #24]
 8013b68:	4013      	ands	r3, r2
 8013b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d003      	beq.n	8013b80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8013b78:	69ba      	ldr	r2, [r7, #24]
 8013b7a:	693b      	ldr	r3, [r7, #16]
 8013b7c:	4313      	orrs	r3, r2
 8013b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8013b80:	4a11      	ldr	r2, [pc, #68]	; (8013bc8 <HAL_GPIO_Init+0x324>)
 8013b82:	69bb      	ldr	r3, [r7, #24]
 8013b84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	3301      	adds	r3, #1
 8013b8a:	61fb      	str	r3, [r7, #28]
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	2b0f      	cmp	r3, #15
 8013b90:	f67f ae96 	bls.w	80138c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013b94:	bf00      	nop
 8013b96:	bf00      	nop
 8013b98:	3724      	adds	r7, #36	; 0x24
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba0:	4770      	bx	lr
 8013ba2:	bf00      	nop
 8013ba4:	40023800 	.word	0x40023800
 8013ba8:	40013800 	.word	0x40013800
 8013bac:	40020000 	.word	0x40020000
 8013bb0:	40020400 	.word	0x40020400
 8013bb4:	40020800 	.word	0x40020800
 8013bb8:	40020c00 	.word	0x40020c00
 8013bbc:	40021000 	.word	0x40021000
 8013bc0:	40021400 	.word	0x40021400
 8013bc4:	40021800 	.word	0x40021800
 8013bc8:	40013c00 	.word	0x40013c00

08013bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8013bcc:	b480      	push	{r7}
 8013bce:	b085      	sub	sp, #20
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	460b      	mov	r3, r1
 8013bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	691a      	ldr	r2, [r3, #16]
 8013bdc:	887b      	ldrh	r3, [r7, #2]
 8013bde:	4013      	ands	r3, r2
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d002      	beq.n	8013bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8013be4:	2301      	movs	r3, #1
 8013be6:	73fb      	strb	r3, [r7, #15]
 8013be8:	e001      	b.n	8013bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013bea:	2300      	movs	r3, #0
 8013bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3714      	adds	r7, #20
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfa:	4770      	bx	lr

08013bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	b083      	sub	sp, #12
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	460b      	mov	r3, r1
 8013c06:	807b      	strh	r3, [r7, #2]
 8013c08:	4613      	mov	r3, r2
 8013c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013c0c:	787b      	ldrb	r3, [r7, #1]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d003      	beq.n	8013c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013c12:	887a      	ldrh	r2, [r7, #2]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8013c18:	e003      	b.n	8013c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8013c1a:	887b      	ldrh	r3, [r7, #2]
 8013c1c:	041a      	lsls	r2, r3, #16
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	619a      	str	r2, [r3, #24]
}
 8013c22:	bf00      	nop
 8013c24:	370c      	adds	r7, #12
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr

08013c2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8013c2e:	b480      	push	{r7}
 8013c30:	b085      	sub	sp, #20
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
 8013c36:	460b      	mov	r3, r1
 8013c38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	695b      	ldr	r3, [r3, #20]
 8013c3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8013c40:	887a      	ldrh	r2, [r7, #2]
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	4013      	ands	r3, r2
 8013c46:	041a      	lsls	r2, r3, #16
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	43d9      	mvns	r1, r3
 8013c4c:	887b      	ldrh	r3, [r7, #2]
 8013c4e:	400b      	ands	r3, r1
 8013c50:	431a      	orrs	r2, r3
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	619a      	str	r2, [r3, #24]
}
 8013c56:	bf00      	nop
 8013c58:	3714      	adds	r7, #20
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr
	...

08013c64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8013c6e:	4b08      	ldr	r3, [pc, #32]	; (8013c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013c70:	695a      	ldr	r2, [r3, #20]
 8013c72:	88fb      	ldrh	r3, [r7, #6]
 8013c74:	4013      	ands	r3, r2
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d006      	beq.n	8013c88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013c7a:	4a05      	ldr	r2, [pc, #20]	; (8013c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013c7c:	88fb      	ldrh	r3, [r7, #6]
 8013c7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013c80:	88fb      	ldrh	r3, [r7, #6]
 8013c82:	4618      	mov	r0, r3
 8013c84:	f009 fd1a 	bl	801d6bc <HAL_GPIO_EXTI_Callback>
  }
}
 8013c88:	bf00      	nop
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	40013c00 	.word	0x40013c00

08013c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b084      	sub	sp, #16
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d101      	bne.n	8013ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	e12b      	b.n	8013efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013cac:	b2db      	uxtb	r3, r3
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d106      	bne.n	8013cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f7fd ff84 	bl	8011bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2224      	movs	r2, #36	; 0x24
 8013cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	681a      	ldr	r2, [r3, #0]
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	f022 0201 	bic.w	r2, r2, #1
 8013cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	681a      	ldr	r2, [r3, #0]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8013cf8:	f001 f8ce 	bl	8014e98 <HAL_RCC_GetPCLK1Freq>
 8013cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	4a81      	ldr	r2, [pc, #516]	; (8013f08 <HAL_I2C_Init+0x274>)
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d807      	bhi.n	8013d18 <HAL_I2C_Init+0x84>
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	4a80      	ldr	r2, [pc, #512]	; (8013f0c <HAL_I2C_Init+0x278>)
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	bf94      	ite	ls
 8013d10:	2301      	movls	r3, #1
 8013d12:	2300      	movhi	r3, #0
 8013d14:	b2db      	uxtb	r3, r3
 8013d16:	e006      	b.n	8013d26 <HAL_I2C_Init+0x92>
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	4a7d      	ldr	r2, [pc, #500]	; (8013f10 <HAL_I2C_Init+0x27c>)
 8013d1c:	4293      	cmp	r3, r2
 8013d1e:	bf94      	ite	ls
 8013d20:	2301      	movls	r3, #1
 8013d22:	2300      	movhi	r3, #0
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d001      	beq.n	8013d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8013d2a:	2301      	movs	r3, #1
 8013d2c:	e0e7      	b.n	8013efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	4a78      	ldr	r2, [pc, #480]	; (8013f14 <HAL_I2C_Init+0x280>)
 8013d32:	fba2 2303 	umull	r2, r3, r2, r3
 8013d36:	0c9b      	lsrs	r3, r3, #18
 8013d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	685b      	ldr	r3, [r3, #4]
 8013d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	68ba      	ldr	r2, [r7, #8]
 8013d4a:	430a      	orrs	r2, r1
 8013d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	6a1b      	ldr	r3, [r3, #32]
 8013d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	4a6a      	ldr	r2, [pc, #424]	; (8013f08 <HAL_I2C_Init+0x274>)
 8013d5e:	4293      	cmp	r3, r2
 8013d60:	d802      	bhi.n	8013d68 <HAL_I2C_Init+0xd4>
 8013d62:	68bb      	ldr	r3, [r7, #8]
 8013d64:	3301      	adds	r3, #1
 8013d66:	e009      	b.n	8013d7c <HAL_I2C_Init+0xe8>
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013d6e:	fb02 f303 	mul.w	r3, r2, r3
 8013d72:	4a69      	ldr	r2, [pc, #420]	; (8013f18 <HAL_I2C_Init+0x284>)
 8013d74:	fba2 2303 	umull	r2, r3, r2, r3
 8013d78:	099b      	lsrs	r3, r3, #6
 8013d7a:	3301      	adds	r3, #1
 8013d7c:	687a      	ldr	r2, [r7, #4]
 8013d7e:	6812      	ldr	r2, [r2, #0]
 8013d80:	430b      	orrs	r3, r1
 8013d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	69db      	ldr	r3, [r3, #28]
 8013d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8013d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	495c      	ldr	r1, [pc, #368]	; (8013f08 <HAL_I2C_Init+0x274>)
 8013d98:	428b      	cmp	r3, r1
 8013d9a:	d819      	bhi.n	8013dd0 <HAL_I2C_Init+0x13c>
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	1e59      	subs	r1, r3, #1
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8013daa:	1c59      	adds	r1, r3, #1
 8013dac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8013db0:	400b      	ands	r3, r1
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d00a      	beq.n	8013dcc <HAL_I2C_Init+0x138>
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	1e59      	subs	r1, r3, #1
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	005b      	lsls	r3, r3, #1
 8013dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8013dc4:	3301      	adds	r3, #1
 8013dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013dca:	e051      	b.n	8013e70 <HAL_I2C_Init+0x1dc>
 8013dcc:	2304      	movs	r3, #4
 8013dce:	e04f      	b.n	8013e70 <HAL_I2C_Init+0x1dc>
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	689b      	ldr	r3, [r3, #8]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d111      	bne.n	8013dfc <HAL_I2C_Init+0x168>
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	1e58      	subs	r0, r3, #1
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6859      	ldr	r1, [r3, #4]
 8013de0:	460b      	mov	r3, r1
 8013de2:	005b      	lsls	r3, r3, #1
 8013de4:	440b      	add	r3, r1
 8013de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8013dea:	3301      	adds	r3, #1
 8013dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	bf0c      	ite	eq
 8013df4:	2301      	moveq	r3, #1
 8013df6:	2300      	movne	r3, #0
 8013df8:	b2db      	uxtb	r3, r3
 8013dfa:	e012      	b.n	8013e22 <HAL_I2C_Init+0x18e>
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	1e58      	subs	r0, r3, #1
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6859      	ldr	r1, [r3, #4]
 8013e04:	460b      	mov	r3, r1
 8013e06:	009b      	lsls	r3, r3, #2
 8013e08:	440b      	add	r3, r1
 8013e0a:	0099      	lsls	r1, r3, #2
 8013e0c:	440b      	add	r3, r1
 8013e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8013e12:	3301      	adds	r3, #1
 8013e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	bf0c      	ite	eq
 8013e1c:	2301      	moveq	r3, #1
 8013e1e:	2300      	movne	r3, #0
 8013e20:	b2db      	uxtb	r3, r3
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d001      	beq.n	8013e2a <HAL_I2C_Init+0x196>
 8013e26:	2301      	movs	r3, #1
 8013e28:	e022      	b.n	8013e70 <HAL_I2C_Init+0x1dc>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	689b      	ldr	r3, [r3, #8]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d10e      	bne.n	8013e50 <HAL_I2C_Init+0x1bc>
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	1e58      	subs	r0, r3, #1
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	6859      	ldr	r1, [r3, #4]
 8013e3a:	460b      	mov	r3, r1
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	440b      	add	r3, r1
 8013e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8013e44:	3301      	adds	r3, #1
 8013e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013e4e:	e00f      	b.n	8013e70 <HAL_I2C_Init+0x1dc>
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	1e58      	subs	r0, r3, #1
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6859      	ldr	r1, [r3, #4]
 8013e58:	460b      	mov	r3, r1
 8013e5a:	009b      	lsls	r3, r3, #2
 8013e5c:	440b      	add	r3, r1
 8013e5e:	0099      	lsls	r1, r3, #2
 8013e60:	440b      	add	r3, r1
 8013e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8013e66:	3301      	adds	r3, #1
 8013e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013e70:	6879      	ldr	r1, [r7, #4]
 8013e72:	6809      	ldr	r1, [r1, #0]
 8013e74:	4313      	orrs	r3, r2
 8013e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	69da      	ldr	r2, [r3, #28]
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	6a1b      	ldr	r3, [r3, #32]
 8013e8a:	431a      	orrs	r2, r3
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	430a      	orrs	r2, r1
 8013e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	689b      	ldr	r3, [r3, #8]
 8013e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8013e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013ea2:	687a      	ldr	r2, [r7, #4]
 8013ea4:	6911      	ldr	r1, [r2, #16]
 8013ea6:	687a      	ldr	r2, [r7, #4]
 8013ea8:	68d2      	ldr	r2, [r2, #12]
 8013eaa:	4311      	orrs	r1, r2
 8013eac:	687a      	ldr	r2, [r7, #4]
 8013eae:	6812      	ldr	r2, [r2, #0]
 8013eb0:	430b      	orrs	r3, r1
 8013eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	68db      	ldr	r3, [r3, #12]
 8013eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	695a      	ldr	r2, [r3, #20]
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	699b      	ldr	r3, [r3, #24]
 8013ec6:	431a      	orrs	r2, r3
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	430a      	orrs	r2, r1
 8013ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	681a      	ldr	r2, [r3, #0]
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	f042 0201 	orr.w	r2, r2, #1
 8013ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2220      	movs	r2, #32
 8013eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013efc:	2300      	movs	r3, #0
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3710      	adds	r7, #16
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	000186a0 	.word	0x000186a0
 8013f0c:	001e847f 	.word	0x001e847f
 8013f10:	003d08ff 	.word	0x003d08ff
 8013f14:	431bde83 	.word	0x431bde83
 8013f18:	10624dd3 	.word	0x10624dd3

08013f1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b088      	sub	sp, #32
 8013f20:	af02      	add	r7, sp, #8
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	4608      	mov	r0, r1
 8013f26:	4611      	mov	r1, r2
 8013f28:	461a      	mov	r2, r3
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	817b      	strh	r3, [r7, #10]
 8013f2e:	460b      	mov	r3, r1
 8013f30:	813b      	strh	r3, [r7, #8]
 8013f32:	4613      	mov	r3, r2
 8013f34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8013f36:	f7fe fa1d 	bl	8012374 <HAL_GetTick>
 8013f3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013f42:	b2db      	uxtb	r3, r3
 8013f44:	2b20      	cmp	r3, #32
 8013f46:	f040 80d9 	bne.w	80140fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	9300      	str	r3, [sp, #0]
 8013f4e:	2319      	movs	r3, #25
 8013f50:	2201      	movs	r2, #1
 8013f52:	496d      	ldr	r1, [pc, #436]	; (8014108 <HAL_I2C_Mem_Write+0x1ec>)
 8013f54:	68f8      	ldr	r0, [r7, #12]
 8013f56:	f000 fc7f 	bl	8014858 <I2C_WaitOnFlagUntilTimeout>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d001      	beq.n	8013f64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8013f60:	2302      	movs	r3, #2
 8013f62:	e0cc      	b.n	80140fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013f6a:	2b01      	cmp	r3, #1
 8013f6c:	d101      	bne.n	8013f72 <HAL_I2C_Mem_Write+0x56>
 8013f6e:	2302      	movs	r3, #2
 8013f70:	e0c5      	b.n	80140fe <HAL_I2C_Mem_Write+0x1e2>
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2201      	movs	r2, #1
 8013f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	f003 0301 	and.w	r3, r3, #1
 8013f84:	2b01      	cmp	r3, #1
 8013f86:	d007      	beq.n	8013f98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	f042 0201 	orr.w	r2, r2, #1
 8013f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	681a      	ldr	r2, [r3, #0]
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2221      	movs	r2, #33	; 0x21
 8013fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	2240      	movs	r2, #64	; 0x40
 8013fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	6a3a      	ldr	r2, [r7, #32]
 8013fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013fce:	b29a      	uxth	r2, r3
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	4a4d      	ldr	r2, [pc, #308]	; (801410c <HAL_I2C_Mem_Write+0x1f0>)
 8013fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8013fda:	88f8      	ldrh	r0, [r7, #6]
 8013fdc:	893a      	ldrh	r2, [r7, #8]
 8013fde:	8979      	ldrh	r1, [r7, #10]
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	9301      	str	r3, [sp, #4]
 8013fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe6:	9300      	str	r3, [sp, #0]
 8013fe8:	4603      	mov	r3, r0
 8013fea:	68f8      	ldr	r0, [r7, #12]
 8013fec:	f000 fab6 	bl	801455c <I2C_RequestMemoryWrite>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d052      	beq.n	801409c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	e081      	b.n	80140fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013ffa:	697a      	ldr	r2, [r7, #20]
 8013ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f000 fd00 	bl	8014a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8014004:	4603      	mov	r3, r0
 8014006:	2b00      	cmp	r3, #0
 8014008:	d00d      	beq.n	8014026 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801400e:	2b04      	cmp	r3, #4
 8014010:	d107      	bne.n	8014022 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014020:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8014022:	2301      	movs	r3, #1
 8014024:	e06b      	b.n	80140fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801402a:	781a      	ldrb	r2, [r3, #0]
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014036:	1c5a      	adds	r2, r3, #1
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014040:	3b01      	subs	r3, #1
 8014042:	b29a      	uxth	r2, r3
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801404c:	b29b      	uxth	r3, r3
 801404e:	3b01      	subs	r3, #1
 8014050:	b29a      	uxth	r2, r3
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	695b      	ldr	r3, [r3, #20]
 801405c:	f003 0304 	and.w	r3, r3, #4
 8014060:	2b04      	cmp	r3, #4
 8014062:	d11b      	bne.n	801409c <HAL_I2C_Mem_Write+0x180>
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014068:	2b00      	cmp	r3, #0
 801406a:	d017      	beq.n	801409c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014070:	781a      	ldrb	r2, [r3, #0]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801407c:	1c5a      	adds	r2, r3, #1
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014086:	3b01      	subs	r3, #1
 8014088:	b29a      	uxth	r2, r3
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014092:	b29b      	uxth	r3, r3
 8014094:	3b01      	subs	r3, #1
 8014096:	b29a      	uxth	r2, r3
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d1aa      	bne.n	8013ffa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80140a4:	697a      	ldr	r2, [r7, #20]
 80140a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80140a8:	68f8      	ldr	r0, [r7, #12]
 80140aa:	f000 fcec 	bl	8014a86 <I2C_WaitOnBTFFlagUntilTimeout>
 80140ae:	4603      	mov	r3, r0
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d00d      	beq.n	80140d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140b8:	2b04      	cmp	r3, #4
 80140ba:	d107      	bne.n	80140cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80140ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80140cc:	2301      	movs	r3, #1
 80140ce:	e016      	b.n	80140fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80140de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2220      	movs	r2, #32
 80140e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	2200      	movs	r2, #0
 80140ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	2200      	movs	r2, #0
 80140f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80140f8:	2300      	movs	r3, #0
 80140fa:	e000      	b.n	80140fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80140fc:	2302      	movs	r3, #2
  }
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3718      	adds	r7, #24
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}
 8014106:	bf00      	nop
 8014108:	00100002 	.word	0x00100002
 801410c:	ffff0000 	.word	0xffff0000

08014110 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b08c      	sub	sp, #48	; 0x30
 8014114:	af02      	add	r7, sp, #8
 8014116:	60f8      	str	r0, [r7, #12]
 8014118:	4608      	mov	r0, r1
 801411a:	4611      	mov	r1, r2
 801411c:	461a      	mov	r2, r3
 801411e:	4603      	mov	r3, r0
 8014120:	817b      	strh	r3, [r7, #10]
 8014122:	460b      	mov	r3, r1
 8014124:	813b      	strh	r3, [r7, #8]
 8014126:	4613      	mov	r3, r2
 8014128:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801412a:	f7fe f923 	bl	8012374 <HAL_GetTick>
 801412e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014136:	b2db      	uxtb	r3, r3
 8014138:	2b20      	cmp	r3, #32
 801413a:	f040 8208 	bne.w	801454e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014140:	9300      	str	r3, [sp, #0]
 8014142:	2319      	movs	r3, #25
 8014144:	2201      	movs	r2, #1
 8014146:	497b      	ldr	r1, [pc, #492]	; (8014334 <HAL_I2C_Mem_Read+0x224>)
 8014148:	68f8      	ldr	r0, [r7, #12]
 801414a:	f000 fb85 	bl	8014858 <I2C_WaitOnFlagUntilTimeout>
 801414e:	4603      	mov	r3, r0
 8014150:	2b00      	cmp	r3, #0
 8014152:	d001      	beq.n	8014158 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8014154:	2302      	movs	r3, #2
 8014156:	e1fb      	b.n	8014550 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801415e:	2b01      	cmp	r3, #1
 8014160:	d101      	bne.n	8014166 <HAL_I2C_Mem_Read+0x56>
 8014162:	2302      	movs	r3, #2
 8014164:	e1f4      	b.n	8014550 <HAL_I2C_Mem_Read+0x440>
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	2201      	movs	r2, #1
 801416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	f003 0301 	and.w	r3, r3, #1
 8014178:	2b01      	cmp	r3, #1
 801417a:	d007      	beq.n	801418c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	f042 0201 	orr.w	r2, r2, #1
 801418a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	681a      	ldr	r2, [r3, #0]
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801419a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	2222      	movs	r2, #34	; 0x22
 80141a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	2240      	movs	r2, #64	; 0x40
 80141a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	2200      	movs	r2, #0
 80141b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80141bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80141c2:	b29a      	uxth	r2, r3
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	4a5b      	ldr	r2, [pc, #364]	; (8014338 <HAL_I2C_Mem_Read+0x228>)
 80141cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80141ce:	88f8      	ldrh	r0, [r7, #6]
 80141d0:	893a      	ldrh	r2, [r7, #8]
 80141d2:	8979      	ldrh	r1, [r7, #10]
 80141d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d6:	9301      	str	r3, [sp, #4]
 80141d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141da:	9300      	str	r3, [sp, #0]
 80141dc:	4603      	mov	r3, r0
 80141de:	68f8      	ldr	r0, [r7, #12]
 80141e0:	f000 fa52 	bl	8014688 <I2C_RequestMemoryRead>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d001      	beq.n	80141ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80141ea:	2301      	movs	r3, #1
 80141ec:	e1b0      	b.n	8014550 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d113      	bne.n	801421e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80141f6:	2300      	movs	r3, #0
 80141f8:	623b      	str	r3, [r7, #32]
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	695b      	ldr	r3, [r3, #20]
 8014200:	623b      	str	r3, [r7, #32]
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	699b      	ldr	r3, [r3, #24]
 8014208:	623b      	str	r3, [r7, #32]
 801420a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	681a      	ldr	r2, [r3, #0]
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801421a:	601a      	str	r2, [r3, #0]
 801421c:	e184      	b.n	8014528 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014222:	2b01      	cmp	r3, #1
 8014224:	d11b      	bne.n	801425e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	681a      	ldr	r2, [r3, #0]
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014236:	2300      	movs	r3, #0
 8014238:	61fb      	str	r3, [r7, #28]
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	695b      	ldr	r3, [r3, #20]
 8014240:	61fb      	str	r3, [r7, #28]
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	699b      	ldr	r3, [r3, #24]
 8014248:	61fb      	str	r3, [r7, #28]
 801424a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	681a      	ldr	r2, [r3, #0]
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801425a:	601a      	str	r2, [r3, #0]
 801425c:	e164      	b.n	8014528 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014262:	2b02      	cmp	r3, #2
 8014264:	d11b      	bne.n	801429e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	681a      	ldr	r2, [r3, #0]
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014274:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	681a      	ldr	r2, [r3, #0]
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014286:	2300      	movs	r3, #0
 8014288:	61bb      	str	r3, [r7, #24]
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	695b      	ldr	r3, [r3, #20]
 8014290:	61bb      	str	r3, [r7, #24]
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	699b      	ldr	r3, [r3, #24]
 8014298:	61bb      	str	r3, [r7, #24]
 801429a:	69bb      	ldr	r3, [r7, #24]
 801429c:	e144      	b.n	8014528 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801429e:	2300      	movs	r3, #0
 80142a0:	617b      	str	r3, [r7, #20]
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	695b      	ldr	r3, [r3, #20]
 80142a8:	617b      	str	r3, [r7, #20]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	699b      	ldr	r3, [r3, #24]
 80142b0:	617b      	str	r3, [r7, #20]
 80142b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80142b4:	e138      	b.n	8014528 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80142ba:	2b03      	cmp	r3, #3
 80142bc:	f200 80f1 	bhi.w	80144a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80142c4:	2b01      	cmp	r3, #1
 80142c6:	d123      	bne.n	8014310 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80142c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142cc:	68f8      	ldr	r0, [r7, #12]
 80142ce:	f000 fc1b 	bl	8014b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80142d2:	4603      	mov	r3, r0
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d001      	beq.n	80142dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80142d8:	2301      	movs	r3, #1
 80142da:	e139      	b.n	8014550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	691a      	ldr	r2, [r3, #16]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142e6:	b2d2      	uxtb	r2, r2
 80142e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142ee:	1c5a      	adds	r2, r3, #1
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80142f8:	3b01      	subs	r3, #1
 80142fa:	b29a      	uxth	r2, r3
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014304:	b29b      	uxth	r3, r3
 8014306:	3b01      	subs	r3, #1
 8014308:	b29a      	uxth	r2, r3
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801430e:	e10b      	b.n	8014528 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014314:	2b02      	cmp	r3, #2
 8014316:	d14e      	bne.n	80143b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431a:	9300      	str	r3, [sp, #0]
 801431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801431e:	2200      	movs	r2, #0
 8014320:	4906      	ldr	r1, [pc, #24]	; (801433c <HAL_I2C_Mem_Read+0x22c>)
 8014322:	68f8      	ldr	r0, [r7, #12]
 8014324:	f000 fa98 	bl	8014858 <I2C_WaitOnFlagUntilTimeout>
 8014328:	4603      	mov	r3, r0
 801432a:	2b00      	cmp	r3, #0
 801432c:	d008      	beq.n	8014340 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 801432e:	2301      	movs	r3, #1
 8014330:	e10e      	b.n	8014550 <HAL_I2C_Mem_Read+0x440>
 8014332:	bf00      	nop
 8014334:	00100002 	.word	0x00100002
 8014338:	ffff0000 	.word	0xffff0000
 801433c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	681a      	ldr	r2, [r3, #0]
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801434e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	691a      	ldr	r2, [r3, #16]
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801435a:	b2d2      	uxtb	r2, r2
 801435c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014362:	1c5a      	adds	r2, r3, #1
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801436c:	3b01      	subs	r3, #1
 801436e:	b29a      	uxth	r2, r3
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014378:	b29b      	uxth	r3, r3
 801437a:	3b01      	subs	r3, #1
 801437c:	b29a      	uxth	r2, r3
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	691a      	ldr	r2, [r3, #16]
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801438c:	b2d2      	uxtb	r2, r2
 801438e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014394:	1c5a      	adds	r2, r3, #1
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801439e:	3b01      	subs	r3, #1
 80143a0:	b29a      	uxth	r2, r3
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143aa:	b29b      	uxth	r3, r3
 80143ac:	3b01      	subs	r3, #1
 80143ae:	b29a      	uxth	r2, r3
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80143b4:	e0b8      	b.n	8014528 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80143b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b8:	9300      	str	r3, [sp, #0]
 80143ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143bc:	2200      	movs	r2, #0
 80143be:	4966      	ldr	r1, [pc, #408]	; (8014558 <HAL_I2C_Mem_Read+0x448>)
 80143c0:	68f8      	ldr	r0, [r7, #12]
 80143c2:	f000 fa49 	bl	8014858 <I2C_WaitOnFlagUntilTimeout>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d001      	beq.n	80143d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80143cc:	2301      	movs	r3, #1
 80143ce:	e0bf      	b.n	8014550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	681a      	ldr	r2, [r3, #0]
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80143de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	691a      	ldr	r2, [r3, #16]
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ea:	b2d2      	uxtb	r2, r2
 80143ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143f2:	1c5a      	adds	r2, r3, #1
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143fc:	3b01      	subs	r3, #1
 80143fe:	b29a      	uxth	r2, r3
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014408:	b29b      	uxth	r3, r3
 801440a:	3b01      	subs	r3, #1
 801440c:	b29a      	uxth	r2, r3
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014414:	9300      	str	r3, [sp, #0]
 8014416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014418:	2200      	movs	r2, #0
 801441a:	494f      	ldr	r1, [pc, #316]	; (8014558 <HAL_I2C_Mem_Read+0x448>)
 801441c:	68f8      	ldr	r0, [r7, #12]
 801441e:	f000 fa1b 	bl	8014858 <I2C_WaitOnFlagUntilTimeout>
 8014422:	4603      	mov	r3, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d001      	beq.n	801442c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8014428:	2301      	movs	r3, #1
 801442a:	e091      	b.n	8014550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	681a      	ldr	r2, [r3, #0]
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801443a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	691a      	ldr	r2, [r3, #16]
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014446:	b2d2      	uxtb	r2, r2
 8014448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801444e:	1c5a      	adds	r2, r3, #1
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014458:	3b01      	subs	r3, #1
 801445a:	b29a      	uxth	r2, r3
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014464:	b29b      	uxth	r3, r3
 8014466:	3b01      	subs	r3, #1
 8014468:	b29a      	uxth	r2, r3
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	691a      	ldr	r2, [r3, #16]
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014478:	b2d2      	uxtb	r2, r2
 801447a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014480:	1c5a      	adds	r2, r3, #1
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801448a:	3b01      	subs	r3, #1
 801448c:	b29a      	uxth	r2, r3
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014496:	b29b      	uxth	r3, r3
 8014498:	3b01      	subs	r3, #1
 801449a:	b29a      	uxth	r2, r3
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80144a0:	e042      	b.n	8014528 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80144a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80144a6:	68f8      	ldr	r0, [r7, #12]
 80144a8:	f000 fb2e 	bl	8014b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80144ac:	4603      	mov	r3, r0
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d001      	beq.n	80144b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80144b2:	2301      	movs	r3, #1
 80144b4:	e04c      	b.n	8014550 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	691a      	ldr	r2, [r3, #16]
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144c0:	b2d2      	uxtb	r2, r2
 80144c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144c8:	1c5a      	adds	r2, r3, #1
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144d2:	3b01      	subs	r3, #1
 80144d4:	b29a      	uxth	r2, r3
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80144de:	b29b      	uxth	r3, r3
 80144e0:	3b01      	subs	r3, #1
 80144e2:	b29a      	uxth	r2, r3
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	695b      	ldr	r3, [r3, #20]
 80144ee:	f003 0304 	and.w	r3, r3, #4
 80144f2:	2b04      	cmp	r3, #4
 80144f4:	d118      	bne.n	8014528 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	691a      	ldr	r2, [r3, #16]
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014500:	b2d2      	uxtb	r2, r2
 8014502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014508:	1c5a      	adds	r2, r3, #1
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014512:	3b01      	subs	r3, #1
 8014514:	b29a      	uxth	r2, r3
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801451e:	b29b      	uxth	r3, r3
 8014520:	3b01      	subs	r3, #1
 8014522:	b29a      	uxth	r2, r3
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801452c:	2b00      	cmp	r3, #0
 801452e:	f47f aec2 	bne.w	80142b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	2220      	movs	r2, #32
 8014536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2200      	movs	r2, #0
 801453e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2200      	movs	r2, #0
 8014546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801454a:	2300      	movs	r3, #0
 801454c:	e000      	b.n	8014550 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 801454e:	2302      	movs	r3, #2
  }
}
 8014550:	4618      	mov	r0, r3
 8014552:	3728      	adds	r7, #40	; 0x28
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	00010004 	.word	0x00010004

0801455c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b088      	sub	sp, #32
 8014560:	af02      	add	r7, sp, #8
 8014562:	60f8      	str	r0, [r7, #12]
 8014564:	4608      	mov	r0, r1
 8014566:	4611      	mov	r1, r2
 8014568:	461a      	mov	r2, r3
 801456a:	4603      	mov	r3, r0
 801456c:	817b      	strh	r3, [r7, #10]
 801456e:	460b      	mov	r3, r1
 8014570:	813b      	strh	r3, [r7, #8]
 8014572:	4613      	mov	r3, r2
 8014574:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	681a      	ldr	r2, [r3, #0]
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8014586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014588:	9300      	str	r3, [sp, #0]
 801458a:	6a3b      	ldr	r3, [r7, #32]
 801458c:	2200      	movs	r2, #0
 801458e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8014592:	68f8      	ldr	r0, [r7, #12]
 8014594:	f000 f960 	bl	8014858 <I2C_WaitOnFlagUntilTimeout>
 8014598:	4603      	mov	r3, r0
 801459a:	2b00      	cmp	r3, #0
 801459c:	d00d      	beq.n	80145ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80145a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145ac:	d103      	bne.n	80145b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80145b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80145b6:	2303      	movs	r3, #3
 80145b8:	e05f      	b.n	801467a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80145ba:	897b      	ldrh	r3, [r7, #10]
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	461a      	mov	r2, r3
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80145c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80145ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145cc:	6a3a      	ldr	r2, [r7, #32]
 80145ce:	492d      	ldr	r1, [pc, #180]	; (8014684 <I2C_RequestMemoryWrite+0x128>)
 80145d0:	68f8      	ldr	r0, [r7, #12]
 80145d2:	f000 f998 	bl	8014906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80145d6:	4603      	mov	r3, r0
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d001      	beq.n	80145e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80145dc:	2301      	movs	r3, #1
 80145de:	e04c      	b.n	801467a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80145e0:	2300      	movs	r3, #0
 80145e2:	617b      	str	r3, [r7, #20]
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	695b      	ldr	r3, [r3, #20]
 80145ea:	617b      	str	r3, [r7, #20]
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	699b      	ldr	r3, [r3, #24]
 80145f2:	617b      	str	r3, [r7, #20]
 80145f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80145f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145f8:	6a39      	ldr	r1, [r7, #32]
 80145fa:	68f8      	ldr	r0, [r7, #12]
 80145fc:	f000 fa02 	bl	8014a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8014600:	4603      	mov	r3, r0
 8014602:	2b00      	cmp	r3, #0
 8014604:	d00d      	beq.n	8014622 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801460a:	2b04      	cmp	r3, #4
 801460c:	d107      	bne.n	801461e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	681a      	ldr	r2, [r3, #0]
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801461c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801461e:	2301      	movs	r3, #1
 8014620:	e02b      	b.n	801467a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8014622:	88fb      	ldrh	r3, [r7, #6]
 8014624:	2b01      	cmp	r3, #1
 8014626:	d105      	bne.n	8014634 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8014628:	893b      	ldrh	r3, [r7, #8]
 801462a:	b2da      	uxtb	r2, r3
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	611a      	str	r2, [r3, #16]
 8014632:	e021      	b.n	8014678 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8014634:	893b      	ldrh	r3, [r7, #8]
 8014636:	0a1b      	lsrs	r3, r3, #8
 8014638:	b29b      	uxth	r3, r3
 801463a:	b2da      	uxtb	r2, r3
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014644:	6a39      	ldr	r1, [r7, #32]
 8014646:	68f8      	ldr	r0, [r7, #12]
 8014648:	f000 f9dc 	bl	8014a04 <I2C_WaitOnTXEFlagUntilTimeout>
 801464c:	4603      	mov	r3, r0
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00d      	beq.n	801466e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014656:	2b04      	cmp	r3, #4
 8014658:	d107      	bne.n	801466a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	681a      	ldr	r2, [r3, #0]
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801466a:	2301      	movs	r3, #1
 801466c:	e005      	b.n	801467a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801466e:	893b      	ldrh	r3, [r7, #8]
 8014670:	b2da      	uxtb	r2, r3
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8014678:	2300      	movs	r3, #0
}
 801467a:	4618      	mov	r0, r3
 801467c:	3718      	adds	r7, #24
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	00010002 	.word	0x00010002

08014688 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b088      	sub	sp, #32
 801468c:	af02      	add	r7, sp, #8
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	4608      	mov	r0, r1
 8014692:	4611      	mov	r1, r2
 8014694:	461a      	mov	r2, r3
 8014696:	4603      	mov	r3, r0
 8014698:	817b      	strh	r3, [r7, #10]
 801469a:	460b      	mov	r3, r1
 801469c:	813b      	strh	r3, [r7, #8]
 801469e:	4613      	mov	r3, r2
 80146a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	681a      	ldr	r2, [r3, #0]
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80146b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	681a      	ldr	r2, [r3, #0]
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80146c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80146c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c4:	9300      	str	r3, [sp, #0]
 80146c6:	6a3b      	ldr	r3, [r7, #32]
 80146c8:	2200      	movs	r2, #0
 80146ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80146ce:	68f8      	ldr	r0, [r7, #12]
 80146d0:	f000 f8c2 	bl	8014858 <I2C_WaitOnFlagUntilTimeout>
 80146d4:	4603      	mov	r3, r0
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d00d      	beq.n	80146f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80146e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80146e8:	d103      	bne.n	80146f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80146f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80146f2:	2303      	movs	r3, #3
 80146f4:	e0aa      	b.n	801484c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80146f6:	897b      	ldrh	r3, [r7, #10]
 80146f8:	b2db      	uxtb	r3, r3
 80146fa:	461a      	mov	r2, r3
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8014704:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8014706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014708:	6a3a      	ldr	r2, [r7, #32]
 801470a:	4952      	ldr	r1, [pc, #328]	; (8014854 <I2C_RequestMemoryRead+0x1cc>)
 801470c:	68f8      	ldr	r0, [r7, #12]
 801470e:	f000 f8fa 	bl	8014906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014712:	4603      	mov	r3, r0
 8014714:	2b00      	cmp	r3, #0
 8014716:	d001      	beq.n	801471c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8014718:	2301      	movs	r3, #1
 801471a:	e097      	b.n	801484c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801471c:	2300      	movs	r3, #0
 801471e:	617b      	str	r3, [r7, #20]
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	695b      	ldr	r3, [r3, #20]
 8014726:	617b      	str	r3, [r7, #20]
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	699b      	ldr	r3, [r3, #24]
 801472e:	617b      	str	r3, [r7, #20]
 8014730:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014734:	6a39      	ldr	r1, [r7, #32]
 8014736:	68f8      	ldr	r0, [r7, #12]
 8014738:	f000 f964 	bl	8014a04 <I2C_WaitOnTXEFlagUntilTimeout>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d00d      	beq.n	801475e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014746:	2b04      	cmp	r3, #4
 8014748:	d107      	bne.n	801475a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014758:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801475a:	2301      	movs	r3, #1
 801475c:	e076      	b.n	801484c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801475e:	88fb      	ldrh	r3, [r7, #6]
 8014760:	2b01      	cmp	r3, #1
 8014762:	d105      	bne.n	8014770 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8014764:	893b      	ldrh	r3, [r7, #8]
 8014766:	b2da      	uxtb	r2, r3
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	611a      	str	r2, [r3, #16]
 801476e:	e021      	b.n	80147b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8014770:	893b      	ldrh	r3, [r7, #8]
 8014772:	0a1b      	lsrs	r3, r3, #8
 8014774:	b29b      	uxth	r3, r3
 8014776:	b2da      	uxtb	r2, r3
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801477e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014780:	6a39      	ldr	r1, [r7, #32]
 8014782:	68f8      	ldr	r0, [r7, #12]
 8014784:	f000 f93e 	bl	8014a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8014788:	4603      	mov	r3, r0
 801478a:	2b00      	cmp	r3, #0
 801478c:	d00d      	beq.n	80147aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014792:	2b04      	cmp	r3, #4
 8014794:	d107      	bne.n	80147a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80147a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80147a6:	2301      	movs	r3, #1
 80147a8:	e050      	b.n	801484c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80147aa:	893b      	ldrh	r3, [r7, #8]
 80147ac:	b2da      	uxtb	r2, r3
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80147b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147b6:	6a39      	ldr	r1, [r7, #32]
 80147b8:	68f8      	ldr	r0, [r7, #12]
 80147ba:	f000 f923 	bl	8014a04 <I2C_WaitOnTXEFlagUntilTimeout>
 80147be:	4603      	mov	r3, r0
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d00d      	beq.n	80147e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147c8:	2b04      	cmp	r3, #4
 80147ca:	d107      	bne.n	80147dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	681a      	ldr	r2, [r3, #0]
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80147da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80147dc:	2301      	movs	r3, #1
 80147de:	e035      	b.n	801484c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	681a      	ldr	r2, [r3, #0]
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80147ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80147f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f2:	9300      	str	r3, [sp, #0]
 80147f4:	6a3b      	ldr	r3, [r7, #32]
 80147f6:	2200      	movs	r2, #0
 80147f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80147fc:	68f8      	ldr	r0, [r7, #12]
 80147fe:	f000 f82b 	bl	8014858 <I2C_WaitOnFlagUntilTimeout>
 8014802:	4603      	mov	r3, r0
 8014804:	2b00      	cmp	r3, #0
 8014806:	d00d      	beq.n	8014824 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014816:	d103      	bne.n	8014820 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801481e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8014820:	2303      	movs	r3, #3
 8014822:	e013      	b.n	801484c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8014824:	897b      	ldrh	r3, [r7, #10]
 8014826:	b2db      	uxtb	r3, r3
 8014828:	f043 0301 	orr.w	r3, r3, #1
 801482c:	b2da      	uxtb	r2, r3
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8014834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014836:	6a3a      	ldr	r2, [r7, #32]
 8014838:	4906      	ldr	r1, [pc, #24]	; (8014854 <I2C_RequestMemoryRead+0x1cc>)
 801483a:	68f8      	ldr	r0, [r7, #12]
 801483c:	f000 f863 	bl	8014906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014840:	4603      	mov	r3, r0
 8014842:	2b00      	cmp	r3, #0
 8014844:	d001      	beq.n	801484a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8014846:	2301      	movs	r3, #1
 8014848:	e000      	b.n	801484c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801484a:	2300      	movs	r3, #0
}
 801484c:	4618      	mov	r0, r3
 801484e:	3718      	adds	r7, #24
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}
 8014854:	00010002 	.word	0x00010002

08014858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b084      	sub	sp, #16
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	603b      	str	r3, [r7, #0]
 8014864:	4613      	mov	r3, r2
 8014866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014868:	e025      	b.n	80148b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014870:	d021      	beq.n	80148b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014872:	f7fd fd7f 	bl	8012374 <HAL_GetTick>
 8014876:	4602      	mov	r2, r0
 8014878:	69bb      	ldr	r3, [r7, #24]
 801487a:	1ad3      	subs	r3, r2, r3
 801487c:	683a      	ldr	r2, [r7, #0]
 801487e:	429a      	cmp	r2, r3
 8014880:	d302      	bcc.n	8014888 <I2C_WaitOnFlagUntilTimeout+0x30>
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d116      	bne.n	80148b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	2200      	movs	r2, #0
 801488c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	2220      	movs	r2, #32
 8014892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2200      	movs	r2, #0
 801489a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148a2:	f043 0220 	orr.w	r2, r3, #32
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2200      	movs	r2, #0
 80148ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80148b2:	2301      	movs	r3, #1
 80148b4:	e023      	b.n	80148fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	0c1b      	lsrs	r3, r3, #16
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	2b01      	cmp	r3, #1
 80148be:	d10d      	bne.n	80148dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	695b      	ldr	r3, [r3, #20]
 80148c6:	43da      	mvns	r2, r3
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	4013      	ands	r3, r2
 80148cc:	b29b      	uxth	r3, r3
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	bf0c      	ite	eq
 80148d2:	2301      	moveq	r3, #1
 80148d4:	2300      	movne	r3, #0
 80148d6:	b2db      	uxtb	r3, r3
 80148d8:	461a      	mov	r2, r3
 80148da:	e00c      	b.n	80148f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	699b      	ldr	r3, [r3, #24]
 80148e2:	43da      	mvns	r2, r3
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	4013      	ands	r3, r2
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	bf0c      	ite	eq
 80148ee:	2301      	moveq	r3, #1
 80148f0:	2300      	movne	r3, #0
 80148f2:	b2db      	uxtb	r3, r3
 80148f4:	461a      	mov	r2, r3
 80148f6:	79fb      	ldrb	r3, [r7, #7]
 80148f8:	429a      	cmp	r2, r3
 80148fa:	d0b6      	beq.n	801486a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80148fc:	2300      	movs	r3, #0
}
 80148fe:	4618      	mov	r0, r3
 8014900:	3710      	adds	r7, #16
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}

08014906 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8014906:	b580      	push	{r7, lr}
 8014908:	b084      	sub	sp, #16
 801490a:	af00      	add	r7, sp, #0
 801490c:	60f8      	str	r0, [r7, #12]
 801490e:	60b9      	str	r1, [r7, #8]
 8014910:	607a      	str	r2, [r7, #4]
 8014912:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014914:	e051      	b.n	80149ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	695b      	ldr	r3, [r3, #20]
 801491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014924:	d123      	bne.n	801496e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	681a      	ldr	r2, [r3, #0]
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014934:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801493e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2200      	movs	r2, #0
 8014944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	2220      	movs	r2, #32
 801494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	2200      	movs	r2, #0
 8014952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801495a:	f043 0204 	orr.w	r2, r3, #4
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2200      	movs	r2, #0
 8014966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801496a:	2301      	movs	r3, #1
 801496c:	e046      	b.n	80149fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014974:	d021      	beq.n	80149ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014976:	f7fd fcfd 	bl	8012374 <HAL_GetTick>
 801497a:	4602      	mov	r2, r0
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	1ad3      	subs	r3, r2, r3
 8014980:	687a      	ldr	r2, [r7, #4]
 8014982:	429a      	cmp	r2, r3
 8014984:	d302      	bcc.n	801498c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d116      	bne.n	80149ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	2200      	movs	r2, #0
 8014990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	2220      	movs	r2, #32
 8014996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	2200      	movs	r2, #0
 801499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149a6:	f043 0220 	orr.w	r2, r3, #32
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2200      	movs	r2, #0
 80149b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80149b6:	2301      	movs	r3, #1
 80149b8:	e020      	b.n	80149fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	0c1b      	lsrs	r3, r3, #16
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	2b01      	cmp	r3, #1
 80149c2:	d10c      	bne.n	80149de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	695b      	ldr	r3, [r3, #20]
 80149ca:	43da      	mvns	r2, r3
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	4013      	ands	r3, r2
 80149d0:	b29b      	uxth	r3, r3
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	bf14      	ite	ne
 80149d6:	2301      	movne	r3, #1
 80149d8:	2300      	moveq	r3, #0
 80149da:	b2db      	uxtb	r3, r3
 80149dc:	e00b      	b.n	80149f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	699b      	ldr	r3, [r3, #24]
 80149e4:	43da      	mvns	r2, r3
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	4013      	ands	r3, r2
 80149ea:	b29b      	uxth	r3, r3
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	bf14      	ite	ne
 80149f0:	2301      	movne	r3, #1
 80149f2:	2300      	moveq	r3, #0
 80149f4:	b2db      	uxtb	r3, r3
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d18d      	bne.n	8014916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80149fa:	2300      	movs	r3, #0
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	3710      	adds	r7, #16
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}

08014a04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014a10:	e02d      	b.n	8014a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8014a12:	68f8      	ldr	r0, [r7, #12]
 8014a14:	f000 f8ce 	bl	8014bb4 <I2C_IsAcknowledgeFailed>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d001      	beq.n	8014a22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8014a1e:	2301      	movs	r3, #1
 8014a20:	e02d      	b.n	8014a7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a28:	d021      	beq.n	8014a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014a2a:	f7fd fca3 	bl	8012374 <HAL_GetTick>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	1ad3      	subs	r3, r2, r3
 8014a34:	68ba      	ldr	r2, [r7, #8]
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d302      	bcc.n	8014a40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d116      	bne.n	8014a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	2200      	movs	r2, #0
 8014a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	2220      	movs	r2, #32
 8014a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	2200      	movs	r2, #0
 8014a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a5a:	f043 0220 	orr.w	r2, r3, #32
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	2200      	movs	r2, #0
 8014a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e007      	b.n	8014a7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	695b      	ldr	r3, [r3, #20]
 8014a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a78:	2b80      	cmp	r3, #128	; 0x80
 8014a7a:	d1ca      	bne.n	8014a12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014a7c:	2300      	movs	r3, #0
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3710      	adds	r7, #16
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}

08014a86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014a86:	b580      	push	{r7, lr}
 8014a88:	b084      	sub	sp, #16
 8014a8a:	af00      	add	r7, sp, #0
 8014a8c:	60f8      	str	r0, [r7, #12]
 8014a8e:	60b9      	str	r1, [r7, #8]
 8014a90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8014a92:	e02d      	b.n	8014af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8014a94:	68f8      	ldr	r0, [r7, #12]
 8014a96:	f000 f88d 	bl	8014bb4 <I2C_IsAcknowledgeFailed>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d001      	beq.n	8014aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	e02d      	b.n	8014b00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aaa:	d021      	beq.n	8014af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014aac:	f7fd fc62 	bl	8012374 <HAL_GetTick>
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	68ba      	ldr	r2, [r7, #8]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d302      	bcc.n	8014ac2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d116      	bne.n	8014af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	2220      	movs	r2, #32
 8014acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014adc:	f043 0220 	orr.w	r2, r3, #32
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014aec:	2301      	movs	r3, #1
 8014aee:	e007      	b.n	8014b00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	695b      	ldr	r3, [r3, #20]
 8014af6:	f003 0304 	and.w	r3, r3, #4
 8014afa:	2b04      	cmp	r3, #4
 8014afc:	d1ca      	bne.n	8014a94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014afe:	2300      	movs	r3, #0
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3710      	adds	r7, #16
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b084      	sub	sp, #16
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	60b9      	str	r1, [r7, #8]
 8014b12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014b14:	e042      	b.n	8014b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	695b      	ldr	r3, [r3, #20]
 8014b1c:	f003 0310 	and.w	r3, r3, #16
 8014b20:	2b10      	cmp	r3, #16
 8014b22:	d119      	bne.n	8014b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	f06f 0210 	mvn.w	r2, #16
 8014b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	2200      	movs	r2, #0
 8014b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2220      	movs	r2, #32
 8014b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014b54:	2301      	movs	r3, #1
 8014b56:	e029      	b.n	8014bac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014b58:	f7fd fc0c 	bl	8012374 <HAL_GetTick>
 8014b5c:	4602      	mov	r2, r0
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	1ad3      	subs	r3, r2, r3
 8014b62:	68ba      	ldr	r2, [r7, #8]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d302      	bcc.n	8014b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d116      	bne.n	8014b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2200      	movs	r2, #0
 8014b72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	2220      	movs	r2, #32
 8014b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	2200      	movs	r2, #0
 8014b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b88:	f043 0220 	orr.w	r2, r3, #32
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	2200      	movs	r2, #0
 8014b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014b98:	2301      	movs	r3, #1
 8014b9a:	e007      	b.n	8014bac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	695b      	ldr	r3, [r3, #20]
 8014ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ba6:	2b40      	cmp	r3, #64	; 0x40
 8014ba8:	d1b5      	bne.n	8014b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8014baa:	2300      	movs	r3, #0
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3710      	adds	r7, #16
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}

08014bb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	695b      	ldr	r3, [r3, #20]
 8014bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014bca:	d11b      	bne.n	8014c04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014bd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2220      	movs	r2, #32
 8014be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2200      	movs	r2, #0
 8014be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bf0:	f043 0204 	orr.w	r2, r3, #4
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8014c00:	2301      	movs	r3, #1
 8014c02:	e000      	b.n	8014c06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8014c04:	2300      	movs	r3, #0
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	370c      	adds	r7, #12
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c10:	4770      	bx	lr
	...

08014c14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8014c1e:	2300      	movs	r3, #0
 8014c20:	603b      	str	r3, [r7, #0]
 8014c22:	4b20      	ldr	r3, [pc, #128]	; (8014ca4 <HAL_PWREx_EnableOverDrive+0x90>)
 8014c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c26:	4a1f      	ldr	r2, [pc, #124]	; (8014ca4 <HAL_PWREx_EnableOverDrive+0x90>)
 8014c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8014c2e:	4b1d      	ldr	r3, [pc, #116]	; (8014ca4 <HAL_PWREx_EnableOverDrive+0x90>)
 8014c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014c36:	603b      	str	r3, [r7, #0]
 8014c38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8014c3a:	4b1b      	ldr	r3, [pc, #108]	; (8014ca8 <HAL_PWREx_EnableOverDrive+0x94>)
 8014c3c:	2201      	movs	r2, #1
 8014c3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014c40:	f7fd fb98 	bl	8012374 <HAL_GetTick>
 8014c44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8014c46:	e009      	b.n	8014c5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8014c48:	f7fd fb94 	bl	8012374 <HAL_GetTick>
 8014c4c:	4602      	mov	r2, r0
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	1ad3      	subs	r3, r2, r3
 8014c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014c56:	d901      	bls.n	8014c5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8014c58:	2303      	movs	r3, #3
 8014c5a:	e01f      	b.n	8014c9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8014c5c:	4b13      	ldr	r3, [pc, #76]	; (8014cac <HAL_PWREx_EnableOverDrive+0x98>)
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014c68:	d1ee      	bne.n	8014c48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8014c6a:	4b11      	ldr	r3, [pc, #68]	; (8014cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8014c6c:	2201      	movs	r2, #1
 8014c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014c70:	f7fd fb80 	bl	8012374 <HAL_GetTick>
 8014c74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8014c76:	e009      	b.n	8014c8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8014c78:	f7fd fb7c 	bl	8012374 <HAL_GetTick>
 8014c7c:	4602      	mov	r2, r0
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	1ad3      	subs	r3, r2, r3
 8014c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014c86:	d901      	bls.n	8014c8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8014c88:	2303      	movs	r3, #3
 8014c8a:	e007      	b.n	8014c9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8014c8c:	4b07      	ldr	r3, [pc, #28]	; (8014cac <HAL_PWREx_EnableOverDrive+0x98>)
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014c98:	d1ee      	bne.n	8014c78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8014c9a:	2300      	movs	r3, #0
}
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	3708      	adds	r7, #8
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}
 8014ca4:	40023800 	.word	0x40023800
 8014ca8:	420e0040 	.word	0x420e0040
 8014cac:	40007000 	.word	0x40007000
 8014cb0:	420e0044 	.word	0x420e0044

08014cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b084      	sub	sp, #16
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d101      	bne.n	8014cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	e0cc      	b.n	8014e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014cc8:	4b68      	ldr	r3, [pc, #416]	; (8014e6c <HAL_RCC_ClockConfig+0x1b8>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	f003 030f 	and.w	r3, r3, #15
 8014cd0:	683a      	ldr	r2, [r7, #0]
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d90c      	bls.n	8014cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014cd6:	4b65      	ldr	r3, [pc, #404]	; (8014e6c <HAL_RCC_ClockConfig+0x1b8>)
 8014cd8:	683a      	ldr	r2, [r7, #0]
 8014cda:	b2d2      	uxtb	r2, r2
 8014cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014cde:	4b63      	ldr	r3, [pc, #396]	; (8014e6c <HAL_RCC_ClockConfig+0x1b8>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	f003 030f 	and.w	r3, r3, #15
 8014ce6:	683a      	ldr	r2, [r7, #0]
 8014ce8:	429a      	cmp	r2, r3
 8014cea:	d001      	beq.n	8014cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8014cec:	2301      	movs	r3, #1
 8014cee:	e0b8      	b.n	8014e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	f003 0302 	and.w	r3, r3, #2
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d020      	beq.n	8014d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	f003 0304 	and.w	r3, r3, #4
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d005      	beq.n	8014d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8014d08:	4b59      	ldr	r3, [pc, #356]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014d0a:	689b      	ldr	r3, [r3, #8]
 8014d0c:	4a58      	ldr	r2, [pc, #352]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8014d12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f003 0308 	and.w	r3, r3, #8
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d005      	beq.n	8014d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8014d20:	4b53      	ldr	r3, [pc, #332]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014d22:	689b      	ldr	r3, [r3, #8]
 8014d24:	4a52      	ldr	r2, [pc, #328]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8014d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014d2c:	4b50      	ldr	r3, [pc, #320]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014d2e:	689b      	ldr	r3, [r3, #8]
 8014d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	689b      	ldr	r3, [r3, #8]
 8014d38:	494d      	ldr	r1, [pc, #308]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014d3a:	4313      	orrs	r3, r2
 8014d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	f003 0301 	and.w	r3, r3, #1
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d044      	beq.n	8014dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	685b      	ldr	r3, [r3, #4]
 8014d4e:	2b01      	cmp	r3, #1
 8014d50:	d107      	bne.n	8014d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014d52:	4b47      	ldr	r3, [pc, #284]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d119      	bne.n	8014d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014d5e:	2301      	movs	r3, #1
 8014d60:	e07f      	b.n	8014e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	2b02      	cmp	r3, #2
 8014d68:	d003      	beq.n	8014d72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014d6e:	2b03      	cmp	r3, #3
 8014d70:	d107      	bne.n	8014d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014d72:	4b3f      	ldr	r3, [pc, #252]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d109      	bne.n	8014d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014d7e:	2301      	movs	r3, #1
 8014d80:	e06f      	b.n	8014e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014d82:	4b3b      	ldr	r3, [pc, #236]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	f003 0302 	and.w	r3, r3, #2
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d101      	bne.n	8014d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014d8e:	2301      	movs	r3, #1
 8014d90:	e067      	b.n	8014e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014d92:	4b37      	ldr	r3, [pc, #220]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014d94:	689b      	ldr	r3, [r3, #8]
 8014d96:	f023 0203 	bic.w	r2, r3, #3
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	4934      	ldr	r1, [pc, #208]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014da0:	4313      	orrs	r3, r2
 8014da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014da4:	f7fd fae6 	bl	8012374 <HAL_GetTick>
 8014da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014daa:	e00a      	b.n	8014dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014dac:	f7fd fae2 	bl	8012374 <HAL_GetTick>
 8014db0:	4602      	mov	r2, r0
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	1ad3      	subs	r3, r2, r3
 8014db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8014dba:	4293      	cmp	r3, r2
 8014dbc:	d901      	bls.n	8014dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8014dbe:	2303      	movs	r3, #3
 8014dc0:	e04f      	b.n	8014e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014dc2:	4b2b      	ldr	r3, [pc, #172]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014dc4:	689b      	ldr	r3, [r3, #8]
 8014dc6:	f003 020c 	and.w	r2, r3, #12
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	009b      	lsls	r3, r3, #2
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d1eb      	bne.n	8014dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014dd4:	4b25      	ldr	r3, [pc, #148]	; (8014e6c <HAL_RCC_ClockConfig+0x1b8>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	f003 030f 	and.w	r3, r3, #15
 8014ddc:	683a      	ldr	r2, [r7, #0]
 8014dde:	429a      	cmp	r2, r3
 8014de0:	d20c      	bcs.n	8014dfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014de2:	4b22      	ldr	r3, [pc, #136]	; (8014e6c <HAL_RCC_ClockConfig+0x1b8>)
 8014de4:	683a      	ldr	r2, [r7, #0]
 8014de6:	b2d2      	uxtb	r2, r2
 8014de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014dea:	4b20      	ldr	r3, [pc, #128]	; (8014e6c <HAL_RCC_ClockConfig+0x1b8>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	f003 030f 	and.w	r3, r3, #15
 8014df2:	683a      	ldr	r2, [r7, #0]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d001      	beq.n	8014dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8014df8:	2301      	movs	r3, #1
 8014dfa:	e032      	b.n	8014e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	f003 0304 	and.w	r3, r3, #4
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d008      	beq.n	8014e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014e08:	4b19      	ldr	r3, [pc, #100]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014e0a:	689b      	ldr	r3, [r3, #8]
 8014e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	68db      	ldr	r3, [r3, #12]
 8014e14:	4916      	ldr	r1, [pc, #88]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014e16:	4313      	orrs	r3, r2
 8014e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	f003 0308 	and.w	r3, r3, #8
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d009      	beq.n	8014e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014e26:	4b12      	ldr	r3, [pc, #72]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014e28:	689b      	ldr	r3, [r3, #8]
 8014e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	691b      	ldr	r3, [r3, #16]
 8014e32:	00db      	lsls	r3, r3, #3
 8014e34:	490e      	ldr	r1, [pc, #56]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014e36:	4313      	orrs	r3, r2
 8014e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014e3a:	f000 f887 	bl	8014f4c <HAL_RCC_GetSysClockFreq>
 8014e3e:	4602      	mov	r2, r0
 8014e40:	4b0b      	ldr	r3, [pc, #44]	; (8014e70 <HAL_RCC_ClockConfig+0x1bc>)
 8014e42:	689b      	ldr	r3, [r3, #8]
 8014e44:	091b      	lsrs	r3, r3, #4
 8014e46:	f003 030f 	and.w	r3, r3, #15
 8014e4a:	490a      	ldr	r1, [pc, #40]	; (8014e74 <HAL_RCC_ClockConfig+0x1c0>)
 8014e4c:	5ccb      	ldrb	r3, [r1, r3]
 8014e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8014e52:	4a09      	ldr	r2, [pc, #36]	; (8014e78 <HAL_RCC_ClockConfig+0x1c4>)
 8014e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8014e56:	4b09      	ldr	r3, [pc, #36]	; (8014e7c <HAL_RCC_ClockConfig+0x1c8>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7fd f8a6 	bl	8011fac <HAL_InitTick>

  return HAL_OK;
 8014e60:	2300      	movs	r3, #0
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3710      	adds	r7, #16
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	40023c00 	.word	0x40023c00
 8014e70:	40023800 	.word	0x40023800
 8014e74:	08023398 	.word	0x08023398
 8014e78:	20000000 	.word	0x20000000
 8014e7c:	20000004 	.word	0x20000004

08014e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014e80:	b480      	push	{r7}
 8014e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014e84:	4b03      	ldr	r3, [pc, #12]	; (8014e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8014e86:	681b      	ldr	r3, [r3, #0]
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e90:	4770      	bx	lr
 8014e92:	bf00      	nop
 8014e94:	20000000 	.word	0x20000000

08014e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8014e9c:	f7ff fff0 	bl	8014e80 <HAL_RCC_GetHCLKFreq>
 8014ea0:	4602      	mov	r2, r0
 8014ea2:	4b05      	ldr	r3, [pc, #20]	; (8014eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014ea4:	689b      	ldr	r3, [r3, #8]
 8014ea6:	0a9b      	lsrs	r3, r3, #10
 8014ea8:	f003 0307 	and.w	r3, r3, #7
 8014eac:	4903      	ldr	r1, [pc, #12]	; (8014ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8014eae:	5ccb      	ldrb	r3, [r1, r3]
 8014eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	40023800 	.word	0x40023800
 8014ebc:	080233a8 	.word	0x080233a8

08014ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8014ec4:	f7ff ffdc 	bl	8014e80 <HAL_RCC_GetHCLKFreq>
 8014ec8:	4602      	mov	r2, r0
 8014eca:	4b05      	ldr	r3, [pc, #20]	; (8014ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8014ecc:	689b      	ldr	r3, [r3, #8]
 8014ece:	0b5b      	lsrs	r3, r3, #13
 8014ed0:	f003 0307 	and.w	r3, r3, #7
 8014ed4:	4903      	ldr	r1, [pc, #12]	; (8014ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014ed6:	5ccb      	ldrb	r3, [r1, r3]
 8014ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	bd80      	pop	{r7, pc}
 8014ee0:	40023800 	.word	0x40023800
 8014ee4:	080233a8 	.word	0x080233a8

08014ee8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b083      	sub	sp, #12
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	220f      	movs	r2, #15
 8014ef6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8014ef8:	4b12      	ldr	r3, [pc, #72]	; (8014f44 <HAL_RCC_GetClockConfig+0x5c>)
 8014efa:	689b      	ldr	r3, [r3, #8]
 8014efc:	f003 0203 	and.w	r2, r3, #3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8014f04:	4b0f      	ldr	r3, [pc, #60]	; (8014f44 <HAL_RCC_GetClockConfig+0x5c>)
 8014f06:	689b      	ldr	r3, [r3, #8]
 8014f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8014f10:	4b0c      	ldr	r3, [pc, #48]	; (8014f44 <HAL_RCC_GetClockConfig+0x5c>)
 8014f12:	689b      	ldr	r3, [r3, #8]
 8014f14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8014f1c:	4b09      	ldr	r3, [pc, #36]	; (8014f44 <HAL_RCC_GetClockConfig+0x5c>)
 8014f1e:	689b      	ldr	r3, [r3, #8]
 8014f20:	08db      	lsrs	r3, r3, #3
 8014f22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8014f2a:	4b07      	ldr	r3, [pc, #28]	; (8014f48 <HAL_RCC_GetClockConfig+0x60>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	f003 020f 	and.w	r2, r3, #15
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	601a      	str	r2, [r3, #0]
}
 8014f36:	bf00      	nop
 8014f38:	370c      	adds	r7, #12
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f40:	4770      	bx	lr
 8014f42:	bf00      	nop
 8014f44:	40023800 	.word	0x40023800
 8014f48:	40023c00 	.word	0x40023c00

08014f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014f50:	b088      	sub	sp, #32
 8014f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8014f54:	2300      	movs	r3, #0
 8014f56:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8014f60:	2300      	movs	r3, #0
 8014f62:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8014f64:	2300      	movs	r3, #0
 8014f66:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014f68:	4bce      	ldr	r3, [pc, #824]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8014f6a:	689b      	ldr	r3, [r3, #8]
 8014f6c:	f003 030c 	and.w	r3, r3, #12
 8014f70:	2b0c      	cmp	r3, #12
 8014f72:	f200 818d 	bhi.w	8015290 <HAL_RCC_GetSysClockFreq+0x344>
 8014f76:	a201      	add	r2, pc, #4	; (adr r2, 8014f7c <HAL_RCC_GetSysClockFreq+0x30>)
 8014f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f7c:	08014fb1 	.word	0x08014fb1
 8014f80:	08015291 	.word	0x08015291
 8014f84:	08015291 	.word	0x08015291
 8014f88:	08015291 	.word	0x08015291
 8014f8c:	08014fb7 	.word	0x08014fb7
 8014f90:	08015291 	.word	0x08015291
 8014f94:	08015291 	.word	0x08015291
 8014f98:	08015291 	.word	0x08015291
 8014f9c:	08014fbd 	.word	0x08014fbd
 8014fa0:	08015291 	.word	0x08015291
 8014fa4:	08015291 	.word	0x08015291
 8014fa8:	08015291 	.word	0x08015291
 8014fac:	08015131 	.word	0x08015131
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014fb0:	4bbd      	ldr	r3, [pc, #756]	; (80152a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8014fb2:	61bb      	str	r3, [r7, #24]
       break;
 8014fb4:	e16f      	b.n	8015296 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014fb6:	4bbd      	ldr	r3, [pc, #756]	; (80152ac <HAL_RCC_GetSysClockFreq+0x360>)
 8014fb8:	61bb      	str	r3, [r7, #24]
      break;
 8014fba:	e16c      	b.n	8015296 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014fbc:	4bb9      	ldr	r3, [pc, #740]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8014fbe:	685b      	ldr	r3, [r3, #4]
 8014fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014fc4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014fc6:	4bb7      	ldr	r3, [pc, #732]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8014fc8:	685b      	ldr	r3, [r3, #4]
 8014fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d053      	beq.n	801507a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014fd2:	4bb4      	ldr	r3, [pc, #720]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	099b      	lsrs	r3, r3, #6
 8014fd8:	461a      	mov	r2, r3
 8014fda:	f04f 0300 	mov.w	r3, #0
 8014fde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014fe2:	f04f 0100 	mov.w	r1, #0
 8014fe6:	ea02 0400 	and.w	r4, r2, r0
 8014fea:	603c      	str	r4, [r7, #0]
 8014fec:	400b      	ands	r3, r1
 8014fee:	607b      	str	r3, [r7, #4]
 8014ff0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	4629      	mov	r1, r5
 8014ff8:	f04f 0200 	mov.w	r2, #0
 8014ffc:	f04f 0300 	mov.w	r3, #0
 8015000:	014b      	lsls	r3, r1, #5
 8015002:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8015006:	0142      	lsls	r2, r0, #5
 8015008:	4610      	mov	r0, r2
 801500a:	4619      	mov	r1, r3
 801500c:	4623      	mov	r3, r4
 801500e:	1ac0      	subs	r0, r0, r3
 8015010:	462b      	mov	r3, r5
 8015012:	eb61 0103 	sbc.w	r1, r1, r3
 8015016:	f04f 0200 	mov.w	r2, #0
 801501a:	f04f 0300 	mov.w	r3, #0
 801501e:	018b      	lsls	r3, r1, #6
 8015020:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8015024:	0182      	lsls	r2, r0, #6
 8015026:	1a12      	subs	r2, r2, r0
 8015028:	eb63 0301 	sbc.w	r3, r3, r1
 801502c:	f04f 0000 	mov.w	r0, #0
 8015030:	f04f 0100 	mov.w	r1, #0
 8015034:	00d9      	lsls	r1, r3, #3
 8015036:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801503a:	00d0      	lsls	r0, r2, #3
 801503c:	4602      	mov	r2, r0
 801503e:	460b      	mov	r3, r1
 8015040:	4621      	mov	r1, r4
 8015042:	1852      	adds	r2, r2, r1
 8015044:	4629      	mov	r1, r5
 8015046:	eb43 0101 	adc.w	r1, r3, r1
 801504a:	460b      	mov	r3, r1
 801504c:	f04f 0000 	mov.w	r0, #0
 8015050:	f04f 0100 	mov.w	r1, #0
 8015054:	0259      	lsls	r1, r3, #9
 8015056:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801505a:	0250      	lsls	r0, r2, #9
 801505c:	4602      	mov	r2, r0
 801505e:	460b      	mov	r3, r1
 8015060:	4610      	mov	r0, r2
 8015062:	4619      	mov	r1, r3
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	461a      	mov	r2, r3
 8015068:	f04f 0300 	mov.w	r3, #0
 801506c:	f7fb fd26 	bl	8010abc <__aeabi_uldivmod>
 8015070:	4602      	mov	r2, r0
 8015072:	460b      	mov	r3, r1
 8015074:	4613      	mov	r3, r2
 8015076:	61fb      	str	r3, [r7, #28]
 8015078:	e04c      	b.n	8015114 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801507a:	4b8a      	ldr	r3, [pc, #552]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	099b      	lsrs	r3, r3, #6
 8015080:	461a      	mov	r2, r3
 8015082:	f04f 0300 	mov.w	r3, #0
 8015086:	f240 10ff 	movw	r0, #511	; 0x1ff
 801508a:	f04f 0100 	mov.w	r1, #0
 801508e:	ea02 0a00 	and.w	sl, r2, r0
 8015092:	ea03 0b01 	and.w	fp, r3, r1
 8015096:	4650      	mov	r0, sl
 8015098:	4659      	mov	r1, fp
 801509a:	f04f 0200 	mov.w	r2, #0
 801509e:	f04f 0300 	mov.w	r3, #0
 80150a2:	014b      	lsls	r3, r1, #5
 80150a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80150a8:	0142      	lsls	r2, r0, #5
 80150aa:	4610      	mov	r0, r2
 80150ac:	4619      	mov	r1, r3
 80150ae:	ebb0 000a 	subs.w	r0, r0, sl
 80150b2:	eb61 010b 	sbc.w	r1, r1, fp
 80150b6:	f04f 0200 	mov.w	r2, #0
 80150ba:	f04f 0300 	mov.w	r3, #0
 80150be:	018b      	lsls	r3, r1, #6
 80150c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80150c4:	0182      	lsls	r2, r0, #6
 80150c6:	1a12      	subs	r2, r2, r0
 80150c8:	eb63 0301 	sbc.w	r3, r3, r1
 80150cc:	f04f 0000 	mov.w	r0, #0
 80150d0:	f04f 0100 	mov.w	r1, #0
 80150d4:	00d9      	lsls	r1, r3, #3
 80150d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80150da:	00d0      	lsls	r0, r2, #3
 80150dc:	4602      	mov	r2, r0
 80150de:	460b      	mov	r3, r1
 80150e0:	eb12 020a 	adds.w	r2, r2, sl
 80150e4:	eb43 030b 	adc.w	r3, r3, fp
 80150e8:	f04f 0000 	mov.w	r0, #0
 80150ec:	f04f 0100 	mov.w	r1, #0
 80150f0:	0299      	lsls	r1, r3, #10
 80150f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80150f6:	0290      	lsls	r0, r2, #10
 80150f8:	4602      	mov	r2, r0
 80150fa:	460b      	mov	r3, r1
 80150fc:	4610      	mov	r0, r2
 80150fe:	4619      	mov	r1, r3
 8015100:	697b      	ldr	r3, [r7, #20]
 8015102:	461a      	mov	r2, r3
 8015104:	f04f 0300 	mov.w	r3, #0
 8015108:	f7fb fcd8 	bl	8010abc <__aeabi_uldivmod>
 801510c:	4602      	mov	r2, r0
 801510e:	460b      	mov	r3, r1
 8015110:	4613      	mov	r3, r2
 8015112:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8015114:	4b63      	ldr	r3, [pc, #396]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	0c1b      	lsrs	r3, r3, #16
 801511a:	f003 0303 	and.w	r3, r3, #3
 801511e:	3301      	adds	r3, #1
 8015120:	005b      	lsls	r3, r3, #1
 8015122:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8015124:	69fa      	ldr	r2, [r7, #28]
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	fbb2 f3f3 	udiv	r3, r2, r3
 801512c:	61bb      	str	r3, [r7, #24]
      break;
 801512e:	e0b2      	b.n	8015296 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8015130:	4b5c      	ldr	r3, [pc, #368]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015138:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801513a:	4b5a      	ldr	r3, [pc, #360]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015142:	2b00      	cmp	r3, #0
 8015144:	d04d      	beq.n	80151e2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015146:	4b57      	ldr	r3, [pc, #348]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8015148:	685b      	ldr	r3, [r3, #4]
 801514a:	099b      	lsrs	r3, r3, #6
 801514c:	461a      	mov	r2, r3
 801514e:	f04f 0300 	mov.w	r3, #0
 8015152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015156:	f04f 0100 	mov.w	r1, #0
 801515a:	ea02 0800 	and.w	r8, r2, r0
 801515e:	ea03 0901 	and.w	r9, r3, r1
 8015162:	4640      	mov	r0, r8
 8015164:	4649      	mov	r1, r9
 8015166:	f04f 0200 	mov.w	r2, #0
 801516a:	f04f 0300 	mov.w	r3, #0
 801516e:	014b      	lsls	r3, r1, #5
 8015170:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8015174:	0142      	lsls	r2, r0, #5
 8015176:	4610      	mov	r0, r2
 8015178:	4619      	mov	r1, r3
 801517a:	ebb0 0008 	subs.w	r0, r0, r8
 801517e:	eb61 0109 	sbc.w	r1, r1, r9
 8015182:	f04f 0200 	mov.w	r2, #0
 8015186:	f04f 0300 	mov.w	r3, #0
 801518a:	018b      	lsls	r3, r1, #6
 801518c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8015190:	0182      	lsls	r2, r0, #6
 8015192:	1a12      	subs	r2, r2, r0
 8015194:	eb63 0301 	sbc.w	r3, r3, r1
 8015198:	f04f 0000 	mov.w	r0, #0
 801519c:	f04f 0100 	mov.w	r1, #0
 80151a0:	00d9      	lsls	r1, r3, #3
 80151a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80151a6:	00d0      	lsls	r0, r2, #3
 80151a8:	4602      	mov	r2, r0
 80151aa:	460b      	mov	r3, r1
 80151ac:	eb12 0208 	adds.w	r2, r2, r8
 80151b0:	eb43 0309 	adc.w	r3, r3, r9
 80151b4:	f04f 0000 	mov.w	r0, #0
 80151b8:	f04f 0100 	mov.w	r1, #0
 80151bc:	0259      	lsls	r1, r3, #9
 80151be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80151c2:	0250      	lsls	r0, r2, #9
 80151c4:	4602      	mov	r2, r0
 80151c6:	460b      	mov	r3, r1
 80151c8:	4610      	mov	r0, r2
 80151ca:	4619      	mov	r1, r3
 80151cc:	697b      	ldr	r3, [r7, #20]
 80151ce:	461a      	mov	r2, r3
 80151d0:	f04f 0300 	mov.w	r3, #0
 80151d4:	f7fb fc72 	bl	8010abc <__aeabi_uldivmod>
 80151d8:	4602      	mov	r2, r0
 80151da:	460b      	mov	r3, r1
 80151dc:	4613      	mov	r3, r2
 80151de:	61fb      	str	r3, [r7, #28]
 80151e0:	e04a      	b.n	8015278 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80151e2:	4b30      	ldr	r3, [pc, #192]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80151e4:	685b      	ldr	r3, [r3, #4]
 80151e6:	099b      	lsrs	r3, r3, #6
 80151e8:	461a      	mov	r2, r3
 80151ea:	f04f 0300 	mov.w	r3, #0
 80151ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80151f2:	f04f 0100 	mov.w	r1, #0
 80151f6:	ea02 0400 	and.w	r4, r2, r0
 80151fa:	ea03 0501 	and.w	r5, r3, r1
 80151fe:	4620      	mov	r0, r4
 8015200:	4629      	mov	r1, r5
 8015202:	f04f 0200 	mov.w	r2, #0
 8015206:	f04f 0300 	mov.w	r3, #0
 801520a:	014b      	lsls	r3, r1, #5
 801520c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8015210:	0142      	lsls	r2, r0, #5
 8015212:	4610      	mov	r0, r2
 8015214:	4619      	mov	r1, r3
 8015216:	1b00      	subs	r0, r0, r4
 8015218:	eb61 0105 	sbc.w	r1, r1, r5
 801521c:	f04f 0200 	mov.w	r2, #0
 8015220:	f04f 0300 	mov.w	r3, #0
 8015224:	018b      	lsls	r3, r1, #6
 8015226:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801522a:	0182      	lsls	r2, r0, #6
 801522c:	1a12      	subs	r2, r2, r0
 801522e:	eb63 0301 	sbc.w	r3, r3, r1
 8015232:	f04f 0000 	mov.w	r0, #0
 8015236:	f04f 0100 	mov.w	r1, #0
 801523a:	00d9      	lsls	r1, r3, #3
 801523c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015240:	00d0      	lsls	r0, r2, #3
 8015242:	4602      	mov	r2, r0
 8015244:	460b      	mov	r3, r1
 8015246:	1912      	adds	r2, r2, r4
 8015248:	eb45 0303 	adc.w	r3, r5, r3
 801524c:	f04f 0000 	mov.w	r0, #0
 8015250:	f04f 0100 	mov.w	r1, #0
 8015254:	0299      	lsls	r1, r3, #10
 8015256:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801525a:	0290      	lsls	r0, r2, #10
 801525c:	4602      	mov	r2, r0
 801525e:	460b      	mov	r3, r1
 8015260:	4610      	mov	r0, r2
 8015262:	4619      	mov	r1, r3
 8015264:	697b      	ldr	r3, [r7, #20]
 8015266:	461a      	mov	r2, r3
 8015268:	f04f 0300 	mov.w	r3, #0
 801526c:	f7fb fc26 	bl	8010abc <__aeabi_uldivmod>
 8015270:	4602      	mov	r2, r0
 8015272:	460b      	mov	r3, r1
 8015274:	4613      	mov	r3, r2
 8015276:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8015278:	4b0a      	ldr	r3, [pc, #40]	; (80152a4 <HAL_RCC_GetSysClockFreq+0x358>)
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	0f1b      	lsrs	r3, r3, #28
 801527e:	f003 0307 	and.w	r3, r3, #7
 8015282:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8015284:	69fa      	ldr	r2, [r7, #28]
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	fbb2 f3f3 	udiv	r3, r2, r3
 801528c:	61bb      	str	r3, [r7, #24]
      break;
 801528e:	e002      	b.n	8015296 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8015290:	4b05      	ldr	r3, [pc, #20]	; (80152a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8015292:	61bb      	str	r3, [r7, #24]
      break;
 8015294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8015296:	69bb      	ldr	r3, [r7, #24]
}
 8015298:	4618      	mov	r0, r3
 801529a:	3720      	adds	r7, #32
 801529c:	46bd      	mov	sp, r7
 801529e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80152a2:	bf00      	nop
 80152a4:	40023800 	.word	0x40023800
 80152a8:	00f42400 	.word	0x00f42400
 80152ac:	007a1200 	.word	0x007a1200

080152b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b086      	sub	sp, #24
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d101      	bne.n	80152c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80152be:	2301      	movs	r3, #1
 80152c0:	e28d      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	f003 0301 	and.w	r3, r3, #1
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	f000 8083 	beq.w	80153d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80152d0:	4b94      	ldr	r3, [pc, #592]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80152d2:	689b      	ldr	r3, [r3, #8]
 80152d4:	f003 030c 	and.w	r3, r3, #12
 80152d8:	2b04      	cmp	r3, #4
 80152da:	d019      	beq.n	8015310 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80152dc:	4b91      	ldr	r3, [pc, #580]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80152de:	689b      	ldr	r3, [r3, #8]
 80152e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80152e4:	2b08      	cmp	r3, #8
 80152e6:	d106      	bne.n	80152f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80152e8:	4b8e      	ldr	r3, [pc, #568]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80152ea:	685b      	ldr	r3, [r3, #4]
 80152ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80152f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80152f4:	d00c      	beq.n	8015310 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80152f6:	4b8b      	ldr	r3, [pc, #556]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80152f8:	689b      	ldr	r3, [r3, #8]
 80152fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80152fe:	2b0c      	cmp	r3, #12
 8015300:	d112      	bne.n	8015328 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015302:	4b88      	ldr	r3, [pc, #544]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801530a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801530e:	d10b      	bne.n	8015328 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015310:	4b84      	ldr	r3, [pc, #528]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015318:	2b00      	cmp	r3, #0
 801531a:	d05b      	beq.n	80153d4 <HAL_RCC_OscConfig+0x124>
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d157      	bne.n	80153d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8015324:	2301      	movs	r3, #1
 8015326:	e25a      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	685b      	ldr	r3, [r3, #4]
 801532c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015330:	d106      	bne.n	8015340 <HAL_RCC_OscConfig+0x90>
 8015332:	4b7c      	ldr	r3, [pc, #496]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	4a7b      	ldr	r2, [pc, #492]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801533c:	6013      	str	r3, [r2, #0]
 801533e:	e01d      	b.n	801537c <HAL_RCC_OscConfig+0xcc>
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015348:	d10c      	bne.n	8015364 <HAL_RCC_OscConfig+0xb4>
 801534a:	4b76      	ldr	r3, [pc, #472]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	4a75      	ldr	r2, [pc, #468]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015354:	6013      	str	r3, [r2, #0]
 8015356:	4b73      	ldr	r3, [pc, #460]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	4a72      	ldr	r2, [pc, #456]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 801535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015360:	6013      	str	r3, [r2, #0]
 8015362:	e00b      	b.n	801537c <HAL_RCC_OscConfig+0xcc>
 8015364:	4b6f      	ldr	r3, [pc, #444]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	4a6e      	ldr	r2, [pc, #440]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 801536a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801536e:	6013      	str	r3, [r2, #0]
 8015370:	4b6c      	ldr	r3, [pc, #432]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	4a6b      	ldr	r2, [pc, #428]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801537a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	685b      	ldr	r3, [r3, #4]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d013      	beq.n	80153ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015384:	f7fc fff6 	bl	8012374 <HAL_GetTick>
 8015388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801538a:	e008      	b.n	801539e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801538c:	f7fc fff2 	bl	8012374 <HAL_GetTick>
 8015390:	4602      	mov	r2, r0
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	1ad3      	subs	r3, r2, r3
 8015396:	2b64      	cmp	r3, #100	; 0x64
 8015398:	d901      	bls.n	801539e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801539a:	2303      	movs	r3, #3
 801539c:	e21f      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801539e:	4b61      	ldr	r3, [pc, #388]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d0f0      	beq.n	801538c <HAL_RCC_OscConfig+0xdc>
 80153aa:	e014      	b.n	80153d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80153ac:	f7fc ffe2 	bl	8012374 <HAL_GetTick>
 80153b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80153b2:	e008      	b.n	80153c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80153b4:	f7fc ffde 	bl	8012374 <HAL_GetTick>
 80153b8:	4602      	mov	r2, r0
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	1ad3      	subs	r3, r2, r3
 80153be:	2b64      	cmp	r3, #100	; 0x64
 80153c0:	d901      	bls.n	80153c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80153c2:	2303      	movs	r3, #3
 80153c4:	e20b      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80153c6:	4b57      	ldr	r3, [pc, #348]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d1f0      	bne.n	80153b4 <HAL_RCC_OscConfig+0x104>
 80153d2:	e000      	b.n	80153d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80153d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	f003 0302 	and.w	r3, r3, #2
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d06f      	beq.n	80154c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80153e2:	4b50      	ldr	r3, [pc, #320]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80153e4:	689b      	ldr	r3, [r3, #8]
 80153e6:	f003 030c 	and.w	r3, r3, #12
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d017      	beq.n	801541e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80153ee:	4b4d      	ldr	r3, [pc, #308]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80153f0:	689b      	ldr	r3, [r3, #8]
 80153f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80153f6:	2b08      	cmp	r3, #8
 80153f8:	d105      	bne.n	8015406 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80153fa:	4b4a      	ldr	r3, [pc, #296]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80153fc:	685b      	ldr	r3, [r3, #4]
 80153fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015402:	2b00      	cmp	r3, #0
 8015404:	d00b      	beq.n	801541e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015406:	4b47      	ldr	r3, [pc, #284]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015408:	689b      	ldr	r3, [r3, #8]
 801540a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801540e:	2b0c      	cmp	r3, #12
 8015410:	d11c      	bne.n	801544c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015412:	4b44      	ldr	r3, [pc, #272]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801541a:	2b00      	cmp	r3, #0
 801541c:	d116      	bne.n	801544c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801541e:	4b41      	ldr	r3, [pc, #260]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	f003 0302 	and.w	r3, r3, #2
 8015426:	2b00      	cmp	r3, #0
 8015428:	d005      	beq.n	8015436 <HAL_RCC_OscConfig+0x186>
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	68db      	ldr	r3, [r3, #12]
 801542e:	2b01      	cmp	r3, #1
 8015430:	d001      	beq.n	8015436 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8015432:	2301      	movs	r3, #1
 8015434:	e1d3      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015436:	4b3b      	ldr	r3, [pc, #236]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	691b      	ldr	r3, [r3, #16]
 8015442:	00db      	lsls	r3, r3, #3
 8015444:	4937      	ldr	r1, [pc, #220]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015446:	4313      	orrs	r3, r2
 8015448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801544a:	e03a      	b.n	80154c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	68db      	ldr	r3, [r3, #12]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d020      	beq.n	8015496 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015454:	4b34      	ldr	r3, [pc, #208]	; (8015528 <HAL_RCC_OscConfig+0x278>)
 8015456:	2201      	movs	r2, #1
 8015458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801545a:	f7fc ff8b 	bl	8012374 <HAL_GetTick>
 801545e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015460:	e008      	b.n	8015474 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015462:	f7fc ff87 	bl	8012374 <HAL_GetTick>
 8015466:	4602      	mov	r2, r0
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	1ad3      	subs	r3, r2, r3
 801546c:	2b02      	cmp	r3, #2
 801546e:	d901      	bls.n	8015474 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8015470:	2303      	movs	r3, #3
 8015472:	e1b4      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015474:	4b2b      	ldr	r3, [pc, #172]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	f003 0302 	and.w	r3, r3, #2
 801547c:	2b00      	cmp	r3, #0
 801547e:	d0f0      	beq.n	8015462 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015480:	4b28      	ldr	r3, [pc, #160]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	691b      	ldr	r3, [r3, #16]
 801548c:	00db      	lsls	r3, r3, #3
 801548e:	4925      	ldr	r1, [pc, #148]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 8015490:	4313      	orrs	r3, r2
 8015492:	600b      	str	r3, [r1, #0]
 8015494:	e015      	b.n	80154c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015496:	4b24      	ldr	r3, [pc, #144]	; (8015528 <HAL_RCC_OscConfig+0x278>)
 8015498:	2200      	movs	r2, #0
 801549a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801549c:	f7fc ff6a 	bl	8012374 <HAL_GetTick>
 80154a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80154a2:	e008      	b.n	80154b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80154a4:	f7fc ff66 	bl	8012374 <HAL_GetTick>
 80154a8:	4602      	mov	r2, r0
 80154aa:	693b      	ldr	r3, [r7, #16]
 80154ac:	1ad3      	subs	r3, r2, r3
 80154ae:	2b02      	cmp	r3, #2
 80154b0:	d901      	bls.n	80154b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80154b2:	2303      	movs	r3, #3
 80154b4:	e193      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80154b6:	4b1b      	ldr	r3, [pc, #108]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	f003 0302 	and.w	r3, r3, #2
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d1f0      	bne.n	80154a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	f003 0308 	and.w	r3, r3, #8
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d036      	beq.n	801553c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	695b      	ldr	r3, [r3, #20]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d016      	beq.n	8015504 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80154d6:	4b15      	ldr	r3, [pc, #84]	; (801552c <HAL_RCC_OscConfig+0x27c>)
 80154d8:	2201      	movs	r2, #1
 80154da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80154dc:	f7fc ff4a 	bl	8012374 <HAL_GetTick>
 80154e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80154e2:	e008      	b.n	80154f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80154e4:	f7fc ff46 	bl	8012374 <HAL_GetTick>
 80154e8:	4602      	mov	r2, r0
 80154ea:	693b      	ldr	r3, [r7, #16]
 80154ec:	1ad3      	subs	r3, r2, r3
 80154ee:	2b02      	cmp	r3, #2
 80154f0:	d901      	bls.n	80154f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80154f2:	2303      	movs	r3, #3
 80154f4:	e173      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80154f6:	4b0b      	ldr	r3, [pc, #44]	; (8015524 <HAL_RCC_OscConfig+0x274>)
 80154f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80154fa:	f003 0302 	and.w	r3, r3, #2
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d0f0      	beq.n	80154e4 <HAL_RCC_OscConfig+0x234>
 8015502:	e01b      	b.n	801553c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015504:	4b09      	ldr	r3, [pc, #36]	; (801552c <HAL_RCC_OscConfig+0x27c>)
 8015506:	2200      	movs	r2, #0
 8015508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801550a:	f7fc ff33 	bl	8012374 <HAL_GetTick>
 801550e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015510:	e00e      	b.n	8015530 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015512:	f7fc ff2f 	bl	8012374 <HAL_GetTick>
 8015516:	4602      	mov	r2, r0
 8015518:	693b      	ldr	r3, [r7, #16]
 801551a:	1ad3      	subs	r3, r2, r3
 801551c:	2b02      	cmp	r3, #2
 801551e:	d907      	bls.n	8015530 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8015520:	2303      	movs	r3, #3
 8015522:	e15c      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
 8015524:	40023800 	.word	0x40023800
 8015528:	42470000 	.word	0x42470000
 801552c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015530:	4b8a      	ldr	r3, [pc, #552]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 8015532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015534:	f003 0302 	and.w	r3, r3, #2
 8015538:	2b00      	cmp	r3, #0
 801553a:	d1ea      	bne.n	8015512 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	f003 0304 	and.w	r3, r3, #4
 8015544:	2b00      	cmp	r3, #0
 8015546:	f000 8097 	beq.w	8015678 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801554a:	2300      	movs	r3, #0
 801554c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801554e:	4b83      	ldr	r3, [pc, #524]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 8015550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015556:	2b00      	cmp	r3, #0
 8015558:	d10f      	bne.n	801557a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801555a:	2300      	movs	r3, #0
 801555c:	60bb      	str	r3, [r7, #8]
 801555e:	4b7f      	ldr	r3, [pc, #508]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 8015560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015562:	4a7e      	ldr	r2, [pc, #504]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 8015564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015568:	6413      	str	r3, [r2, #64]	; 0x40
 801556a:	4b7c      	ldr	r3, [pc, #496]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 801556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015572:	60bb      	str	r3, [r7, #8]
 8015574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015576:	2301      	movs	r3, #1
 8015578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801557a:	4b79      	ldr	r3, [pc, #484]	; (8015760 <HAL_RCC_OscConfig+0x4b0>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015582:	2b00      	cmp	r3, #0
 8015584:	d118      	bne.n	80155b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015586:	4b76      	ldr	r3, [pc, #472]	; (8015760 <HAL_RCC_OscConfig+0x4b0>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	4a75      	ldr	r2, [pc, #468]	; (8015760 <HAL_RCC_OscConfig+0x4b0>)
 801558c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015592:	f7fc feef 	bl	8012374 <HAL_GetTick>
 8015596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015598:	e008      	b.n	80155ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801559a:	f7fc feeb 	bl	8012374 <HAL_GetTick>
 801559e:	4602      	mov	r2, r0
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	1ad3      	subs	r3, r2, r3
 80155a4:	2b02      	cmp	r3, #2
 80155a6:	d901      	bls.n	80155ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80155a8:	2303      	movs	r3, #3
 80155aa:	e118      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80155ac:	4b6c      	ldr	r3, [pc, #432]	; (8015760 <HAL_RCC_OscConfig+0x4b0>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d0f0      	beq.n	801559a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	689b      	ldr	r3, [r3, #8]
 80155bc:	2b01      	cmp	r3, #1
 80155be:	d106      	bne.n	80155ce <HAL_RCC_OscConfig+0x31e>
 80155c0:	4b66      	ldr	r3, [pc, #408]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80155c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155c4:	4a65      	ldr	r2, [pc, #404]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80155c6:	f043 0301 	orr.w	r3, r3, #1
 80155ca:	6713      	str	r3, [r2, #112]	; 0x70
 80155cc:	e01c      	b.n	8015608 <HAL_RCC_OscConfig+0x358>
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	689b      	ldr	r3, [r3, #8]
 80155d2:	2b05      	cmp	r3, #5
 80155d4:	d10c      	bne.n	80155f0 <HAL_RCC_OscConfig+0x340>
 80155d6:	4b61      	ldr	r3, [pc, #388]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80155d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155da:	4a60      	ldr	r2, [pc, #384]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80155dc:	f043 0304 	orr.w	r3, r3, #4
 80155e0:	6713      	str	r3, [r2, #112]	; 0x70
 80155e2:	4b5e      	ldr	r3, [pc, #376]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80155e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155e6:	4a5d      	ldr	r2, [pc, #372]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80155e8:	f043 0301 	orr.w	r3, r3, #1
 80155ec:	6713      	str	r3, [r2, #112]	; 0x70
 80155ee:	e00b      	b.n	8015608 <HAL_RCC_OscConfig+0x358>
 80155f0:	4b5a      	ldr	r3, [pc, #360]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80155f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155f4:	4a59      	ldr	r2, [pc, #356]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80155f6:	f023 0301 	bic.w	r3, r3, #1
 80155fa:	6713      	str	r3, [r2, #112]	; 0x70
 80155fc:	4b57      	ldr	r3, [pc, #348]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80155fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015600:	4a56      	ldr	r2, [pc, #344]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 8015602:	f023 0304 	bic.w	r3, r3, #4
 8015606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	689b      	ldr	r3, [r3, #8]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d015      	beq.n	801563c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015610:	f7fc feb0 	bl	8012374 <HAL_GetTick>
 8015614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015616:	e00a      	b.n	801562e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015618:	f7fc feac 	bl	8012374 <HAL_GetTick>
 801561c:	4602      	mov	r2, r0
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	1ad3      	subs	r3, r2, r3
 8015622:	f241 3288 	movw	r2, #5000	; 0x1388
 8015626:	4293      	cmp	r3, r2
 8015628:	d901      	bls.n	801562e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801562a:	2303      	movs	r3, #3
 801562c:	e0d7      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801562e:	4b4b      	ldr	r3, [pc, #300]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 8015630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015632:	f003 0302 	and.w	r3, r3, #2
 8015636:	2b00      	cmp	r3, #0
 8015638:	d0ee      	beq.n	8015618 <HAL_RCC_OscConfig+0x368>
 801563a:	e014      	b.n	8015666 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801563c:	f7fc fe9a 	bl	8012374 <HAL_GetTick>
 8015640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015642:	e00a      	b.n	801565a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015644:	f7fc fe96 	bl	8012374 <HAL_GetTick>
 8015648:	4602      	mov	r2, r0
 801564a:	693b      	ldr	r3, [r7, #16]
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	f241 3288 	movw	r2, #5000	; 0x1388
 8015652:	4293      	cmp	r3, r2
 8015654:	d901      	bls.n	801565a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8015656:	2303      	movs	r3, #3
 8015658:	e0c1      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801565a:	4b40      	ldr	r3, [pc, #256]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 801565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801565e:	f003 0302 	and.w	r3, r3, #2
 8015662:	2b00      	cmp	r3, #0
 8015664:	d1ee      	bne.n	8015644 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8015666:	7dfb      	ldrb	r3, [r7, #23]
 8015668:	2b01      	cmp	r3, #1
 801566a:	d105      	bne.n	8015678 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801566c:	4b3b      	ldr	r3, [pc, #236]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 801566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015670:	4a3a      	ldr	r2, [pc, #232]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 8015672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	699b      	ldr	r3, [r3, #24]
 801567c:	2b00      	cmp	r3, #0
 801567e:	f000 80ad 	beq.w	80157dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8015682:	4b36      	ldr	r3, [pc, #216]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 8015684:	689b      	ldr	r3, [r3, #8]
 8015686:	f003 030c 	and.w	r3, r3, #12
 801568a:	2b08      	cmp	r3, #8
 801568c:	d060      	beq.n	8015750 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	699b      	ldr	r3, [r3, #24]
 8015692:	2b02      	cmp	r3, #2
 8015694:	d145      	bne.n	8015722 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015696:	4b33      	ldr	r3, [pc, #204]	; (8015764 <HAL_RCC_OscConfig+0x4b4>)
 8015698:	2200      	movs	r2, #0
 801569a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801569c:	f7fc fe6a 	bl	8012374 <HAL_GetTick>
 80156a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80156a2:	e008      	b.n	80156b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80156a4:	f7fc fe66 	bl	8012374 <HAL_GetTick>
 80156a8:	4602      	mov	r2, r0
 80156aa:	693b      	ldr	r3, [r7, #16]
 80156ac:	1ad3      	subs	r3, r2, r3
 80156ae:	2b02      	cmp	r3, #2
 80156b0:	d901      	bls.n	80156b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80156b2:	2303      	movs	r3, #3
 80156b4:	e093      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80156b6:	4b29      	ldr	r3, [pc, #164]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d1f0      	bne.n	80156a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	69da      	ldr	r2, [r3, #28]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	6a1b      	ldr	r3, [r3, #32]
 80156ca:	431a      	orrs	r2, r3
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156d0:	019b      	lsls	r3, r3, #6
 80156d2:	431a      	orrs	r2, r3
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156d8:	085b      	lsrs	r3, r3, #1
 80156da:	3b01      	subs	r3, #1
 80156dc:	041b      	lsls	r3, r3, #16
 80156de:	431a      	orrs	r2, r3
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156e4:	061b      	lsls	r3, r3, #24
 80156e6:	431a      	orrs	r2, r3
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156ec:	071b      	lsls	r3, r3, #28
 80156ee:	491b      	ldr	r1, [pc, #108]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 80156f0:	4313      	orrs	r3, r2
 80156f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80156f4:	4b1b      	ldr	r3, [pc, #108]	; (8015764 <HAL_RCC_OscConfig+0x4b4>)
 80156f6:	2201      	movs	r2, #1
 80156f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80156fa:	f7fc fe3b 	bl	8012374 <HAL_GetTick>
 80156fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015700:	e008      	b.n	8015714 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015702:	f7fc fe37 	bl	8012374 <HAL_GetTick>
 8015706:	4602      	mov	r2, r0
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	1ad3      	subs	r3, r2, r3
 801570c:	2b02      	cmp	r3, #2
 801570e:	d901      	bls.n	8015714 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8015710:	2303      	movs	r3, #3
 8015712:	e064      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015714:	4b11      	ldr	r3, [pc, #68]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801571c:	2b00      	cmp	r3, #0
 801571e:	d0f0      	beq.n	8015702 <HAL_RCC_OscConfig+0x452>
 8015720:	e05c      	b.n	80157dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015722:	4b10      	ldr	r3, [pc, #64]	; (8015764 <HAL_RCC_OscConfig+0x4b4>)
 8015724:	2200      	movs	r2, #0
 8015726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015728:	f7fc fe24 	bl	8012374 <HAL_GetTick>
 801572c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801572e:	e008      	b.n	8015742 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015730:	f7fc fe20 	bl	8012374 <HAL_GetTick>
 8015734:	4602      	mov	r2, r0
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	1ad3      	subs	r3, r2, r3
 801573a:	2b02      	cmp	r3, #2
 801573c:	d901      	bls.n	8015742 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801573e:	2303      	movs	r3, #3
 8015740:	e04d      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015742:	4b06      	ldr	r3, [pc, #24]	; (801575c <HAL_RCC_OscConfig+0x4ac>)
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801574a:	2b00      	cmp	r3, #0
 801574c:	d1f0      	bne.n	8015730 <HAL_RCC_OscConfig+0x480>
 801574e:	e045      	b.n	80157dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	699b      	ldr	r3, [r3, #24]
 8015754:	2b01      	cmp	r3, #1
 8015756:	d107      	bne.n	8015768 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8015758:	2301      	movs	r3, #1
 801575a:	e040      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
 801575c:	40023800 	.word	0x40023800
 8015760:	40007000 	.word	0x40007000
 8015764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8015768:	4b1f      	ldr	r3, [pc, #124]	; (80157e8 <HAL_RCC_OscConfig+0x538>)
 801576a:	685b      	ldr	r3, [r3, #4]
 801576c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	699b      	ldr	r3, [r3, #24]
 8015772:	2b01      	cmp	r3, #1
 8015774:	d030      	beq.n	80157d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015780:	429a      	cmp	r2, r3
 8015782:	d129      	bne.n	80157d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801578e:	429a      	cmp	r2, r3
 8015790:	d122      	bne.n	80157d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8015792:	68fa      	ldr	r2, [r7, #12]
 8015794:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8015798:	4013      	ands	r3, r2
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801579e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80157a0:	4293      	cmp	r3, r2
 80157a2:	d119      	bne.n	80157d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157ae:	085b      	lsrs	r3, r3, #1
 80157b0:	3b01      	subs	r3, #1
 80157b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80157b4:	429a      	cmp	r2, r3
 80157b6:	d10f      	bne.n	80157d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80157c4:	429a      	cmp	r2, r3
 80157c6:	d107      	bne.n	80157d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d001      	beq.n	80157dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80157d8:	2301      	movs	r3, #1
 80157da:	e000      	b.n	80157de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80157dc:	2300      	movs	r3, #0
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3718      	adds	r7, #24
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	40023800 	.word	0x40023800

080157ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d101      	bne.n	80157fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80157fa:	2301      	movs	r3, #1
 80157fc:	e07b      	b.n	80158f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015802:	2b00      	cmp	r3, #0
 8015804:	d108      	bne.n	8015818 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801580e:	d009      	beq.n	8015824 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	2200      	movs	r2, #0
 8015814:	61da      	str	r2, [r3, #28]
 8015816:	e005      	b.n	8015824 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2200      	movs	r2, #0
 801581c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2200      	movs	r2, #0
 8015822:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2200      	movs	r2, #0
 8015828:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015830:	b2db      	uxtb	r3, r3
 8015832:	2b00      	cmp	r3, #0
 8015834:	d106      	bne.n	8015844 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2200      	movs	r2, #0
 801583a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801583e:	6878      	ldr	r0, [r7, #4]
 8015840:	f7fc fa0a 	bl	8011c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2202      	movs	r2, #2
 8015848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801585a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	685b      	ldr	r3, [r3, #4]
 8015860:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	689b      	ldr	r3, [r3, #8]
 8015868:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801586c:	431a      	orrs	r2, r3
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	68db      	ldr	r3, [r3, #12]
 8015872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015876:	431a      	orrs	r2, r3
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	691b      	ldr	r3, [r3, #16]
 801587c:	f003 0302 	and.w	r3, r3, #2
 8015880:	431a      	orrs	r2, r3
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	695b      	ldr	r3, [r3, #20]
 8015886:	f003 0301 	and.w	r3, r3, #1
 801588a:	431a      	orrs	r2, r3
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	699b      	ldr	r3, [r3, #24]
 8015890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015894:	431a      	orrs	r2, r3
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	69db      	ldr	r3, [r3, #28]
 801589a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801589e:	431a      	orrs	r2, r3
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6a1b      	ldr	r3, [r3, #32]
 80158a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80158a8:	ea42 0103 	orr.w	r1, r2, r3
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	430a      	orrs	r2, r1
 80158ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	699b      	ldr	r3, [r3, #24]
 80158c0:	0c1b      	lsrs	r3, r3, #16
 80158c2:	f003 0104 	and.w	r1, r3, #4
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158ca:	f003 0210 	and.w	r2, r3, #16
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	430a      	orrs	r2, r1
 80158d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	69da      	ldr	r2, [r3, #28]
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80158e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2200      	movs	r2, #0
 80158ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2201      	movs	r2, #1
 80158f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80158f4:	2300      	movs	r3, #0
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	3708      	adds	r7, #8
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}

080158fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80158fe:	b580      	push	{r7, lr}
 8015900:	b088      	sub	sp, #32
 8015902:	af00      	add	r7, sp, #0
 8015904:	60f8      	str	r0, [r7, #12]
 8015906:	60b9      	str	r1, [r7, #8]
 8015908:	603b      	str	r3, [r7, #0]
 801590a:	4613      	mov	r3, r2
 801590c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801590e:	2300      	movs	r3, #0
 8015910:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015918:	2b01      	cmp	r3, #1
 801591a:	d101      	bne.n	8015920 <HAL_SPI_Transmit+0x22>
 801591c:	2302      	movs	r3, #2
 801591e:	e126      	b.n	8015b6e <HAL_SPI_Transmit+0x270>
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	2201      	movs	r2, #1
 8015924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015928:	f7fc fd24 	bl	8012374 <HAL_GetTick>
 801592c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801592e:	88fb      	ldrh	r3, [r7, #6]
 8015930:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015938:	b2db      	uxtb	r3, r3
 801593a:	2b01      	cmp	r3, #1
 801593c:	d002      	beq.n	8015944 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801593e:	2302      	movs	r3, #2
 8015940:	77fb      	strb	r3, [r7, #31]
    goto error;
 8015942:	e10b      	b.n	8015b5c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d002      	beq.n	8015950 <HAL_SPI_Transmit+0x52>
 801594a:	88fb      	ldrh	r3, [r7, #6]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d102      	bne.n	8015956 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8015950:	2301      	movs	r3, #1
 8015952:	77fb      	strb	r3, [r7, #31]
    goto error;
 8015954:	e102      	b.n	8015b5c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	2203      	movs	r2, #3
 801595a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	2200      	movs	r2, #0
 8015962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	68ba      	ldr	r2, [r7, #8]
 8015968:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	88fa      	ldrh	r2, [r7, #6]
 801596e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	88fa      	ldrh	r2, [r7, #6]
 8015974:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	2200      	movs	r2, #0
 801597a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	2200      	movs	r2, #0
 8015980:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	2200      	movs	r2, #0
 8015986:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	2200      	movs	r2, #0
 801598c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2200      	movs	r2, #0
 8015992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	689b      	ldr	r3, [r3, #8]
 8015998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801599c:	d10f      	bne.n	80159be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	681a      	ldr	r2, [r3, #0]
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80159ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	681a      	ldr	r2, [r3, #0]
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80159bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159c8:	2b40      	cmp	r3, #64	; 0x40
 80159ca:	d007      	beq.n	80159dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	681a      	ldr	r2, [r3, #0]
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80159da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	68db      	ldr	r3, [r3, #12]
 80159e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80159e4:	d14b      	bne.n	8015a7e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	685b      	ldr	r3, [r3, #4]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d002      	beq.n	80159f4 <HAL_SPI_Transmit+0xf6>
 80159ee:	8afb      	ldrh	r3, [r7, #22]
 80159f0:	2b01      	cmp	r3, #1
 80159f2:	d13e      	bne.n	8015a72 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159f8:	881a      	ldrh	r2, [r3, #0]
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a04:	1c9a      	adds	r2, r3, #2
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	3b01      	subs	r3, #1
 8015a12:	b29a      	uxth	r2, r3
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8015a18:	e02b      	b.n	8015a72 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	689b      	ldr	r3, [r3, #8]
 8015a20:	f003 0302 	and.w	r3, r3, #2
 8015a24:	2b02      	cmp	r3, #2
 8015a26:	d112      	bne.n	8015a4e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a2c:	881a      	ldrh	r2, [r3, #0]
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a38:	1c9a      	adds	r2, r3, #2
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015a42:	b29b      	uxth	r3, r3
 8015a44:	3b01      	subs	r3, #1
 8015a46:	b29a      	uxth	r2, r3
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8015a4c:	e011      	b.n	8015a72 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015a4e:	f7fc fc91 	bl	8012374 <HAL_GetTick>
 8015a52:	4602      	mov	r2, r0
 8015a54:	69bb      	ldr	r3, [r7, #24]
 8015a56:	1ad3      	subs	r3, r2, r3
 8015a58:	683a      	ldr	r2, [r7, #0]
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d803      	bhi.n	8015a66 <HAL_SPI_Transmit+0x168>
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a64:	d102      	bne.n	8015a6c <HAL_SPI_Transmit+0x16e>
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d102      	bne.n	8015a72 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8015a6c:	2303      	movs	r3, #3
 8015a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8015a70:	e074      	b.n	8015b5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015a76:	b29b      	uxth	r3, r3
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d1ce      	bne.n	8015a1a <HAL_SPI_Transmit+0x11c>
 8015a7c:	e04c      	b.n	8015b18 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d002      	beq.n	8015a8c <HAL_SPI_Transmit+0x18e>
 8015a86:	8afb      	ldrh	r3, [r7, #22]
 8015a88:	2b01      	cmp	r3, #1
 8015a8a:	d140      	bne.n	8015b0e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	330c      	adds	r3, #12
 8015a96:	7812      	ldrb	r2, [r2, #0]
 8015a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a9e:	1c5a      	adds	r2, r3, #1
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015aa8:	b29b      	uxth	r3, r3
 8015aaa:	3b01      	subs	r3, #1
 8015aac:	b29a      	uxth	r2, r3
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8015ab2:	e02c      	b.n	8015b0e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	689b      	ldr	r3, [r3, #8]
 8015aba:	f003 0302 	and.w	r3, r3, #2
 8015abe:	2b02      	cmp	r3, #2
 8015ac0:	d113      	bne.n	8015aea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	330c      	adds	r3, #12
 8015acc:	7812      	ldrb	r2, [r2, #0]
 8015ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ad4:	1c5a      	adds	r2, r3, #1
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	3b01      	subs	r3, #1
 8015ae2:	b29a      	uxth	r2, r3
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	86da      	strh	r2, [r3, #54]	; 0x36
 8015ae8:	e011      	b.n	8015b0e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015aea:	f7fc fc43 	bl	8012374 <HAL_GetTick>
 8015aee:	4602      	mov	r2, r0
 8015af0:	69bb      	ldr	r3, [r7, #24]
 8015af2:	1ad3      	subs	r3, r2, r3
 8015af4:	683a      	ldr	r2, [r7, #0]
 8015af6:	429a      	cmp	r2, r3
 8015af8:	d803      	bhi.n	8015b02 <HAL_SPI_Transmit+0x204>
 8015afa:	683b      	ldr	r3, [r7, #0]
 8015afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b00:	d102      	bne.n	8015b08 <HAL_SPI_Transmit+0x20a>
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d102      	bne.n	8015b0e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8015b08:	2303      	movs	r3, #3
 8015b0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8015b0c:	e026      	b.n	8015b5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015b12:	b29b      	uxth	r3, r3
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d1cd      	bne.n	8015ab4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015b18:	69ba      	ldr	r2, [r7, #24]
 8015b1a:	6839      	ldr	r1, [r7, #0]
 8015b1c:	68f8      	ldr	r0, [r7, #12]
 8015b1e:	f000 f8b3 	bl	8015c88 <SPI_EndRxTxTransaction>
 8015b22:	4603      	mov	r3, r0
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d002      	beq.n	8015b2e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2220      	movs	r2, #32
 8015b2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	689b      	ldr	r3, [r3, #8]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d10a      	bne.n	8015b4c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015b36:	2300      	movs	r3, #0
 8015b38:	613b      	str	r3, [r7, #16]
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	68db      	ldr	r3, [r3, #12]
 8015b40:	613b      	str	r3, [r7, #16]
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	689b      	ldr	r3, [r3, #8]
 8015b48:	613b      	str	r3, [r7, #16]
 8015b4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d002      	beq.n	8015b5a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8015b54:	2301      	movs	r3, #1
 8015b56:	77fb      	strb	r3, [r7, #31]
 8015b58:	e000      	b.n	8015b5c <HAL_SPI_Transmit+0x25e>
  }

error:
 8015b5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	2201      	movs	r2, #1
 8015b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	2200      	movs	r2, #0
 8015b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8015b6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8015b6e:	4618      	mov	r0, r3
 8015b70:	3720      	adds	r7, #32
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}
	...

08015b78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b088      	sub	sp, #32
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	60b9      	str	r1, [r7, #8]
 8015b82:	603b      	str	r3, [r7, #0]
 8015b84:	4613      	mov	r3, r2
 8015b86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8015b88:	f7fc fbf4 	bl	8012374 <HAL_GetTick>
 8015b8c:	4602      	mov	r2, r0
 8015b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b90:	1a9b      	subs	r3, r3, r2
 8015b92:	683a      	ldr	r2, [r7, #0]
 8015b94:	4413      	add	r3, r2
 8015b96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8015b98:	f7fc fbec 	bl	8012374 <HAL_GetTick>
 8015b9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8015b9e:	4b39      	ldr	r3, [pc, #228]	; (8015c84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	015b      	lsls	r3, r3, #5
 8015ba4:	0d1b      	lsrs	r3, r3, #20
 8015ba6:	69fa      	ldr	r2, [r7, #28]
 8015ba8:	fb02 f303 	mul.w	r3, r2, r3
 8015bac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015bae:	e054      	b.n	8015c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bb6:	d050      	beq.n	8015c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015bb8:	f7fc fbdc 	bl	8012374 <HAL_GetTick>
 8015bbc:	4602      	mov	r2, r0
 8015bbe:	69bb      	ldr	r3, [r7, #24]
 8015bc0:	1ad3      	subs	r3, r2, r3
 8015bc2:	69fa      	ldr	r2, [r7, #28]
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d902      	bls.n	8015bce <SPI_WaitFlagStateUntilTimeout+0x56>
 8015bc8:	69fb      	ldr	r3, [r7, #28]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d13d      	bne.n	8015c4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	685a      	ldr	r2, [r3, #4]
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8015bdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015be6:	d111      	bne.n	8015c0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	689b      	ldr	r3, [r3, #8]
 8015bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015bf0:	d004      	beq.n	8015bfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	689b      	ldr	r3, [r3, #8]
 8015bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015bfa:	d107      	bne.n	8015c0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	681a      	ldr	r2, [r3, #0]
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015c0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015c14:	d10f      	bne.n	8015c36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	681a      	ldr	r2, [r3, #0]
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015c24:	601a      	str	r2, [r3, #0]
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	681a      	ldr	r2, [r3, #0]
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2201      	movs	r2, #1
 8015c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	2200      	movs	r2, #0
 8015c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8015c46:	2303      	movs	r3, #3
 8015c48:	e017      	b.n	8015c7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d101      	bne.n	8015c54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8015c50:	2300      	movs	r3, #0
 8015c52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	3b01      	subs	r3, #1
 8015c58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	689a      	ldr	r2, [r3, #8]
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	4013      	ands	r3, r2
 8015c64:	68ba      	ldr	r2, [r7, #8]
 8015c66:	429a      	cmp	r2, r3
 8015c68:	bf0c      	ite	eq
 8015c6a:	2301      	moveq	r3, #1
 8015c6c:	2300      	movne	r3, #0
 8015c6e:	b2db      	uxtb	r3, r3
 8015c70:	461a      	mov	r2, r3
 8015c72:	79fb      	ldrb	r3, [r7, #7]
 8015c74:	429a      	cmp	r2, r3
 8015c76:	d19b      	bne.n	8015bb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8015c78:	2300      	movs	r3, #0
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3720      	adds	r7, #32
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}
 8015c82:	bf00      	nop
 8015c84:	20000000 	.word	0x20000000

08015c88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b088      	sub	sp, #32
 8015c8c:	af02      	add	r7, sp, #8
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8015c94:	4b1b      	ldr	r3, [pc, #108]	; (8015d04 <SPI_EndRxTxTransaction+0x7c>)
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	4a1b      	ldr	r2, [pc, #108]	; (8015d08 <SPI_EndRxTxTransaction+0x80>)
 8015c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8015c9e:	0d5b      	lsrs	r3, r3, #21
 8015ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015ca4:	fb02 f303 	mul.w	r3, r2, r3
 8015ca8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	685b      	ldr	r3, [r3, #4]
 8015cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015cb2:	d112      	bne.n	8015cda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	9300      	str	r3, [sp, #0]
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	2200      	movs	r2, #0
 8015cbc:	2180      	movs	r1, #128	; 0x80
 8015cbe:	68f8      	ldr	r0, [r7, #12]
 8015cc0:	f7ff ff5a 	bl	8015b78 <SPI_WaitFlagStateUntilTimeout>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d016      	beq.n	8015cf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015cce:	f043 0220 	orr.w	r2, r3, #32
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8015cd6:	2303      	movs	r3, #3
 8015cd8:	e00f      	b.n	8015cfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d00a      	beq.n	8015cf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8015ce0:	697b      	ldr	r3, [r7, #20]
 8015ce2:	3b01      	subs	r3, #1
 8015ce4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	689b      	ldr	r3, [r3, #8]
 8015cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015cf0:	2b80      	cmp	r3, #128	; 0x80
 8015cf2:	d0f2      	beq.n	8015cda <SPI_EndRxTxTransaction+0x52>
 8015cf4:	e000      	b.n	8015cf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8015cf6:	bf00      	nop
  }

  return HAL_OK;
 8015cf8:	2300      	movs	r3, #0
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3718      	adds	r7, #24
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	20000000 	.word	0x20000000
 8015d08:	165e9f81 	.word	0x165e9f81

08015d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b082      	sub	sp, #8
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d101      	bne.n	8015d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	e041      	b.n	8015da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d24:	b2db      	uxtb	r3, r3
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d106      	bne.n	8015d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f7fb ffd8 	bl	8011ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2202      	movs	r2, #2
 8015d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681a      	ldr	r2, [r3, #0]
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	3304      	adds	r3, #4
 8015d48:	4619      	mov	r1, r3
 8015d4a:	4610      	mov	r0, r2
 8015d4c:	f000 fafe 	bl	801634c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	2201      	movs	r2, #1
 8015d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2201      	movs	r2, #1
 8015d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2201      	movs	r2, #1
 8015d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2201      	movs	r2, #1
 8015d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2201      	movs	r2, #1
 8015d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2201      	movs	r2, #1
 8015d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2201      	movs	r2, #1
 8015d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2201      	movs	r2, #1
 8015d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2201      	movs	r2, #1
 8015d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	2201      	movs	r2, #1
 8015d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015da0:	2300      	movs	r3, #0
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	3708      	adds	r7, #8
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}
	...

08015dac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015dac:	b480      	push	{r7}
 8015dae:	b085      	sub	sp, #20
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015dba:	b2db      	uxtb	r3, r3
 8015dbc:	2b01      	cmp	r3, #1
 8015dbe:	d001      	beq.n	8015dc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	e046      	b.n	8015e52 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2202      	movs	r2, #2
 8015dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4a23      	ldr	r2, [pc, #140]	; (8015e60 <HAL_TIM_Base_Start+0xb4>)
 8015dd2:	4293      	cmp	r3, r2
 8015dd4:	d022      	beq.n	8015e1c <HAL_TIM_Base_Start+0x70>
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015dde:	d01d      	beq.n	8015e1c <HAL_TIM_Base_Start+0x70>
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	4a1f      	ldr	r2, [pc, #124]	; (8015e64 <HAL_TIM_Base_Start+0xb8>)
 8015de6:	4293      	cmp	r3, r2
 8015de8:	d018      	beq.n	8015e1c <HAL_TIM_Base_Start+0x70>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	4a1e      	ldr	r2, [pc, #120]	; (8015e68 <HAL_TIM_Base_Start+0xbc>)
 8015df0:	4293      	cmp	r3, r2
 8015df2:	d013      	beq.n	8015e1c <HAL_TIM_Base_Start+0x70>
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	4a1c      	ldr	r2, [pc, #112]	; (8015e6c <HAL_TIM_Base_Start+0xc0>)
 8015dfa:	4293      	cmp	r3, r2
 8015dfc:	d00e      	beq.n	8015e1c <HAL_TIM_Base_Start+0x70>
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	4a1b      	ldr	r2, [pc, #108]	; (8015e70 <HAL_TIM_Base_Start+0xc4>)
 8015e04:	4293      	cmp	r3, r2
 8015e06:	d009      	beq.n	8015e1c <HAL_TIM_Base_Start+0x70>
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	4a19      	ldr	r2, [pc, #100]	; (8015e74 <HAL_TIM_Base_Start+0xc8>)
 8015e0e:	4293      	cmp	r3, r2
 8015e10:	d004      	beq.n	8015e1c <HAL_TIM_Base_Start+0x70>
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	4a18      	ldr	r2, [pc, #96]	; (8015e78 <HAL_TIM_Base_Start+0xcc>)
 8015e18:	4293      	cmp	r3, r2
 8015e1a:	d111      	bne.n	8015e40 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	689b      	ldr	r3, [r3, #8]
 8015e22:	f003 0307 	and.w	r3, r3, #7
 8015e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	2b06      	cmp	r3, #6
 8015e2c:	d010      	beq.n	8015e50 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	f042 0201 	orr.w	r2, r2, #1
 8015e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e3e:	e007      	b.n	8015e50 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	681a      	ldr	r2, [r3, #0]
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	f042 0201 	orr.w	r2, r2, #1
 8015e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015e50:	2300      	movs	r3, #0
}
 8015e52:	4618      	mov	r0, r3
 8015e54:	3714      	adds	r7, #20
 8015e56:	46bd      	mov	sp, r7
 8015e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5c:	4770      	bx	lr
 8015e5e:	bf00      	nop
 8015e60:	40010000 	.word	0x40010000
 8015e64:	40000400 	.word	0x40000400
 8015e68:	40000800 	.word	0x40000800
 8015e6c:	40000c00 	.word	0x40000c00
 8015e70:	40010400 	.word	0x40010400
 8015e74:	40014000 	.word	0x40014000
 8015e78:	40001800 	.word	0x40001800

08015e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015e7c:	b480      	push	{r7}
 8015e7e:	b085      	sub	sp, #20
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015e8a:	b2db      	uxtb	r3, r3
 8015e8c:	2b01      	cmp	r3, #1
 8015e8e:	d001      	beq.n	8015e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015e90:	2301      	movs	r3, #1
 8015e92:	e04e      	b.n	8015f32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	2202      	movs	r2, #2
 8015e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	68da      	ldr	r2, [r3, #12]
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	f042 0201 	orr.w	r2, r2, #1
 8015eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	4a23      	ldr	r2, [pc, #140]	; (8015f40 <HAL_TIM_Base_Start_IT+0xc4>)
 8015eb2:	4293      	cmp	r3, r2
 8015eb4:	d022      	beq.n	8015efc <HAL_TIM_Base_Start_IT+0x80>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015ebe:	d01d      	beq.n	8015efc <HAL_TIM_Base_Start_IT+0x80>
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	4a1f      	ldr	r2, [pc, #124]	; (8015f44 <HAL_TIM_Base_Start_IT+0xc8>)
 8015ec6:	4293      	cmp	r3, r2
 8015ec8:	d018      	beq.n	8015efc <HAL_TIM_Base_Start_IT+0x80>
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	4a1e      	ldr	r2, [pc, #120]	; (8015f48 <HAL_TIM_Base_Start_IT+0xcc>)
 8015ed0:	4293      	cmp	r3, r2
 8015ed2:	d013      	beq.n	8015efc <HAL_TIM_Base_Start_IT+0x80>
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	4a1c      	ldr	r2, [pc, #112]	; (8015f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8015eda:	4293      	cmp	r3, r2
 8015edc:	d00e      	beq.n	8015efc <HAL_TIM_Base_Start_IT+0x80>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4a1b      	ldr	r2, [pc, #108]	; (8015f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	d009      	beq.n	8015efc <HAL_TIM_Base_Start_IT+0x80>
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	4a19      	ldr	r2, [pc, #100]	; (8015f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8015eee:	4293      	cmp	r3, r2
 8015ef0:	d004      	beq.n	8015efc <HAL_TIM_Base_Start_IT+0x80>
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4a18      	ldr	r2, [pc, #96]	; (8015f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8015ef8:	4293      	cmp	r3, r2
 8015efa:	d111      	bne.n	8015f20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	689b      	ldr	r3, [r3, #8]
 8015f02:	f003 0307 	and.w	r3, r3, #7
 8015f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	2b06      	cmp	r3, #6
 8015f0c:	d010      	beq.n	8015f30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	681a      	ldr	r2, [r3, #0]
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	f042 0201 	orr.w	r2, r2, #1
 8015f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f1e:	e007      	b.n	8015f30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	681a      	ldr	r2, [r3, #0]
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	f042 0201 	orr.w	r2, r2, #1
 8015f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015f30:	2300      	movs	r3, #0
}
 8015f32:	4618      	mov	r0, r3
 8015f34:	3714      	adds	r7, #20
 8015f36:	46bd      	mov	sp, r7
 8015f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3c:	4770      	bx	lr
 8015f3e:	bf00      	nop
 8015f40:	40010000 	.word	0x40010000
 8015f44:	40000400 	.word	0x40000400
 8015f48:	40000800 	.word	0x40000800
 8015f4c:	40000c00 	.word	0x40000c00
 8015f50:	40010400 	.word	0x40010400
 8015f54:	40014000 	.word	0x40014000
 8015f58:	40001800 	.word	0x40001800

08015f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b082      	sub	sp, #8
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	691b      	ldr	r3, [r3, #16]
 8015f6a:	f003 0302 	and.w	r3, r3, #2
 8015f6e:	2b02      	cmp	r3, #2
 8015f70:	d122      	bne.n	8015fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	68db      	ldr	r3, [r3, #12]
 8015f78:	f003 0302 	and.w	r3, r3, #2
 8015f7c:	2b02      	cmp	r3, #2
 8015f7e:	d11b      	bne.n	8015fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	f06f 0202 	mvn.w	r2, #2
 8015f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2201      	movs	r2, #1
 8015f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	699b      	ldr	r3, [r3, #24]
 8015f96:	f003 0303 	and.w	r3, r3, #3
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d003      	beq.n	8015fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	f000 f9b5 	bl	801630e <HAL_TIM_IC_CaptureCallback>
 8015fa4:	e005      	b.n	8015fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f000 f9a7 	bl	80162fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f000 f9b8 	bl	8016322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	691b      	ldr	r3, [r3, #16]
 8015fbe:	f003 0304 	and.w	r3, r3, #4
 8015fc2:	2b04      	cmp	r3, #4
 8015fc4:	d122      	bne.n	801600c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	68db      	ldr	r3, [r3, #12]
 8015fcc:	f003 0304 	and.w	r3, r3, #4
 8015fd0:	2b04      	cmp	r3, #4
 8015fd2:	d11b      	bne.n	801600c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	f06f 0204 	mvn.w	r2, #4
 8015fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2202      	movs	r2, #2
 8015fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	699b      	ldr	r3, [r3, #24]
 8015fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d003      	beq.n	8015ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f000 f98b 	bl	801630e <HAL_TIM_IC_CaptureCallback>
 8015ff8:	e005      	b.n	8016006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f000 f97d 	bl	80162fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f000 f98e 	bl	8016322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	2200      	movs	r2, #0
 801600a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	691b      	ldr	r3, [r3, #16]
 8016012:	f003 0308 	and.w	r3, r3, #8
 8016016:	2b08      	cmp	r3, #8
 8016018:	d122      	bne.n	8016060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	68db      	ldr	r3, [r3, #12]
 8016020:	f003 0308 	and.w	r3, r3, #8
 8016024:	2b08      	cmp	r3, #8
 8016026:	d11b      	bne.n	8016060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	f06f 0208 	mvn.w	r2, #8
 8016030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	2204      	movs	r2, #4
 8016036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	69db      	ldr	r3, [r3, #28]
 801603e:	f003 0303 	and.w	r3, r3, #3
 8016042:	2b00      	cmp	r3, #0
 8016044:	d003      	beq.n	801604e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f000 f961 	bl	801630e <HAL_TIM_IC_CaptureCallback>
 801604c:	e005      	b.n	801605a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801604e:	6878      	ldr	r0, [r7, #4]
 8016050:	f000 f953 	bl	80162fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f000 f964 	bl	8016322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2200      	movs	r2, #0
 801605e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	691b      	ldr	r3, [r3, #16]
 8016066:	f003 0310 	and.w	r3, r3, #16
 801606a:	2b10      	cmp	r3, #16
 801606c:	d122      	bne.n	80160b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	68db      	ldr	r3, [r3, #12]
 8016074:	f003 0310 	and.w	r3, r3, #16
 8016078:	2b10      	cmp	r3, #16
 801607a:	d11b      	bne.n	80160b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	f06f 0210 	mvn.w	r2, #16
 8016084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	2208      	movs	r2, #8
 801608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	69db      	ldr	r3, [r3, #28]
 8016092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016096:	2b00      	cmp	r3, #0
 8016098:	d003      	beq.n	80160a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801609a:	6878      	ldr	r0, [r7, #4]
 801609c:	f000 f937 	bl	801630e <HAL_TIM_IC_CaptureCallback>
 80160a0:	e005      	b.n	80160ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f000 f929 	bl	80162fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f000 f93a 	bl	8016322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2200      	movs	r2, #0
 80160b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	691b      	ldr	r3, [r3, #16]
 80160ba:	f003 0301 	and.w	r3, r3, #1
 80160be:	2b01      	cmp	r3, #1
 80160c0:	d10e      	bne.n	80160e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	68db      	ldr	r3, [r3, #12]
 80160c8:	f003 0301 	and.w	r3, r3, #1
 80160cc:	2b01      	cmp	r3, #1
 80160ce:	d107      	bne.n	80160e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	f06f 0201 	mvn.w	r2, #1
 80160d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f7fb fcb8 	bl	8011a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	691b      	ldr	r3, [r3, #16]
 80160e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80160ea:	2b80      	cmp	r3, #128	; 0x80
 80160ec:	d10e      	bne.n	801610c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	68db      	ldr	r3, [r3, #12]
 80160f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80160f8:	2b80      	cmp	r3, #128	; 0x80
 80160fa:	d107      	bne.n	801610c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	f000 fae0 	bl	80166cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	691b      	ldr	r3, [r3, #16]
 8016112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016116:	2b40      	cmp	r3, #64	; 0x40
 8016118:	d10e      	bne.n	8016138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	68db      	ldr	r3, [r3, #12]
 8016120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016124:	2b40      	cmp	r3, #64	; 0x40
 8016126:	d107      	bne.n	8016138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8016130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f000 f8ff 	bl	8016336 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	691b      	ldr	r3, [r3, #16]
 801613e:	f003 0320 	and.w	r3, r3, #32
 8016142:	2b20      	cmp	r3, #32
 8016144:	d10e      	bne.n	8016164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	68db      	ldr	r3, [r3, #12]
 801614c:	f003 0320 	and.w	r3, r3, #32
 8016150:	2b20      	cmp	r3, #32
 8016152:	d107      	bne.n	8016164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f06f 0220 	mvn.w	r2, #32
 801615c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801615e:	6878      	ldr	r0, [r7, #4]
 8016160:	f000 faaa 	bl	80166b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016164:	bf00      	nop
 8016166:	3708      	adds	r7, #8
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}

0801616c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b084      	sub	sp, #16
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
 8016174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016176:	2300      	movs	r3, #0
 8016178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016180:	2b01      	cmp	r3, #1
 8016182:	d101      	bne.n	8016188 <HAL_TIM_ConfigClockSource+0x1c>
 8016184:	2302      	movs	r3, #2
 8016186:	e0b4      	b.n	80162f2 <HAL_TIM_ConfigClockSource+0x186>
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2201      	movs	r2, #1
 801618c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	2202      	movs	r2, #2
 8016194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	689b      	ldr	r3, [r3, #8]
 801619e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80161a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80161a8:	68bb      	ldr	r3, [r7, #8]
 80161aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80161ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	68ba      	ldr	r2, [r7, #8]
 80161b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80161c0:	d03e      	beq.n	8016240 <HAL_TIM_ConfigClockSource+0xd4>
 80161c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80161c6:	f200 8087 	bhi.w	80162d8 <HAL_TIM_ConfigClockSource+0x16c>
 80161ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161ce:	f000 8086 	beq.w	80162de <HAL_TIM_ConfigClockSource+0x172>
 80161d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161d6:	d87f      	bhi.n	80162d8 <HAL_TIM_ConfigClockSource+0x16c>
 80161d8:	2b70      	cmp	r3, #112	; 0x70
 80161da:	d01a      	beq.n	8016212 <HAL_TIM_ConfigClockSource+0xa6>
 80161dc:	2b70      	cmp	r3, #112	; 0x70
 80161de:	d87b      	bhi.n	80162d8 <HAL_TIM_ConfigClockSource+0x16c>
 80161e0:	2b60      	cmp	r3, #96	; 0x60
 80161e2:	d050      	beq.n	8016286 <HAL_TIM_ConfigClockSource+0x11a>
 80161e4:	2b60      	cmp	r3, #96	; 0x60
 80161e6:	d877      	bhi.n	80162d8 <HAL_TIM_ConfigClockSource+0x16c>
 80161e8:	2b50      	cmp	r3, #80	; 0x50
 80161ea:	d03c      	beq.n	8016266 <HAL_TIM_ConfigClockSource+0xfa>
 80161ec:	2b50      	cmp	r3, #80	; 0x50
 80161ee:	d873      	bhi.n	80162d8 <HAL_TIM_ConfigClockSource+0x16c>
 80161f0:	2b40      	cmp	r3, #64	; 0x40
 80161f2:	d058      	beq.n	80162a6 <HAL_TIM_ConfigClockSource+0x13a>
 80161f4:	2b40      	cmp	r3, #64	; 0x40
 80161f6:	d86f      	bhi.n	80162d8 <HAL_TIM_ConfigClockSource+0x16c>
 80161f8:	2b30      	cmp	r3, #48	; 0x30
 80161fa:	d064      	beq.n	80162c6 <HAL_TIM_ConfigClockSource+0x15a>
 80161fc:	2b30      	cmp	r3, #48	; 0x30
 80161fe:	d86b      	bhi.n	80162d8 <HAL_TIM_ConfigClockSource+0x16c>
 8016200:	2b20      	cmp	r3, #32
 8016202:	d060      	beq.n	80162c6 <HAL_TIM_ConfigClockSource+0x15a>
 8016204:	2b20      	cmp	r3, #32
 8016206:	d867      	bhi.n	80162d8 <HAL_TIM_ConfigClockSource+0x16c>
 8016208:	2b00      	cmp	r3, #0
 801620a:	d05c      	beq.n	80162c6 <HAL_TIM_ConfigClockSource+0x15a>
 801620c:	2b10      	cmp	r3, #16
 801620e:	d05a      	beq.n	80162c6 <HAL_TIM_ConfigClockSource+0x15a>
 8016210:	e062      	b.n	80162d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	6818      	ldr	r0, [r3, #0]
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	6899      	ldr	r1, [r3, #8]
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	685a      	ldr	r2, [r3, #4]
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	68db      	ldr	r3, [r3, #12]
 8016222:	f000 f9ad 	bl	8016580 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	689b      	ldr	r3, [r3, #8]
 801622c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8016234:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	68ba      	ldr	r2, [r7, #8]
 801623c:	609a      	str	r2, [r3, #8]
      break;
 801623e:	e04f      	b.n	80162e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6818      	ldr	r0, [r3, #0]
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	6899      	ldr	r1, [r3, #8]
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	685a      	ldr	r2, [r3, #4]
 801624c:	683b      	ldr	r3, [r7, #0]
 801624e:	68db      	ldr	r3, [r3, #12]
 8016250:	f000 f996 	bl	8016580 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	689a      	ldr	r2, [r3, #8]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016262:	609a      	str	r2, [r3, #8]
      break;
 8016264:	e03c      	b.n	80162e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	6818      	ldr	r0, [r3, #0]
 801626a:	683b      	ldr	r3, [r7, #0]
 801626c:	6859      	ldr	r1, [r3, #4]
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	68db      	ldr	r3, [r3, #12]
 8016272:	461a      	mov	r2, r3
 8016274:	f000 f90a 	bl	801648c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	2150      	movs	r1, #80	; 0x50
 801627e:	4618      	mov	r0, r3
 8016280:	f000 f963 	bl	801654a <TIM_ITRx_SetConfig>
      break;
 8016284:	e02c      	b.n	80162e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	6818      	ldr	r0, [r3, #0]
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	6859      	ldr	r1, [r3, #4]
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	68db      	ldr	r3, [r3, #12]
 8016292:	461a      	mov	r2, r3
 8016294:	f000 f929 	bl	80164ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	2160      	movs	r1, #96	; 0x60
 801629e:	4618      	mov	r0, r3
 80162a0:	f000 f953 	bl	801654a <TIM_ITRx_SetConfig>
      break;
 80162a4:	e01c      	b.n	80162e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	6818      	ldr	r0, [r3, #0]
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	6859      	ldr	r1, [r3, #4]
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	68db      	ldr	r3, [r3, #12]
 80162b2:	461a      	mov	r2, r3
 80162b4:	f000 f8ea 	bl	801648c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	2140      	movs	r1, #64	; 0x40
 80162be:	4618      	mov	r0, r3
 80162c0:	f000 f943 	bl	801654a <TIM_ITRx_SetConfig>
      break;
 80162c4:	e00c      	b.n	80162e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	681a      	ldr	r2, [r3, #0]
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	4619      	mov	r1, r3
 80162d0:	4610      	mov	r0, r2
 80162d2:	f000 f93a 	bl	801654a <TIM_ITRx_SetConfig>
      break;
 80162d6:	e003      	b.n	80162e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80162d8:	2301      	movs	r3, #1
 80162da:	73fb      	strb	r3, [r7, #15]
      break;
 80162dc:	e000      	b.n	80162e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80162de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	2201      	movs	r2, #1
 80162e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	2200      	movs	r2, #0
 80162ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80162f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80162f2:	4618      	mov	r0, r3
 80162f4:	3710      	adds	r7, #16
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}

080162fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80162fa:	b480      	push	{r7}
 80162fc:	b083      	sub	sp, #12
 80162fe:	af00      	add	r7, sp, #0
 8016300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016302:	bf00      	nop
 8016304:	370c      	adds	r7, #12
 8016306:	46bd      	mov	sp, r7
 8016308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630c:	4770      	bx	lr

0801630e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801630e:	b480      	push	{r7}
 8016310:	b083      	sub	sp, #12
 8016312:	af00      	add	r7, sp, #0
 8016314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016316:	bf00      	nop
 8016318:	370c      	adds	r7, #12
 801631a:	46bd      	mov	sp, r7
 801631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016320:	4770      	bx	lr

08016322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016322:	b480      	push	{r7}
 8016324:	b083      	sub	sp, #12
 8016326:	af00      	add	r7, sp, #0
 8016328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801632a:	bf00      	nop
 801632c:	370c      	adds	r7, #12
 801632e:	46bd      	mov	sp, r7
 8016330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016334:	4770      	bx	lr

08016336 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016336:	b480      	push	{r7}
 8016338:	b083      	sub	sp, #12
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801633e:	bf00      	nop
 8016340:	370c      	adds	r7, #12
 8016342:	46bd      	mov	sp, r7
 8016344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016348:	4770      	bx	lr
	...

0801634c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801634c:	b480      	push	{r7}
 801634e:	b085      	sub	sp, #20
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	4a40      	ldr	r2, [pc, #256]	; (8016460 <TIM_Base_SetConfig+0x114>)
 8016360:	4293      	cmp	r3, r2
 8016362:	d013      	beq.n	801638c <TIM_Base_SetConfig+0x40>
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801636a:	d00f      	beq.n	801638c <TIM_Base_SetConfig+0x40>
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	4a3d      	ldr	r2, [pc, #244]	; (8016464 <TIM_Base_SetConfig+0x118>)
 8016370:	4293      	cmp	r3, r2
 8016372:	d00b      	beq.n	801638c <TIM_Base_SetConfig+0x40>
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	4a3c      	ldr	r2, [pc, #240]	; (8016468 <TIM_Base_SetConfig+0x11c>)
 8016378:	4293      	cmp	r3, r2
 801637a:	d007      	beq.n	801638c <TIM_Base_SetConfig+0x40>
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	4a3b      	ldr	r2, [pc, #236]	; (801646c <TIM_Base_SetConfig+0x120>)
 8016380:	4293      	cmp	r3, r2
 8016382:	d003      	beq.n	801638c <TIM_Base_SetConfig+0x40>
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	4a3a      	ldr	r2, [pc, #232]	; (8016470 <TIM_Base_SetConfig+0x124>)
 8016388:	4293      	cmp	r3, r2
 801638a:	d108      	bne.n	801639e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016394:	683b      	ldr	r3, [r7, #0]
 8016396:	685b      	ldr	r3, [r3, #4]
 8016398:	68fa      	ldr	r2, [r7, #12]
 801639a:	4313      	orrs	r3, r2
 801639c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	4a2f      	ldr	r2, [pc, #188]	; (8016460 <TIM_Base_SetConfig+0x114>)
 80163a2:	4293      	cmp	r3, r2
 80163a4:	d02b      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80163ac:	d027      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	4a2c      	ldr	r2, [pc, #176]	; (8016464 <TIM_Base_SetConfig+0x118>)
 80163b2:	4293      	cmp	r3, r2
 80163b4:	d023      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	4a2b      	ldr	r2, [pc, #172]	; (8016468 <TIM_Base_SetConfig+0x11c>)
 80163ba:	4293      	cmp	r3, r2
 80163bc:	d01f      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	4a2a      	ldr	r2, [pc, #168]	; (801646c <TIM_Base_SetConfig+0x120>)
 80163c2:	4293      	cmp	r3, r2
 80163c4:	d01b      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	4a29      	ldr	r2, [pc, #164]	; (8016470 <TIM_Base_SetConfig+0x124>)
 80163ca:	4293      	cmp	r3, r2
 80163cc:	d017      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	4a28      	ldr	r2, [pc, #160]	; (8016474 <TIM_Base_SetConfig+0x128>)
 80163d2:	4293      	cmp	r3, r2
 80163d4:	d013      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	4a27      	ldr	r2, [pc, #156]	; (8016478 <TIM_Base_SetConfig+0x12c>)
 80163da:	4293      	cmp	r3, r2
 80163dc:	d00f      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	4a26      	ldr	r2, [pc, #152]	; (801647c <TIM_Base_SetConfig+0x130>)
 80163e2:	4293      	cmp	r3, r2
 80163e4:	d00b      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	4a25      	ldr	r2, [pc, #148]	; (8016480 <TIM_Base_SetConfig+0x134>)
 80163ea:	4293      	cmp	r3, r2
 80163ec:	d007      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	4a24      	ldr	r2, [pc, #144]	; (8016484 <TIM_Base_SetConfig+0x138>)
 80163f2:	4293      	cmp	r3, r2
 80163f4:	d003      	beq.n	80163fe <TIM_Base_SetConfig+0xb2>
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	4a23      	ldr	r2, [pc, #140]	; (8016488 <TIM_Base_SetConfig+0x13c>)
 80163fa:	4293      	cmp	r3, r2
 80163fc:	d108      	bne.n	8016410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	68db      	ldr	r3, [r3, #12]
 801640a:	68fa      	ldr	r2, [r7, #12]
 801640c:	4313      	orrs	r3, r2
 801640e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016416:	683b      	ldr	r3, [r7, #0]
 8016418:	695b      	ldr	r3, [r3, #20]
 801641a:	4313      	orrs	r3, r2
 801641c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	68fa      	ldr	r2, [r7, #12]
 8016422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016424:	683b      	ldr	r3, [r7, #0]
 8016426:	689a      	ldr	r2, [r3, #8]
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	681a      	ldr	r2, [r3, #0]
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	4a0a      	ldr	r2, [pc, #40]	; (8016460 <TIM_Base_SetConfig+0x114>)
 8016438:	4293      	cmp	r3, r2
 801643a:	d003      	beq.n	8016444 <TIM_Base_SetConfig+0xf8>
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	4a0c      	ldr	r2, [pc, #48]	; (8016470 <TIM_Base_SetConfig+0x124>)
 8016440:	4293      	cmp	r3, r2
 8016442:	d103      	bne.n	801644c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	691a      	ldr	r2, [r3, #16]
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	2201      	movs	r2, #1
 8016450:	615a      	str	r2, [r3, #20]
}
 8016452:	bf00      	nop
 8016454:	3714      	adds	r7, #20
 8016456:	46bd      	mov	sp, r7
 8016458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645c:	4770      	bx	lr
 801645e:	bf00      	nop
 8016460:	40010000 	.word	0x40010000
 8016464:	40000400 	.word	0x40000400
 8016468:	40000800 	.word	0x40000800
 801646c:	40000c00 	.word	0x40000c00
 8016470:	40010400 	.word	0x40010400
 8016474:	40014000 	.word	0x40014000
 8016478:	40014400 	.word	0x40014400
 801647c:	40014800 	.word	0x40014800
 8016480:	40001800 	.word	0x40001800
 8016484:	40001c00 	.word	0x40001c00
 8016488:	40002000 	.word	0x40002000

0801648c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801648c:	b480      	push	{r7}
 801648e:	b087      	sub	sp, #28
 8016490:	af00      	add	r7, sp, #0
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	6a1b      	ldr	r3, [r3, #32]
 801649c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	6a1b      	ldr	r3, [r3, #32]
 80164a2:	f023 0201 	bic.w	r2, r3, #1
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	699b      	ldr	r3, [r3, #24]
 80164ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80164b0:	693b      	ldr	r3, [r7, #16]
 80164b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80164b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	011b      	lsls	r3, r3, #4
 80164bc:	693a      	ldr	r2, [r7, #16]
 80164be:	4313      	orrs	r3, r2
 80164c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	f023 030a 	bic.w	r3, r3, #10
 80164c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80164ca:	697a      	ldr	r2, [r7, #20]
 80164cc:	68bb      	ldr	r3, [r7, #8]
 80164ce:	4313      	orrs	r3, r2
 80164d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	693a      	ldr	r2, [r7, #16]
 80164d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	697a      	ldr	r2, [r7, #20]
 80164dc:	621a      	str	r2, [r3, #32]
}
 80164de:	bf00      	nop
 80164e0:	371c      	adds	r7, #28
 80164e2:	46bd      	mov	sp, r7
 80164e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e8:	4770      	bx	lr

080164ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80164ea:	b480      	push	{r7}
 80164ec:	b087      	sub	sp, #28
 80164ee:	af00      	add	r7, sp, #0
 80164f0:	60f8      	str	r0, [r7, #12]
 80164f2:	60b9      	str	r1, [r7, #8]
 80164f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	6a1b      	ldr	r3, [r3, #32]
 80164fa:	f023 0210 	bic.w	r2, r3, #16
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	699b      	ldr	r3, [r3, #24]
 8016506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	6a1b      	ldr	r3, [r3, #32]
 801650c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801650e:	697b      	ldr	r3, [r7, #20]
 8016510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	031b      	lsls	r3, r3, #12
 801651a:	697a      	ldr	r2, [r7, #20]
 801651c:	4313      	orrs	r3, r2
 801651e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016520:	693b      	ldr	r3, [r7, #16]
 8016522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8016526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016528:	68bb      	ldr	r3, [r7, #8]
 801652a:	011b      	lsls	r3, r3, #4
 801652c:	693a      	ldr	r2, [r7, #16]
 801652e:	4313      	orrs	r3, r2
 8016530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	697a      	ldr	r2, [r7, #20]
 8016536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	693a      	ldr	r2, [r7, #16]
 801653c:	621a      	str	r2, [r3, #32]
}
 801653e:	bf00      	nop
 8016540:	371c      	adds	r7, #28
 8016542:	46bd      	mov	sp, r7
 8016544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016548:	4770      	bx	lr

0801654a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801654a:	b480      	push	{r7}
 801654c:	b085      	sub	sp, #20
 801654e:	af00      	add	r7, sp, #0
 8016550:	6078      	str	r0, [r7, #4]
 8016552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	689b      	ldr	r3, [r3, #8]
 8016558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8016562:	683a      	ldr	r2, [r7, #0]
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	4313      	orrs	r3, r2
 8016568:	f043 0307 	orr.w	r3, r3, #7
 801656c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	68fa      	ldr	r2, [r7, #12]
 8016572:	609a      	str	r2, [r3, #8]
}
 8016574:	bf00      	nop
 8016576:	3714      	adds	r7, #20
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr

08016580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8016580:	b480      	push	{r7}
 8016582:	b087      	sub	sp, #28
 8016584:	af00      	add	r7, sp, #0
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	60b9      	str	r1, [r7, #8]
 801658a:	607a      	str	r2, [r7, #4]
 801658c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	689b      	ldr	r3, [r3, #8]
 8016592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016594:	697b      	ldr	r3, [r7, #20]
 8016596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801659a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	021a      	lsls	r2, r3, #8
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	431a      	orrs	r2, r3
 80165a4:	68bb      	ldr	r3, [r7, #8]
 80165a6:	4313      	orrs	r3, r2
 80165a8:	697a      	ldr	r2, [r7, #20]
 80165aa:	4313      	orrs	r3, r2
 80165ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	697a      	ldr	r2, [r7, #20]
 80165b2:	609a      	str	r2, [r3, #8]
}
 80165b4:	bf00      	nop
 80165b6:	371c      	adds	r7, #28
 80165b8:	46bd      	mov	sp, r7
 80165ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165be:	4770      	bx	lr

080165c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80165c0:	b480      	push	{r7}
 80165c2:	b085      	sub	sp, #20
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
 80165c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80165d0:	2b01      	cmp	r3, #1
 80165d2:	d101      	bne.n	80165d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80165d4:	2302      	movs	r3, #2
 80165d6:	e05a      	b.n	801668e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2201      	movs	r2, #1
 80165dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2202      	movs	r2, #2
 80165e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	685b      	ldr	r3, [r3, #4]
 80165ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	689b      	ldr	r3, [r3, #8]
 80165f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80165fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016600:	683b      	ldr	r3, [r7, #0]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	68fa      	ldr	r2, [r7, #12]
 8016606:	4313      	orrs	r3, r2
 8016608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	68fa      	ldr	r2, [r7, #12]
 8016610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	4a21      	ldr	r2, [pc, #132]	; (801669c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8016618:	4293      	cmp	r3, r2
 801661a:	d022      	beq.n	8016662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016624:	d01d      	beq.n	8016662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	4a1d      	ldr	r2, [pc, #116]	; (80166a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801662c:	4293      	cmp	r3, r2
 801662e:	d018      	beq.n	8016662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	4a1b      	ldr	r2, [pc, #108]	; (80166a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8016636:	4293      	cmp	r3, r2
 8016638:	d013      	beq.n	8016662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	4a1a      	ldr	r2, [pc, #104]	; (80166a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8016640:	4293      	cmp	r3, r2
 8016642:	d00e      	beq.n	8016662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	4a18      	ldr	r2, [pc, #96]	; (80166ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801664a:	4293      	cmp	r3, r2
 801664c:	d009      	beq.n	8016662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	4a17      	ldr	r2, [pc, #92]	; (80166b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8016654:	4293      	cmp	r3, r2
 8016656:	d004      	beq.n	8016662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	4a15      	ldr	r2, [pc, #84]	; (80166b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801665e:	4293      	cmp	r3, r2
 8016660:	d10c      	bne.n	801667c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016662:	68bb      	ldr	r3, [r7, #8]
 8016664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801666a:	683b      	ldr	r3, [r7, #0]
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	68ba      	ldr	r2, [r7, #8]
 8016670:	4313      	orrs	r3, r2
 8016672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	68ba      	ldr	r2, [r7, #8]
 801667a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2201      	movs	r2, #1
 8016680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2200      	movs	r2, #0
 8016688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801668c:	2300      	movs	r3, #0
}
 801668e:	4618      	mov	r0, r3
 8016690:	3714      	adds	r7, #20
 8016692:	46bd      	mov	sp, r7
 8016694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016698:	4770      	bx	lr
 801669a:	bf00      	nop
 801669c:	40010000 	.word	0x40010000
 80166a0:	40000400 	.word	0x40000400
 80166a4:	40000800 	.word	0x40000800
 80166a8:	40000c00 	.word	0x40000c00
 80166ac:	40010400 	.word	0x40010400
 80166b0:	40014000 	.word	0x40014000
 80166b4:	40001800 	.word	0x40001800

080166b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80166b8:	b480      	push	{r7}
 80166ba:	b083      	sub	sp, #12
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80166c0:	bf00      	nop
 80166c2:	370c      	adds	r7, #12
 80166c4:	46bd      	mov	sp, r7
 80166c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ca:	4770      	bx	lr

080166cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80166cc:	b480      	push	{r7}
 80166ce:	b083      	sub	sp, #12
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80166d4:	bf00      	nop
 80166d6:	370c      	adds	r7, #12
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr

080166e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d101      	bne.n	80166f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80166ee:	2301      	movs	r3, #1
 80166f0:	e03f      	b.n	8016772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80166f8:	b2db      	uxtb	r3, r3
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d106      	bne.n	801670c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	2200      	movs	r2, #0
 8016702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f7fb fbb0 	bl	8011e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	2224      	movs	r2, #36	; 0x24
 8016710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	68da      	ldr	r2, [r3, #12]
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8016724:	6878      	ldr	r0, [r7, #4]
 8016726:	f000 f929 	bl	801697c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	691a      	ldr	r2, [r3, #16]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	695a      	ldr	r2, [r3, #20]
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	68da      	ldr	r2, [r3, #12]
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	2200      	movs	r2, #0
 801675e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	2220      	movs	r2, #32
 8016764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2220      	movs	r2, #32
 801676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8016770:	2300      	movs	r3, #0
}
 8016772:	4618      	mov	r0, r3
 8016774:	3708      	adds	r7, #8
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}

0801677a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801677a:	b580      	push	{r7, lr}
 801677c:	b08a      	sub	sp, #40	; 0x28
 801677e:	af02      	add	r7, sp, #8
 8016780:	60f8      	str	r0, [r7, #12]
 8016782:	60b9      	str	r1, [r7, #8]
 8016784:	603b      	str	r3, [r7, #0]
 8016786:	4613      	mov	r3, r2
 8016788:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801678a:	2300      	movs	r3, #0
 801678c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016794:	b2db      	uxtb	r3, r3
 8016796:	2b20      	cmp	r3, #32
 8016798:	d17c      	bne.n	8016894 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801679a:	68bb      	ldr	r3, [r7, #8]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d002      	beq.n	80167a6 <HAL_UART_Transmit+0x2c>
 80167a0:	88fb      	ldrh	r3, [r7, #6]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d101      	bne.n	80167aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80167a6:	2301      	movs	r3, #1
 80167a8:	e075      	b.n	8016896 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80167b0:	2b01      	cmp	r3, #1
 80167b2:	d101      	bne.n	80167b8 <HAL_UART_Transmit+0x3e>
 80167b4:	2302      	movs	r3, #2
 80167b6:	e06e      	b.n	8016896 <HAL_UART_Transmit+0x11c>
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	2201      	movs	r2, #1
 80167bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	2200      	movs	r2, #0
 80167c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	2221      	movs	r2, #33	; 0x21
 80167ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80167ce:	f7fb fdd1 	bl	8012374 <HAL_GetTick>
 80167d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	88fa      	ldrh	r2, [r7, #6]
 80167d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	88fa      	ldrh	r2, [r7, #6]
 80167de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	689b      	ldr	r3, [r3, #8]
 80167e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80167e8:	d108      	bne.n	80167fc <HAL_UART_Transmit+0x82>
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	691b      	ldr	r3, [r3, #16]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d104      	bne.n	80167fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80167f2:	2300      	movs	r3, #0
 80167f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80167f6:	68bb      	ldr	r3, [r7, #8]
 80167f8:	61bb      	str	r3, [r7, #24]
 80167fa:	e003      	b.n	8016804 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016800:	2300      	movs	r3, #0
 8016802:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	2200      	movs	r2, #0
 8016808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801680c:	e02a      	b.n	8016864 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	9300      	str	r3, [sp, #0]
 8016812:	697b      	ldr	r3, [r7, #20]
 8016814:	2200      	movs	r2, #0
 8016816:	2180      	movs	r1, #128	; 0x80
 8016818:	68f8      	ldr	r0, [r7, #12]
 801681a:	f000 f840 	bl	801689e <UART_WaitOnFlagUntilTimeout>
 801681e:	4603      	mov	r3, r0
 8016820:	2b00      	cmp	r3, #0
 8016822:	d001      	beq.n	8016828 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8016824:	2303      	movs	r3, #3
 8016826:	e036      	b.n	8016896 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8016828:	69fb      	ldr	r3, [r7, #28]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d10b      	bne.n	8016846 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801682e:	69bb      	ldr	r3, [r7, #24]
 8016830:	881b      	ldrh	r3, [r3, #0]
 8016832:	461a      	mov	r2, r3
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801683c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801683e:	69bb      	ldr	r3, [r7, #24]
 8016840:	3302      	adds	r3, #2
 8016842:	61bb      	str	r3, [r7, #24]
 8016844:	e007      	b.n	8016856 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8016846:	69fb      	ldr	r3, [r7, #28]
 8016848:	781a      	ldrb	r2, [r3, #0]
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8016850:	69fb      	ldr	r3, [r7, #28]
 8016852:	3301      	adds	r3, #1
 8016854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801685a:	b29b      	uxth	r3, r3
 801685c:	3b01      	subs	r3, #1
 801685e:	b29a      	uxth	r2, r3
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016868:	b29b      	uxth	r3, r3
 801686a:	2b00      	cmp	r3, #0
 801686c:	d1cf      	bne.n	801680e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	9300      	str	r3, [sp, #0]
 8016872:	697b      	ldr	r3, [r7, #20]
 8016874:	2200      	movs	r2, #0
 8016876:	2140      	movs	r1, #64	; 0x40
 8016878:	68f8      	ldr	r0, [r7, #12]
 801687a:	f000 f810 	bl	801689e <UART_WaitOnFlagUntilTimeout>
 801687e:	4603      	mov	r3, r0
 8016880:	2b00      	cmp	r3, #0
 8016882:	d001      	beq.n	8016888 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8016884:	2303      	movs	r3, #3
 8016886:	e006      	b.n	8016896 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	2220      	movs	r2, #32
 801688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8016890:	2300      	movs	r3, #0
 8016892:	e000      	b.n	8016896 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8016894:	2302      	movs	r3, #2
  }
}
 8016896:	4618      	mov	r0, r3
 8016898:	3720      	adds	r7, #32
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}

0801689e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801689e:	b580      	push	{r7, lr}
 80168a0:	b090      	sub	sp, #64	; 0x40
 80168a2:	af00      	add	r7, sp, #0
 80168a4:	60f8      	str	r0, [r7, #12]
 80168a6:	60b9      	str	r1, [r7, #8]
 80168a8:	603b      	str	r3, [r7, #0]
 80168aa:	4613      	mov	r3, r2
 80168ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80168ae:	e050      	b.n	8016952 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80168b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168b6:	d04c      	beq.n	8016952 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80168b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d007      	beq.n	80168ce <UART_WaitOnFlagUntilTimeout+0x30>
 80168be:	f7fb fd59 	bl	8012374 <HAL_GetTick>
 80168c2:	4602      	mov	r2, r0
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	1ad3      	subs	r3, r2, r3
 80168c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80168ca:	429a      	cmp	r2, r3
 80168cc:	d241      	bcs.n	8016952 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	330c      	adds	r3, #12
 80168d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168d8:	e853 3f00 	ldrex	r3, [r3]
 80168dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80168de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80168e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	330c      	adds	r3, #12
 80168ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80168ee:	637a      	str	r2, [r7, #52]	; 0x34
 80168f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80168f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80168f6:	e841 2300 	strex	r3, r2, [r1]
 80168fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80168fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d1e5      	bne.n	80168ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	3314      	adds	r3, #20
 8016908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801690a:	697b      	ldr	r3, [r7, #20]
 801690c:	e853 3f00 	ldrex	r3, [r3]
 8016910:	613b      	str	r3, [r7, #16]
   return(result);
 8016912:	693b      	ldr	r3, [r7, #16]
 8016914:	f023 0301 	bic.w	r3, r3, #1
 8016918:	63bb      	str	r3, [r7, #56]	; 0x38
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	3314      	adds	r3, #20
 8016920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016922:	623a      	str	r2, [r7, #32]
 8016924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016926:	69f9      	ldr	r1, [r7, #28]
 8016928:	6a3a      	ldr	r2, [r7, #32]
 801692a:	e841 2300 	strex	r3, r2, [r1]
 801692e:	61bb      	str	r3, [r7, #24]
   return(result);
 8016930:	69bb      	ldr	r3, [r7, #24]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d1e5      	bne.n	8016902 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	2220      	movs	r2, #32
 801693a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	2220      	movs	r2, #32
 8016942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	2200      	movs	r2, #0
 801694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801694e:	2303      	movs	r3, #3
 8016950:	e00f      	b.n	8016972 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	681a      	ldr	r2, [r3, #0]
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	4013      	ands	r3, r2
 801695c:	68ba      	ldr	r2, [r7, #8]
 801695e:	429a      	cmp	r2, r3
 8016960:	bf0c      	ite	eq
 8016962:	2301      	moveq	r3, #1
 8016964:	2300      	movne	r3, #0
 8016966:	b2db      	uxtb	r3, r3
 8016968:	461a      	mov	r2, r3
 801696a:	79fb      	ldrb	r3, [r7, #7]
 801696c:	429a      	cmp	r2, r3
 801696e:	d09f      	beq.n	80168b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8016970:	2300      	movs	r3, #0
}
 8016972:	4618      	mov	r0, r3
 8016974:	3740      	adds	r7, #64	; 0x40
 8016976:	46bd      	mov	sp, r7
 8016978:	bd80      	pop	{r7, pc}
	...

0801697c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016980:	b09f      	sub	sp, #124	; 0x7c
 8016982:	af00      	add	r7, sp, #0
 8016984:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	691b      	ldr	r3, [r3, #16]
 801698c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8016990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016992:	68d9      	ldr	r1, [r3, #12]
 8016994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016996:	681a      	ldr	r2, [r3, #0]
 8016998:	ea40 0301 	orr.w	r3, r0, r1
 801699c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801699e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169a0:	689a      	ldr	r2, [r3, #8]
 80169a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169a4:	691b      	ldr	r3, [r3, #16]
 80169a6:	431a      	orrs	r2, r3
 80169a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169aa:	695b      	ldr	r3, [r3, #20]
 80169ac:	431a      	orrs	r2, r3
 80169ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169b0:	69db      	ldr	r3, [r3, #28]
 80169b2:	4313      	orrs	r3, r2
 80169b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80169b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	68db      	ldr	r3, [r3, #12]
 80169bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80169c0:	f021 010c 	bic.w	r1, r1, #12
 80169c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169c6:	681a      	ldr	r2, [r3, #0]
 80169c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169ca:	430b      	orrs	r3, r1
 80169cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80169ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	695b      	ldr	r3, [r3, #20]
 80169d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80169d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169da:	6999      	ldr	r1, [r3, #24]
 80169dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169de:	681a      	ldr	r2, [r3, #0]
 80169e0:	ea40 0301 	orr.w	r3, r0, r1
 80169e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80169e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169e8:	681a      	ldr	r2, [r3, #0]
 80169ea:	4bc5      	ldr	r3, [pc, #788]	; (8016d00 <UART_SetConfig+0x384>)
 80169ec:	429a      	cmp	r2, r3
 80169ee:	d004      	beq.n	80169fa <UART_SetConfig+0x7e>
 80169f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169f2:	681a      	ldr	r2, [r3, #0]
 80169f4:	4bc3      	ldr	r3, [pc, #780]	; (8016d04 <UART_SetConfig+0x388>)
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d103      	bne.n	8016a02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80169fa:	f7fe fa61 	bl	8014ec0 <HAL_RCC_GetPCLK2Freq>
 80169fe:	6778      	str	r0, [r7, #116]	; 0x74
 8016a00:	e002      	b.n	8016a08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8016a02:	f7fe fa49 	bl	8014e98 <HAL_RCC_GetPCLK1Freq>
 8016a06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a0a:	69db      	ldr	r3, [r3, #28]
 8016a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016a10:	f040 80b6 	bne.w	8016b80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8016a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a16:	461c      	mov	r4, r3
 8016a18:	f04f 0500 	mov.w	r5, #0
 8016a1c:	4622      	mov	r2, r4
 8016a1e:	462b      	mov	r3, r5
 8016a20:	1891      	adds	r1, r2, r2
 8016a22:	6439      	str	r1, [r7, #64]	; 0x40
 8016a24:	415b      	adcs	r3, r3
 8016a26:	647b      	str	r3, [r7, #68]	; 0x44
 8016a28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016a2c:	1912      	adds	r2, r2, r4
 8016a2e:	eb45 0303 	adc.w	r3, r5, r3
 8016a32:	f04f 0000 	mov.w	r0, #0
 8016a36:	f04f 0100 	mov.w	r1, #0
 8016a3a:	00d9      	lsls	r1, r3, #3
 8016a3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016a40:	00d0      	lsls	r0, r2, #3
 8016a42:	4602      	mov	r2, r0
 8016a44:	460b      	mov	r3, r1
 8016a46:	1911      	adds	r1, r2, r4
 8016a48:	6639      	str	r1, [r7, #96]	; 0x60
 8016a4a:	416b      	adcs	r3, r5
 8016a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8016a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	461a      	mov	r2, r3
 8016a54:	f04f 0300 	mov.w	r3, #0
 8016a58:	1891      	adds	r1, r2, r2
 8016a5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8016a5c:	415b      	adcs	r3, r3
 8016a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8016a64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8016a68:	f7fa f828 	bl	8010abc <__aeabi_uldivmod>
 8016a6c:	4602      	mov	r2, r0
 8016a6e:	460b      	mov	r3, r1
 8016a70:	4ba5      	ldr	r3, [pc, #660]	; (8016d08 <UART_SetConfig+0x38c>)
 8016a72:	fba3 2302 	umull	r2, r3, r3, r2
 8016a76:	095b      	lsrs	r3, r3, #5
 8016a78:	011e      	lsls	r6, r3, #4
 8016a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a7c:	461c      	mov	r4, r3
 8016a7e:	f04f 0500 	mov.w	r5, #0
 8016a82:	4622      	mov	r2, r4
 8016a84:	462b      	mov	r3, r5
 8016a86:	1891      	adds	r1, r2, r2
 8016a88:	6339      	str	r1, [r7, #48]	; 0x30
 8016a8a:	415b      	adcs	r3, r3
 8016a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8016a8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8016a92:	1912      	adds	r2, r2, r4
 8016a94:	eb45 0303 	adc.w	r3, r5, r3
 8016a98:	f04f 0000 	mov.w	r0, #0
 8016a9c:	f04f 0100 	mov.w	r1, #0
 8016aa0:	00d9      	lsls	r1, r3, #3
 8016aa2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016aa6:	00d0      	lsls	r0, r2, #3
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	460b      	mov	r3, r1
 8016aac:	1911      	adds	r1, r2, r4
 8016aae:	65b9      	str	r1, [r7, #88]	; 0x58
 8016ab0:	416b      	adcs	r3, r5
 8016ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ab6:	685b      	ldr	r3, [r3, #4]
 8016ab8:	461a      	mov	r2, r3
 8016aba:	f04f 0300 	mov.w	r3, #0
 8016abe:	1891      	adds	r1, r2, r2
 8016ac0:	62b9      	str	r1, [r7, #40]	; 0x28
 8016ac2:	415b      	adcs	r3, r3
 8016ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ac6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016aca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8016ace:	f7f9 fff5 	bl	8010abc <__aeabi_uldivmod>
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	460b      	mov	r3, r1
 8016ad6:	4b8c      	ldr	r3, [pc, #560]	; (8016d08 <UART_SetConfig+0x38c>)
 8016ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8016adc:	095b      	lsrs	r3, r3, #5
 8016ade:	2164      	movs	r1, #100	; 0x64
 8016ae0:	fb01 f303 	mul.w	r3, r1, r3
 8016ae4:	1ad3      	subs	r3, r2, r3
 8016ae6:	00db      	lsls	r3, r3, #3
 8016ae8:	3332      	adds	r3, #50	; 0x32
 8016aea:	4a87      	ldr	r2, [pc, #540]	; (8016d08 <UART_SetConfig+0x38c>)
 8016aec:	fba2 2303 	umull	r2, r3, r2, r3
 8016af0:	095b      	lsrs	r3, r3, #5
 8016af2:	005b      	lsls	r3, r3, #1
 8016af4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8016af8:	441e      	add	r6, r3
 8016afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016afc:	4618      	mov	r0, r3
 8016afe:	f04f 0100 	mov.w	r1, #0
 8016b02:	4602      	mov	r2, r0
 8016b04:	460b      	mov	r3, r1
 8016b06:	1894      	adds	r4, r2, r2
 8016b08:	623c      	str	r4, [r7, #32]
 8016b0a:	415b      	adcs	r3, r3
 8016b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8016b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016b12:	1812      	adds	r2, r2, r0
 8016b14:	eb41 0303 	adc.w	r3, r1, r3
 8016b18:	f04f 0400 	mov.w	r4, #0
 8016b1c:	f04f 0500 	mov.w	r5, #0
 8016b20:	00dd      	lsls	r5, r3, #3
 8016b22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016b26:	00d4      	lsls	r4, r2, #3
 8016b28:	4622      	mov	r2, r4
 8016b2a:	462b      	mov	r3, r5
 8016b2c:	1814      	adds	r4, r2, r0
 8016b2e:	653c      	str	r4, [r7, #80]	; 0x50
 8016b30:	414b      	adcs	r3, r1
 8016b32:	657b      	str	r3, [r7, #84]	; 0x54
 8016b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016b36:	685b      	ldr	r3, [r3, #4]
 8016b38:	461a      	mov	r2, r3
 8016b3a:	f04f 0300 	mov.w	r3, #0
 8016b3e:	1891      	adds	r1, r2, r2
 8016b40:	61b9      	str	r1, [r7, #24]
 8016b42:	415b      	adcs	r3, r3
 8016b44:	61fb      	str	r3, [r7, #28]
 8016b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016b4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8016b4e:	f7f9 ffb5 	bl	8010abc <__aeabi_uldivmod>
 8016b52:	4602      	mov	r2, r0
 8016b54:	460b      	mov	r3, r1
 8016b56:	4b6c      	ldr	r3, [pc, #432]	; (8016d08 <UART_SetConfig+0x38c>)
 8016b58:	fba3 1302 	umull	r1, r3, r3, r2
 8016b5c:	095b      	lsrs	r3, r3, #5
 8016b5e:	2164      	movs	r1, #100	; 0x64
 8016b60:	fb01 f303 	mul.w	r3, r1, r3
 8016b64:	1ad3      	subs	r3, r2, r3
 8016b66:	00db      	lsls	r3, r3, #3
 8016b68:	3332      	adds	r3, #50	; 0x32
 8016b6a:	4a67      	ldr	r2, [pc, #412]	; (8016d08 <UART_SetConfig+0x38c>)
 8016b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8016b70:	095b      	lsrs	r3, r3, #5
 8016b72:	f003 0207 	and.w	r2, r3, #7
 8016b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	4432      	add	r2, r6
 8016b7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8016b7e:	e0b9      	b.n	8016cf4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b82:	461c      	mov	r4, r3
 8016b84:	f04f 0500 	mov.w	r5, #0
 8016b88:	4622      	mov	r2, r4
 8016b8a:	462b      	mov	r3, r5
 8016b8c:	1891      	adds	r1, r2, r2
 8016b8e:	6139      	str	r1, [r7, #16]
 8016b90:	415b      	adcs	r3, r3
 8016b92:	617b      	str	r3, [r7, #20]
 8016b94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016b98:	1912      	adds	r2, r2, r4
 8016b9a:	eb45 0303 	adc.w	r3, r5, r3
 8016b9e:	f04f 0000 	mov.w	r0, #0
 8016ba2:	f04f 0100 	mov.w	r1, #0
 8016ba6:	00d9      	lsls	r1, r3, #3
 8016ba8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016bac:	00d0      	lsls	r0, r2, #3
 8016bae:	4602      	mov	r2, r0
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	eb12 0804 	adds.w	r8, r2, r4
 8016bb6:	eb43 0905 	adc.w	r9, r3, r5
 8016bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016bbc:	685b      	ldr	r3, [r3, #4]
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f04f 0100 	mov.w	r1, #0
 8016bc4:	f04f 0200 	mov.w	r2, #0
 8016bc8:	f04f 0300 	mov.w	r3, #0
 8016bcc:	008b      	lsls	r3, r1, #2
 8016bce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016bd2:	0082      	lsls	r2, r0, #2
 8016bd4:	4640      	mov	r0, r8
 8016bd6:	4649      	mov	r1, r9
 8016bd8:	f7f9 ff70 	bl	8010abc <__aeabi_uldivmod>
 8016bdc:	4602      	mov	r2, r0
 8016bde:	460b      	mov	r3, r1
 8016be0:	4b49      	ldr	r3, [pc, #292]	; (8016d08 <UART_SetConfig+0x38c>)
 8016be2:	fba3 2302 	umull	r2, r3, r3, r2
 8016be6:	095b      	lsrs	r3, r3, #5
 8016be8:	011e      	lsls	r6, r3, #4
 8016bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016bec:	4618      	mov	r0, r3
 8016bee:	f04f 0100 	mov.w	r1, #0
 8016bf2:	4602      	mov	r2, r0
 8016bf4:	460b      	mov	r3, r1
 8016bf6:	1894      	adds	r4, r2, r2
 8016bf8:	60bc      	str	r4, [r7, #8]
 8016bfa:	415b      	adcs	r3, r3
 8016bfc:	60fb      	str	r3, [r7, #12]
 8016bfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016c02:	1812      	adds	r2, r2, r0
 8016c04:	eb41 0303 	adc.w	r3, r1, r3
 8016c08:	f04f 0400 	mov.w	r4, #0
 8016c0c:	f04f 0500 	mov.w	r5, #0
 8016c10:	00dd      	lsls	r5, r3, #3
 8016c12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016c16:	00d4      	lsls	r4, r2, #3
 8016c18:	4622      	mov	r2, r4
 8016c1a:	462b      	mov	r3, r5
 8016c1c:	1814      	adds	r4, r2, r0
 8016c1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8016c20:	414b      	adcs	r3, r1
 8016c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016c26:	685b      	ldr	r3, [r3, #4]
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f04f 0100 	mov.w	r1, #0
 8016c2e:	f04f 0200 	mov.w	r2, #0
 8016c32:	f04f 0300 	mov.w	r3, #0
 8016c36:	008b      	lsls	r3, r1, #2
 8016c38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016c3c:	0082      	lsls	r2, r0, #2
 8016c3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8016c42:	f7f9 ff3b 	bl	8010abc <__aeabi_uldivmod>
 8016c46:	4602      	mov	r2, r0
 8016c48:	460b      	mov	r3, r1
 8016c4a:	4b2f      	ldr	r3, [pc, #188]	; (8016d08 <UART_SetConfig+0x38c>)
 8016c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8016c50:	095b      	lsrs	r3, r3, #5
 8016c52:	2164      	movs	r1, #100	; 0x64
 8016c54:	fb01 f303 	mul.w	r3, r1, r3
 8016c58:	1ad3      	subs	r3, r2, r3
 8016c5a:	011b      	lsls	r3, r3, #4
 8016c5c:	3332      	adds	r3, #50	; 0x32
 8016c5e:	4a2a      	ldr	r2, [pc, #168]	; (8016d08 <UART_SetConfig+0x38c>)
 8016c60:	fba2 2303 	umull	r2, r3, r2, r3
 8016c64:	095b      	lsrs	r3, r3, #5
 8016c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c6a:	441e      	add	r6, r3
 8016c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f04f 0100 	mov.w	r1, #0
 8016c74:	4602      	mov	r2, r0
 8016c76:	460b      	mov	r3, r1
 8016c78:	1894      	adds	r4, r2, r2
 8016c7a:	603c      	str	r4, [r7, #0]
 8016c7c:	415b      	adcs	r3, r3
 8016c7e:	607b      	str	r3, [r7, #4]
 8016c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c84:	1812      	adds	r2, r2, r0
 8016c86:	eb41 0303 	adc.w	r3, r1, r3
 8016c8a:	f04f 0400 	mov.w	r4, #0
 8016c8e:	f04f 0500 	mov.w	r5, #0
 8016c92:	00dd      	lsls	r5, r3, #3
 8016c94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016c98:	00d4      	lsls	r4, r2, #3
 8016c9a:	4622      	mov	r2, r4
 8016c9c:	462b      	mov	r3, r5
 8016c9e:	eb12 0a00 	adds.w	sl, r2, r0
 8016ca2:	eb43 0b01 	adc.w	fp, r3, r1
 8016ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ca8:	685b      	ldr	r3, [r3, #4]
 8016caa:	4618      	mov	r0, r3
 8016cac:	f04f 0100 	mov.w	r1, #0
 8016cb0:	f04f 0200 	mov.w	r2, #0
 8016cb4:	f04f 0300 	mov.w	r3, #0
 8016cb8:	008b      	lsls	r3, r1, #2
 8016cba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016cbe:	0082      	lsls	r2, r0, #2
 8016cc0:	4650      	mov	r0, sl
 8016cc2:	4659      	mov	r1, fp
 8016cc4:	f7f9 fefa 	bl	8010abc <__aeabi_uldivmod>
 8016cc8:	4602      	mov	r2, r0
 8016cca:	460b      	mov	r3, r1
 8016ccc:	4b0e      	ldr	r3, [pc, #56]	; (8016d08 <UART_SetConfig+0x38c>)
 8016cce:	fba3 1302 	umull	r1, r3, r3, r2
 8016cd2:	095b      	lsrs	r3, r3, #5
 8016cd4:	2164      	movs	r1, #100	; 0x64
 8016cd6:	fb01 f303 	mul.w	r3, r1, r3
 8016cda:	1ad3      	subs	r3, r2, r3
 8016cdc:	011b      	lsls	r3, r3, #4
 8016cde:	3332      	adds	r3, #50	; 0x32
 8016ce0:	4a09      	ldr	r2, [pc, #36]	; (8016d08 <UART_SetConfig+0x38c>)
 8016ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8016ce6:	095b      	lsrs	r3, r3, #5
 8016ce8:	f003 020f 	and.w	r2, r3, #15
 8016cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	4432      	add	r2, r6
 8016cf2:	609a      	str	r2, [r3, #8]
}
 8016cf4:	bf00      	nop
 8016cf6:	377c      	adds	r7, #124	; 0x7c
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cfe:	bf00      	nop
 8016d00:	40011000 	.word	0x40011000
 8016d04:	40011400 	.word	0x40011400
 8016d08:	51eb851f 	.word	0x51eb851f

08016d0c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b086      	sub	sp, #24
 8016d10:	af02      	add	r7, sp, #8
 8016d12:	60f8      	str	r0, [r7, #12]
 8016d14:	4608      	mov	r0, r1
 8016d16:	4611      	mov	r1, r2
 8016d18:	461a      	mov	r2, r3
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	817b      	strh	r3, [r7, #10]
 8016d1e:	460b      	mov	r3, r1
 8016d20:	813b      	strh	r3, [r7, #8]
 8016d22:	4613      	mov	r3, r2
 8016d24:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8016d26:	897a      	ldrh	r2, [r7, #10]
 8016d28:	88fb      	ldrh	r3, [r7, #6]
 8016d2a:	4413      	add	r3, r2
 8016d2c:	b298      	uxth	r0, r3
 8016d2e:	893a      	ldrh	r2, [r7, #8]
 8016d30:	8b3b      	ldrh	r3, [r7, #24]
 8016d32:	4413      	add	r3, r2
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	893a      	ldrh	r2, [r7, #8]
 8016d38:	8979      	ldrh	r1, [r7, #10]
 8016d3a:	9300      	str	r3, [sp, #0]
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	68f8      	ldr	r0, [r7, #12]
 8016d40:	f001 fa13 	bl	801816a <u8g2_IsIntersection>
 8016d44:	4603      	mov	r3, r0
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d012      	beq.n	8016d70 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8016d4a:	e00d      	b.n	8016d68 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8016d4c:	88fb      	ldrh	r3, [r7, #6]
 8016d4e:	893a      	ldrh	r2, [r7, #8]
 8016d50:	8979      	ldrh	r1, [r7, #10]
 8016d52:	2000      	movs	r0, #0
 8016d54:	9000      	str	r0, [sp, #0]
 8016d56:	68f8      	ldr	r0, [r7, #12]
 8016d58:	f001 f84b 	bl	8017df2 <u8g2_DrawHVLine>
    y++;    
 8016d5c:	893b      	ldrh	r3, [r7, #8]
 8016d5e:	3301      	adds	r3, #1
 8016d60:	813b      	strh	r3, [r7, #8]
    h--;
 8016d62:	8b3b      	ldrh	r3, [r7, #24]
 8016d64:	3b01      	subs	r3, #1
 8016d66:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8016d68:	8b3b      	ldrh	r3, [r7, #24]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d1ee      	bne.n	8016d4c <u8g2_DrawBox+0x40>
 8016d6e:	e000      	b.n	8016d72 <u8g2_DrawBox+0x66>
    return;
 8016d70:	bf00      	nop
  }
}
 8016d72:	3710      	adds	r7, #16
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}

08016d78 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b088      	sub	sp, #32
 8016d7c:	af02      	add	r7, sp, #8
 8016d7e:	60f8      	str	r0, [r7, #12]
 8016d80:	4608      	mov	r0, r1
 8016d82:	4611      	mov	r1, r2
 8016d84:	461a      	mov	r2, r3
 8016d86:	4603      	mov	r3, r0
 8016d88:	817b      	strh	r3, [r7, #10]
 8016d8a:	460b      	mov	r3, r1
 8016d8c:	813b      	strh	r3, [r7, #8]
 8016d8e:	4613      	mov	r3, r2
 8016d90:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8016d92:	897b      	ldrh	r3, [r7, #10]
 8016d94:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8016d96:	897a      	ldrh	r2, [r7, #10]
 8016d98:	88fb      	ldrh	r3, [r7, #6]
 8016d9a:	4413      	add	r3, r2
 8016d9c:	b298      	uxth	r0, r3
 8016d9e:	893a      	ldrh	r2, [r7, #8]
 8016da0:	8c3b      	ldrh	r3, [r7, #32]
 8016da2:	4413      	add	r3, r2
 8016da4:	b29b      	uxth	r3, r3
 8016da6:	893a      	ldrh	r2, [r7, #8]
 8016da8:	8979      	ldrh	r1, [r7, #10]
 8016daa:	9300      	str	r3, [sp, #0]
 8016dac:	4603      	mov	r3, r0
 8016dae:	68f8      	ldr	r0, [r7, #12]
 8016db0:	f001 f9db 	bl	801816a <u8g2_IsIntersection>
 8016db4:	4603      	mov	r3, r0
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d037      	beq.n	8016e2a <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8016dba:	88fb      	ldrh	r3, [r7, #6]
 8016dbc:	893a      	ldrh	r2, [r7, #8]
 8016dbe:	8979      	ldrh	r1, [r7, #10]
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	9000      	str	r0, [sp, #0]
 8016dc4:	68f8      	ldr	r0, [r7, #12]
 8016dc6:	f001 f814 	bl	8017df2 <u8g2_DrawHVLine>
  if (h >= 2) {
 8016dca:	8c3b      	ldrh	r3, [r7, #32]
 8016dcc:	2b01      	cmp	r3, #1
 8016dce:	d92d      	bls.n	8016e2c <u8g2_DrawFrame+0xb4>
    h-=2;
 8016dd0:	8c3b      	ldrh	r3, [r7, #32]
 8016dd2:	3b02      	subs	r3, #2
 8016dd4:	843b      	strh	r3, [r7, #32]
    y++;
 8016dd6:	893b      	ldrh	r3, [r7, #8]
 8016dd8:	3301      	adds	r3, #1
 8016dda:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8016ddc:	8c3b      	ldrh	r3, [r7, #32]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d01a      	beq.n	8016e18 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8016de2:	8c3b      	ldrh	r3, [r7, #32]
 8016de4:	893a      	ldrh	r2, [r7, #8]
 8016de6:	8979      	ldrh	r1, [r7, #10]
 8016de8:	2001      	movs	r0, #1
 8016dea:	9000      	str	r0, [sp, #0]
 8016dec:	68f8      	ldr	r0, [r7, #12]
 8016dee:	f001 f800 	bl	8017df2 <u8g2_DrawHVLine>
      x+=w;
 8016df2:	897a      	ldrh	r2, [r7, #10]
 8016df4:	88fb      	ldrh	r3, [r7, #6]
 8016df6:	4413      	add	r3, r2
 8016df8:	817b      	strh	r3, [r7, #10]
      x--;
 8016dfa:	897b      	ldrh	r3, [r7, #10]
 8016dfc:	3b01      	subs	r3, #1
 8016dfe:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8016e00:	8c3b      	ldrh	r3, [r7, #32]
 8016e02:	893a      	ldrh	r2, [r7, #8]
 8016e04:	8979      	ldrh	r1, [r7, #10]
 8016e06:	2001      	movs	r0, #1
 8016e08:	9000      	str	r0, [sp, #0]
 8016e0a:	68f8      	ldr	r0, [r7, #12]
 8016e0c:	f000 fff1 	bl	8017df2 <u8g2_DrawHVLine>
      y+=h;
 8016e10:	893a      	ldrh	r2, [r7, #8]
 8016e12:	8c3b      	ldrh	r3, [r7, #32]
 8016e14:	4413      	add	r3, r2
 8016e16:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8016e18:	88fb      	ldrh	r3, [r7, #6]
 8016e1a:	893a      	ldrh	r2, [r7, #8]
 8016e1c:	8af9      	ldrh	r1, [r7, #22]
 8016e1e:	2000      	movs	r0, #0
 8016e20:	9000      	str	r0, [sp, #0]
 8016e22:	68f8      	ldr	r0, [r7, #12]
 8016e24:	f000 ffe5 	bl	8017df2 <u8g2_DrawHVLine>
 8016e28:	e000      	b.n	8016e2c <u8g2_DrawFrame+0xb4>
    return;
 8016e2a:	bf00      	nop
  }
}
 8016e2c:	3718      	adds	r7, #24
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}

08016e32 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8016e32:	b580      	push	{r7, lr}
 8016e34:	b084      	sub	sp, #16
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	7c1b      	ldrb	r3, [r3, #16]
 8016e40:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016e48:	461a      	mov	r2, r3
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	fb02 f303 	mul.w	r3, r2, r3
 8016e50:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	00db      	lsls	r3, r3, #3
 8016e56:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e5c:	68fa      	ldr	r2, [r7, #12]
 8016e5e:	2100      	movs	r1, #0
 8016e60:	4618      	mov	r0, r3
 8016e62:	f009 fbcf 	bl	8020604 <memset>
}
 8016e66:	bf00      	nop
 8016e68:	3710      	adds	r7, #16
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bd80      	pop	{r7, pc}

08016e6e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8016e6e:	b580      	push	{r7, lr}
 8016e70:	b086      	sub	sp, #24
 8016e72:	af02      	add	r7, sp, #8
 8016e74:	6078      	str	r0, [r7, #4]
 8016e76:	460b      	mov	r3, r1
 8016e78:	70fb      	strb	r3, [r7, #3]
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	7c1b      	ldrb	r3, [r3, #16]
 8016e84:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8016e86:	78fb      	ldrb	r3, [r7, #3]
 8016e88:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e8e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8016e90:	7bfb      	ldrb	r3, [r7, #15]
 8016e92:	b29b      	uxth	r3, r3
 8016e94:	89ba      	ldrh	r2, [r7, #12]
 8016e96:	fb12 f303 	smulbb	r3, r2, r3
 8016e9a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8016e9c:	89bb      	ldrh	r3, [r7, #12]
 8016e9e:	00db      	lsls	r3, r3, #3
 8016ea0:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8016ea2:	89bb      	ldrh	r3, [r7, #12]
 8016ea4:	68ba      	ldr	r2, [r7, #8]
 8016ea6:	4413      	add	r3, r2
 8016ea8:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8016eaa:	7bf9      	ldrb	r1, [r7, #15]
 8016eac:	78ba      	ldrb	r2, [r7, #2]
 8016eae:	68bb      	ldr	r3, [r7, #8]
 8016eb0:	9300      	str	r3, [sp, #0]
 8016eb2:	460b      	mov	r3, r1
 8016eb4:	2100      	movs	r1, #0
 8016eb6:	6878      	ldr	r0, [r7, #4]
 8016eb8:	f002 f94f 	bl	801915a <u8x8_DrawTile>
}
 8016ebc:	bf00      	nop
 8016ebe:	3710      	adds	r7, #16
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}

08016ec4 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b084      	sub	sp, #16
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8016ecc:	2300      	movs	r3, #0
 8016ece:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016ed6:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016ede:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	7c5b      	ldrb	r3, [r3, #17]
 8016ee6:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8016ee8:	7bba      	ldrb	r2, [r7, #14]
 8016eea:	7bfb      	ldrb	r3, [r7, #15]
 8016eec:	4619      	mov	r1, r3
 8016eee:	6878      	ldr	r0, [r7, #4]
 8016ef0:	f7ff ffbd 	bl	8016e6e <u8g2_send_tile_row>
    src_row++;
 8016ef4:	7bfb      	ldrb	r3, [r7, #15]
 8016ef6:	3301      	adds	r3, #1
 8016ef8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8016efa:	7bbb      	ldrb	r3, [r7, #14]
 8016efc:	3301      	adds	r3, #1
 8016efe:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8016f00:	7bfa      	ldrb	r2, [r7, #15]
 8016f02:	7b7b      	ldrb	r3, [r7, #13]
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d203      	bcs.n	8016f10 <u8g2_send_buffer+0x4c>
 8016f08:	7bba      	ldrb	r2, [r7, #14]
 8016f0a:	7b3b      	ldrb	r3, [r7, #12]
 8016f0c:	429a      	cmp	r2, r3
 8016f0e:	d3eb      	bcc.n	8016ee8 <u8g2_send_buffer+0x24>
}
 8016f10:	bf00      	nop
 8016f12:	3710      	adds	r7, #16
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}

08016f18 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b082      	sub	sp, #8
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	460b      	mov	r3, r1
 8016f22:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	78fa      	ldrb	r2, [r7, #3]
 8016f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f3a:	685b      	ldr	r3, [r3, #4]
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	4798      	blx	r3
}
 8016f40:	bf00      	nop
 8016f42:	3708      	adds	r7, #8
 8016f44:	46bd      	mov	sp, r7
 8016f46:	bd80      	pop	{r7, pc}

08016f48 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b082      	sub	sp, #8
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d002      	beq.n	8016f60 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8016f5a:	6878      	ldr	r0, [r7, #4]
 8016f5c:	f7ff ff69 	bl	8016e32 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8016f60:	2100      	movs	r1, #0
 8016f62:	6878      	ldr	r0, [r7, #4]
 8016f64:	f7ff ffd8 	bl	8016f18 <u8g2_SetBufferCurrTileRow>
}
 8016f68:	bf00      	nop
 8016f6a:	3708      	adds	r7, #8
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}

08016f70 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b084      	sub	sp, #16
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8016f78:	6878      	ldr	r0, [r7, #4]
 8016f7a:	f7ff ffa3 	bl	8016ec4 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016f84:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8016f8c:	7bfb      	ldrb	r3, [r7, #15]
 8016f8e:	4413      	add	r3, r2
 8016f90:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	7c5b      	ldrb	r3, [r3, #17]
 8016f98:	7bfa      	ldrb	r2, [r7, #15]
 8016f9a:	429a      	cmp	r2, r3
 8016f9c:	d304      	bcc.n	8016fa8 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f002 f91b 	bl	80191da <u8x8_RefreshDisplay>
    return 0;
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	e00d      	b.n	8016fc4 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d002      	beq.n	8016fb8 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	f7ff ff3d 	bl	8016e32 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8016fb8:	7bfb      	ldrb	r3, [r7, #15]
 8016fba:	4619      	mov	r1, r3
 8016fbc:	6878      	ldr	r0, [r7, #4]
 8016fbe:	f7ff ffab 	bl	8016f18 <u8g2_SetBufferCurrTileRow>
  return 1;
 8016fc2:	2301      	movs	r3, #1
}
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	3710      	adds	r7, #16
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	bd80      	pop	{r7, pc}

08016fcc <u8g2_m_16_8_2>:
  *page_cnt = 1;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_2(uint8_t *page_cnt)
{
 8016fcc:	b480      	push	{r7}
 8016fce:	b083      	sub	sp, #12
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	2202      	movs	r2, #2
 8016fd8:	701a      	strb	r2, [r3, #0]
  return buf;
 8016fda:	4b03      	ldr	r3, [pc, #12]	; (8016fe8 <u8g2_m_16_8_2+0x1c>)
  #endif
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	370c      	adds	r7, #12
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe6:	4770      	bx	lr
 8016fe8:	20000424 	.word	0x20000424

08016fec <u8g2_Setup_st7920_s_128x64_2>:
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
}
/* st7920 2 */
void u8g2_Setup_st7920_s_128x64_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b088      	sub	sp, #32
 8016ff0:	af02      	add	r7, sp, #8
 8016ff2:	60f8      	str	r0, [r7, #12]
 8016ff4:	60b9      	str	r1, [r7, #8]
 8016ff6:	607a      	str	r2, [r7, #4]
 8016ff8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7920_128x64, u8x8_cad_st7920_spi, byte_cb, gpio_and_delay_cb);
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	9300      	str	r3, [sp, #0]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	4a0b      	ldr	r2, [pc, #44]	; (8017030 <u8g2_Setup_st7920_s_128x64_2+0x44>)
 8017002:	490c      	ldr	r1, [pc, #48]	; (8017034 <u8g2_Setup_st7920_s_128x64_2+0x48>)
 8017004:	68f8      	ldr	r0, [r7, #12]
 8017006:	f002 f949 	bl	801929c <u8x8_Setup>
  buf = u8g2_m_16_8_2(&tile_buf_height);
 801700a:	f107 0313 	add.w	r3, r7, #19
 801700e:	4618      	mov	r0, r3
 8017010:	f7ff ffdc 	bl	8016fcc <u8g2_m_16_8_2>
 8017014:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
 8017016:	7cfa      	ldrb	r2, [r7, #19]
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	9300      	str	r3, [sp, #0]
 801701c:	4b06      	ldr	r3, [pc, #24]	; (8017038 <u8g2_Setup_st7920_s_128x64_2+0x4c>)
 801701e:	6979      	ldr	r1, [r7, #20]
 8017020:	68f8      	ldr	r0, [r7, #12]
 8017022:	f001 fb6a 	bl	80186fa <u8g2_SetupBuffer>
}
 8017026:	bf00      	nop
 8017028:	3718      	adds	r7, #24
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
 801702e:	bf00      	nop
 8017030:	08018de5 	.word	0x08018de5
 8017034:	08019079 	.word	0x08019079
 8017038:	080181c1 	.word	0x080181c1

0801703c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 801703c:	b480      	push	{r7}
 801703e:	b083      	sub	sp, #12
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	460b      	mov	r3, r1
 8017046:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8017048:	78fb      	ldrb	r3, [r7, #3]
 801704a:	687a      	ldr	r2, [r7, #4]
 801704c:	4413      	add	r3, r2
 801704e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	781b      	ldrb	r3, [r3, #0]
}
 8017054:	4618      	mov	r0, r3
 8017056:	370c      	adds	r7, #12
 8017058:	46bd      	mov	sp, r7
 801705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705e:	4770      	bx	lr

08017060 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8017060:	b480      	push	{r7}
 8017062:	b085      	sub	sp, #20
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
 8017068:	460b      	mov	r3, r1
 801706a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 801706c:	78fb      	ldrb	r3, [r7, #3]
 801706e:	687a      	ldr	r2, [r7, #4]
 8017070:	4413      	add	r3, r2
 8017072:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	781b      	ldrb	r3, [r3, #0]
 8017078:	81fb      	strh	r3, [r7, #14]
    font++;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	3301      	adds	r3, #1
 801707e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8017080:	89fb      	ldrh	r3, [r7, #14]
 8017082:	021b      	lsls	r3, r3, #8
 8017084:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	781b      	ldrb	r3, [r3, #0]
 801708a:	b29a      	uxth	r2, r3
 801708c:	89fb      	ldrh	r3, [r7, #14]
 801708e:	4413      	add	r3, r2
 8017090:	81fb      	strh	r3, [r7, #14]
    return pos;
 8017092:	89fb      	ldrh	r3, [r7, #14]
}
 8017094:	4618      	mov	r0, r3
 8017096:	3714      	adds	r7, #20
 8017098:	46bd      	mov	sp, r7
 801709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709e:	4770      	bx	lr

080170a0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80170a0:	b580      	push	{r7, lr}
 80170a2:	b082      	sub	sp, #8
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
 80170a8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80170aa:	2100      	movs	r1, #0
 80170ac:	6838      	ldr	r0, [r7, #0]
 80170ae:	f7ff ffc5 	bl	801703c <u8g2_font_get_byte>
 80170b2:	4603      	mov	r3, r0
 80170b4:	461a      	mov	r2, r3
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80170ba:	2101      	movs	r1, #1
 80170bc:	6838      	ldr	r0, [r7, #0]
 80170be:	f7ff ffbd 	bl	801703c <u8g2_font_get_byte>
 80170c2:	4603      	mov	r3, r0
 80170c4:	461a      	mov	r2, r3
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80170ca:	2102      	movs	r1, #2
 80170cc:	6838      	ldr	r0, [r7, #0]
 80170ce:	f7ff ffb5 	bl	801703c <u8g2_font_get_byte>
 80170d2:	4603      	mov	r3, r0
 80170d4:	461a      	mov	r2, r3
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80170da:	2103      	movs	r1, #3
 80170dc:	6838      	ldr	r0, [r7, #0]
 80170de:	f7ff ffad 	bl	801703c <u8g2_font_get_byte>
 80170e2:	4603      	mov	r3, r0
 80170e4:	461a      	mov	r2, r3
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80170ea:	2104      	movs	r1, #4
 80170ec:	6838      	ldr	r0, [r7, #0]
 80170ee:	f7ff ffa5 	bl	801703c <u8g2_font_get_byte>
 80170f2:	4603      	mov	r3, r0
 80170f4:	461a      	mov	r2, r3
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80170fa:	2105      	movs	r1, #5
 80170fc:	6838      	ldr	r0, [r7, #0]
 80170fe:	f7ff ff9d 	bl	801703c <u8g2_font_get_byte>
 8017102:	4603      	mov	r3, r0
 8017104:	461a      	mov	r2, r3
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 801710a:	2106      	movs	r1, #6
 801710c:	6838      	ldr	r0, [r7, #0]
 801710e:	f7ff ff95 	bl	801703c <u8g2_font_get_byte>
 8017112:	4603      	mov	r3, r0
 8017114:	461a      	mov	r2, r3
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 801711a:	2107      	movs	r1, #7
 801711c:	6838      	ldr	r0, [r7, #0]
 801711e:	f7ff ff8d 	bl	801703c <u8g2_font_get_byte>
 8017122:	4603      	mov	r3, r0
 8017124:	461a      	mov	r2, r3
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 801712a:	2108      	movs	r1, #8
 801712c:	6838      	ldr	r0, [r7, #0]
 801712e:	f7ff ff85 	bl	801703c <u8g2_font_get_byte>
 8017132:	4603      	mov	r3, r0
 8017134:	461a      	mov	r2, r3
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 801713a:	2109      	movs	r1, #9
 801713c:	6838      	ldr	r0, [r7, #0]
 801713e:	f7ff ff7d 	bl	801703c <u8g2_font_get_byte>
 8017142:	4603      	mov	r3, r0
 8017144:	b25a      	sxtb	r2, r3
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 801714a:	210a      	movs	r1, #10
 801714c:	6838      	ldr	r0, [r7, #0]
 801714e:	f7ff ff75 	bl	801703c <u8g2_font_get_byte>
 8017152:	4603      	mov	r3, r0
 8017154:	b25a      	sxtb	r2, r3
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 801715a:	210b      	movs	r1, #11
 801715c:	6838      	ldr	r0, [r7, #0]
 801715e:	f7ff ff6d 	bl	801703c <u8g2_font_get_byte>
 8017162:	4603      	mov	r3, r0
 8017164:	b25a      	sxtb	r2, r3
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 801716a:	210c      	movs	r1, #12
 801716c:	6838      	ldr	r0, [r7, #0]
 801716e:	f7ff ff65 	bl	801703c <u8g2_font_get_byte>
 8017172:	4603      	mov	r3, r0
 8017174:	b25a      	sxtb	r2, r3
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 801717a:	210d      	movs	r1, #13
 801717c:	6838      	ldr	r0, [r7, #0]
 801717e:	f7ff ff5d 	bl	801703c <u8g2_font_get_byte>
 8017182:	4603      	mov	r3, r0
 8017184:	b25a      	sxtb	r2, r3
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 801718a:	210e      	movs	r1, #14
 801718c:	6838      	ldr	r0, [r7, #0]
 801718e:	f7ff ff55 	bl	801703c <u8g2_font_get_byte>
 8017192:	4603      	mov	r3, r0
 8017194:	b25a      	sxtb	r2, r3
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 801719a:	210f      	movs	r1, #15
 801719c:	6838      	ldr	r0, [r7, #0]
 801719e:	f7ff ff4d 	bl	801703c <u8g2_font_get_byte>
 80171a2:	4603      	mov	r3, r0
 80171a4:	b25a      	sxtb	r2, r3
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80171aa:	2110      	movs	r1, #16
 80171ac:	6838      	ldr	r0, [r7, #0]
 80171ae:	f7ff ff45 	bl	801703c <u8g2_font_get_byte>
 80171b2:	4603      	mov	r3, r0
 80171b4:	b25a      	sxtb	r2, r3
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80171ba:	2111      	movs	r1, #17
 80171bc:	6838      	ldr	r0, [r7, #0]
 80171be:	f7ff ff4f 	bl	8017060 <u8g2_font_get_word>
 80171c2:	4603      	mov	r3, r0
 80171c4:	461a      	mov	r2, r3
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80171ca:	2113      	movs	r1, #19
 80171cc:	6838      	ldr	r0, [r7, #0]
 80171ce:	f7ff ff47 	bl	8017060 <u8g2_font_get_word>
 80171d2:	4603      	mov	r3, r0
 80171d4:	461a      	mov	r2, r3
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80171da:	2115      	movs	r1, #21
 80171dc:	6838      	ldr	r0, [r7, #0]
 80171de:	f7ff ff3f 	bl	8017060 <u8g2_font_get_word>
 80171e2:	4603      	mov	r3, r0
 80171e4:	461a      	mov	r2, r3
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	82da      	strh	r2, [r3, #22]
#endif
}
 80171ea:	bf00      	nop
 80171ec:	3708      	adds	r7, #8
 80171ee:	46bd      	mov	sp, r7
 80171f0:	bd80      	pop	{r7, pc}

080171f2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80171f2:	b480      	push	{r7}
 80171f4:	b085      	sub	sp, #20
 80171f6:	af00      	add	r7, sp, #0
 80171f8:	6078      	str	r0, [r7, #4]
 80171fa:	460b      	mov	r3, r1
 80171fc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	7b1b      	ldrb	r3, [r3, #12]
 8017202:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	781b      	ldrb	r3, [r3, #0]
 801720a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 801720c:	7bfa      	ldrb	r2, [r7, #15]
 801720e:	7b7b      	ldrb	r3, [r7, #13]
 8017210:	fa42 f303 	asr.w	r3, r2, r3
 8017214:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8017216:	7b7b      	ldrb	r3, [r7, #13]
 8017218:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 801721a:	7bba      	ldrb	r2, [r7, #14]
 801721c:	78fb      	ldrb	r3, [r7, #3]
 801721e:	4413      	add	r3, r2
 8017220:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8017222:	7bbb      	ldrb	r3, [r7, #14]
 8017224:	2b07      	cmp	r3, #7
 8017226:	d91a      	bls.n	801725e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8017228:	2308      	movs	r3, #8
 801722a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 801722c:	7b3a      	ldrb	r2, [r7, #12]
 801722e:	7b7b      	ldrb	r3, [r7, #13]
 8017230:	1ad3      	subs	r3, r2, r3
 8017232:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	1c5a      	adds	r2, r3, #1
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	781b      	ldrb	r3, [r3, #0]
 8017244:	461a      	mov	r2, r3
 8017246:	7b3b      	ldrb	r3, [r7, #12]
 8017248:	fa02 f303 	lsl.w	r3, r2, r3
 801724c:	b25a      	sxtb	r2, r3
 801724e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017252:	4313      	orrs	r3, r2
 8017254:	b25b      	sxtb	r3, r3
 8017256:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8017258:	7bbb      	ldrb	r3, [r7, #14]
 801725a:	3b08      	subs	r3, #8
 801725c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 801725e:	78fb      	ldrb	r3, [r7, #3]
 8017260:	f04f 32ff 	mov.w	r2, #4294967295
 8017264:	fa02 f303 	lsl.w	r3, r2, r3
 8017268:	b2db      	uxtb	r3, r3
 801726a:	43db      	mvns	r3, r3
 801726c:	b2da      	uxtb	r2, r3
 801726e:	7bfb      	ldrb	r3, [r7, #15]
 8017270:	4013      	ands	r3, r2
 8017272:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	7bba      	ldrb	r2, [r7, #14]
 8017278:	731a      	strb	r2, [r3, #12]
  return val;
 801727a:	7bfb      	ldrb	r3, [r7, #15]
}
 801727c:	4618      	mov	r0, r3
 801727e:	3714      	adds	r7, #20
 8017280:	46bd      	mov	sp, r7
 8017282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017286:	4770      	bx	lr

08017288 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b084      	sub	sp, #16
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	460b      	mov	r3, r1
 8017292:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8017294:	78fb      	ldrb	r3, [r7, #3]
 8017296:	4619      	mov	r1, r3
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f7ff ffaa 	bl	80171f2 <u8g2_font_decode_get_unsigned_bits>
 801729e:	4603      	mov	r3, r0
 80172a0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80172a2:	2301      	movs	r3, #1
 80172a4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80172a6:	78fb      	ldrb	r3, [r7, #3]
 80172a8:	3b01      	subs	r3, #1
 80172aa:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80172ac:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80172b0:	78fb      	ldrb	r3, [r7, #3]
 80172b2:	fa02 f303 	lsl.w	r3, r2, r3
 80172b6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80172b8:	7bfa      	ldrb	r2, [r7, #15]
 80172ba:	7bbb      	ldrb	r3, [r7, #14]
 80172bc:	1ad3      	subs	r3, r2, r3
 80172be:	b2db      	uxtb	r3, r3
 80172c0:	73fb      	strb	r3, [r7, #15]
  return v;
 80172c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	3710      	adds	r7, #16
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd80      	pop	{r7, pc}

080172ce <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80172ce:	b490      	push	{r4, r7}
 80172d0:	b082      	sub	sp, #8
 80172d2:	af00      	add	r7, sp, #0
 80172d4:	4604      	mov	r4, r0
 80172d6:	4608      	mov	r0, r1
 80172d8:	4611      	mov	r1, r2
 80172da:	461a      	mov	r2, r3
 80172dc:	4623      	mov	r3, r4
 80172de:	80fb      	strh	r3, [r7, #6]
 80172e0:	4603      	mov	r3, r0
 80172e2:	717b      	strb	r3, [r7, #5]
 80172e4:	460b      	mov	r3, r1
 80172e6:	713b      	strb	r3, [r7, #4]
 80172e8:	4613      	mov	r3, r2
 80172ea:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80172ec:	78fb      	ldrb	r3, [r7, #3]
 80172ee:	2b02      	cmp	r3, #2
 80172f0:	d014      	beq.n	801731c <u8g2_add_vector_y+0x4e>
 80172f2:	2b02      	cmp	r3, #2
 80172f4:	dc19      	bgt.n	801732a <u8g2_add_vector_y+0x5c>
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d002      	beq.n	8017300 <u8g2_add_vector_y+0x32>
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d007      	beq.n	801730e <u8g2_add_vector_y+0x40>
 80172fe:	e014      	b.n	801732a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8017300:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8017304:	b29a      	uxth	r2, r3
 8017306:	88fb      	ldrh	r3, [r7, #6]
 8017308:	4413      	add	r3, r2
 801730a:	80fb      	strh	r3, [r7, #6]
      break;
 801730c:	e014      	b.n	8017338 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 801730e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017312:	b29a      	uxth	r2, r3
 8017314:	88fb      	ldrh	r3, [r7, #6]
 8017316:	4413      	add	r3, r2
 8017318:	80fb      	strh	r3, [r7, #6]
      break;
 801731a:	e00d      	b.n	8017338 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 801731c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8017320:	b29b      	uxth	r3, r3
 8017322:	88fa      	ldrh	r2, [r7, #6]
 8017324:	1ad3      	subs	r3, r2, r3
 8017326:	80fb      	strh	r3, [r7, #6]
      break;
 8017328:	e006      	b.n	8017338 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 801732a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801732e:	b29b      	uxth	r3, r3
 8017330:	88fa      	ldrh	r2, [r7, #6]
 8017332:	1ad3      	subs	r3, r2, r3
 8017334:	80fb      	strh	r3, [r7, #6]
      break;      
 8017336:	bf00      	nop
  }
  return dy;
 8017338:	88fb      	ldrh	r3, [r7, #6]
}
 801733a:	4618      	mov	r0, r3
 801733c:	3708      	adds	r7, #8
 801733e:	46bd      	mov	sp, r7
 8017340:	bc90      	pop	{r4, r7}
 8017342:	4770      	bx	lr

08017344 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8017344:	b490      	push	{r4, r7}
 8017346:	b082      	sub	sp, #8
 8017348:	af00      	add	r7, sp, #0
 801734a:	4604      	mov	r4, r0
 801734c:	4608      	mov	r0, r1
 801734e:	4611      	mov	r1, r2
 8017350:	461a      	mov	r2, r3
 8017352:	4623      	mov	r3, r4
 8017354:	80fb      	strh	r3, [r7, #6]
 8017356:	4603      	mov	r3, r0
 8017358:	717b      	strb	r3, [r7, #5]
 801735a:	460b      	mov	r3, r1
 801735c:	713b      	strb	r3, [r7, #4]
 801735e:	4613      	mov	r3, r2
 8017360:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8017362:	78fb      	ldrb	r3, [r7, #3]
 8017364:	2b02      	cmp	r3, #2
 8017366:	d014      	beq.n	8017392 <u8g2_add_vector_x+0x4e>
 8017368:	2b02      	cmp	r3, #2
 801736a:	dc19      	bgt.n	80173a0 <u8g2_add_vector_x+0x5c>
 801736c:	2b00      	cmp	r3, #0
 801736e:	d002      	beq.n	8017376 <u8g2_add_vector_x+0x32>
 8017370:	2b01      	cmp	r3, #1
 8017372:	d007      	beq.n	8017384 <u8g2_add_vector_x+0x40>
 8017374:	e014      	b.n	80173a0 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8017376:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801737a:	b29a      	uxth	r2, r3
 801737c:	88fb      	ldrh	r3, [r7, #6]
 801737e:	4413      	add	r3, r2
 8017380:	80fb      	strh	r3, [r7, #6]
      break;
 8017382:	e014      	b.n	80173ae <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8017384:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8017388:	b29b      	uxth	r3, r3
 801738a:	88fa      	ldrh	r2, [r7, #6]
 801738c:	1ad3      	subs	r3, r2, r3
 801738e:	80fb      	strh	r3, [r7, #6]
      break;
 8017390:	e00d      	b.n	80173ae <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8017392:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017396:	b29b      	uxth	r3, r3
 8017398:	88fa      	ldrh	r2, [r7, #6]
 801739a:	1ad3      	subs	r3, r2, r3
 801739c:	80fb      	strh	r3, [r7, #6]
      break;
 801739e:	e006      	b.n	80173ae <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80173a0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80173a4:	b29a      	uxth	r2, r3
 80173a6:	88fb      	ldrh	r3, [r7, #6]
 80173a8:	4413      	add	r3, r2
 80173aa:	80fb      	strh	r3, [r7, #6]
      break;      
 80173ac:	bf00      	nop
  }
  return dx;
 80173ae:	88fb      	ldrh	r3, [r7, #6]
}
 80173b0:	4618      	mov	r0, r3
 80173b2:	3708      	adds	r7, #8
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bc90      	pop	{r4, r7}
 80173b8:	4770      	bx	lr

080173ba <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80173ba:	b580      	push	{r7, lr}
 80173bc:	b088      	sub	sp, #32
 80173be:	af02      	add	r7, sp, #8
 80173c0:	6078      	str	r0, [r7, #4]
 80173c2:	460b      	mov	r3, r1
 80173c4:	70fb      	strb	r3, [r7, #3]
 80173c6:	4613      	mov	r3, r2
 80173c8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	3360      	adds	r3, #96	; 0x60
 80173ce:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80173d0:	78fb      	ldrb	r3, [r7, #3]
 80173d2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80173d4:	693b      	ldr	r3, [r7, #16]
 80173d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80173da:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80173dc:	693b      	ldr	r3, [r7, #16]
 80173de:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80173e2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80173e4:	693b      	ldr	r3, [r7, #16]
 80173e6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80173ea:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80173ec:	7bfa      	ldrb	r2, [r7, #15]
 80173ee:	7d7b      	ldrb	r3, [r7, #21]
 80173f0:	1ad3      	subs	r3, r2, r3
 80173f2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80173f4:	7bfb      	ldrb	r3, [r7, #15]
 80173f6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80173f8:	7dfa      	ldrb	r2, [r7, #23]
 80173fa:	7bfb      	ldrb	r3, [r7, #15]
 80173fc:	429a      	cmp	r2, r3
 80173fe:	d201      	bcs.n	8017404 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8017400:	7dfb      	ldrb	r3, [r7, #23]
 8017402:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8017404:	693b      	ldr	r3, [r7, #16]
 8017406:	889b      	ldrh	r3, [r3, #4]
 8017408:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 801740a:	693b      	ldr	r3, [r7, #16]
 801740c:	88db      	ldrh	r3, [r3, #6]
 801740e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8017410:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8017414:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	7c1b      	ldrb	r3, [r3, #16]
 801741c:	89b8      	ldrh	r0, [r7, #12]
 801741e:	f7ff ff91 	bl	8017344 <u8g2_add_vector_x>
 8017422:	4603      	mov	r3, r0
 8017424:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8017426:	f997 1015 	ldrsb.w	r1, [r7, #21]
 801742a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	7c1b      	ldrb	r3, [r3, #16]
 8017432:	8978      	ldrh	r0, [r7, #10]
 8017434:	f7ff ff4b 	bl	80172ce <u8g2_add_vector_y>
 8017438:	4603      	mov	r3, r0
 801743a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 801743c:	78bb      	ldrb	r3, [r7, #2]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d010      	beq.n	8017464 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8017442:	693b      	ldr	r3, [r7, #16]
 8017444:	7b9a      	ldrb	r2, [r3, #14]
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 801744c:	7dbb      	ldrb	r3, [r7, #22]
 801744e:	b298      	uxth	r0, r3
 8017450:	693b      	ldr	r3, [r7, #16]
 8017452:	7c1b      	ldrb	r3, [r3, #16]
 8017454:	897a      	ldrh	r2, [r7, #10]
 8017456:	89b9      	ldrh	r1, [r7, #12]
 8017458:	9300      	str	r3, [sp, #0]
 801745a:	4603      	mov	r3, r0
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	f000 fcc8 	bl	8017df2 <u8g2_DrawHVLine>
 8017462:	e013      	b.n	801748c <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	7b5b      	ldrb	r3, [r3, #13]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d10f      	bne.n	801748c <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 801746c:	693b      	ldr	r3, [r7, #16]
 801746e:	7bda      	ldrb	r2, [r3, #15]
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8017476:	7dbb      	ldrb	r3, [r7, #22]
 8017478:	b298      	uxth	r0, r3
 801747a:	693b      	ldr	r3, [r7, #16]
 801747c:	7c1b      	ldrb	r3, [r3, #16]
 801747e:	897a      	ldrh	r2, [r7, #10]
 8017480:	89b9      	ldrh	r1, [r7, #12]
 8017482:	9300      	str	r3, [sp, #0]
 8017484:	4603      	mov	r3, r0
 8017486:	6878      	ldr	r0, [r7, #4]
 8017488:	f000 fcb3 	bl	8017df2 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 801748c:	7dfa      	ldrb	r2, [r7, #23]
 801748e:	7bfb      	ldrb	r3, [r7, #15]
 8017490:	429a      	cmp	r2, r3
 8017492:	d309      	bcc.n	80174a8 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8017494:	7dfa      	ldrb	r2, [r7, #23]
 8017496:	7bfb      	ldrb	r3, [r7, #15]
 8017498:	1ad3      	subs	r3, r2, r3
 801749a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 801749c:	2300      	movs	r3, #0
 801749e:	757b      	strb	r3, [r7, #21]
    ly++;
 80174a0:	7d3b      	ldrb	r3, [r7, #20]
 80174a2:	3301      	adds	r3, #1
 80174a4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80174a6:	e79d      	b.n	80173e4 <u8g2_font_decode_len+0x2a>
      break;
 80174a8:	bf00      	nop
  }
  lx += cnt;
 80174aa:	7d7a      	ldrb	r2, [r7, #21]
 80174ac:	7dfb      	ldrb	r3, [r7, #23]
 80174ae:	4413      	add	r3, r2
 80174b0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80174b2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80174b6:	693b      	ldr	r3, [r7, #16]
 80174b8:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80174ba:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	725a      	strb	r2, [r3, #9]
  
}
 80174c2:	bf00      	nop
 80174c4:	3718      	adds	r7, #24
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd80      	pop	{r7, pc}

080174ca <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80174ca:	b580      	push	{r7, lr}
 80174cc:	b084      	sub	sp, #16
 80174ce:	af00      	add	r7, sp, #0
 80174d0:	6078      	str	r0, [r7, #4]
 80174d2:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	3360      	adds	r3, #96	; 0x60
 80174d8:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	683a      	ldr	r2, [r7, #0]
 80174de:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	2200      	movs	r2, #0
 80174e4:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80174ec:	4619      	mov	r1, r3
 80174ee:	68f8      	ldr	r0, [r7, #12]
 80174f0:	f7ff fe7f 	bl	80171f2 <u8g2_font_decode_get_unsigned_bits>
 80174f4:	4603      	mov	r3, r0
 80174f6:	b25a      	sxtb	r2, r3
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8017502:	4619      	mov	r1, r3
 8017504:	68f8      	ldr	r0, [r7, #12]
 8017506:	f7ff fe74 	bl	80171f2 <u8g2_font_decode_get_unsigned_bits>
 801750a:	4603      	mov	r3, r0
 801750c:	b25a      	sxtb	r2, r3
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	7b9b      	ldrb	r3, [r3, #14]
 8017520:	2b00      	cmp	r3, #0
 8017522:	bf0c      	ite	eq
 8017524:	2301      	moveq	r3, #1
 8017526:	2300      	movne	r3, #0
 8017528:	b2db      	uxtb	r3, r3
 801752a:	461a      	mov	r2, r3
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	73da      	strb	r2, [r3, #15]
}
 8017530:	bf00      	nop
 8017532:	3710      	adds	r7, #16
 8017534:	46bd      	mov	sp, r7
 8017536:	bd80      	pop	{r7, pc}

08017538 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b08a      	sub	sp, #40	; 0x28
 801753c:	af02      	add	r7, sp, #8
 801753e:	6078      	str	r0, [r7, #4]
 8017540:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	3360      	adds	r3, #96	; 0x60
 8017546:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8017548:	6839      	ldr	r1, [r7, #0]
 801754a:	6878      	ldr	r0, [r7, #4]
 801754c:	f7ff ffbd 	bl	80174ca <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8017556:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 801755e:	4619      	mov	r1, r3
 8017560:	6978      	ldr	r0, [r7, #20]
 8017562:	f7ff fe91 	bl	8017288 <u8g2_font_decode_get_signed_bits>
 8017566:	4603      	mov	r3, r0
 8017568:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8017570:	4619      	mov	r1, r3
 8017572:	6978      	ldr	r0, [r7, #20]
 8017574:	f7ff fe88 	bl	8017288 <u8g2_font_decode_get_signed_bits>
 8017578:	4603      	mov	r3, r0
 801757a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8017582:	4619      	mov	r1, r3
 8017584:	6978      	ldr	r0, [r7, #20]
 8017586:	f7ff fe7f 	bl	8017288 <u8g2_font_decode_get_signed_bits>
 801758a:	4603      	mov	r3, r0
 801758c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8017594:	2b00      	cmp	r3, #0
 8017596:	f340 80d7 	ble.w	8017748 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 801759a:	697b      	ldr	r3, [r7, #20]
 801759c:	8898      	ldrh	r0, [r3, #4]
 801759e:	7cfa      	ldrb	r2, [r7, #19]
 80175a0:	7c7b      	ldrb	r3, [r7, #17]
 80175a2:	4413      	add	r3, r2
 80175a4:	b2db      	uxtb	r3, r3
 80175a6:	425b      	negs	r3, r3
 80175a8:	b2db      	uxtb	r3, r3
 80175aa:	b25a      	sxtb	r2, r3
 80175ac:	697b      	ldr	r3, [r7, #20]
 80175ae:	7c1b      	ldrb	r3, [r3, #16]
 80175b0:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80175b4:	f7ff fec6 	bl	8017344 <u8g2_add_vector_x>
 80175b8:	4603      	mov	r3, r0
 80175ba:	461a      	mov	r2, r3
 80175bc:	697b      	ldr	r3, [r7, #20]
 80175be:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80175c0:	697b      	ldr	r3, [r7, #20]
 80175c2:	88d8      	ldrh	r0, [r3, #6]
 80175c4:	7cfa      	ldrb	r2, [r7, #19]
 80175c6:	7c7b      	ldrb	r3, [r7, #17]
 80175c8:	4413      	add	r3, r2
 80175ca:	b2db      	uxtb	r3, r3
 80175cc:	425b      	negs	r3, r3
 80175ce:	b2db      	uxtb	r3, r3
 80175d0:	b25a      	sxtb	r2, r3
 80175d2:	697b      	ldr	r3, [r7, #20]
 80175d4:	7c1b      	ldrb	r3, [r3, #16]
 80175d6:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80175da:	f7ff fe78 	bl	80172ce <u8g2_add_vector_y>
 80175de:	4603      	mov	r3, r0
 80175e0:	461a      	mov	r2, r3
 80175e2:	697b      	ldr	r3, [r7, #20]
 80175e4:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	889b      	ldrh	r3, [r3, #4]
 80175ea:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80175ec:	697b      	ldr	r3, [r7, #20]
 80175ee:	88db      	ldrh	r3, [r3, #6]
 80175f0:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80175f2:	8bfb      	ldrh	r3, [r7, #30]
 80175f4:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80175f6:	8b7b      	ldrh	r3, [r7, #26]
 80175f8:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80175fa:	697b      	ldr	r3, [r7, #20]
 80175fc:	7c1b      	ldrb	r3, [r3, #16]
 80175fe:	2b03      	cmp	r3, #3
 8017600:	d85a      	bhi.n	80176b8 <u8g2_font_decode_glyph+0x180>
 8017602:	a201      	add	r2, pc, #4	; (adr r2, 8017608 <u8g2_font_decode_glyph+0xd0>)
 8017604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017608:	08017619 	.word	0x08017619
 801760c:	08017635 	.word	0x08017635
 8017610:	0801765d 	.word	0x0801765d
 8017614:	08017691 	.word	0x08017691
      {
	case 0:
	    x1 += decode->glyph_width;
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801761e:	b29a      	uxth	r2, r3
 8017620:	8bbb      	ldrh	r3, [r7, #28]
 8017622:	4413      	add	r3, r2
 8017624:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8017626:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801762a:	b29a      	uxth	r2, r3
 801762c:	8b3b      	ldrh	r3, [r7, #24]
 801762e:	4413      	add	r3, r2
 8017630:	833b      	strh	r3, [r7, #24]
	    break;
 8017632:	e041      	b.n	80176b8 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8017634:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017638:	b29b      	uxth	r3, r3
 801763a:	8bfa      	ldrh	r2, [r7, #30]
 801763c:	1ad3      	subs	r3, r2, r3
 801763e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8017640:	8bfb      	ldrh	r3, [r7, #30]
 8017642:	3301      	adds	r3, #1
 8017644:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8017646:	8bbb      	ldrh	r3, [r7, #28]
 8017648:	3301      	adds	r3, #1
 801764a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 801764c:	697b      	ldr	r3, [r7, #20]
 801764e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8017652:	b29a      	uxth	r2, r3
 8017654:	8b3b      	ldrh	r3, [r7, #24]
 8017656:	4413      	add	r3, r2
 8017658:	833b      	strh	r3, [r7, #24]
	    break;
 801765a:	e02d      	b.n	80176b8 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 801765c:	697b      	ldr	r3, [r7, #20]
 801765e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8017662:	b29b      	uxth	r3, r3
 8017664:	8bfa      	ldrh	r2, [r7, #30]
 8017666:	1ad3      	subs	r3, r2, r3
 8017668:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 801766a:	8bfb      	ldrh	r3, [r7, #30]
 801766c:	3301      	adds	r3, #1
 801766e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8017670:	8bbb      	ldrh	r3, [r7, #28]
 8017672:	3301      	adds	r3, #1
 8017674:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8017676:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801767a:	b29b      	uxth	r3, r3
 801767c:	8b7a      	ldrh	r2, [r7, #26]
 801767e:	1ad3      	subs	r3, r2, r3
 8017680:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8017682:	8b7b      	ldrh	r3, [r7, #26]
 8017684:	3301      	adds	r3, #1
 8017686:	837b      	strh	r3, [r7, #26]
	    y1++;
 8017688:	8b3b      	ldrh	r3, [r7, #24]
 801768a:	3301      	adds	r3, #1
 801768c:	833b      	strh	r3, [r7, #24]
	    break;	  
 801768e:	e013      	b.n	80176b8 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8017690:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017694:	b29a      	uxth	r2, r3
 8017696:	8bbb      	ldrh	r3, [r7, #28]
 8017698:	4413      	add	r3, r2
 801769a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 801769c:	697b      	ldr	r3, [r7, #20]
 801769e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80176a2:	b29b      	uxth	r3, r3
 80176a4:	8b7a      	ldrh	r2, [r7, #26]
 80176a6:	1ad3      	subs	r3, r2, r3
 80176a8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80176aa:	8b7b      	ldrh	r3, [r7, #26]
 80176ac:	3301      	adds	r3, #1
 80176ae:	837b      	strh	r3, [r7, #26]
	    y1++;
 80176b0:	8b3b      	ldrh	r3, [r7, #24]
 80176b2:	3301      	adds	r3, #1
 80176b4:	833b      	strh	r3, [r7, #24]
	    break;	  
 80176b6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80176b8:	8bb8      	ldrh	r0, [r7, #28]
 80176ba:	8b7a      	ldrh	r2, [r7, #26]
 80176bc:	8bf9      	ldrh	r1, [r7, #30]
 80176be:	8b3b      	ldrh	r3, [r7, #24]
 80176c0:	9300      	str	r3, [sp, #0]
 80176c2:	4603      	mov	r3, r0
 80176c4:	6878      	ldr	r0, [r7, #4]
 80176c6:	f000 fd50 	bl	801816a <u8g2_IsIntersection>
 80176ca:	4603      	mov	r3, r0
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d102      	bne.n	80176d6 <u8g2_font_decode_glyph+0x19e>
	return d;
 80176d0:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80176d4:	e03a      	b.n	801774c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80176d6:	697b      	ldr	r3, [r7, #20]
 80176d8:	2200      	movs	r2, #0
 80176da:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80176dc:	697b      	ldr	r3, [r7, #20]
 80176de:	2200      	movs	r2, #0
 80176e0:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80176e8:	4619      	mov	r1, r3
 80176ea:	6978      	ldr	r0, [r7, #20]
 80176ec:	f7ff fd81 	bl	80171f2 <u8g2_font_decode_get_unsigned_bits>
 80176f0:	4603      	mov	r3, r0
 80176f2:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80176fa:	4619      	mov	r1, r3
 80176fc:	6978      	ldr	r0, [r7, #20]
 80176fe:	f7ff fd78 	bl	80171f2 <u8g2_font_decode_get_unsigned_bits>
 8017702:	4603      	mov	r3, r0
 8017704:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8017706:	7bfb      	ldrb	r3, [r7, #15]
 8017708:	2200      	movs	r2, #0
 801770a:	4619      	mov	r1, r3
 801770c:	6878      	ldr	r0, [r7, #4]
 801770e:	f7ff fe54 	bl	80173ba <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8017712:	7bbb      	ldrb	r3, [r7, #14]
 8017714:	2201      	movs	r2, #1
 8017716:	4619      	mov	r1, r3
 8017718:	6878      	ldr	r0, [r7, #4]
 801771a:	f7ff fe4e 	bl	80173ba <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 801771e:	2101      	movs	r1, #1
 8017720:	6978      	ldr	r0, [r7, #20]
 8017722:	f7ff fd66 	bl	80171f2 <u8g2_font_decode_get_unsigned_bits>
 8017726:	4603      	mov	r3, r0
 8017728:	2b00      	cmp	r3, #0
 801772a:	d1ec      	bne.n	8017706 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 801772c:	697b      	ldr	r3, [r7, #20]
 801772e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8017732:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017736:	429a      	cmp	r2, r3
 8017738:	dd00      	ble.n	801773c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 801773a:	e7d2      	b.n	80176e2 <u8g2_font_decode_glyph+0x1aa>
	break;
 801773c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 801773e:	697b      	ldr	r3, [r7, #20]
 8017740:	7b9a      	ldrb	r2, [r3, #14]
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8017748:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 801774c:	4618      	mov	r0, r3
 801774e:	3720      	adds	r7, #32
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}

08017754 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b086      	sub	sp, #24
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	460b      	mov	r3, r1
 801775e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017764:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8017766:	697b      	ldr	r3, [r7, #20]
 8017768:	3317      	adds	r3, #23
 801776a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 801776c:	887b      	ldrh	r3, [r7, #2]
 801776e:	2bff      	cmp	r3, #255	; 0xff
 8017770:	d82a      	bhi.n	80177c8 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8017772:	887b      	ldrh	r3, [r7, #2]
 8017774:	2b60      	cmp	r3, #96	; 0x60
 8017776:	d907      	bls.n	8017788 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801777e:	461a      	mov	r2, r3
 8017780:	697b      	ldr	r3, [r7, #20]
 8017782:	4413      	add	r3, r2
 8017784:	617b      	str	r3, [r7, #20]
 8017786:	e009      	b.n	801779c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8017788:	887b      	ldrh	r3, [r7, #2]
 801778a:	2b40      	cmp	r3, #64	; 0x40
 801778c:	d906      	bls.n	801779c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8017794:	461a      	mov	r2, r3
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	4413      	add	r3, r2
 801779a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 801779c:	697b      	ldr	r3, [r7, #20]
 801779e:	3301      	adds	r3, #1
 80177a0:	781b      	ldrb	r3, [r3, #0]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d04e      	beq.n	8017844 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80177a6:	697b      	ldr	r3, [r7, #20]
 80177a8:	781b      	ldrb	r3, [r3, #0]
 80177aa:	b29b      	uxth	r3, r3
 80177ac:	887a      	ldrh	r2, [r7, #2]
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d102      	bne.n	80177b8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80177b2:	697b      	ldr	r3, [r7, #20]
 80177b4:	3302      	adds	r3, #2
 80177b6:	e049      	b.n	801784c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	3301      	adds	r3, #1
 80177bc:	781b      	ldrb	r3, [r3, #0]
 80177be:	461a      	mov	r2, r3
 80177c0:	697b      	ldr	r3, [r7, #20]
 80177c2:	4413      	add	r3, r2
 80177c4:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80177c6:	e7e9      	b.n	801779c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80177ce:	461a      	mov	r2, r3
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	4413      	add	r3, r2
 80177d4:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80177d6:	697b      	ldr	r3, [r7, #20]
 80177d8:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80177da:	2100      	movs	r1, #0
 80177dc:	6938      	ldr	r0, [r7, #16]
 80177de:	f7ff fc3f 	bl	8017060 <u8g2_font_get_word>
 80177e2:	4603      	mov	r3, r0
 80177e4:	461a      	mov	r2, r3
 80177e6:	697b      	ldr	r3, [r7, #20]
 80177e8:	4413      	add	r3, r2
 80177ea:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80177ec:	2102      	movs	r1, #2
 80177ee:	6938      	ldr	r0, [r7, #16]
 80177f0:	f7ff fc36 	bl	8017060 <u8g2_font_get_word>
 80177f4:	4603      	mov	r3, r0
 80177f6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80177f8:	693b      	ldr	r3, [r7, #16]
 80177fa:	3304      	adds	r3, #4
 80177fc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80177fe:	89fa      	ldrh	r2, [r7, #14]
 8017800:	887b      	ldrh	r3, [r7, #2]
 8017802:	429a      	cmp	r2, r3
 8017804:	d3e9      	bcc.n	80177da <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8017806:	697b      	ldr	r3, [r7, #20]
 8017808:	781b      	ldrb	r3, [r3, #0]
 801780a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 801780c:	89fb      	ldrh	r3, [r7, #14]
 801780e:	021b      	lsls	r3, r3, #8
 8017810:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	3301      	adds	r3, #1
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	b29a      	uxth	r2, r3
 801781a:	89fb      	ldrh	r3, [r7, #14]
 801781c:	4313      	orrs	r3, r2
 801781e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8017820:	89fb      	ldrh	r3, [r7, #14]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d010      	beq.n	8017848 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8017826:	89fa      	ldrh	r2, [r7, #14]
 8017828:	887b      	ldrh	r3, [r7, #2]
 801782a:	429a      	cmp	r2, r3
 801782c:	d102      	bne.n	8017834 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 801782e:	697b      	ldr	r3, [r7, #20]
 8017830:	3303      	adds	r3, #3
 8017832:	e00b      	b.n	801784c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8017834:	697b      	ldr	r3, [r7, #20]
 8017836:	3302      	adds	r3, #2
 8017838:	781b      	ldrb	r3, [r3, #0]
 801783a:	461a      	mov	r2, r3
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	4413      	add	r3, r2
 8017840:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8017842:	e7e0      	b.n	8017806 <u8g2_font_get_glyph_data+0xb2>
	break;
 8017844:	bf00      	nop
 8017846:	e000      	b.n	801784a <u8g2_font_get_glyph_data+0xf6>
	break;
 8017848:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 801784a:	2300      	movs	r3, #0
}
 801784c:	4618      	mov	r0, r3
 801784e:	3718      	adds	r7, #24
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}

08017854 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b086      	sub	sp, #24
 8017858:	af00      	add	r7, sp, #0
 801785a:	60f8      	str	r0, [r7, #12]
 801785c:	4608      	mov	r0, r1
 801785e:	4611      	mov	r1, r2
 8017860:	461a      	mov	r2, r3
 8017862:	4603      	mov	r3, r0
 8017864:	817b      	strh	r3, [r7, #10]
 8017866:	460b      	mov	r3, r1
 8017868:	813b      	strh	r3, [r7, #8]
 801786a:	4613      	mov	r3, r2
 801786c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 801786e:	2300      	movs	r3, #0
 8017870:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	897a      	ldrh	r2, [r7, #10]
 8017876:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	893a      	ldrh	r2, [r7, #8]
 801787e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8017882:	88fb      	ldrh	r3, [r7, #6]
 8017884:	4619      	mov	r1, r3
 8017886:	68f8      	ldr	r0, [r7, #12]
 8017888:	f7ff ff64 	bl	8017754 <u8g2_font_get_glyph_data>
 801788c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 801788e:	693b      	ldr	r3, [r7, #16]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d005      	beq.n	80178a0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8017894:	6939      	ldr	r1, [r7, #16]
 8017896:	68f8      	ldr	r0, [r7, #12]
 8017898:	f7ff fe4e 	bl	8017538 <u8g2_font_decode_glyph>
 801789c:	4603      	mov	r3, r0
 801789e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80178a0:	8afb      	ldrh	r3, [r7, #22]
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3718      	adds	r7, #24
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}

080178aa <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 80178aa:	b580      	push	{r7, lr}
 80178ac:	b084      	sub	sp, #16
 80178ae:	af00      	add	r7, sp, #0
 80178b0:	6078      	str	r0, [r7, #4]
 80178b2:	460b      	mov	r3, r1
 80178b4:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 80178b6:	887b      	ldrh	r3, [r7, #2]
 80178b8:	4619      	mov	r1, r3
 80178ba:	6878      	ldr	r0, [r7, #4]
 80178bc:	f7ff ff4a 	bl	8017754 <u8g2_font_get_glyph_data>
 80178c0:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d101      	bne.n	80178cc <u8g2_GetGlyphWidth+0x22>
    return 0; 
 80178c8:	2300      	movs	r3, #0
 80178ca:	e027      	b.n	801791c <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 80178cc:	68f9      	ldr	r1, [r7, #12]
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	f7ff fdfb 	bl	80174ca <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80178e0:	4619      	mov	r1, r3
 80178e2:	4610      	mov	r0, r2
 80178e4:	f7ff fcd0 	bl	8017288 <u8g2_font_decode_get_signed_bits>
 80178e8:	4603      	mov	r3, r0
 80178ea:	461a      	mov	r2, r3
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80178fe:	4619      	mov	r1, r3
 8017900:	4610      	mov	r0, r2
 8017902:	f7ff fcc1 	bl	8017288 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	f103 0260 	add.w	r2, r3, #96	; 0x60
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8017912:	4619      	mov	r1, r3
 8017914:	4610      	mov	r0, r2
 8017916:	f7ff fcb7 	bl	8017288 <u8g2_font_decode_get_signed_bits>
 801791a:	4603      	mov	r3, r0
}
 801791c:	4618      	mov	r0, r3
 801791e:	3710      	adds	r7, #16
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}

08017924 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b084      	sub	sp, #16
 8017928:	af00      	add	r7, sp, #0
 801792a:	60f8      	str	r0, [r7, #12]
 801792c:	4608      	mov	r0, r1
 801792e:	4611      	mov	r1, r2
 8017930:	461a      	mov	r2, r3
 8017932:	4603      	mov	r3, r0
 8017934:	817b      	strh	r3, [r7, #10]
 8017936:	460b      	mov	r3, r1
 8017938:	813b      	strh	r3, [r7, #8]
 801793a:	4613      	mov	r3, r2
 801793c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8017944:	2b03      	cmp	r3, #3
 8017946:	d833      	bhi.n	80179b0 <u8g2_DrawGlyph+0x8c>
 8017948:	a201      	add	r2, pc, #4	; (adr r2, 8017950 <u8g2_DrawGlyph+0x2c>)
 801794a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801794e:	bf00      	nop
 8017950:	08017961 	.word	0x08017961
 8017954:	08017975 	.word	0x08017975
 8017958:	08017989 	.word	0x08017989
 801795c:	0801799d 	.word	0x0801799d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017964:	68f8      	ldr	r0, [r7, #12]
 8017966:	4798      	blx	r3
 8017968:	4603      	mov	r3, r0
 801796a:	461a      	mov	r2, r3
 801796c:	893b      	ldrh	r3, [r7, #8]
 801796e:	4413      	add	r3, r2
 8017970:	813b      	strh	r3, [r7, #8]
      break;
 8017972:	e01d      	b.n	80179b0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017978:	68f8      	ldr	r0, [r7, #12]
 801797a:	4798      	blx	r3
 801797c:	4603      	mov	r3, r0
 801797e:	461a      	mov	r2, r3
 8017980:	897b      	ldrh	r3, [r7, #10]
 8017982:	1a9b      	subs	r3, r3, r2
 8017984:	817b      	strh	r3, [r7, #10]
      break;
 8017986:	e013      	b.n	80179b0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801798c:	68f8      	ldr	r0, [r7, #12]
 801798e:	4798      	blx	r3
 8017990:	4603      	mov	r3, r0
 8017992:	461a      	mov	r2, r3
 8017994:	893b      	ldrh	r3, [r7, #8]
 8017996:	1a9b      	subs	r3, r3, r2
 8017998:	813b      	strh	r3, [r7, #8]
      break;
 801799a:	e009      	b.n	80179b0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179a0:	68f8      	ldr	r0, [r7, #12]
 80179a2:	4798      	blx	r3
 80179a4:	4603      	mov	r3, r0
 80179a6:	461a      	mov	r2, r3
 80179a8:	897b      	ldrh	r3, [r7, #10]
 80179aa:	4413      	add	r3, r2
 80179ac:	817b      	strh	r3, [r7, #10]
      break;
 80179ae:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80179b0:	88fb      	ldrh	r3, [r7, #6]
 80179b2:	893a      	ldrh	r2, [r7, #8]
 80179b4:	8979      	ldrh	r1, [r7, #10]
 80179b6:	68f8      	ldr	r0, [r7, #12]
 80179b8:	f7ff ff4c 	bl	8017854 <u8g2_font_draw_glyph>
 80179bc:	4603      	mov	r3, r0
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3710      	adds	r7, #16
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}
 80179c6:	bf00      	nop

080179c8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b086      	sub	sp, #24
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	60f8      	str	r0, [r7, #12]
 80179d0:	607b      	str	r3, [r7, #4]
 80179d2:	460b      	mov	r3, r1
 80179d4:	817b      	strh	r3, [r7, #10]
 80179d6:	4613      	mov	r3, r2
 80179d8:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80179da:	68f8      	ldr	r0, [r7, #12]
 80179dc:	f001 f89e 	bl	8018b1c <u8x8_utf8_init>
  sum = 0;
 80179e0:	2300      	movs	r3, #0
 80179e2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	685b      	ldr	r3, [r3, #4]
 80179e8:	687a      	ldr	r2, [r7, #4]
 80179ea:	7812      	ldrb	r2, [r2, #0]
 80179ec:	4611      	mov	r1, r2
 80179ee:	68f8      	ldr	r0, [r7, #12]
 80179f0:	4798      	blx	r3
 80179f2:	4603      	mov	r3, r0
 80179f4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80179f6:	8abb      	ldrh	r3, [r7, #20]
 80179f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80179fc:	4293      	cmp	r3, r2
 80179fe:	d038      	beq.n	8017a72 <u8g2_draw_string+0xaa>
      break;
    str++;
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	3301      	adds	r3, #1
 8017a04:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8017a06:	8abb      	ldrh	r3, [r7, #20]
 8017a08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017a0c:	4293      	cmp	r3, r2
 8017a0e:	d0e9      	beq.n	80179e4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8017a10:	8abb      	ldrh	r3, [r7, #20]
 8017a12:	893a      	ldrh	r2, [r7, #8]
 8017a14:	8979      	ldrh	r1, [r7, #10]
 8017a16:	68f8      	ldr	r0, [r7, #12]
 8017a18:	f7ff ff84 	bl	8017924 <u8g2_DrawGlyph>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8017a26:	2b03      	cmp	r3, #3
 8017a28:	d81e      	bhi.n	8017a68 <u8g2_draw_string+0xa0>
 8017a2a:	a201      	add	r2, pc, #4	; (adr r2, 8017a30 <u8g2_draw_string+0x68>)
 8017a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a30:	08017a41 	.word	0x08017a41
 8017a34:	08017a4b 	.word	0x08017a4b
 8017a38:	08017a55 	.word	0x08017a55
 8017a3c:	08017a5f 	.word	0x08017a5f
      {
	case 0:
	  x += delta;
 8017a40:	897a      	ldrh	r2, [r7, #10]
 8017a42:	8a7b      	ldrh	r3, [r7, #18]
 8017a44:	4413      	add	r3, r2
 8017a46:	817b      	strh	r3, [r7, #10]
	  break;
 8017a48:	e00e      	b.n	8017a68 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8017a4a:	893a      	ldrh	r2, [r7, #8]
 8017a4c:	8a7b      	ldrh	r3, [r7, #18]
 8017a4e:	4413      	add	r3, r2
 8017a50:	813b      	strh	r3, [r7, #8]
	  break;
 8017a52:	e009      	b.n	8017a68 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8017a54:	897a      	ldrh	r2, [r7, #10]
 8017a56:	8a7b      	ldrh	r3, [r7, #18]
 8017a58:	1ad3      	subs	r3, r2, r3
 8017a5a:	817b      	strh	r3, [r7, #10]
	  break;
 8017a5c:	e004      	b.n	8017a68 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8017a5e:	893a      	ldrh	r2, [r7, #8]
 8017a60:	8a7b      	ldrh	r3, [r7, #18]
 8017a62:	1ad3      	subs	r3, r2, r3
 8017a64:	813b      	strh	r3, [r7, #8]
	  break;
 8017a66:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8017a68:	8afa      	ldrh	r2, [r7, #22]
 8017a6a:	8a7b      	ldrh	r3, [r7, #18]
 8017a6c:	4413      	add	r3, r2
 8017a6e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8017a70:	e7b8      	b.n	80179e4 <u8g2_draw_string+0x1c>
      break;
 8017a72:	bf00      	nop
    }
  }
  return sum;
 8017a74:	8afb      	ldrh	r3, [r7, #22]
}
 8017a76:	4618      	mov	r0, r3
 8017a78:	3718      	adds	r7, #24
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd80      	pop	{r7, pc}
 8017a7e:	bf00      	nop

08017a80 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b084      	sub	sp, #16
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	60f8      	str	r0, [r7, #12]
 8017a88:	607b      	str	r3, [r7, #4]
 8017a8a:	460b      	mov	r3, r1
 8017a8c:	817b      	strh	r3, [r7, #10]
 8017a8e:	4613      	mov	r3, r2
 8017a90:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	4a06      	ldr	r2, [pc, #24]	; (8017ab0 <u8g2_DrawStr+0x30>)
 8017a96:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8017a98:	893a      	ldrh	r2, [r7, #8]
 8017a9a:	8979      	ldrh	r1, [r7, #10]
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	68f8      	ldr	r0, [r7, #12]
 8017aa0:	f7ff ff92 	bl	80179c8 <u8g2_draw_string>
 8017aa4:	4603      	mov	r3, r0
}
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	3710      	adds	r7, #16
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}
 8017aae:	bf00      	nop
 8017ab0:	08018b39 	.word	0x08018b39

08017ab4 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b084      	sub	sp, #16
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	60f8      	str	r0, [r7, #12]
 8017abc:	607b      	str	r3, [r7, #4]
 8017abe:	460b      	mov	r3, r1
 8017ac0:	817b      	strh	r3, [r7, #10]
 8017ac2:	4613      	mov	r3, r2
 8017ac4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	4a06      	ldr	r2, [pc, #24]	; (8017ae4 <u8g2_DrawUTF8+0x30>)
 8017aca:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8017acc:	893a      	ldrh	r2, [r7, #8]
 8017ace:	8979      	ldrh	r1, [r7, #10]
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	68f8      	ldr	r0, [r7, #12]
 8017ad4:	f7ff ff78 	bl	80179c8 <u8g2_draw_string>
 8017ad8:	4603      	mov	r3, r0
}
 8017ada:	4618      	mov	r0, r3
 8017adc:	3710      	adds	r7, #16
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}
 8017ae2:	bf00      	nop
 8017ae4:	08018b67 	.word	0x08018b67

08017ae8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8017ae8:	b480      	push	{r7}
 8017aea:	b083      	sub	sp, #12
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d05d      	beq.n	8017bb4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d04d      	beq.n	8017bb6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8017b20:	2b01      	cmp	r3, #1
 8017b22:	d11c      	bne.n	8017b5e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8017b30:	429a      	cmp	r2, r3
 8017b32:	da05      	bge.n	8017b40 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8017b4c:	429a      	cmp	r2, r3
 8017b4e:	dd32      	ble.n	8017bb6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8017b5c:	e02b      	b.n	8017bb6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8017b64:	461a      	mov	r2, r3
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8017b6c:	4619      	mov	r1, r3
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8017b74:	440b      	add	r3, r1
 8017b76:	429a      	cmp	r2, r3
 8017b78:	da0d      	bge.n	8017b96 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8017b80:	b2da      	uxtb	r2, r3
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8017b88:	b2db      	uxtb	r3, r3
 8017b8a:	4413      	add	r3, r2
 8017b8c:	b2db      	uxtb	r3, r3
 8017b8e:	b25a      	sxtb	r2, r3
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8017ba2:	429a      	cmp	r2, r3
 8017ba4:	dd07      	ble.n	8017bb6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8017bb2:	e000      	b.n	8017bb6 <u8g2_UpdateRefHeight+0xce>
    return;
 8017bb4:	bf00      	nop
  }  
}
 8017bb6:	370c      	adds	r7, #12
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bbe:	4770      	bx	lr

08017bc0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8017bc0:	b480      	push	{r7}
 8017bc2:	b083      	sub	sp, #12
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
  return 0;
 8017bc8:	2300      	movs	r3, #0
}
 8017bca:	4618      	mov	r0, r3
 8017bcc:	370c      	adds	r7, #12
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd4:	4770      	bx	lr
	...

08017bd8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8017bd8:	b480      	push	{r7}
 8017bda:	b083      	sub	sp, #12
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	4a04      	ldr	r2, [pc, #16]	; (8017bf4 <u8g2_SetFontPosBaseline+0x1c>)
 8017be4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8017be6:	bf00      	nop
 8017be8:	370c      	adds	r7, #12
 8017bea:	46bd      	mov	sp, r7
 8017bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf0:	4770      	bx	lr
 8017bf2:	bf00      	nop
 8017bf4:	08017bc1 	.word	0x08017bc1

08017bf8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b082      	sub	sp, #8
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
 8017c00:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c06:	683a      	ldr	r2, [r7, #0]
 8017c08:	429a      	cmp	r2, r3
 8017c0a:	d00b      	beq.n	8017c24 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	683a      	ldr	r2, [r7, #0]
 8017c10:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	3374      	adds	r3, #116	; 0x74
 8017c16:	6839      	ldr	r1, [r7, #0]
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f7ff fa41 	bl	80170a0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8017c1e:	6878      	ldr	r0, [r7, #4]
 8017c20:	f7ff ff62 	bl	8017ae8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8017c24:	bf00      	nop
 8017c26:	3708      	adds	r7, #8
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}

08017c2c <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b084      	sub	sp, #16
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
 8017c34:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	2200      	movs	r2, #0
 8017c3a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8017c3e:	6878      	ldr	r0, [r7, #4]
 8017c40:	f000 ff6c 	bl	8018b1c <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8017c44:	2300      	movs	r3, #0
 8017c46:	81fb      	strh	r3, [r7, #14]
  dx = 0;
 8017c48:	2300      	movs	r3, #0
 8017c4a:	81bb      	strh	r3, [r7, #12]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	685b      	ldr	r3, [r3, #4]
 8017c50:	683a      	ldr	r2, [r7, #0]
 8017c52:	7812      	ldrb	r2, [r2, #0]
 8017c54:	4611      	mov	r1, r2
 8017c56:	6878      	ldr	r0, [r7, #4]
 8017c58:	4798      	blx	r3
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	817b      	strh	r3, [r7, #10]
    if ( e == 0x0ffff )
 8017c5e:	897b      	ldrh	r3, [r7, #10]
 8017c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c64:	4293      	cmp	r3, r2
 8017c66:	d013      	beq.n	8017c90 <u8g2_string_width+0x64>
      break;
    str++;
 8017c68:	683b      	ldr	r3, [r7, #0]
 8017c6a:	3301      	adds	r3, #1
 8017c6c:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8017c6e:	897b      	ldrh	r3, [r7, #10]
 8017c70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017c74:	4293      	cmp	r3, r2
 8017c76:	d0e9      	beq.n	8017c4c <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8017c78:	897b      	ldrh	r3, [r7, #10]
 8017c7a:	4619      	mov	r1, r3
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f7ff fe14 	bl	80178aa <u8g2_GetGlyphWidth>
 8017c82:	4603      	mov	r3, r0
 8017c84:	81bb      	strh	r3, [r7, #12]
      w += dx;
 8017c86:	89fa      	ldrh	r2, [r7, #14]
 8017c88:	89bb      	ldrh	r3, [r7, #12]
 8017c8a:	4413      	add	r3, r2
 8017c8c:	81fb      	strh	r3, [r7, #14]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8017c8e:	e7dd      	b.n	8017c4c <u8g2_string_width+0x20>
      break;
 8017c90:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d011      	beq.n	8017cc0 <u8g2_string_width+0x94>
  {
    w -= dx;
 8017c9c:	89fa      	ldrh	r2, [r7, #14]
 8017c9e:	89bb      	ldrh	r3, [r7, #12]
 8017ca0:	1ad3      	subs	r3, r2, r3
 8017ca2:	81fb      	strh	r3, [r7, #14]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8017caa:	b29a      	uxth	r2, r3
 8017cac:	89fb      	ldrh	r3, [r7, #14]
 8017cae:	4413      	add	r3, r2
 8017cb0:	81fb      	strh	r3, [r7, #14]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8017cb8:	b29a      	uxth	r2, r3
 8017cba:	89fb      	ldrh	r3, [r7, #14]
 8017cbc:	4413      	add	r3, r2
 8017cbe:	81fb      	strh	r3, [r7, #14]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8017cc0:	89fb      	ldrh	r3, [r7, #14]
}
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	3710      	adds	r7, #16
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	bd80      	pop	{r7, pc}
	...

08017ccc <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b082      	sub	sp, #8
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
 8017cd4:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	4a05      	ldr	r2, [pc, #20]	; (8017cf0 <u8g2_GetUTF8Width+0x24>)
 8017cda:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 8017cdc:	6839      	ldr	r1, [r7, #0]
 8017cde:	6878      	ldr	r0, [r7, #4]
 8017ce0:	f7ff ffa4 	bl	8017c2c <u8g2_string_width>
 8017ce4:	4603      	mov	r3, r0
}
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	3708      	adds	r7, #8
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}
 8017cee:	bf00      	nop
 8017cf0:	08018b67 	.word	0x08018b67

08017cf4 <u8g2_SetFontDirection>:



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8017cf4:	b480      	push	{r7}
 8017cf6:	b083      	sub	sp, #12
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
 8017cfc:	460b      	mov	r3, r1
 8017cfe:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	78fa      	ldrb	r2, [r7, #3]
 8017d04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8017d08:	bf00      	nop
 8017d0a:	370c      	adds	r7, #12
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d12:	4770      	bx	lr

08017d14 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8017d14:	b480      	push	{r7}
 8017d16:	b087      	sub	sp, #28
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	60f8      	str	r0, [r7, #12]
 8017d1c:	60b9      	str	r1, [r7, #8]
 8017d1e:	4611      	mov	r1, r2
 8017d20:	461a      	mov	r2, r3
 8017d22:	460b      	mov	r3, r1
 8017d24:	80fb      	strh	r3, [r7, #6]
 8017d26:	4613      	mov	r3, r2
 8017d28:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	881b      	ldrh	r3, [r3, #0]
 8017d2e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8017d30:	8afb      	ldrh	r3, [r7, #22]
 8017d32:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8017d34:	68bb      	ldr	r3, [r7, #8]
 8017d36:	881a      	ldrh	r2, [r3, #0]
 8017d38:	8abb      	ldrh	r3, [r7, #20]
 8017d3a:	4413      	add	r3, r2
 8017d3c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8017d3e:	8afa      	ldrh	r2, [r7, #22]
 8017d40:	8abb      	ldrh	r3, [r7, #20]
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d90b      	bls.n	8017d5e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8017d46:	8afa      	ldrh	r2, [r7, #22]
 8017d48:	88bb      	ldrh	r3, [r7, #4]
 8017d4a:	429a      	cmp	r2, r3
 8017d4c:	d205      	bcs.n	8017d5a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8017d4e:	88bb      	ldrh	r3, [r7, #4]
 8017d50:	82bb      	strh	r3, [r7, #20]
      b--;
 8017d52:	8abb      	ldrh	r3, [r7, #20]
 8017d54:	3b01      	subs	r3, #1
 8017d56:	82bb      	strh	r3, [r7, #20]
 8017d58:	e001      	b.n	8017d5e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8017d5a:	88fb      	ldrh	r3, [r7, #6]
 8017d5c:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8017d5e:	8afa      	ldrh	r2, [r7, #22]
 8017d60:	88bb      	ldrh	r3, [r7, #4]
 8017d62:	429a      	cmp	r2, r3
 8017d64:	d301      	bcc.n	8017d6a <u8g2_clip_intersection2+0x56>
    return 0;
 8017d66:	2300      	movs	r3, #0
 8017d68:	e01c      	b.n	8017da4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8017d6a:	8aba      	ldrh	r2, [r7, #20]
 8017d6c:	88fb      	ldrh	r3, [r7, #6]
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	d801      	bhi.n	8017d76 <u8g2_clip_intersection2+0x62>
    return 0;
 8017d72:	2300      	movs	r3, #0
 8017d74:	e016      	b.n	8017da4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8017d76:	8afa      	ldrh	r2, [r7, #22]
 8017d78:	88fb      	ldrh	r3, [r7, #6]
 8017d7a:	429a      	cmp	r2, r3
 8017d7c:	d201      	bcs.n	8017d82 <u8g2_clip_intersection2+0x6e>
    a = c;
 8017d7e:	88fb      	ldrh	r3, [r7, #6]
 8017d80:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8017d82:	8aba      	ldrh	r2, [r7, #20]
 8017d84:	88bb      	ldrh	r3, [r7, #4]
 8017d86:	429a      	cmp	r2, r3
 8017d88:	d901      	bls.n	8017d8e <u8g2_clip_intersection2+0x7a>
    b = d;
 8017d8a:	88bb      	ldrh	r3, [r7, #4]
 8017d8c:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	8afa      	ldrh	r2, [r7, #22]
 8017d92:	801a      	strh	r2, [r3, #0]
  b -= a;
 8017d94:	8aba      	ldrh	r2, [r7, #20]
 8017d96:	8afb      	ldrh	r3, [r7, #22]
 8017d98:	1ad3      	subs	r3, r2, r3
 8017d9a:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8017d9c:	68bb      	ldr	r3, [r7, #8]
 8017d9e:	8aba      	ldrh	r2, [r7, #20]
 8017da0:	801a      	strh	r2, [r3, #0]
  return 1;
 8017da2:	2301      	movs	r3, #1
}
 8017da4:	4618      	mov	r0, r3
 8017da6:	371c      	adds	r7, #28
 8017da8:	46bd      	mov	sp, r7
 8017daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dae:	4770      	bx	lr

08017db0 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8017db0:	b590      	push	{r4, r7, lr}
 8017db2:	b087      	sub	sp, #28
 8017db4:	af02      	add	r7, sp, #8
 8017db6:	60f8      	str	r0, [r7, #12]
 8017db8:	4608      	mov	r0, r1
 8017dba:	4611      	mov	r1, r2
 8017dbc:	461a      	mov	r2, r3
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	817b      	strh	r3, [r7, #10]
 8017dc2:	460b      	mov	r3, r1
 8017dc4:	813b      	strh	r3, [r7, #8]
 8017dc6:	4613      	mov	r3, r2
 8017dc8:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017dce:	893a      	ldrh	r2, [r7, #8]
 8017dd0:	1ad3      	subs	r3, r2, r3
 8017dd2:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8017dd8:	88f8      	ldrh	r0, [r7, #6]
 8017dda:	893a      	ldrh	r2, [r7, #8]
 8017ddc:	8979      	ldrh	r1, [r7, #10]
 8017dde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017de2:	9300      	str	r3, [sp, #0]
 8017de4:	4603      	mov	r3, r0
 8017de6:	68f8      	ldr	r0, [r7, #12]
 8017de8:	47a0      	blx	r4
}
 8017dea:	bf00      	nop
 8017dec:	3714      	adds	r7, #20
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bd90      	pop	{r4, r7, pc}

08017df2 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8017df2:	b590      	push	{r4, r7, lr}
 8017df4:	b087      	sub	sp, #28
 8017df6:	af02      	add	r7, sp, #8
 8017df8:	60f8      	str	r0, [r7, #12]
 8017dfa:	4608      	mov	r0, r1
 8017dfc:	4611      	mov	r1, r2
 8017dfe:	461a      	mov	r2, r3
 8017e00:	4603      	mov	r3, r0
 8017e02:	817b      	strh	r3, [r7, #10]
 8017e04:	460b      	mov	r3, r1
 8017e06:	813b      	strh	r3, [r7, #8]
 8017e08:	4613      	mov	r3, r2
 8017e0a:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d075      	beq.n	8017f02 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8017e16:	88fb      	ldrh	r3, [r7, #6]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d072      	beq.n	8017f02 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8017e1c:	88fb      	ldrh	r3, [r7, #6]
 8017e1e:	2b01      	cmp	r3, #1
 8017e20:	d91a      	bls.n	8017e58 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8017e22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017e26:	2b02      	cmp	r3, #2
 8017e28:	d109      	bne.n	8017e3e <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8017e2a:	897a      	ldrh	r2, [r7, #10]
 8017e2c:	88fb      	ldrh	r3, [r7, #6]
 8017e2e:	1ad3      	subs	r3, r2, r3
 8017e30:	b29b      	uxth	r3, r3
 8017e32:	817b      	strh	r3, [r7, #10]
	  x++;
 8017e34:	897b      	ldrh	r3, [r7, #10]
 8017e36:	3301      	adds	r3, #1
 8017e38:	b29b      	uxth	r3, r3
 8017e3a:	817b      	strh	r3, [r7, #10]
 8017e3c:	e00c      	b.n	8017e58 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8017e3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017e42:	2b03      	cmp	r3, #3
 8017e44:	d108      	bne.n	8017e58 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8017e46:	893a      	ldrh	r2, [r7, #8]
 8017e48:	88fb      	ldrh	r3, [r7, #6]
 8017e4a:	1ad3      	subs	r3, r2, r3
 8017e4c:	b29b      	uxth	r3, r3
 8017e4e:	813b      	strh	r3, [r7, #8]
	  y++;
 8017e50:	893b      	ldrh	r3, [r7, #8]
 8017e52:	3301      	adds	r3, #1
 8017e54:	b29b      	uxth	r3, r3
 8017e56:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8017e58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017e5c:	f003 0301 	and.w	r3, r3, #1
 8017e60:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8017e64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d11a      	bne.n	8017ea2 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8017e72:	893b      	ldrh	r3, [r7, #8]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d83b      	bhi.n	8017ef0 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8017e7e:	893b      	ldrh	r3, [r7, #8]
 8017e80:	429a      	cmp	r2, r3
 8017e82:	d937      	bls.n	8017ef4 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017e90:	1db9      	adds	r1, r7, #6
 8017e92:	f107 000a 	add.w	r0, r7, #10
 8017e96:	f7ff ff3d 	bl	8017d14 <u8g2_clip_intersection2>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d11a      	bne.n	8017ed6 <u8g2_DrawHVLine+0xe4>
	  return;
 8017ea0:	e02f      	b.n	8017f02 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017ea8:	897b      	ldrh	r3, [r7, #10]
 8017eaa:	429a      	cmp	r2, r3
 8017eac:	d824      	bhi.n	8017ef8 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017eb4:	897b      	ldrh	r3, [r7, #10]
 8017eb6:	429a      	cmp	r2, r3
 8017eb8:	d920      	bls.n	8017efc <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017ec6:	1db9      	adds	r1, r7, #6
 8017ec8:	f107 0008 	add.w	r0, r7, #8
 8017ecc:	f7ff ff22 	bl	8017d14 <u8g2_clip_intersection2>
 8017ed0:	4603      	mov	r3, r0
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d014      	beq.n	8017f00 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017eda:	689c      	ldr	r4, [r3, #8]
 8017edc:	8979      	ldrh	r1, [r7, #10]
 8017ede:	893a      	ldrh	r2, [r7, #8]
 8017ee0:	88f8      	ldrh	r0, [r7, #6]
 8017ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ee6:	9300      	str	r3, [sp, #0]
 8017ee8:	4603      	mov	r3, r0
 8017eea:	68f8      	ldr	r0, [r7, #12]
 8017eec:	47a0      	blx	r4
 8017eee:	e008      	b.n	8017f02 <u8g2_DrawHVLine+0x110>
	  return;
 8017ef0:	bf00      	nop
 8017ef2:	e006      	b.n	8017f02 <u8g2_DrawHVLine+0x110>
	  return;
 8017ef4:	bf00      	nop
 8017ef6:	e004      	b.n	8017f02 <u8g2_DrawHVLine+0x110>
	  return;
 8017ef8:	bf00      	nop
 8017efa:	e002      	b.n	8017f02 <u8g2_DrawHVLine+0x110>
	  return;
 8017efc:	bf00      	nop
 8017efe:	e000      	b.n	8017f02 <u8g2_DrawHVLine+0x110>
	  return;
 8017f00:	bf00      	nop
    }
}
 8017f02:	3714      	adds	r7, #20
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd90      	pop	{r4, r7, pc}

08017f08 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b086      	sub	sp, #24
 8017f0c:	af02      	add	r7, sp, #8
 8017f0e:	60f8      	str	r0, [r7, #12]
 8017f10:	4608      	mov	r0, r1
 8017f12:	4611      	mov	r1, r2
 8017f14:	461a      	mov	r2, r3
 8017f16:	4603      	mov	r3, r0
 8017f18:	817b      	strh	r3, [r7, #10]
 8017f1a:	460b      	mov	r3, r1
 8017f1c:	813b      	strh	r3, [r7, #8]
 8017f1e:	4613      	mov	r3, r2
 8017f20:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8017f22:	88fb      	ldrh	r3, [r7, #6]
 8017f24:	893a      	ldrh	r2, [r7, #8]
 8017f26:	8979      	ldrh	r1, [r7, #10]
 8017f28:	2000      	movs	r0, #0
 8017f2a:	9000      	str	r0, [sp, #0]
 8017f2c:	68f8      	ldr	r0, [r7, #12]
 8017f2e:	f7ff ff60 	bl	8017df2 <u8g2_DrawHVLine>
}
 8017f32:	bf00      	nop
 8017f34:	3710      	adds	r7, #16
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd80      	pop	{r7, pc}

08017f3a <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8017f3a:	b580      	push	{r7, lr}
 8017f3c:	b086      	sub	sp, #24
 8017f3e:	af02      	add	r7, sp, #8
 8017f40:	60f8      	str	r0, [r7, #12]
 8017f42:	4608      	mov	r0, r1
 8017f44:	4611      	mov	r1, r2
 8017f46:	461a      	mov	r2, r3
 8017f48:	4603      	mov	r3, r0
 8017f4a:	817b      	strh	r3, [r7, #10]
 8017f4c:	460b      	mov	r3, r1
 8017f4e:	813b      	strh	r3, [r7, #8]
 8017f50:	4613      	mov	r3, r2
 8017f52:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8017f54:	88fb      	ldrh	r3, [r7, #6]
 8017f56:	893a      	ldrh	r2, [r7, #8]
 8017f58:	8979      	ldrh	r1, [r7, #10]
 8017f5a:	2001      	movs	r0, #1
 8017f5c:	9000      	str	r0, [sp, #0]
 8017f5e:	68f8      	ldr	r0, [r7, #12]
 8017f60:	f7ff ff47 	bl	8017df2 <u8g2_DrawHVLine>
}
 8017f64:	bf00      	nop
 8017f66:	3710      	adds	r7, #16
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}

08017f6c <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8017f6c:	b480      	push	{r7}
 8017f6e:	b083      	sub	sp, #12
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
 8017f74:	460b      	mov	r3, r1
 8017f76:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	78fa      	ldrb	r2, [r7, #3]
 8017f7c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8017f80:	78fb      	ldrb	r3, [r7, #3]
 8017f82:	2b02      	cmp	r3, #2
 8017f84:	d903      	bls.n	8017f8e <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	2201      	movs	r2, #1
 8017f8a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8017f8e:	bf00      	nop
 8017f90:	370c      	adds	r7, #12
 8017f92:	46bd      	mov	sp, r7
 8017f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f98:	4770      	bx	lr
	...

08017f9c <u8g2_UserInterfaceInputValue>:
    0: value is not changed (HOME/Break Button pressed)
    1: value has been updated
*/

uint8_t u8g2_UserInterfaceInputValue(u8g2_t *u8g2, const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post)
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b08a      	sub	sp, #40	; 0x28
 8017fa0:	af02      	add	r7, sp, #8
 8017fa2:	60f8      	str	r0, [r7, #12]
 8017fa4:	60b9      	str	r1, [r7, #8]
 8017fa6:	607a      	str	r2, [r7, #4]
 8017fa8:	603b      	str	r3, [r7, #0]
  u8g2_uint_t pixel_height;
  u8g2_uint_t  y, yy;
  u8g2_uint_t  pixel_width;
  u8g2_uint_t  x, xx;
  
  uint8_t local_value = *value;
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	781b      	ldrb	r3, [r3, #0]
 8017fae:	76fb      	strb	r3, [r7, #27]
  //uint8_t r; /* not used ??? */
  uint8_t event;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8017fb0:	2100      	movs	r1, #0
 8017fb2:	68f8      	ldr	r0, [r7, #12]
 8017fb4:	f7ff fe9e 	bl	8017cf4 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 8017fb8:	68f8      	ldr	r0, [r7, #12]
 8017fba:	f7ff fe0d 	bl	8017bd8 <u8g2_SetFontPosBaseline>
  
  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8017fc4:	76bb      	strb	r3, [r7, #26]
  line_height -= u8g2_GetDescent(u8g2);
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	f993 308f 	ldrsb.w	r3, [r3, #143]	; 0x8f
 8017fcc:	b2db      	uxtb	r3, r3
 8017fce:	7eba      	ldrb	r2, [r7, #26]
 8017fd0:	1ad3      	subs	r3, r2, r3
 8017fd2:	76bb      	strb	r3, [r7, #26]
  
  
  /* calculate overall height of the input value box */
  height = 1;	/* value input line */
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	767b      	strb	r3, [r7, #25]
  height += u8x8_GetStringLineCnt(title);
 8017fd8:	68b8      	ldr	r0, [r7, #8]
 8017fda:	f001 f97c 	bl	80192d6 <u8x8_GetStringLineCnt>
 8017fde:	4603      	mov	r3, r0
 8017fe0:	461a      	mov	r2, r3
 8017fe2:	7e7b      	ldrb	r3, [r7, #25]
 8017fe4:	4413      	add	r3, r2
 8017fe6:	767b      	strb	r3, [r7, #25]

  /* calculate the height in pixel */
  pixel_height = height;
 8017fe8:	7e7b      	ldrb	r3, [r7, #25]
 8017fea:	82fb      	strh	r3, [r7, #22]
  pixel_height *= line_height;
 8017fec:	7ebb      	ldrb	r3, [r7, #26]
 8017fee:	b29b      	uxth	r3, r3
 8017ff0:	8afa      	ldrh	r2, [r7, #22]
 8017ff2:	fb12 f303 	smulbb	r3, r2, r3
 8017ff6:	82fb      	strh	r3, [r7, #22]


  /* calculate offset from top */
  y = 0;
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	83fb      	strh	r3, [r7, #30]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)  )
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018002:	8afa      	ldrh	r2, [r7, #22]
 8018004:	429a      	cmp	r2, r3
 8018006:	d20a      	bcs.n	801801e <u8g2_UserInterfaceInputValue+0x82>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801800e:	83fb      	strh	r3, [r7, #30]
    y -= pixel_height;
 8018010:	8bfa      	ldrh	r2, [r7, #30]
 8018012:	8afb      	ldrh	r3, [r7, #22]
 8018014:	1ad3      	subs	r3, r2, r3
 8018016:	83fb      	strh	r3, [r7, #30]
    y /= 2;
 8018018:	8bfb      	ldrh	r3, [r7, #30]
 801801a:	085b      	lsrs	r3, r3, #1
 801801c:	83fb      	strh	r3, [r7, #30]
  }
  
  /* calculate offset from left for the label */
  x = 0;
 801801e:	2300      	movs	r3, #0
 8018020:	83bb      	strh	r3, [r7, #28]
  pixel_width = u8g2_GetUTF8Width(u8g2, pre);
 8018022:	6879      	ldr	r1, [r7, #4]
 8018024:	68f8      	ldr	r0, [r7, #12]
 8018026:	f7ff fe51 	bl	8017ccc <u8g2_GetUTF8Width>
 801802a:	4603      	mov	r3, r0
 801802c:	82bb      	strh	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * digits;
 801802e:	4934      	ldr	r1, [pc, #208]	; (8018100 <u8g2_UserInterfaceInputValue+0x164>)
 8018030:	68f8      	ldr	r0, [r7, #12]
 8018032:	f7ff fe4b 	bl	8017ccc <u8g2_GetUTF8Width>
 8018036:	4603      	mov	r3, r0
 8018038:	461a      	mov	r2, r3
 801803a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801803e:	fb03 f302 	mul.w	r3, r3, r2
 8018042:	b29a      	uxth	r2, r3
 8018044:	8abb      	ldrh	r3, [r7, #20]
 8018046:	4413      	add	r3, r2
 8018048:	82bb      	strh	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, post);
 801804a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801804c:	68f8      	ldr	r0, [r7, #12]
 801804e:	f7ff fe3d 	bl	8017ccc <u8g2_GetUTF8Width>
 8018052:	4603      	mov	r3, r0
 8018054:	461a      	mov	r2, r3
 8018056:	8abb      	ldrh	r3, [r7, #20]
 8018058:	4413      	add	r3, r2
 801805a:	82bb      	strh	r3, [r7, #20]
  if ( pixel_width < u8g2_GetDisplayWidth(u8g2) )
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8018062:	8aba      	ldrh	r2, [r7, #20]
 8018064:	429a      	cmp	r2, r3
 8018066:	d20a      	bcs.n	801807e <u8g2_UserInterfaceInputValue+0xe2>
  {
    x = u8g2_GetDisplayWidth(u8g2);
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801806e:	83bb      	strh	r3, [r7, #28]
    x -= pixel_width;
 8018070:	8bba      	ldrh	r2, [r7, #28]
 8018072:	8abb      	ldrh	r3, [r7, #20]
 8018074:	1ad3      	subs	r3, r2, r3
 8018076:	83bb      	strh	r3, [r7, #28]
    x /= 2;
 8018078:	8bbb      	ldrh	r3, [r7, #28]
 801807a:	085b      	lsrs	r3, r3, #1
 801807c:	83bb      	strh	r3, [r7, #28]
  }

  /* render */
  yy = y;
 801807e:	8bfb      	ldrh	r3, [r7, #30]
 8018080:	827b      	strh	r3, [r7, #18]
  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
 8018088:	7ebb      	ldrb	r3, [r7, #26]
 801808a:	b29b      	uxth	r3, r3
 801808c:	8a79      	ldrh	r1, [r7, #18]
 801808e:	68ba      	ldr	r2, [r7, #8]
 8018090:	9201      	str	r2, [sp, #4]
 8018092:	9300      	str	r3, [sp, #0]
 8018094:	4603      	mov	r3, r0
 8018096:	460a      	mov	r2, r1
 8018098:	2100      	movs	r1, #0
 801809a:	68f8      	ldr	r0, [r7, #12]
 801809c:	f000 f9b1 	bl	8018402 <u8g2_DrawUTF8Lines>
 80180a0:	4603      	mov	r3, r0
 80180a2:	461a      	mov	r2, r3
 80180a4:	8a7b      	ldrh	r3, [r7, #18]
 80180a6:	4413      	add	r3, r2
 80180a8:	827b      	strh	r3, [r7, #18]
  xx = x;
 80180aa:	8bbb      	ldrh	r3, [r7, #28]
 80180ac:	823b      	strh	r3, [r7, #16]
  xx += u8g2_DrawUTF8(u8g2, xx, yy, pre);
 80180ae:	8a7a      	ldrh	r2, [r7, #18]
 80180b0:	8a39      	ldrh	r1, [r7, #16]
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	68f8      	ldr	r0, [r7, #12]
 80180b6:	f7ff fcfd 	bl	8017ab4 <u8g2_DrawUTF8>
 80180ba:	4603      	mov	r3, r0
 80180bc:	461a      	mov	r2, r3
 80180be:	8a3b      	ldrh	r3, [r7, #16]
 80180c0:	4413      	add	r3, r2
 80180c2:	823b      	strh	r3, [r7, #16]
  xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u8toa(local_value, digits));
 80180c4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80180c8:	7efb      	ldrb	r3, [r7, #27]
 80180ca:	4611      	mov	r1, r2
 80180cc:	4618      	mov	r0, r3
 80180ce:	f001 f985 	bl	80193dc <u8x8_u8toa>
 80180d2:	4603      	mov	r3, r0
 80180d4:	8a7a      	ldrh	r2, [r7, #18]
 80180d6:	8a39      	ldrh	r1, [r7, #16]
 80180d8:	68f8      	ldr	r0, [r7, #12]
 80180da:	f7ff fceb 	bl	8017ab4 <u8g2_DrawUTF8>
 80180de:	4603      	mov	r3, r0
 80180e0:	461a      	mov	r2, r3
 80180e2:	8a3b      	ldrh	r3, [r7, #16]
 80180e4:	4413      	add	r3, r2
 80180e6:	823b      	strh	r3, [r7, #16]
  u8g2_DrawUTF8(u8g2, xx, yy, post);
 80180e8:	8a7a      	ldrh	r2, [r7, #18]
 80180ea:	8a39      	ldrh	r1, [r7, #16]
 80180ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180ee:	68f8      	ldr	r0, [r7, #12]
 80180f0:	f7ff fce0 	bl	8017ab4 <u8g2_DrawUTF8>
    }
#endif
  
  /* never reached */
  //return r;  
}
 80180f4:	bf00      	nop
 80180f6:	4618      	mov	r0, r3
 80180f8:	3720      	adds	r7, #32
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}
 80180fe:	bf00      	nop
 8018100:	08022dcc 	.word	0x08022dcc

08018104 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8018104:	b490      	push	{r4, r7}
 8018106:	b082      	sub	sp, #8
 8018108:	af00      	add	r7, sp, #0
 801810a:	4604      	mov	r4, r0
 801810c:	4608      	mov	r0, r1
 801810e:	4611      	mov	r1, r2
 8018110:	461a      	mov	r2, r3
 8018112:	4623      	mov	r3, r4
 8018114:	80fb      	strh	r3, [r7, #6]
 8018116:	4603      	mov	r3, r0
 8018118:	80bb      	strh	r3, [r7, #4]
 801811a:	460b      	mov	r3, r1
 801811c:	807b      	strh	r3, [r7, #2]
 801811e:	4613      	mov	r3, r2
 8018120:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8018122:	887a      	ldrh	r2, [r7, #2]
 8018124:	88bb      	ldrh	r3, [r7, #4]
 8018126:	429a      	cmp	r2, r3
 8018128:	d20d      	bcs.n	8018146 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 801812a:	883a      	ldrh	r2, [r7, #0]
 801812c:	88fb      	ldrh	r3, [r7, #6]
 801812e:	429a      	cmp	r2, r3
 8018130:	d901      	bls.n	8018136 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8018132:	2301      	movs	r3, #1
 8018134:	e014      	b.n	8018160 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8018136:	887a      	ldrh	r2, [r7, #2]
 8018138:	883b      	ldrh	r3, [r7, #0]
 801813a:	429a      	cmp	r2, r3
 801813c:	d901      	bls.n	8018142 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 801813e:	2301      	movs	r3, #1
 8018140:	e00e      	b.n	8018160 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8018142:	2300      	movs	r3, #0
 8018144:	e00c      	b.n	8018160 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8018146:	883a      	ldrh	r2, [r7, #0]
 8018148:	88fb      	ldrh	r3, [r7, #6]
 801814a:	429a      	cmp	r2, r3
 801814c:	d907      	bls.n	801815e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 801814e:	887a      	ldrh	r2, [r7, #2]
 8018150:	883b      	ldrh	r3, [r7, #0]
 8018152:	429a      	cmp	r2, r3
 8018154:	d901      	bls.n	801815a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8018156:	2301      	movs	r3, #1
 8018158:	e002      	b.n	8018160 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 801815a:	2300      	movs	r3, #0
 801815c:	e000      	b.n	8018160 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 801815e:	2300      	movs	r3, #0
    }
  }
}
 8018160:	4618      	mov	r0, r3
 8018162:	3708      	adds	r7, #8
 8018164:	46bd      	mov	sp, r7
 8018166:	bc90      	pop	{r4, r7}
 8018168:	4770      	bx	lr

0801816a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 801816a:	b580      	push	{r7, lr}
 801816c:	b084      	sub	sp, #16
 801816e:	af00      	add	r7, sp, #0
 8018170:	60f8      	str	r0, [r7, #12]
 8018172:	4608      	mov	r0, r1
 8018174:	4611      	mov	r1, r2
 8018176:	461a      	mov	r2, r3
 8018178:	4603      	mov	r3, r0
 801817a:	817b      	strh	r3, [r7, #10]
 801817c:	460b      	mov	r3, r1
 801817e:	813b      	strh	r3, [r7, #8]
 8018180:	4613      	mov	r3, r2
 8018182:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8018190:	8b3b      	ldrh	r3, [r7, #24]
 8018192:	893a      	ldrh	r2, [r7, #8]
 8018194:	f7ff ffb6 	bl	8018104 <u8g2_is_intersection_decision_tree>
 8018198:	4603      	mov	r3, r0
 801819a:	2b00      	cmp	r3, #0
 801819c:	d101      	bne.n	80181a2 <u8g2_IsIntersection+0x38>
    return 0; 
 801819e:	2300      	movs	r3, #0
 80181a0:	e00a      	b.n	80181b8 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80181ae:	88fb      	ldrh	r3, [r7, #6]
 80181b0:	897a      	ldrh	r2, [r7, #10]
 80181b2:	f7ff ffa7 	bl	8018104 <u8g2_is_intersection_decision_tree>
 80181b6:	4603      	mov	r3, r0
}
 80181b8:	4618      	mov	r0, r3
 80181ba:	3710      	adds	r7, #16
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}

080181c0 <u8g2_ll_hvline_horizontal_right_lsb>:
    all clipping done
*/

/* SH1122, LD7032, ST7920, ST7986, LC7981, T6963, SED1330, RA8835, MAX7219, LS0 */ 
void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80181c0:	b480      	push	{r7}
 80181c2:	b089      	sub	sp, #36	; 0x24
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	60f8      	str	r0, [r7, #12]
 80181c8:	4608      	mov	r0, r1
 80181ca:	4611      	mov	r1, r2
 80181cc:	461a      	mov	r2, r3
 80181ce:	4603      	mov	r3, r0
 80181d0:	817b      	strh	r3, [r7, #10]
 80181d2:	460b      	mov	r3, r1
 80181d4:	813b      	strh	r3, [r7, #8]
 80181d6:	4613      	mov	r3, r2
 80181d8:	80fb      	strh	r3, [r7, #6]
  uint16_t offset;
  uint8_t *ptr;
  uint8_t bit_pos;
  uint8_t mask;
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	7c1b      	ldrb	r3, [r3, #16]
 80181e0:	76bb      	strb	r3, [r7, #26]

  bit_pos = x;		/* overflow truncate is ok here... */
 80181e2:	897b      	ldrh	r3, [r7, #10]
 80181e4:	767b      	strb	r3, [r7, #25]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80181e6:	7e7b      	ldrb	r3, [r7, #25]
 80181e8:	f003 0307 	and.w	r3, r3, #7
 80181ec:	767b      	strb	r3, [r7, #25]
  mask = 128;
 80181ee:	2380      	movs	r3, #128	; 0x80
 80181f0:	76fb      	strb	r3, [r7, #27]
  mask >>= bit_pos;
 80181f2:	7efa      	ldrb	r2, [r7, #27]
 80181f4:	7e7b      	ldrb	r3, [r7, #25]
 80181f6:	fa42 f303 	asr.w	r3, r2, r3
 80181fa:	76fb      	strb	r3, [r7, #27]

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80181fc:	893b      	ldrh	r3, [r7, #8]
 80181fe:	82fb      	strh	r3, [r7, #22]
  offset *= tile_width;
 8018200:	7ebb      	ldrb	r3, [r7, #26]
 8018202:	b29b      	uxth	r3, r3
 8018204:	8afa      	ldrh	r2, [r7, #22]
 8018206:	fb12 f303 	smulbb	r3, r2, r3
 801820a:	82fb      	strh	r3, [r7, #22]
  offset += x>>3;
 801820c:	897b      	ldrh	r3, [r7, #10]
 801820e:	08db      	lsrs	r3, r3, #3
 8018210:	b29a      	uxth	r2, r3
 8018212:	8afb      	ldrh	r3, [r7, #22]
 8018214:	4413      	add	r3, r2
 8018216:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801821c:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 801821e:	8afb      	ldrh	r3, [r7, #22]
 8018220:	69fa      	ldr	r2, [r7, #28]
 8018222:	4413      	add	r3, r2
 8018224:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8018226:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801822a:	2b00      	cmp	r3, #0
 801822c:	d129      	bne.n	8018282 <u8g2_ll_hvline_horizontal_right_lsb+0xc2>
  {
      
    do
    {

      if ( u8g2->draw_color <= 1 )
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8018234:	2b01      	cmp	r3, #1
 8018236:	d806      	bhi.n	8018246 <u8g2_ll_hvline_horizontal_right_lsb+0x86>
	*ptr |= mask;
 8018238:	69fb      	ldr	r3, [r7, #28]
 801823a:	781a      	ldrb	r2, [r3, #0]
 801823c:	7efb      	ldrb	r3, [r7, #27]
 801823e:	4313      	orrs	r3, r2
 8018240:	b2da      	uxtb	r2, r3
 8018242:	69fb      	ldr	r3, [r7, #28]
 8018244:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 801824c:	2b01      	cmp	r3, #1
 801824e:	d006      	beq.n	801825e <u8g2_ll_hvline_horizontal_right_lsb+0x9e>
	*ptr ^= mask;
 8018250:	69fb      	ldr	r3, [r7, #28]
 8018252:	781a      	ldrb	r2, [r3, #0]
 8018254:	7efb      	ldrb	r3, [r7, #27]
 8018256:	4053      	eors	r3, r2
 8018258:	b2da      	uxtb	r2, r3
 801825a:	69fb      	ldr	r3, [r7, #28]
 801825c:	701a      	strb	r2, [r3, #0]
      
      mask >>= 1;
 801825e:	7efb      	ldrb	r3, [r7, #27]
 8018260:	085b      	lsrs	r3, r3, #1
 8018262:	76fb      	strb	r3, [r7, #27]
      if ( mask == 0 )
 8018264:	7efb      	ldrb	r3, [r7, #27]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d104      	bne.n	8018274 <u8g2_ll_hvline_horizontal_right_lsb+0xb4>
      {
	mask = 128;
 801826a:	2380      	movs	r3, #128	; 0x80
 801826c:	76fb      	strb	r3, [r7, #27]
        ptr++;
 801826e:	69fb      	ldr	r3, [r7, #28]
 8018270:	3301      	adds	r3, #1
 8018272:	61fb      	str	r3, [r7, #28]
      }
      
      //x++;
      len--;
 8018274:	88fb      	ldrh	r3, [r7, #6]
 8018276:	3b01      	subs	r3, #1
 8018278:	80fb      	strh	r3, [r7, #6]
    } while( len != 0 );
 801827a:	88fb      	ldrh	r3, [r7, #6]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d1d6      	bne.n	801822e <u8g2_ll_hvline_horizontal_right_lsb+0x6e>
      ptr += tile_width;
      //y++;
      len--;
    } while( len != 0 );
  }
}
 8018280:	e021      	b.n	80182c6 <u8g2_ll_hvline_horizontal_right_lsb+0x106>
      if ( u8g2->draw_color <= 1 )
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8018288:	2b01      	cmp	r3, #1
 801828a:	d806      	bhi.n	801829a <u8g2_ll_hvline_horizontal_right_lsb+0xda>
	*ptr |= mask;
 801828c:	69fb      	ldr	r3, [r7, #28]
 801828e:	781a      	ldrb	r2, [r3, #0]
 8018290:	7efb      	ldrb	r3, [r7, #27]
 8018292:	4313      	orrs	r3, r2
 8018294:	b2da      	uxtb	r2, r3
 8018296:	69fb      	ldr	r3, [r7, #28]
 8018298:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80182a0:	2b01      	cmp	r3, #1
 80182a2:	d006      	beq.n	80182b2 <u8g2_ll_hvline_horizontal_right_lsb+0xf2>
	*ptr ^= mask;
 80182a4:	69fb      	ldr	r3, [r7, #28]
 80182a6:	781a      	ldrb	r2, [r3, #0]
 80182a8:	7efb      	ldrb	r3, [r7, #27]
 80182aa:	4053      	eors	r3, r2
 80182ac:	b2da      	uxtb	r2, r3
 80182ae:	69fb      	ldr	r3, [r7, #28]
 80182b0:	701a      	strb	r2, [r3, #0]
      ptr += tile_width;
 80182b2:	7ebb      	ldrb	r3, [r7, #26]
 80182b4:	69fa      	ldr	r2, [r7, #28]
 80182b6:	4413      	add	r3, r2
 80182b8:	61fb      	str	r3, [r7, #28]
      len--;
 80182ba:	88fb      	ldrh	r3, [r7, #6]
 80182bc:	3b01      	subs	r3, #1
 80182be:	80fb      	strh	r3, [r7, #6]
    } while( len != 0 );
 80182c0:	88fb      	ldrh	r3, [r7, #6]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d1dd      	bne.n	8018282 <u8g2_ll_hvline_horizontal_right_lsb+0xc2>
}
 80182c6:	bf00      	nop
 80182c8:	3724      	adds	r7, #36	; 0x24
 80182ca:	46bd      	mov	sp, r7
 80182cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d0:	4770      	bx	lr

080182d2 <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 80182d2:	b580      	push	{r7, lr}
 80182d4:	b08a      	sub	sp, #40	; 0x28
 80182d6:	af02      	add	r7, sp, #8
 80182d8:	60f8      	str	r0, [r7, #12]
 80182da:	4608      	mov	r0, r1
 80182dc:	4611      	mov	r1, r2
 80182de:	461a      	mov	r2, r3
 80182e0:	4603      	mov	r3, r0
 80182e2:	817b      	strh	r3, [r7, #10]
 80182e4:	460b      	mov	r3, r1
 80182e6:	813b      	strh	r3, [r7, #8]
 80182e8:	4613      	mov	r3, r2
 80182ea:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 80182ec:	2100      	movs	r1, #0
 80182ee:	68f8      	ldr	r0, [r7, #12]
 80182f0:	f7ff fd00 	bl	8017cf4 <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80182f8:	68f8      	ldr	r0, [r7, #12]
 80182fa:	4798      	blx	r3
 80182fc:	4603      	mov	r3, r0
 80182fe:	461a      	mov	r2, r3
 8018300:	893b      	ldrh	r3, [r7, #8]
 8018302:	4413      	add	r3, r2
 8018304:	813b      	strh	r3, [r7, #8]

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 8018306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018308:	68f8      	ldr	r0, [r7, #12]
 801830a:	f7ff fcdf 	bl	8017ccc <u8g2_GetUTF8Width>
 801830e:	4603      	mov	r3, r0
 8018310:	82fb      	strh	r3, [r7, #22]

  /* calculate delta d within the box */
  d = 0;
 8018312:	2300      	movs	r3, #0
 8018314:	82bb      	strh	r3, [r7, #20]
  if ( str_width < w )
 8018316:	8afa      	ldrh	r2, [r7, #22]
 8018318:	88fb      	ldrh	r3, [r7, #6]
 801831a:	429a      	cmp	r2, r3
 801831c:	d209      	bcs.n	8018332 <u8g2_DrawUTF8Line+0x60>
  {
    d = w;
 801831e:	88fb      	ldrh	r3, [r7, #6]
 8018320:	82bb      	strh	r3, [r7, #20]
    d -=str_width;
 8018322:	8aba      	ldrh	r2, [r7, #20]
 8018324:	8afb      	ldrh	r3, [r7, #22]
 8018326:	1ad3      	subs	r3, r2, r3
 8018328:	82bb      	strh	r3, [r7, #20]
    d /= 2;
 801832a:	8abb      	ldrh	r3, [r7, #20]
 801832c:	085b      	lsrs	r3, r3, #1
 801832e:	82bb      	strh	r3, [r7, #20]
 8018330:	e001      	b.n	8018336 <u8g2_DrawUTF8Line+0x64>
  }
  else
  {
    w = str_width;
 8018332:	8afb      	ldrh	r3, [r7, #22]
 8018334:	80fb      	strh	r3, [r7, #6]
  }

  /* caluclate text box */
  fx = x;
 8018336:	897b      	ldrh	r3, [r7, #10]
 8018338:	83fb      	strh	r3, [r7, #30]
  fy = y - u8g2_GetAscent(u8g2) ;
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8018340:	b29b      	uxth	r3, r3
 8018342:	893a      	ldrh	r2, [r7, #8]
 8018344:	1ad3      	subs	r3, r2, r3
 8018346:	83bb      	strh	r3, [r7, #28]
  fw = w;
 8018348:	88fb      	ldrh	r3, [r7, #6]
 801834a:	837b      	strh	r3, [r7, #26]
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8018352:	b21a      	sxth	r2, r3
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	f993 308f 	ldrsb.w	r3, [r3, #143]	; 0x8f
 801835a:	b21b      	sxth	r3, r3
 801835c:	1ad3      	subs	r3, r2, r3
 801835e:	b21b      	sxth	r3, r3
 8018360:	833b      	strh	r3, [r7, #24]

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 8018362:	2101      	movs	r1, #1
 8018364:	68f8      	ldr	r0, [r7, #12]
 8018366:	f7ff fe01 	bl	8017f6c <u8g2_SetDrawColor>
  if ( is_invert )
 801836a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801836e:	2b00      	cmp	r3, #0
 8018370:	d023      	beq.n	80183ba <u8g2_DrawUTF8Line+0xe8>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 8018372:	8b78      	ldrh	r0, [r7, #26]
 8018374:	8bba      	ldrh	r2, [r7, #28]
 8018376:	8bf9      	ldrh	r1, [r7, #30]
 8018378:	8b3b      	ldrh	r3, [r7, #24]
 801837a:	9300      	str	r3, [sp, #0]
 801837c:	4603      	mov	r3, r0
 801837e:	68f8      	ldr	r0, [r7, #12]
 8018380:	f7fe fcc4 	bl	8016d0c <u8g2_DrawBox>
  }

  /* draw the frame */
  while( border_size > 0 )
 8018384:	e019      	b.n	80183ba <u8g2_DrawUTF8Line+0xe8>
  {
    fx--;
 8018386:	8bfb      	ldrh	r3, [r7, #30]
 8018388:	3b01      	subs	r3, #1
 801838a:	83fb      	strh	r3, [r7, #30]
    fy--;
 801838c:	8bbb      	ldrh	r3, [r7, #28]
 801838e:	3b01      	subs	r3, #1
 8018390:	83bb      	strh	r3, [r7, #28]
    fw +=2;
 8018392:	8b7b      	ldrh	r3, [r7, #26]
 8018394:	3302      	adds	r3, #2
 8018396:	837b      	strh	r3, [r7, #26]
    fh +=2;
 8018398:	8b3b      	ldrh	r3, [r7, #24]
 801839a:	3302      	adds	r3, #2
 801839c:	833b      	strh	r3, [r7, #24]
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 801839e:	8b78      	ldrh	r0, [r7, #26]
 80183a0:	8bba      	ldrh	r2, [r7, #28]
 80183a2:	8bf9      	ldrh	r1, [r7, #30]
 80183a4:	8b3b      	ldrh	r3, [r7, #24]
 80183a6:	9300      	str	r3, [sp, #0]
 80183a8:	4603      	mov	r3, r0
 80183aa:	68f8      	ldr	r0, [r7, #12]
 80183ac:	f7fe fce4 	bl	8016d78 <u8g2_DrawFrame>
    border_size--;
 80183b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80183b4:	3b01      	subs	r3, #1
 80183b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  while( border_size > 0 )
 80183ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d1e1      	bne.n	8018386 <u8g2_DrawUTF8Line+0xb4>
  }

  if ( is_invert )
 80183c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d004      	beq.n	80183d4 <u8g2_DrawUTF8Line+0x102>
  {
    u8g2_SetDrawColor(u8g2, 0);
 80183ca:	2100      	movs	r1, #0
 80183cc:	68f8      	ldr	r0, [r7, #12]
 80183ce:	f7ff fdcd 	bl	8017f6c <u8g2_SetDrawColor>
 80183d2:	e003      	b.n	80183dc <u8g2_DrawUTF8Line+0x10a>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 80183d4:	2101      	movs	r1, #1
 80183d6:	68f8      	ldr	r0, [r7, #12]
 80183d8:	f7ff fdc8 	bl	8017f6c <u8g2_SetDrawColor>
  }

  d=0; /*KR Lighting specific*/
 80183dc:	2300      	movs	r3, #0
 80183de:	82bb      	strh	r3, [r7, #20]
  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 80183e0:	897a      	ldrh	r2, [r7, #10]
 80183e2:	8abb      	ldrh	r3, [r7, #20]
 80183e4:	4413      	add	r3, r2
 80183e6:	b299      	uxth	r1, r3
 80183e8:	893a      	ldrh	r2, [r7, #8]
 80183ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ec:	68f8      	ldr	r0, [r7, #12]
 80183ee:	f7ff fb61 	bl	8017ab4 <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 80183f2:	2101      	movs	r1, #1
 80183f4:	68f8      	ldr	r0, [r7, #12]
 80183f6:	f7ff fdb9 	bl	8017f6c <u8g2_SetDrawColor>

}
 80183fa:	bf00      	nop
 80183fc:	3720      	adds	r7, #32
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}

08018402 <u8g2_DrawUTF8Lines>:
  lines can be centered with respect to "w"
  if s == NULL nothing is drawn and 0 is returned
  returns the number of lines in s multiplied with line_height
*/
u8g2_uint_t u8g2_DrawUTF8Lines(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t line_height, const char *s)
{
 8018402:	b590      	push	{r4, r7, lr}
 8018404:	b08b      	sub	sp, #44	; 0x2c
 8018406:	af04      	add	r7, sp, #16
 8018408:	60f8      	str	r0, [r7, #12]
 801840a:	4608      	mov	r0, r1
 801840c:	4611      	mov	r1, r2
 801840e:	461a      	mov	r2, r3
 8018410:	4603      	mov	r3, r0
 8018412:	817b      	strh	r3, [r7, #10]
 8018414:	460b      	mov	r3, r1
 8018416:	813b      	strh	r3, [r7, #8]
 8018418:	4613      	mov	r3, r2
 801841a:	80fb      	strh	r3, [r7, #6]
  uint8_t i;
  uint8_t cnt;
  u8g2_uint_t yy = 0;
 801841c:	2300      	movs	r3, #0
 801841e:	82bb      	strh	r3, [r7, #20]
  cnt = u8x8_GetStringLineCnt(s);
 8018420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018422:	f000 ff58 	bl	80192d6 <u8x8_GetStringLineCnt>
 8018426:	4603      	mov	r3, r0
 8018428:	74fb      	strb	r3, [r7, #19]
  //printf("str=%s\n", s);
  //printf("cnt=%d, y=%d, line_height=%d\n", cnt, y, line_height);
  for( i = 0; i < cnt; i++ )
 801842a:	2300      	movs	r3, #0
 801842c:	75fb      	strb	r3, [r7, #23]
 801842e:	e01a      	b.n	8018466 <u8g2_DrawUTF8Lines+0x64>
  {
    //printf("  i=%d, y=%d, line_height=%d\n", i, y, line_height);
    u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
 8018430:	7dfb      	ldrb	r3, [r7, #23]
 8018432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018434:	4618      	mov	r0, r3
 8018436:	f000 ff71 	bl	801931c <u8x8_GetStringLineStart>
 801843a:	88fb      	ldrh	r3, [r7, #6]
 801843c:	893a      	ldrh	r2, [r7, #8]
 801843e:	8979      	ldrh	r1, [r7, #10]
 8018440:	2400      	movs	r4, #0
 8018442:	9402      	str	r4, [sp, #8]
 8018444:	2400      	movs	r4, #0
 8018446:	9401      	str	r4, [sp, #4]
 8018448:	9000      	str	r0, [sp, #0]
 801844a:	68f8      	ldr	r0, [r7, #12]
 801844c:	f7ff ff41 	bl	80182d2 <u8g2_DrawUTF8Line>
    y+=line_height;
 8018450:	893a      	ldrh	r2, [r7, #8]
 8018452:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018454:	4413      	add	r3, r2
 8018456:	813b      	strh	r3, [r7, #8]
    yy+=line_height;
 8018458:	8aba      	ldrh	r2, [r7, #20]
 801845a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801845c:	4413      	add	r3, r2
 801845e:	82bb      	strh	r3, [r7, #20]
  for( i = 0; i < cnt; i++ )
 8018460:	7dfb      	ldrb	r3, [r7, #23]
 8018462:	3301      	adds	r3, #1
 8018464:	75fb      	strb	r3, [r7, #23]
 8018466:	7dfa      	ldrb	r2, [r7, #23]
 8018468:	7cfb      	ldrb	r3, [r7, #19]
 801846a:	429a      	cmp	r2, r3
 801846c:	d3e0      	bcc.n	8018430 <u8g2_DrawUTF8Lines+0x2e>
  }
  return yy;
 801846e:	8abb      	ldrh	r3, [r7, #20]
}
 8018470:	4618      	mov	r0, r3
 8018472:	371c      	adds	r7, #28
 8018474:	46bd      	mov	sp, r7
 8018476:	bd90      	pop	{r4, r7, pc}

08018478 <u8g2_draw_selection_list_line>:
  selection list with string line
  returns line height
*/
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b08a      	sub	sp, #40	; 0x28
 801847c:	af04      	add	r7, sp, #16
 801847e:	60f8      	str	r0, [r7, #12]
 8018480:	60b9      	str	r1, [r7, #8]
 8018482:	4611      	mov	r1, r2
 8018484:	461a      	mov	r2, r3
 8018486:	460b      	mov	r3, r1
 8018488:	80fb      	strh	r3, [r7, #6]
 801848a:	4613      	mov	r3, r2
 801848c:	717b      	strb	r3, [r7, #5]
  u8g2_uint_t yy;
  uint8_t border_size = 0;
 801848e:	2300      	movs	r3, #0
 8018490:	75fb      	strb	r3, [r7, #23]
  uint8_t is_invert = 0;
 8018492:	2300      	movs	r3, #0
 8018494:	75bb      	strb	r3, [r7, #22]
	
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 801849c:	b21a      	sxth	r2, r3
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	f993 308f 	ldrsb.w	r3, [r3, #143]	; 0x8f
 80184a4:	b21b      	sxth	r3, r3
 80184a6:	1ad3      	subs	r3, r2, r3
 80184a8:	b21b      	sxth	r3, r3
 80184aa:	b29b      	uxth	r3, r3
 80184ac:	3301      	adds	r3, #1
 80184ae:	82bb      	strh	r3, [r7, #20]

  /* calculate offset from display upper border */
  yy = idx;
 80184b0:	797b      	ldrb	r3, [r7, #5]
 80184b2:	827b      	strh	r3, [r7, #18]
  yy -= u8sl->first_pos;
 80184b4:	68bb      	ldr	r3, [r7, #8]
 80184b6:	789b      	ldrb	r3, [r3, #2]
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	8a7a      	ldrh	r2, [r7, #18]
 80184bc:	1ad3      	subs	r3, r2, r3
 80184be:	827b      	strh	r3, [r7, #18]
  yy *= line_height;
 80184c0:	8a7a      	ldrh	r2, [r7, #18]
 80184c2:	8abb      	ldrh	r3, [r7, #20]
 80184c4:	fb12 f303 	smulbb	r3, r2, r3
 80184c8:	827b      	strh	r3, [r7, #18]
  yy += y;
 80184ca:	8a7a      	ldrh	r2, [r7, #18]
 80184cc:	88fb      	ldrh	r3, [r7, #6]
 80184ce:	4413      	add	r3, r2
 80184d0:	827b      	strh	r3, [r7, #18]

  /* check whether this is the current cursor line */
  if ( idx == u8sl->current_pos )
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	78db      	ldrb	r3, [r3, #3]
 80184d6:	797a      	ldrb	r2, [r7, #5]
 80184d8:	429a      	cmp	r2, r3
 80184da:	d103      	bne.n	80184e4 <u8g2_draw_selection_list_line+0x6c>
  {
    border_size = MY_BORDER_SIZE;
 80184dc:	2301      	movs	r3, #1
 80184de:	75fb      	strb	r3, [r7, #23]
    is_invert = 1;
 80184e0:	2301      	movs	r3, #1
 80184e2:	75bb      	strb	r3, [r7, #22]
  }

  /* get the line from the array */
  s = u8x8_GetStringLineStart(idx, s);
 80184e4:	797b      	ldrb	r3, [r7, #5]
 80184e6:	6a39      	ldr	r1, [r7, #32]
 80184e8:	4618      	mov	r0, r3
 80184ea:	f000 ff17 	bl	801931c <u8x8_GetStringLineStart>
 80184ee:	6238      	str	r0, [r7, #32]

  /* draw the line */
  if ( s == NULL )
 80184f0:	6a3b      	ldr	r3, [r7, #32]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d101      	bne.n	80184fa <u8g2_draw_selection_list_line+0x82>
    s = "";
 80184f6:	4b0c      	ldr	r3, [pc, #48]	; (8018528 <u8g2_draw_selection_list_line+0xb0>)
 80184f8:	623b      	str	r3, [r7, #32]
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8018500:	3b02      	subs	r3, #2
 8018502:	b299      	uxth	r1, r3
 8018504:	88fa      	ldrh	r2, [r7, #6]
 8018506:	7dbb      	ldrb	r3, [r7, #22]
 8018508:	9302      	str	r3, [sp, #8]
 801850a:	7dfb      	ldrb	r3, [r7, #23]
 801850c:	9301      	str	r3, [sp, #4]
 801850e:	6a3b      	ldr	r3, [r7, #32]
 8018510:	9300      	str	r3, [sp, #0]
 8018512:	460b      	mov	r3, r1
 8018514:	2101      	movs	r1, #1
 8018516:	68f8      	ldr	r0, [r7, #12]
 8018518:	f7ff fedb 	bl	80182d2 <u8g2_DrawUTF8Line>
  return line_height;
 801851c:	8abb      	ldrh	r3, [r7, #20]
}
 801851e:	4618      	mov	r0, r3
 8018520:	3718      	adds	r7, #24
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}
 8018526:	bf00      	nop
 8018528:	08022dd0 	.word	0x08022dd0

0801852c <u8g2_DrawSelectionList>:

void u8g2_DrawSelectionList(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, const char *s)
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b088      	sub	sp, #32
 8018530:	af02      	add	r7, sp, #8
 8018532:	60f8      	str	r0, [r7, #12]
 8018534:	60b9      	str	r1, [r7, #8]
 8018536:	603b      	str	r3, [r7, #0]
 8018538:	4613      	mov	r3, r2
 801853a:	80fb      	strh	r3, [r7, #6]
  uint8_t i;
  for( i = 0; i < u8sl->visible; i++ )
 801853c:	2300      	movs	r3, #0
 801853e:	75fb      	strb	r3, [r7, #23]
 8018540:	e014      	b.n	801856c <u8g2_DrawSelectionList+0x40>
  {
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
 8018542:	68bb      	ldr	r3, [r7, #8]
 8018544:	789a      	ldrb	r2, [r3, #2]
 8018546:	7dfb      	ldrb	r3, [r7, #23]
 8018548:	4413      	add	r3, r2
 801854a:	b2d9      	uxtb	r1, r3
 801854c:	88fa      	ldrh	r2, [r7, #6]
 801854e:	683b      	ldr	r3, [r7, #0]
 8018550:	9300      	str	r3, [sp, #0]
 8018552:	460b      	mov	r3, r1
 8018554:	68b9      	ldr	r1, [r7, #8]
 8018556:	68f8      	ldr	r0, [r7, #12]
 8018558:	f7ff ff8e 	bl	8018478 <u8g2_draw_selection_list_line>
 801855c:	4603      	mov	r3, r0
 801855e:	461a      	mov	r2, r3
 8018560:	88fb      	ldrh	r3, [r7, #6]
 8018562:	4413      	add	r3, r2
 8018564:	80fb      	strh	r3, [r7, #6]
  for( i = 0; i < u8sl->visible; i++ )
 8018566:	7dfb      	ldrb	r3, [r7, #23]
 8018568:	3301      	adds	r3, #1
 801856a:	75fb      	strb	r3, [r7, #23]
 801856c:	68bb      	ldr	r3, [r7, #8]
 801856e:	781b      	ldrb	r3, [r3, #0]
 8018570:	7dfa      	ldrb	r2, [r7, #23]
 8018572:	429a      	cmp	r2, r3
 8018574:	d3e5      	bcc.n	8018542 <u8g2_DrawSelectionList+0x16>
  }
}
 8018576:	bf00      	nop
 8018578:	bf00      	nop
 801857a:	3718      	adds	r7, #24
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}

08018580 <u8g2_UserInterfaceSelectionList>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
	
*/
uint8_t u8g2_UserInterfaceSelectionList(u8g2_t *u8g2, const char *title, uint8_t start_pos, const char *sl)
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b08a      	sub	sp, #40	; 0x28
 8018584:	af02      	add	r7, sp, #8
 8018586:	60f8      	str	r0, [r7, #12]
 8018588:	60b9      	str	r1, [r7, #8]
 801858a:	603b      	str	r3, [r7, #0]
 801858c:	4613      	mov	r3, r2
 801858e:	71fb      	strb	r3, [r7, #7]
  u8sl_t u8sl;
  u8g2_uint_t yy;

  uint8_t event;

  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8018596:	b21a      	sxth	r2, r3
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	f993 308f 	ldrsb.w	r3, [r3, #143]	; 0x8f
 801859e:	b21b      	sxth	r3, r3
 80185a0:	1ad3      	subs	r3, r2, r3
 80185a2:	b21b      	sxth	r3, r3
 80185a4:	b29b      	uxth	r3, r3
 80185a6:	3301      	adds	r3, #1
 80185a8:	83bb      	strh	r3, [r7, #28]

  uint8_t title_lines = u8x8_GetStringLineCnt(title);
 80185aa:	68b8      	ldr	r0, [r7, #8]
 80185ac:	f000 fe93 	bl	80192d6 <u8x8_GetStringLineCnt>
 80185b0:	4603      	mov	r3, r0
 80185b2:	76fb      	strb	r3, [r7, #27]
  uint8_t display_lines;

  
  if ( start_pos > 0 )	/* issue 112 */
 80185b4:	79fb      	ldrb	r3, [r7, #7]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d002      	beq.n	80185c0 <u8g2_UserInterfaceSelectionList+0x40>
    start_pos--;		/* issue 112 */
 80185ba:	79fb      	ldrb	r3, [r7, #7]
 80185bc:	3b01      	subs	r3, #1
 80185be:	71fb      	strb	r3, [r7, #7]


  if ( title_lines > 0 )
 80185c0:	7efb      	ldrb	r3, [r7, #27]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d013      	beq.n	80185ee <u8g2_UserInterfaceSelectionList+0x6e>
  {
	display_lines = (u8g2_GetDisplayHeight(u8g2)-3) / line_height;
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80185cc:	1eda      	subs	r2, r3, #3
 80185ce:	8bbb      	ldrh	r3, [r7, #28]
 80185d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80185d4:	76bb      	strb	r3, [r7, #26]
	u8sl.visible = display_lines;
 80185d6:	7ebb      	ldrb	r3, [r7, #26]
 80185d8:	753b      	strb	r3, [r7, #20]
	u8sl.visible -= title_lines;
 80185da:	7d3a      	ldrb	r2, [r7, #20]
 80185dc:	7efb      	ldrb	r3, [r7, #27]
 80185de:	1ad3      	subs	r3, r2, r3
 80185e0:	b2db      	uxtb	r3, r3
 80185e2:	753b      	strb	r3, [r7, #20]
	u8sl.visible -= 2;/*SCR Specific */
 80185e4:	7d3b      	ldrb	r3, [r7, #20]
 80185e6:	3b02      	subs	r3, #2
 80185e8:	b2db      	uxtb	r3, r3
 80185ea:	753b      	strb	r3, [r7, #20]
 80185ec:	e009      	b.n	8018602 <u8g2_UserInterfaceSelectionList+0x82>
  }
  else
  {
	display_lines = u8g2_GetDisplayHeight(u8g2) / line_height;
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 80185f4:	8bbb      	ldrh	r3, [r7, #28]
 80185f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80185fa:	b29b      	uxth	r3, r3
 80185fc:	76bb      	strb	r3, [r7, #26]
	u8sl.visible = display_lines;
 80185fe:	7ebb      	ldrb	r3, [r7, #26]
 8018600:	753b      	strb	r3, [r7, #20]
  }

  u8sl.total = u8x8_GetStringLineCnt(sl);
 8018602:	6838      	ldr	r0, [r7, #0]
 8018604:	f000 fe67 	bl	80192d6 <u8x8_GetStringLineCnt>
 8018608:	4603      	mov	r3, r0
 801860a:	757b      	strb	r3, [r7, #21]
  u8sl.first_pos = 0;
 801860c:	2300      	movs	r3, #0
 801860e:	75bb      	strb	r3, [r7, #22]
  u8sl.current_pos = start_pos;
 8018610:	79fb      	ldrb	r3, [r7, #7]
 8018612:	75fb      	strb	r3, [r7, #23]

  if ( u8sl.current_pos >= u8sl.total )
 8018614:	7dfa      	ldrb	r2, [r7, #23]
 8018616:	7d7b      	ldrb	r3, [r7, #21]
 8018618:	429a      	cmp	r2, r3
 801861a:	d303      	bcc.n	8018624 <u8g2_UserInterfaceSelectionList+0xa4>
    u8sl.current_pos = u8sl.total-1;
 801861c:	7d7b      	ldrb	r3, [r7, #21]
 801861e:	3b01      	subs	r3, #1
 8018620:	b2db      	uxtb	r3, r3
 8018622:	75fb      	strb	r3, [r7, #23]
  if ( u8sl.first_pos+u8sl.visible <= u8sl.current_pos )
 8018624:	7dbb      	ldrb	r3, [r7, #22]
 8018626:	461a      	mov	r2, r3
 8018628:	7d3b      	ldrb	r3, [r7, #20]
 801862a:	4413      	add	r3, r2
 801862c:	7dfa      	ldrb	r2, [r7, #23]
 801862e:	4293      	cmp	r3, r2
 8018630:	dc06      	bgt.n	8018640 <u8g2_UserInterfaceSelectionList+0xc0>
    u8sl.first_pos = u8sl.current_pos-u8sl.visible+1;
 8018632:	7dfa      	ldrb	r2, [r7, #23]
 8018634:	7d3b      	ldrb	r3, [r7, #20]
 8018636:	1ad3      	subs	r3, r2, r3
 8018638:	b2db      	uxtb	r3, r3
 801863a:	3301      	adds	r3, #1
 801863c:	b2db      	uxtb	r3, r3
 801863e:	75bb      	strb	r3, [r7, #22]

  u8g2_SetFontPosBaseline(u8g2);
 8018640:	68f8      	ldr	r0, [r7, #12]
 8018642:	f7ff fac9 	bl	8017bd8 <u8g2_SetFontPosBaseline>
#if VISHWA_DISABLE
      u8g2_FirstPage(u8g2);
      do
      {
#endif
        yy = u8g2_GetAscent(u8g2);
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 801864c:	83fb      	strh	r3, [r7, #30]
        if ( title_lines > 0 )
 801864e:	7efb      	ldrb	r3, [r7, #27]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d027      	beq.n	80186a4 <u8g2_UserInterfaceSelectionList+0x124>
        {
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 801865a:	8bfa      	ldrh	r2, [r7, #30]
 801865c:	68bb      	ldr	r3, [r7, #8]
 801865e:	9301      	str	r3, [sp, #4]
 8018660:	8bbb      	ldrh	r3, [r7, #28]
 8018662:	9300      	str	r3, [sp, #0]
 8018664:	460b      	mov	r3, r1
 8018666:	2100      	movs	r1, #0
 8018668:	68f8      	ldr	r0, [r7, #12]
 801866a:	f7ff feca 	bl	8018402 <u8g2_DrawUTF8Lines>
 801866e:	4603      	mov	r3, r0
 8018670:	461a      	mov	r2, r3
 8018672:	8bfb      	ldrh	r3, [r7, #30]
 8018674:	4413      	add	r3, r2
 8018676:	83fb      	strh	r3, [r7, #30]
		
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 8018678:	8bfa      	ldrh	r2, [r7, #30]
 801867a:	8bbb      	ldrh	r3, [r7, #28]
 801867c:	1ad3      	subs	r3, r2, r3
 801867e:	b29a      	uxth	r2, r3
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	f993 308f 	ldrsb.w	r3, [r3, #143]	; 0x8f
 8018686:	b29b      	uxth	r3, r3
 8018688:	1ad3      	subs	r3, r2, r3
 801868a:	b29b      	uxth	r3, r3
 801868c:	3301      	adds	r3, #1
 801868e:	b29a      	uxth	r2, r3
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8018696:	2100      	movs	r1, #0
 8018698:	68f8      	ldr	r0, [r7, #12]
 801869a:	f7ff fc35 	bl	8017f08 <u8g2_DrawHLine>
		
	  yy += 3;
 801869e:	8bfb      	ldrh	r3, [r7, #30]
 80186a0:	3303      	adds	r3, #3
 80186a2:	83fb      	strh	r3, [r7, #30]
        }
        u8g2_DrawSelectionList(u8g2, &u8sl, yy, sl);
 80186a4:	8bfa      	ldrh	r2, [r7, #30]
 80186a6:	f107 0114 	add.w	r1, r7, #20
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	68f8      	ldr	r0, [r7, #12]
 80186ae:	f7ff ff3d 	bl	801852c <u8g2_DrawSelectionList>
          break;
        }
      }
#endif
  }
}
 80186b2:	bf00      	nop
 80186b4:	4618      	mov	r0, r3
 80186b6:	3720      	adds	r7, #32
 80186b8:	46bd      	mov	sp, r7
 80186ba:	bd80      	pop	{r7, pc}

080186bc <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80186bc:	b580      	push	{r7, lr}
 80186be:	b082      	sub	sp, #8
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	2200      	movs	r2, #0
 80186c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	2200      	movs	r2, #0
 80186d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80186ec:	685b      	ldr	r3, [r3, #4]
 80186ee:	6878      	ldr	r0, [r7, #4]
 80186f0:	4798      	blx	r3
}
 80186f2:	bf00      	nop
 80186f4:	3708      	adds	r7, #8
 80186f6:	46bd      	mov	sp, r7
 80186f8:	bd80      	pop	{r7, pc}

080186fa <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80186fa:	b580      	push	{r7, lr}
 80186fc:	b084      	sub	sp, #16
 80186fe:	af00      	add	r7, sp, #0
 8018700:	60f8      	str	r0, [r7, #12]
 8018702:	60b9      	str	r1, [r7, #8]
 8018704:	603b      	str	r3, [r7, #0]
 8018706:	4613      	mov	r3, r2
 8018708:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	2200      	movs	r2, #0
 801870e:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	683a      	ldr	r2, [r7, #0]
 8018714:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	68ba      	ldr	r2, [r7, #8]
 801871a:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	79fa      	ldrb	r2, [r7, #7]
 8018720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	2200      	movs	r2, #0
 8018728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	2200      	movs	r2, #0
 8018730:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	2200      	movs	r2, #0
 8018738:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	2201      	movs	r2, #1
 8018740:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	2201      	movs	r2, #1
 8018748:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	69ba      	ldr	r2, [r7, #24]
 8018750:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	68f8      	ldr	r0, [r7, #12]
 801875a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 801875c:	68f8      	ldr	r0, [r7, #12]
 801875e:	f7ff ffad 	bl	80186bc <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8018762:	68f8      	ldr	r0, [r7, #12]
 8018764:	f7ff fa38 	bl	8017bd8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	2200      	movs	r2, #0
 801876c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8018770:	bf00      	nop
 8018772:	3710      	adds	r7, #16
 8018774:	46bd      	mov	sp, r7
 8018776:	bd80      	pop	{r7, pc}

08018778 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8018778:	b480      	push	{r7}
 801877a:	b085      	sub	sp, #20
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801878c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 801878e:	89fb      	ldrh	r3, [r7, #14]
 8018790:	00db      	lsls	r3, r3, #3
 8018792:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	89fa      	ldrh	r2, [r7, #14]
 8018798:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 801879a:	68bb      	ldr	r3, [r7, #8]
 801879c:	7c1b      	ldrb	r3, [r3, #16]
 801879e:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80187a0:	89fb      	ldrh	r3, [r7, #14]
 80187a2:	00db      	lsls	r3, r3, #3
 80187a4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	89fa      	ldrh	r2, [r7, #14]
 80187aa:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80187b2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80187b4:	89fb      	ldrh	r3, [r7, #14]
 80187b6:	00db      	lsls	r3, r3, #3
 80187b8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	89fa      	ldrh	r2, [r7, #14]
 80187be:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80187c6:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80187c8:	89fb      	ldrh	r3, [r7, #14]
 80187ca:	687a      	ldr	r2, [r7, #4]
 80187cc:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80187d0:	4413      	add	r3, r2
 80187d2:	68ba      	ldr	r2, [r7, #8]
 80187d4:	7c52      	ldrb	r2, [r2, #17]
 80187d6:	4293      	cmp	r3, r2
 80187d8:	dd08      	ble.n	80187ec <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80187da:	68bb      	ldr	r3, [r7, #8]
 80187dc:	7c5b      	ldrb	r3, [r3, #17]
 80187de:	b29a      	uxth	r2, r3
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80187e6:	b29b      	uxth	r3, r3
 80187e8:	1ad3      	subs	r3, r2, r3
 80187ea:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80187ec:	89fb      	ldrh	r3, [r7, #14]
 80187ee:	00db      	lsls	r3, r3, #3
 80187f0:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 801880e:	89fb      	ldrh	r3, [r7, #14]
 8018810:	4413      	add	r3, r2
 8018812:	b29a      	uxth	r2, r3
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 801881a:	68bb      	ldr	r3, [r7, #8]
 801881c:	8a9a      	ldrh	r2, [r3, #20]
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8018824:	68bb      	ldr	r3, [r7, #8]
 8018826:	8ada      	ldrh	r2, [r3, #22]
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 801882e:	bf00      	nop
 8018830:	3714      	adds	r7, #20
 8018832:	46bd      	mov	sp, r7
 8018834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018838:	4770      	bx	lr

0801883a <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 801883a:	b580      	push	{r7, lr}
 801883c:	b084      	sub	sp, #16
 801883e:	af02      	add	r7, sp, #8
 8018840:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801885a:	9300      	str	r3, [sp, #0]
 801885c:	4603      	mov	r3, r0
 801885e:	6878      	ldr	r0, [r7, #4]
 8018860:	f7ff fc83 	bl	801816a <u8g2_IsIntersection>
 8018864:	4603      	mov	r3, r0
 8018866:	2b00      	cmp	r3, #0
 8018868:	d104      	bne.n	8018874 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	2200      	movs	r2, #0
 801886e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8018872:	e03b      	b.n	80188ec <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	2201      	movs	r2, #1
 8018878:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018888:	429a      	cmp	r2, r3
 801888a:	d205      	bcs.n	8018898 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80188a4:	429a      	cmp	r2, r3
 80188a6:	d905      	bls.n	80188b4 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d205      	bcs.n	80188d0 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80188dc:	429a      	cmp	r2, r3
 80188de:	d905      	bls.n	80188ec <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80188ec:	bf00      	nop
 80188ee:	3708      	adds	r7, #8
 80188f0:	46bd      	mov	sp, r7
 80188f2:	bd80      	pop	{r7, pc}

080188f4 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b082      	sub	sp, #8
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80188fc:	6878      	ldr	r0, [r7, #4]
 80188fe:	f7ff ff3b 	bl	8018778 <u8g2_update_dimension_common>
}
 8018902:	bf00      	nop
 8018904:	3708      	adds	r7, #8
 8018906:	46bd      	mov	sp, r7
 8018908:	bd80      	pop	{r7, pc}

0801890a <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 801890a:	b580      	push	{r7, lr}
 801890c:	b082      	sub	sp, #8
 801890e:	af00      	add	r7, sp, #0
 8018910:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	2200      	movs	r2, #0
 8018916:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 801893e:	6878      	ldr	r0, [r7, #4]
 8018940:	f7ff ff7b 	bl	801883a <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8018944:	bf00      	nop
 8018946:	3708      	adds	r7, #8
 8018948:	46bd      	mov	sp, r7
 801894a:	bd80      	pop	{r7, pc}

0801894c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b086      	sub	sp, #24
 8018950:	af02      	add	r7, sp, #8
 8018952:	60f8      	str	r0, [r7, #12]
 8018954:	4608      	mov	r0, r1
 8018956:	4611      	mov	r1, r2
 8018958:	461a      	mov	r2, r3
 801895a:	4603      	mov	r3, r0
 801895c:	817b      	strh	r3, [r7, #10]
 801895e:	460b      	mov	r3, r1
 8018960:	813b      	strh	r3, [r7, #8]
 8018962:	4613      	mov	r3, r2
 8018964:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8018966:	88f8      	ldrh	r0, [r7, #6]
 8018968:	893a      	ldrh	r2, [r7, #8]
 801896a:	8979      	ldrh	r1, [r7, #10]
 801896c:	7e3b      	ldrb	r3, [r7, #24]
 801896e:	9300      	str	r3, [sp, #0]
 8018970:	4603      	mov	r3, r0
 8018972:	68f8      	ldr	r0, [r7, #12]
 8018974:	f7ff fa1c 	bl	8017db0 <u8g2_draw_hv_line_2dir>
}
 8018978:	bf00      	nop
 801897a:	3710      	adds	r7, #16
 801897c:	46bd      	mov	sp, r7
 801897e:	bd80      	pop	{r7, pc}

08018980 <u8x8_stm32_gpio_and_delay>:
extern SPI_HandleTypeDef hspi2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
    U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
    U8X8_UNUSED void *arg_ptr)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b084      	sub	sp, #16
 8018984:	af00      	add	r7, sp, #0
 8018986:	60f8      	str	r0, [r7, #12]
 8018988:	607b      	str	r3, [r7, #4]
 801898a:	460b      	mov	r3, r1
 801898c:	72fb      	strb	r3, [r7, #11]
 801898e:	4613      	mov	r3, r2
 8018990:	72bb      	strb	r3, [r7, #10]
    switch (msg)
 8018992:	7afb      	ldrb	r3, [r7, #11]
 8018994:	3b28      	subs	r3, #40	; 0x28
 8018996:	2b23      	cmp	r3, #35	; 0x23
 8018998:	d852      	bhi.n	8018a40 <u8x8_stm32_gpio_and_delay+0xc0>
 801899a:	a201      	add	r2, pc, #4	; (adr r2, 80189a0 <u8x8_stm32_gpio_and_delay+0x20>)
 801899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189a0:	08018a41 	.word	0x08018a41
 80189a4:	08018a41 	.word	0x08018a41
 80189a8:	08018a41 	.word	0x08018a41
 80189ac:	08018a41 	.word	0x08018a41
 80189b0:	08018a41 	.word	0x08018a41
 80189b4:	08018a41 	.word	0x08018a41
 80189b8:	08018a41 	.word	0x08018a41
 80189bc:	08018a41 	.word	0x08018a41
 80189c0:	08018a41 	.word	0x08018a41
 80189c4:	08018a41 	.word	0x08018a41
 80189c8:	08018a41 	.word	0x08018a41
 80189cc:	08018a41 	.word	0x08018a41
 80189d0:	08018a41 	.word	0x08018a41
 80189d4:	08018a41 	.word	0x08018a41
 80189d8:	08018a41 	.word	0x08018a41
 80189dc:	08018a41 	.word	0x08018a41
 80189e0:	08018a41 	.word	0x08018a41
 80189e4:	08018a41 	.word	0x08018a41
 80189e8:	08018a41 	.word	0x08018a41
 80189ec:	08018a41 	.word	0x08018a41
 80189f0:	08018a41 	.word	0x08018a41
 80189f4:	08018a41 	.word	0x08018a41
 80189f8:	08018a41 	.word	0x08018a41
 80189fc:	08018a41 	.word	0x08018a41
 8018a00:	08018a41 	.word	0x08018a41
 8018a04:	08018a41 	.word	0x08018a41
 8018a08:	08018a41 	.word	0x08018a41
 8018a0c:	08018a41 	.word	0x08018a41
 8018a10:	08018a41 	.word	0x08018a41
 8018a14:	08018a41 	.word	0x08018a41
 8018a18:	08018a41 	.word	0x08018a41
 8018a1c:	08018a41 	.word	0x08018a41
 8018a20:	08018a41 	.word	0x08018a41
 8018a24:	08018a31 	.word	0x08018a31
 8018a28:	08018a41 	.word	0x08018a41
 8018a2c:	08018a41 	.word	0x08018a41
//            vTaskDelay(arg_int*1000);
//            osDelay(arg_int);
//            delay_ms(arg_int);
            break;
        case U8X8_MSG_GPIO_CS: /* Chip select signal control, but it did not seem to dim */
        	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, (GPIO_PinState)arg_int);
 8018a30:	7abb      	ldrb	r3, [r7, #10]
 8018a32:	461a      	mov	r2, r3
 8018a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018a38:	4804      	ldr	r0, [pc, #16]	; (8018a4c <u8x8_stm32_gpio_and_delay+0xcc>)
 8018a3a:	f7fb f8df 	bl	8013bfc <HAL_GPIO_WritePin>
            break;
 8018a3e:	bf00      	nop
        case U8X8_MSG_GPIO_DC: /* Set the DC pin, pin control DC transmission data or command */
            break;
        case U8X8_MSG_GPIO_RESET: /* Reset the GPIO */
            break;
    }
    return 1;
 8018a40:	2301      	movs	r3, #1
}
 8018a42:	4618      	mov	r0, r3
 8018a44:	3710      	adds	r7, #16
 8018a46:	46bd      	mov	sp, r7
 8018a48:	bd80      	pop	{r7, pc}
 8018a4a:	bf00      	nop
 8018a4c:	40020400 	.word	0x40020400

08018a50 <u8g2Init>:

void u8g2Init(u8g2_t *u8g2)
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b082      	sub	sp, #8
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	6078      	str	r0, [r7, #4]
	u8g2_Setup_st7920_s_128x64_2(u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);  // Initialize u8g2 structure
 8018a58:	4b06      	ldr	r3, [pc, #24]	; (8018a74 <u8g2Init+0x24>)
 8018a5a:	4a07      	ldr	r2, [pc, #28]	; (8018a78 <u8g2Init+0x28>)
 8018a5c:	4907      	ldr	r1, [pc, #28]	; (8018a7c <u8g2Init+0x2c>)
 8018a5e:	6878      	ldr	r0, [r7, #4]
 8018a60:	f7fe fac4 	bl	8016fec <u8g2_Setup_st7920_s_128x64_2>
	u8g2_InitDisplay(u8g2); // initializes the selected chip, after initialization is completed, the display is turned off
 8018a64:	6878      	ldr	r0, [r7, #4]
 8018a66:	f000 fba9 	bl	80191bc <u8x8_InitDisplay>
//	u8g2_SetPowerSave(u8g2, 0); // turn on the monitor
}
 8018a6a:	bf00      	nop
 8018a6c:	3708      	adds	r7, #8
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd80      	pop	{r7, pc}
 8018a72:	bf00      	nop
 8018a74:	08018981 	.word	0x08018981
 8018a78:	08018a81 	.word	0x08018a81
 8018a7c:	0802a56c 	.word	0x0802a56c

08018a80 <u8x8_byte_4wire_hw_spi>:
uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,void *arg_ptr)
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b084      	sub	sp, #16
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	60f8      	str	r0, [r7, #12]
 8018a88:	607b      	str	r3, [r7, #4]
 8018a8a:	460b      	mov	r3, r1
 8018a8c:	72fb      	strb	r3, [r7, #11]
 8018a8e:	4613      	mov	r3, r2
 8018a90:	72bb      	strb	r3, [r7, #10]
    switch (msg)
 8018a92:	7afb      	ldrb	r3, [r7, #11]
 8018a94:	3b14      	subs	r3, #20
 8018a96:	2b0c      	cmp	r3, #12
 8018a98:	d833      	bhi.n	8018b02 <u8x8_byte_4wire_hw_spi+0x82>
 8018a9a:	a201      	add	r2, pc, #4	; (adr r2, 8018aa0 <u8x8_byte_4wire_hw_spi+0x20>)
 8018a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018aa0:	08018b07 	.word	0x08018b07
 8018aa4:	08018b03 	.word	0x08018b03
 8018aa8:	08018b03 	.word	0x08018b03
 8018aac:	08018ad5 	.word	0x08018ad5
 8018ab0:	08018ae7 	.word	0x08018ae7
 8018ab4:	08018af5 	.word	0x08018af5
 8018ab8:	08018b03 	.word	0x08018b03
 8018abc:	08018b03 	.word	0x08018b03
 8018ac0:	08018b03 	.word	0x08018b03
 8018ac4:	08018b03 	.word	0x08018b03
 8018ac8:	08018b03 	.word	0x08018b03
 8018acc:	08018b03 	.word	0x08018b03
 8018ad0:	08018b07 	.word	0x08018b07
    {
        case U8X8_MSG_BYTE_SEND: /* Bytes of data transmitted through the SPI arg_int */
           HAL_SPI_Transmit(&hspi2, (uint8_t *) arg_ptr, arg_int, 10000); /* Note that to manage its own chip select signal */
 8018ad4:	7abb      	ldrb	r3, [r7, #10]
 8018ad6:	b29a      	uxth	r2, r3
 8018ad8:	f242 7310 	movw	r3, #10000	; 0x2710
 8018adc:	6879      	ldr	r1, [r7, #4]
 8018ade:	480d      	ldr	r0, [pc, #52]	; (8018b14 <u8x8_byte_4wire_hw_spi+0x94>)
 8018ae0:	f7fc ff0d 	bl	80158fe <HAL_SPI_Transmit>
            break;
 8018ae4:	e010      	b.n	8018b08 <u8x8_byte_4wire_hw_spi+0x88>
        case U8X8_MSG_BYTE_INIT: /* Initialize function, here I have not filled out the SPI initialization */
            break;
        case U8X8_MSG_BYTE_SET_DC: /* Set the DC pin, pin control DC transmission data or command */
            break;
        case U8X8_MSG_BYTE_START_TRANSFER: /* Before starting the transfer operation will be performed, if the software using the chip select can be controlled here */
        	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, (GPIO_PinState)GPIO_PIN_SET);
 8018ae6:	2201      	movs	r2, #1
 8018ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018aec:	480a      	ldr	r0, [pc, #40]	; (8018b18 <u8x8_byte_4wire_hw_spi+0x98>)
 8018aee:	f7fb f885 	bl	8013bfc <HAL_GPIO_WritePin>
            break;
 8018af2:	e009      	b.n	8018b08 <u8x8_byte_4wire_hw_spi+0x88>
        case U8X8_MSG_BYTE_END_TRANSFER: /* Operation performed after transmission, the use of the software if the chip select can be controlled here */
        	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, (GPIO_PinState)GPIO_PIN_RESET);
 8018af4:	2200      	movs	r2, #0
 8018af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018afa:	4807      	ldr	r0, [pc, #28]	; (8018b18 <u8x8_byte_4wire_hw_spi+0x98>)
 8018afc:	f7fb f87e 	bl	8013bfc <HAL_GPIO_WritePin>
            break;
 8018b00:	e002      	b.n	8018b08 <u8x8_byte_4wire_hw_spi+0x88>
        default:
            return 0;
 8018b02:	2300      	movs	r3, #0
 8018b04:	e001      	b.n	8018b0a <u8x8_byte_4wire_hw_spi+0x8a>
            break;
 8018b06:	bf00      	nop
    }
    return 1;
 8018b08:	2301      	movs	r3, #1
}
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	3710      	adds	r7, #16
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}
 8018b12:	bf00      	nop
 8018b14:	20004360 	.word	0x20004360
 8018b18:	40020400 	.word	0x40020400

08018b1c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8018b1c:	b480      	push	{r7}
 8018b1e:	b083      	sub	sp, #12
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	2200      	movs	r2, #0
 8018b28:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8018b2c:	bf00      	nop
 8018b2e:	370c      	adds	r7, #12
 8018b30:	46bd      	mov	sp, r7
 8018b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b36:	4770      	bx	lr

08018b38 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8018b38:	b480      	push	{r7}
 8018b3a:	b083      	sub	sp, #12
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
 8018b40:	460b      	mov	r3, r1
 8018b42:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8018b44:	78fb      	ldrb	r3, [r7, #3]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d002      	beq.n	8018b50 <u8x8_ascii_next+0x18>
 8018b4a:	78fb      	ldrb	r3, [r7, #3]
 8018b4c:	2b0a      	cmp	r3, #10
 8018b4e:	d102      	bne.n	8018b56 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8018b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b54:	e001      	b.n	8018b5a <u8x8_ascii_next+0x22>
  return b;
 8018b56:	78fb      	ldrb	r3, [r7, #3]
 8018b58:	b29b      	uxth	r3, r3
}
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	370c      	adds	r7, #12
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b64:	4770      	bx	lr

08018b66 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8018b66:	b480      	push	{r7}
 8018b68:	b083      	sub	sp, #12
 8018b6a:	af00      	add	r7, sp, #0
 8018b6c:	6078      	str	r0, [r7, #4]
 8018b6e:	460b      	mov	r3, r1
 8018b70:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8018b72:	78fb      	ldrb	r3, [r7, #3]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d002      	beq.n	8018b7e <u8x8_utf8_next+0x18>
 8018b78:	78fb      	ldrb	r3, [r7, #3]
 8018b7a:	2b0a      	cmp	r3, #10
 8018b7c:	d102      	bne.n	8018b84 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8018b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b82:	e06e      	b.n	8018c62 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d145      	bne.n	8018c1a <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8018b8e:	78fb      	ldrb	r3, [r7, #3]
 8018b90:	2bfb      	cmp	r3, #251	; 0xfb
 8018b92:	d908      	bls.n	8018ba6 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	2205      	movs	r2, #5
 8018b98:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8018b9c:	78fb      	ldrb	r3, [r7, #3]
 8018b9e:	f003 0301 	and.w	r3, r3, #1
 8018ba2:	70fb      	strb	r3, [r7, #3]
 8018ba4:	e032      	b.n	8018c0c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8018ba6:	78fb      	ldrb	r3, [r7, #3]
 8018ba8:	2bf7      	cmp	r3, #247	; 0xf7
 8018baa:	d908      	bls.n	8018bbe <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2204      	movs	r2, #4
 8018bb0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8018bb4:	78fb      	ldrb	r3, [r7, #3]
 8018bb6:	f003 0303 	and.w	r3, r3, #3
 8018bba:	70fb      	strb	r3, [r7, #3]
 8018bbc:	e026      	b.n	8018c0c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8018bbe:	78fb      	ldrb	r3, [r7, #3]
 8018bc0:	2bef      	cmp	r3, #239	; 0xef
 8018bc2:	d908      	bls.n	8018bd6 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	2203      	movs	r2, #3
 8018bc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8018bcc:	78fb      	ldrb	r3, [r7, #3]
 8018bce:	f003 0307 	and.w	r3, r3, #7
 8018bd2:	70fb      	strb	r3, [r7, #3]
 8018bd4:	e01a      	b.n	8018c0c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8018bd6:	78fb      	ldrb	r3, [r7, #3]
 8018bd8:	2bdf      	cmp	r3, #223	; 0xdf
 8018bda:	d908      	bls.n	8018bee <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	2202      	movs	r2, #2
 8018be0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8018be4:	78fb      	ldrb	r3, [r7, #3]
 8018be6:	f003 030f 	and.w	r3, r3, #15
 8018bea:	70fb      	strb	r3, [r7, #3]
 8018bec:	e00e      	b.n	8018c0c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8018bee:	78fb      	ldrb	r3, [r7, #3]
 8018bf0:	2bbf      	cmp	r3, #191	; 0xbf
 8018bf2:	d908      	bls.n	8018c06 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	2201      	movs	r2, #1
 8018bf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8018bfc:	78fb      	ldrb	r3, [r7, #3]
 8018bfe:	f003 031f 	and.w	r3, r3, #31
 8018c02:	70fb      	strb	r3, [r7, #3]
 8018c04:	e002      	b.n	8018c0c <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8018c06:	78fb      	ldrb	r3, [r7, #3]
 8018c08:	b29b      	uxth	r3, r3
 8018c0a:	e02a      	b.n	8018c62 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8018c0c:	78fb      	ldrb	r3, [r7, #3]
 8018c0e:	b29a      	uxth	r2, r3
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8018c14:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018c18:	e023      	b.n	8018c62 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8018c20:	3b01      	subs	r3, #1
 8018c22:	b2da      	uxtb	r2, r3
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	8c1b      	ldrh	r3, [r3, #32]
 8018c2e:	019b      	lsls	r3, r3, #6
 8018c30:	b29a      	uxth	r2, r3
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8018c36:	78fb      	ldrb	r3, [r7, #3]
 8018c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018c3c:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	8c1a      	ldrh	r2, [r3, #32]
 8018c42:	78fb      	ldrb	r3, [r7, #3]
 8018c44:	b29b      	uxth	r3, r3
 8018c46:	4313      	orrs	r3, r2
 8018c48:	b29a      	uxth	r2, r3
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d002      	beq.n	8018c5e <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8018c58:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018c5c:	e001      	b.n	8018c62 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	8c1b      	ldrh	r3, [r3, #32]
}
 8018c62:	4618      	mov	r0, r3
 8018c64:	370c      	adds	r7, #12
 8018c66:	46bd      	mov	sp, r7
 8018c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6c:	4770      	bx	lr

08018c6e <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8018c6e:	b590      	push	{r4, r7, lr}
 8018c70:	b085      	sub	sp, #20
 8018c72:	af00      	add	r7, sp, #0
 8018c74:	60f8      	str	r0, [r7, #12]
 8018c76:	460b      	mov	r3, r1
 8018c78:	607a      	str	r2, [r7, #4]
 8018c7a:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	691c      	ldr	r4, [r3, #16]
 8018c80:	7afa      	ldrb	r2, [r7, #11]
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	2117      	movs	r1, #23
 8018c86:	68f8      	ldr	r0, [r7, #12]
 8018c88:	47a0      	blx	r4
 8018c8a:	4603      	mov	r3, r0
}
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3714      	adds	r7, #20
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bd90      	pop	{r4, r7, pc}

08018c94 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b082      	sub	sp, #8
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
 8018c9c:	460b      	mov	r3, r1
 8018c9e:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8018ca0:	1cfb      	adds	r3, r7, #3
 8018ca2:	461a      	mov	r2, r3
 8018ca4:	2101      	movs	r1, #1
 8018ca6:	6878      	ldr	r0, [r7, #4]
 8018ca8:	f7ff ffe1 	bl	8018c6e <u8x8_byte_SendBytes>
 8018cac:	4603      	mov	r3, r0
}
 8018cae:	4618      	mov	r0, r3
 8018cb0:	3708      	adds	r7, #8
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	bd80      	pop	{r7, pc}

08018cb6 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8018cb6:	b590      	push	{r4, r7, lr}
 8018cb8:	b083      	sub	sp, #12
 8018cba:	af00      	add	r7, sp, #0
 8018cbc:	6078      	str	r0, [r7, #4]
 8018cbe:	460b      	mov	r3, r1
 8018cc0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	68dc      	ldr	r4, [r3, #12]
 8018cc6:	78fa      	ldrb	r2, [r7, #3]
 8018cc8:	2300      	movs	r3, #0
 8018cca:	2115      	movs	r1, #21
 8018ccc:	6878      	ldr	r0, [r7, #4]
 8018cce:	47a0      	blx	r4
 8018cd0:	4603      	mov	r3, r0
}
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	370c      	adds	r7, #12
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd90      	pop	{r4, r7, pc}

08018cda <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8018cda:	b590      	push	{r4, r7, lr}
 8018cdc:	b085      	sub	sp, #20
 8018cde:	af00      	add	r7, sp, #0
 8018ce0:	60f8      	str	r0, [r7, #12]
 8018ce2:	460b      	mov	r3, r1
 8018ce4:	607a      	str	r2, [r7, #4]
 8018ce6:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	68dc      	ldr	r4, [r3, #12]
 8018cec:	7afa      	ldrb	r2, [r7, #11]
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	2117      	movs	r1, #23
 8018cf2:	68f8      	ldr	r0, [r7, #12]
 8018cf4:	47a0      	blx	r4
 8018cf6:	4603      	mov	r3, r0
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	3714      	adds	r7, #20
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd90      	pop	{r4, r7, pc}

08018d00 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8018d00:	b590      	push	{r4, r7, lr}
 8018d02:	b083      	sub	sp, #12
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	68dc      	ldr	r4, [r3, #12]
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	2200      	movs	r2, #0
 8018d10:	2118      	movs	r1, #24
 8018d12:	6878      	ldr	r0, [r7, #4]
 8018d14:	47a0      	blx	r4
 8018d16:	4603      	mov	r3, r0
}
 8018d18:	4618      	mov	r0, r3
 8018d1a:	370c      	adds	r7, #12
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd90      	pop	{r4, r7, pc}

08018d20 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8018d20:	b590      	push	{r4, r7, lr}
 8018d22:	b083      	sub	sp, #12
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	68dc      	ldr	r4, [r3, #12]
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	2200      	movs	r2, #0
 8018d30:	2119      	movs	r1, #25
 8018d32:	6878      	ldr	r0, [r7, #4]
 8018d34:	47a0      	blx	r4
 8018d36:	4603      	mov	r3, r0
}
 8018d38:	4618      	mov	r0, r3
 8018d3a:	370c      	adds	r7, #12
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd90      	pop	{r4, r7, pc}

08018d40 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8018d40:	b590      	push	{r4, r7, lr}
 8018d42:	b085      	sub	sp, #20
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
 8018d48:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8018d4a:	683b      	ldr	r3, [r7, #0]
 8018d4c:	781b      	ldrb	r3, [r3, #0]
 8018d4e:	73fb      	strb	r3, [r7, #15]
    data++;
 8018d50:	683b      	ldr	r3, [r7, #0]
 8018d52:	3301      	adds	r3, #1
 8018d54:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8018d56:	7bfb      	ldrb	r3, [r7, #15]
 8018d58:	2bfe      	cmp	r3, #254	; 0xfe
 8018d5a:	d031      	beq.n	8018dc0 <u8x8_cad_SendSequence+0x80>
 8018d5c:	2bfe      	cmp	r3, #254	; 0xfe
 8018d5e:	dc3d      	bgt.n	8018ddc <u8x8_cad_SendSequence+0x9c>
 8018d60:	2b19      	cmp	r3, #25
 8018d62:	dc3b      	bgt.n	8018ddc <u8x8_cad_SendSequence+0x9c>
 8018d64:	2b18      	cmp	r3, #24
 8018d66:	da23      	bge.n	8018db0 <u8x8_cad_SendSequence+0x70>
 8018d68:	2b16      	cmp	r3, #22
 8018d6a:	dc02      	bgt.n	8018d72 <u8x8_cad_SendSequence+0x32>
 8018d6c:	2b15      	cmp	r3, #21
 8018d6e:	da03      	bge.n	8018d78 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8018d70:	e034      	b.n	8018ddc <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8018d72:	2b17      	cmp	r3, #23
 8018d74:	d00e      	beq.n	8018d94 <u8x8_cad_SendSequence+0x54>
	return;
 8018d76:	e031      	b.n	8018ddc <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	781b      	ldrb	r3, [r3, #0]
 8018d7c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	68dc      	ldr	r4, [r3, #12]
 8018d82:	7bba      	ldrb	r2, [r7, #14]
 8018d84:	7bf9      	ldrb	r1, [r7, #15]
 8018d86:	2300      	movs	r3, #0
 8018d88:	6878      	ldr	r0, [r7, #4]
 8018d8a:	47a0      	blx	r4
	  data++;
 8018d8c:	683b      	ldr	r3, [r7, #0]
 8018d8e:	3301      	adds	r3, #1
 8018d90:	603b      	str	r3, [r7, #0]
	  break;
 8018d92:	e022      	b.n	8018dda <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8018d94:	683b      	ldr	r3, [r7, #0]
 8018d96:	781b      	ldrb	r3, [r3, #0]
 8018d98:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8018d9a:	f107 030e 	add.w	r3, r7, #14
 8018d9e:	461a      	mov	r2, r3
 8018da0:	2101      	movs	r1, #1
 8018da2:	6878      	ldr	r0, [r7, #4]
 8018da4:	f7ff ff99 	bl	8018cda <u8x8_cad_SendData>
	  data++;
 8018da8:	683b      	ldr	r3, [r7, #0]
 8018daa:	3301      	adds	r3, #1
 8018dac:	603b      	str	r3, [r7, #0]
	  break;
 8018dae:	e014      	b.n	8018dda <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	68dc      	ldr	r4, [r3, #12]
 8018db4:	7bf9      	ldrb	r1, [r7, #15]
 8018db6:	2300      	movs	r3, #0
 8018db8:	2200      	movs	r2, #0
 8018dba:	6878      	ldr	r0, [r7, #4]
 8018dbc:	47a0      	blx	r4
	  break;
 8018dbe:	e00c      	b.n	8018dda <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8018dc0:	683b      	ldr	r3, [r7, #0]
 8018dc2:	781b      	ldrb	r3, [r3, #0]
 8018dc4:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8018dc6:	7bbb      	ldrb	r3, [r7, #14]
 8018dc8:	461a      	mov	r2, r3
 8018dca:	2129      	movs	r1, #41	; 0x29
 8018dcc:	6878      	ldr	r0, [r7, #4]
 8018dce:	f000 fa13 	bl	80191f8 <u8x8_gpio_call>
	  data++;
 8018dd2:	683b      	ldr	r3, [r7, #0]
 8018dd4:	3301      	adds	r3, #1
 8018dd6:	603b      	str	r3, [r7, #0]
	  break;
 8018dd8:	bf00      	nop
    cmd = *data;
 8018dda:	e7b6      	b.n	8018d4a <u8x8_cad_SendSequence+0xa>
	return;
 8018ddc:	bf00      	nop
    }
  }
}
 8018dde:	3714      	adds	r7, #20
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd90      	pop	{r4, r7, pc}

08018de4 <u8x8_cad_st7920_spi>:
}

/* cad procedure for the ST7920 in SPI mode */
/* u8x8_byte_SetDC is not used */
uint8_t u8x8_cad_st7920_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8018de4:	b590      	push	{r4, r7, lr}
 8018de6:	b089      	sub	sp, #36	; 0x24
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	60f8      	str	r0, [r7, #12]
 8018dec:	607b      	str	r3, [r7, #4]
 8018dee:	460b      	mov	r3, r1
 8018df0:	72fb      	strb	r3, [r7, #11]
 8018df2:	4613      	mov	r3, r2
 8018df4:	72bb      	strb	r3, [r7, #10]
  uint8_t b;
  uint8_t i;
  static uint8_t buf[16];
  uint8_t *ptr;
  
  switch(msg)
 8018df6:	7afb      	ldrb	r3, [r7, #11]
 8018df8:	3b14      	subs	r3, #20
 8018dfa:	2b05      	cmp	r3, #5
 8018dfc:	f200 80a8 	bhi.w	8018f50 <u8x8_cad_st7920_spi+0x16c>
 8018e00:	a201      	add	r2, pc, #4	; (adr r2, 8018e08 <u8x8_cad_st7920_spi+0x24>)
 8018e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e06:	bf00      	nop
 8018e08:	08018f3f 	.word	0x08018f3f
 8018e0c:	08018e21 	.word	0x08018e21
 8018e10:	08018e67 	.word	0x08018e67
 8018e14:	08018e8f 	.word	0x08018e8f
 8018e18:	08018f3f 	.word	0x08018f3f
 8018e1c:	08018f3f 	.word	0x08018f3f
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 8018e20:	21f8      	movs	r1, #248	; 0xf8
 8018e22:	68f8      	ldr	r0, [r7, #12]
 8018e24:	f7ff ff36 	bl	8018c94 <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8018e28:	2201      	movs	r2, #1
 8018e2a:	212c      	movs	r1, #44	; 0x2c
 8018e2c:	68f8      	ldr	r0, [r7, #12]
 8018e2e:	f000 f9e3 	bl	80191f8 <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 8018e32:	7abb      	ldrb	r3, [r7, #10]
 8018e34:	f023 030f 	bic.w	r3, r3, #15
 8018e38:	b2db      	uxtb	r3, r3
 8018e3a:	4619      	mov	r1, r3
 8018e3c:	68f8      	ldr	r0, [r7, #12]
 8018e3e:	f7ff ff29 	bl	8018c94 <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8018e42:	2201      	movs	r2, #1
 8018e44:	212c      	movs	r1, #44	; 0x2c
 8018e46:	68f8      	ldr	r0, [r7, #12]
 8018e48:	f000 f9d6 	bl	80191f8 <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 8018e4c:	7abb      	ldrb	r3, [r7, #10]
 8018e4e:	011b      	lsls	r3, r3, #4
 8018e50:	b2db      	uxtb	r3, r3
 8018e52:	4619      	mov	r1, r3
 8018e54:	68f8      	ldr	r0, [r7, #12]
 8018e56:	f7ff ff1d 	bl	8018c94 <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8018e5a:	2201      	movs	r2, #1
 8018e5c:	212c      	movs	r1, #44	; 0x2c
 8018e5e:	68f8      	ldr	r0, [r7, #12]
 8018e60:	f000 f9ca 	bl	80191f8 <u8x8_gpio_call>
      break;
 8018e64:	e076      	b.n	8018f54 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 8018e66:	21f8      	movs	r1, #248	; 0xf8
 8018e68:	68f8      	ldr	r0, [r7, #12]
 8018e6a:	f7ff ff13 	bl	8018c94 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 8018e6e:	7abb      	ldrb	r3, [r7, #10]
 8018e70:	f023 030f 	bic.w	r3, r3, #15
 8018e74:	b2db      	uxtb	r3, r3
 8018e76:	4619      	mov	r1, r3
 8018e78:	68f8      	ldr	r0, [r7, #12]
 8018e7a:	f7ff ff0b 	bl	8018c94 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 8018e7e:	7abb      	ldrb	r3, [r7, #10]
 8018e80:	011b      	lsls	r3, r3, #4
 8018e82:	b2db      	uxtb	r3, r3
 8018e84:	4619      	mov	r1, r3
 8018e86:	68f8      	ldr	r0, [r7, #12]
 8018e88:	f7ff ff04 	bl	8018c94 <u8x8_byte_SendByte>
      break;
 8018e8c:	e062      	b.n	8018f54 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_SEND_DATA:
    
      u8x8_byte_SendByte(u8x8, 0x0fa);
 8018e8e:	21fa      	movs	r1, #250	; 0xfa
 8018e90:	68f8      	ldr	r0, [r7, #12]
 8018e92:	f7ff feff 	bl	8018c94 <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8018e96:	2201      	movs	r2, #1
 8018e98:	212c      	movs	r1, #44	; 0x2c
 8018e9a:	68f8      	ldr	r0, [r7, #12]
 8018e9c:	f000 f9ac 	bl	80191f8 <u8x8_gpio_call>

      /* this loop should be optimized: multiple bytes should be sent */
      /* u8x8_byte_SendBytes(u8x8, arg_int, arg_ptr); */
      data = (uint8_t *)arg_ptr;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	61fb      	str	r3, [r7, #28]
    
      /* the following loop increases speed by 20% */
      while( arg_int >= 8 )
 8018ea4:	e026      	b.n	8018ef4 <u8x8_cad_st7920_spi+0x110>
      {
	i = 8;
 8018ea6:	2308      	movs	r3, #8
 8018ea8:	76fb      	strb	r3, [r7, #27]
	ptr = buf;
 8018eaa:	4b2d      	ldr	r3, [pc, #180]	; (8018f60 <u8x8_cad_st7920_spi+0x17c>)
 8018eac:	617b      	str	r3, [r7, #20]
	do
	{
	  b = *data++;
 8018eae:	69fb      	ldr	r3, [r7, #28]
 8018eb0:	1c5a      	adds	r2, r3, #1
 8018eb2:	61fa      	str	r2, [r7, #28]
 8018eb4:	781b      	ldrb	r3, [r3, #0]
 8018eb6:	74fb      	strb	r3, [r7, #19]
	  *ptr++= b & 0x0f0;
 8018eb8:	697b      	ldr	r3, [r7, #20]
 8018eba:	1c5a      	adds	r2, r3, #1
 8018ebc:	617a      	str	r2, [r7, #20]
 8018ebe:	7cfa      	ldrb	r2, [r7, #19]
 8018ec0:	f022 020f 	bic.w	r2, r2, #15
 8018ec4:	b2d2      	uxtb	r2, r2
 8018ec6:	701a      	strb	r2, [r3, #0]
	  b <<= 4;
 8018ec8:	7cfb      	ldrb	r3, [r7, #19]
 8018eca:	011b      	lsls	r3, r3, #4
 8018ecc:	74fb      	strb	r3, [r7, #19]
	  *ptr++= b;
 8018ece:	697b      	ldr	r3, [r7, #20]
 8018ed0:	1c5a      	adds	r2, r3, #1
 8018ed2:	617a      	str	r2, [r7, #20]
 8018ed4:	7cfa      	ldrb	r2, [r7, #19]
 8018ed6:	701a      	strb	r2, [r3, #0]
	  i--;
 8018ed8:	7efb      	ldrb	r3, [r7, #27]
 8018eda:	3b01      	subs	r3, #1
 8018edc:	76fb      	strb	r3, [r7, #27]
	} while( i > 0 );
 8018ede:	7efb      	ldrb	r3, [r7, #27]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d1e4      	bne.n	8018eae <u8x8_cad_st7920_spi+0xca>
	arg_int -= 8;
 8018ee4:	7abb      	ldrb	r3, [r7, #10]
 8018ee6:	3b08      	subs	r3, #8
 8018ee8:	72bb      	strb	r3, [r7, #10]
	u8x8_byte_SendBytes(u8x8, 16, buf); 
 8018eea:	4a1d      	ldr	r2, [pc, #116]	; (8018f60 <u8x8_cad_st7920_spi+0x17c>)
 8018eec:	2110      	movs	r1, #16
 8018eee:	68f8      	ldr	r0, [r7, #12]
 8018ef0:	f7ff febd 	bl	8018c6e <u8x8_byte_SendBytes>
      while( arg_int >= 8 )
 8018ef4:	7abb      	ldrb	r3, [r7, #10]
 8018ef6:	2b07      	cmp	r3, #7
 8018ef8:	d8d5      	bhi.n	8018ea6 <u8x8_cad_st7920_spi+0xc2>
      }
      
    
      while( arg_int > 0 )
 8018efa:	e017      	b.n	8018f2c <u8x8_cad_st7920_spi+0x148>
      {
	b = *data;
 8018efc:	69fb      	ldr	r3, [r7, #28]
 8018efe:	781b      	ldrb	r3, [r3, #0]
 8018f00:	74fb      	strb	r3, [r7, #19]
	u8x8_byte_SendByte(u8x8, b & 0x0f0);
 8018f02:	7cfb      	ldrb	r3, [r7, #19]
 8018f04:	f023 030f 	bic.w	r3, r3, #15
 8018f08:	b2db      	uxtb	r3, r3
 8018f0a:	4619      	mov	r1, r3
 8018f0c:	68f8      	ldr	r0, [r7, #12]
 8018f0e:	f7ff fec1 	bl	8018c94 <u8x8_byte_SendByte>
	u8x8_byte_SendByte(u8x8, b << 4);
 8018f12:	7cfb      	ldrb	r3, [r7, #19]
 8018f14:	011b      	lsls	r3, r3, #4
 8018f16:	b2db      	uxtb	r3, r3
 8018f18:	4619      	mov	r1, r3
 8018f1a:	68f8      	ldr	r0, [r7, #12]
 8018f1c:	f7ff feba 	bl	8018c94 <u8x8_byte_SendByte>
	data++;
 8018f20:	69fb      	ldr	r3, [r7, #28]
 8018f22:	3301      	adds	r3, #1
 8018f24:	61fb      	str	r3, [r7, #28]
	arg_int--;
 8018f26:	7abb      	ldrb	r3, [r7, #10]
 8018f28:	3b01      	subs	r3, #1
 8018f2a:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8018f2c:	7abb      	ldrb	r3, [r7, #10]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d1e4      	bne.n	8018efc <u8x8_cad_st7920_spi+0x118>
      }
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8018f32:	2201      	movs	r2, #1
 8018f34:	212c      	movs	r1, #44	; 0x2c
 8018f36:	68f8      	ldr	r0, [r7, #12]
 8018f38:	f000 f95e 	bl	80191f8 <u8x8_gpio_call>
      break;
 8018f3c:	e00a      	b.n	8018f54 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	691c      	ldr	r4, [r3, #16]
 8018f42:	7aba      	ldrb	r2, [r7, #10]
 8018f44:	7af9      	ldrb	r1, [r7, #11]
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	68f8      	ldr	r0, [r7, #12]
 8018f4a:	47a0      	blx	r4
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	e002      	b.n	8018f56 <u8x8_cad_st7920_spi+0x172>
    default:
      return 0;
 8018f50:	2300      	movs	r3, #0
 8018f52:	e000      	b.n	8018f56 <u8x8_cad_st7920_spi+0x172>
  }
  return 1;
 8018f54:	2301      	movs	r3, #1
}
 8018f56:	4618      	mov	r0, r3
 8018f58:	3724      	adds	r7, #36	; 0x24
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	bd90      	pop	{r4, r7, pc}
 8018f5e:	bf00      	nop
 8018f60:	20000524 	.word	0x20000524

08018f64 <u8x8_d_st7920_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_st7920_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b088      	sub	sp, #32
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	60f8      	str	r0, [r7, #12]
 8018f6c:	607b      	str	r3, [r7, #4]
 8018f6e:	460b      	mov	r3, r1
 8018f70:	72fb      	strb	r3, [r7, #11]
 8018f72:	4613      	mov	r3, r2
 8018f74:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c, i;
  uint8_t *ptr;
  switch(msg)
 8018f76:	7afb      	ldrb	r3, [r7, #11]
 8018f78:	2b0f      	cmp	r3, #15
 8018f7a:	d01b      	beq.n	8018fb4 <u8x8_d_st7920_common+0x50>
 8018f7c:	2b0f      	cmp	r3, #15
 8018f7e:	dc6e      	bgt.n	801905e <u8x8_d_st7920_common+0xfa>
 8018f80:	2b0a      	cmp	r3, #10
 8018f82:	d002      	beq.n	8018f8a <u8x8_d_st7920_common+0x26>
 8018f84:	2b0b      	cmp	r3, #11
 8018f86:	d008      	beq.n	8018f9a <u8x8_d_st7920_common+0x36>
 8018f88:	e069      	b.n	801905e <u8x8_d_st7920_common+0xfa>
    /*
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8018f8a:	68f8      	ldr	r0, [r7, #12]
 8018f8c:	f000 f8a8 	bl	80190e0 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_init_seq);
 8018f90:	4936      	ldr	r1, [pc, #216]	; (801906c <u8x8_d_st7920_common+0x108>)
 8018f92:	68f8      	ldr	r0, [r7, #12]
 8018f94:	f7ff fed4 	bl	8018d40 <u8x8_cad_SendSequence>
      break;
 8018f98:	e063      	b.n	8019062 <u8x8_d_st7920_common+0xfe>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8018f9a:	7abb      	ldrb	r3, [r7, #10]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d104      	bne.n	8018faa <u8x8_d_st7920_common+0x46>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave0_seq);
 8018fa0:	4933      	ldr	r1, [pc, #204]	; (8019070 <u8x8_d_st7920_common+0x10c>)
 8018fa2:	68f8      	ldr	r0, [r7, #12]
 8018fa4:	f7ff fecc 	bl	8018d40 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
      break;
 8018fa8:	e05b      	b.n	8019062 <u8x8_d_st7920_common+0xfe>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
 8018faa:	4932      	ldr	r1, [pc, #200]	; (8019074 <u8x8_d_st7920_common+0x110>)
 8018fac:	68f8      	ldr	r0, [r7, #12]
 8018fae:	f7ff fec7 	bl	8018d40 <u8x8_cad_SendSequence>
      break;
 8018fb2:	e056      	b.n	8019062 <u8x8_d_st7920_common+0xfe>
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	799b      	ldrb	r3, [r3, #6]
 8018fb8:	77bb      	strb	r3, [r7, #30]
      y*=8;
 8018fba:	7fbb      	ldrb	r3, [r7, #30]
 8018fbc:	00db      	lsls	r3, r3, #3
 8018fbe:	77bb      	strb	r3, [r7, #30]
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	795b      	ldrb	r3, [r3, #5]
 8018fc4:	77fb      	strb	r3, [r7, #31]
      x /= 2;		/* not sure whether this is a clever idea, problem is, the ST7920 can address only every second tile */
 8018fc6:	7ffb      	ldrb	r3, [r7, #31]
 8018fc8:	085b      	lsrs	r3, r3, #1
 8018fca:	77fb      	strb	r3, [r7, #31]
    
      if ( y >= 32 )	/* this is the adjustment for 128x64 displays */
 8018fcc:	7fbb      	ldrb	r3, [r7, #30]
 8018fce:	2b1f      	cmp	r3, #31
 8018fd0:	d905      	bls.n	8018fde <u8x8_d_st7920_common+0x7a>
      {
	y-=32;
 8018fd2:	7fbb      	ldrb	r3, [r7, #30]
 8018fd4:	3b20      	subs	r3, #32
 8018fd6:	77bb      	strb	r3, [r7, #30]
	x+=8;
 8018fd8:	7ffb      	ldrb	r3, [r7, #31]
 8018fda:	3308      	adds	r3, #8
 8018fdc:	77fb      	strb	r3, [r7, #31]
      }
    
      u8x8_cad_StartTransfer(u8x8);
 8018fde:	68f8      	ldr	r0, [r7, #12]
 8018fe0:	f7ff fe8e 	bl	8018d00 <u8x8_cad_StartTransfer>
	"cnt" includes the number of horizontal bytes. width is equal to cnt*8
	Also important: Width must be a multiple of 16 (ST7920 requirement), so cnt must be even.
	
	TODO: Consider arg_int, however arg_int is not used by u8g2
      */
      c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	791b      	ldrb	r3, [r3, #4]
 8018fe8:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;	/* data ptr to the tiles */
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	61bb      	str	r3, [r7, #24]
      /* The following byte is sent to allow the ST7920 to sync up with the data */
      /* it solves some issues with garbage data */
      u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
 8018ff0:	213e      	movs	r1, #62	; 0x3e
 8018ff2:	68f8      	ldr	r0, [r7, #12]
 8018ff4:	f7ff fe5f 	bl	8018cb6 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode, issue 487 */
 8018ff8:	213e      	movs	r1, #62	; 0x3e
 8018ffa:	68f8      	ldr	r0, [r7, #12]
 8018ffc:	f7ff fe5b 	bl	8018cb6 <u8x8_cad_SendCmd>
      for( i = 0; i < 8; i++ )
 8019000:	2300      	movs	r3, #0
 8019002:	777b      	strb	r3, [r7, #29]
 8019004:	e024      	b.n	8019050 <u8x8_d_st7920_common+0xec>
      {
	//u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
	u8x8_cad_SendCmd(u8x8, 0x080 | (y+i) );      /* y pos  */
 8019006:	7fba      	ldrb	r2, [r7, #30]
 8019008:	7f7b      	ldrb	r3, [r7, #29]
 801900a:	4413      	add	r3, r2
 801900c:	b2db      	uxtb	r3, r3
 801900e:	b25b      	sxtb	r3, r3
 8019010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019014:	b25b      	sxtb	r3, r3
 8019016:	b2db      	uxtb	r3, r3
 8019018:	4619      	mov	r1, r3
 801901a:	68f8      	ldr	r0, [r7, #12]
 801901c:	f7ff fe4b 	bl	8018cb6 <u8x8_cad_SendCmd>
	u8x8_cad_SendCmd(u8x8, 0x080 | x );      /* set x pos */
 8019020:	7ffb      	ldrb	r3, [r7, #31]
 8019022:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019026:	b2db      	uxtb	r3, r3
 8019028:	4619      	mov	r1, r3
 801902a:	68f8      	ldr	r0, [r7, #12]
 801902c:	f7ff fe43 	bl	8018cb6 <u8x8_cad_SendCmd>
	c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	791b      	ldrb	r3, [r3, #4]
 8019034:	75fb      	strb	r3, [r7, #23]

	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes, send one line of data */
 8019036:	7dfb      	ldrb	r3, [r7, #23]
 8019038:	69ba      	ldr	r2, [r7, #24]
 801903a:	4619      	mov	r1, r3
 801903c:	68f8      	ldr	r0, [r7, #12]
 801903e:	f7ff fe4c 	bl	8018cda <u8x8_cad_SendData>
	ptr += c;
 8019042:	7dfb      	ldrb	r3, [r7, #23]
 8019044:	69ba      	ldr	r2, [r7, #24]
 8019046:	4413      	add	r3, r2
 8019048:	61bb      	str	r3, [r7, #24]
      for( i = 0; i < 8; i++ )
 801904a:	7f7b      	ldrb	r3, [r7, #29]
 801904c:	3301      	adds	r3, #1
 801904e:	777b      	strb	r3, [r7, #29]
 8019050:	7f7b      	ldrb	r3, [r7, #29]
 8019052:	2b07      	cmp	r3, #7
 8019054:	d9d7      	bls.n	8019006 <u8x8_d_st7920_common+0xa2>
	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
      }

      u8x8_cad_EndTransfer(u8x8);
 8019056:	68f8      	ldr	r0, [r7, #12]
 8019058:	f7ff fe62 	bl	8018d20 <u8x8_cad_EndTransfer>

      break;
 801905c:	e001      	b.n	8019062 <u8x8_d_st7920_common+0xfe>
    default:
      return 0;
 801905e:	2300      	movs	r3, #0
 8019060:	e000      	b.n	8019064 <u8x8_d_st7920_common+0x100>
  }
  return 1;
 8019062:	2301      	movs	r3, #1
}
 8019064:	4618      	mov	r0, r3
 8019066:	3720      	adds	r7, #32
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}
 801906c:	0802a578 	.word	0x0802a578
 8019070:	0802a58c 	.word	0x0802a58c
 8019074:	0802a594 	.word	0x0802a594

08019078 <u8x8_d_st7920_128x64>:
  }
  return 1;
}

uint8_t u8x8_d_st7920_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b084      	sub	sp, #16
 801907c:	af00      	add	r7, sp, #0
 801907e:	60f8      	str	r0, [r7, #12]
 8019080:	607b      	str	r3, [r7, #4]
 8019082:	460b      	mov	r3, r1
 8019084:	72fb      	strb	r3, [r7, #11]
 8019086:	4613      	mov	r3, r2
 8019088:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 801908a:	7afb      	ldrb	r3, [r7, #11]
 801908c:	2b09      	cmp	r3, #9
 801908e:	d106      	bne.n	801909e <u8x8_d_st7920_128x64+0x26>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7920_128x64_display_info);
 8019090:	4908      	ldr	r1, [pc, #32]	; (80190b4 <u8x8_d_st7920_128x64+0x3c>)
 8019092:	68f8      	ldr	r0, [r7, #12]
 8019094:	f000 f810 	bl	80190b8 <u8x8_d_helper_display_setup_memory>
      break;
 8019098:	bf00      	nop
    default:
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
  }
  return 1;
 801909a:	2301      	movs	r3, #1
 801909c:	e006      	b.n	80190ac <u8x8_d_st7920_128x64+0x34>
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
 801909e:	7aba      	ldrb	r2, [r7, #10]
 80190a0:	7af9      	ldrb	r1, [r7, #11]
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	68f8      	ldr	r0, [r7, #12]
 80190a6:	f7ff ff5d 	bl	8018f64 <u8x8_d_st7920_common>
 80190aa:	4603      	mov	r3, r0
}
 80190ac:	4618      	mov	r0, r3
 80190ae:	3710      	adds	r7, #16
 80190b0:	46bd      	mov	sp, r7
 80190b2:	bd80      	pop	{r7, pc}
 80190b4:	0802a5a0 	.word	0x0802a5a0

080190b8 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80190b8:	b480      	push	{r7}
 80190ba:	b083      	sub	sp, #12
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
 80190c0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	683a      	ldr	r2, [r7, #0]
 80190c6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	7c9a      	ldrb	r2, [r3, #18]
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80190d4:	bf00      	nop
 80190d6:	370c      	adds	r7, #12
 80190d8:	46bd      	mov	sp, r7
 80190da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190de:	4770      	bx	lr

080190e0 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80190e0:	b590      	push	{r4, r7, lr}
 80190e2:	b083      	sub	sp, #12
 80190e4:	af00      	add	r7, sp, #0
 80190e6:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	695c      	ldr	r4, [r3, #20]
 80190ec:	2300      	movs	r3, #0
 80190ee:	2200      	movs	r2, #0
 80190f0:	2128      	movs	r1, #40	; 0x28
 80190f2:	6878      	ldr	r0, [r7, #4]
 80190f4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	68dc      	ldr	r4, [r3, #12]
 80190fa:	2300      	movs	r3, #0
 80190fc:	2200      	movs	r2, #0
 80190fe:	2114      	movs	r1, #20
 8019100:	6878      	ldr	r0, [r7, #4]
 8019102:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8019104:	2201      	movs	r2, #1
 8019106:	214b      	movs	r1, #75	; 0x4b
 8019108:	6878      	ldr	r0, [r7, #4]
 801910a:	f000 f875 	bl	80191f8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	791b      	ldrb	r3, [r3, #4]
 8019114:	461a      	mov	r2, r3
 8019116:	2129      	movs	r1, #41	; 0x29
 8019118:	6878      	ldr	r0, [r7, #4]
 801911a:	f000 f86d 	bl	80191f8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 801911e:	2200      	movs	r2, #0
 8019120:	214b      	movs	r1, #75	; 0x4b
 8019122:	6878      	ldr	r0, [r7, #4]
 8019124:	f000 f868 	bl	80191f8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	791b      	ldrb	r3, [r3, #4]
 801912e:	461a      	mov	r2, r3
 8019130:	2129      	movs	r1, #41	; 0x29
 8019132:	6878      	ldr	r0, [r7, #4]
 8019134:	f000 f860 	bl	80191f8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8019138:	2201      	movs	r2, #1
 801913a:	214b      	movs	r1, #75	; 0x4b
 801913c:	6878      	ldr	r0, [r7, #4]
 801913e:	f000 f85b 	bl	80191f8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	795b      	ldrb	r3, [r3, #5]
 8019148:	461a      	mov	r2, r3
 801914a:	2129      	movs	r1, #41	; 0x29
 801914c:	6878      	ldr	r0, [r7, #4]
 801914e:	f000 f853 	bl	80191f8 <u8x8_gpio_call>
}    
 8019152:	bf00      	nop
 8019154:	370c      	adds	r7, #12
 8019156:	46bd      	mov	sp, r7
 8019158:	bd90      	pop	{r4, r7, pc}

0801915a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 801915a:	b590      	push	{r4, r7, lr}
 801915c:	b085      	sub	sp, #20
 801915e:	af00      	add	r7, sp, #0
 8019160:	6078      	str	r0, [r7, #4]
 8019162:	4608      	mov	r0, r1
 8019164:	4611      	mov	r1, r2
 8019166:	461a      	mov	r2, r3
 8019168:	4603      	mov	r3, r0
 801916a:	70fb      	strb	r3, [r7, #3]
 801916c:	460b      	mov	r3, r1
 801916e:	70bb      	strb	r3, [r7, #2]
 8019170:	4613      	mov	r3, r2
 8019172:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8019174:	78fb      	ldrb	r3, [r7, #3]
 8019176:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8019178:	78bb      	ldrb	r3, [r7, #2]
 801917a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 801917c:	787b      	ldrb	r3, [r7, #1]
 801917e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8019180:	6a3b      	ldr	r3, [r7, #32]
 8019182:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	689c      	ldr	r4, [r3, #8]
 8019188:	f107 0308 	add.w	r3, r7, #8
 801918c:	2201      	movs	r2, #1
 801918e:	210f      	movs	r1, #15
 8019190:	6878      	ldr	r0, [r7, #4]
 8019192:	47a0      	blx	r4
 8019194:	4603      	mov	r3, r0
}
 8019196:	4618      	mov	r0, r3
 8019198:	3714      	adds	r7, #20
 801919a:	46bd      	mov	sp, r7
 801919c:	bd90      	pop	{r4, r7, pc}

0801919e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 801919e:	b590      	push	{r4, r7, lr}
 80191a0:	b083      	sub	sp, #12
 80191a2:	af00      	add	r7, sp, #0
 80191a4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	689c      	ldr	r4, [r3, #8]
 80191aa:	2300      	movs	r3, #0
 80191ac:	2200      	movs	r2, #0
 80191ae:	2109      	movs	r1, #9
 80191b0:	6878      	ldr	r0, [r7, #4]
 80191b2:	47a0      	blx	r4
}
 80191b4:	bf00      	nop
 80191b6:	370c      	adds	r7, #12
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd90      	pop	{r4, r7, pc}

080191bc <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80191bc:	b590      	push	{r4, r7, lr}
 80191be:	b083      	sub	sp, #12
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	689c      	ldr	r4, [r3, #8]
 80191c8:	2300      	movs	r3, #0
 80191ca:	2200      	movs	r2, #0
 80191cc:	210a      	movs	r1, #10
 80191ce:	6878      	ldr	r0, [r7, #4]
 80191d0:	47a0      	blx	r4
}
 80191d2:	bf00      	nop
 80191d4:	370c      	adds	r7, #12
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bd90      	pop	{r4, r7, pc}

080191da <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80191da:	b590      	push	{r4, r7, lr}
 80191dc:	b083      	sub	sp, #12
 80191de:	af00      	add	r7, sp, #0
 80191e0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	689c      	ldr	r4, [r3, #8]
 80191e6:	2300      	movs	r3, #0
 80191e8:	2200      	movs	r2, #0
 80191ea:	2110      	movs	r1, #16
 80191ec:	6878      	ldr	r0, [r7, #4]
 80191ee:	47a0      	blx	r4
}
 80191f0:	bf00      	nop
 80191f2:	370c      	adds	r7, #12
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bd90      	pop	{r4, r7, pc}

080191f8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80191f8:	b590      	push	{r4, r7, lr}
 80191fa:	b083      	sub	sp, #12
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
 8019200:	460b      	mov	r3, r1
 8019202:	70fb      	strb	r3, [r7, #3]
 8019204:	4613      	mov	r3, r2
 8019206:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	695c      	ldr	r4, [r3, #20]
 801920c:	78ba      	ldrb	r2, [r7, #2]
 801920e:	78f9      	ldrb	r1, [r7, #3]
 8019210:	2300      	movs	r3, #0
 8019212:	6878      	ldr	r0, [r7, #4]
 8019214:	47a0      	blx	r4
}
 8019216:	bf00      	nop
 8019218:	370c      	adds	r7, #12
 801921a:	46bd      	mov	sp, r7
 801921c:	bd90      	pop	{r4, r7, pc}

0801921e <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 801921e:	b480      	push	{r7}
 8019220:	b085      	sub	sp, #20
 8019222:	af00      	add	r7, sp, #0
 8019224:	60f8      	str	r0, [r7, #12]
 8019226:	607b      	str	r3, [r7, #4]
 8019228:	460b      	mov	r3, r1
 801922a:	72fb      	strb	r3, [r7, #11]
 801922c:	4613      	mov	r3, r2
 801922e:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8019230:	2300      	movs	r3, #0
}
 8019232:	4618      	mov	r0, r3
 8019234:	3714      	adds	r7, #20
 8019236:	46bd      	mov	sp, r7
 8019238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923c:	4770      	bx	lr
	...

08019240 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8019240:	b480      	push	{r7}
 8019242:	b083      	sub	sp, #12
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	2200      	movs	r2, #0
 801924c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	4a11      	ldr	r2, [pc, #68]	; (8019298 <u8x8_SetupDefaults+0x58>)
 8019252:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	4a10      	ldr	r2, [pc, #64]	; (8019298 <u8x8_SetupDefaults+0x58>)
 8019258:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	4a0e      	ldr	r2, [pc, #56]	; (8019298 <u8x8_SetupDefaults+0x58>)
 801925e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	4a0d      	ldr	r2, [pc, #52]	; (8019298 <u8x8_SetupDefaults+0x58>)
 8019264:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	2200      	movs	r2, #0
 801926a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	2200      	movs	r2, #0
 8019272:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	2200      	movs	r2, #0
 801927a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	22ff      	movs	r2, #255	; 0xff
 8019280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	22ff      	movs	r2, #255	; 0xff
 8019288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 801928c:	bf00      	nop
 801928e:	370c      	adds	r7, #12
 8019290:	46bd      	mov	sp, r7
 8019292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019296:	4770      	bx	lr
 8019298:	0801921f 	.word	0x0801921f

0801929c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b084      	sub	sp, #16
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	60f8      	str	r0, [r7, #12]
 80192a4:	60b9      	str	r1, [r7, #8]
 80192a6:	607a      	str	r2, [r7, #4]
 80192a8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80192aa:	68f8      	ldr	r0, [r7, #12]
 80192ac:	f7ff ffc8 	bl	8019240 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	68ba      	ldr	r2, [r7, #8]
 80192b4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	687a      	ldr	r2, [r7, #4]
 80192ba:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	683a      	ldr	r2, [r7, #0]
 80192c0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	69ba      	ldr	r2, [r7, #24]
 80192c6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80192c8:	68f8      	ldr	r0, [r7, #12]
 80192ca:	f7ff ff68 	bl	801919e <u8x8_SetupMemory>
}
 80192ce:	bf00      	nop
 80192d0:	3710      	adds	r7, #16
 80192d2:	46bd      	mov	sp, r7
 80192d4:	bd80      	pop	{r7, pc}

080192d6 <u8x8_GetStringLineCnt>:
*/

#include "u8x8.h"

uint8_t u8x8_GetStringLineCnt(const char *str)
{
 80192d6:	b480      	push	{r7}
 80192d8:	b085      	sub	sp, #20
 80192da:	af00      	add	r7, sp, #0
 80192dc:	6078      	str	r0, [r7, #4]
  char e;
  uint8_t line_cnt = 1;
 80192de:	2301      	movs	r3, #1
 80192e0:	73fb      	strb	r3, [r7, #15]
  if ( str == NULL )
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d101      	bne.n	80192ec <u8x8_GetStringLineCnt+0x16>
    return 0;
 80192e8:	2300      	movs	r3, #0
 80192ea:	e011      	b.n	8019310 <u8x8_GetStringLineCnt+0x3a>
  for(;;)
  {
    e = *str;
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	781b      	ldrb	r3, [r3, #0]
 80192f0:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 80192f2:	7bbb      	ldrb	r3, [r7, #14]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d009      	beq.n	801930c <u8x8_GetStringLineCnt+0x36>
      break;
    str++;
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	3301      	adds	r3, #1
 80192fc:	607b      	str	r3, [r7, #4]
    if ( e == '\n' )
 80192fe:	7bbb      	ldrb	r3, [r7, #14]
 8019300:	2b0a      	cmp	r3, #10
 8019302:	d1f3      	bne.n	80192ec <u8x8_GetStringLineCnt+0x16>
      line_cnt++;
 8019304:	7bfb      	ldrb	r3, [r7, #15]
 8019306:	3301      	adds	r3, #1
 8019308:	73fb      	strb	r3, [r7, #15]
    e = *str;
 801930a:	e7ef      	b.n	80192ec <u8x8_GetStringLineCnt+0x16>
      break;
 801930c:	bf00      	nop
  }
  return line_cnt;
 801930e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019310:	4618      	mov	r0, r3
 8019312:	3714      	adds	r7, #20
 8019314:	46bd      	mov	sp, r7
 8019316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801931a:	4770      	bx	lr

0801931c <u8x8_GetStringLineStart>:
    Example:
      Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
    Support both UTF8 and normal strings.
*/
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
 801931c:	b480      	push	{r7}
 801931e:	b085      	sub	sp, #20
 8019320:	af00      	add	r7, sp, #0
 8019322:	4603      	mov	r3, r0
 8019324:	6039      	str	r1, [r7, #0]
 8019326:	71fb      	strb	r3, [r7, #7]
  char e;
  uint8_t line_cnt = 1;
 8019328:	2301      	movs	r3, #1
 801932a:	73fb      	strb	r3, [r7, #15]
  
  if ( line_idx == 0 )
 801932c:	79fb      	ldrb	r3, [r7, #7]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d101      	bne.n	8019336 <u8x8_GetStringLineStart+0x1a>
    return str;
 8019332:	683b      	ldr	r3, [r7, #0]
 8019334:	e017      	b.n	8019366 <u8x8_GetStringLineStart+0x4a>

  for(;;)
  {
    e = *str;
 8019336:	683b      	ldr	r3, [r7, #0]
 8019338:	781b      	ldrb	r3, [r3, #0]
 801933a:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 801933c:	7bbb      	ldrb	r3, [r7, #14]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d00f      	beq.n	8019362 <u8x8_GetStringLineStart+0x46>
      break;
    str++;
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	3301      	adds	r3, #1
 8019346:	603b      	str	r3, [r7, #0]
    if ( e == '\n' )
 8019348:	7bbb      	ldrb	r3, [r7, #14]
 801934a:	2b0a      	cmp	r3, #10
 801934c:	d1f3      	bne.n	8019336 <u8x8_GetStringLineStart+0x1a>
    {
      if ( line_cnt == line_idx )
 801934e:	7bfa      	ldrb	r2, [r7, #15]
 8019350:	79fb      	ldrb	r3, [r7, #7]
 8019352:	429a      	cmp	r2, r3
 8019354:	d101      	bne.n	801935a <u8x8_GetStringLineStart+0x3e>
	return str;
 8019356:	683b      	ldr	r3, [r7, #0]
 8019358:	e005      	b.n	8019366 <u8x8_GetStringLineStart+0x4a>
      line_cnt++;
 801935a:	7bfb      	ldrb	r3, [r7, #15]
 801935c:	3301      	adds	r3, #1
 801935e:	73fb      	strb	r3, [r7, #15]
    e = *str;
 8019360:	e7e9      	b.n	8019336 <u8x8_GetStringLineStart+0x1a>
      break;
 8019362:	bf00      	nop
    }
  }
  return NULL;	/* line not found */
 8019364:	2300      	movs	r3, #0
}
 8019366:	4618      	mov	r0, r3
 8019368:	3714      	adds	r7, #20
 801936a:	46bd      	mov	sp, r7
 801936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019370:	4770      	bx	lr
	...

08019374 <u8x8_u8toap>:

#include "u8x8.h"

static const unsigned char u8x8_u8toa_tab[3]  = { 100, 10, 1 } ;
const char *u8x8_u8toap(char * dest, uint8_t v)
{
 8019374:	b480      	push	{r7}
 8019376:	b085      	sub	sp, #20
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	460b      	mov	r3, r1
 801937e:	70fb      	strb	r3, [r7, #3]
  uint8_t pos;
  uint8_t d;
  uint8_t c;
  for( pos = 0; pos < 3; pos++ )
 8019380:	2300      	movs	r3, #0
 8019382:	73fb      	strb	r3, [r7, #15]
 8019384:	e01a      	b.n	80193bc <u8x8_u8toap+0x48>
  {
      d = '0';
 8019386:	2330      	movs	r3, #48	; 0x30
 8019388:	73bb      	strb	r3, [r7, #14]
      c = *(u8x8_u8toa_tab+pos);
 801938a:	7bfb      	ldrb	r3, [r7, #15]
 801938c:	4a12      	ldr	r2, [pc, #72]	; (80193d8 <u8x8_u8toap+0x64>)
 801938e:	4413      	add	r3, r2
 8019390:	781b      	ldrb	r3, [r3, #0]
 8019392:	737b      	strb	r3, [r7, #13]
      while( v >= c )
 8019394:	e006      	b.n	80193a4 <u8x8_u8toap+0x30>
      {
	v -= c;
 8019396:	78fa      	ldrb	r2, [r7, #3]
 8019398:	7b7b      	ldrb	r3, [r7, #13]
 801939a:	1ad3      	subs	r3, r2, r3
 801939c:	70fb      	strb	r3, [r7, #3]
	d++;
 801939e:	7bbb      	ldrb	r3, [r7, #14]
 80193a0:	3301      	adds	r3, #1
 80193a2:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 80193a4:	78fa      	ldrb	r2, [r7, #3]
 80193a6:	7b7b      	ldrb	r3, [r7, #13]
 80193a8:	429a      	cmp	r2, r3
 80193aa:	d2f4      	bcs.n	8019396 <u8x8_u8toap+0x22>
      }
      dest[pos] = d;
 80193ac:	7bfb      	ldrb	r3, [r7, #15]
 80193ae:	687a      	ldr	r2, [r7, #4]
 80193b0:	4413      	add	r3, r2
 80193b2:	7bba      	ldrb	r2, [r7, #14]
 80193b4:	701a      	strb	r2, [r3, #0]
  for( pos = 0; pos < 3; pos++ )
 80193b6:	7bfb      	ldrb	r3, [r7, #15]
 80193b8:	3301      	adds	r3, #1
 80193ba:	73fb      	strb	r3, [r7, #15]
 80193bc:	7bfb      	ldrb	r3, [r7, #15]
 80193be:	2b02      	cmp	r3, #2
 80193c0:	d9e1      	bls.n	8019386 <u8x8_u8toap+0x12>
  }  
  dest[3] = '\0';
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	3303      	adds	r3, #3
 80193c6:	2200      	movs	r2, #0
 80193c8:	701a      	strb	r2, [r3, #0]
  return dest;
 80193ca:	687b      	ldr	r3, [r7, #4]
}
 80193cc:	4618      	mov	r0, r3
 80193ce:	3714      	adds	r7, #20
 80193d0:	46bd      	mov	sp, r7
 80193d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d6:	4770      	bx	lr
 80193d8:	0802a5b8 	.word	0x0802a5b8

080193dc <u8x8_u8toa>:

/* v = value, d = number of digits */
const char *u8x8_u8toa(uint8_t v, uint8_t d)
{
 80193dc:	b580      	push	{r7, lr}
 80193de:	b082      	sub	sp, #8
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	4603      	mov	r3, r0
 80193e4:	460a      	mov	r2, r1
 80193e6:	71fb      	strb	r3, [r7, #7]
 80193e8:	4613      	mov	r3, r2
 80193ea:	71bb      	strb	r3, [r7, #6]
  static char buf[4];
  d = 3-d;
 80193ec:	79bb      	ldrb	r3, [r7, #6]
 80193ee:	f1c3 0303 	rsb	r3, r3, #3
 80193f2:	71bb      	strb	r3, [r7, #6]
  return u8x8_u8toap(buf, v) + d;
 80193f4:	79fb      	ldrb	r3, [r7, #7]
 80193f6:	4619      	mov	r1, r3
 80193f8:	4804      	ldr	r0, [pc, #16]	; (801940c <u8x8_u8toa+0x30>)
 80193fa:	f7ff ffbb 	bl	8019374 <u8x8_u8toap>
 80193fe:	4602      	mov	r2, r0
 8019400:	79bb      	ldrb	r3, [r7, #6]
 8019402:	4413      	add	r3, r2
}
 8019404:	4618      	mov	r0, r3
 8019406:	3708      	adds	r7, #8
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}
 801940c:	20000534 	.word	0x20000534

08019410 <RunDiagnostics>:

/*global variables*/
DiagFaultTable Appl_diagActiveFault;
DiagFaultParamTable FaultParamTable[Diag_enum_MaxFault] = FAULT_PARAM_TABLE_INIT;

void RunDiagnostics(void){
 8019410:	b580      	push	{r7, lr}
 8019412:	af00      	add	r7, sp, #0

	/*Diag_enum_OverCurrent*/
	if(GPIO_PIN_RESET == DC_CONTACTOR_STATE()){
 8019414:	2102      	movs	r1, #2
 8019416:	4892      	ldr	r0, [pc, #584]	; (8019660 <RunDiagnostics+0x250>)
 8019418:	f7fa fbd8 	bl	8013bcc <HAL_GPIO_ReadPin>
 801941c:	4603      	mov	r3, r0
 801941e:	2b00      	cmp	r3, #0
 8019420:	f040 80a9 	bne.w	8019576 <RunDiagnostics+0x166>
		if(SM_ApplParam.RealtimeCurrent > SM_ApplParam.OverCurrentThreshold){
 8019424:	4b8f      	ldr	r3, [pc, #572]	; (8019664 <RunDiagnostics+0x254>)
 8019426:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801942a:	4b8e      	ldr	r3, [pc, #568]	; (8019664 <RunDiagnostics+0x254>)
 801942c:	edd3 7a02 	vldr	s15, [r3, #8]
 8019430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019438:	dd16      	ble.n	8019468 <RunDiagnostics+0x58>
			FaultParamTable[Diag_enum_OverCurrent].DebouncefaultCounter++;
 801943a:	4b8b      	ldr	r3, [pc, #556]	; (8019668 <RunDiagnostics+0x258>)
 801943c:	8c1b      	ldrh	r3, [r3, #32]
 801943e:	3301      	adds	r3, #1
 8019440:	b29a      	uxth	r2, r3
 8019442:	4b89      	ldr	r3, [pc, #548]	; (8019668 <RunDiagnostics+0x258>)
 8019444:	841a      	strh	r2, [r3, #32]
			if(FaultParamTable[Diag_enum_OverCurrent].DebouncefaultCounter >= FaultParamTable[Diag_enum_OverCurrent].faultconfirmThreshold){
 8019446:	4b88      	ldr	r3, [pc, #544]	; (8019668 <RunDiagnostics+0x258>)
 8019448:	8c1a      	ldrh	r2, [r3, #32]
 801944a:	4b87      	ldr	r3, [pc, #540]	; (8019668 <RunDiagnostics+0x258>)
 801944c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801944e:	429a      	cmp	r2, r3
 8019450:	d320      	bcc.n	8019494 <RunDiagnostics+0x84>
				FaultParamTable[Diag_enum_OverCurrent].DebouncefaultCounter = FaultParamTable[Diag_enum_OverCurrent].faultconfirmThreshold;
 8019452:	4b85      	ldr	r3, [pc, #532]	; (8019668 <RunDiagnostics+0x258>)
 8019454:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8019456:	4b84      	ldr	r3, [pc, #528]	; (8019668 <RunDiagnostics+0x258>)
 8019458:	841a      	strh	r2, [r3, #32]
				Appl_diagActiveFault.OverCurrent = 1;
 801945a:	4b84      	ldr	r3, [pc, #528]	; (801966c <RunDiagnostics+0x25c>)
 801945c:	2201      	movs	r2, #1
 801945e:	711a      	strb	r2, [r3, #4]
				FaultParamTable[Diag_enum_OverCurrent].DebouncehealCounter = 0;
 8019460:	4b81      	ldr	r3, [pc, #516]	; (8019668 <RunDiagnostics+0x258>)
 8019462:	2200      	movs	r2, #0
 8019464:	845a      	strh	r2, [r3, #34]	; 0x22
 8019466:	e015      	b.n	8019494 <RunDiagnostics+0x84>
			}
		}
		else{
			FaultParamTable[Diag_enum_OverCurrent].DebouncehealCounter++;
 8019468:	4b7f      	ldr	r3, [pc, #508]	; (8019668 <RunDiagnostics+0x258>)
 801946a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801946c:	3301      	adds	r3, #1
 801946e:	b29a      	uxth	r2, r3
 8019470:	4b7d      	ldr	r3, [pc, #500]	; (8019668 <RunDiagnostics+0x258>)
 8019472:	845a      	strh	r2, [r3, #34]	; 0x22
			if(FaultParamTable[Diag_enum_OverCurrent].DebouncehealCounter > FaultParamTable[Diag_enum_OverCurrent].healconfirmThreshold){
 8019474:	4b7c      	ldr	r3, [pc, #496]	; (8019668 <RunDiagnostics+0x258>)
 8019476:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8019478:	4b7b      	ldr	r3, [pc, #492]	; (8019668 <RunDiagnostics+0x258>)
 801947a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801947c:	429a      	cmp	r2, r3
 801947e:	d909      	bls.n	8019494 <RunDiagnostics+0x84>
				FaultParamTable[Diag_enum_OverCurrent].DebouncefaultCounter = 0;
 8019480:	4b79      	ldr	r3, [pc, #484]	; (8019668 <RunDiagnostics+0x258>)
 8019482:	2200      	movs	r2, #0
 8019484:	841a      	strh	r2, [r3, #32]
				FaultParamTable[Diag_enum_OverCurrent].DebouncehealCounter = FaultParamTable[Diag_enum_OverCurrent].healconfirmThreshold;
 8019486:	4b78      	ldr	r3, [pc, #480]	; (8019668 <RunDiagnostics+0x258>)
 8019488:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 801948a:	4b77      	ldr	r3, [pc, #476]	; (8019668 <RunDiagnostics+0x258>)
 801948c:	845a      	strh	r2, [r3, #34]	; 0x22
				Appl_diagActiveFault.OverCurrent = 0;
 801948e:	4b77      	ldr	r3, [pc, #476]	; (801966c <RunDiagnostics+0x25c>)
 8019490:	2200      	movs	r2, #0
 8019492:	711a      	strb	r2, [r3, #4]
			}
		}



		if(SM_ApplParam.RealtimeVoltage > SM_ApplParam.OverVoltageThreshold){
 8019494:	4b73      	ldr	r3, [pc, #460]	; (8019664 <RunDiagnostics+0x254>)
 8019496:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801949a:	4b72      	ldr	r3, [pc, #456]	; (8019664 <RunDiagnostics+0x254>)
 801949c:	edd3 7a00 	vldr	s15, [r3]
 80194a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80194a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194a8:	dd16      	ble.n	80194d8 <RunDiagnostics+0xc8>
			FaultParamTable[Diag_enum_OverVoltage].DebouncefaultCounter++;
 80194aa:	4b6f      	ldr	r3, [pc, #444]	; (8019668 <RunDiagnostics+0x258>)
 80194ac:	8b1b      	ldrh	r3, [r3, #24]
 80194ae:	3301      	adds	r3, #1
 80194b0:	b29a      	uxth	r2, r3
 80194b2:	4b6d      	ldr	r3, [pc, #436]	; (8019668 <RunDiagnostics+0x258>)
 80194b4:	831a      	strh	r2, [r3, #24]
			if(FaultParamTable[Diag_enum_OverVoltage].DebouncefaultCounter >= FaultParamTable[Diag_enum_OverVoltage].faultconfirmThreshold){
 80194b6:	4b6c      	ldr	r3, [pc, #432]	; (8019668 <RunDiagnostics+0x258>)
 80194b8:	8b1a      	ldrh	r2, [r3, #24]
 80194ba:	4b6b      	ldr	r3, [pc, #428]	; (8019668 <RunDiagnostics+0x258>)
 80194bc:	8b9b      	ldrh	r3, [r3, #28]
 80194be:	429a      	cmp	r2, r3
 80194c0:	d320      	bcc.n	8019504 <RunDiagnostics+0xf4>
				FaultParamTable[Diag_enum_OverVoltage].DebouncefaultCounter = FaultParamTable[Diag_enum_OverVoltage].faultconfirmThreshold;
 80194c2:	4b69      	ldr	r3, [pc, #420]	; (8019668 <RunDiagnostics+0x258>)
 80194c4:	8b9a      	ldrh	r2, [r3, #28]
 80194c6:	4b68      	ldr	r3, [pc, #416]	; (8019668 <RunDiagnostics+0x258>)
 80194c8:	831a      	strh	r2, [r3, #24]
				Appl_diagActiveFault.OverVoltage = 1;
 80194ca:	4b68      	ldr	r3, [pc, #416]	; (801966c <RunDiagnostics+0x25c>)
 80194cc:	2201      	movs	r2, #1
 80194ce:	70da      	strb	r2, [r3, #3]
				FaultParamTable[Diag_enum_OverVoltage].DebouncehealCounter = 0;
 80194d0:	4b65      	ldr	r3, [pc, #404]	; (8019668 <RunDiagnostics+0x258>)
 80194d2:	2200      	movs	r2, #0
 80194d4:	835a      	strh	r2, [r3, #26]
 80194d6:	e015      	b.n	8019504 <RunDiagnostics+0xf4>
			}
		}
		else{
			FaultParamTable[Diag_enum_OverVoltage].DebouncehealCounter++;
 80194d8:	4b63      	ldr	r3, [pc, #396]	; (8019668 <RunDiagnostics+0x258>)
 80194da:	8b5b      	ldrh	r3, [r3, #26]
 80194dc:	3301      	adds	r3, #1
 80194de:	b29a      	uxth	r2, r3
 80194e0:	4b61      	ldr	r3, [pc, #388]	; (8019668 <RunDiagnostics+0x258>)
 80194e2:	835a      	strh	r2, [r3, #26]
			if(FaultParamTable[Diag_enum_OverVoltage].DebouncehealCounter > FaultParamTable[Diag_enum_OverVoltage].healconfirmThreshold){
 80194e4:	4b60      	ldr	r3, [pc, #384]	; (8019668 <RunDiagnostics+0x258>)
 80194e6:	8b5a      	ldrh	r2, [r3, #26]
 80194e8:	4b5f      	ldr	r3, [pc, #380]	; (8019668 <RunDiagnostics+0x258>)
 80194ea:	8bdb      	ldrh	r3, [r3, #30]
 80194ec:	429a      	cmp	r2, r3
 80194ee:	d909      	bls.n	8019504 <RunDiagnostics+0xf4>
				FaultParamTable[Diag_enum_OverVoltage].DebouncefaultCounter = 0;
 80194f0:	4b5d      	ldr	r3, [pc, #372]	; (8019668 <RunDiagnostics+0x258>)
 80194f2:	2200      	movs	r2, #0
 80194f4:	831a      	strh	r2, [r3, #24]
				FaultParamTable[Diag_enum_OverVoltage].DebouncehealCounter = FaultParamTable[Diag_enum_OverVoltage].healconfirmThreshold;
 80194f6:	4b5c      	ldr	r3, [pc, #368]	; (8019668 <RunDiagnostics+0x258>)
 80194f8:	8bda      	ldrh	r2, [r3, #30]
 80194fa:	4b5b      	ldr	r3, [pc, #364]	; (8019668 <RunDiagnostics+0x258>)
 80194fc:	835a      	strh	r2, [r3, #26]
				Appl_diagActiveFault.OverVoltage = 0;
 80194fe:	4b5b      	ldr	r3, [pc, #364]	; (801966c <RunDiagnostics+0x25c>)
 8019500:	2200      	movs	r2, #0
 8019502:	70da      	strb	r2, [r3, #3]
		}




		if(SM_ApplParam.RealtimeVoltage < SM_ApplParam.UnderVoltageThreshold){
 8019504:	4b57      	ldr	r3, [pc, #348]	; (8019664 <RunDiagnostics+0x254>)
 8019506:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801950a:	4b56      	ldr	r3, [pc, #344]	; (8019664 <RunDiagnostics+0x254>)
 801950c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019518:	d516      	bpl.n	8019548 <RunDiagnostics+0x138>
			FaultParamTable[Diag_enum_UnderVoltage].DebouncefaultCounter++;
 801951a:	4b53      	ldr	r3, [pc, #332]	; (8019668 <RunDiagnostics+0x258>)
 801951c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801951e:	3301      	adds	r3, #1
 8019520:	b29a      	uxth	r2, r3
 8019522:	4b51      	ldr	r3, [pc, #324]	; (8019668 <RunDiagnostics+0x258>)
 8019524:	851a      	strh	r2, [r3, #40]	; 0x28
			if(FaultParamTable[Diag_enum_UnderVoltage].DebouncefaultCounter >= FaultParamTable[Diag_enum_UnderVoltage].faultconfirmThreshold){
 8019526:	4b50      	ldr	r3, [pc, #320]	; (8019668 <RunDiagnostics+0x258>)
 8019528:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801952a:	4b4f      	ldr	r3, [pc, #316]	; (8019668 <RunDiagnostics+0x258>)
 801952c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801952e:	429a      	cmp	r2, r3
 8019530:	d32a      	bcc.n	8019588 <RunDiagnostics+0x178>
				FaultParamTable[Diag_enum_UnderVoltage].DebouncefaultCounter = FaultParamTable[Diag_enum_UnderVoltage].faultconfirmThreshold;
 8019532:	4b4d      	ldr	r3, [pc, #308]	; (8019668 <RunDiagnostics+0x258>)
 8019534:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8019536:	4b4c      	ldr	r3, [pc, #304]	; (8019668 <RunDiagnostics+0x258>)
 8019538:	851a      	strh	r2, [r3, #40]	; 0x28
				Appl_diagActiveFault.UnderVoltage = 1;
 801953a:	4b4c      	ldr	r3, [pc, #304]	; (801966c <RunDiagnostics+0x25c>)
 801953c:	2201      	movs	r2, #1
 801953e:	715a      	strb	r2, [r3, #5]
				FaultParamTable[Diag_enum_UnderVoltage].DebouncehealCounter = 0;
 8019540:	4b49      	ldr	r3, [pc, #292]	; (8019668 <RunDiagnostics+0x258>)
 8019542:	2200      	movs	r2, #0
 8019544:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019546:	e01f      	b.n	8019588 <RunDiagnostics+0x178>
			}
		}
		else{
			FaultParamTable[Diag_enum_UnderVoltage].DebouncehealCounter++;
 8019548:	4b47      	ldr	r3, [pc, #284]	; (8019668 <RunDiagnostics+0x258>)
 801954a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801954c:	3301      	adds	r3, #1
 801954e:	b29a      	uxth	r2, r3
 8019550:	4b45      	ldr	r3, [pc, #276]	; (8019668 <RunDiagnostics+0x258>)
 8019552:	855a      	strh	r2, [r3, #42]	; 0x2a
			if(FaultParamTable[Diag_enum_UnderVoltage].DebouncehealCounter > FaultParamTable[Diag_enum_UnderVoltage].healconfirmThreshold){
 8019554:	4b44      	ldr	r3, [pc, #272]	; (8019668 <RunDiagnostics+0x258>)
 8019556:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019558:	4b43      	ldr	r3, [pc, #268]	; (8019668 <RunDiagnostics+0x258>)
 801955a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801955c:	429a      	cmp	r2, r3
 801955e:	d913      	bls.n	8019588 <RunDiagnostics+0x178>
				FaultParamTable[Diag_enum_UnderVoltage].DebouncefaultCounter = 0;
 8019560:	4b41      	ldr	r3, [pc, #260]	; (8019668 <RunDiagnostics+0x258>)
 8019562:	2200      	movs	r2, #0
 8019564:	851a      	strh	r2, [r3, #40]	; 0x28
				FaultParamTable[Diag_enum_UnderVoltage].DebouncehealCounter = FaultParamTable[Diag_enum_UnderVoltage].healconfirmThreshold;
 8019566:	4b40      	ldr	r3, [pc, #256]	; (8019668 <RunDiagnostics+0x258>)
 8019568:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 801956a:	4b3f      	ldr	r3, [pc, #252]	; (8019668 <RunDiagnostics+0x258>)
 801956c:	855a      	strh	r2, [r3, #42]	; 0x2a
				Appl_diagActiveFault.UnderVoltage = 0;
 801956e:	4b3f      	ldr	r3, [pc, #252]	; (801966c <RunDiagnostics+0x25c>)
 8019570:	2200      	movs	r2, #0
 8019572:	715a      	strb	r2, [r3, #5]
 8019574:	e008      	b.n	8019588 <RunDiagnostics+0x178>
			}
		}
	}
	else{
		Appl_diagActiveFault.UnderVoltage = 0;
 8019576:	4b3d      	ldr	r3, [pc, #244]	; (801966c <RunDiagnostics+0x25c>)
 8019578:	2200      	movs	r2, #0
 801957a:	715a      	strb	r2, [r3, #5]
		Appl_diagActiveFault.OverVoltage = 0;
 801957c:	4b3b      	ldr	r3, [pc, #236]	; (801966c <RunDiagnostics+0x25c>)
 801957e:	2200      	movs	r2, #0
 8019580:	70da      	strb	r2, [r3, #3]
		Appl_diagActiveFault.OverCurrent = 0;
 8019582:	4b3a      	ldr	r3, [pc, #232]	; (801966c <RunDiagnostics+0x25c>)
 8019584:	2200      	movs	r2, #0
 8019586:	711a      	strb	r2, [r3, #4]
	}



		if(HAL_GPIO_ReadPin(uC_SCRTemp_GPIO_Port,uC_SCRTemp_Pin) == GPIO_PIN_RESET){
 8019588:	2140      	movs	r1, #64	; 0x40
 801958a:	4835      	ldr	r0, [pc, #212]	; (8019660 <RunDiagnostics+0x250>)
 801958c:	f7fa fb1e 	bl	8013bcc <HAL_GPIO_ReadPin>
 8019590:	4603      	mov	r3, r0
 8019592:	2b00      	cmp	r3, #0
 8019594:	d116      	bne.n	80195c4 <RunDiagnostics+0x1b4>
			FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncefaultCounter++;
 8019596:	4b34      	ldr	r3, [pc, #208]	; (8019668 <RunDiagnostics+0x258>)
 8019598:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801959a:	3301      	adds	r3, #1
 801959c:	b29a      	uxth	r2, r3
 801959e:	4b32      	ldr	r3, [pc, #200]	; (8019668 <RunDiagnostics+0x258>)
 80195a0:	861a      	strh	r2, [r3, #48]	; 0x30
			if(FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncefaultCounter >= FaultParamTable[Diag_enum_HighTemperatureSCR].faultconfirmThreshold){
 80195a2:	4b31      	ldr	r3, [pc, #196]	; (8019668 <RunDiagnostics+0x258>)
 80195a4:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80195a6:	4b30      	ldr	r3, [pc, #192]	; (8019668 <RunDiagnostics+0x258>)
 80195a8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80195aa:	429a      	cmp	r2, r3
 80195ac:	d320      	bcc.n	80195f0 <RunDiagnostics+0x1e0>
				FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncefaultCounter = FaultParamTable[Diag_enum_HighTemperatureSCR].faultconfirmThreshold;
 80195ae:	4b2e      	ldr	r3, [pc, #184]	; (8019668 <RunDiagnostics+0x258>)
 80195b0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80195b2:	4b2d      	ldr	r3, [pc, #180]	; (8019668 <RunDiagnostics+0x258>)
 80195b4:	861a      	strh	r2, [r3, #48]	; 0x30
				Appl_diagActiveFault.HighTempperatureSCR = 1;
 80195b6:	4b2d      	ldr	r3, [pc, #180]	; (801966c <RunDiagnostics+0x25c>)
 80195b8:	2201      	movs	r2, #1
 80195ba:	719a      	strb	r2, [r3, #6]
				FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncehealCounter = 0;
 80195bc:	4b2a      	ldr	r3, [pc, #168]	; (8019668 <RunDiagnostics+0x258>)
 80195be:	2200      	movs	r2, #0
 80195c0:	865a      	strh	r2, [r3, #50]	; 0x32
 80195c2:	e015      	b.n	80195f0 <RunDiagnostics+0x1e0>
			}
		}
		else{
			FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncehealCounter++;
 80195c4:	4b28      	ldr	r3, [pc, #160]	; (8019668 <RunDiagnostics+0x258>)
 80195c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80195c8:	3301      	adds	r3, #1
 80195ca:	b29a      	uxth	r2, r3
 80195cc:	4b26      	ldr	r3, [pc, #152]	; (8019668 <RunDiagnostics+0x258>)
 80195ce:	865a      	strh	r2, [r3, #50]	; 0x32
			if(FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncehealCounter > FaultParamTable[Diag_enum_HighTemperatureSCR].healconfirmThreshold){
 80195d0:	4b25      	ldr	r3, [pc, #148]	; (8019668 <RunDiagnostics+0x258>)
 80195d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80195d4:	4b24      	ldr	r3, [pc, #144]	; (8019668 <RunDiagnostics+0x258>)
 80195d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80195d8:	429a      	cmp	r2, r3
 80195da:	d909      	bls.n	80195f0 <RunDiagnostics+0x1e0>
				FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncefaultCounter = 0;
 80195dc:	4b22      	ldr	r3, [pc, #136]	; (8019668 <RunDiagnostics+0x258>)
 80195de:	2200      	movs	r2, #0
 80195e0:	861a      	strh	r2, [r3, #48]	; 0x30
				FaultParamTable[Diag_enum_HighTemperatureSCR].DebouncehealCounter = FaultParamTable[Diag_enum_HighTemperatureSCR].healconfirmThreshold;
 80195e2:	4b21      	ldr	r3, [pc, #132]	; (8019668 <RunDiagnostics+0x258>)
 80195e4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 80195e6:	4b20      	ldr	r3, [pc, #128]	; (8019668 <RunDiagnostics+0x258>)
 80195e8:	865a      	strh	r2, [r3, #50]	; 0x32
				Appl_diagActiveFault.HighTempperatureSCR = 0;
 80195ea:	4b20      	ldr	r3, [pc, #128]	; (801966c <RunDiagnostics+0x25c>)
 80195ec:	2200      	movs	r2, #0
 80195ee:	719a      	strb	r2, [r3, #6]
	/*Diag_enum_Powerfail_Z1*/
	/*
	 * Let's increase this every 50ms and reset it in 20ms interrupts
	 * If any phase is unavailable, that particular fault counter increases beyond threshold.
	 * */
	FaultParamTable[Diag_enum_Powerfail_Z1].DebouncefaultCounter++;
 80195f0:	4b1d      	ldr	r3, [pc, #116]	; (8019668 <RunDiagnostics+0x258>)
 80195f2:	881b      	ldrh	r3, [r3, #0]
 80195f4:	3301      	adds	r3, #1
 80195f6:	b29a      	uxth	r2, r3
 80195f8:	4b1b      	ldr	r3, [pc, #108]	; (8019668 <RunDiagnostics+0x258>)
 80195fa:	801a      	strh	r2, [r3, #0]
	if(FaultParamTable[Diag_enum_Powerfail_Z1].DebouncefaultCounter > FaultParamTable[Diag_enum_Powerfail_Z1].faultconfirmThreshold){
 80195fc:	4b1a      	ldr	r3, [pc, #104]	; (8019668 <RunDiagnostics+0x258>)
 80195fe:	881a      	ldrh	r2, [r3, #0]
 8019600:	4b19      	ldr	r3, [pc, #100]	; (8019668 <RunDiagnostics+0x258>)
 8019602:	889b      	ldrh	r3, [r3, #4]
 8019604:	429a      	cmp	r2, r3
 8019606:	d90a      	bls.n	801961e <RunDiagnostics+0x20e>
		FaultParamTable[Diag_enum_Powerfail_Z1].DebouncefaultCounter = FaultParamTable[Diag_enum_Powerfail_Z1].faultconfirmThreshold;
 8019608:	4b17      	ldr	r3, [pc, #92]	; (8019668 <RunDiagnostics+0x258>)
 801960a:	889a      	ldrh	r2, [r3, #4]
 801960c:	4b16      	ldr	r3, [pc, #88]	; (8019668 <RunDiagnostics+0x258>)
 801960e:	801a      	strh	r2, [r3, #0]
		Appl_diagActiveFault.PowerFail_Z1 = 1;
 8019610:	4b16      	ldr	r3, [pc, #88]	; (801966c <RunDiagnostics+0x25c>)
 8019612:	2201      	movs	r2, #1
 8019614:	701a      	strb	r2, [r3, #0]
		FaultParamTable[Diag_enum_Powerfail_Z1].DebouncehealCounter = 0;
 8019616:	4b14      	ldr	r3, [pc, #80]	; (8019668 <RunDiagnostics+0x258>)
 8019618:	2200      	movs	r2, #0
 801961a:	805a      	strh	r2, [r3, #2]
 801961c:	e008      	b.n	8019630 <RunDiagnostics+0x220>
	}
	else if(FaultParamTable[Diag_enum_Powerfail_Z1].DebouncehealCounter >= FaultParamTable[Diag_enum_Powerfail_Z1].healconfirmThreshold){
 801961e:	4b12      	ldr	r3, [pc, #72]	; (8019668 <RunDiagnostics+0x258>)
 8019620:	885a      	ldrh	r2, [r3, #2]
 8019622:	4b11      	ldr	r3, [pc, #68]	; (8019668 <RunDiagnostics+0x258>)
 8019624:	88db      	ldrh	r3, [r3, #6]
 8019626:	429a      	cmp	r2, r3
 8019628:	d302      	bcc.n	8019630 <RunDiagnostics+0x220>

		Appl_diagActiveFault.PowerFail_Z1 = 0;
 801962a:	4b10      	ldr	r3, [pc, #64]	; (801966c <RunDiagnostics+0x25c>)
 801962c:	2200      	movs	r2, #0
 801962e:	701a      	strb	r2, [r3, #0]
	/*Diag_enum_Powerfail_Z2*/
	/*
	 * Let's increase this every 50ms and reset it in 20ms interrupts
	 * If any phase is unavailable, that particular fault counter increases beyond threshold.
	 * */
	FaultParamTable[Diag_enum_Powerfail_Z2].DebouncefaultCounter++;
 8019630:	4b0d      	ldr	r3, [pc, #52]	; (8019668 <RunDiagnostics+0x258>)
 8019632:	891b      	ldrh	r3, [r3, #8]
 8019634:	3301      	adds	r3, #1
 8019636:	b29a      	uxth	r2, r3
 8019638:	4b0b      	ldr	r3, [pc, #44]	; (8019668 <RunDiagnostics+0x258>)
 801963a:	811a      	strh	r2, [r3, #8]
	if(FaultParamTable[Diag_enum_Powerfail_Z2].DebouncefaultCounter > FaultParamTable[Diag_enum_Powerfail_Z2].faultconfirmThreshold){
 801963c:	4b0a      	ldr	r3, [pc, #40]	; (8019668 <RunDiagnostics+0x258>)
 801963e:	891a      	ldrh	r2, [r3, #8]
 8019640:	4b09      	ldr	r3, [pc, #36]	; (8019668 <RunDiagnostics+0x258>)
 8019642:	899b      	ldrh	r3, [r3, #12]
 8019644:	429a      	cmp	r2, r3
 8019646:	d913      	bls.n	8019670 <RunDiagnostics+0x260>
		FaultParamTable[Diag_enum_Powerfail_Z2].DebouncefaultCounter = FaultParamTable[Diag_enum_Powerfail_Z2].faultconfirmThreshold;
 8019648:	4b07      	ldr	r3, [pc, #28]	; (8019668 <RunDiagnostics+0x258>)
 801964a:	899a      	ldrh	r2, [r3, #12]
 801964c:	4b06      	ldr	r3, [pc, #24]	; (8019668 <RunDiagnostics+0x258>)
 801964e:	811a      	strh	r2, [r3, #8]
		Appl_diagActiveFault.PowerFail_Z2 = 1;
 8019650:	4b06      	ldr	r3, [pc, #24]	; (801966c <RunDiagnostics+0x25c>)
 8019652:	2201      	movs	r2, #1
 8019654:	705a      	strb	r2, [r3, #1]
		FaultParamTable[Diag_enum_Powerfail_Z2].DebouncehealCounter = 0;
 8019656:	4b04      	ldr	r3, [pc, #16]	; (8019668 <RunDiagnostics+0x258>)
 8019658:	2200      	movs	r2, #0
 801965a:	815a      	strh	r2, [r3, #10]
 801965c:	e011      	b.n	8019682 <RunDiagnostics+0x272>
 801965e:	bf00      	nop
 8019660:	40020400 	.word	0x40020400
 8019664:	20004974 	.word	0x20004974
 8019668:	2000000c 	.word	0x2000000c
 801966c:	200047b0 	.word	0x200047b0
	}
	else if(FaultParamTable[Diag_enum_Powerfail_Z2].DebouncehealCounter >= FaultParamTable[Diag_enum_Powerfail_Z2].healconfirmThreshold){
 8019670:	4b1c      	ldr	r3, [pc, #112]	; (80196e4 <RunDiagnostics+0x2d4>)
 8019672:	895a      	ldrh	r2, [r3, #10]
 8019674:	4b1b      	ldr	r3, [pc, #108]	; (80196e4 <RunDiagnostics+0x2d4>)
 8019676:	89db      	ldrh	r3, [r3, #14]
 8019678:	429a      	cmp	r2, r3
 801967a:	d302      	bcc.n	8019682 <RunDiagnostics+0x272>

		Appl_diagActiveFault.PowerFail_Z2 = 0;
 801967c:	4b1a      	ldr	r3, [pc, #104]	; (80196e8 <RunDiagnostics+0x2d8>)
 801967e:	2200      	movs	r2, #0
 8019680:	705a      	strb	r2, [r3, #1]
	/*Diag_enum_Powerfail_Z3*/
	/*
	 * Let's increase this every 50ms and reset it in 20ms interrupts
	 * If any phase is unavailable, that particular fault counter increases beyond threshold.
	 * */
	FaultParamTable[Diag_enum_Powerfail_Z3].DebouncefaultCounter++;
 8019682:	4b18      	ldr	r3, [pc, #96]	; (80196e4 <RunDiagnostics+0x2d4>)
 8019684:	8a1b      	ldrh	r3, [r3, #16]
 8019686:	3301      	adds	r3, #1
 8019688:	b29a      	uxth	r2, r3
 801968a:	4b16      	ldr	r3, [pc, #88]	; (80196e4 <RunDiagnostics+0x2d4>)
 801968c:	821a      	strh	r2, [r3, #16]
	if(FaultParamTable[Diag_enum_Powerfail_Z3].DebouncefaultCounter > FaultParamTable[Diag_enum_Powerfail_Z3].faultconfirmThreshold){
 801968e:	4b15      	ldr	r3, [pc, #84]	; (80196e4 <RunDiagnostics+0x2d4>)
 8019690:	8a1a      	ldrh	r2, [r3, #16]
 8019692:	4b14      	ldr	r3, [pc, #80]	; (80196e4 <RunDiagnostics+0x2d4>)
 8019694:	8a9b      	ldrh	r3, [r3, #20]
 8019696:	429a      	cmp	r2, r3
 8019698:	d90a      	bls.n	80196b0 <RunDiagnostics+0x2a0>
		FaultParamTable[Diag_enum_Powerfail_Z3].DebouncefaultCounter = FaultParamTable[Diag_enum_Powerfail_Z3].faultconfirmThreshold;
 801969a:	4b12      	ldr	r3, [pc, #72]	; (80196e4 <RunDiagnostics+0x2d4>)
 801969c:	8a9a      	ldrh	r2, [r3, #20]
 801969e:	4b11      	ldr	r3, [pc, #68]	; (80196e4 <RunDiagnostics+0x2d4>)
 80196a0:	821a      	strh	r2, [r3, #16]
		Appl_diagActiveFault.PowerFail_Z3 = 1;
 80196a2:	4b11      	ldr	r3, [pc, #68]	; (80196e8 <RunDiagnostics+0x2d8>)
 80196a4:	2201      	movs	r2, #1
 80196a6:	709a      	strb	r2, [r3, #2]
		FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter = 0;
 80196a8:	4b0e      	ldr	r3, [pc, #56]	; (80196e4 <RunDiagnostics+0x2d4>)
 80196aa:	2200      	movs	r2, #0
 80196ac:	825a      	strh	r2, [r3, #18]
 80196ae:	e008      	b.n	80196c2 <RunDiagnostics+0x2b2>
	}
	else if(FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter >= FaultParamTable[Diag_enum_Powerfail_Z3].healconfirmThreshold){
 80196b0:	4b0c      	ldr	r3, [pc, #48]	; (80196e4 <RunDiagnostics+0x2d4>)
 80196b2:	8a5a      	ldrh	r2, [r3, #18]
 80196b4:	4b0b      	ldr	r3, [pc, #44]	; (80196e4 <RunDiagnostics+0x2d4>)
 80196b6:	8adb      	ldrh	r3, [r3, #22]
 80196b8:	429a      	cmp	r2, r3
 80196ba:	d302      	bcc.n	80196c2 <RunDiagnostics+0x2b2>
		Appl_diagActiveFault.PowerFail_Z3 = 0;
 80196bc:	4b0a      	ldr	r3, [pc, #40]	; (80196e8 <RunDiagnostics+0x2d8>)
 80196be:	2200      	movs	r2, #0
 80196c0:	709a      	strb	r2, [r3, #2]
	}


	if(HAL_GPIO_ReadPin(uC_BattteryReverse_GPIO_Port,uC_BattteryReverse_Pin) == GPIO_PIN_RESET){
 80196c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80196c6:	4809      	ldr	r0, [pc, #36]	; (80196ec <RunDiagnostics+0x2dc>)
 80196c8:	f7fa fa80 	bl	8013bcc <HAL_GPIO_ReadPin>
 80196cc:	4603      	mov	r3, r0
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d103      	bne.n	80196da <RunDiagnostics+0x2ca>

		Appl_diagActiveFault.BatteryReversal = 1;
 80196d2:	4b05      	ldr	r3, [pc, #20]	; (80196e8 <RunDiagnostics+0x2d8>)
 80196d4:	2201      	movs	r2, #1
 80196d6:	721a      	strb	r2, [r3, #8]
	}
	else{
		Appl_diagActiveFault.BatteryReversal = 0;
	}
}
 80196d8:	e002      	b.n	80196e0 <RunDiagnostics+0x2d0>
		Appl_diagActiveFault.BatteryReversal = 0;
 80196da:	4b03      	ldr	r3, [pc, #12]	; (80196e8 <RunDiagnostics+0x2d8>)
 80196dc:	2200      	movs	r2, #0
 80196de:	721a      	strb	r2, [r3, #8]
}
 80196e0:	bf00      	nop
 80196e2:	bd80      	pop	{r7, pc}
 80196e4:	2000000c 	.word	0x2000000c
 80196e8:	200047b0 	.word	0x200047b0
 80196ec:	40020800 	.word	0x40020800

080196f0 <Run_Diagnostic_Actions>:


void Run_Diagnostic_Actions(void){
 80196f0:	b580      	push	{r7, lr}
 80196f2:	af00      	add	r7, sp, #0
	if(SM_enumECUState != SM_enum_ECU_SelfTest){
 80196f4:	4b0c      	ldr	r3, [pc, #48]	; (8019728 <Run_Diagnostic_Actions+0x38>)
 80196f6:	781b      	ldrb	r3, [r3, #0]
 80196f8:	b2db      	uxtb	r3, r3
 80196fa:	2b0d      	cmp	r3, #13
 80196fc:	d012      	beq.n	8019724 <Run_Diagnostic_Actions+0x34>
		if((Appl_diagActiveFault.PhaseReversal == 1) || \
 80196fe:	4b0b      	ldr	r3, [pc, #44]	; (801972c <Run_Diagnostic_Actions+0x3c>)
 8019700:	79db      	ldrb	r3, [r3, #7]
 8019702:	2b01      	cmp	r3, #1
 8019704:	d003      	beq.n	801970e <Run_Diagnostic_Actions+0x1e>
				Appl_diagActiveFault.HighTempperatureSCR == 1){
 8019706:	4b09      	ldr	r3, [pc, #36]	; (801972c <Run_Diagnostic_Actions+0x3c>)
 8019708:	799b      	ldrb	r3, [r3, #6]
		if((Appl_diagActiveFault.PhaseReversal == 1) || \
 801970a:	2b01      	cmp	r3, #1
 801970c:	d105      	bne.n	801971a <Run_Diagnostic_Actions+0x2a>
			BLUELEDON();
 801970e:	2201      	movs	r2, #1
 8019710:	2110      	movs	r1, #16
 8019712:	4807      	ldr	r0, [pc, #28]	; (8019730 <Run_Diagnostic_Actions+0x40>)
 8019714:	f7fa fa72 	bl	8013bfc <HAL_GPIO_WritePin>
		else{
			BLUELEDOFF();
		}
	}

}
 8019718:	e004      	b.n	8019724 <Run_Diagnostic_Actions+0x34>
			BLUELEDOFF();
 801971a:	2200      	movs	r2, #0
 801971c:	2110      	movs	r1, #16
 801971e:	4804      	ldr	r0, [pc, #16]	; (8019730 <Run_Diagnostic_Actions+0x40>)
 8019720:	f7fa fa6c 	bl	8013bfc <HAL_GPIO_WritePin>
}
 8019724:	bf00      	nop
 8019726:	bd80      	pop	{r7, pc}
 8019728:	2000490c 	.word	0x2000490c
 801972c:	200047b0 	.word	0x200047b0
 8019730:	40020800 	.word	0x40020800

08019734 <SM_DispInit>:
static inline void Display_Current(u8g2_t *u8g2);
static inline void Display_RunningTime(u8g2_t *u8g2);

void u8g2Init(u8g2_t *u8g2);

void SM_DispInit(void){
 8019734:	b580      	push	{r7, lr}
 8019736:	af00      	add	r7, sp, #0
	u8g2Init(&u8g2);
 8019738:	4803      	ldr	r0, [pc, #12]	; (8019748 <SM_DispInit+0x14>)
 801973a:	f7ff f989 	bl	8018a50 <u8g2Init>
	Appl_Display.SelectedIndexIntheList = 1;
 801973e:	4b03      	ldr	r3, [pc, #12]	; (801974c <SM_DispInit+0x18>)
 8019740:	2201      	movs	r2, #1
 8019742:	701a      	strb	r2, [r3, #0]
}
 8019744:	bf00      	nop
 8019746:	bd80      	pop	{r7, pc}
 8019748:	200047c0 	.word	0x200047c0
 801974c:	20004870 	.word	0x20004870

08019750 <DisplayLoop>:

void DisplayLoop(uint8_t loopms){
 8019750:	b580      	push	{r7, lr}
 8019752:	b082      	sub	sp, #8
 8019754:	af00      	add	r7, sp, #0
 8019756:	4603      	mov	r3, r0
 8019758:	71fb      	strb	r3, [r7, #7]
	  u8g2_FirstPage(&u8g2);
 801975a:	4809      	ldr	r0, [pc, #36]	; (8019780 <DisplayLoop+0x30>)
 801975c:	f7fd fbf4 	bl	8016f48 <u8g2_FirstPage>
	  do
	  {
		  SM_DrawTask(&u8g2,loopms);
 8019760:	79fb      	ldrb	r3, [r7, #7]
 8019762:	4619      	mov	r1, r3
 8019764:	4806      	ldr	r0, [pc, #24]	; (8019780 <DisplayLoop+0x30>)
 8019766:	f000 f80d 	bl	8019784 <SM_DrawTask>
	  } while (u8g2_NextPage(&u8g2));
 801976a:	4805      	ldr	r0, [pc, #20]	; (8019780 <DisplayLoop+0x30>)
 801976c:	f7fd fc00 	bl	8016f70 <u8g2_NextPage>
 8019770:	4603      	mov	r3, r0
 8019772:	2b00      	cmp	r3, #0
 8019774:	d1f4      	bne.n	8019760 <DisplayLoop+0x10>
}
 8019776:	bf00      	nop
 8019778:	bf00      	nop
 801977a:	3708      	adds	r7, #8
 801977c:	46bd      	mov	sp, r7
 801977e:	bd80      	pop	{r7, pc}
 8019780:	200047c0 	.word	0x200047c0

08019784 <SM_DrawTask>:
void SM_DrawTask(u8g2_t *u8g2, uint8_t loopms){
 8019784:	b5b0      	push	{r4, r5, r7, lr}
 8019786:	b09c      	sub	sp, #112	; 0x70
 8019788:	af04      	add	r7, sp, #16
 801978a:	6078      	str	r0, [r7, #4]
 801978c:	460b      	mov	r3, r1
 801978e:	70fb      	strb	r3, [r7, #3]
	char display_buf[40] = {0};
 8019790:	2300      	movs	r3, #0
 8019792:	637b      	str	r3, [r7, #52]	; 0x34
 8019794:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019798:	2224      	movs	r2, #36	; 0x24
 801979a:	2100      	movs	r1, #0
 801979c:	4618      	mov	r0, r3
 801979e:	f006 ff31 	bl	8020604 <memset>
	char display_buf2[20] = {0};
 80197a2:	2300      	movs	r3, #0
 80197a4:	623b      	str	r3, [r7, #32]
 80197a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80197aa:	2200      	movs	r2, #0
 80197ac:	601a      	str	r2, [r3, #0]
 80197ae:	605a      	str	r2, [r3, #4]
 80197b0:	609a      	str	r2, [r3, #8]
 80197b2:	60da      	str	r2, [r3, #12]
	char display_buf3[20] = {0};
 80197b4:	2300      	movs	r3, #0
 80197b6:	60fb      	str	r3, [r7, #12]
 80197b8:	f107 0310 	add.w	r3, r7, #16
 80197bc:	2200      	movs	r2, #0
 80197be:	601a      	str	r2, [r3, #0]
 80197c0:	605a      	str	r2, [r3, #4]
 80197c2:	609a      	str	r2, [r3, #8]
 80197c4:	60da      	str	r2, [r3, #12]
	static uint32_t timer_logo;
	static uint16_t Fnclocal_u16disp;



	FilterCurrent_forLogging();
 80197c6:	f001 fb03 	bl	801add0 <FilterCurrent_forLogging>
	if(SM_enumDisplayState == SM_enum_Display_POWERON_LOGO){
 80197ca:	4b8f      	ldr	r3, [pc, #572]	; (8019a08 <SM_DrawTask+0x284>)
 80197cc:	781b      	ldrb	r3, [r3, #0]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d157      	bne.n	8019882 <SM_DrawTask+0xfe>
		timer_logo++;
 80197d2:	4b8e      	ldr	r3, [pc, #568]	; (8019a0c <SM_DrawTask+0x288>)
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	3301      	adds	r3, #1
 80197d8:	4a8c      	ldr	r2, [pc, #560]	; (8019a0c <SM_DrawTask+0x288>)
 80197da:	6013      	str	r3, [r2, #0]
		if(timer_logo < ((2000*4)/loopms)){
 80197dc:	78fb      	ldrb	r3, [r7, #3]
 80197de:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80197e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80197e6:	461a      	mov	r2, r3
 80197e8:	4b88      	ldr	r3, [pc, #544]	; (8019a0c <SM_DrawTask+0x288>)
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	429a      	cmp	r2, r3
 80197ee:	d928      	bls.n	8019842 <SM_DrawTask+0xbe>
			u8g2_SetFont(u8g2, u8g2_font_nokiafc22_tu);
 80197f0:	4987      	ldr	r1, [pc, #540]	; (8019a10 <SM_DrawTask+0x28c>)
 80197f2:	6878      	ldr	r0, [r7, #4]
 80197f4:	f7fe fa00 	bl	8017bf8 <u8g2_SetFont>
			u8g2_DrawStr(u8g2, 0,10,"BATTERY");
 80197f8:	4b86      	ldr	r3, [pc, #536]	; (8019a14 <SM_DrawTask+0x290>)
 80197fa:	220a      	movs	r2, #10
 80197fc:	2100      	movs	r1, #0
 80197fe:	6878      	ldr	r0, [r7, #4]
 8019800:	f7fe f93e 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,20,"REJUVENATOR");
 8019804:	4b84      	ldr	r3, [pc, #528]	; (8019a18 <SM_DrawTask+0x294>)
 8019806:	2214      	movs	r2, #20
 8019808:	2101      	movs	r1, #1
 801980a:	6878      	ldr	r0, [r7, #4]
 801980c:	f7fe f938 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,30,"DESIGNED FOR : ");
 8019810:	4b82      	ldr	r3, [pc, #520]	; (8019a1c <SM_DrawTask+0x298>)
 8019812:	221e      	movs	r2, #30
 8019814:	2101      	movs	r1, #1
 8019816:	6878      	ldr	r0, [r7, #4]
 8019818:	f7fe f932 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,40,"ALACRITAS SOLUTIONS");
 801981c:	4b80      	ldr	r3, [pc, #512]	; (8019a20 <SM_DrawTask+0x29c>)
 801981e:	2228      	movs	r2, #40	; 0x28
 8019820:	2101      	movs	r1, #1
 8019822:	6878      	ldr	r0, [r7, #4]
 8019824:	f7fe f92c 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,50,"PVT LTD");
 8019828:	4b7e      	ldr	r3, [pc, #504]	; (8019a24 <SM_DrawTask+0x2a0>)
 801982a:	2232      	movs	r2, #50	; 0x32
 801982c:	2101      	movs	r1, #1
 801982e:	6878      	ldr	r0, [r7, #4]
 8019830:	f7fe f926 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,60,"BENGALURU");
 8019834:	4b7c      	ldr	r3, [pc, #496]	; (8019a28 <SM_DrawTask+0x2a4>)
 8019836:	223c      	movs	r2, #60	; 0x3c
 8019838:	2101      	movs	r1, #1
 801983a:	6878      	ldr	r0, [r7, #4]
 801983c:	f7fe f920 	bl	8017a80 <u8g2_DrawStr>
 8019840:	e01f      	b.n	8019882 <SM_DrawTask+0xfe>
		}
		else{
			u8g2_SetFont(u8g2, u8g2_font_VCR_OSD_mu);/*15pixelheight*/
 8019842:	497a      	ldr	r1, [pc, #488]	; (8019a2c <SM_DrawTask+0x2a8>)
 8019844:	6878      	ldr	r0, [r7, #4]
 8019846:	f7fe f9d7 	bl	8017bf8 <u8g2_SetFont>
			u8g2_DrawStr(u8g2, 0,16,"QUAD POWER");
 801984a:	4b79      	ldr	r3, [pc, #484]	; (8019a30 <SM_DrawTask+0x2ac>)
 801984c:	2210      	movs	r2, #16
 801984e:	2100      	movs	r1, #0
 8019850:	6878      	ldr	r0, [r7, #4]
 8019852:	f7fe f915 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 0,32,"SYSTEMS");
 8019856:	4b77      	ldr	r3, [pc, #476]	; (8019a34 <SM_DrawTask+0x2b0>)
 8019858:	2220      	movs	r2, #32
 801985a:	2100      	movs	r1, #0
 801985c:	6878      	ldr	r0, [r7, #4]
 801985e:	f7fe f90f 	bl	8017a80 <u8g2_DrawStr>
			u8g2_SetFont(u8g2, u8g2_font_profont11_tf);/*7pixelheight*/
 8019862:	4975      	ldr	r1, [pc, #468]	; (8019a38 <SM_DrawTask+0x2b4>)
 8019864:	6878      	ldr	r0, [r7, #4]
 8019866:	f7fe f9c7 	bl	8017bf8 <u8g2_SetFont>
			u8g2_DrawStr(u8g2, 0,48,"BENGALURU,INDIA");
 801986a:	4b74      	ldr	r3, [pc, #464]	; (8019a3c <SM_DrawTask+0x2b8>)
 801986c:	2230      	movs	r2, #48	; 0x30
 801986e:	2100      	movs	r1, #0
 8019870:	6878      	ldr	r0, [r7, #4]
 8019872:	f7fe f905 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 0,60,"www.qpowersys.com");
 8019876:	4b72      	ldr	r3, [pc, #456]	; (8019a40 <SM_DrawTask+0x2bc>)
 8019878:	223c      	movs	r2, #60	; 0x3c
 801987a:	2100      	movs	r1, #0
 801987c:	6878      	ldr	r0, [r7, #4]
 801987e:	f7fe f8ff 	bl	8017a80 <u8g2_DrawStr>
//			splashScreen(u8g2);
//			u8g2_DrawBitmap(u8g2, 0, 0, 16, 64, image_data_qps_logo);
		}
	}

	if(SM_enumDisplayState == SM_enum_Display_MAIN_MENU){
 8019882:	4b61      	ldr	r3, [pc, #388]	; (8019a08 <SM_DrawTask+0x284>)
 8019884:	781b      	ldrb	r3, [r3, #0]
 8019886:	2b01      	cmp	r3, #1
 8019888:	d113      	bne.n	80198b2 <SM_DrawTask+0x12e>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tr);
 801988a:	496e      	ldr	r1, [pc, #440]	; (8019a44 <SM_DrawTask+0x2c0>)
 801988c:	6878      	ldr	r0, [r7, #4]
 801988e:	f7fe f9b3 	bl	8017bf8 <u8g2_SetFont>
		u8g2_UserInterfaceSelectionList(u8g2, "MAIN MENU", Appl_Display.SelectedIndexIntheList,\
 8019892:	4b6d      	ldr	r3, [pc, #436]	; (8019a48 <SM_DrawTask+0x2c4>)
 8019894:	781a      	ldrb	r2, [r3, #0]
 8019896:	4b6d      	ldr	r3, [pc, #436]	; (8019a4c <SM_DrawTask+0x2c8>)
 8019898:	496d      	ldr	r1, [pc, #436]	; (8019a50 <SM_DrawTask+0x2cc>)
 801989a:	6878      	ldr	r0, [r7, #4]
 801989c:	f7fe fe70 	bl	8018580 <u8g2_UserInterfaceSelectionList>
				"1. START\n2. SETTINGS\n3. SELFTEST\n4. INFO\n");
		Appl_Display.MaximumIndexInTheList = 4;
 80198a0:	4b69      	ldr	r3, [pc, #420]	; (8019a48 <SM_DrawTask+0x2c4>)
 80198a2:	2204      	movs	r2, #4
 80198a4:	705a      	strb	r2, [r3, #1]
		Display_Buttons(u8g2,SM_enumDisplayState);
 80198a6:	4b58      	ldr	r3, [pc, #352]	; (8019a08 <SM_DrawTask+0x284>)
 80198a8:	781b      	ldrb	r3, [r3, #0]
 80198aa:	4619      	mov	r1, r3
 80198ac:	6878      	ldr	r0, [r7, #4]
 80198ae:	f000 ffd3 	bl	801a858 <Display_Buttons>
	}


	if(SM_enumDisplayState == SM_enum_Display_RejuvenationMenu){
 80198b2:	4b55      	ldr	r3, [pc, #340]	; (8019a08 <SM_DrawTask+0x284>)
 80198b4:	781b      	ldrb	r3, [r3, #0]
 80198b6:	2b02      	cmp	r3, #2
 80198b8:	f040 8116 	bne.w	8019ae8 <SM_DrawTask+0x364>
		if(Appl_Display.SelectedIndexIntheList == 1){
 80198bc:	4b62      	ldr	r3, [pc, #392]	; (8019a48 <SM_DrawTask+0x2c4>)
 80198be:	781b      	ldrb	r3, [r3, #0]
 80198c0:	2b01      	cmp	r3, #1
 80198c2:	d126      	bne.n	8019912 <SM_DrawTask+0x18e>
			u8g2_SetFont(u8g2,u8g2_font_5x8_tr);
 80198c4:	4963      	ldr	r1, [pc, #396]	; (8019a54 <SM_DrawTask+0x2d0>)
 80198c6:	6878      	ldr	r0, [r7, #4]
 80198c8:	f7fe f996 	bl	8017bf8 <u8g2_SetFont>
			strcpy(display_buf, "CUSTOMER ID NUMBER:");
 80198cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80198d0:	4a61      	ldr	r2, [pc, #388]	; (8019a58 <SM_DrawTask+0x2d4>)
 80198d2:	461c      	mov	r4, r3
 80198d4:	4615      	mov	r5, r2
 80198d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198da:	682b      	ldr	r3, [r5, #0]
 80198dc:	6023      	str	r3, [r4, #0]
			strcpy(display_buf2, "VALUE : ");
 80198de:	f107 0320 	add.w	r3, r7, #32
 80198e2:	4a5e      	ldr	r2, [pc, #376]	; (8019a5c <SM_DrawTask+0x2d8>)
 80198e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80198e6:	c303      	stmia	r3!, {r0, r1}
 80198e8:	701a      	strb	r2, [r3, #0]
			strcpy(display_buf3, " ");
 80198ea:	f107 030c 	add.w	r3, r7, #12
 80198ee:	2220      	movs	r2, #32
 80198f0:	801a      	strh	r2, [r3, #0]
			Fnlocal_u8dispint = (uint8_t)round(Appl_EEPParam.stm32.EEP_CustomerNumber);
 80198f2:	4b5b      	ldr	r3, [pc, #364]	; (8019a60 <SM_DrawTask+0x2dc>)
 80198f4:	7b9b      	ldrb	r3, [r3, #14]
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7f6 fd34 	bl	8010364 <__aeabi_ui2d>
 80198fc:	4602      	mov	r2, r0
 80198fe:	460b      	mov	r3, r1
 8019900:	4610      	mov	r0, r2
 8019902:	4619      	mov	r1, r3
 8019904:	f7f7 f86a 	bl	80109dc <__aeabi_d2uiz>
 8019908:	4603      	mov	r3, r0
 801990a:	b2da      	uxtb	r2, r3
 801990c:	4b55      	ldr	r3, [pc, #340]	; (8019a64 <SM_DrawTask+0x2e0>)
 801990e:	701a      	strb	r2, [r3, #0]
 8019910:	e0c8      	b.n	8019aa4 <SM_DrawTask+0x320>
		}
		else if(Appl_Display.SelectedIndexIntheList == 2){
 8019912:	4b4d      	ldr	r3, [pc, #308]	; (8019a48 <SM_DrawTask+0x2c4>)
 8019914:	781b      	ldrb	r3, [r3, #0]
 8019916:	2b02      	cmp	r3, #2
 8019918:	d11b      	bne.n	8019952 <SM_DrawTask+0x1ce>
			u8g2_SetFont(u8g2, u8g2_font_5x8_tr);
 801991a:	494e      	ldr	r1, [pc, #312]	; (8019a54 <SM_DrawTask+0x2d0>)
 801991c:	6878      	ldr	r0, [r7, #4]
 801991e:	f7fe f96b 	bl	8017bf8 <u8g2_SetFont>
			u8g2_UserInterfaceSelectionList(u8g2, "Battery Re-life cycle",Appl_EEPParam.stm32.EEP_RejuvenationCycleID,\
 8019922:	4b4f      	ldr	r3, [pc, #316]	; (8019a60 <SM_DrawTask+0x2dc>)
 8019924:	7bda      	ldrb	r2, [r3, #15]
 8019926:	4b50      	ldr	r3, [pc, #320]	; (8019a68 <SM_DrawTask+0x2e4>)
 8019928:	4950      	ldr	r1, [pc, #320]	; (8019a6c <SM_DrawTask+0x2e8>)
 801992a:	6878      	ldr	r0, [r7, #4]
 801992c:	f7fe fe28 	bl	8018580 <u8g2_UserInterfaceSelectionList>
					"1. INITIAL CHARGE\n2. REJUVENATION 1\n3. EQ1\n4. REJUVENATION 2\n5. EQ2\n6. FINAL CHARGE");
			if(Appl_EEPParam.stm32.EEP_RejuvenationCycleID < 6){
 8019930:	4b4b      	ldr	r3, [pc, #300]	; (8019a60 <SM_DrawTask+0x2dc>)
 8019932:	7bdb      	ldrb	r3, [r3, #15]
 8019934:	2b05      	cmp	r3, #5
 8019936:	f200 80b5 	bhi.w	8019aa4 <SM_DrawTask+0x320>
				u8g2_SetFont(u8g2,u8g2_font_unifont_t_symbols);
 801993a:	494d      	ldr	r1, [pc, #308]	; (8019a70 <SM_DrawTask+0x2ec>)
 801993c:	6878      	ldr	r0, [r7, #4]
 801993e:	f7fe f95b 	bl	8017bf8 <u8g2_SetFont>
				u8g2_DrawGlyph(u8g2, 1, 52, 0x25BE);
 8019942:	f242 53be 	movw	r3, #9662	; 0x25be
 8019946:	2234      	movs	r2, #52	; 0x34
 8019948:	2101      	movs	r1, #1
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f7fd ffea 	bl	8017924 <u8g2_DrawGlyph>
 8019950:	e0a8      	b.n	8019aa4 <SM_DrawTask+0x320>
			}
		}
		else if(Appl_Display.SelectedIndexIntheList == 3){
 8019952:	4b3d      	ldr	r3, [pc, #244]	; (8019a48 <SM_DrawTask+0x2c4>)
 8019954:	781b      	ldrb	r3, [r3, #0]
 8019956:	2b03      	cmp	r3, #3
 8019958:	d12e      	bne.n	80199b8 <SM_DrawTask+0x234>
			u8g2_SetFont(u8g2, u8g2_font_5x8_tr);
 801995a:	493e      	ldr	r1, [pc, #248]	; (8019a54 <SM_DrawTask+0x2d0>)
 801995c:	6878      	ldr	r0, [r7, #4]
 801995e:	f7fe f94b 	bl	8017bf8 <u8g2_SetFont>
			strcpy(display_buf, "SET CURRENT");
 8019962:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019966:	4a43      	ldr	r2, [pc, #268]	; (8019a74 <SM_DrawTask+0x2f0>)
 8019968:	ca07      	ldmia	r2, {r0, r1, r2}
 801996a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			strcpy(display_buf2, "VALUE : ");
 801996e:	f107 0320 	add.w	r3, r7, #32
 8019972:	4a3a      	ldr	r2, [pc, #232]	; (8019a5c <SM_DrawTask+0x2d8>)
 8019974:	ca07      	ldmia	r2, {r0, r1, r2}
 8019976:	c303      	stmia	r3!, {r0, r1}
 8019978:	701a      	strb	r2, [r3, #0]
			strcpy(display_buf3, " A");
 801997a:	f107 030c 	add.w	r3, r7, #12
 801997e:	4a3e      	ldr	r2, [pc, #248]	; (8019a78 <SM_DrawTask+0x2f4>)
 8019980:	6812      	ldr	r2, [r2, #0]
 8019982:	4611      	mov	r1, r2
 8019984:	8019      	strh	r1, [r3, #0]
 8019986:	3302      	adds	r3, #2
 8019988:	0c12      	lsrs	r2, r2, #16
 801998a:	701a      	strb	r2, [r3, #0]
			Fnlocal_u8dispint = (uint8_t)round(SM_ApplParam.UserSetCurrent);
 801998c:	4b3b      	ldr	r3, [pc, #236]	; (8019a7c <SM_DrawTask+0x2f8>)
 801998e:	695b      	ldr	r3, [r3, #20]
 8019990:	4618      	mov	r0, r3
 8019992:	f7f6 fd09 	bl	80103a8 <__aeabi_f2d>
 8019996:	4602      	mov	r2, r0
 8019998:	460b      	mov	r3, r1
 801999a:	ec43 2b10 	vmov	d0, r2, r3
 801999e:	f006 fd3d 	bl	802041c <round>
 80199a2:	ec53 2b10 	vmov	r2, r3, d0
 80199a6:	4610      	mov	r0, r2
 80199a8:	4619      	mov	r1, r3
 80199aa:	f7f7 f817 	bl	80109dc <__aeabi_d2uiz>
 80199ae:	4603      	mov	r3, r0
 80199b0:	b2da      	uxtb	r2, r3
 80199b2:	4b2c      	ldr	r3, [pc, #176]	; (8019a64 <SM_DrawTask+0x2e0>)
 80199b4:	701a      	strb	r2, [r3, #0]
 80199b6:	e075      	b.n	8019aa4 <SM_DrawTask+0x320>
		}
		else if(Appl_Display.SelectedIndexIntheList == 4){
 80199b8:	4b23      	ldr	r3, [pc, #140]	; (8019a48 <SM_DrawTask+0x2c4>)
 80199ba:	781b      	ldrb	r3, [r3, #0]
 80199bc:	2b04      	cmp	r3, #4
 80199be:	d163      	bne.n	8019a88 <SM_DrawTask+0x304>
			u8g2_SetFont(u8g2, u8g2_font_5x8_tr);
 80199c0:	4924      	ldr	r1, [pc, #144]	; (8019a54 <SM_DrawTask+0x2d0>)
 80199c2:	6878      	ldr	r0, [r7, #4]
 80199c4:	f7fe f918 	bl	8017bf8 <u8g2_SetFont>
			strcpy(display_buf, "SET TIMER");
 80199c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80199cc:	4a2c      	ldr	r2, [pc, #176]	; (8019a80 <SM_DrawTask+0x2fc>)
 80199ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80199d0:	c303      	stmia	r3!, {r0, r1}
 80199d2:	801a      	strh	r2, [r3, #0]
			strcpy(display_buf2, "VALUE : ");
 80199d4:	f107 0320 	add.w	r3, r7, #32
 80199d8:	4a20      	ldr	r2, [pc, #128]	; (8019a5c <SM_DrawTask+0x2d8>)
 80199da:	ca07      	ldmia	r2, {r0, r1, r2}
 80199dc:	c303      	stmia	r3!, {r0, r1}
 80199de:	701a      	strb	r2, [r3, #0]
			strcpy(display_buf3, " HR");
 80199e0:	f107 030c 	add.w	r3, r7, #12
 80199e4:	4a27      	ldr	r2, [pc, #156]	; (8019a84 <SM_DrawTask+0x300>)
 80199e6:	601a      	str	r2, [r3, #0]
			Fnlocal_u8dispint = (uint8_t)round(Appl_EEPParam.stm32.EEP_TimerSetHours);
 80199e8:	4b1d      	ldr	r3, [pc, #116]	; (8019a60 <SM_DrawTask+0x2dc>)
 80199ea:	7b5b      	ldrb	r3, [r3, #13]
 80199ec:	4618      	mov	r0, r3
 80199ee:	f7f6 fcb9 	bl	8010364 <__aeabi_ui2d>
 80199f2:	4602      	mov	r2, r0
 80199f4:	460b      	mov	r3, r1
 80199f6:	4610      	mov	r0, r2
 80199f8:	4619      	mov	r1, r3
 80199fa:	f7f6 ffef 	bl	80109dc <__aeabi_d2uiz>
 80199fe:	4603      	mov	r3, r0
 8019a00:	b2da      	uxtb	r2, r3
 8019a02:	4b18      	ldr	r3, [pc, #96]	; (8019a64 <SM_DrawTask+0x2e0>)
 8019a04:	701a      	strb	r2, [r3, #0]
 8019a06:	e04d      	b.n	8019aa4 <SM_DrawTask+0x320>
 8019a08:	2000486e 	.word	0x2000486e
 8019a0c:	2000053c 	.word	0x2000053c
 8019a10:	0802704c 	.word	0x0802704c
 8019a14:	08022dd4 	.word	0x08022dd4
 8019a18:	08022ddc 	.word	0x08022ddc
 8019a1c:	08022de8 	.word	0x08022de8
 8019a20:	08022df8 	.word	0x08022df8
 8019a24:	08022e0c 	.word	0x08022e0c
 8019a28:	08022e14 	.word	0x08022e14
 8019a2c:	080272d0 	.word	0x080272d0
 8019a30:	08022e20 	.word	0x08022e20
 8019a34:	08022e2c 	.word	0x08022e2c
 8019a38:	08025cc8 	.word	0x08025cc8
 8019a3c:	08022e34 	.word	0x08022e34
 8019a40:	08022e44 	.word	0x08022e44
 8019a44:	08023af0 	.word	0x08023af0
 8019a48:	20004870 	.word	0x20004870
 8019a4c:	08022e58 	.word	0x08022e58
 8019a50:	08022e84 	.word	0x08022e84
 8019a54:	08024538 	.word	0x08024538
 8019a58:	08022e90 	.word	0x08022e90
 8019a5c:	08022ea4 	.word	0x08022ea4
 8019a60:	2000005c 	.word	0x2000005c
 8019a64:	200047bd 	.word	0x200047bd
 8019a68:	08022eb0 	.word	0x08022eb0
 8019a6c:	08022f04 	.word	0x08022f04
 8019a70:	08027890 	.word	0x08027890
 8019a74:	08022f1c 	.word	0x08022f1c
 8019a78:	08022f28 	.word	0x08022f28
 8019a7c:	20004974 	.word	0x20004974
 8019a80:	08022f2c 	.word	0x08022f2c
 8019a84:	00524820 	.word	0x00524820
		}
		else if(Appl_Display.SelectedIndexIntheList == 5){
 8019a88:	4ba0      	ldr	r3, [pc, #640]	; (8019d0c <SM_DrawTask+0x588>)
 8019a8a:	781b      	ldrb	r3, [r3, #0]
 8019a8c:	2b05      	cmp	r3, #5
 8019a8e:	d109      	bne.n	8019aa4 <SM_DrawTask+0x320>
			u8g2_SetFont(u8g2, u8g2_font_10x20_tf);
 8019a90:	499f      	ldr	r1, [pc, #636]	; (8019d10 <SM_DrawTask+0x58c>)
 8019a92:	6878      	ldr	r0, [r7, #4]
 8019a94:	f7fe f8b0 	bl	8017bf8 <u8g2_SetFont>
			u8g2_DrawStr(u8g2, 20,18,"  START?");
 8019a98:	4b9e      	ldr	r3, [pc, #632]	; (8019d14 <SM_DrawTask+0x590>)
 8019a9a:	2212      	movs	r2, #18
 8019a9c:	2114      	movs	r1, #20
 8019a9e:	6878      	ldr	r0, [r7, #4]
 8019aa0:	f7fd ffee 	bl	8017a80 <u8g2_DrawStr>
		}
		if((Appl_Display.SelectedIndexIntheList != 5) && (Appl_Display.SelectedIndexIntheList != 2))
 8019aa4:	4b99      	ldr	r3, [pc, #612]	; (8019d0c <SM_DrawTask+0x588>)
 8019aa6:	781b      	ldrb	r3, [r3, #0]
 8019aa8:	2b05      	cmp	r3, #5
 8019aaa:	d014      	beq.n	8019ad6 <SM_DrawTask+0x352>
 8019aac:	4b97      	ldr	r3, [pc, #604]	; (8019d0c <SM_DrawTask+0x588>)
 8019aae:	781b      	ldrb	r3, [r3, #0]
 8019ab0:	2b02      	cmp	r3, #2
 8019ab2:	d010      	beq.n	8019ad6 <SM_DrawTask+0x352>
		u8g2_UserInterfaceInputValue(u8g2, display_buf, display_buf2,&Fnlocal_u8dispint,1,200,3,display_buf3);
 8019ab4:	f107 0220 	add.w	r2, r7, #32
 8019ab8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8019abc:	f107 030c 	add.w	r3, r7, #12
 8019ac0:	9303      	str	r3, [sp, #12]
 8019ac2:	2303      	movs	r3, #3
 8019ac4:	9302      	str	r3, [sp, #8]
 8019ac6:	23c8      	movs	r3, #200	; 0xc8
 8019ac8:	9301      	str	r3, [sp, #4]
 8019aca:	2301      	movs	r3, #1
 8019acc:	9300      	str	r3, [sp, #0]
 8019ace:	4b92      	ldr	r3, [pc, #584]	; (8019d18 <SM_DrawTask+0x594>)
 8019ad0:	6878      	ldr	r0, [r7, #4]
 8019ad2:	f7fe fa63 	bl	8017f9c <u8g2_UserInterfaceInputValue>
		Display_Buttons(u8g2,SM_enumDisplayState);
 8019ad6:	4b91      	ldr	r3, [pc, #580]	; (8019d1c <SM_DrawTask+0x598>)
 8019ad8:	781b      	ldrb	r3, [r3, #0]
 8019ada:	4619      	mov	r1, r3
 8019adc:	6878      	ldr	r0, [r7, #4]
 8019ade:	f000 febb 	bl	801a858 <Display_Buttons>
		Appl_Display.MaximumIndexInTheList = 5;
 8019ae2:	4b8a      	ldr	r3, [pc, #552]	; (8019d0c <SM_DrawTask+0x588>)
 8019ae4:	2205      	movs	r2, #5
 8019ae6:	705a      	strb	r2, [r3, #1]
	}

	if(SM_enumDisplayState == SM_enum_Display_MM_CurrentloopRunning_Slow){
 8019ae8:	4b8c      	ldr	r3, [pc, #560]	; (8019d1c <SM_DrawTask+0x598>)
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	2b09      	cmp	r3, #9
 8019aee:	d123      	bne.n	8019b38 <SM_DrawTask+0x3b4>
		u8g2_DrawHLine(u8g2,1,24,128);
 8019af0:	2380      	movs	r3, #128	; 0x80
 8019af2:	2218      	movs	r2, #24
 8019af4:	2101      	movs	r1, #1
 8019af6:	6878      	ldr	r0, [r7, #4]
 8019af8:	f7fe fa06 	bl	8017f08 <u8g2_DrawHLine>
		u8g2_DrawHLine(u8g2,1,36,128);
 8019afc:	2380      	movs	r3, #128	; 0x80
 8019afe:	2224      	movs	r2, #36	; 0x24
 8019b00:	2101      	movs	r1, #1
 8019b02:	6878      	ldr	r0, [r7, #4]
 8019b04:	f7fe fa00 	bl	8017f08 <u8g2_DrawHLine>
		u8g2_DrawVLine(u8g2,64,1,24);
 8019b08:	2318      	movs	r3, #24
 8019b0a:	2201      	movs	r2, #1
 8019b0c:	2140      	movs	r1, #64	; 0x40
 8019b0e:	6878      	ldr	r0, [r7, #4]
 8019b10:	f7fe fa13 	bl	8017f3a <u8g2_DrawVLine>
		Display_Voltage(u8g2);
 8019b14:	6878      	ldr	r0, [r7, #4]
 8019b16:	f000 fff1 	bl	801aafc <Display_Voltage>
		Display_Current(u8g2);
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f001 f878 	bl	801ac10 <Display_Current>
		Display_RunningTime(u8g2);
 8019b20:	6878      	ldr	r0, [r7, #4]
 8019b22:	f001 f8d7 	bl	801acd4 <Display_RunningTime>
		Display_ErrorMessage(u8g2);
 8019b26:	6878      	ldr	r0, [r7, #4]
 8019b28:	f000 fe2e 	bl	801a788 <Display_ErrorMessage>
		Display_Buttons(u8g2,SM_enumDisplayState);
 8019b2c:	4b7b      	ldr	r3, [pc, #492]	; (8019d1c <SM_DrawTask+0x598>)
 8019b2e:	781b      	ldrb	r3, [r3, #0]
 8019b30:	4619      	mov	r1, r3
 8019b32:	6878      	ldr	r0, [r7, #4]
 8019b34:	f000 fe90 	bl	801a858 <Display_Buttons>
	}

	if(SM_enumDisplayState == SM_enum_Display_MM_CurrentloopRunning_Stable){
 8019b38:	4b78      	ldr	r3, [pc, #480]	; (8019d1c <SM_DrawTask+0x598>)
 8019b3a:	781b      	ldrb	r3, [r3, #0]
 8019b3c:	2b0a      	cmp	r3, #10
 8019b3e:	d123      	bne.n	8019b88 <SM_DrawTask+0x404>
		u8g2_DrawHLine(u8g2,1,24,128);
 8019b40:	2380      	movs	r3, #128	; 0x80
 8019b42:	2218      	movs	r2, #24
 8019b44:	2101      	movs	r1, #1
 8019b46:	6878      	ldr	r0, [r7, #4]
 8019b48:	f7fe f9de 	bl	8017f08 <u8g2_DrawHLine>
		u8g2_DrawHLine(u8g2,1,36,128);
 8019b4c:	2380      	movs	r3, #128	; 0x80
 8019b4e:	2224      	movs	r2, #36	; 0x24
 8019b50:	2101      	movs	r1, #1
 8019b52:	6878      	ldr	r0, [r7, #4]
 8019b54:	f7fe f9d8 	bl	8017f08 <u8g2_DrawHLine>
		u8g2_DrawVLine(u8g2,64,1,24);
 8019b58:	2318      	movs	r3, #24
 8019b5a:	2201      	movs	r2, #1
 8019b5c:	2140      	movs	r1, #64	; 0x40
 8019b5e:	6878      	ldr	r0, [r7, #4]
 8019b60:	f7fe f9eb 	bl	8017f3a <u8g2_DrawVLine>
		Display_Voltage(u8g2);
 8019b64:	6878      	ldr	r0, [r7, #4]
 8019b66:	f000 ffc9 	bl	801aafc <Display_Voltage>
		Display_Current(u8g2);
 8019b6a:	6878      	ldr	r0, [r7, #4]
 8019b6c:	f001 f850 	bl	801ac10 <Display_Current>
		Display_RunningTime(u8g2);
 8019b70:	6878      	ldr	r0, [r7, #4]
 8019b72:	f001 f8af 	bl	801acd4 <Display_RunningTime>
		Display_ErrorMessage(u8g2);
 8019b76:	6878      	ldr	r0, [r7, #4]
 8019b78:	f000 fe06 	bl	801a788 <Display_ErrorMessage>
		Display_Buttons(u8g2,SM_enumDisplayState);
 8019b7c:	4b67      	ldr	r3, [pc, #412]	; (8019d1c <SM_DrawTask+0x598>)
 8019b7e:	781b      	ldrb	r3, [r3, #0]
 8019b80:	4619      	mov	r1, r3
 8019b82:	6878      	ldr	r0, [r7, #4]
 8019b84:	f000 fe68 	bl	801a858 <Display_Buttons>
	}

	if(SM_enumDisplayState == SM_enum_Display_SelfTest){
 8019b88:	4b64      	ldr	r3, [pc, #400]	; (8019d1c <SM_DrawTask+0x598>)
 8019b8a:	781b      	ldrb	r3, [r3, #0]
 8019b8c:	2b03      	cmp	r3, #3
 8019b8e:	f040 821b 	bne.w	8019fc8 <SM_DrawTask+0x844>
		u8g2_SetFont(u8g2, u8g2_font_5x8_tf);
 8019b92:	4963      	ldr	r1, [pc, #396]	; (8019d20 <SM_DrawTask+0x59c>)
 8019b94:	6878      	ldr	r0, [r7, #4]
 8019b96:	f7fe f82f 	bl	8017bf8 <u8g2_SetFont>
		if(Appl_diagActiveFault.BatteryReversal == 1){
 8019b9a:	4b62      	ldr	r3, [pc, #392]	; (8019d24 <SM_DrawTask+0x5a0>)
 8019b9c:	7a1b      	ldrb	r3, [r3, #8]
 8019b9e:	2b01      	cmp	r3, #1
 8019ba0:	d10c      	bne.n	8019bbc <SM_DrawTask+0x438>
			u8g2_DrawStr(u8g2, 1,11,"OUTPUT TERMINAL");
 8019ba2:	4b61      	ldr	r3, [pc, #388]	; (8019d28 <SM_DrawTask+0x5a4>)
 8019ba4:	220b      	movs	r2, #11
 8019ba6:	2101      	movs	r1, #1
 8019ba8:	6878      	ldr	r0, [r7, #4]
 8019baa:	f7fd ff69 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,21,"IS NOT PROPER");
 8019bae:	4b5f      	ldr	r3, [pc, #380]	; (8019d2c <SM_DrawTask+0x5a8>)
 8019bb0:	2215      	movs	r2, #21
 8019bb2:	2101      	movs	r1, #1
 8019bb4:	6878      	ldr	r0, [r7, #4]
 8019bb6:	f7fd ff63 	bl	8017a80 <u8g2_DrawStr>
 8019bba:	e205      	b.n	8019fc8 <SM_DrawTask+0x844>
		}
		else if(Appl_diagActiveFault.PowerFail_Z1 == 1){
 8019bbc:	4b59      	ldr	r3, [pc, #356]	; (8019d24 <SM_DrawTask+0x5a0>)
 8019bbe:	781b      	ldrb	r3, [r3, #0]
 8019bc0:	2b01      	cmp	r3, #1
 8019bc2:	d10c      	bne.n	8019bde <SM_DrawTask+0x45a>
			u8g2_DrawStr(u8g2, 1,11,"INPUT TERMINAL 1(RED)");
 8019bc4:	4b5a      	ldr	r3, [pc, #360]	; (8019d30 <SM_DrawTask+0x5ac>)
 8019bc6:	220b      	movs	r2, #11
 8019bc8:	2101      	movs	r1, #1
 8019bca:	6878      	ldr	r0, [r7, #4]
 8019bcc:	f7fd ff58 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,21,"NOT CONNECTED");
 8019bd0:	4b58      	ldr	r3, [pc, #352]	; (8019d34 <SM_DrawTask+0x5b0>)
 8019bd2:	2215      	movs	r2, #21
 8019bd4:	2101      	movs	r1, #1
 8019bd6:	6878      	ldr	r0, [r7, #4]
 8019bd8:	f7fd ff52 	bl	8017a80 <u8g2_DrawStr>
 8019bdc:	e1f4      	b.n	8019fc8 <SM_DrawTask+0x844>
		}
		else if(Appl_diagActiveFault.PowerFail_Z2 == 1){
 8019bde:	4b51      	ldr	r3, [pc, #324]	; (8019d24 <SM_DrawTask+0x5a0>)
 8019be0:	785b      	ldrb	r3, [r3, #1]
 8019be2:	2b01      	cmp	r3, #1
 8019be4:	d10c      	bne.n	8019c00 <SM_DrawTask+0x47c>
			u8g2_DrawStr(u8g2, 1,11,"INPUT TERMINAL 2(YEL)");
 8019be6:	4b54      	ldr	r3, [pc, #336]	; (8019d38 <SM_DrawTask+0x5b4>)
 8019be8:	220b      	movs	r2, #11
 8019bea:	2101      	movs	r1, #1
 8019bec:	6878      	ldr	r0, [r7, #4]
 8019bee:	f7fd ff47 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,21,"NOT CONNECTED");
 8019bf2:	4b50      	ldr	r3, [pc, #320]	; (8019d34 <SM_DrawTask+0x5b0>)
 8019bf4:	2215      	movs	r2, #21
 8019bf6:	2101      	movs	r1, #1
 8019bf8:	6878      	ldr	r0, [r7, #4]
 8019bfa:	f7fd ff41 	bl	8017a80 <u8g2_DrawStr>
 8019bfe:	e1e3      	b.n	8019fc8 <SM_DrawTask+0x844>
		}
		else if(Appl_diagActiveFault.PowerFail_Z3 == 1){
 8019c00:	4b48      	ldr	r3, [pc, #288]	; (8019d24 <SM_DrawTask+0x5a0>)
 8019c02:	789b      	ldrb	r3, [r3, #2]
 8019c04:	2b01      	cmp	r3, #1
 8019c06:	d10c      	bne.n	8019c22 <SM_DrawTask+0x49e>
			u8g2_DrawStr(u8g2, 1,11,"INPUT TERMINAL 3(BLU)");
 8019c08:	4b4c      	ldr	r3, [pc, #304]	; (8019d3c <SM_DrawTask+0x5b8>)
 8019c0a:	220b      	movs	r2, #11
 8019c0c:	2101      	movs	r1, #1
 8019c0e:	6878      	ldr	r0, [r7, #4]
 8019c10:	f7fd ff36 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,21,"NOT CONNECTED");
 8019c14:	4b47      	ldr	r3, [pc, #284]	; (8019d34 <SM_DrawTask+0x5b0>)
 8019c16:	2215      	movs	r2, #21
 8019c18:	2101      	movs	r1, #1
 8019c1a:	6878      	ldr	r0, [r7, #4]
 8019c1c:	f7fd ff30 	bl	8017a80 <u8g2_DrawStr>
 8019c20:	e1d2      	b.n	8019fc8 <SM_DrawTask+0x844>
		}
		else if(Appl_diagActiveFault.OverVoltage == 1){
 8019c22:	4b40      	ldr	r3, [pc, #256]	; (8019d24 <SM_DrawTask+0x5a0>)
 8019c24:	78db      	ldrb	r3, [r3, #3]
 8019c26:	2b01      	cmp	r3, #1
 8019c28:	f040 8094 	bne.w	8019d54 <SM_DrawTask+0x5d0>
			u8g2_DrawStr(u8g2, 1,11,"BATTERY VOLTAGE");
 8019c2c:	4b44      	ldr	r3, [pc, #272]	; (8019d40 <SM_DrawTask+0x5bc>)
 8019c2e:	220b      	movs	r2, #11
 8019c30:	2101      	movs	r1, #1
 8019c32:	6878      	ldr	r0, [r7, #4]
 8019c34:	f7fd ff24 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,21,"DETECTED IS HIGH");
 8019c38:	4b42      	ldr	r3, [pc, #264]	; (8019d44 <SM_DrawTask+0x5c0>)
 8019c3a:	2215      	movs	r2, #21
 8019c3c:	2101      	movs	r1, #1
 8019c3e:	6878      	ldr	r0, [r7, #4]
 8019c40:	f7fd ff1e 	bl	8017a80 <u8g2_DrawStr>
			Fnclocal_dispfloat = SM_ApplParam.RealtimeVoltage;
 8019c44:	4b40      	ldr	r3, [pc, #256]	; (8019d48 <SM_DrawTask+0x5c4>)
 8019c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c48:	65fb      	str	r3, [r7, #92]	; 0x5c
			Fnclocal_dispfloat = round(Fnclocal_dispfloat);
 8019c4a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019c4c:	f7f6 fbac 	bl	80103a8 <__aeabi_f2d>
 8019c50:	4602      	mov	r2, r0
 8019c52:	460b      	mov	r3, r1
 8019c54:	ec43 2b10 	vmov	d0, r2, r3
 8019c58:	f006 fbe0 	bl	802041c <round>
 8019c5c:	ec53 2b10 	vmov	r2, r3, d0
 8019c60:	4610      	mov	r0, r2
 8019c62:	4619      	mov	r1, r3
 8019c64:	f7f6 feda 	bl	8010a1c <__aeabi_d2f>
 8019c68:	4603      	mov	r3, r0
 8019c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
			gcvt(Fnclocal_dispfloat,3,display_buf);
 8019c6c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019c6e:	f7f6 fb9b 	bl	80103a8 <__aeabi_f2d>
 8019c72:	4604      	mov	r4, r0
 8019c74:	460d      	mov	r5, r1
 8019c76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019c7a:	4619      	mov	r1, r3
 8019c7c:	2003      	movs	r0, #3
 8019c7e:	ec45 4b10 	vmov	d0, r4, r5
 8019c82:	f006 fc3b 	bl	80204fc <gcvt>
			u8g2_DrawStr(u8g2, 1,31,display_buf);
 8019c86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019c8a:	221f      	movs	r2, #31
 8019c8c:	2101      	movs	r1, #1
 8019c8e:	6878      	ldr	r0, [r7, #4]
 8019c90:	f7fd fef6 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 65,31,"Volts");
 8019c94:	4b2d      	ldr	r3, [pc, #180]	; (8019d4c <SM_DrawTask+0x5c8>)
 8019c96:	221f      	movs	r2, #31
 8019c98:	2141      	movs	r1, #65	; 0x41
 8019c9a:	6878      	ldr	r0, [r7, #4]
 8019c9c:	f7fd fef0 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,41,"MAX LIMIT:");
 8019ca0:	4b2b      	ldr	r3, [pc, #172]	; (8019d50 <SM_DrawTask+0x5cc>)
 8019ca2:	2229      	movs	r2, #41	; 0x29
 8019ca4:	2101      	movs	r1, #1
 8019ca6:	6878      	ldr	r0, [r7, #4]
 8019ca8:	f7fd feea 	bl	8017a80 <u8g2_DrawStr>
			Fnclocal_dispfloat = SM_ApplParam.OverVoltageThreshold;
 8019cac:	4b26      	ldr	r3, [pc, #152]	; (8019d48 <SM_DrawTask+0x5c4>)
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
			Fnclocal_dispfloat = round(Fnclocal_dispfloat);
 8019cb2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019cb4:	f7f6 fb78 	bl	80103a8 <__aeabi_f2d>
 8019cb8:	4602      	mov	r2, r0
 8019cba:	460b      	mov	r3, r1
 8019cbc:	ec43 2b10 	vmov	d0, r2, r3
 8019cc0:	f006 fbac 	bl	802041c <round>
 8019cc4:	ec53 2b10 	vmov	r2, r3, d0
 8019cc8:	4610      	mov	r0, r2
 8019cca:	4619      	mov	r1, r3
 8019ccc:	f7f6 fea6 	bl	8010a1c <__aeabi_d2f>
 8019cd0:	4603      	mov	r3, r0
 8019cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
			gcvt(Fnclocal_dispfloat,3,display_buf);
 8019cd4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019cd6:	f7f6 fb67 	bl	80103a8 <__aeabi_f2d>
 8019cda:	4604      	mov	r4, r0
 8019cdc:	460d      	mov	r5, r1
 8019cde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019ce2:	4619      	mov	r1, r3
 8019ce4:	2003      	movs	r0, #3
 8019ce6:	ec45 4b10 	vmov	d0, r4, r5
 8019cea:	f006 fc07 	bl	80204fc <gcvt>
			u8g2_DrawStr(u8g2, 64,41,display_buf);
 8019cee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019cf2:	2229      	movs	r2, #41	; 0x29
 8019cf4:	2140      	movs	r1, #64	; 0x40
 8019cf6:	6878      	ldr	r0, [r7, #4]
 8019cf8:	f7fd fec2 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 94,41,"Volts");
 8019cfc:	4b13      	ldr	r3, [pc, #76]	; (8019d4c <SM_DrawTask+0x5c8>)
 8019cfe:	2229      	movs	r2, #41	; 0x29
 8019d00:	215e      	movs	r1, #94	; 0x5e
 8019d02:	6878      	ldr	r0, [r7, #4]
 8019d04:	f7fd febc 	bl	8017a80 <u8g2_DrawStr>
 8019d08:	e15e      	b.n	8019fc8 <SM_DrawTask+0x844>
 8019d0a:	bf00      	nop
 8019d0c:	20004870 	.word	0x20004870
 8019d10:	080248b0 	.word	0x080248b0
 8019d14:	08022f38 	.word	0x08022f38
 8019d18:	200047bd 	.word	0x200047bd
 8019d1c:	2000486e 	.word	0x2000486e
 8019d20:	08023e3c 	.word	0x08023e3c
 8019d24:	200047b0 	.word	0x200047b0
 8019d28:	08022f44 	.word	0x08022f44
 8019d2c:	08022f54 	.word	0x08022f54
 8019d30:	08022f64 	.word	0x08022f64
 8019d34:	08022f7c 	.word	0x08022f7c
 8019d38:	08022f8c 	.word	0x08022f8c
 8019d3c:	08022fa4 	.word	0x08022fa4
 8019d40:	08022fbc 	.word	0x08022fbc
 8019d44:	08022fcc 	.word	0x08022fcc
 8019d48:	20004974 	.word	0x20004974
 8019d4c:	08022fe0 	.word	0x08022fe0
 8019d50:	08022fe8 	.word	0x08022fe8

		}
		else if(Appl_diagActiveFault.UnderVoltage == 1){
 8019d54:	4b67      	ldr	r3, [pc, #412]	; (8019ef4 <SM_DrawTask+0x770>)
 8019d56:	795b      	ldrb	r3, [r3, #5]
 8019d58:	2b01      	cmp	r3, #1
 8019d5a:	d16e      	bne.n	8019e3a <SM_DrawTask+0x6b6>
			u8g2_DrawStr(u8g2, 1,11,"BATTERY VOLTAGE");
 8019d5c:	4b66      	ldr	r3, [pc, #408]	; (8019ef8 <SM_DrawTask+0x774>)
 8019d5e:	220b      	movs	r2, #11
 8019d60:	2101      	movs	r1, #1
 8019d62:	6878      	ldr	r0, [r7, #4]
 8019d64:	f7fd fe8c 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,21,"DETECTED IS TOO LOW");
 8019d68:	4b64      	ldr	r3, [pc, #400]	; (8019efc <SM_DrawTask+0x778>)
 8019d6a:	2215      	movs	r2, #21
 8019d6c:	2101      	movs	r1, #1
 8019d6e:	6878      	ldr	r0, [r7, #4]
 8019d70:	f7fd fe86 	bl	8017a80 <u8g2_DrawStr>
			Fnclocal_dispfloat = SM_ApplParam.RealtimeVoltage;
 8019d74:	4b62      	ldr	r3, [pc, #392]	; (8019f00 <SM_DrawTask+0x77c>)
 8019d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d78:	65fb      	str	r3, [r7, #92]	; 0x5c
			Fnclocal_dispfloat = round(Fnclocal_dispfloat);
 8019d7a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019d7c:	f7f6 fb14 	bl	80103a8 <__aeabi_f2d>
 8019d80:	4602      	mov	r2, r0
 8019d82:	460b      	mov	r3, r1
 8019d84:	ec43 2b10 	vmov	d0, r2, r3
 8019d88:	f006 fb48 	bl	802041c <round>
 8019d8c:	ec53 2b10 	vmov	r2, r3, d0
 8019d90:	4610      	mov	r0, r2
 8019d92:	4619      	mov	r1, r3
 8019d94:	f7f6 fe42 	bl	8010a1c <__aeabi_d2f>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
			gcvt(Fnclocal_dispfloat,3,display_buf);
 8019d9c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019d9e:	f7f6 fb03 	bl	80103a8 <__aeabi_f2d>
 8019da2:	4604      	mov	r4, r0
 8019da4:	460d      	mov	r5, r1
 8019da6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019daa:	4619      	mov	r1, r3
 8019dac:	2003      	movs	r0, #3
 8019dae:	ec45 4b10 	vmov	d0, r4, r5
 8019db2:	f006 fba3 	bl	80204fc <gcvt>
			u8g2_DrawStr(u8g2, 1,31,display_buf);
 8019db6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019dba:	221f      	movs	r2, #31
 8019dbc:	2101      	movs	r1, #1
 8019dbe:	6878      	ldr	r0, [r7, #4]
 8019dc0:	f7fd fe5e 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 65,31,"Volts");
 8019dc4:	4b4f      	ldr	r3, [pc, #316]	; (8019f04 <SM_DrawTask+0x780>)
 8019dc6:	221f      	movs	r2, #31
 8019dc8:	2141      	movs	r1, #65	; 0x41
 8019dca:	6878      	ldr	r0, [r7, #4]
 8019dcc:	f7fd fe58 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,41,"MIN LIMIT:");
 8019dd0:	4b4d      	ldr	r3, [pc, #308]	; (8019f08 <SM_DrawTask+0x784>)
 8019dd2:	2229      	movs	r2, #41	; 0x29
 8019dd4:	2101      	movs	r1, #1
 8019dd6:	6878      	ldr	r0, [r7, #4]
 8019dd8:	f7fd fe52 	bl	8017a80 <u8g2_DrawStr>
			Fnclocal_dispfloat = SM_ApplParam.UnderVoltageThreshold;
 8019ddc:	4b48      	ldr	r3, [pc, #288]	; (8019f00 <SM_DrawTask+0x77c>)
 8019dde:	685b      	ldr	r3, [r3, #4]
 8019de0:	65fb      	str	r3, [r7, #92]	; 0x5c
			Fnclocal_dispfloat = round(Fnclocal_dispfloat);
 8019de2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019de4:	f7f6 fae0 	bl	80103a8 <__aeabi_f2d>
 8019de8:	4602      	mov	r2, r0
 8019dea:	460b      	mov	r3, r1
 8019dec:	ec43 2b10 	vmov	d0, r2, r3
 8019df0:	f006 fb14 	bl	802041c <round>
 8019df4:	ec53 2b10 	vmov	r2, r3, d0
 8019df8:	4610      	mov	r0, r2
 8019dfa:	4619      	mov	r1, r3
 8019dfc:	f7f6 fe0e 	bl	8010a1c <__aeabi_d2f>
 8019e00:	4603      	mov	r3, r0
 8019e02:	65fb      	str	r3, [r7, #92]	; 0x5c
			gcvt(Fnclocal_dispfloat,3,display_buf);
 8019e04:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019e06:	f7f6 facf 	bl	80103a8 <__aeabi_f2d>
 8019e0a:	4604      	mov	r4, r0
 8019e0c:	460d      	mov	r5, r1
 8019e0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019e12:	4619      	mov	r1, r3
 8019e14:	2003      	movs	r0, #3
 8019e16:	ec45 4b10 	vmov	d0, r4, r5
 8019e1a:	f006 fb6f 	bl	80204fc <gcvt>
			u8g2_DrawStr(u8g2, 64,41,display_buf);
 8019e1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019e22:	2229      	movs	r2, #41	; 0x29
 8019e24:	2140      	movs	r1, #64	; 0x40
 8019e26:	6878      	ldr	r0, [r7, #4]
 8019e28:	f7fd fe2a 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 94,41,"Volts");
 8019e2c:	4b35      	ldr	r3, [pc, #212]	; (8019f04 <SM_DrawTask+0x780>)
 8019e2e:	2229      	movs	r2, #41	; 0x29
 8019e30:	215e      	movs	r1, #94	; 0x5e
 8019e32:	6878      	ldr	r0, [r7, #4]
 8019e34:	f7fd fe24 	bl	8017a80 <u8g2_DrawStr>
 8019e38:	e0c6      	b.n	8019fc8 <SM_DrawTask+0x844>
		}
		else{
			u8g2_DrawStr(u8g2, 1,11,"CHECK THE FOLLOWING:");
 8019e3a:	4b34      	ldr	r3, [pc, #208]	; (8019f0c <SM_DrawTask+0x788>)
 8019e3c:	220b      	movs	r2, #11
 8019e3e:	2101      	movs	r1, #1
 8019e40:	6878      	ldr	r0, [r7, #4]
 8019e42:	f7fd fe1d 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,21,"VOLTAGE: ");
 8019e46:	4b32      	ldr	r3, [pc, #200]	; (8019f10 <SM_DrawTask+0x78c>)
 8019e48:	2215      	movs	r2, #21
 8019e4a:	2101      	movs	r1, #1
 8019e4c:	6878      	ldr	r0, [r7, #4]
 8019e4e:	f7fd fe17 	bl	8017a80 <u8g2_DrawStr>
			Fnclocal_dispfloat = SM_ApplParam.RealtimeVoltage;
 8019e52:	4b2b      	ldr	r3, [pc, #172]	; (8019f00 <SM_DrawTask+0x77c>)
 8019e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e56:	65fb      	str	r3, [r7, #92]	; 0x5c
			Fnclocal_dispfloat = round(Fnclocal_dispfloat);
 8019e58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019e5a:	f7f6 faa5 	bl	80103a8 <__aeabi_f2d>
 8019e5e:	4602      	mov	r2, r0
 8019e60:	460b      	mov	r3, r1
 8019e62:	ec43 2b10 	vmov	d0, r2, r3
 8019e66:	f006 fad9 	bl	802041c <round>
 8019e6a:	ec53 2b10 	vmov	r2, r3, d0
 8019e6e:	4610      	mov	r0, r2
 8019e70:	4619      	mov	r1, r3
 8019e72:	f7f6 fdd3 	bl	8010a1c <__aeabi_d2f>
 8019e76:	4603      	mov	r3, r0
 8019e78:	65fb      	str	r3, [r7, #92]	; 0x5c
			gcvt(Fnclocal_dispfloat,3,display_buf);
 8019e7a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019e7c:	f7f6 fa94 	bl	80103a8 <__aeabi_f2d>
 8019e80:	4604      	mov	r4, r0
 8019e82:	460d      	mov	r5, r1
 8019e84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019e88:	4619      	mov	r1, r3
 8019e8a:	2003      	movs	r0, #3
 8019e8c:	ec45 4b10 	vmov	d0, r4, r5
 8019e90:	f006 fb34 	bl	80204fc <gcvt>
			u8g2_DrawStr(u8g2, 70,21,display_buf);
 8019e94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019e98:	2215      	movs	r2, #21
 8019e9a:	2146      	movs	r1, #70	; 0x46
 8019e9c:	6878      	ldr	r0, [r7, #4]
 8019e9e:	f7fd fdef 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 90,21,"V");
 8019ea2:	4b1c      	ldr	r3, [pc, #112]	; (8019f14 <SM_DrawTask+0x790>)
 8019ea4:	2215      	movs	r2, #21
 8019ea6:	215a      	movs	r1, #90	; 0x5a
 8019ea8:	6878      	ldr	r0, [r7, #4]
 8019eaa:	f7fd fde9 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,31,"ALL LEDs ARE BLINKING ");
 8019eae:	4b1a      	ldr	r3, [pc, #104]	; (8019f18 <SM_DrawTask+0x794>)
 8019eb0:	221f      	movs	r2, #31
 8019eb2:	2101      	movs	r1, #1
 8019eb4:	6878      	ldr	r0, [r7, #4]
 8019eb6:	f7fd fde3 	bl	8017a80 <u8g2_DrawStr>
			if(Appl_diagActiveFault.PhaseReversal == 1) u8g2_DrawStr(u8g2, 1,41,"PHASE IS REVERSE");else u8g2_DrawStr(u8g2, 1,41,"PHASE IS OK");
 8019eba:	4b0e      	ldr	r3, [pc, #56]	; (8019ef4 <SM_DrawTask+0x770>)
 8019ebc:	79db      	ldrb	r3, [r3, #7]
 8019ebe:	2b01      	cmp	r3, #1
 8019ec0:	d106      	bne.n	8019ed0 <SM_DrawTask+0x74c>
 8019ec2:	4b16      	ldr	r3, [pc, #88]	; (8019f1c <SM_DrawTask+0x798>)
 8019ec4:	2229      	movs	r2, #41	; 0x29
 8019ec6:	2101      	movs	r1, #1
 8019ec8:	6878      	ldr	r0, [r7, #4]
 8019eca:	f7fd fdd9 	bl	8017a80 <u8g2_DrawStr>
 8019ece:	e005      	b.n	8019edc <SM_DrawTask+0x758>
 8019ed0:	4b13      	ldr	r3, [pc, #76]	; (8019f20 <SM_DrawTask+0x79c>)
 8019ed2:	2229      	movs	r2, #41	; 0x29
 8019ed4:	2101      	movs	r1, #1
 8019ed6:	6878      	ldr	r0, [r7, #4]
 8019ed8:	f7fd fdd2 	bl	8017a80 <u8g2_DrawStr>
			if(Appl_diagActiveFault.HighTempperatureSCR == 1) u8g2_DrawStr(u8g2, 1,51,"TEMP IS HIGH");else u8g2_DrawStr(u8g2, 1,51,"TEMP IS ALRIGHT");
 8019edc:	4b05      	ldr	r3, [pc, #20]	; (8019ef4 <SM_DrawTask+0x770>)
 8019ede:	799b      	ldrb	r3, [r3, #6]
 8019ee0:	2b01      	cmp	r3, #1
 8019ee2:	d121      	bne.n	8019f28 <SM_DrawTask+0x7a4>
 8019ee4:	4b0f      	ldr	r3, [pc, #60]	; (8019f24 <SM_DrawTask+0x7a0>)
 8019ee6:	2233      	movs	r2, #51	; 0x33
 8019ee8:	2101      	movs	r1, #1
 8019eea:	6878      	ldr	r0, [r7, #4]
 8019eec:	f7fd fdc8 	bl	8017a80 <u8g2_DrawStr>
 8019ef0:	e020      	b.n	8019f34 <SM_DrawTask+0x7b0>
 8019ef2:	bf00      	nop
 8019ef4:	200047b0 	.word	0x200047b0
 8019ef8:	08022fbc 	.word	0x08022fbc
 8019efc:	08022ff4 	.word	0x08022ff4
 8019f00:	20004974 	.word	0x20004974
 8019f04:	08022fe0 	.word	0x08022fe0
 8019f08:	08023008 	.word	0x08023008
 8019f0c:	08023014 	.word	0x08023014
 8019f10:	0802302c 	.word	0x0802302c
 8019f14:	08023038 	.word	0x08023038
 8019f18:	0802303c 	.word	0x0802303c
 8019f1c:	08023054 	.word	0x08023054
 8019f20:	08023068 	.word	0x08023068
 8019f24:	08023074 	.word	0x08023074
 8019f28:	4bb7      	ldr	r3, [pc, #732]	; (801a208 <SM_DrawTask+0xa84>)
 8019f2a:	2233      	movs	r2, #51	; 0x33
 8019f2c:	2101      	movs	r1, #1
 8019f2e:	6878      	ldr	r0, [r7, #4]
 8019f30:	f7fd fda6 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,61,"MEMORY % : ");
 8019f34:	4bb5      	ldr	r3, [pc, #724]	; (801a20c <SM_DrawTask+0xa88>)
 8019f36:	223d      	movs	r2, #61	; 0x3d
 8019f38:	2101      	movs	r1, #1
 8019f3a:	6878      	ldr	r0, [r7, #4]
 8019f3c:	f7fd fda0 	bl	8017a80 <u8g2_DrawStr>
			Fnclocal_dispfloat = (Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH<<8 | Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL)*100.0/4000.0;
 8019f40:	4bb3      	ldr	r3, [pc, #716]	; (801a210 <SM_DrawTask+0xa8c>)
 8019f42:	7c1b      	ldrb	r3, [r3, #16]
 8019f44:	021b      	lsls	r3, r3, #8
 8019f46:	4ab2      	ldr	r2, [pc, #712]	; (801a210 <SM_DrawTask+0xa8c>)
 8019f48:	7c52      	ldrb	r2, [r2, #17]
 8019f4a:	4313      	orrs	r3, r2
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	f7f6 fa19 	bl	8010384 <__aeabi_i2d>
 8019f52:	f04f 0200 	mov.w	r2, #0
 8019f56:	4baf      	ldr	r3, [pc, #700]	; (801a214 <SM_DrawTask+0xa90>)
 8019f58:	f7f6 fa7e 	bl	8010458 <__aeabi_dmul>
 8019f5c:	4602      	mov	r2, r0
 8019f5e:	460b      	mov	r3, r1
 8019f60:	4610      	mov	r0, r2
 8019f62:	4619      	mov	r1, r3
 8019f64:	f04f 0200 	mov.w	r2, #0
 8019f68:	4bab      	ldr	r3, [pc, #684]	; (801a218 <SM_DrawTask+0xa94>)
 8019f6a:	f7f6 fb9f 	bl	80106ac <__aeabi_ddiv>
 8019f6e:	4602      	mov	r2, r0
 8019f70:	460b      	mov	r3, r1
 8019f72:	4610      	mov	r0, r2
 8019f74:	4619      	mov	r1, r3
 8019f76:	f7f6 fd51 	bl	8010a1c <__aeabi_d2f>
 8019f7a:	4603      	mov	r3, r0
 8019f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
			Fnclocal_dispfloat = round(Fnclocal_dispfloat);
 8019f7e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019f80:	f7f6 fa12 	bl	80103a8 <__aeabi_f2d>
 8019f84:	4602      	mov	r2, r0
 8019f86:	460b      	mov	r3, r1
 8019f88:	ec43 2b10 	vmov	d0, r2, r3
 8019f8c:	f006 fa46 	bl	802041c <round>
 8019f90:	ec53 2b10 	vmov	r2, r3, d0
 8019f94:	4610      	mov	r0, r2
 8019f96:	4619      	mov	r1, r3
 8019f98:	f7f6 fd40 	bl	8010a1c <__aeabi_d2f>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
			gcvt(Fnclocal_dispfloat,3,display_buf);
 8019fa0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019fa2:	f7f6 fa01 	bl	80103a8 <__aeabi_f2d>
 8019fa6:	4604      	mov	r4, r0
 8019fa8:	460d      	mov	r5, r1
 8019faa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019fae:	4619      	mov	r1, r3
 8019fb0:	2003      	movs	r0, #3
 8019fb2:	ec45 4b10 	vmov	d0, r4, r5
 8019fb6:	f006 faa1 	bl	80204fc <gcvt>
			u8g2_DrawStr(u8g2, 70,61,display_buf);
 8019fba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019fbe:	223d      	movs	r2, #61	; 0x3d
 8019fc0:	2146      	movs	r1, #70	; 0x46
 8019fc2:	6878      	ldr	r0, [r7, #4]
 8019fc4:	f7fd fd5c 	bl	8017a80 <u8g2_DrawStr>
		}
	}

	if(SM_enumDisplayState == SM_enum_Display_Settings_Menu){
 8019fc8:	4b94      	ldr	r3, [pc, #592]	; (801a21c <SM_DrawTask+0xa98>)
 8019fca:	781b      	ldrb	r3, [r3, #0]
 8019fcc:	2b04      	cmp	r3, #4
 8019fce:	d113      	bne.n	8019ff8 <SM_DrawTask+0x874>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tr);
 8019fd0:	4993      	ldr	r1, [pc, #588]	; (801a220 <SM_DrawTask+0xa9c>)
 8019fd2:	6878      	ldr	r0, [r7, #4]
 8019fd4:	f7fd fe10 	bl	8017bf8 <u8g2_SetFont>
		u8g2_UserInterfaceSelectionList(u8g2, "SETTINGS", Appl_Display.SelectedIndexIntheList,\
 8019fd8:	4b92      	ldr	r3, [pc, #584]	; (801a224 <SM_DrawTask+0xaa0>)
 8019fda:	781a      	ldrb	r2, [r3, #0]
 8019fdc:	4b92      	ldr	r3, [pc, #584]	; (801a228 <SM_DrawTask+0xaa4>)
 8019fde:	4993      	ldr	r1, [pc, #588]	; (801a22c <SM_DrawTask+0xaa8>)
 8019fe0:	6878      	ldr	r0, [r7, #4]
 8019fe2:	f7fe facd 	bl	8018580 <u8g2_UserInterfaceSelectionList>
				"1. DATA_TRANSFER\n2. DATA_ERASE\n3. MAX VOLTAGE");
		Appl_Display.MaximumIndexInTheList = 3;
 8019fe6:	4b8f      	ldr	r3, [pc, #572]	; (801a224 <SM_DrawTask+0xaa0>)
 8019fe8:	2203      	movs	r2, #3
 8019fea:	705a      	strb	r2, [r3, #1]
		Display_Buttons(u8g2,SM_enumDisplayState);
 8019fec:	4b8b      	ldr	r3, [pc, #556]	; (801a21c <SM_DrawTask+0xa98>)
 8019fee:	781b      	ldrb	r3, [r3, #0]
 8019ff0:	4619      	mov	r1, r3
 8019ff2:	6878      	ldr	r0, [r7, #4]
 8019ff4:	f000 fc30 	bl	801a858 <Display_Buttons>
	}

	if(SM_enumDisplayState == SM_enum_Display_Settings_Menu_MaxVoltage){
 8019ff8:	4b88      	ldr	r3, [pc, #544]	; (801a21c <SM_DrawTask+0xa98>)
 8019ffa:	781b      	ldrb	r3, [r3, #0]
 8019ffc:	2b08      	cmp	r3, #8
 8019ffe:	d13a      	bne.n	801a076 <SM_DrawTask+0x8f2>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tr);
 801a000:	4987      	ldr	r1, [pc, #540]	; (801a220 <SM_DrawTask+0xa9c>)
 801a002:	6878      	ldr	r0, [r7, #4]
 801a004:	f7fd fdf8 	bl	8017bf8 <u8g2_SetFont>
		Fnclocal_dispfloat = round(SM_ApplParam.OverVoltageThreshold);
 801a008:	4b89      	ldr	r3, [pc, #548]	; (801a230 <SM_DrawTask+0xaac>)
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	4618      	mov	r0, r3
 801a00e:	f7f6 f9cb 	bl	80103a8 <__aeabi_f2d>
 801a012:	4602      	mov	r2, r0
 801a014:	460b      	mov	r3, r1
 801a016:	ec43 2b10 	vmov	d0, r2, r3
 801a01a:	f006 f9ff 	bl	802041c <round>
 801a01e:	ec53 2b10 	vmov	r2, r3, d0
 801a022:	4610      	mov	r0, r2
 801a024:	4619      	mov	r1, r3
 801a026:	f7f6 fcf9 	bl	8010a1c <__aeabi_d2f>
 801a02a:	4603      	mov	r3, r0
 801a02c:	65fb      	str	r3, [r7, #92]	; 0x5c
		u8g2_DrawStr(u8g2, 1,20,"Max Voltage(V)");
 801a02e:	4b81      	ldr	r3, [pc, #516]	; (801a234 <SM_DrawTask+0xab0>)
 801a030:	2214      	movs	r2, #20
 801a032:	2101      	movs	r1, #1
 801a034:	6878      	ldr	r0, [r7, #4]
 801a036:	f7fd fd23 	bl	8017a80 <u8g2_DrawStr>
		gcvt(Fnclocal_dispfloat,3,display_buf);
 801a03a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a03c:	f7f6 f9b4 	bl	80103a8 <__aeabi_f2d>
 801a040:	4604      	mov	r4, r0
 801a042:	460d      	mov	r5, r1
 801a044:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a048:	4619      	mov	r1, r3
 801a04a:	2003      	movs	r0, #3
 801a04c:	ec45 4b10 	vmov	d0, r4, r5
 801a050:	f006 fa54 	bl	80204fc <gcvt>
		u8g2_SetFont(u8g2, u8g2_font_courB10_tn);
 801a054:	4978      	ldr	r1, [pc, #480]	; (801a238 <SM_DrawTask+0xab4>)
 801a056:	6878      	ldr	r0, [r7, #4]
 801a058:	f7fd fdce 	bl	8017bf8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 85,25,display_buf);
 801a05c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a060:	2219      	movs	r2, #25
 801a062:	2155      	movs	r1, #85	; 0x55
 801a064:	6878      	ldr	r0, [r7, #4]
 801a066:	f7fd fd0b 	bl	8017a80 <u8g2_DrawStr>

		Display_Buttons(u8g2,SM_enumDisplayState);
 801a06a:	4b6c      	ldr	r3, [pc, #432]	; (801a21c <SM_DrawTask+0xa98>)
 801a06c:	781b      	ldrb	r3, [r3, #0]
 801a06e:	4619      	mov	r1, r3
 801a070:	6878      	ldr	r0, [r7, #4]
 801a072:	f000 fbf1 	bl	801a858 <Display_Buttons>
	}

	if(SM_enumDisplayState == SM_enum_Display_Settings_Menu_Transfer){
 801a076:	4b69      	ldr	r3, [pc, #420]	; (801a21c <SM_DrawTask+0xa98>)
 801a078:	781b      	ldrb	r3, [r3, #0]
 801a07a:	2b05      	cmp	r3, #5
 801a07c:	d10f      	bne.n	801a09e <SM_DrawTask+0x91a>
		u8g2_SetFont(u8g2, u8g2_font_t0_11_tf);
 801a07e:	496f      	ldr	r1, [pc, #444]	; (801a23c <SM_DrawTask+0xab8>)
 801a080:	6878      	ldr	r0, [r7, #4]
 801a082:	f7fd fdb9 	bl	8017bf8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 10,21,"START?");
 801a086:	4b6e      	ldr	r3, [pc, #440]	; (801a240 <SM_DrawTask+0xabc>)
 801a088:	2215      	movs	r2, #21
 801a08a:	210a      	movs	r1, #10
 801a08c:	6878      	ldr	r0, [r7, #4]
 801a08e:	f7fd fcf7 	bl	8017a80 <u8g2_DrawStr>
		Display_Buttons(u8g2,SM_enumDisplayState);
 801a092:	4b62      	ldr	r3, [pc, #392]	; (801a21c <SM_DrawTask+0xa98>)
 801a094:	781b      	ldrb	r3, [r3, #0]
 801a096:	4619      	mov	r1, r3
 801a098:	6878      	ldr	r0, [r7, #4]
 801a09a:	f000 fbdd 	bl	801a858 <Display_Buttons>
	}

	if(SM_enumDisplayState == SM_enum_Display_Settings_Menu_Erase){
 801a09e:	4b5f      	ldr	r3, [pc, #380]	; (801a21c <SM_DrawTask+0xa98>)
 801a0a0:	781b      	ldrb	r3, [r3, #0]
 801a0a2:	2b06      	cmp	r3, #6
 801a0a4:	d10f      	bne.n	801a0c6 <SM_DrawTask+0x942>
		u8g2_SetFont(u8g2, u8g2_font_t0_11_tf);
 801a0a6:	4965      	ldr	r1, [pc, #404]	; (801a23c <SM_DrawTask+0xab8>)
 801a0a8:	6878      	ldr	r0, [r7, #4]
 801a0aa:	f7fd fda5 	bl	8017bf8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 10,21,"ERASE?");
 801a0ae:	4b65      	ldr	r3, [pc, #404]	; (801a244 <SM_DrawTask+0xac0>)
 801a0b0:	2215      	movs	r2, #21
 801a0b2:	210a      	movs	r1, #10
 801a0b4:	6878      	ldr	r0, [r7, #4]
 801a0b6:	f7fd fce3 	bl	8017a80 <u8g2_DrawStr>
		Display_Buttons(u8g2,SM_enumDisplayState);
 801a0ba:	4b58      	ldr	r3, [pc, #352]	; (801a21c <SM_DrawTask+0xa98>)
 801a0bc:	781b      	ldrb	r3, [r3, #0]
 801a0be:	4619      	mov	r1, r3
 801a0c0:	6878      	ldr	r0, [r7, #4]
 801a0c2:	f000 fbc9 	bl	801a858 <Display_Buttons>
	}

	if(SM_enumDisplayState == SM_enum_Display_Settings_Menu_Completed){
 801a0c6:	4b55      	ldr	r3, [pc, #340]	; (801a21c <SM_DrawTask+0xa98>)
 801a0c8:	781b      	ldrb	r3, [r3, #0]
 801a0ca:	2b07      	cmp	r3, #7
 801a0cc:	d172      	bne.n	801a1b4 <SM_DrawTask+0xa30>
		if(Appl_Display.SelectedSubIndex == 1){
 801a0ce:	4b55      	ldr	r3, [pc, #340]	; (801a224 <SM_DrawTask+0xaa0>)
 801a0d0:	789b      	ldrb	r3, [r3, #2]
 801a0d2:	2b01      	cmp	r3, #1
 801a0d4:	d132      	bne.n	801a13c <SM_DrawTask+0x9b8>
			u8g2_SetFont(u8g2, u8g2_font_5x7_tr);
 801a0d6:	4952      	ldr	r1, [pc, #328]	; (801a220 <SM_DrawTask+0xa9c>)
 801a0d8:	6878      	ldr	r0, [r7, #4]
 801a0da:	f7fd fd8d 	bl	8017bf8 <u8g2_SetFont>
			u8g2_DrawStr(u8g2, 1,10,"PROGRESS:");
 801a0de:	4b5a      	ldr	r3, [pc, #360]	; (801a248 <SM_DrawTask+0xac4>)
 801a0e0:	220a      	movs	r2, #10
 801a0e2:	2101      	movs	r1, #1
 801a0e4:	6878      	ldr	r0, [r7, #4]
 801a0e6:	f7fd fccb 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,30,"Transfer of");
 801a0ea:	4b58      	ldr	r3, [pc, #352]	; (801a24c <SM_DrawTask+0xac8>)
 801a0ec:	221e      	movs	r2, #30
 801a0ee:	2101      	movs	r1, #1
 801a0f0:	6878      	ldr	r0, [r7, #4]
 801a0f2:	f7fd fcc5 	bl	8017a80 <u8g2_DrawStr>
			Fnclocal_dispfloat = SM_ApplParam.ExtEepTotalRecordsTotransferred;
 801a0f6:	4b4e      	ldr	r3, [pc, #312]	; (801a230 <SM_DrawTask+0xaac>)
 801a0f8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801a0fc:	ee07 3a90 	vmov	s15, r3
 801a100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a104:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			gcvt(Fnclocal_dispfloat,3,display_buf);
 801a108:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a10a:	f7f6 f94d 	bl	80103a8 <__aeabi_f2d>
 801a10e:	4604      	mov	r4, r0
 801a110:	460d      	mov	r5, r1
 801a112:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a116:	4619      	mov	r1, r3
 801a118:	2003      	movs	r0, #3
 801a11a:	ec45 4b10 	vmov	d0, r4, r5
 801a11e:	f006 f9ed 	bl	80204fc <gcvt>
			u8g2_DrawStr(u8g2, 64,30,display_buf);
 801a122:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a126:	221e      	movs	r2, #30
 801a128:	2140      	movs	r1, #64	; 0x40
 801a12a:	6878      	ldr	r0, [r7, #4]
 801a12c:	f7fd fca8 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,50,"Records Pending..");
 801a130:	4b47      	ldr	r3, [pc, #284]	; (801a250 <SM_DrawTask+0xacc>)
 801a132:	2232      	movs	r2, #50	; 0x32
 801a134:	2101      	movs	r1, #1
 801a136:	6878      	ldr	r0, [r7, #4]
 801a138:	f7fd fca2 	bl	8017a80 <u8g2_DrawStr>

		}
		if(Appl_Display.SelectedSubIndex == 2){
 801a13c:	4b39      	ldr	r3, [pc, #228]	; (801a224 <SM_DrawTask+0xaa0>)
 801a13e:	789b      	ldrb	r3, [r3, #2]
 801a140:	2b02      	cmp	r3, #2
 801a142:	d131      	bne.n	801a1a8 <SM_DrawTask+0xa24>
			u8g2_SetFont(u8g2, u8g2_font_5x7_tr);
 801a144:	4936      	ldr	r1, [pc, #216]	; (801a220 <SM_DrawTask+0xa9c>)
 801a146:	6878      	ldr	r0, [r7, #4]
 801a148:	f7fd fd56 	bl	8017bf8 <u8g2_SetFont>
			u8g2_DrawStr(u8g2, 1,10,"ERASING");
 801a14c:	4b41      	ldr	r3, [pc, #260]	; (801a254 <SM_DrawTask+0xad0>)
 801a14e:	220a      	movs	r2, #10
 801a150:	2101      	movs	r1, #1
 801a152:	6878      	ldr	r0, [r7, #4]
 801a154:	f7fd fc94 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,30,"Delete of");
 801a158:	4b3f      	ldr	r3, [pc, #252]	; (801a258 <SM_DrawTask+0xad4>)
 801a15a:	221e      	movs	r2, #30
 801a15c:	2101      	movs	r1, #1
 801a15e:	6878      	ldr	r0, [r7, #4]
 801a160:	f7fd fc8e 	bl	8017a80 <u8g2_DrawStr>
			Fnclocal_dispfloat = SM_ApplParam.Transfer_PageloopCount;
 801a164:	4b32      	ldr	r3, [pc, #200]	; (801a230 <SM_DrawTask+0xaac>)
 801a166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a168:	ee07 3a90 	vmov	s15, r3
 801a16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a170:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			gcvt(Fnclocal_dispfloat,3,display_buf);
 801a174:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a176:	f7f6 f917 	bl	80103a8 <__aeabi_f2d>
 801a17a:	4604      	mov	r4, r0
 801a17c:	460d      	mov	r5, r1
 801a17e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a182:	4619      	mov	r1, r3
 801a184:	2003      	movs	r0, #3
 801a186:	ec45 4b10 	vmov	d0, r4, r5
 801a18a:	f006 f9b7 	bl	80204fc <gcvt>
			u8g2_DrawStr(u8g2, 54,30,display_buf);
 801a18e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a192:	221e      	movs	r2, #30
 801a194:	2136      	movs	r1, #54	; 0x36
 801a196:	6878      	ldr	r0, [r7, #4]
 801a198:	f7fd fc72 	bl	8017a80 <u8g2_DrawStr>
			u8g2_DrawStr(u8g2, 1,50,"% OVER..");
 801a19c:	4b2f      	ldr	r3, [pc, #188]	; (801a25c <SM_DrawTask+0xad8>)
 801a19e:	2232      	movs	r2, #50	; 0x32
 801a1a0:	2101      	movs	r1, #1
 801a1a2:	6878      	ldr	r0, [r7, #4]
 801a1a4:	f7fd fc6c 	bl	8017a80 <u8g2_DrawStr>

		}
		Display_Buttons(u8g2,SM_enumDisplayState);
 801a1a8:	4b1c      	ldr	r3, [pc, #112]	; (801a21c <SM_DrawTask+0xa98>)
 801a1aa:	781b      	ldrb	r3, [r3, #0]
 801a1ac:	4619      	mov	r1, r3
 801a1ae:	6878      	ldr	r0, [r7, #4]
 801a1b0:	f000 fb52 	bl	801a858 <Display_Buttons>
	}

	if(SM_enumDisplayState == SM_enum_Display_VishwaTest){
 801a1b4:	4b19      	ldr	r3, [pc, #100]	; (801a21c <SM_DrawTask+0xa98>)
 801a1b6:	781b      	ldrb	r3, [r3, #0]
 801a1b8:	2b0c      	cmp	r3, #12
 801a1ba:	d151      	bne.n	801a260 <SM_DrawTask+0xadc>
		u8g2_DrawHLine(u8g2,1,24,128);
 801a1bc:	2380      	movs	r3, #128	; 0x80
 801a1be:	2218      	movs	r2, #24
 801a1c0:	2101      	movs	r1, #1
 801a1c2:	6878      	ldr	r0, [r7, #4]
 801a1c4:	f7fd fea0 	bl	8017f08 <u8g2_DrawHLine>
		u8g2_DrawHLine(u8g2,1,36,128);
 801a1c8:	2380      	movs	r3, #128	; 0x80
 801a1ca:	2224      	movs	r2, #36	; 0x24
 801a1cc:	2101      	movs	r1, #1
 801a1ce:	6878      	ldr	r0, [r7, #4]
 801a1d0:	f7fd fe9a 	bl	8017f08 <u8g2_DrawHLine>
		u8g2_DrawVLine(u8g2,64,1,24);
 801a1d4:	2318      	movs	r3, #24
 801a1d6:	2201      	movs	r2, #1
 801a1d8:	2140      	movs	r1, #64	; 0x40
 801a1da:	6878      	ldr	r0, [r7, #4]
 801a1dc:	f7fd fead 	bl	8017f3a <u8g2_DrawVLine>
		Display_Voltage(u8g2);
 801a1e0:	6878      	ldr	r0, [r7, #4]
 801a1e2:	f000 fc8b 	bl	801aafc <Display_Voltage>
		Display_Current(u8g2);
 801a1e6:	6878      	ldr	r0, [r7, #4]
 801a1e8:	f000 fd12 	bl	801ac10 <Display_Current>
		Display_RunningTime(u8g2);
 801a1ec:	6878      	ldr	r0, [r7, #4]
 801a1ee:	f000 fd71 	bl	801acd4 <Display_RunningTime>
		Display_ErrorMessage(u8g2);
 801a1f2:	6878      	ldr	r0, [r7, #4]
 801a1f4:	f000 fac8 	bl	801a788 <Display_ErrorMessage>
		Display_Buttons(u8g2,SM_enumDisplayState);
 801a1f8:	4b08      	ldr	r3, [pc, #32]	; (801a21c <SM_DrawTask+0xa98>)
 801a1fa:	781b      	ldrb	r3, [r3, #0]
 801a1fc:	4619      	mov	r1, r3
 801a1fe:	6878      	ldr	r0, [r7, #4]
 801a200:	f000 fb2a 	bl	801a858 <Display_Buttons>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
		Fnclocal_dispfloat = (float)Appl_Display.PowerOffCounter;
		gcvt(Fnclocal_dispfloat,3,display_buf);
		u8g2_DrawStr(u8g2, 90,55,display_buf);
	}
}
 801a204:	e29c      	b.n	801a740 <SM_DrawTask+0xfbc>
 801a206:	bf00      	nop
 801a208:	08023084 	.word	0x08023084
 801a20c:	08023094 	.word	0x08023094
 801a210:	2000005c 	.word	0x2000005c
 801a214:	40590000 	.word	0x40590000
 801a218:	40af4000 	.word	0x40af4000
 801a21c:	2000486e 	.word	0x2000486e
 801a220:	08023af0 	.word	0x08023af0
 801a224:	20004870 	.word	0x20004870
 801a228:	080230a0 	.word	0x080230a0
 801a22c:	080230d0 	.word	0x080230d0
 801a230:	20004974 	.word	0x20004974
 801a234:	080230dc 	.word	0x080230dc
 801a238:	08029bb8 	.word	0x08029bb8
 801a23c:	080254ac 	.word	0x080254ac
 801a240:	080230ec 	.word	0x080230ec
 801a244:	080230f4 	.word	0x080230f4
 801a248:	080230fc 	.word	0x080230fc
 801a24c:	08023108 	.word	0x08023108
 801a250:	08023114 	.word	0x08023114
 801a254:	08023128 	.word	0x08023128
 801a258:	08023130 	.word	0x08023130
 801a25c:	0802313c 	.word	0x0802313c
	else if(SM_enumDisplayState == SM_enum_Display_Info){
 801a260:	4bb8      	ldr	r3, [pc, #736]	; (801a544 <SM_DrawTask+0xdc0>)
 801a262:	781b      	ldrb	r3, [r3, #0]
 801a264:	2b0f      	cmp	r3, #15
 801a266:	d176      	bne.n	801a356 <SM_DrawTask+0xbd2>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tr);
 801a268:	49b7      	ldr	r1, [pc, #732]	; (801a548 <SM_DrawTask+0xdc4>)
 801a26a:	6878      	ldr	r0, [r7, #4]
 801a26c:	f7fd fcc4 	bl	8017bf8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 1,20,"TOTAL USGAE HOUR : ");
 801a270:	4bb6      	ldr	r3, [pc, #728]	; (801a54c <SM_DrawTask+0xdc8>)
 801a272:	2214      	movs	r2, #20
 801a274:	2101      	movs	r1, #1
 801a276:	6878      	ldr	r0, [r7, #4]
 801a278:	f7fd fc02 	bl	8017a80 <u8g2_DrawStr>
		Fnclocal_u16disp = (Appl_EEPParam.stm32.EEP_Usg_HourH <<8 )|Appl_EEPParam.stm32.EEP_Usg_HourL;
 801a27c:	4bb4      	ldr	r3, [pc, #720]	; (801a550 <SM_DrawTask+0xdcc>)
 801a27e:	78db      	ldrb	r3, [r3, #3]
 801a280:	021b      	lsls	r3, r3, #8
 801a282:	b21a      	sxth	r2, r3
 801a284:	4bb2      	ldr	r3, [pc, #712]	; (801a550 <SM_DrawTask+0xdcc>)
 801a286:	789b      	ldrb	r3, [r3, #2]
 801a288:	b21b      	sxth	r3, r3
 801a28a:	4313      	orrs	r3, r2
 801a28c:	b21b      	sxth	r3, r3
 801a28e:	b29a      	uxth	r2, r3
 801a290:	4bb0      	ldr	r3, [pc, #704]	; (801a554 <SM_DrawTask+0xdd0>)
 801a292:	801a      	strh	r2, [r3, #0]
		Fnclocal_dispfloat = (float)Fnclocal_u16disp;
 801a294:	4baf      	ldr	r3, [pc, #700]	; (801a554 <SM_DrawTask+0xdd0>)
 801a296:	881b      	ldrh	r3, [r3, #0]
 801a298:	ee07 3a90 	vmov	s15, r3
 801a29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a2a0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		gcvt(Fnclocal_dispfloat,4,display_buf);
 801a2a4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a2a6:	f7f6 f87f 	bl	80103a8 <__aeabi_f2d>
 801a2aa:	4604      	mov	r4, r0
 801a2ac:	460d      	mov	r5, r1
 801a2ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a2b2:	4619      	mov	r1, r3
 801a2b4:	2004      	movs	r0, #4
 801a2b6:	ec45 4b10 	vmov	d0, r4, r5
 801a2ba:	f006 f91f 	bl	80204fc <gcvt>
		u8g2_DrawStr(u8g2, 0,40,display_buf);
 801a2be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a2c2:	2228      	movs	r2, #40	; 0x28
 801a2c4:	2100      	movs	r1, #0
 801a2c6:	6878      	ldr	r0, [r7, #4]
 801a2c8:	f7fd fbda 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 40,40,":");
 801a2cc:	4ba2      	ldr	r3, [pc, #648]	; (801a558 <SM_DrawTask+0xdd4>)
 801a2ce:	2228      	movs	r2, #40	; 0x28
 801a2d0:	2128      	movs	r1, #40	; 0x28
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	f7fd fbd4 	bl	8017a80 <u8g2_DrawStr>
		Fnclocal_dispfloat = Appl_EEPParam.stm32.EEP_Usg_Min;
 801a2d8:	4b9d      	ldr	r3, [pc, #628]	; (801a550 <SM_DrawTask+0xdcc>)
 801a2da:	785b      	ldrb	r3, [r3, #1]
 801a2dc:	ee07 3a90 	vmov	s15, r3
 801a2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a2e4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		gcvt(Fnclocal_dispfloat,3,display_buf);
 801a2e8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a2ea:	f7f6 f85d 	bl	80103a8 <__aeabi_f2d>
 801a2ee:	4604      	mov	r4, r0
 801a2f0:	460d      	mov	r5, r1
 801a2f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a2f6:	4619      	mov	r1, r3
 801a2f8:	2003      	movs	r0, #3
 801a2fa:	ec45 4b10 	vmov	d0, r4, r5
 801a2fe:	f006 f8fd 	bl	80204fc <gcvt>
		u8g2_DrawStr(u8g2, 50,40,display_buf);
 801a302:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a306:	2228      	movs	r2, #40	; 0x28
 801a308:	2132      	movs	r1, #50	; 0x32
 801a30a:	6878      	ldr	r0, [r7, #4]
 801a30c:	f7fd fbb8 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 70,40,":");
 801a310:	4b91      	ldr	r3, [pc, #580]	; (801a558 <SM_DrawTask+0xdd4>)
 801a312:	2228      	movs	r2, #40	; 0x28
 801a314:	2146      	movs	r1, #70	; 0x46
 801a316:	6878      	ldr	r0, [r7, #4]
 801a318:	f7fd fbb2 	bl	8017a80 <u8g2_DrawStr>
		Fnclocal_dispfloat = Appl_EEPParam.stm32.EEP_Usg_Sec;
 801a31c:	4b8c      	ldr	r3, [pc, #560]	; (801a550 <SM_DrawTask+0xdcc>)
 801a31e:	781b      	ldrb	r3, [r3, #0]
 801a320:	ee07 3a90 	vmov	s15, r3
 801a324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a328:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		gcvt(Fnclocal_dispfloat,3,display_buf);
 801a32c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a32e:	f7f6 f83b 	bl	80103a8 <__aeabi_f2d>
 801a332:	4604      	mov	r4, r0
 801a334:	460d      	mov	r5, r1
 801a336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a33a:	4619      	mov	r1, r3
 801a33c:	2003      	movs	r0, #3
 801a33e:	ec45 4b10 	vmov	d0, r4, r5
 801a342:	f006 f8db 	bl	80204fc <gcvt>
		u8g2_DrawStr(u8g2, 90,40,display_buf);
 801a346:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a34a:	2228      	movs	r2, #40	; 0x28
 801a34c:	215a      	movs	r1, #90	; 0x5a
 801a34e:	6878      	ldr	r0, [r7, #4]
 801a350:	f7fd fb96 	bl	8017a80 <u8g2_DrawStr>
}
 801a354:	e1f4      	b.n	801a740 <SM_DrawTask+0xfbc>
	else if(SM_enumDisplayState == SM_enum_Display_Pause){
 801a356:	4b7b      	ldr	r3, [pc, #492]	; (801a544 <SM_DrawTask+0xdc0>)
 801a358:	781b      	ldrb	r3, [r3, #0]
 801a35a:	2b10      	cmp	r3, #16
 801a35c:	f040 817b 	bne.w	801a656 <SM_DrawTask+0xed2>
			u8g2_SetFont(u8g2, u8g2_font_sirclivethebold_tr);
 801a360:	497e      	ldr	r1, [pc, #504]	; (801a55c <SM_DrawTask+0xdd8>)
 801a362:	6878      	ldr	r0, [r7, #4]
 801a364:	f7fd fc48 	bl	8017bf8 <u8g2_SetFont>
			u8g2_DrawStr(u8g2, 0,10," SYSTEM PAUSE");
 801a368:	4b7d      	ldr	r3, [pc, #500]	; (801a560 <SM_DrawTask+0xddc>)
 801a36a:	220a      	movs	r2, #10
 801a36c:	2100      	movs	r1, #0
 801a36e:	6878      	ldr	r0, [r7, #4]
 801a370:	f7fd fb86 	bl	8017a80 <u8g2_DrawStr>
			u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 801a374:	497b      	ldr	r1, [pc, #492]	; (801a564 <SM_DrawTask+0xde0>)
 801a376:	6878      	ldr	r0, [r7, #4]
 801a378:	f7fd fc3e 	bl	8017bf8 <u8g2_SetFont>
			u8g2_DrawStr(u8g2, 0,20,"FOLLOWING REASON RECORDED:");
 801a37c:	4b7a      	ldr	r3, [pc, #488]	; (801a568 <SM_DrawTask+0xde4>)
 801a37e:	2214      	movs	r2, #20
 801a380:	2100      	movs	r1, #0
 801a382:	6878      	ldr	r0, [r7, #4]
 801a384:	f7fd fb7c 	bl	8017a80 <u8g2_DrawStr>
			if(SM_ApplParam.Pausereason == PauseReasonEnum_TimerComplete){
 801a388:	4b78      	ldr	r3, [pc, #480]	; (801a56c <SM_DrawTask+0xde8>)
 801a38a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801a38e:	2b03      	cmp	r3, #3
 801a390:	d106      	bne.n	801a3a0 <SM_DrawTask+0xc1c>
				u8g2_DrawStr(u8g2, 0,30,"TIME OVER");
 801a392:	4b77      	ldr	r3, [pc, #476]	; (801a570 <SM_DrawTask+0xdec>)
 801a394:	221e      	movs	r2, #30
 801a396:	2100      	movs	r1, #0
 801a398:	6878      	ldr	r0, [r7, #4]
 801a39a:	f7fd fb71 	bl	8017a80 <u8g2_DrawStr>
 801a39e:	e153      	b.n	801a648 <SM_DrawTask+0xec4>
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_UserPaused){
 801a3a0:	4b72      	ldr	r3, [pc, #456]	; (801a56c <SM_DrawTask+0xde8>)
 801a3a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801a3a6:	2b02      	cmp	r3, #2
 801a3a8:	d106      	bne.n	801a3b8 <SM_DrawTask+0xc34>
				u8g2_DrawStr(u8g2, 0,50,"USERPAUSE");
 801a3aa:	4b72      	ldr	r3, [pc, #456]	; (801a574 <SM_DrawTask+0xdf0>)
 801a3ac:	2232      	movs	r2, #50	; 0x32
 801a3ae:	2100      	movs	r1, #0
 801a3b0:	6878      	ldr	r0, [r7, #4]
 801a3b2:	f7fd fb65 	bl	8017a80 <u8g2_DrawStr>
 801a3b6:	e147      	b.n	801a648 <SM_DrawTask+0xec4>
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_PowerFailZ1){
 801a3b8:	4b6c      	ldr	r3, [pc, #432]	; (801a56c <SM_DrawTask+0xde8>)
 801a3ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801a3be:	2b05      	cmp	r3, #5
 801a3c0:	d11d      	bne.n	801a3fe <SM_DrawTask+0xc7a>
				if(Appl_diagActiveFault.PowerFail_Z1 == 1) {u8g2_DrawStr(u8g2, 0,30,"L1(R)POWER ZERO");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : ACTIVE");}
 801a3c2:	4b6d      	ldr	r3, [pc, #436]	; (801a578 <SM_DrawTask+0xdf4>)
 801a3c4:	781b      	ldrb	r3, [r3, #0]
 801a3c6:	2b01      	cmp	r3, #1
 801a3c8:	d10c      	bne.n	801a3e4 <SM_DrawTask+0xc60>
 801a3ca:	4b6c      	ldr	r3, [pc, #432]	; (801a57c <SM_DrawTask+0xdf8>)
 801a3cc:	221e      	movs	r2, #30
 801a3ce:	2100      	movs	r1, #0
 801a3d0:	6878      	ldr	r0, [r7, #4]
 801a3d2:	f7fd fb55 	bl	8017a80 <u8g2_DrawStr>
 801a3d6:	4b6a      	ldr	r3, [pc, #424]	; (801a580 <SM_DrawTask+0xdfc>)
 801a3d8:	2232      	movs	r2, #50	; 0x32
 801a3da:	2100      	movs	r1, #0
 801a3dc:	6878      	ldr	r0, [r7, #4]
 801a3de:	f7fd fb4f 	bl	8017a80 <u8g2_DrawStr>
 801a3e2:	e131      	b.n	801a648 <SM_DrawTask+0xec4>
				else {u8g2_DrawStr(u8g2, 0,30,"L1(R)POWER ZERO");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : HEALED");}
 801a3e4:	4b65      	ldr	r3, [pc, #404]	; (801a57c <SM_DrawTask+0xdf8>)
 801a3e6:	221e      	movs	r2, #30
 801a3e8:	2100      	movs	r1, #0
 801a3ea:	6878      	ldr	r0, [r7, #4]
 801a3ec:	f7fd fb48 	bl	8017a80 <u8g2_DrawStr>
 801a3f0:	4b64      	ldr	r3, [pc, #400]	; (801a584 <SM_DrawTask+0xe00>)
 801a3f2:	2232      	movs	r2, #50	; 0x32
 801a3f4:	2100      	movs	r1, #0
 801a3f6:	6878      	ldr	r0, [r7, #4]
 801a3f8:	f7fd fb42 	bl	8017a80 <u8g2_DrawStr>
 801a3fc:	e124      	b.n	801a648 <SM_DrawTask+0xec4>
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_PowerFailZ2){
 801a3fe:	4b5b      	ldr	r3, [pc, #364]	; (801a56c <SM_DrawTask+0xde8>)
 801a400:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801a404:	2b06      	cmp	r3, #6
 801a406:	d11d      	bne.n	801a444 <SM_DrawTask+0xcc0>
				if(Appl_diagActiveFault.PowerFail_Z2 == 1) {u8g2_DrawStr(u8g2, 0,30,"L2(Y)POWER ZERO");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : ACTIVE");}
 801a408:	4b5b      	ldr	r3, [pc, #364]	; (801a578 <SM_DrawTask+0xdf4>)
 801a40a:	785b      	ldrb	r3, [r3, #1]
 801a40c:	2b01      	cmp	r3, #1
 801a40e:	d10c      	bne.n	801a42a <SM_DrawTask+0xca6>
 801a410:	4b5d      	ldr	r3, [pc, #372]	; (801a588 <SM_DrawTask+0xe04>)
 801a412:	221e      	movs	r2, #30
 801a414:	2100      	movs	r1, #0
 801a416:	6878      	ldr	r0, [r7, #4]
 801a418:	f7fd fb32 	bl	8017a80 <u8g2_DrawStr>
 801a41c:	4b58      	ldr	r3, [pc, #352]	; (801a580 <SM_DrawTask+0xdfc>)
 801a41e:	2232      	movs	r2, #50	; 0x32
 801a420:	2100      	movs	r1, #0
 801a422:	6878      	ldr	r0, [r7, #4]
 801a424:	f7fd fb2c 	bl	8017a80 <u8g2_DrawStr>
 801a428:	e10e      	b.n	801a648 <SM_DrawTask+0xec4>
				else {u8g2_DrawStr(u8g2, 0,30,"L2(Y)POWER ZERO");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : HEALED");}
 801a42a:	4b57      	ldr	r3, [pc, #348]	; (801a588 <SM_DrawTask+0xe04>)
 801a42c:	221e      	movs	r2, #30
 801a42e:	2100      	movs	r1, #0
 801a430:	6878      	ldr	r0, [r7, #4]
 801a432:	f7fd fb25 	bl	8017a80 <u8g2_DrawStr>
 801a436:	4b53      	ldr	r3, [pc, #332]	; (801a584 <SM_DrawTask+0xe00>)
 801a438:	2232      	movs	r2, #50	; 0x32
 801a43a:	2100      	movs	r1, #0
 801a43c:	6878      	ldr	r0, [r7, #4]
 801a43e:	f7fd fb1f 	bl	8017a80 <u8g2_DrawStr>
 801a442:	e101      	b.n	801a648 <SM_DrawTask+0xec4>
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_PowerFailZ3){
 801a444:	4b49      	ldr	r3, [pc, #292]	; (801a56c <SM_DrawTask+0xde8>)
 801a446:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801a44a:	2b07      	cmp	r3, #7
 801a44c:	d11d      	bne.n	801a48a <SM_DrawTask+0xd06>
				if(Appl_diagActiveFault.PowerFail_Z3 == 1) {u8g2_DrawStr(u8g2, 0,30,"L3(B)POWER ZERO");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : ACTIVE");}
 801a44e:	4b4a      	ldr	r3, [pc, #296]	; (801a578 <SM_DrawTask+0xdf4>)
 801a450:	789b      	ldrb	r3, [r3, #2]
 801a452:	2b01      	cmp	r3, #1
 801a454:	d10c      	bne.n	801a470 <SM_DrawTask+0xcec>
 801a456:	4b4d      	ldr	r3, [pc, #308]	; (801a58c <SM_DrawTask+0xe08>)
 801a458:	221e      	movs	r2, #30
 801a45a:	2100      	movs	r1, #0
 801a45c:	6878      	ldr	r0, [r7, #4]
 801a45e:	f7fd fb0f 	bl	8017a80 <u8g2_DrawStr>
 801a462:	4b47      	ldr	r3, [pc, #284]	; (801a580 <SM_DrawTask+0xdfc>)
 801a464:	2232      	movs	r2, #50	; 0x32
 801a466:	2100      	movs	r1, #0
 801a468:	6878      	ldr	r0, [r7, #4]
 801a46a:	f7fd fb09 	bl	8017a80 <u8g2_DrawStr>
 801a46e:	e0eb      	b.n	801a648 <SM_DrawTask+0xec4>
				else {u8g2_DrawStr(u8g2, 0,30,"L3(B)POWER ZERO");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : HEALED");}
 801a470:	4b46      	ldr	r3, [pc, #280]	; (801a58c <SM_DrawTask+0xe08>)
 801a472:	221e      	movs	r2, #30
 801a474:	2100      	movs	r1, #0
 801a476:	6878      	ldr	r0, [r7, #4]
 801a478:	f7fd fb02 	bl	8017a80 <u8g2_DrawStr>
 801a47c:	4b41      	ldr	r3, [pc, #260]	; (801a584 <SM_DrawTask+0xe00>)
 801a47e:	2232      	movs	r2, #50	; 0x32
 801a480:	2100      	movs	r1, #0
 801a482:	6878      	ldr	r0, [r7, #4]
 801a484:	f7fd fafc 	bl	8017a80 <u8g2_DrawStr>
 801a488:	e0de      	b.n	801a648 <SM_DrawTask+0xec4>
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_BatteryReversal){
 801a48a:	4b38      	ldr	r3, [pc, #224]	; (801a56c <SM_DrawTask+0xde8>)
 801a48c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801a490:	2b08      	cmp	r3, #8
 801a492:	d11d      	bne.n	801a4d0 <SM_DrawTask+0xd4c>
				if(Appl_diagActiveFault.BatteryReversal == 1) {u8g2_DrawStr(u8g2, 0,30,"CHECK O/P CONNECTION CONNECTION");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : ACTIVE");}
 801a494:	4b38      	ldr	r3, [pc, #224]	; (801a578 <SM_DrawTask+0xdf4>)
 801a496:	7a1b      	ldrb	r3, [r3, #8]
 801a498:	2b01      	cmp	r3, #1
 801a49a:	d10c      	bne.n	801a4b6 <SM_DrawTask+0xd32>
 801a49c:	4b3c      	ldr	r3, [pc, #240]	; (801a590 <SM_DrawTask+0xe0c>)
 801a49e:	221e      	movs	r2, #30
 801a4a0:	2100      	movs	r1, #0
 801a4a2:	6878      	ldr	r0, [r7, #4]
 801a4a4:	f7fd faec 	bl	8017a80 <u8g2_DrawStr>
 801a4a8:	4b35      	ldr	r3, [pc, #212]	; (801a580 <SM_DrawTask+0xdfc>)
 801a4aa:	2232      	movs	r2, #50	; 0x32
 801a4ac:	2100      	movs	r1, #0
 801a4ae:	6878      	ldr	r0, [r7, #4]
 801a4b0:	f7fd fae6 	bl	8017a80 <u8g2_DrawStr>
 801a4b4:	e0c8      	b.n	801a648 <SM_DrawTask+0xec4>
				else {u8g2_DrawStr(u8g2, 0,30,"CHECK O/P CONNECTION");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : HEALED");}
 801a4b6:	4b37      	ldr	r3, [pc, #220]	; (801a594 <SM_DrawTask+0xe10>)
 801a4b8:	221e      	movs	r2, #30
 801a4ba:	2100      	movs	r1, #0
 801a4bc:	6878      	ldr	r0, [r7, #4]
 801a4be:	f7fd fadf 	bl	8017a80 <u8g2_DrawStr>
 801a4c2:	4b30      	ldr	r3, [pc, #192]	; (801a584 <SM_DrawTask+0xe00>)
 801a4c4:	2232      	movs	r2, #50	; 0x32
 801a4c6:	2100      	movs	r1, #0
 801a4c8:	6878      	ldr	r0, [r7, #4]
 801a4ca:	f7fd fad9 	bl	8017a80 <u8g2_DrawStr>
 801a4ce:	e0bb      	b.n	801a648 <SM_DrawTask+0xec4>
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_OverVoltage){
 801a4d0:	4b26      	ldr	r3, [pc, #152]	; (801a56c <SM_DrawTask+0xde8>)
 801a4d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801a4d6:	2b0a      	cmp	r3, #10
 801a4d8:	d11d      	bne.n	801a516 <SM_DrawTask+0xd92>
				if(Appl_diagActiveFault.OverVoltage == 1) {u8g2_DrawStr(u8g2, 0,30,"AVG VOLTAGE ABOVE 200V");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : ACTIVE");}
 801a4da:	4b27      	ldr	r3, [pc, #156]	; (801a578 <SM_DrawTask+0xdf4>)
 801a4dc:	78db      	ldrb	r3, [r3, #3]
 801a4de:	2b01      	cmp	r3, #1
 801a4e0:	d10c      	bne.n	801a4fc <SM_DrawTask+0xd78>
 801a4e2:	4b2d      	ldr	r3, [pc, #180]	; (801a598 <SM_DrawTask+0xe14>)
 801a4e4:	221e      	movs	r2, #30
 801a4e6:	2100      	movs	r1, #0
 801a4e8:	6878      	ldr	r0, [r7, #4]
 801a4ea:	f7fd fac9 	bl	8017a80 <u8g2_DrawStr>
 801a4ee:	4b24      	ldr	r3, [pc, #144]	; (801a580 <SM_DrawTask+0xdfc>)
 801a4f0:	2232      	movs	r2, #50	; 0x32
 801a4f2:	2100      	movs	r1, #0
 801a4f4:	6878      	ldr	r0, [r7, #4]
 801a4f6:	f7fd fac3 	bl	8017a80 <u8g2_DrawStr>
 801a4fa:	e0a5      	b.n	801a648 <SM_DrawTask+0xec4>
				else {u8g2_DrawStr(u8g2, 0,30,"OVER VOLTAGE");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : HEALED");}
 801a4fc:	4b27      	ldr	r3, [pc, #156]	; (801a59c <SM_DrawTask+0xe18>)
 801a4fe:	221e      	movs	r2, #30
 801a500:	2100      	movs	r1, #0
 801a502:	6878      	ldr	r0, [r7, #4]
 801a504:	f7fd fabc 	bl	8017a80 <u8g2_DrawStr>
 801a508:	4b1e      	ldr	r3, [pc, #120]	; (801a584 <SM_DrawTask+0xe00>)
 801a50a:	2232      	movs	r2, #50	; 0x32
 801a50c:	2100      	movs	r1, #0
 801a50e:	6878      	ldr	r0, [r7, #4]
 801a510:	f7fd fab6 	bl	8017a80 <u8g2_DrawStr>
 801a514:	e098      	b.n	801a648 <SM_DrawTask+0xec4>
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_EEPLogMemoryFull){
 801a516:	4b15      	ldr	r3, [pc, #84]	; (801a56c <SM_DrawTask+0xde8>)
 801a518:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801a51c:	2b09      	cmp	r3, #9
 801a51e:	d14e      	bne.n	801a5be <SM_DrawTask+0xe3a>
				if(Appl_diagActiveFault.EEPLogMemoryFull == 1) {u8g2_DrawStr(u8g2, 0,30,"LOG MEMORY FULL");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : ACTIVE");}
 801a520:	4b15      	ldr	r3, [pc, #84]	; (801a578 <SM_DrawTask+0xdf4>)
 801a522:	7a5b      	ldrb	r3, [r3, #9]
 801a524:	2b01      	cmp	r3, #1
 801a526:	d13d      	bne.n	801a5a4 <SM_DrawTask+0xe20>
 801a528:	4b1d      	ldr	r3, [pc, #116]	; (801a5a0 <SM_DrawTask+0xe1c>)
 801a52a:	221e      	movs	r2, #30
 801a52c:	2100      	movs	r1, #0
 801a52e:	6878      	ldr	r0, [r7, #4]
 801a530:	f7fd faa6 	bl	8017a80 <u8g2_DrawStr>
 801a534:	4b12      	ldr	r3, [pc, #72]	; (801a580 <SM_DrawTask+0xdfc>)
 801a536:	2232      	movs	r2, #50	; 0x32
 801a538:	2100      	movs	r1, #0
 801a53a:	6878      	ldr	r0, [r7, #4]
 801a53c:	f7fd faa0 	bl	8017a80 <u8g2_DrawStr>
 801a540:	e082      	b.n	801a648 <SM_DrawTask+0xec4>
 801a542:	bf00      	nop
 801a544:	2000486e 	.word	0x2000486e
 801a548:	08023af0 	.word	0x08023af0
 801a54c:	08023148 	.word	0x08023148
 801a550:	2000005c 	.word	0x2000005c
 801a554:	20000540 	.word	0x20000540
 801a558:	0802315c 	.word	0x0802315c
 801a55c:	08026cd0 	.word	0x08026cd0
 801a560:	08023160 	.word	0x08023160
 801a564:	08023460 	.word	0x08023460
 801a568:	08023170 	.word	0x08023170
 801a56c:	20004974 	.word	0x20004974
 801a570:	0802318c 	.word	0x0802318c
 801a574:	08023198 	.word	0x08023198
 801a578:	200047b0 	.word	0x200047b0
 801a57c:	080231a4 	.word	0x080231a4
 801a580:	080231b4 	.word	0x080231b4
 801a584:	080231cc 	.word	0x080231cc
 801a588:	080231e4 	.word	0x080231e4
 801a58c:	080231f4 	.word	0x080231f4
 801a590:	08023204 	.word	0x08023204
 801a594:	08023224 	.word	0x08023224
 801a598:	0802323c 	.word	0x0802323c
 801a59c:	08023254 	.word	0x08023254
 801a5a0:	08023264 	.word	0x08023264
				else {u8g2_DrawStr(u8g2, 0,30,"LOG MEMORY FULL");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : HEALED");}
 801a5a4:	4b68      	ldr	r3, [pc, #416]	; (801a748 <SM_DrawTask+0xfc4>)
 801a5a6:	221e      	movs	r2, #30
 801a5a8:	2100      	movs	r1, #0
 801a5aa:	6878      	ldr	r0, [r7, #4]
 801a5ac:	f7fd fa68 	bl	8017a80 <u8g2_DrawStr>
 801a5b0:	4b66      	ldr	r3, [pc, #408]	; (801a74c <SM_DrawTask+0xfc8>)
 801a5b2:	2232      	movs	r2, #50	; 0x32
 801a5b4:	2100      	movs	r1, #0
 801a5b6:	6878      	ldr	r0, [r7, #4]
 801a5b8:	f7fd fa62 	bl	8017a80 <u8g2_DrawStr>
 801a5bc:	e044      	b.n	801a648 <SM_DrawTask+0xec4>
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_UnderVoltage){
 801a5be:	4b64      	ldr	r3, [pc, #400]	; (801a750 <SM_DrawTask+0xfcc>)
 801a5c0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801a5c4:	2b0b      	cmp	r3, #11
 801a5c6:	d11d      	bne.n	801a604 <SM_DrawTask+0xe80>
				if(Appl_diagActiveFault.UnderVoltage == 1) {u8g2_DrawStr(u8g2, 0,30,"UNDER VOLTAGE or OPEN");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : ACTIVE");}
 801a5c8:	4b62      	ldr	r3, [pc, #392]	; (801a754 <SM_DrawTask+0xfd0>)
 801a5ca:	795b      	ldrb	r3, [r3, #5]
 801a5cc:	2b01      	cmp	r3, #1
 801a5ce:	d10c      	bne.n	801a5ea <SM_DrawTask+0xe66>
 801a5d0:	4b61      	ldr	r3, [pc, #388]	; (801a758 <SM_DrawTask+0xfd4>)
 801a5d2:	221e      	movs	r2, #30
 801a5d4:	2100      	movs	r1, #0
 801a5d6:	6878      	ldr	r0, [r7, #4]
 801a5d8:	f7fd fa52 	bl	8017a80 <u8g2_DrawStr>
 801a5dc:	4b5f      	ldr	r3, [pc, #380]	; (801a75c <SM_DrawTask+0xfd8>)
 801a5de:	2232      	movs	r2, #50	; 0x32
 801a5e0:	2100      	movs	r1, #0
 801a5e2:	6878      	ldr	r0, [r7, #4]
 801a5e4:	f7fd fa4c 	bl	8017a80 <u8g2_DrawStr>
 801a5e8:	e02e      	b.n	801a648 <SM_DrawTask+0xec4>
				else {u8g2_DrawStr(u8g2, 0,30,"UNDER VOLTAGE or OPEN");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : HEALED");}
 801a5ea:	4b5b      	ldr	r3, [pc, #364]	; (801a758 <SM_DrawTask+0xfd4>)
 801a5ec:	221e      	movs	r2, #30
 801a5ee:	2100      	movs	r1, #0
 801a5f0:	6878      	ldr	r0, [r7, #4]
 801a5f2:	f7fd fa45 	bl	8017a80 <u8g2_DrawStr>
 801a5f6:	4b55      	ldr	r3, [pc, #340]	; (801a74c <SM_DrawTask+0xfc8>)
 801a5f8:	2232      	movs	r2, #50	; 0x32
 801a5fa:	2100      	movs	r1, #0
 801a5fc:	6878      	ldr	r0, [r7, #4]
 801a5fe:	f7fd fa3f 	bl	8017a80 <u8g2_DrawStr>
 801a602:	e021      	b.n	801a648 <SM_DrawTask+0xec4>
			else if(SM_ApplParam.Pausereason == PauseReasonEnum_OverCurrent){
 801a604:	4b52      	ldr	r3, [pc, #328]	; (801a750 <SM_DrawTask+0xfcc>)
 801a606:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801a60a:	2b0c      	cmp	r3, #12
 801a60c:	d11c      	bne.n	801a648 <SM_DrawTask+0xec4>
				if(Appl_diagActiveFault.UnderVoltage == 1) {u8g2_DrawStr(u8g2, 0,30,"UNDER VOLTAGE or OPEN");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : ACTIVE");}
 801a60e:	4b51      	ldr	r3, [pc, #324]	; (801a754 <SM_DrawTask+0xfd0>)
 801a610:	795b      	ldrb	r3, [r3, #5]
 801a612:	2b01      	cmp	r3, #1
 801a614:	d10c      	bne.n	801a630 <SM_DrawTask+0xeac>
 801a616:	4b50      	ldr	r3, [pc, #320]	; (801a758 <SM_DrawTask+0xfd4>)
 801a618:	221e      	movs	r2, #30
 801a61a:	2100      	movs	r1, #0
 801a61c:	6878      	ldr	r0, [r7, #4]
 801a61e:	f7fd fa2f 	bl	8017a80 <u8g2_DrawStr>
 801a622:	4b4e      	ldr	r3, [pc, #312]	; (801a75c <SM_DrawTask+0xfd8>)
 801a624:	2232      	movs	r2, #50	; 0x32
 801a626:	2100      	movs	r1, #0
 801a628:	6878      	ldr	r0, [r7, #4]
 801a62a:	f7fd fa29 	bl	8017a80 <u8g2_DrawStr>
 801a62e:	e00b      	b.n	801a648 <SM_DrawTask+0xec4>
				else {u8g2_DrawStr(u8g2, 0,30,"OVER CURRENT");u8g2_DrawStr(u8g2, 0,50,"FAULT STATE : HEALED");}
 801a630:	4b4b      	ldr	r3, [pc, #300]	; (801a760 <SM_DrawTask+0xfdc>)
 801a632:	221e      	movs	r2, #30
 801a634:	2100      	movs	r1, #0
 801a636:	6878      	ldr	r0, [r7, #4]
 801a638:	f7fd fa22 	bl	8017a80 <u8g2_DrawStr>
 801a63c:	4b43      	ldr	r3, [pc, #268]	; (801a74c <SM_DrawTask+0xfc8>)
 801a63e:	2232      	movs	r2, #50	; 0x32
 801a640:	2100      	movs	r1, #0
 801a642:	6878      	ldr	r0, [r7, #4]
 801a644:	f7fd fa1c 	bl	8017a80 <u8g2_DrawStr>
			Display_Buttons(u8g2,SM_enumDisplayState);
 801a648:	4b46      	ldr	r3, [pc, #280]	; (801a764 <SM_DrawTask+0xfe0>)
 801a64a:	781b      	ldrb	r3, [r3, #0]
 801a64c:	4619      	mov	r1, r3
 801a64e:	6878      	ldr	r0, [r7, #4]
 801a650:	f000 f902 	bl	801a858 <Display_Buttons>
}
 801a654:	e074      	b.n	801a740 <SM_DrawTask+0xfbc>
	else if(SM_enumDisplayState == SM_enum_Display_StoppedWhileRunning){
 801a656:	4b43      	ldr	r3, [pc, #268]	; (801a764 <SM_DrawTask+0xfe0>)
 801a658:	781b      	ldrb	r3, [r3, #0]
 801a65a:	2b11      	cmp	r3, #17
 801a65c:	d136      	bne.n	801a6cc <SM_DrawTask+0xf48>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tr);
 801a65e:	4942      	ldr	r1, [pc, #264]	; (801a768 <SM_DrawTask+0xfe4>)
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f7fd fac9 	bl	8017bf8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 5,17," RESUMING FROM");
 801a666:	4b41      	ldr	r3, [pc, #260]	; (801a76c <SM_DrawTask+0xfe8>)
 801a668:	2211      	movs	r2, #17
 801a66a:	2105      	movs	r1, #5
 801a66c:	6878      	ldr	r0, [r7, #4]
 801a66e:	f7fd fa07 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5,35," LAST PONIT");
 801a672:	4b3f      	ldr	r3, [pc, #252]	; (801a770 <SM_DrawTask+0xfec>)
 801a674:	2223      	movs	r2, #35	; 0x23
 801a676:	2105      	movs	r1, #5
 801a678:	6878      	ldr	r0, [r7, #4]
 801a67a:	f7fd fa01 	bl	8017a80 <u8g2_DrawStr>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 801a67e:	493d      	ldr	r1, [pc, #244]	; (801a774 <SM_DrawTask+0xff0>)
 801a680:	6878      	ldr	r0, [r7, #4]
 801a682:	f7fd fab9 	bl	8017bf8 <u8g2_SetFont>
		Fnclocal_dispfloat = (float)Appl_Display.PowerOnCounter;
 801a686:	4b3c      	ldr	r3, [pc, #240]	; (801a778 <SM_DrawTask+0xff4>)
 801a688:	78db      	ldrb	r3, [r3, #3]
 801a68a:	ee07 3a90 	vmov	s15, r3
 801a68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a692:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		gcvt(Fnclocal_dispfloat,3,display_buf);
 801a696:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a698:	f7f5 fe86 	bl	80103a8 <__aeabi_f2d>
 801a69c:	4604      	mov	r4, r0
 801a69e:	460d      	mov	r5, r1
 801a6a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a6a4:	4619      	mov	r1, r3
 801a6a6:	2003      	movs	r0, #3
 801a6a8:	ec45 4b10 	vmov	d0, r4, r5
 801a6ac:	f005 ff26 	bl	80204fc <gcvt>
		u8g2_DrawStr(u8g2, 5,50,display_buf);
 801a6b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a6b4:	2232      	movs	r2, #50	; 0x32
 801a6b6:	2105      	movs	r1, #5
 801a6b8:	6878      	ldr	r0, [r7, #4]
 801a6ba:	f7fd f9e1 	bl	8017a80 <u8g2_DrawStr>
		Display_Buttons(u8g2,SM_enumDisplayState);
 801a6be:	4b29      	ldr	r3, [pc, #164]	; (801a764 <SM_DrawTask+0xfe0>)
 801a6c0:	781b      	ldrb	r3, [r3, #0]
 801a6c2:	4619      	mov	r1, r3
 801a6c4:	6878      	ldr	r0, [r7, #4]
 801a6c6:	f000 f8c7 	bl	801a858 <Display_Buttons>
}
 801a6ca:	e039      	b.n	801a740 <SM_DrawTask+0xfbc>
	else if(SM_enumDisplayState == SM_enum_Display_PoweringOffWindow){
 801a6cc:	4b25      	ldr	r3, [pc, #148]	; (801a764 <SM_DrawTask+0xfe0>)
 801a6ce:	781b      	ldrb	r3, [r3, #0]
 801a6d0:	2b0b      	cmp	r3, #11
 801a6d2:	d135      	bne.n	801a740 <SM_DrawTask+0xfbc>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 801a6d4:	4927      	ldr	r1, [pc, #156]	; (801a774 <SM_DrawTask+0xff0>)
 801a6d6:	6878      	ldr	r0, [r7, #4]
 801a6d8:	f7fd fa8e 	bl	8017bf8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 1,17,"POWER DOWN");
 801a6dc:	4b27      	ldr	r3, [pc, #156]	; (801a77c <SM_DrawTask+0xff8>)
 801a6de:	2211      	movs	r2, #17
 801a6e0:	2101      	movs	r1, #1
 801a6e2:	6878      	ldr	r0, [r7, #4]
 801a6e4:	f7fd f9cc 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 1,35,"SHUT DOWN AFTER");
 801a6e8:	4b25      	ldr	r3, [pc, #148]	; (801a780 <SM_DrawTask+0xffc>)
 801a6ea:	2223      	movs	r2, #35	; 0x23
 801a6ec:	2101      	movs	r1, #1
 801a6ee:	6878      	ldr	r0, [r7, #4]
 801a6f0:	f7fd f9c6 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 1,47,"FIVE SECONDS");
 801a6f4:	4b23      	ldr	r3, [pc, #140]	; (801a784 <SM_DrawTask+0x1000>)
 801a6f6:	222f      	movs	r2, #47	; 0x2f
 801a6f8:	2101      	movs	r1, #1
 801a6fa:	6878      	ldr	r0, [r7, #4]
 801a6fc:	f7fd f9c0 	bl	8017a80 <u8g2_DrawStr>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 801a700:	491c      	ldr	r1, [pc, #112]	; (801a774 <SM_DrawTask+0xff0>)
 801a702:	6878      	ldr	r0, [r7, #4]
 801a704:	f7fd fa78 	bl	8017bf8 <u8g2_SetFont>
		Fnclocal_dispfloat = (float)Appl_Display.PowerOffCounter;
 801a708:	4b1b      	ldr	r3, [pc, #108]	; (801a778 <SM_DrawTask+0xff4>)
 801a70a:	791b      	ldrb	r3, [r3, #4]
 801a70c:	ee07 3a90 	vmov	s15, r3
 801a710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a714:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		gcvt(Fnclocal_dispfloat,3,display_buf);
 801a718:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a71a:	f7f5 fe45 	bl	80103a8 <__aeabi_f2d>
 801a71e:	4604      	mov	r4, r0
 801a720:	460d      	mov	r5, r1
 801a722:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a726:	4619      	mov	r1, r3
 801a728:	2003      	movs	r0, #3
 801a72a:	ec45 4b10 	vmov	d0, r4, r5
 801a72e:	f005 fee5 	bl	80204fc <gcvt>
		u8g2_DrawStr(u8g2, 90,55,display_buf);
 801a732:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a736:	2237      	movs	r2, #55	; 0x37
 801a738:	215a      	movs	r1, #90	; 0x5a
 801a73a:	6878      	ldr	r0, [r7, #4]
 801a73c:	f7fd f9a0 	bl	8017a80 <u8g2_DrawStr>
}
 801a740:	bf00      	nop
 801a742:	3760      	adds	r7, #96	; 0x60
 801a744:	46bd      	mov	sp, r7
 801a746:	bdb0      	pop	{r4, r5, r7, pc}
 801a748:	08023264 	.word	0x08023264
 801a74c:	080231cc 	.word	0x080231cc
 801a750:	20004974 	.word	0x20004974
 801a754:	200047b0 	.word	0x200047b0
 801a758:	08023274 	.word	0x08023274
 801a75c:	080231b4 	.word	0x080231b4
 801a760:	0802328c 	.word	0x0802328c
 801a764:	2000486e 	.word	0x2000486e
 801a768:	08023af0 	.word	0x08023af0
 801a76c:	0802329c 	.word	0x0802329c
 801a770:	080232ac 	.word	0x080232ac
 801a774:	08023460 	.word	0x08023460
 801a778:	20004870 	.word	0x20004870
 801a77c:	080232b8 	.word	0x080232b8
 801a780:	080232c4 	.word	0x080232c4
 801a784:	080232d4 	.word	0x080232d4

0801a788 <Display_ErrorMessage>:
static inline void Display_ErrorMessage(u8g2_t *u8g2){
 801a788:	b580      	push	{r7, lr}
 801a78a:	b082      	sub	sp, #8
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
	u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 801a790:	492b      	ldr	r1, [pc, #172]	; (801a840 <Display_ErrorMessage+0xb8>)
 801a792:	6878      	ldr	r0, [r7, #4]
 801a794:	f7fd fa30 	bl	8017bf8 <u8g2_SetFont>
	if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||\
 801a798:	4b2a      	ldr	r3, [pc, #168]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a79a:	781b      	ldrb	r3, [r3, #0]
 801a79c:	2b01      	cmp	r3, #1
 801a79e:	d007      	beq.n	801a7b0 <Display_ErrorMessage+0x28>
			Appl_diagActiveFault.PowerFail_Z2 == 1 ||\
 801a7a0:	4b28      	ldr	r3, [pc, #160]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a7a2:	785b      	ldrb	r3, [r3, #1]
	if((Appl_diagActiveFault.PowerFail_Z1 == 1) ||\
 801a7a4:	2b01      	cmp	r3, #1
 801a7a6:	d003      	beq.n	801a7b0 <Display_ErrorMessage+0x28>
			Appl_diagActiveFault.PowerFail_Z3 == 1){
 801a7a8:	4b26      	ldr	r3, [pc, #152]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a7aa:	789b      	ldrb	r3, [r3, #2]
			Appl_diagActiveFault.PowerFail_Z2 == 1 ||\
 801a7ac:	2b01      	cmp	r3, #1
 801a7ae:	d106      	bne.n	801a7be <Display_ErrorMessage+0x36>

		u8g2_DrawStr(u8g2, 20,50,"ERROR : POWERFAIL");
 801a7b0:	4b25      	ldr	r3, [pc, #148]	; (801a848 <Display_ErrorMessage+0xc0>)
 801a7b2:	2232      	movs	r2, #50	; 0x32
 801a7b4:	2114      	movs	r1, #20
 801a7b6:	6878      	ldr	r0, [r7, #4]
 801a7b8:	f7fd f962 	bl	8017a80 <u8g2_DrawStr>
			Appl_diagActiveFault.PhaseReversal == 0 && \
			Appl_diagActiveFault.UnderVoltage == 0){

		u8g2_DrawStr(u8g2, 20,50,"NO MESSAGES");
	}
}
 801a7bc:	e03b      	b.n	801a836 <Display_ErrorMessage+0xae>
	else if(Appl_diagActiveFault.HighTempperatureSCR == 1) u8g2_DrawStr(u8g2, 20,50,"HIGH TEMPERATURE");
 801a7be:	4b21      	ldr	r3, [pc, #132]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a7c0:	799b      	ldrb	r3, [r3, #6]
 801a7c2:	2b01      	cmp	r3, #1
 801a7c4:	d106      	bne.n	801a7d4 <Display_ErrorMessage+0x4c>
 801a7c6:	4b21      	ldr	r3, [pc, #132]	; (801a84c <Display_ErrorMessage+0xc4>)
 801a7c8:	2232      	movs	r2, #50	; 0x32
 801a7ca:	2114      	movs	r1, #20
 801a7cc:	6878      	ldr	r0, [r7, #4]
 801a7ce:	f7fd f957 	bl	8017a80 <u8g2_DrawStr>
}
 801a7d2:	e030      	b.n	801a836 <Display_ErrorMessage+0xae>
	else if(Appl_diagActiveFault.PhaseReversal == 1) u8g2_DrawStr(u8g2, 20,50,"REVERSE PHASE MODE");
 801a7d4:	4b1b      	ldr	r3, [pc, #108]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a7d6:	79db      	ldrb	r3, [r3, #7]
 801a7d8:	2b01      	cmp	r3, #1
 801a7da:	d106      	bne.n	801a7ea <Display_ErrorMessage+0x62>
 801a7dc:	4b1c      	ldr	r3, [pc, #112]	; (801a850 <Display_ErrorMessage+0xc8>)
 801a7de:	2232      	movs	r2, #50	; 0x32
 801a7e0:	2114      	movs	r1, #20
 801a7e2:	6878      	ldr	r0, [r7, #4]
 801a7e4:	f7fd f94c 	bl	8017a80 <u8g2_DrawStr>
}
 801a7e8:	e025      	b.n	801a836 <Display_ErrorMessage+0xae>
	else if(Appl_diagActiveFault.HighTempperatureSCR == 0 && \
 801a7ea:	4b16      	ldr	r3, [pc, #88]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a7ec:	799b      	ldrb	r3, [r3, #6]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d121      	bne.n	801a836 <Display_ErrorMessage+0xae>
			Appl_diagActiveFault.OverCurrent == 0 && \
 801a7f2:	4b14      	ldr	r3, [pc, #80]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a7f4:	791b      	ldrb	r3, [r3, #4]
	else if(Appl_diagActiveFault.HighTempperatureSCR == 0 && \
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d11d      	bne.n	801a836 <Display_ErrorMessage+0xae>
			Appl_diagActiveFault.OverVoltage == 0 && \
 801a7fa:	4b12      	ldr	r3, [pc, #72]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a7fc:	78db      	ldrb	r3, [r3, #3]
			Appl_diagActiveFault.OverCurrent == 0 && \
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d119      	bne.n	801a836 <Display_ErrorMessage+0xae>
			Appl_diagActiveFault.PowerFail_Z1 == 0 && \
 801a802:	4b10      	ldr	r3, [pc, #64]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a804:	781b      	ldrb	r3, [r3, #0]
			Appl_diagActiveFault.OverVoltage == 0 && \
 801a806:	2b00      	cmp	r3, #0
 801a808:	d115      	bne.n	801a836 <Display_ErrorMessage+0xae>
			Appl_diagActiveFault.PowerFail_Z2 == 0 && \
 801a80a:	4b0e      	ldr	r3, [pc, #56]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a80c:	785b      	ldrb	r3, [r3, #1]
			Appl_diagActiveFault.PowerFail_Z1 == 0 && \
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d111      	bne.n	801a836 <Display_ErrorMessage+0xae>
			Appl_diagActiveFault.PowerFail_Z3 == 0 && \
 801a812:	4b0c      	ldr	r3, [pc, #48]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a814:	789b      	ldrb	r3, [r3, #2]
			Appl_diagActiveFault.PowerFail_Z2 == 0 && \
 801a816:	2b00      	cmp	r3, #0
 801a818:	d10d      	bne.n	801a836 <Display_ErrorMessage+0xae>
			Appl_diagActiveFault.PhaseReversal == 0 && \
 801a81a:	4b0a      	ldr	r3, [pc, #40]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a81c:	79db      	ldrb	r3, [r3, #7]
			Appl_diagActiveFault.PowerFail_Z3 == 0 && \
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d109      	bne.n	801a836 <Display_ErrorMessage+0xae>
			Appl_diagActiveFault.UnderVoltage == 0){
 801a822:	4b08      	ldr	r3, [pc, #32]	; (801a844 <Display_ErrorMessage+0xbc>)
 801a824:	795b      	ldrb	r3, [r3, #5]
			Appl_diagActiveFault.PhaseReversal == 0 && \
 801a826:	2b00      	cmp	r3, #0
 801a828:	d105      	bne.n	801a836 <Display_ErrorMessage+0xae>
		u8g2_DrawStr(u8g2, 20,50,"NO MESSAGES");
 801a82a:	4b0a      	ldr	r3, [pc, #40]	; (801a854 <Display_ErrorMessage+0xcc>)
 801a82c:	2232      	movs	r2, #50	; 0x32
 801a82e:	2114      	movs	r1, #20
 801a830:	6878      	ldr	r0, [r7, #4]
 801a832:	f7fd f925 	bl	8017a80 <u8g2_DrawStr>
}
 801a836:	bf00      	nop
 801a838:	3708      	adds	r7, #8
 801a83a:	46bd      	mov	sp, r7
 801a83c:	bd80      	pop	{r7, pc}
 801a83e:	bf00      	nop
 801a840:	08023460 	.word	0x08023460
 801a844:	200047b0 	.word	0x200047b0
 801a848:	080232e4 	.word	0x080232e4
 801a84c:	080232f8 	.word	0x080232f8
 801a850:	0802330c 	.word	0x0802330c
 801a854:	08023320 	.word	0x08023320

0801a858 <Display_Buttons>:


static inline void Display_Buttons(u8g2_t *u8g2,SM_DisplayState_Enum disp){
 801a858:	b5b0      	push	{r4, r5, r7, lr}
 801a85a:	b084      	sub	sp, #16
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	6078      	str	r0, [r7, #4]
 801a860:	460b      	mov	r3, r1
 801a862:	70fb      	strb	r3, [r7, #3]

	float batteryChargePercent;



	if(disp == SM_enum_Display_MM_CurrentloopRunning_Slow || \
 801a864:	78fb      	ldrb	r3, [r7, #3]
 801a866:	2b09      	cmp	r3, #9
 801a868:	d005      	beq.n	801a876 <Display_Buttons+0x1e>
 801a86a:	78fb      	ldrb	r3, [r7, #3]
 801a86c:	2b0c      	cmp	r3, #12
 801a86e:	d002      	beq.n	801a876 <Display_Buttons+0x1e>
				disp == SM_enum_Display_VishwaTest || \
 801a870:	78fb      	ldrb	r3, [r7, #3]
 801a872:	2b0a      	cmp	r3, #10
 801a874:	d10c      	bne.n	801a890 <Display_Buttons+0x38>
				disp == SM_enum_Display_MM_CurrentloopRunning_Stable){
		u8g2_DrawHLine(u8g2,90,52,128);
 801a876:	2380      	movs	r3, #128	; 0x80
 801a878:	2234      	movs	r2, #52	; 0x34
 801a87a:	215a      	movs	r1, #90	; 0x5a
 801a87c:	6878      	ldr	r0, [r7, #4]
 801a87e:	f7fd fb43 	bl	8017f08 <u8g2_DrawHLine>
		u8g2_DrawVLine(u8g2,90,52,12);
 801a882:	230c      	movs	r3, #12
 801a884:	2234      	movs	r2, #52	; 0x34
 801a886:	215a      	movs	r1, #90	; 0x5a
 801a888:	6878      	ldr	r0, [r7, #4]
 801a88a:	f7fd fb56 	bl	8017f3a <u8g2_DrawVLine>
 801a88e:	e017      	b.n	801a8c0 <Display_Buttons+0x68>
	}
	else{
	u8g2_DrawHLine(u8g2,1,52,128);
 801a890:	2380      	movs	r3, #128	; 0x80
 801a892:	2234      	movs	r2, #52	; 0x34
 801a894:	2101      	movs	r1, #1
 801a896:	6878      	ldr	r0, [r7, #4]
 801a898:	f7fd fb36 	bl	8017f08 <u8g2_DrawHLine>
	u8g2_DrawVLine(u8g2,32,52,12);
 801a89c:	230c      	movs	r3, #12
 801a89e:	2234      	movs	r2, #52	; 0x34
 801a8a0:	2120      	movs	r1, #32
 801a8a2:	6878      	ldr	r0, [r7, #4]
 801a8a4:	f7fd fb49 	bl	8017f3a <u8g2_DrawVLine>
	u8g2_DrawVLine(u8g2,64,52,12);
 801a8a8:	230c      	movs	r3, #12
 801a8aa:	2234      	movs	r2, #52	; 0x34
 801a8ac:	2140      	movs	r1, #64	; 0x40
 801a8ae:	6878      	ldr	r0, [r7, #4]
 801a8b0:	f7fd fb43 	bl	8017f3a <u8g2_DrawVLine>
	u8g2_DrawVLine(u8g2,96,52,12);
 801a8b4:	230c      	movs	r3, #12
 801a8b6:	2234      	movs	r2, #52	; 0x34
 801a8b8:	2160      	movs	r1, #96	; 0x60
 801a8ba:	6878      	ldr	r0, [r7, #4]
 801a8bc:	f7fd fb3d 	bl	8017f3a <u8g2_DrawVLine>
	}

	if((disp == SM_enum_Display_MAIN_MENU) || \
 801a8c0:	78fb      	ldrb	r3, [r7, #3]
 801a8c2:	2b01      	cmp	r3, #1
 801a8c4:	d11c      	bne.n	801a900 <Display_Buttons+0xa8>
			0 || \
			0){
		u8g2_SetFont(u8g2, u8g2_font_synchronizer_nbp_tf);
 801a8c6:	497b      	ldr	r1, [pc, #492]	; (801aab4 <Display_Buttons+0x25c>)
 801a8c8:	6878      	ldr	r0, [r7, #4]
 801a8ca:	f7fd f995 	bl	8017bf8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 1,63," UP");
 801a8ce:	4b7a      	ldr	r3, [pc, #488]	; (801aab8 <Display_Buttons+0x260>)
 801a8d0:	223f      	movs	r2, #63	; 0x3f
 801a8d2:	2101      	movs	r1, #1
 801a8d4:	6878      	ldr	r0, [r7, #4]
 801a8d6:	f7fd f8d3 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 33,63,"DOWN");
 801a8da:	4b78      	ldr	r3, [pc, #480]	; (801aabc <Display_Buttons+0x264>)
 801a8dc:	223f      	movs	r2, #63	; 0x3f
 801a8de:	2121      	movs	r1, #33	; 0x21
 801a8e0:	6878      	ldr	r0, [r7, #4]
 801a8e2:	f7fd f8cd 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 65,63," OK");
 801a8e6:	4b76      	ldr	r3, [pc, #472]	; (801aac0 <Display_Buttons+0x268>)
 801a8e8:	223f      	movs	r2, #63	; 0x3f
 801a8ea:	2141      	movs	r1, #65	; 0x41
 801a8ec:	6878      	ldr	r0, [r7, #4]
 801a8ee:	f7fd f8c7 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 97,63,"INFO");
 801a8f2:	4b74      	ldr	r3, [pc, #464]	; (801aac4 <Display_Buttons+0x26c>)
 801a8f4:	223f      	movs	r2, #63	; 0x3f
 801a8f6:	2161      	movs	r1, #97	; 0x61
 801a8f8:	6878      	ldr	r0, [r7, #4]
 801a8fa:	f7fd f8c1 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 97,63,"STOP");
//		u8g2_SetFont(u8g2,u8g2_font_battery19_tn);
//		u8g2_DrawGlyph(u8g2, 1, 63, 0x0030);
//		u8g2_DrawGlyph(u8g2, 33, 63, 0x0030);
	}
}
 801a8fe:	e0d4      	b.n	801aaaa <Display_Buttons+0x252>
	else if(disp == SM_enum_Display_MM_CurrentloopRunning_Slow || \
 801a900:	78fb      	ldrb	r3, [r7, #3]
 801a902:	2b09      	cmp	r3, #9
 801a904:	d006      	beq.n	801a914 <Display_Buttons+0xbc>
 801a906:	78fb      	ldrb	r3, [r7, #3]
 801a908:	2b0c      	cmp	r3, #12
 801a90a:	d003      	beq.n	801a914 <Display_Buttons+0xbc>
			disp == SM_enum_Display_VishwaTest || \
 801a90c:	78fb      	ldrb	r3, [r7, #3]
 801a90e:	2b0a      	cmp	r3, #10
 801a910:	f040 8088 	bne.w	801aa24 <Display_Buttons+0x1cc>
		batteryChargePercent =(SM_ApplParam.RealtimeVoltage*100.0)/( SM_ApplParam.OverVoltageThreshold);
 801a914:	4b6c      	ldr	r3, [pc, #432]	; (801aac8 <Display_Buttons+0x270>)
 801a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a918:	4618      	mov	r0, r3
 801a91a:	f7f5 fd45 	bl	80103a8 <__aeabi_f2d>
 801a91e:	f04f 0200 	mov.w	r2, #0
 801a922:	4b6a      	ldr	r3, [pc, #424]	; (801aacc <Display_Buttons+0x274>)
 801a924:	f7f5 fd98 	bl	8010458 <__aeabi_dmul>
 801a928:	4602      	mov	r2, r0
 801a92a:	460b      	mov	r3, r1
 801a92c:	4614      	mov	r4, r2
 801a92e:	461d      	mov	r5, r3
 801a930:	4b65      	ldr	r3, [pc, #404]	; (801aac8 <Display_Buttons+0x270>)
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	4618      	mov	r0, r3
 801a936:	f7f5 fd37 	bl	80103a8 <__aeabi_f2d>
 801a93a:	4602      	mov	r2, r0
 801a93c:	460b      	mov	r3, r1
 801a93e:	4620      	mov	r0, r4
 801a940:	4629      	mov	r1, r5
 801a942:	f7f5 feb3 	bl	80106ac <__aeabi_ddiv>
 801a946:	4602      	mov	r2, r0
 801a948:	460b      	mov	r3, r1
 801a94a:	4610      	mov	r0, r2
 801a94c:	4619      	mov	r1, r3
 801a94e:	f7f6 f865 	bl	8010a1c <__aeabi_d2f>
 801a952:	4603      	mov	r3, r0
 801a954:	60fb      	str	r3, [r7, #12]
		u8g2_SetFont(u8g2,u8g2_font_battery19_tn);
 801a956:	495e      	ldr	r1, [pc, #376]	; (801aad0 <Display_Buttons+0x278>)
 801a958:	6878      	ldr	r0, [r7, #4]
 801a95a:	f7fd f94d 	bl	8017bf8 <u8g2_SetFont>
		if(batteryChargePercent >= 0) u8g2_DrawGlyph(u8g2, 1, 63, 0x0030);
 801a95e:	edd7 7a03 	vldr	s15, [r7, #12]
 801a962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a96a:	db05      	blt.n	801a978 <Display_Buttons+0x120>
 801a96c:	2330      	movs	r3, #48	; 0x30
 801a96e:	223f      	movs	r2, #63	; 0x3f
 801a970:	2101      	movs	r1, #1
 801a972:	6878      	ldr	r0, [r7, #4]
 801a974:	f7fc ffd6 	bl	8017924 <u8g2_DrawGlyph>
		if(batteryChargePercent >= 60) u8g2_DrawGlyph(u8g2, 1, 63, 0x0031);
 801a978:	edd7 7a03 	vldr	s15, [r7, #12]
 801a97c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 801aad4 <Display_Buttons+0x27c>
 801a980:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a988:	db05      	blt.n	801a996 <Display_Buttons+0x13e>
 801a98a:	2331      	movs	r3, #49	; 0x31
 801a98c:	223f      	movs	r2, #63	; 0x3f
 801a98e:	2101      	movs	r1, #1
 801a990:	6878      	ldr	r0, [r7, #4]
 801a992:	f7fc ffc7 	bl	8017924 <u8g2_DrawGlyph>
		if(batteryChargePercent >= 70) u8g2_DrawGlyph(u8g2, 1, 63, 0x0032);
 801a996:	edd7 7a03 	vldr	s15, [r7, #12]
 801a99a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 801aad8 <Display_Buttons+0x280>
 801a99e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9a6:	db05      	blt.n	801a9b4 <Display_Buttons+0x15c>
 801a9a8:	2332      	movs	r3, #50	; 0x32
 801a9aa:	223f      	movs	r2, #63	; 0x3f
 801a9ac:	2101      	movs	r1, #1
 801a9ae:	6878      	ldr	r0, [r7, #4]
 801a9b0:	f7fc ffb8 	bl	8017924 <u8g2_DrawGlyph>
		if(batteryChargePercent >= 80) u8g2_DrawGlyph(u8g2, 1, 63, 0x0033);
 801a9b4:	edd7 7a03 	vldr	s15, [r7, #12]
 801a9b8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801aadc <Display_Buttons+0x284>
 801a9bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9c4:	db05      	blt.n	801a9d2 <Display_Buttons+0x17a>
 801a9c6:	2333      	movs	r3, #51	; 0x33
 801a9c8:	223f      	movs	r2, #63	; 0x3f
 801a9ca:	2101      	movs	r1, #1
 801a9cc:	6878      	ldr	r0, [r7, #4]
 801a9ce:	f7fc ffa9 	bl	8017924 <u8g2_DrawGlyph>
		if(batteryChargePercent >= 90) u8g2_DrawGlyph(u8g2, 1, 63, 0x0034);
 801a9d2:	edd7 7a03 	vldr	s15, [r7, #12]
 801a9d6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 801aae0 <Display_Buttons+0x288>
 801a9da:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9e2:	db05      	blt.n	801a9f0 <Display_Buttons+0x198>
 801a9e4:	2334      	movs	r3, #52	; 0x34
 801a9e6:	223f      	movs	r2, #63	; 0x3f
 801a9e8:	2101      	movs	r1, #1
 801a9ea:	6878      	ldr	r0, [r7, #4]
 801a9ec:	f7fc ff9a 	bl	8017924 <u8g2_DrawGlyph>
		if(batteryChargePercent >= 95) u8g2_DrawGlyph(u8g2, 1, 63, 0x0035);
 801a9f0:	edd7 7a03 	vldr	s15, [r7, #12]
 801a9f4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801aae4 <Display_Buttons+0x28c>
 801a9f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa00:	db05      	blt.n	801aa0e <Display_Buttons+0x1b6>
 801aa02:	2335      	movs	r3, #53	; 0x35
 801aa04:	223f      	movs	r2, #63	; 0x3f
 801aa06:	2101      	movs	r1, #1
 801aa08:	6878      	ldr	r0, [r7, #4]
 801aa0a:	f7fc ff8b 	bl	8017924 <u8g2_DrawGlyph>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 801aa0e:	4936      	ldr	r1, [pc, #216]	; (801aae8 <Display_Buttons+0x290>)
 801aa10:	6878      	ldr	r0, [r7, #4]
 801aa12:	f7fd f8f1 	bl	8017bf8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 97,63,"PAUSE");
 801aa16:	4b35      	ldr	r3, [pc, #212]	; (801aaec <Display_Buttons+0x294>)
 801aa18:	223f      	movs	r2, #63	; 0x3f
 801aa1a:	2161      	movs	r1, #97	; 0x61
 801aa1c:	6878      	ldr	r0, [r7, #4]
 801aa1e:	f7fd f82f 	bl	8017a80 <u8g2_DrawStr>
 801aa22:	e042      	b.n	801aaaa <Display_Buttons+0x252>
	else if(disp == SM_enum_Display_RejuvenationMenu || \
 801aa24:	78fb      	ldrb	r3, [r7, #3]
 801aa26:	2b02      	cmp	r3, #2
 801aa28:	d00b      	beq.n	801aa42 <Display_Buttons+0x1ea>
 801aa2a:	78fb      	ldrb	r3, [r7, #3]
 801aa2c:	2b05      	cmp	r3, #5
 801aa2e:	d008      	beq.n	801aa42 <Display_Buttons+0x1ea>
			disp == SM_enum_Display_Settings_Menu_Transfer ||\
 801aa30:	78fb      	ldrb	r3, [r7, #3]
 801aa32:	2b06      	cmp	r3, #6
 801aa34:	d005      	beq.n	801aa42 <Display_Buttons+0x1ea>
			disp == SM_enum_Display_Settings_Menu_Erase ||\
 801aa36:	78fb      	ldrb	r3, [r7, #3]
 801aa38:	2b08      	cmp	r3, #8
 801aa3a:	d002      	beq.n	801aa42 <Display_Buttons+0x1ea>
			disp == SM_enum_Display_Settings_Menu_MaxVoltage ||\
 801aa3c:	78fb      	ldrb	r3, [r7, #3]
 801aa3e:	2b04      	cmp	r3, #4
 801aa40:	d11c      	bne.n	801aa7c <Display_Buttons+0x224>
		u8g2_SetFont(u8g2, u8g2_font_synchronizer_nbp_tf);
 801aa42:	491c      	ldr	r1, [pc, #112]	; (801aab4 <Display_Buttons+0x25c>)
 801aa44:	6878      	ldr	r0, [r7, #4]
 801aa46:	f7fd f8d7 	bl	8017bf8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 1,63," UP");
 801aa4a:	4b1b      	ldr	r3, [pc, #108]	; (801aab8 <Display_Buttons+0x260>)
 801aa4c:	223f      	movs	r2, #63	; 0x3f
 801aa4e:	2101      	movs	r1, #1
 801aa50:	6878      	ldr	r0, [r7, #4]
 801aa52:	f7fd f815 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 33,63,"DOWN");
 801aa56:	4b19      	ldr	r3, [pc, #100]	; (801aabc <Display_Buttons+0x264>)
 801aa58:	223f      	movs	r2, #63	; 0x3f
 801aa5a:	2121      	movs	r1, #33	; 0x21
 801aa5c:	6878      	ldr	r0, [r7, #4]
 801aa5e:	f7fd f80f 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 65,63," OK");
 801aa62:	4b17      	ldr	r3, [pc, #92]	; (801aac0 <Display_Buttons+0x268>)
 801aa64:	223f      	movs	r2, #63	; 0x3f
 801aa66:	2141      	movs	r1, #65	; 0x41
 801aa68:	6878      	ldr	r0, [r7, #4]
 801aa6a:	f7fd f809 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 97,63,"BACK");
 801aa6e:	4b20      	ldr	r3, [pc, #128]	; (801aaf0 <Display_Buttons+0x298>)
 801aa70:	223f      	movs	r2, #63	; 0x3f
 801aa72:	2161      	movs	r1, #97	; 0x61
 801aa74:	6878      	ldr	r0, [r7, #4]
 801aa76:	f7fd f803 	bl	8017a80 <u8g2_DrawStr>
 801aa7a:	e016      	b.n	801aaaa <Display_Buttons+0x252>
	else if(disp == SM_enum_Display_Pause || \
 801aa7c:	78fb      	ldrb	r3, [r7, #3]
 801aa7e:	2b10      	cmp	r3, #16
 801aa80:	d002      	beq.n	801aa88 <Display_Buttons+0x230>
 801aa82:	78fb      	ldrb	r3, [r7, #3]
 801aa84:	2b11      	cmp	r3, #17
 801aa86:	d110      	bne.n	801aaaa <Display_Buttons+0x252>
		u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 801aa88:	4917      	ldr	r1, [pc, #92]	; (801aae8 <Display_Buttons+0x290>)
 801aa8a:	6878      	ldr	r0, [r7, #4]
 801aa8c:	f7fd f8b4 	bl	8017bf8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 65,63,"RESUME");
 801aa90:	4b18      	ldr	r3, [pc, #96]	; (801aaf4 <Display_Buttons+0x29c>)
 801aa92:	223f      	movs	r2, #63	; 0x3f
 801aa94:	2141      	movs	r1, #65	; 0x41
 801aa96:	6878      	ldr	r0, [r7, #4]
 801aa98:	f7fc fff2 	bl	8017a80 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 97,63,"STOP");
 801aa9c:	4b16      	ldr	r3, [pc, #88]	; (801aaf8 <Display_Buttons+0x2a0>)
 801aa9e:	223f      	movs	r2, #63	; 0x3f
 801aaa0:	2161      	movs	r1, #97	; 0x61
 801aaa2:	6878      	ldr	r0, [r7, #4]
 801aaa4:	f7fc ffec 	bl	8017a80 <u8g2_DrawStr>
}
 801aaa8:	e7ff      	b.n	801aaaa <Display_Buttons+0x252>
 801aaaa:	bf00      	nop
 801aaac:	3710      	adds	r7, #16
 801aaae:	46bd      	mov	sp, r7
 801aab0:	bdb0      	pop	{r4, r5, r7, pc}
 801aab2:	bf00      	nop
 801aab4:	080265a4 	.word	0x080265a4
 801aab8:	0802332c 	.word	0x0802332c
 801aabc:	08023330 	.word	0x08023330
 801aac0:	08023338 	.word	0x08023338
 801aac4:	0802333c 	.word	0x0802333c
 801aac8:	20004974 	.word	0x20004974
 801aacc:	40590000 	.word	0x40590000
 801aad0:	080233b8 	.word	0x080233b8
 801aad4:	42700000 	.word	0x42700000
 801aad8:	428c0000 	.word	0x428c0000
 801aadc:	42a00000 	.word	0x42a00000
 801aae0:	42b40000 	.word	0x42b40000
 801aae4:	42be0000 	.word	0x42be0000
 801aae8:	08023460 	.word	0x08023460
 801aaec:	08023344 	.word	0x08023344
 801aaf0:	0802334c 	.word	0x0802334c
 801aaf4:	08023354 	.word	0x08023354
 801aaf8:	0802335c 	.word	0x0802335c

0801aafc <Display_Voltage>:
static inline void Display_Voltage(u8g2_t *u8g2){
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b084      	sub	sp, #16
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
	static char display_buf[40] = {0};
	static char display_buf2[40] = {0};
	float Fnclocal_dispfloat;
	static uint8_t Fnclocal_DisplayCounter;
	Fnclocal_DisplayCounter++;
 801ab04:	4b39      	ldr	r3, [pc, #228]	; (801abec <Display_Voltage+0xf0>)
 801ab06:	781b      	ldrb	r3, [r3, #0]
 801ab08:	3301      	adds	r3, #1
 801ab0a:	b2da      	uxtb	r2, r3
 801ab0c:	4b37      	ldr	r3, [pc, #220]	; (801abec <Display_Voltage+0xf0>)
 801ab0e:	701a      	strb	r2, [r3, #0]
	if(Fnclocal_DisplayCounter>=4*4){
 801ab10:	4b36      	ldr	r3, [pc, #216]	; (801abec <Display_Voltage+0xf0>)
 801ab12:	781b      	ldrb	r3, [r3, #0]
 801ab14:	2b0f      	cmp	r3, #15
 801ab16:	d921      	bls.n	801ab5c <Display_Voltage+0x60>
		Fnclocal_DisplayCounter = 0;
 801ab18:	4b34      	ldr	r3, [pc, #208]	; (801abec <Display_Voltage+0xf0>)
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	701a      	strb	r2, [r3, #0]
		Fnclocal_dispfloat = SM_ApplParam.RealtimeVoltage;
 801ab1e:	4b34      	ldr	r3, [pc, #208]	; (801abf0 <Display_Voltage+0xf4>)
 801ab20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab22:	60fb      	str	r3, [r7, #12]
		Fnclocal_dispfloat = round(Fnclocal_dispfloat);
 801ab24:	68f8      	ldr	r0, [r7, #12]
 801ab26:	f7f5 fc3f 	bl	80103a8 <__aeabi_f2d>
 801ab2a:	4602      	mov	r2, r0
 801ab2c:	460b      	mov	r3, r1
 801ab2e:	ec43 2b10 	vmov	d0, r2, r3
 801ab32:	f005 fc73 	bl	802041c <round>
 801ab36:	ec53 2b10 	vmov	r2, r3, d0
 801ab3a:	4610      	mov	r0, r2
 801ab3c:	4619      	mov	r1, r3
 801ab3e:	f7f5 ff6d 	bl	8010a1c <__aeabi_d2f>
 801ab42:	4603      	mov	r3, r0
 801ab44:	60fb      	str	r3, [r7, #12]
		gcvt(Fnclocal_dispfloat,3,display_buf);
 801ab46:	68f8      	ldr	r0, [r7, #12]
 801ab48:	f7f5 fc2e 	bl	80103a8 <__aeabi_f2d>
 801ab4c:	4602      	mov	r2, r0
 801ab4e:	460b      	mov	r3, r1
 801ab50:	4928      	ldr	r1, [pc, #160]	; (801abf4 <Display_Voltage+0xf8>)
 801ab52:	2003      	movs	r0, #3
 801ab54:	ec43 2b10 	vmov	d0, r2, r3
 801ab58:	f005 fcd0 	bl	80204fc <gcvt>
	}
	u8g2_SetFont(u8g2, u8g2_font_courB10_tn);
 801ab5c:	4926      	ldr	r1, [pc, #152]	; (801abf8 <Display_Voltage+0xfc>)
 801ab5e:	6878      	ldr	r0, [r7, #4]
 801ab60:	f7fd f84a 	bl	8017bf8 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 10,21,display_buf);
 801ab64:	4b23      	ldr	r3, [pc, #140]	; (801abf4 <Display_Voltage+0xf8>)
 801ab66:	2215      	movs	r2, #21
 801ab68:	210a      	movs	r1, #10
 801ab6a:	6878      	ldr	r0, [r7, #4]
 801ab6c:	f7fc ff88 	bl	8017a80 <u8g2_DrawStr>
	u8g2_SetFont(u8g2, u8g2_font_luRS08_tf);
 801ab70:	4922      	ldr	r1, [pc, #136]	; (801abfc <Display_Voltage+0x100>)
 801ab72:	6878      	ldr	r0, [r7, #4]
 801ab74:	f7fd f840 	bl	8017bf8 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 1,8,"Voltage");
 801ab78:	4b21      	ldr	r3, [pc, #132]	; (801ac00 <Display_Voltage+0x104>)
 801ab7a:	2208      	movs	r2, #8
 801ab7c:	2101      	movs	r1, #1
 801ab7e:	6878      	ldr	r0, [r7, #4]
 801ab80:	f7fc ff7e 	bl	8017a80 <u8g2_DrawStr>

	u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 801ab84:	491f      	ldr	r1, [pc, #124]	; (801ac04 <Display_Voltage+0x108>)
 801ab86:	6878      	ldr	r0, [r7, #4]
 801ab88:	f7fd f836 	bl	8017bf8 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 20,63,"MAX V: ");
 801ab8c:	4b1e      	ldr	r3, [pc, #120]	; (801ac08 <Display_Voltage+0x10c>)
 801ab8e:	223f      	movs	r2, #63	; 0x3f
 801ab90:	2114      	movs	r1, #20
 801ab92:	6878      	ldr	r0, [r7, #4]
 801ab94:	f7fc ff74 	bl	8017a80 <u8g2_DrawStr>
	Fnclocal_dispfloat = SM_ApplParam.OverVoltageThreshold;
 801ab98:	4b15      	ldr	r3, [pc, #84]	; (801abf0 <Display_Voltage+0xf4>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	60fb      	str	r3, [r7, #12]
	Fnclocal_dispfloat = round(Fnclocal_dispfloat);
 801ab9e:	68f8      	ldr	r0, [r7, #12]
 801aba0:	f7f5 fc02 	bl	80103a8 <__aeabi_f2d>
 801aba4:	4602      	mov	r2, r0
 801aba6:	460b      	mov	r3, r1
 801aba8:	ec43 2b10 	vmov	d0, r2, r3
 801abac:	f005 fc36 	bl	802041c <round>
 801abb0:	ec53 2b10 	vmov	r2, r3, d0
 801abb4:	4610      	mov	r0, r2
 801abb6:	4619      	mov	r1, r3
 801abb8:	f7f5 ff30 	bl	8010a1c <__aeabi_d2f>
 801abbc:	4603      	mov	r3, r0
 801abbe:	60fb      	str	r3, [r7, #12]
	gcvt(Fnclocal_dispfloat,3,display_buf2);
 801abc0:	68f8      	ldr	r0, [r7, #12]
 801abc2:	f7f5 fbf1 	bl	80103a8 <__aeabi_f2d>
 801abc6:	4602      	mov	r2, r0
 801abc8:	460b      	mov	r3, r1
 801abca:	4910      	ldr	r1, [pc, #64]	; (801ac0c <Display_Voltage+0x110>)
 801abcc:	2003      	movs	r0, #3
 801abce:	ec43 2b10 	vmov	d0, r2, r3
 801abd2:	f005 fc93 	bl	80204fc <gcvt>
	u8g2_DrawStr(u8g2, 50,63,display_buf2);
 801abd6:	4b0d      	ldr	r3, [pc, #52]	; (801ac0c <Display_Voltage+0x110>)
 801abd8:	223f      	movs	r2, #63	; 0x3f
 801abda:	2132      	movs	r1, #50	; 0x32
 801abdc:	6878      	ldr	r0, [r7, #4]
 801abde:	f7fc ff4f 	bl	8017a80 <u8g2_DrawStr>
}
 801abe2:	bf00      	nop
 801abe4:	3710      	adds	r7, #16
 801abe6:	46bd      	mov	sp, r7
 801abe8:	bd80      	pop	{r7, pc}
 801abea:	bf00      	nop
 801abec:	20000542 	.word	0x20000542
 801abf0:	20004974 	.word	0x20004974
 801abf4:	20000544 	.word	0x20000544
 801abf8:	08029bb8 	.word	0x08029bb8
 801abfc:	08029ca0 	.word	0x08029ca0
 801ac00:	08023364 	.word	0x08023364
 801ac04:	08023460 	.word	0x08023460
 801ac08:	0802336c 	.word	0x0802336c
 801ac0c:	2000056c 	.word	0x2000056c

0801ac10 <Display_Current>:

static inline void Display_Current(u8g2_t *u8g2){
 801ac10:	b5b0      	push	{r4, r5, r7, lr}
 801ac12:	b08c      	sub	sp, #48	; 0x30
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	6078      	str	r0, [r7, #4]
	char display_buf[40] = {0};
 801ac18:	2300      	movs	r3, #0
 801ac1a:	60bb      	str	r3, [r7, #8]
 801ac1c:	f107 030c 	add.w	r3, r7, #12
 801ac20:	2224      	movs	r2, #36	; 0x24
 801ac22:	2100      	movs	r1, #0
 801ac24:	4618      	mov	r0, r3
 801ac26:	f005 fced 	bl	8020604 <memset>
	static float Fnclocal_dispfloat;

	static uint8_t Fnclocal_DisplayCounter;
	Fnclocal_DisplayCounter++;
 801ac2a:	4b24      	ldr	r3, [pc, #144]	; (801acbc <Display_Current+0xac>)
 801ac2c:	781b      	ldrb	r3, [r3, #0]
 801ac2e:	3301      	adds	r3, #1
 801ac30:	b2da      	uxtb	r2, r3
 801ac32:	4b22      	ldr	r3, [pc, #136]	; (801acbc <Display_Current+0xac>)
 801ac34:	701a      	strb	r2, [r3, #0]
	if((Fnclocal_DisplayCounter>=4*4)){
 801ac36:	4b21      	ldr	r3, [pc, #132]	; (801acbc <Display_Current+0xac>)
 801ac38:	781b      	ldrb	r3, [r3, #0]
 801ac3a:	2b0f      	cmp	r3, #15
 801ac3c:	d915      	bls.n	801ac6a <Display_Current+0x5a>
		Fnclocal_DisplayCounter = 0;
 801ac3e:	4b1f      	ldr	r3, [pc, #124]	; (801acbc <Display_Current+0xac>)
 801ac40:	2200      	movs	r2, #0
 801ac42:	701a      	strb	r2, [r3, #0]
		if(SM_ApplParam.RealtimeCurrentFiltered <3){
 801ac44:	4b1e      	ldr	r3, [pc, #120]	; (801acc0 <Display_Current+0xb0>)
 801ac46:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801ac4a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801ac4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ac52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac56:	d504      	bpl.n	801ac62 <Display_Current+0x52>
			Fnclocal_dispfloat = 0;
 801ac58:	4b1a      	ldr	r3, [pc, #104]	; (801acc4 <Display_Current+0xb4>)
 801ac5a:	f04f 0200 	mov.w	r2, #0
 801ac5e:	601a      	str	r2, [r3, #0]
 801ac60:	e003      	b.n	801ac6a <Display_Current+0x5a>
		}
		else{
			Fnclocal_dispfloat = SM_ApplParam.RealtimeCurrentFiltered;
 801ac62:	4b17      	ldr	r3, [pc, #92]	; (801acc0 <Display_Current+0xb0>)
 801ac64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac66:	4a17      	ldr	r2, [pc, #92]	; (801acc4 <Display_Current+0xb4>)
 801ac68:	6013      	str	r3, [r2, #0]
		}

//		Fnclocal_dispfloat = round(Fnclocal_dispfloat);
	}
	u8g2_SetFont(u8g2, u8g2_font_luRS08_tf);
 801ac6a:	4917      	ldr	r1, [pc, #92]	; (801acc8 <Display_Current+0xb8>)
 801ac6c:	6878      	ldr	r0, [r7, #4]
 801ac6e:	f7fc ffc3 	bl	8017bf8 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 71,8,"Amps");
 801ac72:	4b16      	ldr	r3, [pc, #88]	; (801accc <Display_Current+0xbc>)
 801ac74:	2208      	movs	r2, #8
 801ac76:	2147      	movs	r1, #71	; 0x47
 801ac78:	6878      	ldr	r0, [r7, #4]
 801ac7a:	f7fc ff01 	bl	8017a80 <u8g2_DrawStr>
	u8g2_SetFont(u8g2, u8g2_font_courB10_tn);
 801ac7e:	4914      	ldr	r1, [pc, #80]	; (801acd0 <Display_Current+0xc0>)
 801ac80:	6878      	ldr	r0, [r7, #4]
 801ac82:	f7fc ffb9 	bl	8017bf8 <u8g2_SetFont>
	gcvt(Fnclocal_dispfloat,3,display_buf);
 801ac86:	4b0f      	ldr	r3, [pc, #60]	; (801acc4 <Display_Current+0xb4>)
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	f7f5 fb8c 	bl	80103a8 <__aeabi_f2d>
 801ac90:	4604      	mov	r4, r0
 801ac92:	460d      	mov	r5, r1
 801ac94:	f107 0308 	add.w	r3, r7, #8
 801ac98:	4619      	mov	r1, r3
 801ac9a:	2003      	movs	r0, #3
 801ac9c:	ec45 4b10 	vmov	d0, r4, r5
 801aca0:	f005 fc2c 	bl	80204fc <gcvt>
	u8g2_DrawStr(u8g2, 71,21,display_buf);
 801aca4:	f107 0308 	add.w	r3, r7, #8
 801aca8:	2215      	movs	r2, #21
 801acaa:	2147      	movs	r1, #71	; 0x47
 801acac:	6878      	ldr	r0, [r7, #4]
 801acae:	f7fc fee7 	bl	8017a80 <u8g2_DrawStr>
}
 801acb2:	bf00      	nop
 801acb4:	3730      	adds	r7, #48	; 0x30
 801acb6:	46bd      	mov	sp, r7
 801acb8:	bdb0      	pop	{r4, r5, r7, pc}
 801acba:	bf00      	nop
 801acbc:	20000594 	.word	0x20000594
 801acc0:	20004974 	.word	0x20004974
 801acc4:	20000598 	.word	0x20000598
 801acc8:	08029ca0 	.word	0x08029ca0
 801accc:	08023374 	.word	0x08023374
 801acd0:	08029bb8 	.word	0x08029bb8

0801acd4 <Display_RunningTime>:

static inline void Display_RunningTime(u8g2_t *u8g2){
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b08c      	sub	sp, #48	; 0x30
 801acd8:	af00      	add	r7, sp, #0
 801acda:	6078      	str	r0, [r7, #4]
	char display_buf[40] = {0};
 801acdc:	2300      	movs	r3, #0
 801acde:	60bb      	str	r3, [r7, #8]
 801ace0:	f107 030c 	add.w	r3, r7, #12
 801ace4:	2224      	movs	r2, #36	; 0x24
 801ace6:	2100      	movs	r1, #0
 801ace8:	4618      	mov	r0, r3
 801acea:	f005 fc8b 	bl	8020604 <memset>
	u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 801acee:	4931      	ldr	r1, [pc, #196]	; (801adb4 <Display_RunningTime+0xe0>)
 801acf0:	6878      	ldr	r0, [r7, #4]
 801acf2:	f7fc ff81 	bl	8017bf8 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 1,35,"RUN: ");
 801acf6:	4b30      	ldr	r3, [pc, #192]	; (801adb8 <Display_RunningTime+0xe4>)
 801acf8:	2223      	movs	r2, #35	; 0x23
 801acfa:	2101      	movs	r1, #1
 801acfc:	6878      	ldr	r0, [r7, #4]
 801acfe:	f7fc febf 	bl	8017a80 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 25,35,(const char*)itoa(Appl_EEPParam.stm32.EEP_Run_Hour ,display_buf,10));
 801ad02:	4b2e      	ldr	r3, [pc, #184]	; (801adbc <Display_RunningTime+0xe8>)
 801ad04:	7b1b      	ldrb	r3, [r3, #12]
 801ad06:	4618      	mov	r0, r3
 801ad08:	f107 0308 	add.w	r3, r7, #8
 801ad0c:	220a      	movs	r2, #10
 801ad0e:	4619      	mov	r1, r3
 801ad10:	f005 fc5a 	bl	80205c8 <itoa>
 801ad14:	4603      	mov	r3, r0
 801ad16:	2223      	movs	r2, #35	; 0x23
 801ad18:	2119      	movs	r1, #25
 801ad1a:	6878      	ldr	r0, [r7, #4]
 801ad1c:	f7fc feb0 	bl	8017a80 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 35,35," : ");
 801ad20:	4b27      	ldr	r3, [pc, #156]	; (801adc0 <Display_RunningTime+0xec>)
 801ad22:	2223      	movs	r2, #35	; 0x23
 801ad24:	2123      	movs	r1, #35	; 0x23
 801ad26:	6878      	ldr	r0, [r7, #4]
 801ad28:	f7fc feaa 	bl	8017a80 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 45,35,(const char*)itoa(Appl_EEPParam.stm32.EEP_Run_Min,display_buf,10));
 801ad2c:	4b23      	ldr	r3, [pc, #140]	; (801adbc <Display_RunningTime+0xe8>)
 801ad2e:	7adb      	ldrb	r3, [r3, #11]
 801ad30:	4618      	mov	r0, r3
 801ad32:	f107 0308 	add.w	r3, r7, #8
 801ad36:	220a      	movs	r2, #10
 801ad38:	4619      	mov	r1, r3
 801ad3a:	f005 fc45 	bl	80205c8 <itoa>
 801ad3e:	4603      	mov	r3, r0
 801ad40:	2223      	movs	r2, #35	; 0x23
 801ad42:	212d      	movs	r1, #45	; 0x2d
 801ad44:	6878      	ldr	r0, [r7, #4]
 801ad46:	f7fc fe9b 	bl	8017a80 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 55,35," : ");
 801ad4a:	4b1d      	ldr	r3, [pc, #116]	; (801adc0 <Display_RunningTime+0xec>)
 801ad4c:	2223      	movs	r2, #35	; 0x23
 801ad4e:	2137      	movs	r1, #55	; 0x37
 801ad50:	6878      	ldr	r0, [r7, #4]
 801ad52:	f7fc fe95 	bl	8017a80 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 65,35,(const char*)itoa(Appl_EEPParam.stm32.EEP_Run_Sec,display_buf,10));
 801ad56:	4b19      	ldr	r3, [pc, #100]	; (801adbc <Display_RunningTime+0xe8>)
 801ad58:	7a9b      	ldrb	r3, [r3, #10]
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	f107 0308 	add.w	r3, r7, #8
 801ad60:	220a      	movs	r2, #10
 801ad62:	4619      	mov	r1, r3
 801ad64:	f005 fc30 	bl	80205c8 <itoa>
 801ad68:	4603      	mov	r3, r0
 801ad6a:	2223      	movs	r2, #35	; 0x23
 801ad6c:	2141      	movs	r1, #65	; 0x41
 801ad6e:	6878      	ldr	r0, [r7, #4]
 801ad70:	f7fc fe86 	bl	8017a80 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 80,35,"/");
 801ad74:	4b13      	ldr	r3, [pc, #76]	; (801adc4 <Display_RunningTime+0xf0>)
 801ad76:	2223      	movs	r2, #35	; 0x23
 801ad78:	2150      	movs	r1, #80	; 0x50
 801ad7a:	6878      	ldr	r0, [r7, #4]
 801ad7c:	f7fc fe80 	bl	8017a80 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 90,35,(const char*)itoa(Appl_EEPParam.stm32.EEP_TimerSetHours,display_buf,10));
 801ad80:	4b0e      	ldr	r3, [pc, #56]	; (801adbc <Display_RunningTime+0xe8>)
 801ad82:	7b5b      	ldrb	r3, [r3, #13]
 801ad84:	4618      	mov	r0, r3
 801ad86:	f107 0308 	add.w	r3, r7, #8
 801ad8a:	220a      	movs	r2, #10
 801ad8c:	4619      	mov	r1, r3
 801ad8e:	f005 fc1b 	bl	80205c8 <itoa>
 801ad92:	4603      	mov	r3, r0
 801ad94:	2223      	movs	r2, #35	; 0x23
 801ad96:	215a      	movs	r1, #90	; 0x5a
 801ad98:	6878      	ldr	r0, [r7, #4]
 801ad9a:	f7fc fe71 	bl	8017a80 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 100,35,"HRS");
 801ad9e:	4b0a      	ldr	r3, [pc, #40]	; (801adc8 <Display_RunningTime+0xf4>)
 801ada0:	2223      	movs	r2, #35	; 0x23
 801ada2:	2164      	movs	r1, #100	; 0x64
 801ada4:	6878      	ldr	r0, [r7, #4]
 801ada6:	f7fc fe6b 	bl	8017a80 <u8g2_DrawStr>
}
 801adaa:	bf00      	nop
 801adac:	3730      	adds	r7, #48	; 0x30
 801adae:	46bd      	mov	sp, r7
 801adb0:	bd80      	pop	{r7, pc}
 801adb2:	bf00      	nop
 801adb4:	08023460 	.word	0x08023460
 801adb8:	0802337c 	.word	0x0802337c
 801adbc:	2000005c 	.word	0x2000005c
 801adc0:	08023384 	.word	0x08023384
 801adc4:	08023388 	.word	0x08023388
 801adc8:	0802338c 	.word	0x0802338c
 801adcc:	00000000 	.word	0x00000000

0801add0 <FilterCurrent_forLogging>:

void splashScreen(u8g2_t *u8g2){
	vishwa_u8g2drawcircleAnime(u8g2);
}

void FilterCurrent_forLogging(void){
 801add0:	b5b0      	push	{r4, r5, r7, lr}
 801add2:	af00      	add	r7, sp, #0
	static float Fnclocal_errorValue;
	Fnclocal_errorValue = SM_ApplParam.RealtimeCurrent - SM_ApplParam.RealtimeCurrentFiltered;
 801add4:	4b18      	ldr	r3, [pc, #96]	; (801ae38 <FilterCurrent_forLogging+0x68>)
 801add6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801adda:	4b17      	ldr	r3, [pc, #92]	; (801ae38 <FilterCurrent_forLogging+0x68>)
 801addc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801ade0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ade4:	4b15      	ldr	r3, [pc, #84]	; (801ae3c <FilterCurrent_forLogging+0x6c>)
 801ade6:	edc3 7a00 	vstr	s15, [r3]
	SM_ApplParam.RealtimeCurrentFiltered = SM_ApplParam.RealtimeCurrentFiltered + Fnclocal_errorValue*0.4;
 801adea:	4b13      	ldr	r3, [pc, #76]	; (801ae38 <FilterCurrent_forLogging+0x68>)
 801adec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801adee:	4618      	mov	r0, r3
 801adf0:	f7f5 fada 	bl	80103a8 <__aeabi_f2d>
 801adf4:	4604      	mov	r4, r0
 801adf6:	460d      	mov	r5, r1
 801adf8:	4b10      	ldr	r3, [pc, #64]	; (801ae3c <FilterCurrent_forLogging+0x6c>)
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7f5 fad3 	bl	80103a8 <__aeabi_f2d>
 801ae02:	a30b      	add	r3, pc, #44	; (adr r3, 801ae30 <FilterCurrent_forLogging+0x60>)
 801ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae08:	f7f5 fb26 	bl	8010458 <__aeabi_dmul>
 801ae0c:	4602      	mov	r2, r0
 801ae0e:	460b      	mov	r3, r1
 801ae10:	4620      	mov	r0, r4
 801ae12:	4629      	mov	r1, r5
 801ae14:	f7f5 f96a 	bl	80100ec <__adddf3>
 801ae18:	4602      	mov	r2, r0
 801ae1a:	460b      	mov	r3, r1
 801ae1c:	4610      	mov	r0, r2
 801ae1e:	4619      	mov	r1, r3
 801ae20:	f7f5 fdfc 	bl	8010a1c <__aeabi_d2f>
 801ae24:	4603      	mov	r3, r0
 801ae26:	4a04      	ldr	r2, [pc, #16]	; (801ae38 <FilterCurrent_forLogging+0x68>)
 801ae28:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 801ae2a:	bf00      	nop
 801ae2c:	bdb0      	pop	{r4, r5, r7, pc}
 801ae2e:	bf00      	nop
 801ae30:	9999999a 	.word	0x9999999a
 801ae34:	3fd99999 	.word	0x3fd99999
 801ae38:	20004974 	.word	0x20004974
 801ae3c:	2000059c 	.word	0x2000059c

0801ae40 <SerialCommunication>:
#define TOTAL_BUFFER_SIZE 26
uint8_t uartTxBuffer[TOTAL_BUFFER_SIZE];
uint8_t switchOn = 0;
uint8_t switchOnkeypressed = 0;
void SerialCommunication(uint8_t loopms){
 801ae40:	b580      	push	{r7, lr}
 801ae42:	b084      	sub	sp, #16
 801ae44:	af00      	add	r7, sp, #0
 801ae46:	4603      	mov	r3, r0
 801ae48:	71fb      	strb	r3, [r7, #7]
	static uint8_t count=0;
	uint16_t TempU16;
	uint8_t statsss;
	static uint32_t keepAliveCommunication;

	if((SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow) ||
 801ae4a:	4b64      	ldr	r3, [pc, #400]	; (801afdc <SerialCommunication+0x19c>)
 801ae4c:	781b      	ldrb	r3, [r3, #0]
 801ae4e:	b2db      	uxtb	r3, r3
 801ae50:	2b0b      	cmp	r3, #11
 801ae52:	d004      	beq.n	801ae5e <SerialCommunication+0x1e>
			(SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_StableVoltagefloat)){
 801ae54:	4b61      	ldr	r3, [pc, #388]	; (801afdc <SerialCommunication+0x19c>)
 801ae56:	781b      	ldrb	r3, [r3, #0]
 801ae58:	b2db      	uxtb	r3, r3
	if((SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow) ||
 801ae5a:	2b0c      	cmp	r3, #12
 801ae5c:	d102      	bne.n	801ae64 <SerialCommunication+0x24>
		statsss = 1;
 801ae5e:	2301      	movs	r3, #1
 801ae60:	73fb      	strb	r3, [r7, #15]
 801ae62:	e009      	b.n	801ae78 <SerialCommunication+0x38>
	}
	else if((SM_enumECUState == SM_enum_ECU_PauseMode) ){
 801ae64:	4b5d      	ldr	r3, [pc, #372]	; (801afdc <SerialCommunication+0x19c>)
 801ae66:	781b      	ldrb	r3, [r3, #0]
 801ae68:	b2db      	uxtb	r3, r3
 801ae6a:	2b09      	cmp	r3, #9
 801ae6c:	d102      	bne.n	801ae74 <SerialCommunication+0x34>
		statsss = 2;
 801ae6e:	2302      	movs	r3, #2
 801ae70:	73fb      	strb	r3, [r7, #15]
 801ae72:	e001      	b.n	801ae78 <SerialCommunication+0x38>
	}
	else{
		statsss = 3;
 801ae74:	2303      	movs	r3, #3
 801ae76:	73fb      	strb	r3, [r7, #15]
	}
	TempU16 = (uint16_t)SM_ApplParam.Realtime_floatingVoltage;
 801ae78:	4b59      	ldr	r3, [pc, #356]	; (801afe0 <SerialCommunication+0x1a0>)
 801ae7a:	edd3 7a06 	vldr	s15, [r3, #24]
 801ae7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ae82:	ee17 3a90 	vmov	r3, s15
 801ae86:	81bb      	strh	r3, [r7, #12]
	count++;
 801ae88:	4b56      	ldr	r3, [pc, #344]	; (801afe4 <SerialCommunication+0x1a4>)
 801ae8a:	781b      	ldrb	r3, [r3, #0]
 801ae8c:	3301      	adds	r3, #1
 801ae8e:	b2da      	uxtb	r2, r3
 801ae90:	4b54      	ldr	r3, [pc, #336]	; (801afe4 <SerialCommunication+0x1a4>)
 801ae92:	701a      	strb	r2, [r3, #0]
	if(count>=(1000/loopms)){
 801ae94:	4b53      	ldr	r3, [pc, #332]	; (801afe4 <SerialCommunication+0x1a4>)
 801ae96:	781b      	ldrb	r3, [r3, #0]
 801ae98:	4619      	mov	r1, r3
 801ae9a:	79fb      	ldrb	r3, [r7, #7]
 801ae9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aea0:	fb92 f3f3 	sdiv	r3, r2, r3
 801aea4:	4299      	cmp	r1, r3
 801aea6:	f2c0 8094 	blt.w	801afd2 <SerialCommunication+0x192>
		count = 0;
 801aeaa:	4b4e      	ldr	r3, [pc, #312]	; (801afe4 <SerialCommunication+0x1a4>)
 801aeac:	2200      	movs	r2, #0
 801aeae:	701a      	strb	r2, [r3, #0]
		uartTxBuffer[0] = statsss;
 801aeb0:	4a4d      	ldr	r2, [pc, #308]	; (801afe8 <SerialCommunication+0x1a8>)
 801aeb2:	7bfb      	ldrb	r3, [r7, #15]
 801aeb4:	7013      	strb	r3, [r2, #0]
		uartTxBuffer[1] = Appl_EEPParam.stm32.EEP_CustomerNumber;
 801aeb6:	4b4d      	ldr	r3, [pc, #308]	; (801afec <SerialCommunication+0x1ac>)
 801aeb8:	7b9a      	ldrb	r2, [r3, #14]
 801aeba:	4b4b      	ldr	r3, [pc, #300]	; (801afe8 <SerialCommunication+0x1a8>)
 801aebc:	705a      	strb	r2, [r3, #1]
		uartTxBuffer[2] = (uint8_t)Appl_EEPParam.stm32.EEP_RejuvenationCycleID;
 801aebe:	4b4b      	ldr	r3, [pc, #300]	; (801afec <SerialCommunication+0x1ac>)
 801aec0:	7bda      	ldrb	r2, [r3, #15]
 801aec2:	4b49      	ldr	r3, [pc, #292]	; (801afe8 <SerialCommunication+0x1a8>)
 801aec4:	709a      	strb	r2, [r3, #2]
		uartTxBuffer[3] = Appl_EEPParam.stm32.EEP_Run_Hour;
 801aec6:	4b49      	ldr	r3, [pc, #292]	; (801afec <SerialCommunication+0x1ac>)
 801aec8:	7b1a      	ldrb	r2, [r3, #12]
 801aeca:	4b47      	ldr	r3, [pc, #284]	; (801afe8 <SerialCommunication+0x1a8>)
 801aecc:	70da      	strb	r2, [r3, #3]
		uartTxBuffer[4] = Appl_EEPParam.stm32.EEP_Run_Min;
 801aece:	4b47      	ldr	r3, [pc, #284]	; (801afec <SerialCommunication+0x1ac>)
 801aed0:	7ada      	ldrb	r2, [r3, #11]
 801aed2:	4b45      	ldr	r3, [pc, #276]	; (801afe8 <SerialCommunication+0x1a8>)
 801aed4:	711a      	strb	r2, [r3, #4]
		uartTxBuffer[5] = Appl_EEPParam.stm32.EEP_Run_Sec;
 801aed6:	4b45      	ldr	r3, [pc, #276]	; (801afec <SerialCommunication+0x1ac>)
 801aed8:	7a9a      	ldrb	r2, [r3, #10]
 801aeda:	4b43      	ldr	r3, [pc, #268]	; (801afe8 <SerialCommunication+0x1a8>)
 801aedc:	715a      	strb	r2, [r3, #5]
		uartTxBuffer[6] = Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL;
 801aede:	4b43      	ldr	r3, [pc, #268]	; (801afec <SerialCommunication+0x1ac>)
 801aee0:	7c5a      	ldrb	r2, [r3, #17]
 801aee2:	4b41      	ldr	r3, [pc, #260]	; (801afe8 <SerialCommunication+0x1a8>)
 801aee4:	719a      	strb	r2, [r3, #6]
		uartTxBuffer[7] = round(SM_ApplParam.RealtimeCurrent);
 801aee6:	4b3e      	ldr	r3, [pc, #248]	; (801afe0 <SerialCommunication+0x1a0>)
 801aee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aeea:	4618      	mov	r0, r3
 801aeec:	f7f5 fa5c 	bl	80103a8 <__aeabi_f2d>
 801aef0:	4602      	mov	r2, r0
 801aef2:	460b      	mov	r3, r1
 801aef4:	ec43 2b10 	vmov	d0, r2, r3
 801aef8:	f005 fa90 	bl	802041c <round>
 801aefc:	ec53 2b10 	vmov	r2, r3, d0
 801af00:	4610      	mov	r0, r2
 801af02:	4619      	mov	r1, r3
 801af04:	f7f5 fd6a 	bl	80109dc <__aeabi_d2uiz>
 801af08:	4603      	mov	r3, r0
 801af0a:	b2da      	uxtb	r2, r3
 801af0c:	4b36      	ldr	r3, [pc, #216]	; (801afe8 <SerialCommunication+0x1a8>)
 801af0e:	71da      	strb	r2, [r3, #7]
		uartTxBuffer[8] = TempU16>>8;
 801af10:	89bb      	ldrh	r3, [r7, #12]
 801af12:	0a1b      	lsrs	r3, r3, #8
 801af14:	b29b      	uxth	r3, r3
 801af16:	b2da      	uxtb	r2, r3
 801af18:	4b33      	ldr	r3, [pc, #204]	; (801afe8 <SerialCommunication+0x1a8>)
 801af1a:	721a      	strb	r2, [r3, #8]
		uartTxBuffer[9] = TempU16 & 0xFF;
 801af1c:	89bb      	ldrh	r3, [r7, #12]
 801af1e:	b2da      	uxtb	r2, r3
 801af20:	4b31      	ldr	r3, [pc, #196]	; (801afe8 <SerialCommunication+0x1a8>)
 801af22:	725a      	strb	r2, [r3, #9]
		uartTxBuffer[10] = Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH;
 801af24:	4b31      	ldr	r3, [pc, #196]	; (801afec <SerialCommunication+0x1ac>)
 801af26:	7c1a      	ldrb	r2, [r3, #16]
 801af28:	4b2f      	ldr	r3, [pc, #188]	; (801afe8 <SerialCommunication+0x1a8>)
 801af2a:	729a      	strb	r2, [r3, #10]
		uartTxBuffer[11] = Appl_EEPParam.transfer.extRecord.ExtEEP_StopReason;
 801af2c:	4b2f      	ldr	r3, [pc, #188]	; (801afec <SerialCommunication+0x1ac>)
 801af2e:	7fda      	ldrb	r2, [r3, #31]
 801af30:	4b2d      	ldr	r3, [pc, #180]	; (801afe8 <SerialCommunication+0x1a8>)
 801af32:	72da      	strb	r2, [r3, #11]
		uartTxBuffer[12] = Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdL;
 801af34:	4b2d      	ldr	r3, [pc, #180]	; (801afec <SerialCommunication+0x1ac>)
 801af36:	79da      	ldrb	r2, [r3, #7]
 801af38:	4b2b      	ldr	r3, [pc, #172]	; (801afe8 <SerialCommunication+0x1a8>)
 801af3a:	731a      	strb	r2, [r3, #12]
		uartTxBuffer[13] = Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdH;
 801af3c:	4b2b      	ldr	r3, [pc, #172]	; (801afec <SerialCommunication+0x1ac>)
 801af3e:	799a      	ldrb	r2, [r3, #6]
 801af40:	4b29      	ldr	r3, [pc, #164]	; (801afe8 <SerialCommunication+0x1a8>)
 801af42:	735a      	strb	r2, [r3, #13]

		keepAliveCommunication++;
 801af44:	4b2a      	ldr	r3, [pc, #168]	; (801aff0 <SerialCommunication+0x1b0>)
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	3301      	adds	r3, #1
 801af4a:	4a29      	ldr	r2, [pc, #164]	; (801aff0 <SerialCommunication+0x1b0>)
 801af4c:	6013      	str	r3, [r2, #0]
		uartTxBuffer[14] = keepAliveCommunication & 0xFF;
 801af4e:	4b28      	ldr	r3, [pc, #160]	; (801aff0 <SerialCommunication+0x1b0>)
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	b2da      	uxtb	r2, r3
 801af54:	4b24      	ldr	r3, [pc, #144]	; (801afe8 <SerialCommunication+0x1a8>)
 801af56:	739a      	strb	r2, [r3, #14]
		uartTxBuffer[15] = (keepAliveCommunication >> 8) & 0xFF;
 801af58:	4b25      	ldr	r3, [pc, #148]	; (801aff0 <SerialCommunication+0x1b0>)
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	0a1b      	lsrs	r3, r3, #8
 801af5e:	b2da      	uxtb	r2, r3
 801af60:	4b21      	ldr	r3, [pc, #132]	; (801afe8 <SerialCommunication+0x1a8>)
 801af62:	73da      	strb	r2, [r3, #15]
		uartTxBuffer[16] = (keepAliveCommunication >> 16) & 0xFF;
 801af64:	4b22      	ldr	r3, [pc, #136]	; (801aff0 <SerialCommunication+0x1b0>)
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	0c1b      	lsrs	r3, r3, #16
 801af6a:	b2da      	uxtb	r2, r3
 801af6c:	4b1e      	ldr	r3, [pc, #120]	; (801afe8 <SerialCommunication+0x1a8>)
 801af6e:	741a      	strb	r2, [r3, #16]
		uartTxBuffer[17] = (keepAliveCommunication >> 24) & 0xFF;
 801af70:	4b1f      	ldr	r3, [pc, #124]	; (801aff0 <SerialCommunication+0x1b0>)
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	0e1b      	lsrs	r3, r3, #24
 801af76:	b2da      	uxtb	r2, r3
 801af78:	4b1b      	ldr	r3, [pc, #108]	; (801afe8 <SerialCommunication+0x1a8>)
 801af7a:	745a      	strb	r2, [r3, #17]

		uartTxBuffer[18] = Appl_EEPParam.transfer.extRecord.ExtEEP_DeviceId;
 801af7c:	4b1b      	ldr	r3, [pc, #108]	; (801afec <SerialCommunication+0x1ac>)
 801af7e:	7eda      	ldrb	r2, [r3, #27]
 801af80:	4b19      	ldr	r3, [pc, #100]	; (801afe8 <SerialCommunication+0x1a8>)
 801af82:	749a      	strb	r2, [r3, #18]
		uartTxBuffer[19] =  Appl_EEPParam.stm32.EEP_Usg_HourH;
 801af84:	4b19      	ldr	r3, [pc, #100]	; (801afec <SerialCommunication+0x1ac>)
 801af86:	78da      	ldrb	r2, [r3, #3]
 801af88:	4b17      	ldr	r3, [pc, #92]	; (801afe8 <SerialCommunication+0x1a8>)
 801af8a:	74da      	strb	r2, [r3, #19]
		uartTxBuffer[20] =  Appl_EEPParam.stm32.EEP_Usg_HourL;
 801af8c:	4b17      	ldr	r3, [pc, #92]	; (801afec <SerialCommunication+0x1ac>)
 801af8e:	789a      	ldrb	r2, [r3, #2]
 801af90:	4b15      	ldr	r3, [pc, #84]	; (801afe8 <SerialCommunication+0x1a8>)
 801af92:	751a      	strb	r2, [r3, #20]
		uartTxBuffer[21] =  Appl_EEPParam.stm32.EEP_Usg_Min;
 801af94:	4b15      	ldr	r3, [pc, #84]	; (801afec <SerialCommunication+0x1ac>)
 801af96:	785a      	ldrb	r2, [r3, #1]
 801af98:	4b13      	ldr	r3, [pc, #76]	; (801afe8 <SerialCommunication+0x1a8>)
 801af9a:	755a      	strb	r2, [r3, #21]
		uartTxBuffer[22] =  Appl_EEPParam.stm32.EEP_Usg_Sec;
 801af9c:	4b13      	ldr	r3, [pc, #76]	; (801afec <SerialCommunication+0x1ac>)
 801af9e:	781a      	ldrb	r2, [r3, #0]
 801afa0:	4b11      	ldr	r3, [pc, #68]	; (801afe8 <SerialCommunication+0x1a8>)
 801afa2:	759a      	strb	r2, [r3, #22]

		uartTxBuffer[23] =  Appl_EEPParam.stm32.EEP_TimerSetHours;
 801afa4:	4b11      	ldr	r3, [pc, #68]	; (801afec <SerialCommunication+0x1ac>)
 801afa6:	7b5a      	ldrb	r2, [r3, #13]
 801afa8:	4b0f      	ldr	r3, [pc, #60]	; (801afe8 <SerialCommunication+0x1a8>)
 801afaa:	75da      	strb	r2, [r3, #23]

		uartTxBuffer[TOTAL_BUFFER_SIZE-2] = 0xDE;
 801afac:	4b0e      	ldr	r3, [pc, #56]	; (801afe8 <SerialCommunication+0x1a8>)
 801afae:	22de      	movs	r2, #222	; 0xde
 801afb0:	761a      	strb	r2, [r3, #24]
		uartTxBuffer[TOTAL_BUFFER_SIZE-1] = 0xAD;
 801afb2:	4b0d      	ldr	r3, [pc, #52]	; (801afe8 <SerialCommunication+0x1a8>)
 801afb4:	22ad      	movs	r2, #173	; 0xad
 801afb6:	765a      	strb	r2, [r3, #25]

//		gcvt(Fnclocal_dispfloat,1,chara[0]);
		HAL_UART_Transmit(&huart5, &uartTxBuffer[0], TOTAL_BUFFER_SIZE, 100);
 801afb8:	2364      	movs	r3, #100	; 0x64
 801afba:	221a      	movs	r2, #26
 801afbc:	490a      	ldr	r1, [pc, #40]	; (801afe8 <SerialCommunication+0x1a8>)
 801afbe:	480d      	ldr	r0, [pc, #52]	; (801aff4 <SerialCommunication+0x1b4>)
 801afc0:	f7fb fbdb 	bl	801677a <HAL_UART_Transmit>
//		HAL_UART_Receive(&huart3, &switchOn, 1, 1);
		if(switchOn == 1){
 801afc4:	4b0c      	ldr	r3, [pc, #48]	; (801aff8 <SerialCommunication+0x1b8>)
 801afc6:	781b      	ldrb	r3, [r3, #0]
 801afc8:	2b01      	cmp	r3, #1
 801afca:	d102      	bne.n	801afd2 <SerialCommunication+0x192>
			switchOnkeypressed = 1;
 801afcc:	4b0b      	ldr	r3, [pc, #44]	; (801affc <SerialCommunication+0x1bc>)
 801afce:	2201      	movs	r2, #1
 801afd0:	701a      	strb	r2, [r3, #0]
		}
	}

}
 801afd2:	bf00      	nop
 801afd4:	3710      	adds	r7, #16
 801afd6:	46bd      	mov	sp, r7
 801afd8:	bd80      	pop	{r7, pc}
 801afda:	bf00      	nop
 801afdc:	2000490c 	.word	0x2000490c
 801afe0:	20004974 	.word	0x20004974
 801afe4:	200005a0 	.word	0x200005a0
 801afe8:	20004854 	.word	0x20004854
 801afec:	2000005c 	.word	0x2000005c
 801aff0:	200005a4 	.word	0x200005a4
 801aff4:	20004500 	.word	0x20004500
 801aff8:	20000538 	.word	0x20000538
 801affc:	20000539 	.word	0x20000539

0801b000 <vishwaEEp_Init>:
uint16_t Appl_u16EEPError;

EEP_DataStructure Appl_EEPParam = {1};
EEP_DataStructure Appl_EEPParam_Mirror = {0}; /* defined in-equal purposefully*/

void vishwaEEp_Init(void){
 801b000:	b580      	push	{r7, lr}
 801b002:	af00      	add	r7, sp, #0
	   /* Unlock the Flash Program Erase controller */
	HAL_FLASH_Unlock();
 801b004:	f7f8 faa4 	bl	8013550 <HAL_FLASH_Unlock>
	Appl_enumStatusAPIEEP = EE_Init();
 801b008:	f000 fcd2 	bl	801b9b0 <EE_Init>
 801b00c:	4603      	mov	r3, r0
 801b00e:	b2da      	uxtb	r2, r3
 801b010:	4b06      	ldr	r3, [pc, #24]	; (801b02c <vishwaEEp_Init+0x2c>)
 801b012:	701a      	strb	r2, [r3, #0]
	  if(Appl_enumStatusAPIEEP != FLASH_COMPLETE){
 801b014:	4b05      	ldr	r3, [pc, #20]	; (801b02c <vishwaEEp_Init+0x2c>)
 801b016:	781b      	ldrb	r3, [r3, #0]
 801b018:	2b03      	cmp	r3, #3
 801b01a:	d005      	beq.n	801b028 <vishwaEEp_Init+0x28>
		  Appl_u16EEPError++;
 801b01c:	4b04      	ldr	r3, [pc, #16]	; (801b030 <vishwaEEp_Init+0x30>)
 801b01e:	881b      	ldrh	r3, [r3, #0]
 801b020:	3301      	adds	r3, #1
 801b022:	b29a      	uxth	r2, r3
 801b024:	4b02      	ldr	r3, [pc, #8]	; (801b030 <vishwaEEp_Init+0x30>)
 801b026:	801a      	strh	r2, [r3, #0]
	  }
}
 801b028:	bf00      	nop
 801b02a:	bd80      	pop	{r7, pc}
 801b02c:	20004878 	.word	0x20004878
 801b030:	200048a6 	.word	0x200048a6

0801b034 <Update_Usage_hour_eep>:
void Update_Usage_hour_eep(void){
 801b034:	b480      	push	{r7}
 801b036:	af00      	add	r7, sp, #0

	Appl_EEPParam.stm32.EEP_Usg_Sec++;
 801b038:	4b19      	ldr	r3, [pc, #100]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b03a:	781b      	ldrb	r3, [r3, #0]
 801b03c:	3301      	adds	r3, #1
 801b03e:	b2da      	uxtb	r2, r3
 801b040:	4b17      	ldr	r3, [pc, #92]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b042:	701a      	strb	r2, [r3, #0]
	if(Appl_EEPParam.stm32.EEP_Usg_Sec>=60){
 801b044:	4b16      	ldr	r3, [pc, #88]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b046:	781b      	ldrb	r3, [r3, #0]
 801b048:	2b3b      	cmp	r3, #59	; 0x3b
 801b04a:	d908      	bls.n	801b05e <Update_Usage_hour_eep+0x2a>
		Appl_EEPParam.stm32.EEP_Usg_Sec = 0;
 801b04c:	4b14      	ldr	r3, [pc, #80]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b04e:	2200      	movs	r2, #0
 801b050:	701a      	strb	r2, [r3, #0]
		Appl_EEPParam.stm32.EEP_Usg_Min++;
 801b052:	4b13      	ldr	r3, [pc, #76]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b054:	785b      	ldrb	r3, [r3, #1]
 801b056:	3301      	adds	r3, #1
 801b058:	b2da      	uxtb	r2, r3
 801b05a:	4b11      	ldr	r3, [pc, #68]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b05c:	705a      	strb	r2, [r3, #1]

	}

	if(Appl_EEPParam.stm32.EEP_Usg_Min >= 60){
 801b05e:	4b10      	ldr	r3, [pc, #64]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b060:	785b      	ldrb	r3, [r3, #1]
 801b062:	2b3b      	cmp	r3, #59	; 0x3b
 801b064:	d916      	bls.n	801b094 <Update_Usage_hour_eep+0x60>
		Appl_EEPParam.stm32.EEP_Usg_Min = 0;
 801b066:	4b0e      	ldr	r3, [pc, #56]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b068:	2200      	movs	r2, #0
 801b06a:	705a      	strb	r2, [r3, #1]
		if(Appl_EEPParam.stm32.EEP_Usg_HourL >= 0xFF){
 801b06c:	4b0c      	ldr	r3, [pc, #48]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b06e:	789b      	ldrb	r3, [r3, #2]
 801b070:	2bff      	cmp	r3, #255	; 0xff
 801b072:	d109      	bne.n	801b088 <Update_Usage_hour_eep+0x54>
			Appl_EEPParam.stm32.EEP_Usg_HourL = 0;
 801b074:	4b0a      	ldr	r3, [pc, #40]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b076:	2200      	movs	r2, #0
 801b078:	709a      	strb	r2, [r3, #2]
			Appl_EEPParam.stm32.EEP_Usg_HourH++;
 801b07a:	4b09      	ldr	r3, [pc, #36]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b07c:	78db      	ldrb	r3, [r3, #3]
 801b07e:	3301      	adds	r3, #1
 801b080:	b2da      	uxtb	r2, r3
 801b082:	4b07      	ldr	r3, [pc, #28]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b084:	70da      	strb	r2, [r3, #3]
		}
		else{
			Appl_EEPParam.stm32.EEP_Usg_HourL++;
		}
	}
}
 801b086:	e005      	b.n	801b094 <Update_Usage_hour_eep+0x60>
			Appl_EEPParam.stm32.EEP_Usg_HourL++;
 801b088:	4b05      	ldr	r3, [pc, #20]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b08a:	789b      	ldrb	r3, [r3, #2]
 801b08c:	3301      	adds	r3, #1
 801b08e:	b2da      	uxtb	r2, r3
 801b090:	4b03      	ldr	r3, [pc, #12]	; (801b0a0 <Update_Usage_hour_eep+0x6c>)
 801b092:	709a      	strb	r2, [r3, #2]
}
 801b094:	bf00      	nop
 801b096:	46bd      	mov	sp, r7
 801b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b09c:	4770      	bx	lr
 801b09e:	bf00      	nop
 801b0a0:	2000005c 	.word	0x2000005c

0801b0a4 <Update_RunningTime_eep>:

void Update_RunningTime_eep(void){
 801b0a4:	b580      	push	{r7, lr}
 801b0a6:	af00      	add	r7, sp, #0

	Appl_EEPParam.stm32.EEP_Run_Sec++;
 801b0a8:	4b1a      	ldr	r3, [pc, #104]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0aa:	7a9b      	ldrb	r3, [r3, #10]
 801b0ac:	3301      	adds	r3, #1
 801b0ae:	b2da      	uxtb	r2, r3
 801b0b0:	4b18      	ldr	r3, [pc, #96]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0b2:	729a      	strb	r2, [r3, #10]
	if(Appl_EEPParam.stm32.EEP_Run_Sec>=60){
 801b0b4:	4b17      	ldr	r3, [pc, #92]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0b6:	7a9b      	ldrb	r3, [r3, #10]
 801b0b8:	2b3b      	cmp	r3, #59	; 0x3b
 801b0ba:	d90a      	bls.n	801b0d2 <Update_RunningTime_eep+0x2e>
		Appl_EEPParam.stm32.EEP_Run_Sec = 0;
 801b0bc:	4b15      	ldr	r3, [pc, #84]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0be:	2200      	movs	r2, #0
 801b0c0:	729a      	strb	r2, [r3, #10]
		Appl_EEPParam.stm32.EEP_Run_Min++;
 801b0c2:	4b14      	ldr	r3, [pc, #80]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0c4:	7adb      	ldrb	r3, [r3, #11]
 801b0c6:	3301      	adds	r3, #1
 801b0c8:	b2da      	uxtb	r2, r3
 801b0ca:	4b12      	ldr	r3, [pc, #72]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0cc:	72da      	strb	r2, [r3, #11]
		WriteEEPData();
 801b0ce:	f000 f823 	bl	801b118 <WriteEEPData>
	}

	if(Appl_EEPParam.stm32.EEP_Run_Min >= 60){
 801b0d2:	4b10      	ldr	r3, [pc, #64]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0d4:	7adb      	ldrb	r3, [r3, #11]
 801b0d6:	2b3b      	cmp	r3, #59	; 0x3b
 801b0d8:	d91a      	bls.n	801b110 <Update_RunningTime_eep+0x6c>
		Appl_EEPParam.stm32.EEP_Run_Min = 0;
 801b0da:	4b0e      	ldr	r3, [pc, #56]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0dc:	2200      	movs	r2, #0
 801b0de:	72da      	strb	r2, [r3, #11]
		if(Appl_EEPParam.stm32.EEP_Run_Hour >= 0xFF){
 801b0e0:	4b0c      	ldr	r3, [pc, #48]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0e2:	7b1b      	ldrb	r3, [r3, #12]
 801b0e4:	2bff      	cmp	r3, #255	; 0xff
 801b0e6:	d103      	bne.n	801b0f0 <Update_RunningTime_eep+0x4c>
			Appl_EEPParam.stm32.EEP_Run_Hour = 0;
 801b0e8:	4b0a      	ldr	r3, [pc, #40]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0ea:	2200      	movs	r2, #0
 801b0ec:	731a      	strb	r2, [r3, #12]
			CaptureExtEEPSnapshot_SingleShot(STOP_RECORD_FLAG,PauseReasonEnum_1HrLogTimeSave);
			WriteEEPData();
			CaptureExtEEPSnapshot_SingleShot(START_RECORD_FLAG,0);
		}
	}
}
 801b0ee:	e00f      	b.n	801b110 <Update_RunningTime_eep+0x6c>
			Appl_EEPParam.stm32.EEP_Run_Hour++;
 801b0f0:	4b08      	ldr	r3, [pc, #32]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0f2:	7b1b      	ldrb	r3, [r3, #12]
 801b0f4:	3301      	adds	r3, #1
 801b0f6:	b2da      	uxtb	r2, r3
 801b0f8:	4b06      	ldr	r3, [pc, #24]	; (801b114 <Update_RunningTime_eep+0x70>)
 801b0fa:	731a      	strb	r2, [r3, #12]
			CaptureExtEEPSnapshot_SingleShot(STOP_RECORD_FLAG,PauseReasonEnum_1HrLogTimeSave);
 801b0fc:	2104      	movs	r1, #4
 801b0fe:	2000      	movs	r0, #0
 801b100:	f000 fa18 	bl	801b534 <CaptureExtEEPSnapshot_SingleShot>
			WriteEEPData();
 801b104:	f000 f808 	bl	801b118 <WriteEEPData>
			CaptureExtEEPSnapshot_SingleShot(START_RECORD_FLAG,0);
 801b108:	2100      	movs	r1, #0
 801b10a:	2001      	movs	r0, #1
 801b10c:	f000 fa12 	bl	801b534 <CaptureExtEEPSnapshot_SingleShot>
}
 801b110:	bf00      	nop
 801b112:	bd80      	pop	{r7, pc}
 801b114:	2000005c 	.word	0x2000005c

0801b118 <WriteEEPData>:

void WriteEEPData(void){
 801b118:	b5b0      	push	{r4, r5, r7, lr}
 801b11a:	b082      	sub	sp, #8
 801b11c:	af00      	add	r7, sp, #0

	MapStEEPtoVishwastruct();
 801b11e:	f000 f847 	bl	801b1b0 <MapStEEPtoVishwastruct>
	if(memcmp(&Appl_EEPParam_Mirror.stm32, &Appl_EEPParam.stm32, sizeof(Internal_EEP_DataStructure)) != 0){
 801b122:	2215      	movs	r2, #21
 801b124:	491c      	ldr	r1, [pc, #112]	; (801b198 <WriteEEPData+0x80>)
 801b126:	481d      	ldr	r0, [pc, #116]	; (801b19c <WriteEEPData+0x84>)
 801b128:	f005 fa50 	bl	80205cc <memcmp>
 801b12c:	4603      	mov	r3, r0
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d02d      	beq.n	801b18e <WriteEEPData+0x76>
		memcpy(&Appl_EEPParam_Mirror.stm32, &Appl_EEPParam.stm32, sizeof(Internal_EEP_DataStructure));
 801b132:	4a1a      	ldr	r2, [pc, #104]	; (801b19c <WriteEEPData+0x84>)
 801b134:	4b18      	ldr	r3, [pc, #96]	; (801b198 <WriteEEPData+0x80>)
 801b136:	4614      	mov	r4, r2
 801b138:	461d      	mov	r5, r3
 801b13a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b13c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b13e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b142:	6020      	str	r0, [r4, #0]
 801b144:	3404      	adds	r4, #4
 801b146:	7021      	strb	r1, [r4, #0]
		for(int i=0; i<NB_OF_VAR; i++){
 801b148:	2300      	movs	r3, #0
 801b14a:	607b      	str	r3, [r7, #4]
 801b14c:	e01c      	b.n	801b188 <WriteEEPData+0x70>
			Appl_enumStatusAPIEEP = EE_WriteVariable(VirtAddVarTab[i], VarDataTab[i]);
 801b14e:	4a14      	ldr	r2, [pc, #80]	; (801b1a0 <WriteEEPData+0x88>)
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801b156:	4913      	ldr	r1, [pc, #76]	; (801b1a4 <WriteEEPData+0x8c>)
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801b15e:	4619      	mov	r1, r3
 801b160:	4610      	mov	r0, r2
 801b162:	f000 fdc9 	bl	801bcf8 <EE_WriteVariable>
 801b166:	4603      	mov	r3, r0
 801b168:	b2da      	uxtb	r2, r3
 801b16a:	4b0f      	ldr	r3, [pc, #60]	; (801b1a8 <WriteEEPData+0x90>)
 801b16c:	701a      	strb	r2, [r3, #0]
			if(Appl_enumStatusAPIEEP != FLASH_COMPLETE)Appl_u16EEPError++;
 801b16e:	4b0e      	ldr	r3, [pc, #56]	; (801b1a8 <WriteEEPData+0x90>)
 801b170:	781b      	ldrb	r3, [r3, #0]
 801b172:	2b03      	cmp	r3, #3
 801b174:	d005      	beq.n	801b182 <WriteEEPData+0x6a>
 801b176:	4b0d      	ldr	r3, [pc, #52]	; (801b1ac <WriteEEPData+0x94>)
 801b178:	881b      	ldrh	r3, [r3, #0]
 801b17a:	3301      	adds	r3, #1
 801b17c:	b29a      	uxth	r2, r3
 801b17e:	4b0b      	ldr	r3, [pc, #44]	; (801b1ac <WriteEEPData+0x94>)
 801b180:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<NB_OF_VAR; i++){
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	3301      	adds	r3, #1
 801b186:	607b      	str	r3, [r7, #4]
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	2b14      	cmp	r3, #20
 801b18c:	dddf      	ble.n	801b14e <WriteEEPData+0x36>
		}
	}
}
 801b18e:	bf00      	nop
 801b190:	3708      	adds	r7, #8
 801b192:	46bd      	mov	sp, r7
 801b194:	bdb0      	pop	{r4, r5, r7, pc}
 801b196:	bf00      	nop
 801b198:	2000005c 	.word	0x2000005c
 801b19c:	200005ac 	.word	0x200005ac
 801b1a0:	200048a8 	.word	0x200048a8
 801b1a4:	2000487c 	.word	0x2000487c
 801b1a8:	20004878 	.word	0x20004878
 801b1ac:	200048a6 	.word	0x200048a6

0801b1b0 <MapStEEPtoVishwastruct>:

void MapStEEPtoVishwastruct(void){
 801b1b0:	b480      	push	{r7}
 801b1b2:	b085      	sub	sp, #20
 801b1b4:	af00      	add	r7, sp, #0
	uint16_t TempU16;

	for(int i=0; i<NB_OF_VAR ; i++){
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	60fb      	str	r3, [r7, #12]
 801b1ba:	e00a      	b.n	801b1d2 <MapStEEPtoVishwastruct+0x22>
		VirtAddVarTab[i] = i+1;
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	b29b      	uxth	r3, r3
 801b1c0:	3301      	adds	r3, #1
 801b1c2:	b299      	uxth	r1, r3
 801b1c4:	4a55      	ldr	r2, [pc, #340]	; (801b31c <MapStEEPtoVishwastruct+0x16c>)
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<NB_OF_VAR ; i++){
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	3301      	adds	r3, #1
 801b1d0:	60fb      	str	r3, [r7, #12]
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	2b14      	cmp	r3, #20
 801b1d6:	ddf1      	ble.n	801b1bc <MapStEEPtoVishwastruct+0xc>
	}

	Appl_EEPParam.stm32.EEP_UserSetTargetCurrent = (uint8_t)SM_ApplParam.UserSetCurrent;
 801b1d8:	4b51      	ldr	r3, [pc, #324]	; (801b320 <MapStEEPtoVishwastruct+0x170>)
 801b1da:	edd3 7a05 	vldr	s15, [r3, #20]
 801b1de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b1e2:	edc7 7a01 	vstr	s15, [r7, #4]
 801b1e6:	793b      	ldrb	r3, [r7, #4]
 801b1e8:	b2da      	uxtb	r2, r3
 801b1ea:	4b4e      	ldr	r3, [pc, #312]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b1ec:	711a      	strb	r2, [r3, #4]
	Appl_EEPParam.stm32.EEP_SetOverCurrentThreshold =(uint8_t) SM_ApplParam.OverCurrentThreshold;
 801b1ee:	4b4c      	ldr	r3, [pc, #304]	; (801b320 <MapStEEPtoVishwastruct+0x170>)
 801b1f0:	edd3 7a02 	vldr	s15, [r3, #8]
 801b1f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b1f8:	edc7 7a01 	vstr	s15, [r7, #4]
 801b1fc:	793b      	ldrb	r3, [r7, #4]
 801b1fe:	b2da      	uxtb	r2, r3
 801b200:	4b48      	ldr	r3, [pc, #288]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b202:	715a      	strb	r2, [r3, #5]
	TempU16 = (uint16_t)SM_ApplParam.OverVoltageThreshold;
 801b204:	4b46      	ldr	r3, [pc, #280]	; (801b320 <MapStEEPtoVishwastruct+0x170>)
 801b206:	edd3 7a00 	vldr	s15, [r3]
 801b20a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b20e:	ee17 3a90 	vmov	r3, s15
 801b212:	817b      	strh	r3, [r7, #10]
	Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdH = TempU16>>8;
 801b214:	897b      	ldrh	r3, [r7, #10]
 801b216:	0a1b      	lsrs	r3, r3, #8
 801b218:	b29b      	uxth	r3, r3
 801b21a:	b2da      	uxtb	r2, r3
 801b21c:	4b41      	ldr	r3, [pc, #260]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b21e:	719a      	strb	r2, [r3, #6]
	Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdL = TempU16 & 0xFF;
 801b220:	897b      	ldrh	r3, [r7, #10]
 801b222:	b2da      	uxtb	r2, r3
 801b224:	4b3f      	ldr	r3, [pc, #252]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b226:	71da      	strb	r2, [r3, #7]
	Appl_EEPParam.stm32.EEP_SetUnderVoltageThreshold = (uint8_t)SM_ApplParam.UnderVoltageThreshold;
 801b228:	4b3d      	ldr	r3, [pc, #244]	; (801b320 <MapStEEPtoVishwastruct+0x170>)
 801b22a:	edd3 7a01 	vldr	s15, [r3, #4]
 801b22e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b232:	edc7 7a01 	vstr	s15, [r7, #4]
 801b236:	793b      	ldrb	r3, [r7, #4]
 801b238:	b2da      	uxtb	r2, r3
 801b23a:	4b3a      	ldr	r3, [pc, #232]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b23c:	721a      	strb	r2, [r3, #8]

	VarDataTab[0] = Appl_EEPParam.stm32.EEP_Usg_Sec;
 801b23e:	4b39      	ldr	r3, [pc, #228]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b240:	781b      	ldrb	r3, [r3, #0]
 801b242:	b29a      	uxth	r2, r3
 801b244:	4b38      	ldr	r3, [pc, #224]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b246:	801a      	strh	r2, [r3, #0]
	VarDataTab[1] = Appl_EEPParam.stm32.EEP_Usg_Min;
 801b248:	4b36      	ldr	r3, [pc, #216]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b24a:	785b      	ldrb	r3, [r3, #1]
 801b24c:	b29a      	uxth	r2, r3
 801b24e:	4b36      	ldr	r3, [pc, #216]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b250:	805a      	strh	r2, [r3, #2]
	VarDataTab[2] = Appl_EEPParam.stm32.EEP_Usg_HourL;
 801b252:	4b34      	ldr	r3, [pc, #208]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b254:	789b      	ldrb	r3, [r3, #2]
 801b256:	b29a      	uxth	r2, r3
 801b258:	4b33      	ldr	r3, [pc, #204]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b25a:	809a      	strh	r2, [r3, #4]
	VarDataTab[3] = Appl_EEPParam.stm32.EEP_Usg_HourH;
 801b25c:	4b31      	ldr	r3, [pc, #196]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b25e:	78db      	ldrb	r3, [r3, #3]
 801b260:	b29a      	uxth	r2, r3
 801b262:	4b31      	ldr	r3, [pc, #196]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b264:	80da      	strh	r2, [r3, #6]

	VarDataTab[4] = Appl_EEPParam.stm32.EEP_UserSetTargetCurrent;
 801b266:	4b2f      	ldr	r3, [pc, #188]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b268:	791b      	ldrb	r3, [r3, #4]
 801b26a:	b29a      	uxth	r2, r3
 801b26c:	4b2e      	ldr	r3, [pc, #184]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b26e:	811a      	strh	r2, [r3, #8]
	VarDataTab[5] = Appl_EEPParam.stm32.EEP_SetOverCurrentThreshold ;
 801b270:	4b2c      	ldr	r3, [pc, #176]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b272:	795b      	ldrb	r3, [r3, #5]
 801b274:	b29a      	uxth	r2, r3
 801b276:	4b2c      	ldr	r3, [pc, #176]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b278:	815a      	strh	r2, [r3, #10]

	VarDataTab[6] = Appl_EEPParam.stm32.EEP_Run_Sec;
 801b27a:	4b2a      	ldr	r3, [pc, #168]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b27c:	7a9b      	ldrb	r3, [r3, #10]
 801b27e:	b29a      	uxth	r2, r3
 801b280:	4b29      	ldr	r3, [pc, #164]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b282:	819a      	strh	r2, [r3, #12]
	VarDataTab[7] = Appl_EEPParam.stm32.EEP_Run_Min;
 801b284:	4b27      	ldr	r3, [pc, #156]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b286:	7adb      	ldrb	r3, [r3, #11]
 801b288:	b29a      	uxth	r2, r3
 801b28a:	4b27      	ldr	r3, [pc, #156]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b28c:	81da      	strh	r2, [r3, #14]
	VarDataTab[8] = Appl_EEPParam.stm32.EEP_Run_Hour;
 801b28e:	4b25      	ldr	r3, [pc, #148]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b290:	7b1b      	ldrb	r3, [r3, #12]
 801b292:	b29a      	uxth	r2, r3
 801b294:	4b24      	ldr	r3, [pc, #144]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b296:	821a      	strh	r2, [r3, #16]

	VarDataTab[9] = Appl_EEPParam.stm32.EEP_PowerFailedLastTime;
 801b298:	4b22      	ldr	r3, [pc, #136]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b29a:	7a5b      	ldrb	r3, [r3, #9]
 801b29c:	b29a      	uxth	r2, r3
 801b29e:	4b22      	ldr	r3, [pc, #136]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b2a0:	825a      	strh	r2, [r3, #18]
	VarDataTab[10] = Appl_EEPParam.stm32.EEP_TimerSetHours;
 801b2a2:	4b20      	ldr	r3, [pc, #128]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b2a4:	7b5b      	ldrb	r3, [r3, #13]
 801b2a6:	b29a      	uxth	r2, r3
 801b2a8:	4b1f      	ldr	r3, [pc, #124]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b2aa:	829a      	strh	r2, [r3, #20]
	VarDataTab[11] = Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdH;
 801b2ac:	4b1d      	ldr	r3, [pc, #116]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b2ae:	799b      	ldrb	r3, [r3, #6]
 801b2b0:	b29a      	uxth	r2, r3
 801b2b2:	4b1d      	ldr	r3, [pc, #116]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b2b4:	82da      	strh	r2, [r3, #22]

	VarDataTab[12] = Appl_EEPParam.stm32.EEP_SetUnderVoltageThreshold;
 801b2b6:	4b1b      	ldr	r3, [pc, #108]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b2b8:	7a1b      	ldrb	r3, [r3, #8]
 801b2ba:	b29a      	uxth	r2, r3
 801b2bc:	4b1a      	ldr	r3, [pc, #104]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b2be:	831a      	strh	r2, [r3, #24]

	VarDataTab[13] = Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH;
 801b2c0:	4b18      	ldr	r3, [pc, #96]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b2c2:	7c1b      	ldrb	r3, [r3, #16]
 801b2c4:	b29a      	uxth	r2, r3
 801b2c6:	4b18      	ldr	r3, [pc, #96]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b2c8:	835a      	strh	r2, [r3, #26]
	VarDataTab[14] = Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL;
 801b2ca:	4b16      	ldr	r3, [pc, #88]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b2cc:	7c5b      	ldrb	r3, [r3, #17]
 801b2ce:	b29a      	uxth	r2, r3
 801b2d0:	4b15      	ldr	r3, [pc, #84]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b2d2:	839a      	strh	r2, [r3, #28]
	VarDataTab[15] = Appl_EEPParam.stm32.ExtEepAddress;
 801b2d4:	4b13      	ldr	r3, [pc, #76]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b2d6:	7c9b      	ldrb	r3, [r3, #18]
 801b2d8:	b29a      	uxth	r2, r3
 801b2da:	4b13      	ldr	r3, [pc, #76]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b2dc:	83da      	strh	r2, [r3, #30]
	VarDataTab[16] = Appl_EEPParam.stm32.ExtEepPage;
 801b2de:	4b11      	ldr	r3, [pc, #68]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b2e0:	7cdb      	ldrb	r3, [r3, #19]
 801b2e2:	b29a      	uxth	r2, r3
 801b2e4:	4b10      	ldr	r3, [pc, #64]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b2e6:	841a      	strh	r2, [r3, #32]
	VarDataTab[17] = Appl_EEPParam.stm32.ExtEepOffset;
 801b2e8:	4b0e      	ldr	r3, [pc, #56]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b2ea:	7d1b      	ldrb	r3, [r3, #20]
 801b2ec:	b29a      	uxth	r2, r3
 801b2ee:	4b0e      	ldr	r3, [pc, #56]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b2f0:	845a      	strh	r2, [r3, #34]	; 0x22
	VarDataTab[18] = Appl_EEPParam.stm32.EEP_CustomerNumber;
 801b2f2:	4b0c      	ldr	r3, [pc, #48]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b2f4:	7b9b      	ldrb	r3, [r3, #14]
 801b2f6:	b29a      	uxth	r2, r3
 801b2f8:	4b0b      	ldr	r3, [pc, #44]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b2fa:	849a      	strh	r2, [r3, #36]	; 0x24
	VarDataTab[19] = (uint8_t)Appl_EEPParam.stm32.EEP_RejuvenationCycleID;
 801b2fc:	4b09      	ldr	r3, [pc, #36]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b2fe:	7bdb      	ldrb	r3, [r3, #15]
 801b300:	b29a      	uxth	r2, r3
 801b302:	4b09      	ldr	r3, [pc, #36]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b304:	84da      	strh	r2, [r3, #38]	; 0x26

	VarDataTab[20] = (uint8_t)Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdL;
 801b306:	4b07      	ldr	r3, [pc, #28]	; (801b324 <MapStEEPtoVishwastruct+0x174>)
 801b308:	79db      	ldrb	r3, [r3, #7]
 801b30a:	b29a      	uxth	r2, r3
 801b30c:	4b06      	ldr	r3, [pc, #24]	; (801b328 <MapStEEPtoVishwastruct+0x178>)
 801b30e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 801b310:	bf00      	nop
 801b312:	3714      	adds	r7, #20
 801b314:	46bd      	mov	sp, r7
 801b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b31a:	4770      	bx	lr
 801b31c:	200048a8 	.word	0x200048a8
 801b320:	20004974 	.word	0x20004974
 801b324:	2000005c 	.word	0x2000005c
 801b328:	2000487c 	.word	0x2000487c

0801b32c <ReadEEPData>:

void ReadEEPData(void){
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b082      	sub	sp, #8
 801b330:	af00      	add	r7, sp, #0
	/*Vishwesh:
	 * Update EEP Data from STM32 Emulated Flash
	 */
	for(int i=0; i<NB_OF_VAR ; i++){
 801b332:	2300      	movs	r3, #0
 801b334:	607b      	str	r3, [r7, #4]
 801b336:	e00a      	b.n	801b34e <ReadEEPData+0x22>
		VirtAddVarTab[i] = i+1;
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	b29b      	uxth	r3, r3
 801b33c:	3301      	adds	r3, #1
 801b33e:	b299      	uxth	r1, r3
 801b340:	4a1d      	ldr	r2, [pc, #116]	; (801b3b8 <ReadEEPData+0x8c>)
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<NB_OF_VAR ; i++){
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	3301      	adds	r3, #1
 801b34c:	607b      	str	r3, [r7, #4]
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	2b14      	cmp	r3, #20
 801b352:	ddf1      	ble.n	801b338 <ReadEEPData+0xc>
	}

	if(memcmp(&Appl_EEPParam_Mirror.stm32, &Appl_EEPParam.stm32, sizeof(Appl_EEPParam_Mirror.stm32)) != 0){
 801b354:	2215      	movs	r2, #21
 801b356:	4919      	ldr	r1, [pc, #100]	; (801b3bc <ReadEEPData+0x90>)
 801b358:	4819      	ldr	r0, [pc, #100]	; (801b3c0 <ReadEEPData+0x94>)
 801b35a:	f005 f937 	bl	80205cc <memcmp>
 801b35e:	4603      	mov	r3, r0
 801b360:	2b00      	cmp	r3, #0
 801b362:	d024      	beq.n	801b3ae <ReadEEPData+0x82>
		for(int i=0; i<NB_OF_VAR; i++){
 801b364:	2300      	movs	r3, #0
 801b366:	603b      	str	r3, [r7, #0]
 801b368:	e01c      	b.n	801b3a4 <ReadEEPData+0x78>
			Appl_enumStatusAPIEEP = EE_ReadVariable(VirtAddVarTab[i], &VarDataTab[i]);
 801b36a:	4a13      	ldr	r2, [pc, #76]	; (801b3b8 <ReadEEPData+0x8c>)
 801b36c:	683b      	ldr	r3, [r7, #0]
 801b36e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	005b      	lsls	r3, r3, #1
 801b376:	4913      	ldr	r1, [pc, #76]	; (801b3c4 <ReadEEPData+0x98>)
 801b378:	440b      	add	r3, r1
 801b37a:	4619      	mov	r1, r3
 801b37c:	4610      	mov	r0, r2
 801b37e:	f000 fc71 	bl	801bc64 <EE_ReadVariable>
 801b382:	4603      	mov	r3, r0
 801b384:	b2da      	uxtb	r2, r3
 801b386:	4b10      	ldr	r3, [pc, #64]	; (801b3c8 <ReadEEPData+0x9c>)
 801b388:	701a      	strb	r2, [r3, #0]
			if(Appl_enumStatusAPIEEP != 0)Appl_u16EEPError++;
 801b38a:	4b0f      	ldr	r3, [pc, #60]	; (801b3c8 <ReadEEPData+0x9c>)
 801b38c:	781b      	ldrb	r3, [r3, #0]
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d005      	beq.n	801b39e <ReadEEPData+0x72>
 801b392:	4b0e      	ldr	r3, [pc, #56]	; (801b3cc <ReadEEPData+0xa0>)
 801b394:	881b      	ldrh	r3, [r3, #0]
 801b396:	3301      	adds	r3, #1
 801b398:	b29a      	uxth	r2, r3
 801b39a:	4b0c      	ldr	r3, [pc, #48]	; (801b3cc <ReadEEPData+0xa0>)
 801b39c:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<NB_OF_VAR; i++){
 801b39e:	683b      	ldr	r3, [r7, #0]
 801b3a0:	3301      	adds	r3, #1
 801b3a2:	603b      	str	r3, [r7, #0]
 801b3a4:	683b      	ldr	r3, [r7, #0]
 801b3a6:	2b14      	cmp	r3, #20
 801b3a8:	dddf      	ble.n	801b36a <ReadEEPData+0x3e>
		}
		MapVishwastructtoEEP();
 801b3aa:	f000 f811 	bl	801b3d0 <MapVishwastructtoEEP>
	}

}
 801b3ae:	bf00      	nop
 801b3b0:	3708      	adds	r7, #8
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	bd80      	pop	{r7, pc}
 801b3b6:	bf00      	nop
 801b3b8:	200048a8 	.word	0x200048a8
 801b3bc:	2000005c 	.word	0x2000005c
 801b3c0:	200005ac 	.word	0x200005ac
 801b3c4:	2000487c 	.word	0x2000487c
 801b3c8:	20004878 	.word	0x20004878
 801b3cc:	200048a6 	.word	0x200048a6

0801b3d0 <MapVishwastructtoEEP>:


void MapVishwastructtoEEP(void){
 801b3d0:	b4b0      	push	{r4, r5, r7}
 801b3d2:	b083      	sub	sp, #12
 801b3d4:	af00      	add	r7, sp, #0

	uint16_t TempU16;
	Appl_EEPParam.stm32.EEP_Usg_Sec = VarDataTab[0];
 801b3d6:	4b53      	ldr	r3, [pc, #332]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b3d8:	881b      	ldrh	r3, [r3, #0]
 801b3da:	b2da      	uxtb	r2, r3
 801b3dc:	4b52      	ldr	r3, [pc, #328]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b3de:	701a      	strb	r2, [r3, #0]
	Appl_EEPParam.stm32.EEP_Usg_Min = VarDataTab[1];
 801b3e0:	4b50      	ldr	r3, [pc, #320]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b3e2:	885b      	ldrh	r3, [r3, #2]
 801b3e4:	b2da      	uxtb	r2, r3
 801b3e6:	4b50      	ldr	r3, [pc, #320]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b3e8:	705a      	strb	r2, [r3, #1]
	Appl_EEPParam.stm32.EEP_Usg_HourL = VarDataTab[2];
 801b3ea:	4b4e      	ldr	r3, [pc, #312]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b3ec:	889b      	ldrh	r3, [r3, #4]
 801b3ee:	b2da      	uxtb	r2, r3
 801b3f0:	4b4d      	ldr	r3, [pc, #308]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b3f2:	709a      	strb	r2, [r3, #2]
	Appl_EEPParam.stm32.EEP_Usg_HourH = VarDataTab[3];
 801b3f4:	4b4b      	ldr	r3, [pc, #300]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b3f6:	88db      	ldrh	r3, [r3, #6]
 801b3f8:	b2da      	uxtb	r2, r3
 801b3fa:	4b4b      	ldr	r3, [pc, #300]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b3fc:	70da      	strb	r2, [r3, #3]

	Appl_EEPParam.stm32.EEP_UserSetTargetCurrent = VarDataTab[4];
 801b3fe:	4b49      	ldr	r3, [pc, #292]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b400:	891b      	ldrh	r3, [r3, #8]
 801b402:	b2da      	uxtb	r2, r3
 801b404:	4b48      	ldr	r3, [pc, #288]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b406:	711a      	strb	r2, [r3, #4]
	Appl_EEPParam.stm32.EEP_SetOverCurrentThreshold = VarDataTab[5];
 801b408:	4b46      	ldr	r3, [pc, #280]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b40a:	895b      	ldrh	r3, [r3, #10]
 801b40c:	b2da      	uxtb	r2, r3
 801b40e:	4b46      	ldr	r3, [pc, #280]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b410:	715a      	strb	r2, [r3, #5]

	Appl_EEPParam.stm32.EEP_Run_Sec = VarDataTab[6];
 801b412:	4b44      	ldr	r3, [pc, #272]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b414:	899b      	ldrh	r3, [r3, #12]
 801b416:	b2da      	uxtb	r2, r3
 801b418:	4b43      	ldr	r3, [pc, #268]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b41a:	729a      	strb	r2, [r3, #10]
	Appl_EEPParam.stm32.EEP_Run_Min = VarDataTab[7];
 801b41c:	4b41      	ldr	r3, [pc, #260]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b41e:	89db      	ldrh	r3, [r3, #14]
 801b420:	b2da      	uxtb	r2, r3
 801b422:	4b41      	ldr	r3, [pc, #260]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b424:	72da      	strb	r2, [r3, #11]
	Appl_EEPParam.stm32.EEP_Run_Hour = VarDataTab[8];
 801b426:	4b3f      	ldr	r3, [pc, #252]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b428:	8a1b      	ldrh	r3, [r3, #16]
 801b42a:	b2da      	uxtb	r2, r3
 801b42c:	4b3e      	ldr	r3, [pc, #248]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b42e:	731a      	strb	r2, [r3, #12]

	Appl_EEPParam.stm32.EEP_PowerFailedLastTime = VarDataTab[9];
 801b430:	4b3c      	ldr	r3, [pc, #240]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b432:	8a5b      	ldrh	r3, [r3, #18]
 801b434:	b2da      	uxtb	r2, r3
 801b436:	4b3c      	ldr	r3, [pc, #240]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b438:	725a      	strb	r2, [r3, #9]
	Appl_EEPParam.stm32.EEP_TimerSetHours = VarDataTab[10];
 801b43a:	4b3a      	ldr	r3, [pc, #232]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b43c:	8a9b      	ldrh	r3, [r3, #20]
 801b43e:	b2da      	uxtb	r2, r3
 801b440:	4b39      	ldr	r3, [pc, #228]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b442:	735a      	strb	r2, [r3, #13]

	Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdH = VarDataTab[11];
 801b444:	4b37      	ldr	r3, [pc, #220]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b446:	8adb      	ldrh	r3, [r3, #22]
 801b448:	b2da      	uxtb	r2, r3
 801b44a:	4b37      	ldr	r3, [pc, #220]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b44c:	719a      	strb	r2, [r3, #6]
	Appl_EEPParam.stm32.EEP_SetUnderVoltageThreshold = VarDataTab[12];
 801b44e:	4b35      	ldr	r3, [pc, #212]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b450:	8b1b      	ldrh	r3, [r3, #24]
 801b452:	b2da      	uxtb	r2, r3
 801b454:	4b34      	ldr	r3, [pc, #208]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b456:	721a      	strb	r2, [r3, #8]

	Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH = VarDataTab[13];
 801b458:	4b32      	ldr	r3, [pc, #200]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b45a:	8b5b      	ldrh	r3, [r3, #26]
 801b45c:	b2da      	uxtb	r2, r3
 801b45e:	4b32      	ldr	r3, [pc, #200]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b460:	741a      	strb	r2, [r3, #16]
	Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL = VarDataTab[14];
 801b462:	4b30      	ldr	r3, [pc, #192]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b464:	8b9b      	ldrh	r3, [r3, #28]
 801b466:	b2da      	uxtb	r2, r3
 801b468:	4b2f      	ldr	r3, [pc, #188]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b46a:	745a      	strb	r2, [r3, #17]
	Appl_EEPParam.stm32.ExtEepAddress = VarDataTab[15];
 801b46c:	4b2d      	ldr	r3, [pc, #180]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b46e:	8bdb      	ldrh	r3, [r3, #30]
 801b470:	b2da      	uxtb	r2, r3
 801b472:	4b2d      	ldr	r3, [pc, #180]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b474:	749a      	strb	r2, [r3, #18]
	Appl_EEPParam.stm32.ExtEepPage = VarDataTab[16];
 801b476:	4b2b      	ldr	r3, [pc, #172]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b478:	8c1b      	ldrh	r3, [r3, #32]
 801b47a:	b2da      	uxtb	r2, r3
 801b47c:	4b2a      	ldr	r3, [pc, #168]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b47e:	74da      	strb	r2, [r3, #19]
	Appl_EEPParam.stm32.ExtEepOffset  = VarDataTab[17];
 801b480:	4b28      	ldr	r3, [pc, #160]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b482:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b484:	b2da      	uxtb	r2, r3
 801b486:	4b28      	ldr	r3, [pc, #160]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b488:	751a      	strb	r2, [r3, #20]

	Appl_EEPParam.stm32.EEP_CustomerNumber = VarDataTab[18];
 801b48a:	4b26      	ldr	r3, [pc, #152]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b48c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b48e:	b2da      	uxtb	r2, r3
 801b490:	4b25      	ldr	r3, [pc, #148]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b492:	739a      	strb	r2, [r3, #14]
	Appl_EEPParam.stm32.EEP_RejuvenationCycleID = VarDataTab[19];
 801b494:	4b23      	ldr	r3, [pc, #140]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b498:	b2da      	uxtb	r2, r3
 801b49a:	4b23      	ldr	r3, [pc, #140]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b49c:	73da      	strb	r2, [r3, #15]

	Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdL = VarDataTab[20];
 801b49e:	4b21      	ldr	r3, [pc, #132]	; (801b524 <MapVishwastructtoEEP+0x154>)
 801b4a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b4a2:	b2da      	uxtb	r2, r3
 801b4a4:	4b20      	ldr	r3, [pc, #128]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b4a6:	71da      	strb	r2, [r3, #7]

	SM_ApplParam.UserSetCurrent = (float)Appl_EEPParam.stm32.EEP_UserSetTargetCurrent;
 801b4a8:	4b1f      	ldr	r3, [pc, #124]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b4aa:	791b      	ldrb	r3, [r3, #4]
 801b4ac:	ee07 3a90 	vmov	s15, r3
 801b4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b4b4:	4b1d      	ldr	r3, [pc, #116]	; (801b52c <MapVishwastructtoEEP+0x15c>)
 801b4b6:	edc3 7a05 	vstr	s15, [r3, #20]
	SM_ApplParam.OverCurrentThreshold = (float)Appl_EEPParam.stm32.EEP_SetOverCurrentThreshold;
 801b4ba:	4b1b      	ldr	r3, [pc, #108]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b4bc:	795b      	ldrb	r3, [r3, #5]
 801b4be:	ee07 3a90 	vmov	s15, r3
 801b4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b4c6:	4b19      	ldr	r3, [pc, #100]	; (801b52c <MapVishwastructtoEEP+0x15c>)
 801b4c8:	edc3 7a02 	vstr	s15, [r3, #8]
	TempU16 = (((uint16_t)Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdH<<8) | Appl_EEPParam.stm32.EEP_SetOverVoltageThresholdL);
 801b4cc:	4b16      	ldr	r3, [pc, #88]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b4ce:	799b      	ldrb	r3, [r3, #6]
 801b4d0:	021b      	lsls	r3, r3, #8
 801b4d2:	b21a      	sxth	r2, r3
 801b4d4:	4b14      	ldr	r3, [pc, #80]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b4d6:	79db      	ldrb	r3, [r3, #7]
 801b4d8:	b21b      	sxth	r3, r3
 801b4da:	4313      	orrs	r3, r2
 801b4dc:	b21b      	sxth	r3, r3
 801b4de:	80fb      	strh	r3, [r7, #6]
	SM_ApplParam.OverVoltageThreshold = (float)TempU16;
 801b4e0:	88fb      	ldrh	r3, [r7, #6]
 801b4e2:	ee07 3a90 	vmov	s15, r3
 801b4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b4ea:	4b10      	ldr	r3, [pc, #64]	; (801b52c <MapVishwastructtoEEP+0x15c>)
 801b4ec:	edc3 7a00 	vstr	s15, [r3]
	SM_ApplParam.UnderVoltageThreshold = (float)Appl_EEPParam.stm32.EEP_SetUnderVoltageThreshold;
 801b4f0:	4b0d      	ldr	r3, [pc, #52]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b4f2:	7a1b      	ldrb	r3, [r3, #8]
 801b4f4:	ee07 3a90 	vmov	s15, r3
 801b4f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b4fc:	4b0b      	ldr	r3, [pc, #44]	; (801b52c <MapVishwastructtoEEP+0x15c>)
 801b4fe:	edc3 7a01 	vstr	s15, [r3, #4]
	memcpy(&Appl_EEPParam_Mirror.stm32, &Appl_EEPParam.stm32, sizeof(Appl_EEPParam_Mirror.stm32));
 801b502:	4a0b      	ldr	r2, [pc, #44]	; (801b530 <MapVishwastructtoEEP+0x160>)
 801b504:	4b08      	ldr	r3, [pc, #32]	; (801b528 <MapVishwastructtoEEP+0x158>)
 801b506:	4614      	mov	r4, r2
 801b508:	461d      	mov	r5, r3
 801b50a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b50c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b50e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b512:	6020      	str	r0, [r4, #0]
 801b514:	3404      	adds	r4, #4
 801b516:	7021      	strb	r1, [r4, #0]
}
 801b518:	bf00      	nop
 801b51a:	370c      	adds	r7, #12
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bcb0      	pop	{r4, r5, r7}
 801b520:	4770      	bx	lr
 801b522:	bf00      	nop
 801b524:	2000487c 	.word	0x2000487c
 801b528:	2000005c 	.word	0x2000005c
 801b52c:	20004974 	.word	0x20004974
 801b530:	200005ac 	.word	0x200005ac

0801b534 <CaptureExtEEPSnapshot_SingleShot>:




void CaptureExtEEPSnapshot_SingleShot(uint8_t start_stop_Flag, PauseReason reason){
 801b534:	b580      	push	{r7, lr}
 801b536:	b086      	sub	sp, #24
 801b538:	af02      	add	r7, sp, #8
 801b53a:	4603      	mov	r3, r0
 801b53c:	460a      	mov	r2, r1
 801b53e:	71fb      	strb	r3, [r7, #7]
 801b540:	4613      	mov	r3, r2
 801b542:	71bb      	strb	r3, [r7, #6]
	uint16_t TempU16;
	TempU16 = (uint16_t)SM_ApplParam.Realtime_floatingVoltage;
 801b544:	4b6b      	ldr	r3, [pc, #428]	; (801b6f4 <CaptureExtEEPSnapshot_SingleShot+0x1c0>)
 801b546:	edd3 7a06 	vldr	s15, [r3, #24]
 801b54a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b54e:	ee17 3a90 	vmov	r3, s15
 801b552:	81fb      	strh	r3, [r7, #14]

	if(start_stop_Flag == START_RECORD_FLAG){
 801b554:	79fb      	ldrb	r3, [r7, #7]
 801b556:	2b01      	cmp	r3, #1
 801b558:	d151      	bne.n	801b5fe <CaptureExtEEPSnapshot_SingleShot+0xca>
		Appl_EEPParam.stm32.ExtEepAddress = 0xA0;
 801b55a:	4b67      	ldr	r3, [pc, #412]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b55c:	22a0      	movs	r2, #160	; 0xa0
 801b55e:	749a      	strb	r2, [r3, #18]
		Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL++;
 801b560:	4b65      	ldr	r3, [pc, #404]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b562:	7c5b      	ldrb	r3, [r3, #17]
 801b564:	3301      	adds	r3, #1
 801b566:	b2da      	uxtb	r2, r3
 801b568:	4b63      	ldr	r3, [pc, #396]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b56a:	745a      	strb	r2, [r3, #17]
		if(Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL == 0xFF){
 801b56c:	4b62      	ldr	r3, [pc, #392]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b56e:	7c5b      	ldrb	r3, [r3, #17]
 801b570:	2bff      	cmp	r3, #255	; 0xff
 801b572:	d108      	bne.n	801b586 <CaptureExtEEPSnapshot_SingleShot+0x52>
			Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL = 0;
 801b574:	4b60      	ldr	r3, [pc, #384]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b576:	2200      	movs	r2, #0
 801b578:	745a      	strb	r2, [r3, #17]
			Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH++;
 801b57a:	4b5f      	ldr	r3, [pc, #380]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b57c:	7c1b      	ldrb	r3, [r3, #16]
 801b57e:	3301      	adds	r3, #1
 801b580:	b2da      	uxtb	r2, r3
 801b582:	4b5d      	ldr	r3, [pc, #372]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b584:	741a      	strb	r2, [r3, #16]
		}


		Appl_EEPParam.transfer.extRecord.ExtEEP_SlNumber_HighByte = Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH;
 801b586:	4b5c      	ldr	r3, [pc, #368]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b588:	7c1a      	ldrb	r2, [r3, #16]
 801b58a:	4b5b      	ldr	r3, [pc, #364]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b58c:	755a      	strb	r2, [r3, #21]
		Appl_EEPParam.transfer.extRecord.ExtEEP_SlNumber_LowByte = Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL;
 801b58e:	4b5a      	ldr	r3, [pc, #360]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b590:	7c5a      	ldrb	r2, [r3, #17]
 801b592:	4b59      	ldr	r3, [pc, #356]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b594:	759a      	strb	r2, [r3, #22]
		Appl_EEPParam.transfer.extRecord.ExtEEP_CustIDNum = Appl_EEPParam.stm32.EEP_CustomerNumber;
 801b596:	4b58      	ldr	r3, [pc, #352]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b598:	7b9a      	ldrb	r2, [r3, #14]
 801b59a:	4b57      	ldr	r3, [pc, #348]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b59c:	75da      	strb	r2, [r3, #23]
		Appl_EEPParam.transfer.extRecord.ExtEEP_RejCycleID = Appl_EEPParam.stm32.EEP_RejuvenationCycleID;
 801b59e:	4b56      	ldr	r3, [pc, #344]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5a0:	7bda      	ldrb	r2, [r3, #15]
 801b5a2:	4b55      	ldr	r3, [pc, #340]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5a4:	761a      	strb	r2, [r3, #24]
		Appl_EEPParam.transfer.extRecord.ExtEEP_StartTime_H = Appl_EEPParam.stm32.EEP_Run_Hour;
 801b5a6:	4b54      	ldr	r3, [pc, #336]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5a8:	7b1a      	ldrb	r2, [r3, #12]
 801b5aa:	4b53      	ldr	r3, [pc, #332]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5ac:	765a      	strb	r2, [r3, #25]
		Appl_EEPParam.transfer.extRecord.ExtEEP_StartTime_M = Appl_EEPParam.stm32.EEP_Run_Min;
 801b5ae:	4b52      	ldr	r3, [pc, #328]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5b0:	7ada      	ldrb	r2, [r3, #11]
 801b5b2:	4b51      	ldr	r3, [pc, #324]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5b4:	769a      	strb	r2, [r3, #26]
#if ALACRITAS_UNIT_NUMBER == 1
		Appl_EEPParam.transfer.extRecord.ExtEEP_DeviceId = 0x1;
 801b5b6:	4b50      	ldr	r3, [pc, #320]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5b8:	2201      	movs	r2, #1
 801b5ba:	76da      	strb	r2, [r3, #27]
#elif ALACRITAS_UNIT_NUMBER == 2
		Appl_EEPParam.transfer.extRecord.ExtEEP_DeviceId = 0x2;
#elif ALACRITAS_UNIT_NUMBER == 3
		Appl_EEPParam.transfer.extRecord.ExtEEP_DeviceId = 0x3;
#endif
		Appl_EEPParam.transfer.extRecord.ExtEEP_StopTime_H = 0;
 801b5bc:	4b4e      	ldr	r3, [pc, #312]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5be:	2200      	movs	r2, #0
 801b5c0:	771a      	strb	r2, [r3, #28]
		Appl_EEPParam.transfer.extRecord.ExtEEP_StopTime_M = 0;
 801b5c2:	4b4d      	ldr	r3, [pc, #308]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5c4:	2200      	movs	r2, #0
 801b5c6:	775a      	strb	r2, [r3, #29]
		Appl_EEPParam.transfer.extRecord.ExtEEP_StopReason = 0;
 801b5c8:	4b4b      	ldr	r3, [pc, #300]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	77da      	strb	r2, [r3, #31]
		Appl_EEPParam.transfer.extRecord.ExtEEP_BatteryVoltageH = TempU16>>8;
 801b5ce:	89fb      	ldrh	r3, [r7, #14]
 801b5d0:	0a1b      	lsrs	r3, r3, #8
 801b5d2:	b29b      	uxth	r3, r3
 801b5d4:	b2da      	uxtb	r2, r3
 801b5d6:	4b48      	ldr	r3, [pc, #288]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		Appl_EEPParam.transfer.extRecord.ExtEEP_CurrentConsumption = 0;
 801b5dc:	4b46      	ldr	r3, [pc, #280]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5de:	2200      	movs	r2, #0
 801b5e0:	f883 2020 	strb.w	r2, [r3, #32]
		Appl_EEPParam.transfer.extRecord.ExtEEP_KWh = 0;
 801b5e4:	4b44      	ldr	r3, [pc, #272]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5e6:	2200      	movs	r2, #0
 801b5e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		Appl_EEPParam.transfer.extRecord.ExtEEP_BatteryVoltageL = TempU16 & 0xFF;
 801b5ec:	89fb      	ldrh	r3, [r7, #14]
 801b5ee:	b2da      	uxtb	r2, r3
 801b5f0:	4b41      	ldr	r3, [pc, #260]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		Appl_EEPParam.transfer.extRecord.dummy_L = 0;
 801b5f6:	4b40      	ldr	r3, [pc, #256]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b5f8:	2200      	movs	r2, #0
 801b5fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	if(start_stop_Flag == STOP_RECORD_FLAG){
 801b5fe:	79fb      	ldrb	r3, [r7, #7]
 801b600:	2b00      	cmp	r3, #0
 801b602:	d172      	bne.n	801b6ea <CaptureExtEEPSnapshot_SingleShot+0x1b6>
		Appl_EEPParam.transfer.extRecord.ExtEEP_BatteryVoltageH = TempU16>>8;
 801b604:	89fb      	ldrh	r3, [r7, #14]
 801b606:	0a1b      	lsrs	r3, r3, #8
 801b608:	b29b      	uxth	r3, r3
 801b60a:	b2da      	uxtb	r2, r3
 801b60c:	4b3a      	ldr	r3, [pc, #232]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b60e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		Appl_EEPParam.transfer.extRecord.ExtEEP_BatteryVoltageL = TempU16 & 0xFF;
 801b612:	89fb      	ldrh	r3, [r7, #14]
 801b614:	b2da      	uxtb	r2, r3
 801b616:	4b38      	ldr	r3, [pc, #224]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b618:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		Appl_EEPParam.transfer.extRecord.ExtEEP_CurrentConsumption = SM_ApplParam.RealtimeCurrentFiltered;
 801b61c:	4b35      	ldr	r3, [pc, #212]	; (801b6f4 <CaptureExtEEPSnapshot_SingleShot+0x1c0>)
 801b61e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801b622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b626:	edc7 7a00 	vstr	s15, [r7]
 801b62a:	683b      	ldr	r3, [r7, #0]
 801b62c:	b2da      	uxtb	r2, r3
 801b62e:	4b32      	ldr	r3, [pc, #200]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b630:	f883 2020 	strb.w	r2, [r3, #32]
		Appl_EEPParam.transfer.extRecord.ExtEEP_StopTime_H = Appl_EEPParam.stm32.EEP_Run_Hour;
 801b634:	4b30      	ldr	r3, [pc, #192]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b636:	7b1a      	ldrb	r2, [r3, #12]
 801b638:	4b2f      	ldr	r3, [pc, #188]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b63a:	771a      	strb	r2, [r3, #28]
		Appl_EEPParam.transfer.extRecord.ExtEEP_StopTime_M = Appl_EEPParam.stm32.EEP_Run_Min;
 801b63c:	4b2e      	ldr	r3, [pc, #184]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b63e:	7ada      	ldrb	r2, [r3, #11]
 801b640:	4b2d      	ldr	r3, [pc, #180]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b642:	775a      	strb	r2, [r3, #29]
		Appl_EEPParam.transfer.extRecord.ExtEEP_StopReason = reason;
 801b644:	4a2c      	ldr	r2, [pc, #176]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b646:	79bb      	ldrb	r3, [r7, #6]
 801b648:	77d3      	strb	r3, [r2, #31]
		if(Appl_diagActiveFault.EEPLogMemoryFull!= 1){
 801b64a:	4b2c      	ldr	r3, [pc, #176]	; (801b6fc <CaptureExtEEPSnapshot_SingleShot+0x1c8>)
 801b64c:	7a5b      	ldrb	r3, [r3, #9]
 801b64e:	2b01      	cmp	r3, #1
 801b650:	d031      	beq.n	801b6b6 <CaptureExtEEPSnapshot_SingleShot+0x182>
			do{
				EEP_Error = EEPROM_Write(Appl_EEPParam.stm32.ExtEepPage,Appl_EEPParam.stm32.ExtEepOffset,&Appl_EEPParam.transfer.bytes[0],sizeof(Appl_EEPParam.transfer),Appl_EEPParam.stm32.ExtEepAddress);
 801b652:	4b29      	ldr	r3, [pc, #164]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b654:	7cdb      	ldrb	r3, [r3, #19]
 801b656:	b298      	uxth	r0, r3
 801b658:	4b27      	ldr	r3, [pc, #156]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b65a:	7d1b      	ldrb	r3, [r3, #20]
 801b65c:	b299      	uxth	r1, r3
 801b65e:	4b26      	ldr	r3, [pc, #152]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b660:	7c9b      	ldrb	r3, [r3, #18]
 801b662:	9300      	str	r3, [sp, #0]
 801b664:	2310      	movs	r3, #16
 801b666:	4a26      	ldr	r2, [pc, #152]	; (801b700 <CaptureExtEEPSnapshot_SingleShot+0x1cc>)
 801b668:	f000 f886 	bl	801b778 <EEPROM_Write>
 801b66c:	4603      	mov	r3, r0
 801b66e:	461a      	mov	r2, r3
 801b670:	4b24      	ldr	r3, [pc, #144]	; (801b704 <CaptureExtEEPSnapshot_SingleShot+0x1d0>)
 801b672:	701a      	strb	r2, [r3, #0]

				if(EEP_Error != EXTEEP_OK){
 801b674:	4b23      	ldr	r3, [pc, #140]	; (801b704 <CaptureExtEEPSnapshot_SingleShot+0x1d0>)
 801b676:	781b      	ldrb	r3, [r3, #0]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d015      	beq.n	801b6a8 <CaptureExtEEPSnapshot_SingleShot+0x174>
					EEP_ErrorCounter++;
 801b67c:	4b22      	ldr	r3, [pc, #136]	; (801b708 <CaptureExtEEPSnapshot_SingleShot+0x1d4>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	3301      	adds	r3, #1
 801b682:	4a21      	ldr	r2, [pc, #132]	; (801b708 <CaptureExtEEPSnapshot_SingleShot+0x1d4>)
 801b684:	6013      	str	r3, [r2, #0]
					/*ResetI2c*/
					(&hi2c1)->Instance->CR1 |= I2C_CR1_SWRST;
 801b686:	4b21      	ldr	r3, [pc, #132]	; (801b70c <CaptureExtEEPSnapshot_SingleShot+0x1d8>)
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	681a      	ldr	r2, [r3, #0]
 801b68c:	4b1f      	ldr	r3, [pc, #124]	; (801b70c <CaptureExtEEPSnapshot_SingleShot+0x1d8>)
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801b694:	601a      	str	r2, [r3, #0]
					(&hi2c1)->Instance->CR1 &= ~I2C_CR1_SWRST;
 801b696:	4b1d      	ldr	r3, [pc, #116]	; (801b70c <CaptureExtEEPSnapshot_SingleShot+0x1d8>)
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	681a      	ldr	r2, [r3, #0]
 801b69c:	4b1b      	ldr	r3, [pc, #108]	; (801b70c <CaptureExtEEPSnapshot_SingleShot+0x1d8>)
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801b6a4:	601a      	str	r2, [r3, #0]
 801b6a6:	e002      	b.n	801b6ae <CaptureExtEEPSnapshot_SingleShot+0x17a>
				}
				else{
					EEP_ErrorCounter = 0xFF;
 801b6a8:	4b17      	ldr	r3, [pc, #92]	; (801b708 <CaptureExtEEPSnapshot_SingleShot+0x1d4>)
 801b6aa:	22ff      	movs	r2, #255	; 0xff
 801b6ac:	601a      	str	r2, [r3, #0]
				}
			}while(EEP_ErrorCounter<10);
 801b6ae:	4b16      	ldr	r3, [pc, #88]	; (801b708 <CaptureExtEEPSnapshot_SingleShot+0x1d4>)
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	2b09      	cmp	r3, #9
 801b6b4:	d9cd      	bls.n	801b652 <CaptureExtEEPSnapshot_SingleShot+0x11e>
//					Appl_EEPParam.stm32.ExtEepAddress = 0xA4;
//					Appl_diagActiveFault.EEPLogMemoryFull = 1;
//				}
//			}
//		}
		if(Appl_EEPParam.stm32.ExtEepOffset >= 240){
 801b6b6:	4b10      	ldr	r3, [pc, #64]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b6b8:	7d1b      	ldrb	r3, [r3, #20]
 801b6ba:	2bef      	cmp	r3, #239	; 0xef
 801b6bc:	d90f      	bls.n	801b6de <CaptureExtEEPSnapshot_SingleShot+0x1aa>
			Appl_EEPParam.stm32.ExtEepPage++;
 801b6be:	4b0e      	ldr	r3, [pc, #56]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b6c0:	7cdb      	ldrb	r3, [r3, #19]
 801b6c2:	3301      	adds	r3, #1
 801b6c4:	b2da      	uxtb	r2, r3
 801b6c6:	4b0c      	ldr	r3, [pc, #48]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b6c8:	74da      	strb	r2, [r3, #19]
			if(Appl_EEPParam.stm32.ExtEepPage > 0xFE){
 801b6ca:	4b0b      	ldr	r3, [pc, #44]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b6cc:	7cdb      	ldrb	r3, [r3, #19]
 801b6ce:	2bff      	cmp	r3, #255	; 0xff
 801b6d0:	d105      	bne.n	801b6de <CaptureExtEEPSnapshot_SingleShot+0x1aa>
				Appl_EEPParam.stm32.ExtEepPage = 0xFE;
 801b6d2:	4b09      	ldr	r3, [pc, #36]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b6d4:	22fe      	movs	r2, #254	; 0xfe
 801b6d6:	74da      	strb	r2, [r3, #19]
				Appl_diagActiveFault.EEPLogMemoryFull = 1;
 801b6d8:	4b08      	ldr	r3, [pc, #32]	; (801b6fc <CaptureExtEEPSnapshot_SingleShot+0x1c8>)
 801b6da:	2201      	movs	r2, #1
 801b6dc:	725a      	strb	r2, [r3, #9]
		/*Note that resetting of Appl_EEPParam.stm32.ExtEepOffset is done via overflow method.
		 * i.e 240+16 on  8-byte variable overflows as 0;
		 * Upper logic block ensures when this happen page number is incremented.
		 *
		 */
		Appl_EEPParam.stm32.ExtEepOffset +=NUM_OF_BYTES_IN_A_EXTEEP_RECORD;
 801b6de:	4b06      	ldr	r3, [pc, #24]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b6e0:	7d1b      	ldrb	r3, [r3, #20]
 801b6e2:	3310      	adds	r3, #16
 801b6e4:	b2da      	uxtb	r2, r3
 801b6e6:	4b04      	ldr	r3, [pc, #16]	; (801b6f8 <CaptureExtEEPSnapshot_SingleShot+0x1c4>)
 801b6e8:	751a      	strb	r2, [r3, #20]
	}
}
 801b6ea:	bf00      	nop
 801b6ec:	3710      	adds	r7, #16
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	bd80      	pop	{r7, pc}
 801b6f2:	bf00      	nop
 801b6f4:	20004974 	.word	0x20004974
 801b6f8:	2000005c 	.word	0x2000005c
 801b6fc:	200047b0 	.word	0x200047b0
 801b700:	20000071 	.word	0x20000071
 801b704:	20004879 	.word	0x20004879
 801b708:	200005a8 	.word	0x200005a8
 801b70c:	200043bc 	.word	0x200043bc

0801b710 <ResetRecords>:

void ResetRecords(void){
 801b710:	b480      	push	{r7}
 801b712:	af00      	add	r7, sp, #0
	Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL = 0;
 801b714:	4b09      	ldr	r3, [pc, #36]	; (801b73c <ResetRecords+0x2c>)
 801b716:	2200      	movs	r2, #0
 801b718:	745a      	strb	r2, [r3, #17]
	Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH = 0;
 801b71a:	4b08      	ldr	r3, [pc, #32]	; (801b73c <ResetRecords+0x2c>)
 801b71c:	2200      	movs	r2, #0
 801b71e:	741a      	strb	r2, [r3, #16]
	Appl_EEPParam.stm32.ExtEepPage = 1;
 801b720:	4b06      	ldr	r3, [pc, #24]	; (801b73c <ResetRecords+0x2c>)
 801b722:	2201      	movs	r2, #1
 801b724:	74da      	strb	r2, [r3, #19]
	Appl_EEPParam.stm32.ExtEepOffset = 0;
 801b726:	4b05      	ldr	r3, [pc, #20]	; (801b73c <ResetRecords+0x2c>)
 801b728:	2200      	movs	r2, #0
 801b72a:	751a      	strb	r2, [r3, #20]
	Appl_diagActiveFault.EEPLogMemoryFull = 0;
 801b72c:	4b04      	ldr	r3, [pc, #16]	; (801b740 <ResetRecords+0x30>)
 801b72e:	2200      	movs	r2, #0
 801b730:	725a      	strb	r2, [r3, #9]
}
 801b732:	bf00      	nop
 801b734:	46bd      	mov	sp, r7
 801b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b73a:	4770      	bx	lr
 801b73c:	2000005c 	.word	0x2000005c
 801b740:	200047b0 	.word	0x200047b0

0801b744 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 801b744:	b480      	push	{r7}
 801b746:	b083      	sub	sp, #12
 801b748:	af00      	add	r7, sp, #0
 801b74a:	4603      	mov	r3, r0
 801b74c:	460a      	mov	r2, r1
 801b74e:	80fb      	strh	r3, [r7, #6]
 801b750:	4613      	mov	r3, r2
 801b752:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<ATMEL_EEP_CHIP_PAGE_SIZE) return size;
 801b754:	88fa      	ldrh	r2, [r7, #6]
 801b756:	88bb      	ldrh	r3, [r7, #4]
 801b758:	4413      	add	r3, r2
 801b75a:	2bff      	cmp	r3, #255	; 0xff
 801b75c:	dc01      	bgt.n	801b762 <bytestowrite+0x1e>
 801b75e:	88fb      	ldrh	r3, [r7, #6]
 801b760:	e003      	b.n	801b76a <bytestowrite+0x26>
	else return ATMEL_EEP_CHIP_PAGE_SIZE-offset;
 801b762:	88bb      	ldrh	r3, [r7, #4]
 801b764:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801b768:	b29b      	uxth	r3, r3
}
 801b76a:	4618      	mov	r0, r3
 801b76c:	370c      	adds	r7, #12
 801b76e:	46bd      	mov	sp, r7
 801b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b774:	4770      	bx	lr
	...

0801b778 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to ATMEL_EEP_CHIP_PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
ExtEEP_Error EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size, uint8_t eepchipaddress)
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	b08e      	sub	sp, #56	; 0x38
 801b77c:	af04      	add	r7, sp, #16
 801b77e:	60ba      	str	r2, [r7, #8]
 801b780:	461a      	mov	r2, r3
 801b782:	4603      	mov	r3, r0
 801b784:	81fb      	strh	r3, [r7, #14]
 801b786:	460b      	mov	r3, r1
 801b788:	81bb      	strh	r3, [r7, #12]
 801b78a:	4613      	mov	r3, r2
 801b78c:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef error;
	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(ATMEL_EEP_CHIP_PAGE_SIZE)/log(2);
 801b78e:	2308      	movs	r3, #8
 801b790:	627b      	str	r3, [r7, #36]	; 0x24

	// calculate the start page and the end page
	uint16_t startPage = page;
 801b792:	89fb      	ldrh	r3, [r7, #14]
 801b794:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t endPage = page + ((size+offset)/ATMEL_EEP_CHIP_PAGE_SIZE);
 801b796:	88fa      	ldrh	r2, [r7, #6]
 801b798:	89bb      	ldrh	r3, [r7, #12]
 801b79a:	4413      	add	r3, r2
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	da00      	bge.n	801b7a2 <EEPROM_Write+0x2a>
 801b7a0:	33ff      	adds	r3, #255	; 0xff
 801b7a2:	121b      	asrs	r3, r3, #8
 801b7a4:	b29a      	uxth	r2, r3
 801b7a6:	89fb      	ldrh	r3, [r7, #14]
 801b7a8:	4413      	add	r3, r2
 801b7aa:	843b      	strh	r3, [r7, #32]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 801b7ac:	8c3a      	ldrh	r2, [r7, #32]
 801b7ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b7b0:	1ad3      	subs	r3, r2, r3
 801b7b2:	b29b      	uxth	r3, r3
 801b7b4:	3301      	adds	r3, #1
 801b7b6:	83fb      	strh	r3, [r7, #30]
	uint16_t pos=0;
 801b7b8:	2300      	movs	r3, #0
 801b7ba:	83bb      	strh	r3, [r7, #28]

	// write the data
	for (int i=0; i<numofpages; i++)
 801b7bc:	2300      	movs	r3, #0
 801b7be:	61bb      	str	r3, [r7, #24]
 801b7c0:	bf00      	nop
 801b7c2:	8bfb      	ldrh	r3, [r7, #30]
 801b7c4:	69ba      	ldr	r2, [r7, #24]
 801b7c6:	429a      	cmp	r2, r3
 801b7c8:	da30      	bge.n	801b82c <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 801b7ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ce:	fa02 f303 	lsl.w	r3, r2, r3
 801b7d2:	b21a      	sxth	r2, r3
 801b7d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801b7d8:	4313      	orrs	r3, r2
 801b7da:	b21b      	sxth	r3, r3
 801b7dc:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 801b7de:	89ba      	ldrh	r2, [r7, #12]
 801b7e0:	88fb      	ldrh	r3, [r7, #6]
 801b7e2:	4611      	mov	r1, r2
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	f7ff ffad 	bl	801b744 <bytestowrite>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	82bb      	strh	r3, [r7, #20]
		error = HAL_I2C_Mem_Write(EEPROM_I2C, (uint16_t)eepchipaddress, MemAddress, 2, &data[pos], bytesremaining, 50);
 801b7ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801b7f2:	b299      	uxth	r1, r3
 801b7f4:	8bbb      	ldrh	r3, [r7, #28]
 801b7f6:	68ba      	ldr	r2, [r7, #8]
 801b7f8:	4413      	add	r3, r2
 801b7fa:	8af8      	ldrh	r0, [r7, #22]
 801b7fc:	2232      	movs	r2, #50	; 0x32
 801b7fe:	9202      	str	r2, [sp, #8]
 801b800:	8aba      	ldrh	r2, [r7, #20]
 801b802:	9201      	str	r2, [sp, #4]
 801b804:	9300      	str	r3, [sp, #0]
 801b806:	2302      	movs	r3, #2
 801b808:	4602      	mov	r2, r0
 801b80a:	480a      	ldr	r0, [pc, #40]	; (801b834 <EEPROM_Write+0xbc>)
 801b80c:	f7f8 fb86 	bl	8013f1c <HAL_I2C_Mem_Write>
 801b810:	4603      	mov	r3, r0
 801b812:	74fb      	strb	r3, [r7, #19]
		if(HAL_OK != error){
 801b814:	7cfb      	ldrb	r3, [r7, #19]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d006      	beq.n	801b828 <EEPROM_Write+0xb0>
			I2CFailLogCounter++;
 801b81a:	4b07      	ldr	r3, [pc, #28]	; (801b838 <EEPROM_Write+0xc0>)
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	3301      	adds	r3, #1
 801b820:	4a05      	ldr	r2, [pc, #20]	; (801b838 <EEPROM_Write+0xc0>)
 801b822:	6013      	str	r3, [r2, #0]
			return EXTEEP_BUSY;
 801b824:	2301      	movs	r3, #1
 801b826:	e001      	b.n	801b82c <EEPROM_Write+0xb4>
		}
		else{
			return EXTEEP_OK;
 801b828:	2300      	movs	r3, #0
 801b82a:	e7ff      	b.n	801b82c <EEPROM_Write+0xb4>
		size = size-bytesremaining;  // reduce the size of the bytes
		pos += bytesremaining;  // update the position for the data buffer

		HAL_Delay (5);  // Write cycle delay (5ms)
	}
}
 801b82c:	4618      	mov	r0, r3
 801b82e:	3728      	adds	r7, #40	; 0x28
 801b830:	46bd      	mov	sp, r7
 801b832:	bd80      	pop	{r7, pc}
 801b834:	200043bc 	.word	0x200043bc
 801b838:	200048dc 	.word	0x200048dc

0801b83c <EEPROM_Read>:
 * @size is the size of the data
 */


ExtEEP_Error EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size, uint8_t eepchipaddress)
{
 801b83c:	b580      	push	{r7, lr}
 801b83e:	b08e      	sub	sp, #56	; 0x38
 801b840:	af04      	add	r7, sp, #16
 801b842:	60ba      	str	r2, [r7, #8]
 801b844:	461a      	mov	r2, r3
 801b846:	4603      	mov	r3, r0
 801b848:	81fb      	strh	r3, [r7, #14]
 801b84a:	460b      	mov	r3, r1
 801b84c:	81bb      	strh	r3, [r7, #12]
 801b84e:	4613      	mov	r3, r2
 801b850:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef error;
	int paddrposition = log(ATMEL_EEP_CHIP_PAGE_SIZE)/log(2);
 801b852:	2308      	movs	r3, #8
 801b854:	627b      	str	r3, [r7, #36]	; 0x24

	uint16_t startPage = page;
 801b856:	89fb      	ldrh	r3, [r7, #14]
 801b858:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t endPage = page + ((size+offset)/ATMEL_EEP_CHIP_PAGE_SIZE);
 801b85a:	88fa      	ldrh	r2, [r7, #6]
 801b85c:	89bb      	ldrh	r3, [r7, #12]
 801b85e:	4413      	add	r3, r2
 801b860:	2b00      	cmp	r3, #0
 801b862:	da00      	bge.n	801b866 <EEPROM_Read+0x2a>
 801b864:	33ff      	adds	r3, #255	; 0xff
 801b866:	121b      	asrs	r3, r3, #8
 801b868:	b29a      	uxth	r2, r3
 801b86a:	89fb      	ldrh	r3, [r7, #14]
 801b86c:	4413      	add	r3, r2
 801b86e:	843b      	strh	r3, [r7, #32]

	uint16_t numofpages = (endPage-startPage) + 1;
 801b870:	8c3a      	ldrh	r2, [r7, #32]
 801b872:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b874:	1ad3      	subs	r3, r2, r3
 801b876:	b29b      	uxth	r3, r3
 801b878:	3301      	adds	r3, #1
 801b87a:	83fb      	strh	r3, [r7, #30]
	uint16_t pos=0;
 801b87c:	2300      	movs	r3, #0
 801b87e:	83bb      	strh	r3, [r7, #28]

	for (int i=0; i<numofpages; i++)
 801b880:	2300      	movs	r3, #0
 801b882:	61bb      	str	r3, [r7, #24]
 801b884:	bf00      	nop
 801b886:	8bfb      	ldrh	r3, [r7, #30]
 801b888:	69ba      	ldr	r2, [r7, #24]
 801b88a:	429a      	cmp	r2, r3
 801b88c:	da3d      	bge.n	801b90a <EEPROM_Read+0xce>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 801b88e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b892:	fa02 f303 	lsl.w	r3, r2, r3
 801b896:	b21a      	sxth	r2, r3
 801b898:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801b89c:	4313      	orrs	r3, r2
 801b89e:	b21b      	sxth	r3, r3
 801b8a0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 801b8a2:	89ba      	ldrh	r2, [r7, #12]
 801b8a4:	88fb      	ldrh	r3, [r7, #6]
 801b8a6:	4611      	mov	r1, r2
 801b8a8:	4618      	mov	r0, r3
 801b8aa:	f7ff ff4b 	bl	801b744 <bytestowrite>
 801b8ae:	4603      	mov	r3, r0
 801b8b0:	82bb      	strh	r3, [r7, #20]
		error = HAL_I2C_Mem_Read(EEPROM_I2C, (uint16_t)eepchipaddress, MemAddress, 2, &data[pos], bytesremaining, 50);
 801b8b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801b8b6:	b299      	uxth	r1, r3
 801b8b8:	8bbb      	ldrh	r3, [r7, #28]
 801b8ba:	68ba      	ldr	r2, [r7, #8]
 801b8bc:	4413      	add	r3, r2
 801b8be:	8af8      	ldrh	r0, [r7, #22]
 801b8c0:	2232      	movs	r2, #50	; 0x32
 801b8c2:	9202      	str	r2, [sp, #8]
 801b8c4:	8aba      	ldrh	r2, [r7, #20]
 801b8c6:	9201      	str	r2, [sp, #4]
 801b8c8:	9300      	str	r3, [sp, #0]
 801b8ca:	2302      	movs	r3, #2
 801b8cc:	4602      	mov	r2, r0
 801b8ce:	4811      	ldr	r0, [pc, #68]	; (801b914 <EEPROM_Read+0xd8>)
 801b8d0:	f7f8 fc1e 	bl	8014110 <HAL_I2C_Mem_Read>
 801b8d4:	4603      	mov	r3, r0
 801b8d6:	74fb      	strb	r3, [r7, #19]
		startPage += 1;
 801b8d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b8da:	3301      	adds	r3, #1
 801b8dc:	847b      	strh	r3, [r7, #34]	; 0x22
		offset=0;
 801b8de:	2300      	movs	r3, #0
 801b8e0:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 801b8e2:	88fa      	ldrh	r2, [r7, #6]
 801b8e4:	8abb      	ldrh	r3, [r7, #20]
 801b8e6:	1ad3      	subs	r3, r2, r3
 801b8e8:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 801b8ea:	8bba      	ldrh	r2, [r7, #28]
 801b8ec:	8abb      	ldrh	r3, [r7, #20]
 801b8ee:	4413      	add	r3, r2
 801b8f0:	83bb      	strh	r3, [r7, #28]
		if(HAL_OK != error){
 801b8f2:	7cfb      	ldrb	r3, [r7, #19]
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d006      	beq.n	801b906 <EEPROM_Read+0xca>
			I2CFailLogCounter++;
 801b8f8:	4b07      	ldr	r3, [pc, #28]	; (801b918 <EEPROM_Read+0xdc>)
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	3301      	adds	r3, #1
 801b8fe:	4a06      	ldr	r2, [pc, #24]	; (801b918 <EEPROM_Read+0xdc>)
 801b900:	6013      	str	r3, [r2, #0]
			return EXTEEP_BUSY;
 801b902:	2301      	movs	r3, #1
 801b904:	e001      	b.n	801b90a <EEPROM_Read+0xce>
		}
		else{
			return EXTEEP_OK;
 801b906:	2300      	movs	r3, #0
 801b908:	e7ff      	b.n	801b90a <EEPROM_Read+0xce>
		}
	}
}
 801b90a:	4618      	mov	r0, r3
 801b90c:	3728      	adds	r7, #40	; 0x28
 801b90e:	46bd      	mov	sp, r7
 801b910:	bd80      	pop	{r7, pc}
 801b912:	bf00      	nop
 801b914:	200043bc 	.word	0x200043bc
 801b918:	200048dc 	.word	0x200048dc

0801b91c <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
ExtEEP_Error EEPROM_PageErase (uint16_t page,uint8_t eepchipaddress)
{
 801b91c:	b580      	push	{r7, lr}
 801b91e:	b0c8      	sub	sp, #288	; 0x120
 801b920:	af04      	add	r7, sp, #16
 801b922:	4602      	mov	r2, r0
 801b924:	1dbb      	adds	r3, r7, #6
 801b926:	801a      	strh	r2, [r3, #0]
 801b928:	1d7b      	adds	r3, r7, #5
 801b92a:	460a      	mov	r2, r1
 801b92c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef error;
	// calculate the memory address based on the page number
	int paddrposition = log(ATMEL_EEP_CHIP_PAGE_SIZE)/log(2);
 801b92e:	2308      	movs	r3, #8
 801b930:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint16_t MemAddress = page<<paddrposition;
 801b934:	1dbb      	adds	r3, r7, #6
 801b936:	881a      	ldrh	r2, [r3, #0]
 801b938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b93c:	fa02 f303 	lsl.w	r3, r2, r3
 801b940:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a


	// create a buffer to store the reset values
	uint8_t data[ATMEL_EEP_CHIP_PAGE_SIZE];
	memset(data,0xff,ATMEL_EEP_CHIP_PAGE_SIZE);
 801b944:	f107 0308 	add.w	r3, r7, #8
 801b948:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b94c:	21ff      	movs	r1, #255	; 0xff
 801b94e:	4618      	mov	r0, r3
 801b950:	f004 fe58 	bl	8020604 <memset>

	// write the data to the EEPROM
	error = HAL_I2C_Mem_Write(EEPROM_I2C, (uint16_t)eepchipaddress, MemAddress, 2, data, ATMEL_EEP_CHIP_PAGE_SIZE, 1000);
 801b954:	1d7b      	adds	r3, r7, #5
 801b956:	781b      	ldrb	r3, [r3, #0]
 801b958:	b299      	uxth	r1, r3
 801b95a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 801b95e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b962:	9302      	str	r3, [sp, #8]
 801b964:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b968:	9301      	str	r3, [sp, #4]
 801b96a:	f107 0308 	add.w	r3, r7, #8
 801b96e:	9300      	str	r3, [sp, #0]
 801b970:	2302      	movs	r3, #2
 801b972:	480d      	ldr	r0, [pc, #52]	; (801b9a8 <EEPROM_PageErase+0x8c>)
 801b974:	f7f8 fad2 	bl	8013f1c <HAL_I2C_Mem_Write>
 801b978:	4603      	mov	r3, r0
 801b97a:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109

	HAL_Delay (5);  // write cycle delay
 801b97e:	2005      	movs	r0, #5
 801b980:	f7f6 fd04 	bl	801238c <HAL_Delay>

	if(HAL_OK != error){
 801b984:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d006      	beq.n	801b99a <EEPROM_PageErase+0x7e>
		I2CFailLogCounter++;
 801b98c:	4b07      	ldr	r3, [pc, #28]	; (801b9ac <EEPROM_PageErase+0x90>)
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	3301      	adds	r3, #1
 801b992:	4a06      	ldr	r2, [pc, #24]	; (801b9ac <EEPROM_PageErase+0x90>)
 801b994:	6013      	str	r3, [r2, #0]
		return EXTEEP_BUSY;
 801b996:	2301      	movs	r3, #1
 801b998:	e000      	b.n	801b99c <EEPROM_PageErase+0x80>
	}
	else{
		return EXTEEP_OK;
 801b99a:	2300      	movs	r3, #0
	}
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801b9a2:	46bd      	mov	sp, r7
 801b9a4:	bd80      	pop	{r7, pc}
 801b9a6:	bf00      	nop
 801b9a8:	200043bc 	.word	0x200043bc
 801b9ac:	200048dc 	.word	0x200048dc

0801b9b0 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 801b9b0:	b580      	push	{r7, lr}
 801b9b2:	b084      	sub	sp, #16
 801b9b4:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 801b9b6:	2306      	movs	r3, #6
 801b9b8:	817b      	strh	r3, [r7, #10]
 801b9ba:	2306      	movs	r3, #6
 801b9bc:	813b      	strh	r3, [r7, #8]
  uint16_t VarIdx = 0;
 801b9be:	2300      	movs	r3, #0
 801b9c0:	81fb      	strh	r3, [r7, #14]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	80fb      	strh	r3, [r7, #6]
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	80bb      	strh	r3, [r7, #4]
  int16_t x = -1;
 801b9ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b9ce:	81bb      	strh	r3, [r7, #12]
  uint16_t  FlashStatus = FLASH_COMPLETE;
 801b9d0:	2303      	movs	r3, #3
 801b9d2:	807b      	strh	r3, [r7, #2]

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801b9d4:	4b9d      	ldr	r3, [pc, #628]	; (801bc4c <EE_Init+0x29c>)
 801b9d6:	881b      	ldrh	r3, [r3, #0]
 801b9d8:	817b      	strh	r3, [r7, #10]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801b9da:	4b9d      	ldr	r3, [pc, #628]	; (801bc50 <EE_Init+0x2a0>)
 801b9dc:	881b      	ldrh	r3, [r3, #0]
 801b9de:	813b      	strh	r3, [r7, #8]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 801b9e0:	897b      	ldrh	r3, [r7, #10]
 801b9e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9e6:	4293      	cmp	r3, r2
 801b9e8:	d00b      	beq.n	801ba02 <EE_Init+0x52>
 801b9ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b9ee:	f280 8117 	bge.w	801bc20 <EE_Init+0x270>
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	f000 80ad 	beq.w	801bb52 <EE_Init+0x1a2>
 801b9f8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801b9fc:	4293      	cmp	r3, r2
 801b9fe:	d033      	beq.n	801ba68 <EE_Init+0xb8>
 801ba00:	e10e      	b.n	801bc20 <EE_Init+0x270>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 801ba02:	893b      	ldrh	r3, [r7, #8]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d109      	bne.n	801ba1c <EE_Init+0x6c>
      {
        /* Erase Page0 */
        FLASH_Erase_Sector(PAGE0_ID,VOLTAGE_RANGE);
 801ba08:	2102      	movs	r1, #2
 801ba0a:	2002      	movs	r0, #2
 801ba0c:	f7f7 ff02 	bl	8013814 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801ba10:	887b      	ldrh	r3, [r7, #2]
 801ba12:	2b03      	cmp	r3, #3
 801ba14:	f000 810d 	beq.w	801bc32 <EE_Init+0x282>
        {
          return FlashStatus;
 801ba18:	887b      	ldrh	r3, [r7, #2]
 801ba1a:	e112      	b.n	801bc42 <EE_Init+0x292>
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 801ba1c:	893b      	ldrh	r3, [r7, #8]
 801ba1e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801ba22:	4293      	cmp	r3, r2
 801ba24:	d116      	bne.n	801ba54 <EE_Init+0xa4>
      {
        /* Erase Page0 */
        FLASH_Erase_Sector(PAGE0_ID, VOLTAGE_RANGE);
 801ba26:	2102      	movs	r1, #2
 801ba28:	2002      	movs	r0, #2
 801ba2a:	f7f7 fef3 	bl	8013814 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801ba2e:	887b      	ldrh	r3, [r7, #2]
 801ba30:	2b03      	cmp	r3, #3
 801ba32:	d001      	beq.n	801ba38 <EE_Init+0x88>
        {
          return FlashStatus;
 801ba34:	887b      	ldrh	r3, [r7, #2]
 801ba36:	e104      	b.n	801bc42 <EE_Init+0x292>
        }
        /* Mark Page1 as valid */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGE1_BASE_ADDRESS, VALID_PAGE);
 801ba38:	f04f 0200 	mov.w	r2, #0
 801ba3c:	f04f 0300 	mov.w	r3, #0
 801ba40:	4983      	ldr	r1, [pc, #524]	; (801bc50 <EE_Init+0x2a0>)
 801ba42:	2001      	movs	r0, #1
 801ba44:	f7f7 fd30 	bl	80134a8 <HAL_FLASH_Program>
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801ba48:	887b      	ldrh	r3, [r7, #2]
 801ba4a:	2b03      	cmp	r3, #3
 801ba4c:	f000 80f1 	beq.w	801bc32 <EE_Init+0x282>
        {
          return FlashStatus;
 801ba50:	887b      	ldrh	r3, [r7, #2]
 801ba52:	e0f6      	b.n	801bc42 <EE_Init+0x292>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 801ba54:	f000 f972 	bl	801bd3c <EE_Format>
 801ba58:	4603      	mov	r3, r0
 801ba5a:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801ba5c:	887b      	ldrh	r3, [r7, #2]
 801ba5e:	2b03      	cmp	r3, #3
 801ba60:	f000 80e7 	beq.w	801bc32 <EE_Init+0x282>
        {
          return FlashStatus;
 801ba64:	887b      	ldrh	r3, [r7, #2]
 801ba66:	e0ec      	b.n	801bc42 <EE_Init+0x292>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 801ba68:	893b      	ldrh	r3, [r7, #8]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d14d      	bne.n	801bb0a <EE_Init+0x15a>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801ba6e:	2300      	movs	r3, #0
 801ba70:	81fb      	strh	r3, [r7, #14]
 801ba72:	e030      	b.n	801bad6 <EE_Init+0x126>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801ba74:	4b77      	ldr	r3, [pc, #476]	; (801bc54 <EE_Init+0x2a4>)
 801ba76:	881b      	ldrh	r3, [r3, #0]
 801ba78:	b29a      	uxth	r2, r3
 801ba7a:	89fb      	ldrh	r3, [r7, #14]
 801ba7c:	4976      	ldr	r1, [pc, #472]	; (801bc58 <EE_Init+0x2a8>)
 801ba7e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801ba82:	429a      	cmp	r2, r3
 801ba84:	d101      	bne.n	801ba8a <EE_Init+0xda>
          {
            x = VarIdx;
 801ba86:	89fb      	ldrh	r3, [r7, #14]
 801ba88:	81bb      	strh	r3, [r7, #12]
          }
          if (VarIdx != x)
 801ba8a:	89fa      	ldrh	r2, [r7, #14]
 801ba8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ba90:	429a      	cmp	r2, r3
 801ba92:	d01d      	beq.n	801bad0 <EE_Init+0x120>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801ba94:	89fb      	ldrh	r3, [r7, #14]
 801ba96:	4a70      	ldr	r2, [pc, #448]	; (801bc58 <EE_Init+0x2a8>)
 801ba98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ba9c:	496f      	ldr	r1, [pc, #444]	; (801bc5c <EE_Init+0x2ac>)
 801ba9e:	4618      	mov	r0, r3
 801baa0:	f000 f8e0 	bl	801bc64 <EE_ReadVariable>
 801baa4:	4603      	mov	r3, r0
 801baa6:	80bb      	strh	r3, [r7, #4]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 801baa8:	88bb      	ldrh	r3, [r7, #4]
 801baaa:	2b01      	cmp	r3, #1
 801baac:	d010      	beq.n	801bad0 <EE_Init+0x120>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801baae:	89fb      	ldrh	r3, [r7, #14]
 801bab0:	4a69      	ldr	r2, [pc, #420]	; (801bc58 <EE_Init+0x2a8>)
 801bab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bab6:	4a69      	ldr	r2, [pc, #420]	; (801bc5c <EE_Init+0x2ac>)
 801bab8:	8812      	ldrh	r2, [r2, #0]
 801baba:	4611      	mov	r1, r2
 801babc:	4618      	mov	r0, r3
 801babe:	f000 f9a9 	bl	801be14 <EE_VerifyPageFullWriteVariable>
 801bac2:	4603      	mov	r3, r0
 801bac4:	80fb      	strh	r3, [r7, #6]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 801bac6:	88fb      	ldrh	r3, [r7, #6]
 801bac8:	2b03      	cmp	r3, #3
 801baca:	d001      	beq.n	801bad0 <EE_Init+0x120>
              {
                return EepromStatus;
 801bacc:	88fb      	ldrh	r3, [r7, #6]
 801bace:	e0b8      	b.n	801bc42 <EE_Init+0x292>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801bad0:	89fb      	ldrh	r3, [r7, #14]
 801bad2:	3301      	adds	r3, #1
 801bad4:	81fb      	strh	r3, [r7, #14]
 801bad6:	89fb      	ldrh	r3, [r7, #14]
 801bad8:	2b14      	cmp	r3, #20
 801bada:	d9cb      	bls.n	801ba74 <EE_Init+0xc4>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGE0_BASE_ADDRESS, VALID_PAGE);
 801badc:	f04f 0200 	mov.w	r2, #0
 801bae0:	f04f 0300 	mov.w	r3, #0
 801bae4:	4959      	ldr	r1, [pc, #356]	; (801bc4c <EE_Init+0x29c>)
 801bae6:	2001      	movs	r0, #1
 801bae8:	f7f7 fcde 	bl	80134a8 <HAL_FLASH_Program>
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801baec:	887b      	ldrh	r3, [r7, #2]
 801baee:	2b03      	cmp	r3, #3
 801baf0:	d001      	beq.n	801baf6 <EE_Init+0x146>
        {
          return FlashStatus;
 801baf2:	887b      	ldrh	r3, [r7, #2]
 801baf4:	e0a5      	b.n	801bc42 <EE_Init+0x292>
        }
        /* Erase Page1 */
        FLASH_Erase_Sector(PAGE1_ID, VOLTAGE_RANGE);
 801baf6:	2102      	movs	r1, #2
 801baf8:	2003      	movs	r0, #3
 801bafa:	f7f7 fe8b 	bl	8013814 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801bafe:	887b      	ldrh	r3, [r7, #2]
 801bb00:	2b03      	cmp	r3, #3
 801bb02:	f000 8098 	beq.w	801bc36 <EE_Init+0x286>
        {
          return FlashStatus;
 801bb06:	887b      	ldrh	r3, [r7, #2]
 801bb08:	e09b      	b.n	801bc42 <EE_Init+0x292>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 801bb0a:	893b      	ldrh	r3, [r7, #8]
 801bb0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb10:	4293      	cmp	r3, r2
 801bb12:	d115      	bne.n	801bb40 <EE_Init+0x190>
      {
        /* Erase Page1 */
        FLASH_Erase_Sector(PAGE1_ID, VOLTAGE_RANGE);
 801bb14:	2102      	movs	r1, #2
 801bb16:	2003      	movs	r0, #3
 801bb18:	f7f7 fe7c 	bl	8013814 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801bb1c:	887b      	ldrh	r3, [r7, #2]
 801bb1e:	2b03      	cmp	r3, #3
 801bb20:	d001      	beq.n	801bb26 <EE_Init+0x176>
        {
          return FlashStatus;
 801bb22:	887b      	ldrh	r3, [r7, #2]
 801bb24:	e08d      	b.n	801bc42 <EE_Init+0x292>
        }
        /* Mark Page0 as valid */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGE0_BASE_ADDRESS, VALID_PAGE);
 801bb26:	f04f 0200 	mov.w	r2, #0
 801bb2a:	f04f 0300 	mov.w	r3, #0
 801bb2e:	4947      	ldr	r1, [pc, #284]	; (801bc4c <EE_Init+0x29c>)
 801bb30:	2001      	movs	r0, #1
 801bb32:	f7f7 fcb9 	bl	80134a8 <HAL_FLASH_Program>
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801bb36:	887b      	ldrh	r3, [r7, #2]
 801bb38:	2b03      	cmp	r3, #3
 801bb3a:	d07c      	beq.n	801bc36 <EE_Init+0x286>
        {
          return FlashStatus;
 801bb3c:	887b      	ldrh	r3, [r7, #2]
 801bb3e:	e080      	b.n	801bc42 <EE_Init+0x292>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 801bb40:	f000 f8fc 	bl	801bd3c <EE_Format>
 801bb44:	4603      	mov	r3, r0
 801bb46:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801bb48:	887b      	ldrh	r3, [r7, #2]
 801bb4a:	2b03      	cmp	r3, #3
 801bb4c:	d073      	beq.n	801bc36 <EE_Init+0x286>
        {
          return FlashStatus;
 801bb4e:	887b      	ldrh	r3, [r7, #2]
 801bb50:	e077      	b.n	801bc42 <EE_Init+0x292>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801bb52:	893b      	ldrh	r3, [r7, #8]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d108      	bne.n	801bb6a <EE_Init+0x1ba>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 801bb58:	f000 f8f0 	bl	801bd3c <EE_Format>
 801bb5c:	4603      	mov	r3, r0
 801bb5e:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801bb60:	887b      	ldrh	r3, [r7, #2]
 801bb62:	2b03      	cmp	r3, #3
 801bb64:	d069      	beq.n	801bc3a <EE_Init+0x28a>
        {
          return FlashStatus;
 801bb66:	887b      	ldrh	r3, [r7, #2]
 801bb68:	e06b      	b.n	801bc42 <EE_Init+0x292>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 801bb6a:	893b      	ldrh	r3, [r7, #8]
 801bb6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb70:	4293      	cmp	r3, r2
 801bb72:	d108      	bne.n	801bb86 <EE_Init+0x1d6>
      {
        /* Erase Page1 */
        FLASH_Erase_Sector(PAGE1_ID, VOLTAGE_RANGE);
 801bb74:	2102      	movs	r1, #2
 801bb76:	2003      	movs	r0, #3
 801bb78:	f7f7 fe4c 	bl	8013814 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801bb7c:	887b      	ldrh	r3, [r7, #2]
 801bb7e:	2b03      	cmp	r3, #3
 801bb80:	d05b      	beq.n	801bc3a <EE_Init+0x28a>
        {
          return FlashStatus;
 801bb82:	887b      	ldrh	r3, [r7, #2]
 801bb84:	e05d      	b.n	801bc42 <EE_Init+0x292>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801bb86:	2300      	movs	r3, #0
 801bb88:	81fb      	strh	r3, [r7, #14]
 801bb8a:	e030      	b.n	801bbee <EE_Init+0x23e>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801bb8c:	4b34      	ldr	r3, [pc, #208]	; (801bc60 <EE_Init+0x2b0>)
 801bb8e:	881b      	ldrh	r3, [r3, #0]
 801bb90:	b29a      	uxth	r2, r3
 801bb92:	89fb      	ldrh	r3, [r7, #14]
 801bb94:	4930      	ldr	r1, [pc, #192]	; (801bc58 <EE_Init+0x2a8>)
 801bb96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801bb9a:	429a      	cmp	r2, r3
 801bb9c:	d101      	bne.n	801bba2 <EE_Init+0x1f2>
          {
            x = VarIdx;
 801bb9e:	89fb      	ldrh	r3, [r7, #14]
 801bba0:	81bb      	strh	r3, [r7, #12]
          }
          if (VarIdx != x)
 801bba2:	89fa      	ldrh	r2, [r7, #14]
 801bba4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801bba8:	429a      	cmp	r2, r3
 801bbaa:	d01d      	beq.n	801bbe8 <EE_Init+0x238>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801bbac:	89fb      	ldrh	r3, [r7, #14]
 801bbae:	4a2a      	ldr	r2, [pc, #168]	; (801bc58 <EE_Init+0x2a8>)
 801bbb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bbb4:	4929      	ldr	r1, [pc, #164]	; (801bc5c <EE_Init+0x2ac>)
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	f000 f854 	bl	801bc64 <EE_ReadVariable>
 801bbbc:	4603      	mov	r3, r0
 801bbbe:	80bb      	strh	r3, [r7, #4]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 801bbc0:	88bb      	ldrh	r3, [r7, #4]
 801bbc2:	2b01      	cmp	r3, #1
 801bbc4:	d010      	beq.n	801bbe8 <EE_Init+0x238>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801bbc6:	89fb      	ldrh	r3, [r7, #14]
 801bbc8:	4a23      	ldr	r2, [pc, #140]	; (801bc58 <EE_Init+0x2a8>)
 801bbca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bbce:	4a23      	ldr	r2, [pc, #140]	; (801bc5c <EE_Init+0x2ac>)
 801bbd0:	8812      	ldrh	r2, [r2, #0]
 801bbd2:	4611      	mov	r1, r2
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	f000 f91d 	bl	801be14 <EE_VerifyPageFullWriteVariable>
 801bbda:	4603      	mov	r3, r0
 801bbdc:	80fb      	strh	r3, [r7, #6]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 801bbde:	88fb      	ldrh	r3, [r7, #6]
 801bbe0:	2b03      	cmp	r3, #3
 801bbe2:	d001      	beq.n	801bbe8 <EE_Init+0x238>
              {
                return EepromStatus;
 801bbe4:	88fb      	ldrh	r3, [r7, #6]
 801bbe6:	e02c      	b.n	801bc42 <EE_Init+0x292>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801bbe8:	89fb      	ldrh	r3, [r7, #14]
 801bbea:	3301      	adds	r3, #1
 801bbec:	81fb      	strh	r3, [r7, #14]
 801bbee:	89fb      	ldrh	r3, [r7, #14]
 801bbf0:	2b14      	cmp	r3, #20
 801bbf2:	d9cb      	bls.n	801bb8c <EE_Init+0x1dc>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGE1_BASE_ADDRESS, VALID_PAGE);
 801bbf4:	f04f 0200 	mov.w	r2, #0
 801bbf8:	f04f 0300 	mov.w	r3, #0
 801bbfc:	4914      	ldr	r1, [pc, #80]	; (801bc50 <EE_Init+0x2a0>)
 801bbfe:	2001      	movs	r0, #1
 801bc00:	f7f7 fc52 	bl	80134a8 <HAL_FLASH_Program>
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801bc04:	887b      	ldrh	r3, [r7, #2]
 801bc06:	2b03      	cmp	r3, #3
 801bc08:	d001      	beq.n	801bc0e <EE_Init+0x25e>
        {
          return FlashStatus;
 801bc0a:	887b      	ldrh	r3, [r7, #2]
 801bc0c:	e019      	b.n	801bc42 <EE_Init+0x292>
        }
        /* Erase Page0 */
        FLASH_Erase_Sector(PAGE0_ID, VOLTAGE_RANGE);
 801bc0e:	2102      	movs	r1, #2
 801bc10:	2002      	movs	r0, #2
 801bc12:	f7f7 fdff 	bl	8013814 <FLASH_Erase_Sector>
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 801bc16:	887b      	ldrh	r3, [r7, #2]
 801bc18:	2b03      	cmp	r3, #3
 801bc1a:	d00e      	beq.n	801bc3a <EE_Init+0x28a>
        {
          return FlashStatus;
 801bc1c:	887b      	ldrh	r3, [r7, #2]
 801bc1e:	e010      	b.n	801bc42 <EE_Init+0x292>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 801bc20:	f000 f88c 	bl	801bd3c <EE_Format>
 801bc24:	4603      	mov	r3, r0
 801bc26:	807b      	strh	r3, [r7, #2]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 801bc28:	887b      	ldrh	r3, [r7, #2]
 801bc2a:	2b03      	cmp	r3, #3
 801bc2c:	d007      	beq.n	801bc3e <EE_Init+0x28e>
      {
        return FlashStatus;
 801bc2e:	887b      	ldrh	r3, [r7, #2]
 801bc30:	e007      	b.n	801bc42 <EE_Init+0x292>
      break;
 801bc32:	bf00      	nop
 801bc34:	e004      	b.n	801bc40 <EE_Init+0x290>
      break;
 801bc36:	bf00      	nop
 801bc38:	e002      	b.n	801bc40 <EE_Init+0x290>
      break;
 801bc3a:	bf00      	nop
 801bc3c:	e000      	b.n	801bc40 <EE_Init+0x290>
      }
      break;
 801bc3e:	bf00      	nop
  }

  return FLASH_COMPLETE;
 801bc40:	2303      	movs	r3, #3
}
 801bc42:	4618      	mov	r0, r3
 801bc44:	3710      	adds	r7, #16
 801bc46:	46bd      	mov	sp, r7
 801bc48:	bd80      	pop	{r7, pc}
 801bc4a:	bf00      	nop
 801bc4c:	08008000 	.word	0x08008000
 801bc50:	0800c000 	.word	0x0800c000
 801bc54:	08008006 	.word	0x08008006
 801bc58:	200048a8 	.word	0x200048a8
 801bc5c:	200005d2 	.word	0x200005d2
 801bc60:	0800c006 	.word	0x0800c006

0801bc64 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 801bc64:	b580      	push	{r7, lr}
 801bc66:	b086      	sub	sp, #24
 801bc68:	af00      	add	r7, sp, #0
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	6039      	str	r1, [r7, #0]
 801bc6e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 801bc70:	2300      	movs	r3, #0
 801bc72:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 801bc74:	f245 5355 	movw	r3, #21845	; 0x5555
 801bc78:	81bb      	strh	r3, [r7, #12]
 801bc7a:	2301      	movs	r3, #1
 801bc7c:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 801bc7e:	4b1c      	ldr	r3, [pc, #112]	; (801bcf0 <EE_ReadVariable+0x8c>)
 801bc80:	613b      	str	r3, [r7, #16]
 801bc82:	4b1b      	ldr	r3, [pc, #108]	; (801bcf0 <EE_ReadVariable+0x8c>)
 801bc84:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801bc86:	2000      	movs	r0, #0
 801bc88:	f000 f87e 	bl	801bd88 <EE_FindValidPage>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 801bc90:	89fb      	ldrh	r3, [r7, #14]
 801bc92:	2bab      	cmp	r3, #171	; 0xab
 801bc94:	d101      	bne.n	801bc9a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 801bc96:	23ab      	movs	r3, #171	; 0xab
 801bc98:	e025      	b.n	801bce6 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801bc9a:	89fb      	ldrh	r3, [r7, #14]
 801bc9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801bca0:	3302      	adds	r3, #2
 801bca2:	039b      	lsls	r3, r3, #14
 801bca4:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801bca6:	89fb      	ldrh	r3, [r7, #14]
 801bca8:	3301      	adds	r3, #1
 801bcaa:	039a      	lsls	r2, r3, #14
 801bcac:	4b11      	ldr	r3, [pc, #68]	; (801bcf4 <EE_ReadVariable+0x90>)
 801bcae:	4413      	add	r3, r2
 801bcb0:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 801bcb2:	e012      	b.n	801bcda <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 801bcb4:	693b      	ldr	r3, [r7, #16]
 801bcb6:	881b      	ldrh	r3, [r3, #0]
 801bcb8:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 801bcba:	89ba      	ldrh	r2, [r7, #12]
 801bcbc:	88fb      	ldrh	r3, [r7, #6]
 801bcbe:	429a      	cmp	r2, r3
 801bcc0:	d108      	bne.n	801bcd4 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 801bcc2:	693b      	ldr	r3, [r7, #16]
 801bcc4:	3b02      	subs	r3, #2
 801bcc6:	881b      	ldrh	r3, [r3, #0]
 801bcc8:	b29a      	uxth	r2, r3
 801bcca:	683b      	ldr	r3, [r7, #0]
 801bccc:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 801bcce:	2300      	movs	r3, #0
 801bcd0:	82fb      	strh	r3, [r7, #22]

      break;
 801bcd2:	e007      	b.n	801bce4 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 801bcd4:	693b      	ldr	r3, [r7, #16]
 801bcd6:	3b04      	subs	r3, #4
 801bcd8:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 801bcda:	68bb      	ldr	r3, [r7, #8]
 801bcdc:	3302      	adds	r3, #2
 801bcde:	693a      	ldr	r2, [r7, #16]
 801bce0:	429a      	cmp	r2, r3
 801bce2:	d8e7      	bhi.n	801bcb4 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 801bce4:	8afb      	ldrh	r3, [r7, #22]
}
 801bce6:	4618      	mov	r0, r3
 801bce8:	3718      	adds	r7, #24
 801bcea:	46bd      	mov	sp, r7
 801bcec:	bd80      	pop	{r7, pc}
 801bcee:	bf00      	nop
 801bcf0:	08008000 	.word	0x08008000
 801bcf4:	08007ffe 	.word	0x08007ffe

0801bcf8 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 801bcf8:	b580      	push	{r7, lr}
 801bcfa:	b084      	sub	sp, #16
 801bcfc:	af00      	add	r7, sp, #0
 801bcfe:	4603      	mov	r3, r0
 801bd00:	460a      	mov	r2, r1
 801bd02:	80fb      	strh	r3, [r7, #6]
 801bd04:	4613      	mov	r3, r2
 801bd06:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 801bd08:	2300      	movs	r3, #0
 801bd0a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801bd0c:	88ba      	ldrh	r2, [r7, #4]
 801bd0e:	88fb      	ldrh	r3, [r7, #6]
 801bd10:	4611      	mov	r1, r2
 801bd12:	4618      	mov	r0, r3
 801bd14:	f000 f87e 	bl	801be14 <EE_VerifyPageFullWriteVariable>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 801bd1c:	89fb      	ldrh	r3, [r7, #14]
 801bd1e:	2b80      	cmp	r3, #128	; 0x80
 801bd20:	d107      	bne.n	801bd32 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 801bd22:	88ba      	ldrh	r2, [r7, #4]
 801bd24:	88fb      	ldrh	r3, [r7, #6]
 801bd26:	4611      	mov	r1, r2
 801bd28:	4618      	mov	r0, r3
 801bd2a:	f000 f8c9 	bl	801bec0 <EE_PageTransfer>
 801bd2e:	4603      	mov	r3, r0
 801bd30:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 801bd32:	89fb      	ldrh	r3, [r7, #14]
}
 801bd34:	4618      	mov	r0, r3
 801bd36:	3710      	adds	r7, #16
 801bd38:	46bd      	mov	sp, r7
 801bd3a:	bd80      	pop	{r7, pc}

0801bd3c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static FLASH_Status EE_Format(void)
{
 801bd3c:	b580      	push	{r7, lr}
 801bd3e:	b082      	sub	sp, #8
 801bd40:	af00      	add	r7, sp, #0
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 801bd42:	2303      	movs	r3, #3
 801bd44:	71fb      	strb	r3, [r7, #7]

  /* Erase Page0 */
  FLASH_Erase_Sector(PAGE0_ID, VOLTAGE_RANGE);
 801bd46:	2102      	movs	r1, #2
 801bd48:	2002      	movs	r0, #2
 801bd4a:	f7f7 fd63 	bl	8013814 <FLASH_Erase_Sector>

  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 801bd4e:	79fb      	ldrb	r3, [r7, #7]
 801bd50:	2b03      	cmp	r3, #3
 801bd52:	d001      	beq.n	801bd58 <EE_Format+0x1c>
  {
    return FlashStatus;
 801bd54:	79fb      	ldrb	r3, [r7, #7]
 801bd56:	e011      	b.n	801bd7c <EE_Format+0x40>
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGE0_BASE_ADDRESS, VALID_PAGE);
 801bd58:	f04f 0200 	mov.w	r2, #0
 801bd5c:	f04f 0300 	mov.w	r3, #0
 801bd60:	4908      	ldr	r1, [pc, #32]	; (801bd84 <EE_Format+0x48>)
 801bd62:	2001      	movs	r0, #1
 801bd64:	f7f7 fba0 	bl	80134a8 <HAL_FLASH_Program>

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 801bd68:	79fb      	ldrb	r3, [r7, #7]
 801bd6a:	2b03      	cmp	r3, #3
 801bd6c:	d001      	beq.n	801bd72 <EE_Format+0x36>
  {
    return FlashStatus;
 801bd6e:	79fb      	ldrb	r3, [r7, #7]
 801bd70:	e004      	b.n	801bd7c <EE_Format+0x40>
  }

  /* Erase Page1 */
  FLASH_Erase_Sector(PAGE1_ID, VOLTAGE_RANGE);
 801bd72:	2102      	movs	r1, #2
 801bd74:	2003      	movs	r0, #3
 801bd76:	f7f7 fd4d 	bl	8013814 <FLASH_Erase_Sector>

  /* Return Page1 erase operation status */
  return FlashStatus;
 801bd7a:	79fb      	ldrb	r3, [r7, #7]
}
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	3708      	adds	r7, #8
 801bd80:	46bd      	mov	sp, r7
 801bd82:	bd80      	pop	{r7, pc}
 801bd84:	08008000 	.word	0x08008000

0801bd88 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 801bd88:	b480      	push	{r7}
 801bd8a:	b085      	sub	sp, #20
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	4603      	mov	r3, r0
 801bd90:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 801bd92:	2306      	movs	r3, #6
 801bd94:	81fb      	strh	r3, [r7, #14]
 801bd96:	2306      	movs	r3, #6
 801bd98:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801bd9a:	4b1c      	ldr	r3, [pc, #112]	; (801be0c <EE_FindValidPage+0x84>)
 801bd9c:	881b      	ldrh	r3, [r3, #0]
 801bd9e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801bda0:	4b1b      	ldr	r3, [pc, #108]	; (801be10 <EE_FindValidPage+0x88>)
 801bda2:	881b      	ldrh	r3, [r3, #0]
 801bda4:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 801bda6:	79fb      	ldrb	r3, [r7, #7]
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d01b      	beq.n	801bde4 <EE_FindValidPage+0x5c>
 801bdac:	2b01      	cmp	r3, #1
 801bdae:	d125      	bne.n	801bdfc <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 801bdb0:	89bb      	ldrh	r3, [r7, #12]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d108      	bne.n	801bdc8 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 801bdb6:	89fb      	ldrh	r3, [r7, #14]
 801bdb8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801bdbc:	4293      	cmp	r3, r2
 801bdbe:	d101      	bne.n	801bdc4 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	e01c      	b.n	801bdfe <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 801bdc4:	2301      	movs	r3, #1
 801bdc6:	e01a      	b.n	801bdfe <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 801bdc8:	89fb      	ldrh	r3, [r7, #14]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d108      	bne.n	801bde0 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 801bdce:	89bb      	ldrh	r3, [r7, #12]
 801bdd0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801bdd4:	4293      	cmp	r3, r2
 801bdd6:	d101      	bne.n	801bddc <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 801bdd8:	2301      	movs	r3, #1
 801bdda:	e010      	b.n	801bdfe <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 801bddc:	2300      	movs	r3, #0
 801bdde:	e00e      	b.n	801bdfe <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 801bde0:	23ab      	movs	r3, #171	; 0xab
 801bde2:	e00c      	b.n	801bdfe <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 801bde4:	89fb      	ldrh	r3, [r7, #14]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d101      	bne.n	801bdee <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 801bdea:	2300      	movs	r3, #0
 801bdec:	e007      	b.n	801bdfe <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 801bdee:	89bb      	ldrh	r3, [r7, #12]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d101      	bne.n	801bdf8 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 801bdf4:	2301      	movs	r3, #1
 801bdf6:	e002      	b.n	801bdfe <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 801bdf8:	23ab      	movs	r3, #171	; 0xab
 801bdfa:	e000      	b.n	801bdfe <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 801bdfc:	2300      	movs	r3, #0
  }
}
 801bdfe:	4618      	mov	r0, r3
 801be00:	3714      	adds	r7, #20
 801be02:	46bd      	mov	sp, r7
 801be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be08:	4770      	bx	lr
 801be0a:	bf00      	nop
 801be0c:	08008000 	.word	0x08008000
 801be10:	0800c000 	.word	0x0800c000

0801be14 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b086      	sub	sp, #24
 801be18:	af00      	add	r7, sp, #0
 801be1a:	4603      	mov	r3, r0
 801be1c:	460a      	mov	r2, r1
 801be1e:	80fb      	strh	r3, [r7, #6]
 801be20:	4613      	mov	r3, r2
 801be22:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 801be24:	2303      	movs	r3, #3
 801be26:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 801be28:	2300      	movs	r3, #0
 801be2a:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 801be2c:	4b21      	ldr	r3, [pc, #132]	; (801beb4 <EE_VerifyPageFullWriteVariable+0xa0>)
 801be2e:	617b      	str	r3, [r7, #20]
 801be30:	4b21      	ldr	r3, [pc, #132]	; (801beb8 <EE_VerifyPageFullWriteVariable+0xa4>)
 801be32:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 801be34:	2001      	movs	r0, #1
 801be36:	f7ff ffa7 	bl	801bd88 <EE_FindValidPage>
 801be3a:	4603      	mov	r3, r0
 801be3c:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 801be3e:	8a3b      	ldrh	r3, [r7, #16]
 801be40:	2bab      	cmp	r3, #171	; 0xab
 801be42:	d101      	bne.n	801be48 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 801be44:	23ab      	movs	r3, #171	; 0xab
 801be46:	e031      	b.n	801beac <EE_VerifyPageFullWriteVariable+0x98>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801be48:	8a3b      	ldrh	r3, [r7, #16]
 801be4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801be4e:	3302      	adds	r3, #2
 801be50:	039b      	lsls	r3, r3, #14
 801be52:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801be54:	8a3b      	ldrh	r3, [r7, #16]
 801be56:	3301      	adds	r3, #1
 801be58:	039a      	lsls	r2, r3, #14
 801be5a:	4b18      	ldr	r3, [pc, #96]	; (801bebc <EE_VerifyPageFullWriteVariable+0xa8>)
 801be5c:	4413      	add	r3, r2
 801be5e:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 801be60:	e01f      	b.n	801bea2 <EE_VerifyPageFullWriteVariable+0x8e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 801be62:	697b      	ldr	r3, [r7, #20]
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be6a:	d117      	bne.n	801be9c <EE_VerifyPageFullWriteVariable+0x88>
    {
      /* Set variable data */
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address, Data);
 801be6c:	88ba      	ldrh	r2, [r7, #4]
 801be6e:	f04f 0300 	mov.w	r3, #0
 801be72:	6979      	ldr	r1, [r7, #20]
 801be74:	2001      	movs	r0, #1
 801be76:	f7f7 fb17 	bl	80134a8 <HAL_FLASH_Program>
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 801be7a:	7cfb      	ldrb	r3, [r7, #19]
 801be7c:	2b03      	cmp	r3, #3
 801be7e:	d002      	beq.n	801be86 <EE_VerifyPageFullWriteVariable+0x72>
      {
        return FlashStatus;
 801be80:	7cfb      	ldrb	r3, [r7, #19]
 801be82:	b29b      	uxth	r3, r3
 801be84:	e012      	b.n	801beac <EE_VerifyPageFullWriteVariable+0x98>
      }
      /* Set variable virtual address */
      HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2, VirtAddress);
 801be86:	697b      	ldr	r3, [r7, #20]
 801be88:	1c99      	adds	r1, r3, #2
 801be8a:	88fa      	ldrh	r2, [r7, #6]
 801be8c:	f04f 0300 	mov.w	r3, #0
 801be90:	2001      	movs	r0, #1
 801be92:	f7f7 fb09 	bl	80134a8 <HAL_FLASH_Program>
      /* Return program operation status */
      return FlashStatus;
 801be96:	7cfb      	ldrb	r3, [r7, #19]
 801be98:	b29b      	uxth	r3, r3
 801be9a:	e007      	b.n	801beac <EE_VerifyPageFullWriteVariable+0x98>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 801be9c:	697b      	ldr	r3, [r7, #20]
 801be9e:	3304      	adds	r3, #4
 801bea0:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 801bea2:	697a      	ldr	r2, [r7, #20]
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	429a      	cmp	r2, r3
 801bea8:	d3db      	bcc.n	801be62 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 801beaa:	2380      	movs	r3, #128	; 0x80
}
 801beac:	4618      	mov	r0, r3
 801beae:	3718      	adds	r7, #24
 801beb0:	46bd      	mov	sp, r7
 801beb2:	bd80      	pop	{r7, pc}
 801beb4:	08008000 	.word	0x08008000
 801beb8:	0800c000 	.word	0x0800c000
 801bebc:	08007ffe 	.word	0x08007ffe

0801bec0 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 801bec0:	b580      	push	{r7, lr}
 801bec2:	b086      	sub	sp, #24
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	4603      	mov	r3, r0
 801bec8:	460a      	mov	r2, r1
 801beca:	80fb      	strh	r3, [r7, #6]
 801becc:	4613      	mov	r3, r2
 801bece:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 801bed0:	2303      	movs	r3, #3
 801bed2:	73fb      	strb	r3, [r7, #15]
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 801bed4:	4b45      	ldr	r3, [pc, #276]	; (801bfec <EE_PageTransfer+0x12c>)
 801bed6:	617b      	str	r3, [r7, #20]
  uint16_t OldPageId=0;
 801bed8:	2300      	movs	r3, #0
 801beda:	827b      	strh	r3, [r7, #18]
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 801bedc:	2300      	movs	r3, #0
 801bede:	81bb      	strh	r3, [r7, #12]
 801bee0:	2300      	movs	r3, #0
 801bee2:	823b      	strh	r3, [r7, #16]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 801bee4:	2300      	movs	r3, #0
 801bee6:	817b      	strh	r3, [r7, #10]
 801bee8:	2300      	movs	r3, #0
 801beea:	813b      	strh	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801beec:	2000      	movs	r0, #0
 801beee:	f7ff ff4b 	bl	801bd88 <EE_FindValidPage>
 801bef2:	4603      	mov	r3, r0
 801bef4:	81bb      	strh	r3, [r7, #12]

  if (ValidPage == PAGE1)       /* Page1 valid */
 801bef6:	89bb      	ldrh	r3, [r7, #12]
 801bef8:	2b01      	cmp	r3, #1
 801befa:	d104      	bne.n	801bf06 <EE_PageTransfer+0x46>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 801befc:	4b3b      	ldr	r3, [pc, #236]	; (801bfec <EE_PageTransfer+0x12c>)
 801befe:	617b      	str	r3, [r7, #20]

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 801bf00:	2303      	movs	r3, #3
 801bf02:	827b      	strh	r3, [r7, #18]
 801bf04:	e009      	b.n	801bf1a <EE_PageTransfer+0x5a>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 801bf06:	89bb      	ldrh	r3, [r7, #12]
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d104      	bne.n	801bf16 <EE_PageTransfer+0x56>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 801bf0c:	4b38      	ldr	r3, [pc, #224]	; (801bff0 <EE_PageTransfer+0x130>)
 801bf0e:	617b      	str	r3, [r7, #20]

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 801bf10:	2302      	movs	r3, #2
 801bf12:	827b      	strh	r3, [r7, #18]
 801bf14:	e001      	b.n	801bf1a <EE_PageTransfer+0x5a>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 801bf16:	23ab      	movs	r3, #171	; 0xab
 801bf18:	e063      	b.n	801bfe2 <EE_PageTransfer+0x122>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress, RECEIVE_DATA);
 801bf1a:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801bf1e:	f04f 0300 	mov.w	r3, #0
 801bf22:	6979      	ldr	r1, [r7, #20]
 801bf24:	2001      	movs	r0, #1
 801bf26:	f7f7 fabf 	bl	80134a8 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 801bf2a:	7bfb      	ldrb	r3, [r7, #15]
 801bf2c:	2b03      	cmp	r3, #3
 801bf2e:	d002      	beq.n	801bf36 <EE_PageTransfer+0x76>
  {
    return FlashStatus;
 801bf30:	7bfb      	ldrb	r3, [r7, #15]
 801bf32:	b29b      	uxth	r3, r3
 801bf34:	e055      	b.n	801bfe2 <EE_PageTransfer+0x122>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801bf36:	88ba      	ldrh	r2, [r7, #4]
 801bf38:	88fb      	ldrh	r3, [r7, #6]
 801bf3a:	4611      	mov	r1, r2
 801bf3c:	4618      	mov	r0, r3
 801bf3e:	f7ff ff69 	bl	801be14 <EE_VerifyPageFullWriteVariable>
 801bf42:	4603      	mov	r3, r0
 801bf44:	817b      	strh	r3, [r7, #10]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != FLASH_COMPLETE)
 801bf46:	897b      	ldrh	r3, [r7, #10]
 801bf48:	2b03      	cmp	r3, #3
 801bf4a:	d001      	beq.n	801bf50 <EE_PageTransfer+0x90>
  {
    return EepromStatus;
 801bf4c:	897b      	ldrh	r3, [r7, #10]
 801bf4e:	e048      	b.n	801bfe2 <EE_PageTransfer+0x122>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801bf50:	2300      	movs	r3, #0
 801bf52:	823b      	strh	r3, [r7, #16]
 801bf54:	e027      	b.n	801bfa6 <EE_PageTransfer+0xe6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 801bf56:	8a3b      	ldrh	r3, [r7, #16]
 801bf58:	4a26      	ldr	r2, [pc, #152]	; (801bff4 <EE_PageTransfer+0x134>)
 801bf5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bf5e:	88fa      	ldrh	r2, [r7, #6]
 801bf60:	429a      	cmp	r2, r3
 801bf62:	d01d      	beq.n	801bfa0 <EE_PageTransfer+0xe0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801bf64:	8a3b      	ldrh	r3, [r7, #16]
 801bf66:	4a23      	ldr	r2, [pc, #140]	; (801bff4 <EE_PageTransfer+0x134>)
 801bf68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bf6c:	4922      	ldr	r1, [pc, #136]	; (801bff8 <EE_PageTransfer+0x138>)
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f7ff fe78 	bl	801bc64 <EE_ReadVariable>
 801bf74:	4603      	mov	r3, r0
 801bf76:	813b      	strh	r3, [r7, #8]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 801bf78:	893b      	ldrh	r3, [r7, #8]
 801bf7a:	2b01      	cmp	r3, #1
 801bf7c:	d010      	beq.n	801bfa0 <EE_PageTransfer+0xe0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801bf7e:	8a3b      	ldrh	r3, [r7, #16]
 801bf80:	4a1c      	ldr	r2, [pc, #112]	; (801bff4 <EE_PageTransfer+0x134>)
 801bf82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bf86:	4a1c      	ldr	r2, [pc, #112]	; (801bff8 <EE_PageTransfer+0x138>)
 801bf88:	8812      	ldrh	r2, [r2, #0]
 801bf8a:	4611      	mov	r1, r2
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	f7ff ff41 	bl	801be14 <EE_VerifyPageFullWriteVariable>
 801bf92:	4603      	mov	r3, r0
 801bf94:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != FLASH_COMPLETE)
 801bf96:	897b      	ldrh	r3, [r7, #10]
 801bf98:	2b03      	cmp	r3, #3
 801bf9a:	d001      	beq.n	801bfa0 <EE_PageTransfer+0xe0>
        {
          return EepromStatus;
 801bf9c:	897b      	ldrh	r3, [r7, #10]
 801bf9e:	e020      	b.n	801bfe2 <EE_PageTransfer+0x122>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801bfa0:	8a3b      	ldrh	r3, [r7, #16]
 801bfa2:	3301      	adds	r3, #1
 801bfa4:	823b      	strh	r3, [r7, #16]
 801bfa6:	8a3b      	ldrh	r3, [r7, #16]
 801bfa8:	2b14      	cmp	r3, #20
 801bfaa:	d9d4      	bls.n	801bf56 <EE_PageTransfer+0x96>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_Erase_Sector(OldPageId, VOLTAGE_RANGE);
 801bfac:	8a7b      	ldrh	r3, [r7, #18]
 801bfae:	2102      	movs	r1, #2
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f7f7 fc2f 	bl	8013814 <FLASH_Erase_Sector>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 801bfb6:	7bfb      	ldrb	r3, [r7, #15]
 801bfb8:	2b03      	cmp	r3, #3
 801bfba:	d002      	beq.n	801bfc2 <EE_PageTransfer+0x102>
  {
    return FlashStatus;
 801bfbc:	7bfb      	ldrb	r3, [r7, #15]
 801bfbe:	b29b      	uxth	r3, r3
 801bfc0:	e00f      	b.n	801bfe2 <EE_PageTransfer+0x122>
  }

  /* Set new Page status to VALID_PAGE status */
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress, VALID_PAGE);
 801bfc2:	f04f 0200 	mov.w	r2, #0
 801bfc6:	f04f 0300 	mov.w	r3, #0
 801bfca:	6979      	ldr	r1, [r7, #20]
 801bfcc:	2001      	movs	r0, #1
 801bfce:	f7f7 fa6b 	bl	80134a8 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 801bfd2:	7bfb      	ldrb	r3, [r7, #15]
 801bfd4:	2b03      	cmp	r3, #3
 801bfd6:	d002      	beq.n	801bfde <EE_PageTransfer+0x11e>
  {
    return FlashStatus;
 801bfd8:	7bfb      	ldrb	r3, [r7, #15]
 801bfda:	b29b      	uxth	r3, r3
 801bfdc:	e001      	b.n	801bfe2 <EE_PageTransfer+0x122>
  }

  /* Return last operation flash status */
  return FlashStatus;
 801bfde:	7bfb      	ldrb	r3, [r7, #15]
 801bfe0:	b29b      	uxth	r3, r3
}
 801bfe2:	4618      	mov	r0, r3
 801bfe4:	3718      	adds	r7, #24
 801bfe6:	46bd      	mov	sp, r7
 801bfe8:	bd80      	pop	{r7, pc}
 801bfea:	bf00      	nop
 801bfec:	08008000 	.word	0x08008000
 801bff0:	0800c000 	.word	0x0800c000
 801bff4:	200048a8 	.word	0x200048a8
 801bff8:	200005d2 	.word	0x200005d2

0801bffc <CommandLoop>:

void keypressInit(void){

}

void CommandLoop(uint8_t loopms){
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b084      	sub	sp, #16
 801c000:	af00      	add	r7, sp, #0
 801c002:	4603      	mov	r3, r0
 801c004:	71fb      	strb	r3, [r7, #7]
	uint8_t command = 0;
 801c006:	2300      	movs	r3, #0
 801c008:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = 0; i<(sizeof(CMD_Structure)/sizeof(CMD_Parameter)); i++){
 801c00a:	2300      	movs	r3, #0
 801c00c:	73fb      	strb	r3, [r7, #15]
 801c00e:	e01a      	b.n	801c046 <CommandLoop+0x4a>
		CMD_Structure[i].CMD_DebounceCONSTValue = DEBOUNCE_MS/loopms;
 801c010:	79fb      	ldrb	r3, [r7, #7]
 801c012:	2264      	movs	r2, #100	; 0x64
 801c014:	fb92 f2f3 	sdiv	r2, r2, r3
 801c018:	7bfb      	ldrb	r3, [r7, #15]
 801c01a:	b2d1      	uxtb	r1, r2
 801c01c:	4a2f      	ldr	r2, [pc, #188]	; (801c0dc <CommandLoop+0xe0>)
 801c01e:	011b      	lsls	r3, r3, #4
 801c020:	4413      	add	r3, r2
 801c022:	3308      	adds	r3, #8
 801c024:	460a      	mov	r2, r1
 801c026:	701a      	strb	r2, [r3, #0]
		CMD_Structure[i].CMD_ContinuousModeDebounceValue = CONTINUOUSMODE_DEBOUNCE_MS/loopms;
 801c028:	79fb      	ldrb	r3, [r7, #7]
 801c02a:	2264      	movs	r2, #100	; 0x64
 801c02c:	fb92 f2f3 	sdiv	r2, r2, r3
 801c030:	7bfb      	ldrb	r3, [r7, #15]
 801c032:	b2d1      	uxtb	r1, r2
 801c034:	4a29      	ldr	r2, [pc, #164]	; (801c0dc <CommandLoop+0xe0>)
 801c036:	011b      	lsls	r3, r3, #4
 801c038:	4413      	add	r3, r2
 801c03a:	330d      	adds	r3, #13
 801c03c:	460a      	mov	r2, r1
 801c03e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<(sizeof(CMD_Structure)/sizeof(CMD_Parameter)); i++){
 801c040:	7bfb      	ldrb	r3, [r7, #15]
 801c042:	3301      	adds	r3, #1
 801c044:	73fb      	strb	r3, [r7, #15]
 801c046:	7bfb      	ldrb	r3, [r7, #15]
 801c048:	2b04      	cmp	r3, #4
 801c04a:	d9e1      	bls.n	801c010 <CommandLoop+0x14>
	}

	if(HAL_GPIO_ReadPin(uC_B1_GPIO_Port, uC_B1_Pin) == GPIO_PIN_SET){
 801c04c:	2101      	movs	r1, #1
 801c04e:	4824      	ldr	r0, [pc, #144]	; (801c0e0 <CommandLoop+0xe4>)
 801c050:	f7f7 fdbc 	bl	8013bcc <HAL_GPIO_ReadPin>
 801c054:	4603      	mov	r3, r0
 801c056:	2b01      	cmp	r3, #1
 801c058:	d108      	bne.n	801c06c <CommandLoop+0x70>
		command = 0xA4;
 801c05a:	23a4      	movs	r3, #164	; 0xa4
 801c05c:	73bb      	strb	r3, [r7, #14]
		updateCommand(command,loopms);
 801c05e:	7bbb      	ldrb	r3, [r7, #14]
 801c060:	b29b      	uxth	r3, r3
 801c062:	79fa      	ldrb	r2, [r7, #7]
 801c064:	4611      	mov	r1, r2
 801c066:	4618      	mov	r0, r3
 801c068:	f000 f83c 	bl	801c0e4 <updateCommand>
	}

	if(HAL_GPIO_ReadPin(uC_B2_GPIO_Port, uC_B2_Pin) == GPIO_PIN_SET){
 801c06c:	2102      	movs	r1, #2
 801c06e:	481c      	ldr	r0, [pc, #112]	; (801c0e0 <CommandLoop+0xe4>)
 801c070:	f7f7 fdac 	bl	8013bcc <HAL_GPIO_ReadPin>
 801c074:	4603      	mov	r3, r0
 801c076:	2b01      	cmp	r3, #1
 801c078:	d108      	bne.n	801c08c <CommandLoop+0x90>
		command = 0xA3;
 801c07a:	23a3      	movs	r3, #163	; 0xa3
 801c07c:	73bb      	strb	r3, [r7, #14]
		updateCommand(command,loopms);
 801c07e:	7bbb      	ldrb	r3, [r7, #14]
 801c080:	b29b      	uxth	r3, r3
 801c082:	79fa      	ldrb	r2, [r7, #7]
 801c084:	4611      	mov	r1, r2
 801c086:	4618      	mov	r0, r3
 801c088:	f000 f82c 	bl	801c0e4 <updateCommand>
	}

	if(HAL_GPIO_ReadPin(uC_B3_GPIO_Port, uC_B3_Pin) == GPIO_PIN_SET){
 801c08c:	2104      	movs	r1, #4
 801c08e:	4814      	ldr	r0, [pc, #80]	; (801c0e0 <CommandLoop+0xe4>)
 801c090:	f7f7 fd9c 	bl	8013bcc <HAL_GPIO_ReadPin>
 801c094:	4603      	mov	r3, r0
 801c096:	2b01      	cmp	r3, #1
 801c098:	d108      	bne.n	801c0ac <CommandLoop+0xb0>
		command = 0xA2;
 801c09a:	23a2      	movs	r3, #162	; 0xa2
 801c09c:	73bb      	strb	r3, [r7, #14]
		updateCommand(command,loopms);
 801c09e:	7bbb      	ldrb	r3, [r7, #14]
 801c0a0:	b29b      	uxth	r3, r3
 801c0a2:	79fa      	ldrb	r2, [r7, #7]
 801c0a4:	4611      	mov	r1, r2
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f000 f81c 	bl	801c0e4 <updateCommand>
	}

	if(HAL_GPIO_ReadPin(uC_B4_GPIO_Port, uC_B4_Pin) == GPIO_PIN_SET){
 801c0ac:	2108      	movs	r1, #8
 801c0ae:	480c      	ldr	r0, [pc, #48]	; (801c0e0 <CommandLoop+0xe4>)
 801c0b0:	f7f7 fd8c 	bl	8013bcc <HAL_GPIO_ReadPin>
 801c0b4:	4603      	mov	r3, r0
 801c0b6:	2b01      	cmp	r3, #1
 801c0b8:	d108      	bne.n	801c0cc <CommandLoop+0xd0>
		command = 0xA1;
 801c0ba:	23a1      	movs	r3, #161	; 0xa1
 801c0bc:	73bb      	strb	r3, [r7, #14]
		updateCommand(command,loopms);
 801c0be:	7bbb      	ldrb	r3, [r7, #14]
 801c0c0:	b29b      	uxth	r3, r3
 801c0c2:	79fa      	ldrb	r2, [r7, #7]
 801c0c4:	4611      	mov	r1, r2
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	f000 f80c 	bl	801c0e4 <updateCommand>
	}
	synchronizeCommands();
 801c0cc:	f000 f9de 	bl	801c48c <synchronizeCommands>
	acquire_appl_keydemand();
 801c0d0:	f000 fa46 	bl	801c560 <acquire_appl_keydemand>

}
 801c0d4:	bf00      	nop
 801c0d6:	3710      	adds	r7, #16
 801c0d8:	46bd      	mov	sp, r7
 801c0da:	bd80      	pop	{r7, pc}
 801c0dc:	20000084 	.word	0x20000084
 801c0e0:	40020800 	.word	0x40020800

0801c0e4 <updateCommand>:


void updateCommand(uint16_t Command, uint8_t loopms){
 801c0e4:	b480      	push	{r7}
 801c0e6:	b085      	sub	sp, #20
 801c0e8:	af00      	add	r7, sp, #0
 801c0ea:	4603      	mov	r3, r0
 801c0ec:	460a      	mov	r2, r1
 801c0ee:	80fb      	strh	r3, [r7, #6]
 801c0f0:	4613      	mov	r3, r2
 801c0f2:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i<(sizeof(CMD_Structure)/sizeof(CMD_Parameter)); i++){
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	73fb      	strb	r3, [r7, #15]
 801c0f8:	e1ba      	b.n	801c470 <updateCommand+0x38c>
		if(CMD_Structure[i].CMD_Command == Command){
 801c0fa:	7bfb      	ldrb	r3, [r7, #15]
 801c0fc:	4a78      	ldr	r2, [pc, #480]	; (801c2e0 <updateCommand+0x1fc>)
 801c0fe:	011b      	lsls	r3, r3, #4
 801c100:	4413      	add	r3, r2
 801c102:	881b      	ldrh	r3, [r3, #0]
 801c104:	88fa      	ldrh	r2, [r7, #6]
 801c106:	429a      	cmp	r2, r3
 801c108:	f040 81af 	bne.w	801c46a <updateCommand+0x386>
			CMD_Structure[i].CMD_CurrentState = 1;
 801c10c:	7bfb      	ldrb	r3, [r7, #15]
 801c10e:	4a74      	ldr	r2, [pc, #464]	; (801c2e0 <updateCommand+0x1fc>)
 801c110:	011b      	lsls	r3, r3, #4
 801c112:	4413      	add	r3, r2
 801c114:	3309      	adds	r3, #9
 801c116:	2201      	movs	r2, #1
 801c118:	701a      	strb	r2, [r3, #0]
			CMD_Structure[i].CMD_synchro++;
 801c11a:	7bfb      	ldrb	r3, [r7, #15]
 801c11c:	4970      	ldr	r1, [pc, #448]	; (801c2e0 <updateCommand+0x1fc>)
 801c11e:	011a      	lsls	r2, r3, #4
 801c120:	440a      	add	r2, r1
 801c122:	3204      	adds	r2, #4
 801c124:	8812      	ldrh	r2, [r2, #0]
 801c126:	3201      	adds	r2, #1
 801c128:	b291      	uxth	r1, r2
 801c12a:	4a6d      	ldr	r2, [pc, #436]	; (801c2e0 <updateCommand+0x1fc>)
 801c12c:	011b      	lsls	r3, r3, #4
 801c12e:	4413      	add	r3, r2
 801c130:	3304      	adds	r3, #4
 801c132:	460a      	mov	r2, r1
 801c134:	801a      	strh	r2, [r3, #0]
			if(CMD_Structure[i].CMD_lastState == 1){
 801c136:	7bfb      	ldrb	r3, [r7, #15]
 801c138:	4a69      	ldr	r2, [pc, #420]	; (801c2e0 <updateCommand+0x1fc>)
 801c13a:	011b      	lsls	r3, r3, #4
 801c13c:	4413      	add	r3, r2
 801c13e:	330a      	adds	r3, #10
 801c140:	781b      	ldrb	r3, [r3, #0]
 801c142:	2b01      	cmp	r3, #1
 801c144:	f040 8172 	bne.w	801c42c <updateCommand+0x348>
				if((CMD_Structure[i].CMD_DebouncedState == 0) && (CMD_Structure[i].CMD_ContinuousPressCount == 0) && (CMD_Structure[i].CMD_ContinuousModeEnabled == 0)){
 801c148:	7bfb      	ldrb	r3, [r7, #15]
 801c14a:	4a65      	ldr	r2, [pc, #404]	; (801c2e0 <updateCommand+0x1fc>)
 801c14c:	011b      	lsls	r3, r3, #4
 801c14e:	4413      	add	r3, r2
 801c150:	330c      	adds	r3, #12
 801c152:	781b      	ldrb	r3, [r3, #0]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d148      	bne.n	801c1ea <updateCommand+0x106>
 801c158:	7bfb      	ldrb	r3, [r7, #15]
 801c15a:	4a61      	ldr	r2, [pc, #388]	; (801c2e0 <updateCommand+0x1fc>)
 801c15c:	011b      	lsls	r3, r3, #4
 801c15e:	4413      	add	r3, r2
 801c160:	3302      	adds	r3, #2
 801c162:	781b      	ldrb	r3, [r3, #0]
 801c164:	2b00      	cmp	r3, #0
 801c166:	d140      	bne.n	801c1ea <updateCommand+0x106>
 801c168:	7bfb      	ldrb	r3, [r7, #15]
 801c16a:	4a5d      	ldr	r2, [pc, #372]	; (801c2e0 <updateCommand+0x1fc>)
 801c16c:	011b      	lsls	r3, r3, #4
 801c16e:	4413      	add	r3, r2
 801c170:	330b      	adds	r3, #11
 801c172:	781b      	ldrb	r3, [r3, #0]
 801c174:	2b00      	cmp	r3, #0
 801c176:	d138      	bne.n	801c1ea <updateCommand+0x106>
					CMD_Structure[i].CMD_DebounceCount++;
 801c178:	7bfb      	ldrb	r3, [r7, #15]
 801c17a:	4959      	ldr	r1, [pc, #356]	; (801c2e0 <updateCommand+0x1fc>)
 801c17c:	011a      	lsls	r2, r3, #4
 801c17e:	440a      	add	r2, r1
 801c180:	3203      	adds	r2, #3
 801c182:	7812      	ldrb	r2, [r2, #0]
 801c184:	3201      	adds	r2, #1
 801c186:	b2d1      	uxtb	r1, r2
 801c188:	4a55      	ldr	r2, [pc, #340]	; (801c2e0 <updateCommand+0x1fc>)
 801c18a:	011b      	lsls	r3, r3, #4
 801c18c:	4413      	add	r3, r2
 801c18e:	3303      	adds	r3, #3
 801c190:	460a      	mov	r2, r1
 801c192:	701a      	strb	r2, [r3, #0]
					if(CMD_Structure[i].CMD_DebounceCount >= CMD_Structure[i].CMD_DebounceCONSTValue){
 801c194:	7bfb      	ldrb	r3, [r7, #15]
 801c196:	4a52      	ldr	r2, [pc, #328]	; (801c2e0 <updateCommand+0x1fc>)
 801c198:	011b      	lsls	r3, r3, #4
 801c19a:	4413      	add	r3, r2
 801c19c:	3303      	adds	r3, #3
 801c19e:	781a      	ldrb	r2, [r3, #0]
 801c1a0:	7bfb      	ldrb	r3, [r7, #15]
 801c1a2:	494f      	ldr	r1, [pc, #316]	; (801c2e0 <updateCommand+0x1fc>)
 801c1a4:	011b      	lsls	r3, r3, #4
 801c1a6:	440b      	add	r3, r1
 801c1a8:	3308      	adds	r3, #8
 801c1aa:	781b      	ldrb	r3, [r3, #0]
 801c1ac:	429a      	cmp	r2, r3
 801c1ae:	f0c0 815b 	bcc.w	801c468 <updateCommand+0x384>
						CMD_Structure[i].CMD_DebounceCount = CMD_Structure[i].CMD_DebounceCONSTValue;
 801c1b2:	7bfa      	ldrb	r2, [r7, #15]
 801c1b4:	7bfb      	ldrb	r3, [r7, #15]
 801c1b6:	494a      	ldr	r1, [pc, #296]	; (801c2e0 <updateCommand+0x1fc>)
 801c1b8:	0112      	lsls	r2, r2, #4
 801c1ba:	440a      	add	r2, r1
 801c1bc:	3208      	adds	r2, #8
 801c1be:	7811      	ldrb	r1, [r2, #0]
 801c1c0:	4a47      	ldr	r2, [pc, #284]	; (801c2e0 <updateCommand+0x1fc>)
 801c1c2:	011b      	lsls	r3, r3, #4
 801c1c4:	4413      	add	r3, r2
 801c1c6:	3303      	adds	r3, #3
 801c1c8:	460a      	mov	r2, r1
 801c1ca:	701a      	strb	r2, [r3, #0]
						CMD_Structure[i].CMD_DebouncedState = 1;
 801c1cc:	7bfb      	ldrb	r3, [r7, #15]
 801c1ce:	4a44      	ldr	r2, [pc, #272]	; (801c2e0 <updateCommand+0x1fc>)
 801c1d0:	011b      	lsls	r3, r3, #4
 801c1d2:	4413      	add	r3, r2
 801c1d4:	330c      	adds	r3, #12
 801c1d6:	2201      	movs	r2, #1
 801c1d8:	701a      	strb	r2, [r3, #0]
						CMD_Structure[i].CMD_ContinuousPressCount = 0xFF;
 801c1da:	7bfb      	ldrb	r3, [r7, #15]
 801c1dc:	4a40      	ldr	r2, [pc, #256]	; (801c2e0 <updateCommand+0x1fc>)
 801c1de:	011b      	lsls	r3, r3, #4
 801c1e0:	4413      	add	r3, r2
 801c1e2:	3302      	adds	r3, #2
 801c1e4:	22ff      	movs	r2, #255	; 0xff
 801c1e6:	701a      	strb	r2, [r3, #0]
					if(CMD_Structure[i].CMD_DebounceCount >= CMD_Structure[i].CMD_DebounceCONSTValue){
 801c1e8:	e13e      	b.n	801c468 <updateCommand+0x384>
					}
				}
				else if((CMD_Structure[i].CMD_DebouncedState == 0) && (CMD_Structure[i].CMD_ContinuousPressCount == 0) && (CMD_Structure[i].CMD_ContinuousModeEnabled == 1)){
 801c1ea:	7bfb      	ldrb	r3, [r7, #15]
 801c1ec:	4a3c      	ldr	r2, [pc, #240]	; (801c2e0 <updateCommand+0x1fc>)
 801c1ee:	011b      	lsls	r3, r3, #4
 801c1f0:	4413      	add	r3, r2
 801c1f2:	330c      	adds	r3, #12
 801c1f4:	781b      	ldrb	r3, [r3, #0]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d148      	bne.n	801c28c <updateCommand+0x1a8>
 801c1fa:	7bfb      	ldrb	r3, [r7, #15]
 801c1fc:	4a38      	ldr	r2, [pc, #224]	; (801c2e0 <updateCommand+0x1fc>)
 801c1fe:	011b      	lsls	r3, r3, #4
 801c200:	4413      	add	r3, r2
 801c202:	3302      	adds	r3, #2
 801c204:	781b      	ldrb	r3, [r3, #0]
 801c206:	2b00      	cmp	r3, #0
 801c208:	d140      	bne.n	801c28c <updateCommand+0x1a8>
 801c20a:	7bfb      	ldrb	r3, [r7, #15]
 801c20c:	4a34      	ldr	r2, [pc, #208]	; (801c2e0 <updateCommand+0x1fc>)
 801c20e:	011b      	lsls	r3, r3, #4
 801c210:	4413      	add	r3, r2
 801c212:	330b      	adds	r3, #11
 801c214:	781b      	ldrb	r3, [r3, #0]
 801c216:	2b01      	cmp	r3, #1
 801c218:	d138      	bne.n	801c28c <updateCommand+0x1a8>
					CMD_Structure[i].CMD_DebounceCount++;
 801c21a:	7bfb      	ldrb	r3, [r7, #15]
 801c21c:	4930      	ldr	r1, [pc, #192]	; (801c2e0 <updateCommand+0x1fc>)
 801c21e:	011a      	lsls	r2, r3, #4
 801c220:	440a      	add	r2, r1
 801c222:	3203      	adds	r2, #3
 801c224:	7812      	ldrb	r2, [r2, #0]
 801c226:	3201      	adds	r2, #1
 801c228:	b2d1      	uxtb	r1, r2
 801c22a:	4a2d      	ldr	r2, [pc, #180]	; (801c2e0 <updateCommand+0x1fc>)
 801c22c:	011b      	lsls	r3, r3, #4
 801c22e:	4413      	add	r3, r2
 801c230:	3303      	adds	r3, #3
 801c232:	460a      	mov	r2, r1
 801c234:	701a      	strb	r2, [r3, #0]
					if(CMD_Structure[i].CMD_DebounceCount >= CMD_Structure[i].CMD_DebounceCONSTValue){
 801c236:	7bfb      	ldrb	r3, [r7, #15]
 801c238:	4a29      	ldr	r2, [pc, #164]	; (801c2e0 <updateCommand+0x1fc>)
 801c23a:	011b      	lsls	r3, r3, #4
 801c23c:	4413      	add	r3, r2
 801c23e:	3303      	adds	r3, #3
 801c240:	781a      	ldrb	r2, [r3, #0]
 801c242:	7bfb      	ldrb	r3, [r7, #15]
 801c244:	4926      	ldr	r1, [pc, #152]	; (801c2e0 <updateCommand+0x1fc>)
 801c246:	011b      	lsls	r3, r3, #4
 801c248:	440b      	add	r3, r1
 801c24a:	3308      	adds	r3, #8
 801c24c:	781b      	ldrb	r3, [r3, #0]
 801c24e:	429a      	cmp	r2, r3
 801c250:	f0c0 810a 	bcc.w	801c468 <updateCommand+0x384>
						CMD_Structure[i].CMD_DebounceCount = CMD_Structure[i].CMD_DebounceCONSTValue;
 801c254:	7bfa      	ldrb	r2, [r7, #15]
 801c256:	7bfb      	ldrb	r3, [r7, #15]
 801c258:	4921      	ldr	r1, [pc, #132]	; (801c2e0 <updateCommand+0x1fc>)
 801c25a:	0112      	lsls	r2, r2, #4
 801c25c:	440a      	add	r2, r1
 801c25e:	3208      	adds	r2, #8
 801c260:	7811      	ldrb	r1, [r2, #0]
 801c262:	4a1f      	ldr	r2, [pc, #124]	; (801c2e0 <updateCommand+0x1fc>)
 801c264:	011b      	lsls	r3, r3, #4
 801c266:	4413      	add	r3, r2
 801c268:	3303      	adds	r3, #3
 801c26a:	460a      	mov	r2, r1
 801c26c:	701a      	strb	r2, [r3, #0]
						CMD_Structure[i].CMD_DebouncedState = 1;
 801c26e:	7bfb      	ldrb	r3, [r7, #15]
 801c270:	4a1b      	ldr	r2, [pc, #108]	; (801c2e0 <updateCommand+0x1fc>)
 801c272:	011b      	lsls	r3, r3, #4
 801c274:	4413      	add	r3, r2
 801c276:	330c      	adds	r3, #12
 801c278:	2201      	movs	r2, #1
 801c27a:	701a      	strb	r2, [r3, #0]
						CMD_Structure[i].CMD_ContinuousPressCount = 0xFE;
 801c27c:	7bfb      	ldrb	r3, [r7, #15]
 801c27e:	4a18      	ldr	r2, [pc, #96]	; (801c2e0 <updateCommand+0x1fc>)
 801c280:	011b      	lsls	r3, r3, #4
 801c282:	4413      	add	r3, r2
 801c284:	3302      	adds	r3, #2
 801c286:	22fe      	movs	r2, #254	; 0xfe
 801c288:	701a      	strb	r2, [r3, #0]
					if(CMD_Structure[i].CMD_DebounceCount >= CMD_Structure[i].CMD_DebounceCONSTValue){
 801c28a:	e0ed      	b.n	801c468 <updateCommand+0x384>
					}
				}
				else if((CMD_Structure[i].CMD_DebouncedState == 0) && (CMD_Structure[i].CMD_ContinuousPressCount > 0)){
 801c28c:	7bfb      	ldrb	r3, [r7, #15]
 801c28e:	4a14      	ldr	r2, [pc, #80]	; (801c2e0 <updateCommand+0x1fc>)
 801c290:	011b      	lsls	r3, r3, #4
 801c292:	4413      	add	r3, r2
 801c294:	330c      	adds	r3, #12
 801c296:	781b      	ldrb	r3, [r3, #0]
 801c298:	2b00      	cmp	r3, #0
 801c29a:	f040 80a1 	bne.w	801c3e0 <updateCommand+0x2fc>
 801c29e:	7bfb      	ldrb	r3, [r7, #15]
 801c2a0:	4a0f      	ldr	r2, [pc, #60]	; (801c2e0 <updateCommand+0x1fc>)
 801c2a2:	011b      	lsls	r3, r3, #4
 801c2a4:	4413      	add	r3, r2
 801c2a6:	3302      	adds	r3, #2
 801c2a8:	781b      	ldrb	r3, [r3, #0]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	f000 8098 	beq.w	801c3e0 <updateCommand+0x2fc>
					if((CMD_Structure[i].CMD_ContinuousModeEnabled == 1) && (CMD_Structure[i].CMD_ContinuousPressCount == 0xFF)){
 801c2b0:	7bfb      	ldrb	r3, [r7, #15]
 801c2b2:	4a0b      	ldr	r2, [pc, #44]	; (801c2e0 <updateCommand+0x1fc>)
 801c2b4:	011b      	lsls	r3, r3, #4
 801c2b6:	4413      	add	r3, r2
 801c2b8:	330b      	adds	r3, #11
 801c2ba:	781b      	ldrb	r3, [r3, #0]
 801c2bc:	2b01      	cmp	r3, #1
 801c2be:	d111      	bne.n	801c2e4 <updateCommand+0x200>
 801c2c0:	7bfb      	ldrb	r3, [r7, #15]
 801c2c2:	4a07      	ldr	r2, [pc, #28]	; (801c2e0 <updateCommand+0x1fc>)
 801c2c4:	011b      	lsls	r3, r3, #4
 801c2c6:	4413      	add	r3, r2
 801c2c8:	3302      	adds	r3, #2
 801c2ca:	781b      	ldrb	r3, [r3, #0]
 801c2cc:	2bff      	cmp	r3, #255	; 0xff
 801c2ce:	d109      	bne.n	801c2e4 <updateCommand+0x200>
						CMD_Structure[i].CMD_ContinuousPressCount = 1;
 801c2d0:	7bfb      	ldrb	r3, [r7, #15]
 801c2d2:	4a03      	ldr	r2, [pc, #12]	; (801c2e0 <updateCommand+0x1fc>)
 801c2d4:	011b      	lsls	r3, r3, #4
 801c2d6:	4413      	add	r3, r2
 801c2d8:	3302      	adds	r3, #2
 801c2da:	2201      	movs	r2, #1
 801c2dc:	701a      	strb	r2, [r3, #0]
 801c2de:	e03c      	b.n	801c35a <updateCommand+0x276>
 801c2e0:	20000084 	.word	0x20000084
					}
					else if((CMD_Structure[i].CMD_ContinuousModeEnabled == 1) && (CMD_Structure[i].CMD_ContinuousPressCount >= 1) && (CMD_Structure[i].ContinuousCountFlag == 0)){
 801c2e4:	7bfb      	ldrb	r3, [r7, #15]
 801c2e6:	4a68      	ldr	r2, [pc, #416]	; (801c488 <updateCommand+0x3a4>)
 801c2e8:	011b      	lsls	r3, r3, #4
 801c2ea:	4413      	add	r3, r2
 801c2ec:	330b      	adds	r3, #11
 801c2ee:	781b      	ldrb	r3, [r3, #0]
 801c2f0:	2b01      	cmp	r3, #1
 801c2f2:	d132      	bne.n	801c35a <updateCommand+0x276>
 801c2f4:	7bfb      	ldrb	r3, [r7, #15]
 801c2f6:	4a64      	ldr	r2, [pc, #400]	; (801c488 <updateCommand+0x3a4>)
 801c2f8:	011b      	lsls	r3, r3, #4
 801c2fa:	4413      	add	r3, r2
 801c2fc:	3302      	adds	r3, #2
 801c2fe:	781b      	ldrb	r3, [r3, #0]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d02a      	beq.n	801c35a <updateCommand+0x276>
 801c304:	7bfb      	ldrb	r3, [r7, #15]
 801c306:	4a60      	ldr	r2, [pc, #384]	; (801c488 <updateCommand+0x3a4>)
 801c308:	011b      	lsls	r3, r3, #4
 801c30a:	4413      	add	r3, r2
 801c30c:	330e      	adds	r3, #14
 801c30e:	781b      	ldrb	r3, [r3, #0]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d122      	bne.n	801c35a <updateCommand+0x276>
						CMD_Structure[i].CMD_ContinuousPressCount++;
 801c314:	7bfb      	ldrb	r3, [r7, #15]
 801c316:	495c      	ldr	r1, [pc, #368]	; (801c488 <updateCommand+0x3a4>)
 801c318:	011a      	lsls	r2, r3, #4
 801c31a:	440a      	add	r2, r1
 801c31c:	3202      	adds	r2, #2
 801c31e:	7812      	ldrb	r2, [r2, #0]
 801c320:	3201      	adds	r2, #1
 801c322:	b2d1      	uxtb	r1, r2
 801c324:	4a58      	ldr	r2, [pc, #352]	; (801c488 <updateCommand+0x3a4>)
 801c326:	011b      	lsls	r3, r3, #4
 801c328:	4413      	add	r3, r2
 801c32a:	3302      	adds	r3, #2
 801c32c:	460a      	mov	r2, r1
 801c32e:	701a      	strb	r2, [r3, #0]
						if(CMD_Structure[i].CMD_ContinuousPressCount >= (1000/loopms))CMD_Structure[i].ContinuousCountFlag = 1;
 801c330:	7bfb      	ldrb	r3, [r7, #15]
 801c332:	4a55      	ldr	r2, [pc, #340]	; (801c488 <updateCommand+0x3a4>)
 801c334:	011b      	lsls	r3, r3, #4
 801c336:	4413      	add	r3, r2
 801c338:	3302      	adds	r3, #2
 801c33a:	781b      	ldrb	r3, [r3, #0]
 801c33c:	4619      	mov	r1, r3
 801c33e:	797b      	ldrb	r3, [r7, #5]
 801c340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c344:	fb92 f3f3 	sdiv	r3, r2, r3
 801c348:	4299      	cmp	r1, r3
 801c34a:	db06      	blt.n	801c35a <updateCommand+0x276>
 801c34c:	7bfb      	ldrb	r3, [r7, #15]
 801c34e:	4a4e      	ldr	r2, [pc, #312]	; (801c488 <updateCommand+0x3a4>)
 801c350:	011b      	lsls	r3, r3, #4
 801c352:	4413      	add	r3, r2
 801c354:	330e      	adds	r3, #14
 801c356:	2201      	movs	r2, #1
 801c358:	701a      	strb	r2, [r3, #0]
					}

					if(CMD_Structure[i].ContinuousCountFlag == 1){
 801c35a:	7bfb      	ldrb	r3, [r7, #15]
 801c35c:	4a4a      	ldr	r2, [pc, #296]	; (801c488 <updateCommand+0x3a4>)
 801c35e:	011b      	lsls	r3, r3, #4
 801c360:	4413      	add	r3, r2
 801c362:	330e      	adds	r3, #14
 801c364:	781b      	ldrb	r3, [r3, #0]
 801c366:	2b01      	cmp	r3, #1
 801c368:	d17d      	bne.n	801c466 <updateCommand+0x382>
						if((CMD_Structure[i].CMD_ContinuousModeEnabled == 1) && (CMD_Structure[i].CMD_ContinuousPressCount > 0)){
 801c36a:	7bfb      	ldrb	r3, [r7, #15]
 801c36c:	4a46      	ldr	r2, [pc, #280]	; (801c488 <updateCommand+0x3a4>)
 801c36e:	011b      	lsls	r3, r3, #4
 801c370:	4413      	add	r3, r2
 801c372:	330b      	adds	r3, #11
 801c374:	781b      	ldrb	r3, [r3, #0]
 801c376:	2b01      	cmp	r3, #1
 801c378:	d175      	bne.n	801c466 <updateCommand+0x382>
 801c37a:	7bfb      	ldrb	r3, [r7, #15]
 801c37c:	4a42      	ldr	r2, [pc, #264]	; (801c488 <updateCommand+0x3a4>)
 801c37e:	011b      	lsls	r3, r3, #4
 801c380:	4413      	add	r3, r2
 801c382:	3302      	adds	r3, #2
 801c384:	781b      	ldrb	r3, [r3, #0]
 801c386:	2b00      	cmp	r3, #0
 801c388:	d06d      	beq.n	801c466 <updateCommand+0x382>
							CMD_Structure[i].CMD_ContinuousPressCount++;
 801c38a:	7bfb      	ldrb	r3, [r7, #15]
 801c38c:	493e      	ldr	r1, [pc, #248]	; (801c488 <updateCommand+0x3a4>)
 801c38e:	011a      	lsls	r2, r3, #4
 801c390:	440a      	add	r2, r1
 801c392:	3202      	adds	r2, #2
 801c394:	7812      	ldrb	r2, [r2, #0]
 801c396:	3201      	adds	r2, #1
 801c398:	b2d1      	uxtb	r1, r2
 801c39a:	4a3b      	ldr	r2, [pc, #236]	; (801c488 <updateCommand+0x3a4>)
 801c39c:	011b      	lsls	r3, r3, #4
 801c39e:	4413      	add	r3, r2
 801c3a0:	3302      	adds	r3, #2
 801c3a2:	460a      	mov	r2, r1
 801c3a4:	701a      	strb	r2, [r3, #0]
							if(CMD_Structure[i].CMD_ContinuousPressCount>= CMD_Structure[i].CMD_ContinuousModeDebounceValue){
 801c3a6:	7bfb      	ldrb	r3, [r7, #15]
 801c3a8:	4a37      	ldr	r2, [pc, #220]	; (801c488 <updateCommand+0x3a4>)
 801c3aa:	011b      	lsls	r3, r3, #4
 801c3ac:	4413      	add	r3, r2
 801c3ae:	3302      	adds	r3, #2
 801c3b0:	781a      	ldrb	r2, [r3, #0]
 801c3b2:	7bfb      	ldrb	r3, [r7, #15]
 801c3b4:	4934      	ldr	r1, [pc, #208]	; (801c488 <updateCommand+0x3a4>)
 801c3b6:	011b      	lsls	r3, r3, #4
 801c3b8:	440b      	add	r3, r1
 801c3ba:	330d      	adds	r3, #13
 801c3bc:	781b      	ldrb	r3, [r3, #0]
 801c3be:	429a      	cmp	r2, r3
 801c3c0:	d351      	bcc.n	801c466 <updateCommand+0x382>
								CMD_Structure[i].CMD_ContinuousPressCount = 0;
 801c3c2:	7bfb      	ldrb	r3, [r7, #15]
 801c3c4:	4a30      	ldr	r2, [pc, #192]	; (801c488 <updateCommand+0x3a4>)
 801c3c6:	011b      	lsls	r3, r3, #4
 801c3c8:	4413      	add	r3, r2
 801c3ca:	3302      	adds	r3, #2
 801c3cc:	2200      	movs	r2, #0
 801c3ce:	701a      	strb	r2, [r3, #0]
								CMD_Structure[i].CMD_DebouncedState = 1;
 801c3d0:	7bfb      	ldrb	r3, [r7, #15]
 801c3d2:	4a2d      	ldr	r2, [pc, #180]	; (801c488 <updateCommand+0x3a4>)
 801c3d4:	011b      	lsls	r3, r3, #4
 801c3d6:	4413      	add	r3, r2
 801c3d8:	330c      	adds	r3, #12
 801c3da:	2201      	movs	r2, #1
 801c3dc:	701a      	strb	r2, [r3, #0]
					if(CMD_Structure[i].ContinuousCountFlag == 1){
 801c3de:	e042      	b.n	801c466 <updateCommand+0x382>
							}
						}
					}
				}
				else if(CMD_Structure[i].CMD_DebouncedState == 1){
 801c3e0:	7bfb      	ldrb	r3, [r7, #15]
 801c3e2:	4a29      	ldr	r2, [pc, #164]	; (801c488 <updateCommand+0x3a4>)
 801c3e4:	011b      	lsls	r3, r3, #4
 801c3e6:	4413      	add	r3, r2
 801c3e8:	330c      	adds	r3, #12
 801c3ea:	781b      	ldrb	r3, [r3, #0]
 801c3ec:	2b01      	cmp	r3, #1
 801c3ee:	d144      	bne.n	801c47a <updateCommand+0x396>
					CMD_Structure[i].CMD_DebouncedState = 0;
 801c3f0:	7bfb      	ldrb	r3, [r7, #15]
 801c3f2:	4a25      	ldr	r2, [pc, #148]	; (801c488 <updateCommand+0x3a4>)
 801c3f4:	011b      	lsls	r3, r3, #4
 801c3f6:	4413      	add	r3, r2
 801c3f8:	330c      	adds	r3, #12
 801c3fa:	2200      	movs	r2, #0
 801c3fc:	701a      	strb	r2, [r3, #0]
					if(CMD_Structure[i].CMD_ContinuousModeEnabled == 1){
 801c3fe:	7bfb      	ldrb	r3, [r7, #15]
 801c400:	4a21      	ldr	r2, [pc, #132]	; (801c488 <updateCommand+0x3a4>)
 801c402:	011b      	lsls	r3, r3, #4
 801c404:	4413      	add	r3, r2
 801c406:	330b      	adds	r3, #11
 801c408:	781b      	ldrb	r3, [r3, #0]
 801c40a:	2b01      	cmp	r3, #1
 801c40c:	d135      	bne.n	801c47a <updateCommand+0x396>
						CMD_Structure[i].CMD_ContinuousPressCount++;
 801c40e:	7bfb      	ldrb	r3, [r7, #15]
 801c410:	491d      	ldr	r1, [pc, #116]	; (801c488 <updateCommand+0x3a4>)
 801c412:	011a      	lsls	r2, r3, #4
 801c414:	440a      	add	r2, r1
 801c416:	3202      	adds	r2, #2
 801c418:	7812      	ldrb	r2, [r2, #0]
 801c41a:	3201      	adds	r2, #1
 801c41c:	b2d1      	uxtb	r1, r2
 801c41e:	4a1a      	ldr	r2, [pc, #104]	; (801c488 <updateCommand+0x3a4>)
 801c420:	011b      	lsls	r3, r3, #4
 801c422:	4413      	add	r3, r2
 801c424:	3302      	adds	r3, #2
 801c426:	460a      	mov	r2, r1
 801c428:	701a      	strb	r2, [r3, #0]
				CMD_Structure[i].CMD_ContinuousPressCount = 0;
				CMD_Structure[i].CMD_DebounceCount = 0;
				CMD_Structure[i].CMD_lastState = 1;
				CMD_Structure[i].ContinuousCountFlag = 0;
			}
			break;
 801c42a:	e026      	b.n	801c47a <updateCommand+0x396>
				CMD_Structure[i].CMD_ContinuousPressCount = 0;
 801c42c:	7bfb      	ldrb	r3, [r7, #15]
 801c42e:	4a16      	ldr	r2, [pc, #88]	; (801c488 <updateCommand+0x3a4>)
 801c430:	011b      	lsls	r3, r3, #4
 801c432:	4413      	add	r3, r2
 801c434:	3302      	adds	r3, #2
 801c436:	2200      	movs	r2, #0
 801c438:	701a      	strb	r2, [r3, #0]
				CMD_Structure[i].CMD_DebounceCount = 0;
 801c43a:	7bfb      	ldrb	r3, [r7, #15]
 801c43c:	4a12      	ldr	r2, [pc, #72]	; (801c488 <updateCommand+0x3a4>)
 801c43e:	011b      	lsls	r3, r3, #4
 801c440:	4413      	add	r3, r2
 801c442:	3303      	adds	r3, #3
 801c444:	2200      	movs	r2, #0
 801c446:	701a      	strb	r2, [r3, #0]
				CMD_Structure[i].CMD_lastState = 1;
 801c448:	7bfb      	ldrb	r3, [r7, #15]
 801c44a:	4a0f      	ldr	r2, [pc, #60]	; (801c488 <updateCommand+0x3a4>)
 801c44c:	011b      	lsls	r3, r3, #4
 801c44e:	4413      	add	r3, r2
 801c450:	330a      	adds	r3, #10
 801c452:	2201      	movs	r2, #1
 801c454:	701a      	strb	r2, [r3, #0]
				CMD_Structure[i].ContinuousCountFlag = 0;
 801c456:	7bfb      	ldrb	r3, [r7, #15]
 801c458:	4a0b      	ldr	r2, [pc, #44]	; (801c488 <updateCommand+0x3a4>)
 801c45a:	011b      	lsls	r3, r3, #4
 801c45c:	4413      	add	r3, r2
 801c45e:	330e      	adds	r3, #14
 801c460:	2200      	movs	r2, #0
 801c462:	701a      	strb	r2, [r3, #0]
			break;
 801c464:	e009      	b.n	801c47a <updateCommand+0x396>
					if(CMD_Structure[i].ContinuousCountFlag == 1){
 801c466:	bf00      	nop
			break;
 801c468:	e007      	b.n	801c47a <updateCommand+0x396>
	for(uint8_t i = 0; i<(sizeof(CMD_Structure)/sizeof(CMD_Parameter)); i++){
 801c46a:	7bfb      	ldrb	r3, [r7, #15]
 801c46c:	3301      	adds	r3, #1
 801c46e:	73fb      	strb	r3, [r7, #15]
 801c470:	7bfb      	ldrb	r3, [r7, #15]
 801c472:	2b04      	cmp	r3, #4
 801c474:	f67f ae41 	bls.w	801c0fa <updateCommand+0x16>
		}
	}
	return;
 801c478:	e000      	b.n	801c47c <updateCommand+0x398>
			break;
 801c47a:	bf00      	nop
	return;
 801c47c:	bf00      	nop
}
 801c47e:	3714      	adds	r7, #20
 801c480:	46bd      	mov	sp, r7
 801c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c486:	4770      	bx	lr
 801c488:	20000084 	.word	0x20000084

0801c48c <synchronizeCommands>:


void synchronizeCommands(void){
 801c48c:	b480      	push	{r7}
 801c48e:	b083      	sub	sp, #12
 801c490:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<(sizeof(CMD_Structure)/sizeof(CMD_Parameter)); i++){
 801c492:	2300      	movs	r3, #0
 801c494:	71fb      	strb	r3, [r7, #7]
 801c496:	e056      	b.n	801c546 <synchronizeCommands+0xba>
		if(CMD_Structure[i].CMD_synchro_old == CMD_Structure[i].CMD_synchro){
 801c498:	79fb      	ldrb	r3, [r7, #7]
 801c49a:	4a30      	ldr	r2, [pc, #192]	; (801c55c <synchronizeCommands+0xd0>)
 801c49c:	011b      	lsls	r3, r3, #4
 801c49e:	4413      	add	r3, r2
 801c4a0:	3306      	adds	r3, #6
 801c4a2:	881a      	ldrh	r2, [r3, #0]
 801c4a4:	79fb      	ldrb	r3, [r7, #7]
 801c4a6:	492d      	ldr	r1, [pc, #180]	; (801c55c <synchronizeCommands+0xd0>)
 801c4a8:	011b      	lsls	r3, r3, #4
 801c4aa:	440b      	add	r3, r1
 801c4ac:	3304      	adds	r3, #4
 801c4ae:	881b      	ldrh	r3, [r3, #0]
 801c4b0:	429a      	cmp	r2, r3
 801c4b2:	d138      	bne.n	801c526 <synchronizeCommands+0x9a>
			CMD_Structure[i].CMD_synchro = 0;
 801c4b4:	79fb      	ldrb	r3, [r7, #7]
 801c4b6:	4a29      	ldr	r2, [pc, #164]	; (801c55c <synchronizeCommands+0xd0>)
 801c4b8:	011b      	lsls	r3, r3, #4
 801c4ba:	4413      	add	r3, r2
 801c4bc:	3304      	adds	r3, #4
 801c4be:	2200      	movs	r2, #0
 801c4c0:	801a      	strh	r2, [r3, #0]
			CMD_Structure[i].CMD_synchro_old = 0;
 801c4c2:	79fb      	ldrb	r3, [r7, #7]
 801c4c4:	4a25      	ldr	r2, [pc, #148]	; (801c55c <synchronizeCommands+0xd0>)
 801c4c6:	011b      	lsls	r3, r3, #4
 801c4c8:	4413      	add	r3, r2
 801c4ca:	3306      	adds	r3, #6
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	801a      	strh	r2, [r3, #0]
			CMD_Structure[i].CMD_DebouncedState = 0;
 801c4d0:	79fb      	ldrb	r3, [r7, #7]
 801c4d2:	4a22      	ldr	r2, [pc, #136]	; (801c55c <synchronizeCommands+0xd0>)
 801c4d4:	011b      	lsls	r3, r3, #4
 801c4d6:	4413      	add	r3, r2
 801c4d8:	330c      	adds	r3, #12
 801c4da:	2200      	movs	r2, #0
 801c4dc:	701a      	strb	r2, [r3, #0]
			CMD_Structure[i].CMD_ContinuousPressCount = 0;
 801c4de:	79fb      	ldrb	r3, [r7, #7]
 801c4e0:	4a1e      	ldr	r2, [pc, #120]	; (801c55c <synchronizeCommands+0xd0>)
 801c4e2:	011b      	lsls	r3, r3, #4
 801c4e4:	4413      	add	r3, r2
 801c4e6:	3302      	adds	r3, #2
 801c4e8:	2200      	movs	r2, #0
 801c4ea:	701a      	strb	r2, [r3, #0]
			CMD_Structure[i].CMD_CurrentState = 0;
 801c4ec:	79fb      	ldrb	r3, [r7, #7]
 801c4ee:	4a1b      	ldr	r2, [pc, #108]	; (801c55c <synchronizeCommands+0xd0>)
 801c4f0:	011b      	lsls	r3, r3, #4
 801c4f2:	4413      	add	r3, r2
 801c4f4:	3309      	adds	r3, #9
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	701a      	strb	r2, [r3, #0]
			CMD_Structure[i].CMD_lastState = 0;
 801c4fa:	79fb      	ldrb	r3, [r7, #7]
 801c4fc:	4a17      	ldr	r2, [pc, #92]	; (801c55c <synchronizeCommands+0xd0>)
 801c4fe:	011b      	lsls	r3, r3, #4
 801c500:	4413      	add	r3, r2
 801c502:	330a      	adds	r3, #10
 801c504:	2200      	movs	r2, #0
 801c506:	701a      	strb	r2, [r3, #0]
			CMD_Structure[i].CMD_DebounceCount = 0;
 801c508:	79fb      	ldrb	r3, [r7, #7]
 801c50a:	4a14      	ldr	r2, [pc, #80]	; (801c55c <synchronizeCommands+0xd0>)
 801c50c:	011b      	lsls	r3, r3, #4
 801c50e:	4413      	add	r3, r2
 801c510:	3303      	adds	r3, #3
 801c512:	2200      	movs	r2, #0
 801c514:	701a      	strb	r2, [r3, #0]
			CMD_Structure[i].ContinuousCountFlag = 1;
 801c516:	79fb      	ldrb	r3, [r7, #7]
 801c518:	4a10      	ldr	r2, [pc, #64]	; (801c55c <synchronizeCommands+0xd0>)
 801c51a:	011b      	lsls	r3, r3, #4
 801c51c:	4413      	add	r3, r2
 801c51e:	330e      	adds	r3, #14
 801c520:	2201      	movs	r2, #1
 801c522:	701a      	strb	r2, [r3, #0]
 801c524:	e00c      	b.n	801c540 <synchronizeCommands+0xb4>
		}
		else{
			CMD_Structure[i].CMD_synchro_old = CMD_Structure[i].CMD_synchro;
 801c526:	79fa      	ldrb	r2, [r7, #7]
 801c528:	79fb      	ldrb	r3, [r7, #7]
 801c52a:	490c      	ldr	r1, [pc, #48]	; (801c55c <synchronizeCommands+0xd0>)
 801c52c:	0112      	lsls	r2, r2, #4
 801c52e:	440a      	add	r2, r1
 801c530:	3204      	adds	r2, #4
 801c532:	8811      	ldrh	r1, [r2, #0]
 801c534:	4a09      	ldr	r2, [pc, #36]	; (801c55c <synchronizeCommands+0xd0>)
 801c536:	011b      	lsls	r3, r3, #4
 801c538:	4413      	add	r3, r2
 801c53a:	3306      	adds	r3, #6
 801c53c:	460a      	mov	r2, r1
 801c53e:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<(sizeof(CMD_Structure)/sizeof(CMD_Parameter)); i++){
 801c540:	79fb      	ldrb	r3, [r7, #7]
 801c542:	3301      	adds	r3, #1
 801c544:	71fb      	strb	r3, [r7, #7]
 801c546:	79fb      	ldrb	r3, [r7, #7]
 801c548:	2b04      	cmp	r3, #4
 801c54a:	d9a5      	bls.n	801c498 <synchronizeCommands+0xc>
		}
	}
}
 801c54c:	bf00      	nop
 801c54e:	bf00      	nop
 801c550:	370c      	adds	r7, #12
 801c552:	46bd      	mov	sp, r7
 801c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c558:	4770      	bx	lr
 801c55a:	bf00      	nop
 801c55c:	20000084 	.word	0x20000084

0801c560 <acquire_appl_keydemand>:

void acquire_appl_keydemand(void){
 801c560:	b480      	push	{r7}
 801c562:	af00      	add	r7, sp, #0
	if(CMD_Structure[CMD_Enum_B1].CMD_DebouncedState == 1){
 801c564:	4b15      	ldr	r3, [pc, #84]	; (801c5bc <acquire_appl_keydemand+0x5c>)
 801c566:	7f1b      	ldrb	r3, [r3, #28]
 801c568:	2b01      	cmp	r3, #1
 801c56a:	d103      	bne.n	801c574 <acquire_appl_keydemand+0x14>
		SM_KeyPressed = CMD_Enum_B1;
 801c56c:	4b14      	ldr	r3, [pc, #80]	; (801c5c0 <acquire_appl_keydemand+0x60>)
 801c56e:	2201      	movs	r2, #1
 801c570:	701a      	strb	r2, [r3, #0]
		SM_KeyPressed = CMD_Enum_B4;
	}
	else{
		SM_KeyPressed = CMD_Enum_DEFAULT;
	}
}
 801c572:	e01d      	b.n	801c5b0 <acquire_appl_keydemand+0x50>
	else if(CMD_Structure[CMD_Enum_B2].CMD_DebouncedState == 1){
 801c574:	4b11      	ldr	r3, [pc, #68]	; (801c5bc <acquire_appl_keydemand+0x5c>)
 801c576:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c57a:	2b01      	cmp	r3, #1
 801c57c:	d103      	bne.n	801c586 <acquire_appl_keydemand+0x26>
		SM_KeyPressed = CMD_Enum_B2;
 801c57e:	4b10      	ldr	r3, [pc, #64]	; (801c5c0 <acquire_appl_keydemand+0x60>)
 801c580:	2202      	movs	r2, #2
 801c582:	701a      	strb	r2, [r3, #0]
}
 801c584:	e014      	b.n	801c5b0 <acquire_appl_keydemand+0x50>
	else if(CMD_Structure[CMD_Enum_B3].CMD_DebouncedState == 1){
 801c586:	4b0d      	ldr	r3, [pc, #52]	; (801c5bc <acquire_appl_keydemand+0x5c>)
 801c588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c58c:	2b01      	cmp	r3, #1
 801c58e:	d103      	bne.n	801c598 <acquire_appl_keydemand+0x38>
		SM_KeyPressed = CMD_Enum_B3;
 801c590:	4b0b      	ldr	r3, [pc, #44]	; (801c5c0 <acquire_appl_keydemand+0x60>)
 801c592:	2203      	movs	r2, #3
 801c594:	701a      	strb	r2, [r3, #0]
}
 801c596:	e00b      	b.n	801c5b0 <acquire_appl_keydemand+0x50>
	else if(CMD_Structure[CMD_Enum_B4].CMD_DebouncedState == 1){
 801c598:	4b08      	ldr	r3, [pc, #32]	; (801c5bc <acquire_appl_keydemand+0x5c>)
 801c59a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801c59e:	2b01      	cmp	r3, #1
 801c5a0:	d103      	bne.n	801c5aa <acquire_appl_keydemand+0x4a>
		SM_KeyPressed = CMD_Enum_B4;
 801c5a2:	4b07      	ldr	r3, [pc, #28]	; (801c5c0 <acquire_appl_keydemand+0x60>)
 801c5a4:	2204      	movs	r2, #4
 801c5a6:	701a      	strb	r2, [r3, #0]
}
 801c5a8:	e002      	b.n	801c5b0 <acquire_appl_keydemand+0x50>
		SM_KeyPressed = CMD_Enum_DEFAULT;
 801c5aa:	4b05      	ldr	r3, [pc, #20]	; (801c5c0 <acquire_appl_keydemand+0x60>)
 801c5ac:	2200      	movs	r2, #0
 801c5ae:	701a      	strb	r2, [r3, #0]
}
 801c5b0:	bf00      	nop
 801c5b2:	46bd      	mov	sp, r7
 801c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5b8:	4770      	bx	lr
 801c5ba:	bf00      	nop
 801c5bc:	20000084 	.word	0x20000084
 801c5c0:	200048e4 	.word	0x200048e4

0801c5c4 <SM_ECUInit>:
#ifdef __cplusplus
extern "C"{
#endif


void SM_ECUInit(void){
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	af00      	add	r7, sp, #0
	/*Vishwesh : At the start I shut off DC Contactor, All LEDs,
	 * Gates must be off - very important else transistor becomes short circuit path for current
	 * Buzzer theme is played for 2-seconds and then Splash screens displayed.
	 */
	DC_CONTACTOR_OFF();
 801c5c8:	2201      	movs	r2, #1
 801c5ca:	2102      	movs	r1, #2
 801c5cc:	483b      	ldr	r0, [pc, #236]	; (801c6bc <SM_ECUInit+0xf8>)
 801c5ce:	f7f7 fb15 	bl	8013bfc <HAL_GPIO_WritePin>
	REDLEDON();
 801c5d2:	2201      	movs	r2, #1
 801c5d4:	2140      	movs	r1, #64	; 0x40
 801c5d6:	483a      	ldr	r0, [pc, #232]	; (801c6c0 <SM_ECUInit+0xfc>)
 801c5d8:	f7f7 fb10 	bl	8013bfc <HAL_GPIO_WritePin>
	GREENLEDON();
 801c5dc:	2201      	movs	r2, #1
 801c5de:	2120      	movs	r1, #32
 801c5e0:	4837      	ldr	r0, [pc, #220]	; (801c6c0 <SM_ECUInit+0xfc>)
 801c5e2:	f7f7 fb0b 	bl	8013bfc <HAL_GPIO_WritePin>
	BLUELEDON();
 801c5e6:	2201      	movs	r2, #1
 801c5e8:	2110      	movs	r1, #16
 801c5ea:	4835      	ldr	r0, [pc, #212]	; (801c6c0 <SM_ECUInit+0xfc>)
 801c5ec:	f7f7 fb06 	bl	8013bfc <HAL_GPIO_WritePin>
	ORANGELEDON();
 801c5f0:	2201      	movs	r2, #1
 801c5f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c5f6:	4832      	ldr	r0, [pc, #200]	; (801c6c0 <SM_ECUInit+0xfc>)
 801c5f8:	f7f7 fb00 	bl	8013bfc <HAL_GPIO_WritePin>
	G1T_OFF();
 801c5fc:	2201      	movs	r2, #1
 801c5fe:	2120      	movs	r1, #32
 801c600:	482e      	ldr	r0, [pc, #184]	; (801c6bc <SM_ECUInit+0xf8>)
 801c602:	f7f7 fafb 	bl	8013bfc <HAL_GPIO_WritePin>
	G2T_OFF();
 801c606:	2201      	movs	r2, #1
 801c608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801c60c:	482d      	ldr	r0, [pc, #180]	; (801c6c4 <SM_ECUInit+0x100>)
 801c60e:	f7f7 faf5 	bl	8013bfc <HAL_GPIO_WritePin>
	G3T_OFF();
 801c612:	2201      	movs	r2, #1
 801c614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801c618:	482a      	ldr	r0, [pc, #168]	; (801c6c4 <SM_ECUInit+0x100>)
 801c61a:	f7f7 faef 	bl	8013bfc <HAL_GPIO_WritePin>
	switchOnBuzzer();
 801c61e:	f002 f8a1 	bl	801e764 <switchOnBuzzer>
	VishwaAdcInit();
 801c622:	f002 fa9b 	bl	801eb5c <VishwaAdcInit>

	HAL_TIM_Base_Start(&htim2);
 801c626:	4828      	ldr	r0, [pc, #160]	; (801c6c8 <SM_ECUInit+0x104>)
 801c628:	f7f9 fbc0 	bl	8015dac <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 801c62c:	4827      	ldr	r0, [pc, #156]	; (801c6cc <SM_ECUInit+0x108>)
 801c62e:	f7f9 fbbd 	bl	8015dac <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);
 801c632:	4827      	ldr	r0, [pc, #156]	; (801c6d0 <SM_ECUInit+0x10c>)
 801c634:	f7f9 fbba 	bl	8015dac <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 801c638:	4826      	ldr	r0, [pc, #152]	; (801c6d4 <SM_ECUInit+0x110>)
 801c63a:	f7f9 fbb7 	bl	8015dac <HAL_TIM_Base_Start>
	vishwaEEp_Init();
 801c63e:	f7fe fcdf 	bl	801b000 <vishwaEEp_Init>
	ReadEEPData();
 801c642:	f7fe fe73 	bl	801b32c <ReadEEPData>
	/*Vishwesh:
	 * While Testing use following values
	 */

//	SM_ApplParam.OverVoltageThreshold = 350;
	SM_ApplParam.UnderVoltageThreshold = UNDERVOLTAGE_ADMIN_VALUE;
 801c646:	4b24      	ldr	r3, [pc, #144]	; (801c6d8 <SM_ECUInit+0x114>)
 801c648:	4a24      	ldr	r2, [pc, #144]	; (801c6dc <SM_ECUInit+0x118>)
 801c64a:	605a      	str	r2, [r3, #4]
	SM_ApplParam.OverCurrentThreshold = OVERCURRENT_ADMIN_VALUE;
 801c64c:	4b22      	ldr	r3, [pc, #136]	; (801c6d8 <SM_ECUInit+0x114>)
 801c64e:	4a24      	ldr	r2, [pc, #144]	; (801c6e0 <SM_ECUInit+0x11c>)
 801c650:	609a      	str	r2, [r3, #8]

	SM_ApplParam.Appl_u16PulseSCRWidth_us = 200;
 801c652:	4b21      	ldr	r3, [pc, #132]	; (801c6d8 <SM_ECUInit+0x114>)
 801c654:	22c8      	movs	r2, #200	; 0xc8
 801c656:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	SM_enumECUState = SM_enum_ECU_Init;
 801c65a:	4b22      	ldr	r3, [pc, #136]	; (801c6e4 <SM_ECUInit+0x120>)
 801c65c:	2200      	movs	r2, #0
 801c65e:	701a      	strb	r2, [r3, #0]
	Appl_Display.PowerOffCounter = 0;
 801c660:	4b21      	ldr	r3, [pc, #132]	; (801c6e8 <SM_ECUInit+0x124>)
 801c662:	2200      	movs	r2, #0
 801c664:	711a      	strb	r2, [r3, #4]

	HAL_Delay(1000);
 801c666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c66a:	f7f5 fe8f 	bl	801238c <HAL_Delay>
	BUZZER_OFF();
 801c66e:	2201      	movs	r2, #1
 801c670:	2180      	movs	r1, #128	; 0x80
 801c672:	4813      	ldr	r0, [pc, #76]	; (801c6c0 <SM_ECUInit+0xfc>)
 801c674:	f7f7 fac2 	bl	8013bfc <HAL_GPIO_WritePin>
	REDLEDOFF();
 801c678:	2200      	movs	r2, #0
 801c67a:	2140      	movs	r1, #64	; 0x40
 801c67c:	4810      	ldr	r0, [pc, #64]	; (801c6c0 <SM_ECUInit+0xfc>)
 801c67e:	f7f7 fabd 	bl	8013bfc <HAL_GPIO_WritePin>
	GREENLEDOFF();
 801c682:	2200      	movs	r2, #0
 801c684:	2120      	movs	r1, #32
 801c686:	480e      	ldr	r0, [pc, #56]	; (801c6c0 <SM_ECUInit+0xfc>)
 801c688:	f7f7 fab8 	bl	8013bfc <HAL_GPIO_WritePin>
	BLUELEDOFF();
 801c68c:	2200      	movs	r2, #0
 801c68e:	2110      	movs	r1, #16
 801c690:	480b      	ldr	r0, [pc, #44]	; (801c6c0 <SM_ECUInit+0xfc>)
 801c692:	f7f7 fab3 	bl	8013bfc <HAL_GPIO_WritePin>
	ORANGELEDOFF();
 801c696:	2200      	movs	r2, #0
 801c698:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c69c:	4808      	ldr	r0, [pc, #32]	; (801c6c0 <SM_ECUInit+0xfc>)
 801c69e:	f7f7 faad 	bl	8013bfc <HAL_GPIO_WritePin>
	/* Vishwesh:
	 * Important: In-case of power Failure, A Li-On Battery is given
	 * This is supplied using Main Relay and switching Main relay off causes
	 * System to switch OFF. Here I am switching ON relay.
	 */
	BATTERY_RELAY_ON();
 801c6a2:	2201      	movs	r2, #1
 801c6a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c6a8:	4805      	ldr	r0, [pc, #20]	; (801c6c0 <SM_ECUInit+0xfc>)
 801c6aa:	f7f7 faa7 	bl	8013bfc <HAL_GPIO_WritePin>
	SM_DispInit();
 801c6ae:	f7fd f841 	bl	8019734 <SM_DispInit>

	/* Vishwesh:
	 * Assume there is not phase reversal in the beginning.
	 */
	Appl_diagActiveFault.PhaseReversal = 0;
 801c6b2:	4b0e      	ldr	r3, [pc, #56]	; (801c6ec <SM_ECUInit+0x128>)
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	71da      	strb	r2, [r3, #7]
	/* Vishwesh :
	 * If Modbus to be supported use following library. THank me later
	 */
//	vishwaModbusInit();
}
 801c6b8:	bf00      	nop
 801c6ba:	bd80      	pop	{r7, pc}
 801c6bc:	40020400 	.word	0x40020400
 801c6c0:	40020800 	.word	0x40020800
 801c6c4:	40020000 	.word	0x40020000
 801c6c8:	2000461c 	.word	0x2000461c
 801c6cc:	2000458c 	.word	0x2000458c
 801c6d0:	200045d4 	.word	0x200045d4
 801c6d4:	200046fc 	.word	0x200046fc
 801c6d8:	20004974 	.word	0x20004974
 801c6dc:	42400000 	.word	0x42400000
 801c6e0:	428c0000 	.word	0x428c0000
 801c6e4:	2000490c 	.word	0x2000490c
 801c6e8:	20004870 	.word	0x20004870
 801c6ec:	200047b0 	.word	0x200047b0

0801c6f0 <SM_StateMachineHandler>:



void SM_StateMachineHandler(uint8_t loopms){
 801c6f0:	b580      	push	{r7, lr}
 801c6f2:	b086      	sub	sp, #24
 801c6f4:	af02      	add	r7, sp, #8
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	71fb      	strb	r3, [r7, #7]
	static uint8_t Fnclocal_char;

	ExtEEP_Error EEP_Error;
	VishFuncError VishwaErr;

	if(((Appl_diagActiveFault.PowerFail_Z1 == 1) || \
 801c6fa:	4ba1      	ldr	r3, [pc, #644]	; (801c980 <SM_StateMachineHandler+0x290>)
 801c6fc:	781b      	ldrb	r3, [r3, #0]
 801c6fe:	2b01      	cmp	r3, #1
 801c700:	d007      	beq.n	801c712 <SM_StateMachineHandler+0x22>
			(Appl_diagActiveFault.PowerFail_Z2 == 1) || \
 801c702:	4b9f      	ldr	r3, [pc, #636]	; (801c980 <SM_StateMachineHandler+0x290>)
 801c704:	785b      	ldrb	r3, [r3, #1]
	if(((Appl_diagActiveFault.PowerFail_Z1 == 1) || \
 801c706:	2b01      	cmp	r3, #1
 801c708:	d003      	beq.n	801c712 <SM_StateMachineHandler+0x22>
			(Appl_diagActiveFault.PowerFail_Z3 == 1))&&\
 801c70a:	4b9d      	ldr	r3, [pc, #628]	; (801c980 <SM_StateMachineHandler+0x290>)
 801c70c:	789b      	ldrb	r3, [r3, #2]
			(Appl_diagActiveFault.PowerFail_Z2 == 1) || \
 801c70e:	2b01      	cmp	r3, #1
 801c710:	d13b      	bne.n	801c78a <SM_StateMachineHandler+0x9a>
			((SM_enumECUState != SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow) && \
 801c712:	4b9c      	ldr	r3, [pc, #624]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c714:	781b      	ldrb	r3, [r3, #0]
 801c716:	b2db      	uxtb	r3, r3
			(Appl_diagActiveFault.PowerFail_Z3 == 1))&&\
 801c718:	2b0b      	cmp	r3, #11
 801c71a:	d036      	beq.n	801c78a <SM_StateMachineHandler+0x9a>
			(SM_enumECUState != SM_enum_ECU_VldAC_RunCurrentLoop_StableVoltagefloat))){
 801c71c:	4b99      	ldr	r3, [pc, #612]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c71e:	781b      	ldrb	r3, [r3, #0]
 801c720:	b2db      	uxtb	r3, r3
			((SM_enumECUState != SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow) && \
 801c722:	2b0c      	cmp	r3, #12
 801c724:	d031      	beq.n	801c78a <SM_StateMachineHandler+0x9a>

		BUZZER_OFF();
 801c726:	2201      	movs	r2, #1
 801c728:	2180      	movs	r1, #128	; 0x80
 801c72a:	4897      	ldr	r0, [pc, #604]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c72c:	f7f7 fa66 	bl	8013bfc <HAL_GPIO_WritePin>
		SM_ApplParam.BuzzerCounter++;
 801c730:	4b96      	ldr	r3, [pc, #600]	; (801c98c <SM_StateMachineHandler+0x29c>)
 801c732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c734:	3301      	adds	r3, #1
 801c736:	4a95      	ldr	r2, [pc, #596]	; (801c98c <SM_StateMachineHandler+0x29c>)
 801c738:	6653      	str	r3, [r2, #100]	; 0x64
		if(SM_ApplParam.BuzzerCounter>(1000/loopms)){
 801c73a:	4b94      	ldr	r3, [pc, #592]	; (801c98c <SM_StateMachineHandler+0x29c>)
 801c73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c73e:	79fa      	ldrb	r2, [r7, #7]
 801c740:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801c744:	fb91 f2f2 	sdiv	r2, r1, r2
 801c748:	4293      	cmp	r3, r2
 801c74a:	f240 879c 	bls.w	801d686 <SM_StateMachineHandler+0xf96>
			BUZZER_ON();
 801c74e:	2200      	movs	r2, #0
 801c750:	2180      	movs	r1, #128	; 0x80
 801c752:	488d      	ldr	r0, [pc, #564]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c754:	f7f7 fa52 	bl	8013bfc <HAL_GPIO_WritePin>
			SM_ApplParam.BuzzerCounter = 0;
 801c758:	4b8c      	ldr	r3, [pc, #560]	; (801c98c <SM_StateMachineHandler+0x29c>)
 801c75a:	2200      	movs	r2, #0
 801c75c:	665a      	str	r2, [r3, #100]	; 0x64
			Appl_Display.PowerOffCounter++;
 801c75e:	4b8c      	ldr	r3, [pc, #560]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c760:	791b      	ldrb	r3, [r3, #4]
 801c762:	3301      	adds	r3, #1
 801c764:	b2da      	uxtb	r2, r3
 801c766:	4b8a      	ldr	r3, [pc, #552]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c768:	711a      	strb	r2, [r3, #4]
			if(Appl_Display.PowerOffCounter >= 5){
 801c76a:	4b89      	ldr	r3, [pc, #548]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c76c:	791b      	ldrb	r3, [r3, #4]
 801c76e:	2b04      	cmp	r3, #4
 801c770:	f240 8789 	bls.w	801d686 <SM_StateMachineHandler+0xf96>
				Appl_Display.PowerOffCounter = 0;
 801c774:	4b86      	ldr	r3, [pc, #536]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c776:	2200      	movs	r2, #0
 801c778:	711a      	strb	r2, [r3, #4]
				BATTERY_RELAY_OFF();
 801c77a:	2200      	movs	r2, #0
 801c77c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c780:	4881      	ldr	r0, [pc, #516]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c782:	f7f7 fa3b 	bl	8013bfc <HAL_GPIO_WritePin>
		if(SM_ApplParam.BuzzerCounter>(1000/loopms)){
 801c786:	f000 bf7e 	b.w	801d686 <SM_StateMachineHandler+0xf96>
	else
	{
		/*Vishwesh
		 * If there is no powerfail, let's charge battery and reset poweroff counter
		 */
		BATTERY_RELAY_ON();
 801c78a:	2201      	movs	r2, #1
 801c78c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c790:	487d      	ldr	r0, [pc, #500]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c792:	f7f7 fa33 	bl	8013bfc <HAL_GPIO_WritePin>
		Appl_Display.PowerOffCounter = 0;
 801c796:	4b7e      	ldr	r3, [pc, #504]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c798:	2200      	movs	r2, #0
 801c79a:	711a      	strb	r2, [r3, #4]


		if(SM_enumECUState == SM_enum_ECU_Init){
 801c79c:	4b79      	ldr	r3, [pc, #484]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c79e:	781b      	ldrb	r3, [r3, #0]
 801c7a0:	b2db      	uxtb	r3, r3
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d127      	bne.n	801c7f6 <SM_StateMachineHandler+0x106>
			Fnclocal_u32local++;
 801c7a6:	4b7b      	ldr	r3, [pc, #492]	; (801c994 <SM_StateMachineHandler+0x2a4>)
 801c7a8:	681b      	ldr	r3, [r3, #0]
 801c7aa:	3301      	adds	r3, #1
 801c7ac:	4a79      	ldr	r2, [pc, #484]	; (801c994 <SM_StateMachineHandler+0x2a4>)
 801c7ae:	6013      	str	r3, [r2, #0]
			if(Fnclocal_u32local > (5000/loopms)){
 801c7b0:	79fb      	ldrb	r3, [r7, #7]
 801c7b2:	f241 3288 	movw	r2, #5000	; 0x1388
 801c7b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c7ba:	461a      	mov	r2, r3
 801c7bc:	4b75      	ldr	r3, [pc, #468]	; (801c994 <SM_StateMachineHandler+0x2a4>)
 801c7be:	681b      	ldr	r3, [r3, #0]
 801c7c0:	429a      	cmp	r2, r3
 801c7c2:	f080 8761 	bcs.w	801d688 <SM_StateMachineHandler+0xf98>
				if(Appl_EEPParam.stm32.EEP_PowerFailedLastTime == 0){
 801c7c6:	4b74      	ldr	r3, [pc, #464]	; (801c998 <SM_StateMachineHandler+0x2a8>)
 801c7c8:	7a5b      	ldrb	r3, [r3, #9]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d107      	bne.n	801c7de <SM_StateMachineHandler+0xee>
					SM_enumECUState = SM_enum_ECU_StandByMode;
 801c7ce:	4b6d      	ldr	r3, [pc, #436]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c7d0:	2201      	movs	r2, #1
 801c7d2:	701a      	strb	r2, [r3, #0]
					Appl_Display.SelectedIndexIntheList = 1;
 801c7d4:	4b6e      	ldr	r3, [pc, #440]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c7d6:	2201      	movs	r2, #1
 801c7d8:	701a      	strb	r2, [r3, #0]
 801c7da:	f000 bf55 	b.w	801d688 <SM_StateMachineHandler+0xf98>
				}
				else{
					SM_enumECUState = SM_enum_ECU_ContinueFromLastPowerOff;
 801c7de:	4b69      	ldr	r3, [pc, #420]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c7e0:	2210      	movs	r2, #16
 801c7e2:	701a      	strb	r2, [r3, #0]
					Appl_Display.PowerOnCounter = 0;
 801c7e4:	4b6a      	ldr	r3, [pc, #424]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c7e6:	2200      	movs	r2, #0
 801c7e8:	70da      	strb	r2, [r3, #3]
					output = 0;
 801c7ea:	4b6c      	ldr	r3, [pc, #432]	; (801c99c <SM_StateMachineHandler+0x2ac>)
 801c7ec:	f04f 0200 	mov.w	r2, #0
 801c7f0:	601a      	str	r2, [r3, #0]
 801c7f2:	f000 bf49 	b.w	801d688 <SM_StateMachineHandler+0xf98>
				}
			}
		}

		else if(SM_enumECUState == SM_enum_ECU_StandByMode){
 801c7f6:	4b63      	ldr	r3, [pc, #396]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c7f8:	781b      	ldrb	r3, [r3, #0]
 801c7fa:	b2db      	uxtb	r3, r3
 801c7fc:	2b01      	cmp	r3, #1
 801c7fe:	d17b      	bne.n	801c8f8 <SM_StateMachineHandler+0x208>
			/*Vishwesh:
			 * Basic Behaviour of this Mode*/
			WriteEEPData();
 801c800:	f7fe fc8a 	bl	801b118 <WriteEEPData>
			DC_CONTACTOR_OFF();
 801c804:	2201      	movs	r2, #1
 801c806:	2102      	movs	r1, #2
 801c808:	4865      	ldr	r0, [pc, #404]	; (801c9a0 <SM_StateMachineHandler+0x2b0>)
 801c80a:	f7f7 f9f7 	bl	8013bfc <HAL_GPIO_WritePin>
			BUZZER_OFF();
 801c80e:	2201      	movs	r2, #1
 801c810:	2180      	movs	r1, #128	; 0x80
 801c812:	485d      	ldr	r0, [pc, #372]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c814:	f7f7 f9f2 	bl	8013bfc <HAL_GPIO_WritePin>
			REDLEDON();
 801c818:	2201      	movs	r2, #1
 801c81a:	2140      	movs	r1, #64	; 0x40
 801c81c:	485a      	ldr	r0, [pc, #360]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c81e:	f7f7 f9ed 	bl	8013bfc <HAL_GPIO_WritePin>
			GREENLEDOFF();
 801c822:	2200      	movs	r2, #0
 801c824:	2120      	movs	r1, #32
 801c826:	4858      	ldr	r0, [pc, #352]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c828:	f7f7 f9e8 	bl	8013bfc <HAL_GPIO_WritePin>
			ORANGELEDOFF();
 801c82c:	2200      	movs	r2, #0
 801c82e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c832:	4855      	ldr	r0, [pc, #340]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c834:	f7f7 f9e2 	bl	8013bfc <HAL_GPIO_WritePin>
			BLUELEDOFF();
 801c838:	2200      	movs	r2, #0
 801c83a:	2110      	movs	r1, #16
 801c83c:	4852      	ldr	r0, [pc, #328]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c83e:	f7f7 f9dd 	bl	8013bfc <HAL_GPIO_WritePin>
			/*Vishwesh:
			 * Button Handling of this mode*/
			if(SM_KeyPressed == CMD_Enum_B4) DEC(Appl_Display.SelectedIndexIntheList,1,1);
 801c842:	4b58      	ldr	r3, [pc, #352]	; (801c9a4 <SM_StateMachineHandler+0x2b4>)
 801c844:	781b      	ldrb	r3, [r3, #0]
 801c846:	2b04      	cmp	r3, #4
 801c848:	d109      	bne.n	801c85e <SM_StateMachineHandler+0x16e>
 801c84a:	4b51      	ldr	r3, [pc, #324]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c84c:	781b      	ldrb	r3, [r3, #0]
 801c84e:	2b02      	cmp	r3, #2
 801c850:	bf38      	it	cc
 801c852:	2302      	movcc	r3, #2
 801c854:	b2db      	uxtb	r3, r3
 801c856:	3b01      	subs	r3, #1
 801c858:	b2da      	uxtb	r2, r3
 801c85a:	4b4d      	ldr	r3, [pc, #308]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c85c:	701a      	strb	r2, [r3, #0]
			if(SM_KeyPressed == CMD_Enum_B3) INC(Appl_Display.SelectedIndexIntheList,Appl_Display.MaximumIndexInTheList,1);
 801c85e:	4b51      	ldr	r3, [pc, #324]	; (801c9a4 <SM_StateMachineHandler+0x2b4>)
 801c860:	781b      	ldrb	r3, [r3, #0]
 801c862:	2b03      	cmp	r3, #3
 801c864:	d10e      	bne.n	801c884 <SM_StateMachineHandler+0x194>
 801c866:	4b4a      	ldr	r3, [pc, #296]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c868:	785a      	ldrb	r2, [r3, #1]
 801c86a:	4b49      	ldr	r3, [pc, #292]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c86c:	781b      	ldrb	r3, [r3, #0]
 801c86e:	429a      	cmp	r2, r3
 801c870:	d904      	bls.n	801c87c <SM_StateMachineHandler+0x18c>
 801c872:	4b47      	ldr	r3, [pc, #284]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c874:	781b      	ldrb	r3, [r3, #0]
 801c876:	3301      	adds	r3, #1
 801c878:	b2db      	uxtb	r3, r3
 801c87a:	e001      	b.n	801c880 <SM_StateMachineHandler+0x190>
 801c87c:	4b44      	ldr	r3, [pc, #272]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c87e:	785b      	ldrb	r3, [r3, #1]
 801c880:	4a43      	ldr	r2, [pc, #268]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c882:	7013      	strb	r3, [r2, #0]
			if(SM_KeyPressed == CMD_Enum_B2){
 801c884:	4b47      	ldr	r3, [pc, #284]	; (801c9a4 <SM_StateMachineHandler+0x2b4>)
 801c886:	781b      	ldrb	r3, [r3, #0]
 801c888:	2b02      	cmp	r3, #2
 801c88a:	d128      	bne.n	801c8de <SM_StateMachineHandler+0x1ee>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801c88c:	4b45      	ldr	r3, [pc, #276]	; (801c9a4 <SM_StateMachineHandler+0x2b4>)
 801c88e:	2200      	movs	r2, #0
 801c890:	701a      	strb	r2, [r3, #0]
				MAP_SM(1,SM_enum_ECU_RejuvenationMenu);
 801c892:	4b3f      	ldr	r3, [pc, #252]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c894:	781b      	ldrb	r3, [r3, #0]
 801c896:	2b01      	cmp	r3, #1
 801c898:	d102      	bne.n	801c8a0 <SM_StateMachineHandler+0x1b0>
 801c89a:	4b3a      	ldr	r3, [pc, #232]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c89c:	2202      	movs	r2, #2
 801c89e:	701a      	strb	r2, [r3, #0]
				MAP_SM(2,SM_enum_ECU_SettingMenu);
 801c8a0:	4b3b      	ldr	r3, [pc, #236]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c8a2:	781b      	ldrb	r3, [r3, #0]
 801c8a4:	2b02      	cmp	r3, #2
 801c8a6:	d102      	bne.n	801c8ae <SM_StateMachineHandler+0x1be>
 801c8a8:	4b36      	ldr	r3, [pc, #216]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c8aa:	2203      	movs	r2, #3
 801c8ac:	701a      	strb	r2, [r3, #0]
				MAP_SM(3,SM_enum_ECU_SelfTest);
 801c8ae:	4b38      	ldr	r3, [pc, #224]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c8b0:	781b      	ldrb	r3, [r3, #0]
 801c8b2:	2b03      	cmp	r3, #3
 801c8b4:	d102      	bne.n	801c8bc <SM_StateMachineHandler+0x1cc>
 801c8b6:	4b33      	ldr	r3, [pc, #204]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c8b8:	220d      	movs	r2, #13
 801c8ba:	701a      	strb	r2, [r3, #0]
				MAP_SM(4,SM_enum_ECU_Info);
 801c8bc:	4b34      	ldr	r3, [pc, #208]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c8be:	781b      	ldrb	r3, [r3, #0]
 801c8c0:	2b04      	cmp	r3, #4
 801c8c2:	d102      	bne.n	801c8ca <SM_StateMachineHandler+0x1da>
 801c8c4:	4b2f      	ldr	r3, [pc, #188]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c8c6:	220f      	movs	r2, #15
 801c8c8:	701a      	strb	r2, [r3, #0]
				MAP_SM(5,SM_enum_ECU_VishwatestMode);
 801c8ca:	4b31      	ldr	r3, [pc, #196]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c8cc:	781b      	ldrb	r3, [r3, #0]
 801c8ce:	2b05      	cmp	r3, #5
 801c8d0:	d102      	bne.n	801c8d8 <SM_StateMachineHandler+0x1e8>
 801c8d2:	4b2c      	ldr	r3, [pc, #176]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c8d4:	2211      	movs	r2, #17
 801c8d6:	701a      	strb	r2, [r3, #0]
				Appl_Display.SelectedIndexIntheList = 1;
 801c8d8:	4b2d      	ldr	r3, [pc, #180]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c8da:	2201      	movs	r2, #1
 801c8dc:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801c8de:	4b31      	ldr	r3, [pc, #196]	; (801c9a4 <SM_StateMachineHandler+0x2b4>)
 801c8e0:	781b      	ldrb	r3, [r3, #0]
 801c8e2:	2b01      	cmp	r3, #1
 801c8e4:	f040 86d0 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801c8e8:	4b2e      	ldr	r3, [pc, #184]	; (801c9a4 <SM_StateMachineHandler+0x2b4>)
 801c8ea:	2200      	movs	r2, #0
 801c8ec:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_Info;
 801c8ee:	4b25      	ldr	r3, [pc, #148]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c8f0:	220f      	movs	r2, #15
 801c8f2:	701a      	strb	r2, [r3, #0]
 801c8f4:	f000 bec8 	b.w	801d688 <SM_StateMachineHandler+0xf98>
			}
		}

		else if(SM_enumECUState == SM_enum_ECU_SettingMenu){
 801c8f8:	4b22      	ldr	r3, [pc, #136]	; (801c984 <SM_StateMachineHandler+0x294>)
 801c8fa:	781b      	ldrb	r3, [r3, #0]
 801c8fc:	b2db      	uxtb	r3, r3
 801c8fe:	2b03      	cmp	r3, #3
 801c900:	d17f      	bne.n	801ca02 <SM_StateMachineHandler+0x312>
			/*Vishwesh:
			 * Basic Behaviour of this Mode*/
			WriteEEPData();
 801c902:	f7fe fc09 	bl	801b118 <WriteEEPData>
			DC_CONTACTOR_OFF();
 801c906:	2201      	movs	r2, #1
 801c908:	2102      	movs	r1, #2
 801c90a:	4825      	ldr	r0, [pc, #148]	; (801c9a0 <SM_StateMachineHandler+0x2b0>)
 801c90c:	f7f7 f976 	bl	8013bfc <HAL_GPIO_WritePin>
			BUZZER_OFF();
 801c910:	2201      	movs	r2, #1
 801c912:	2180      	movs	r1, #128	; 0x80
 801c914:	481c      	ldr	r0, [pc, #112]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c916:	f7f7 f971 	bl	8013bfc <HAL_GPIO_WritePin>
			REDLEDON();
 801c91a:	2201      	movs	r2, #1
 801c91c:	2140      	movs	r1, #64	; 0x40
 801c91e:	481a      	ldr	r0, [pc, #104]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c920:	f7f7 f96c 	bl	8013bfc <HAL_GPIO_WritePin>
			GREENLEDOFF();
 801c924:	2200      	movs	r2, #0
 801c926:	2120      	movs	r1, #32
 801c928:	4817      	ldr	r0, [pc, #92]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c92a:	f7f7 f967 	bl	8013bfc <HAL_GPIO_WritePin>
			ORANGELEDOFF();
 801c92e:	2200      	movs	r2, #0
 801c930:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c934:	4814      	ldr	r0, [pc, #80]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c936:	f7f7 f961 	bl	8013bfc <HAL_GPIO_WritePin>
			BLUELEDOFF();
 801c93a:	2200      	movs	r2, #0
 801c93c:	2110      	movs	r1, #16
 801c93e:	4812      	ldr	r0, [pc, #72]	; (801c988 <SM_StateMachineHandler+0x298>)
 801c940:	f7f7 f95c 	bl	8013bfc <HAL_GPIO_WritePin>

			if(SM_KeyPressed == CMD_Enum_B4) DEC(Appl_Display.SelectedIndexIntheList,1,1);
 801c944:	4b17      	ldr	r3, [pc, #92]	; (801c9a4 <SM_StateMachineHandler+0x2b4>)
 801c946:	781b      	ldrb	r3, [r3, #0]
 801c948:	2b04      	cmp	r3, #4
 801c94a:	d109      	bne.n	801c960 <SM_StateMachineHandler+0x270>
 801c94c:	4b10      	ldr	r3, [pc, #64]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c94e:	781b      	ldrb	r3, [r3, #0]
 801c950:	2b02      	cmp	r3, #2
 801c952:	bf38      	it	cc
 801c954:	2302      	movcc	r3, #2
 801c956:	b2db      	uxtb	r3, r3
 801c958:	3b01      	subs	r3, #1
 801c95a:	b2da      	uxtb	r2, r3
 801c95c:	4b0c      	ldr	r3, [pc, #48]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c95e:	701a      	strb	r2, [r3, #0]
			if(SM_KeyPressed == CMD_Enum_B3) INC(Appl_Display.SelectedIndexIntheList,Appl_Display.MaximumIndexInTheList,1);
 801c960:	4b10      	ldr	r3, [pc, #64]	; (801c9a4 <SM_StateMachineHandler+0x2b4>)
 801c962:	781b      	ldrb	r3, [r3, #0]
 801c964:	2b03      	cmp	r3, #3
 801c966:	d123      	bne.n	801c9b0 <SM_StateMachineHandler+0x2c0>
 801c968:	4b09      	ldr	r3, [pc, #36]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c96a:	785a      	ldrb	r2, [r3, #1]
 801c96c:	4b08      	ldr	r3, [pc, #32]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c96e:	781b      	ldrb	r3, [r3, #0]
 801c970:	429a      	cmp	r2, r3
 801c972:	d919      	bls.n	801c9a8 <SM_StateMachineHandler+0x2b8>
 801c974:	4b06      	ldr	r3, [pc, #24]	; (801c990 <SM_StateMachineHandler+0x2a0>)
 801c976:	781b      	ldrb	r3, [r3, #0]
 801c978:	3301      	adds	r3, #1
 801c97a:	b2db      	uxtb	r3, r3
 801c97c:	e016      	b.n	801c9ac <SM_StateMachineHandler+0x2bc>
 801c97e:	bf00      	nop
 801c980:	200047b0 	.word	0x200047b0
 801c984:	2000490c 	.word	0x2000490c
 801c988:	40020800 	.word	0x40020800
 801c98c:	20004974 	.word	0x20004974
 801c990:	20004870 	.word	0x20004870
 801c994:	200005e0 	.word	0x200005e0
 801c998:	2000005c 	.word	0x2000005c
 801c99c:	2000491c 	.word	0x2000491c
 801c9a0:	40020400 	.word	0x40020400
 801c9a4:	200048e4 	.word	0x200048e4
 801c9a8:	4ba4      	ldr	r3, [pc, #656]	; (801cc3c <SM_StateMachineHandler+0x54c>)
 801c9aa:	785b      	ldrb	r3, [r3, #1]
 801c9ac:	4aa3      	ldr	r2, [pc, #652]	; (801cc3c <SM_StateMachineHandler+0x54c>)
 801c9ae:	7013      	strb	r3, [r2, #0]
			if(SM_KeyPressed == CMD_Enum_B2){
 801c9b0:	4ba3      	ldr	r3, [pc, #652]	; (801cc40 <SM_StateMachineHandler+0x550>)
 801c9b2:	781b      	ldrb	r3, [r3, #0]
 801c9b4:	2b02      	cmp	r3, #2
 801c9b6:	d117      	bne.n	801c9e8 <SM_StateMachineHandler+0x2f8>
				MAP_SM(1,SM_enum_ECU_SettingMenu_Transfer);
 801c9b8:	4ba0      	ldr	r3, [pc, #640]	; (801cc3c <SM_StateMachineHandler+0x54c>)
 801c9ba:	781b      	ldrb	r3, [r3, #0]
 801c9bc:	2b01      	cmp	r3, #1
 801c9be:	d102      	bne.n	801c9c6 <SM_StateMachineHandler+0x2d6>
 801c9c0:	4ba0      	ldr	r3, [pc, #640]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801c9c2:	2204      	movs	r2, #4
 801c9c4:	701a      	strb	r2, [r3, #0]
				MAP_SM(2,SM_enum_ECU_SettingMenu_Erase);
 801c9c6:	4b9d      	ldr	r3, [pc, #628]	; (801cc3c <SM_StateMachineHandler+0x54c>)
 801c9c8:	781b      	ldrb	r3, [r3, #0]
 801c9ca:	2b02      	cmp	r3, #2
 801c9cc:	d102      	bne.n	801c9d4 <SM_StateMachineHandler+0x2e4>
 801c9ce:	4b9d      	ldr	r3, [pc, #628]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801c9d0:	2205      	movs	r2, #5
 801c9d2:	701a      	strb	r2, [r3, #0]
				MAP_SM(3,SM_enum_ECU_SettingMenu_MaxVoltage);
 801c9d4:	4b99      	ldr	r3, [pc, #612]	; (801cc3c <SM_StateMachineHandler+0x54c>)
 801c9d6:	781b      	ldrb	r3, [r3, #0]
 801c9d8:	2b03      	cmp	r3, #3
 801c9da:	d102      	bne.n	801c9e2 <SM_StateMachineHandler+0x2f2>
 801c9dc:	4b99      	ldr	r3, [pc, #612]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801c9de:	2207      	movs	r2, #7
 801c9e0:	701a      	strb	r2, [r3, #0]
				Appl_Display.SelectedSubIndex = 1;
 801c9e2:	4b96      	ldr	r3, [pc, #600]	; (801cc3c <SM_StateMachineHandler+0x54c>)
 801c9e4:	2201      	movs	r2, #1
 801c9e6:	709a      	strb	r2, [r3, #2]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801c9e8:	4b95      	ldr	r3, [pc, #596]	; (801cc40 <SM_StateMachineHandler+0x550>)
 801c9ea:	781b      	ldrb	r3, [r3, #0]
 801c9ec:	2b01      	cmp	r3, #1
 801c9ee:	f040 864b 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
				Appl_Display.SelectedIndexIntheList = 1;
 801c9f2:	4b92      	ldr	r3, [pc, #584]	; (801cc3c <SM_StateMachineHandler+0x54c>)
 801c9f4:	2201      	movs	r2, #1
 801c9f6:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801c9f8:	4b92      	ldr	r3, [pc, #584]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801c9fa:	2201      	movs	r2, #1
 801c9fc:	701a      	strb	r2, [r3, #0]
 801c9fe:	f000 be43 	b.w	801d688 <SM_StateMachineHandler+0xf98>
			}
		}

		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Transfer){
 801ca02:	4b90      	ldr	r3, [pc, #576]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801ca04:	781b      	ldrb	r3, [r3, #0]
 801ca06:	b2db      	uxtb	r3, r3
 801ca08:	2b04      	cmp	r3, #4
 801ca0a:	d12f      	bne.n	801ca6c <SM_StateMachineHandler+0x37c>
			if(SM_KeyPressed == CMD_Enum_B4){}
			if(SM_KeyPressed == CMD_Enum_B3){}
			if(SM_KeyPressed == CMD_Enum_B2){
 801ca0c:	4b8c      	ldr	r3, [pc, #560]	; (801cc40 <SM_StateMachineHandler+0x550>)
 801ca0e:	781b      	ldrb	r3, [r3, #0]
 801ca10:	2b02      	cmp	r3, #2
 801ca12:	d121      	bne.n	801ca58 <SM_StateMachineHandler+0x368>
				Appl_Display.SelectedSubIndex = 1;
 801ca14:	4b89      	ldr	r3, [pc, #548]	; (801cc3c <SM_StateMachineHandler+0x54c>)
 801ca16:	2201      	movs	r2, #1
 801ca18:	709a      	strb	r2, [r3, #2]
				SM_ApplParam.Transfer_PageloopCount = 1;
 801ca1a:	4b8b      	ldr	r3, [pc, #556]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801ca1c:	2201      	movs	r2, #1
 801ca1e:	645a      	str	r2, [r3, #68]	; 0x44
				SM_ApplParam.Transfer_OffsetCounter = 0;
 801ca20:	4b89      	ldr	r3, [pc, #548]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801ca22:	2200      	movs	r2, #0
 801ca24:	649a      	str	r2, [r3, #72]	; 0x48
				SM_ApplParam.ExtEepTotalRecordsTotransferred = (uint16_t)((uint16_t)Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberH<<8 | Appl_EEPParam.stm32.EEP_ExternalEEPRecordSerialNumberL);
 801ca26:	4b89      	ldr	r3, [pc, #548]	; (801cc4c <SM_StateMachineHandler+0x55c>)
 801ca28:	7c1b      	ldrb	r3, [r3, #16]
 801ca2a:	021b      	lsls	r3, r3, #8
 801ca2c:	b21a      	sxth	r2, r3
 801ca2e:	4b87      	ldr	r3, [pc, #540]	; (801cc4c <SM_StateMachineHandler+0x55c>)
 801ca30:	7c5b      	ldrb	r3, [r3, #17]
 801ca32:	b21b      	sxth	r3, r3
 801ca34:	4313      	orrs	r3, r2
 801ca36:	b21b      	sxth	r3, r3
 801ca38:	b29a      	uxth	r2, r3
 801ca3a:	4b83      	ldr	r3, [pc, #524]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801ca3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				SM_enumECUState = SM_enum_ECU_SettingMenu_Completed;
 801ca40:	4b80      	ldr	r3, [pc, #512]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801ca42:	2206      	movs	r2, #6
 801ca44:	701a      	strb	r2, [r3, #0]
				delimiter = '$';
 801ca46:	2324      	movs	r3, #36	; 0x24
 801ca48:	733b      	strb	r3, [r7, #12]
				HAL_UART_Transmit(&huart1, &delimiter, 1, loopms);
 801ca4a:	79fb      	ldrb	r3, [r7, #7]
 801ca4c:	f107 010c 	add.w	r1, r7, #12
 801ca50:	2201      	movs	r2, #1
 801ca52:	487f      	ldr	r0, [pc, #508]	; (801cc50 <SM_StateMachineHandler+0x560>)
 801ca54:	f7f9 fe91 	bl	801677a <HAL_UART_Transmit>
			}
			if(SM_KeyPressed == CMD_Enum_B1){SM_enumECUState = SM_enum_ECU_SettingMenu;}
 801ca58:	4b79      	ldr	r3, [pc, #484]	; (801cc40 <SM_StateMachineHandler+0x550>)
 801ca5a:	781b      	ldrb	r3, [r3, #0]
 801ca5c:	2b01      	cmp	r3, #1
 801ca5e:	f040 8613 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
 801ca62:	4b78      	ldr	r3, [pc, #480]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801ca64:	2203      	movs	r2, #3
 801ca66:	701a      	strb	r2, [r3, #0]
 801ca68:	f000 be0e 	b.w	801d688 <SM_StateMachineHandler+0xf98>
		}

		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Erase){
 801ca6c:	4b75      	ldr	r3, [pc, #468]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801ca6e:	781b      	ldrb	r3, [r3, #0]
 801ca70:	b2db      	uxtb	r3, r3
 801ca72:	2b05      	cmp	r3, #5
 801ca74:	d119      	bne.n	801caaa <SM_StateMachineHandler+0x3ba>
			if(SM_KeyPressed == CMD_Enum_B4){}
			if(SM_KeyPressed == CMD_Enum_B3){}
			if(SM_KeyPressed == CMD_Enum_B2){
 801ca76:	4b72      	ldr	r3, [pc, #456]	; (801cc40 <SM_StateMachineHandler+0x550>)
 801ca78:	781b      	ldrb	r3, [r3, #0]
 801ca7a:	2b02      	cmp	r3, #2
 801ca7c:	d10b      	bne.n	801ca96 <SM_StateMachineHandler+0x3a6>
				Appl_Display.SelectedSubIndex = 2;
 801ca7e:	4b6f      	ldr	r3, [pc, #444]	; (801cc3c <SM_StateMachineHandler+0x54c>)
 801ca80:	2202      	movs	r2, #2
 801ca82:	709a      	strb	r2, [r3, #2]
				SM_ApplParam.Transfer_PageloopCount = 1;
 801ca84:	4b70      	ldr	r3, [pc, #448]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801ca86:	2201      	movs	r2, #1
 801ca88:	645a      	str	r2, [r3, #68]	; 0x44
				SM_ApplParam.Transfer_OffsetCounter = 0;
 801ca8a:	4b6f      	ldr	r3, [pc, #444]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801ca8c:	2200      	movs	r2, #0
 801ca8e:	649a      	str	r2, [r3, #72]	; 0x48
				SM_enumECUState = SM_enum_ECU_SettingMenu_Completed;
 801ca90:	4b6c      	ldr	r3, [pc, #432]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801ca92:	2206      	movs	r2, #6
 801ca94:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){SM_enumECUState = SM_enum_ECU_SettingMenu;}
 801ca96:	4b6a      	ldr	r3, [pc, #424]	; (801cc40 <SM_StateMachineHandler+0x550>)
 801ca98:	781b      	ldrb	r3, [r3, #0]
 801ca9a:	2b01      	cmp	r3, #1
 801ca9c:	f040 85f4 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
 801caa0:	4b68      	ldr	r3, [pc, #416]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801caa2:	2203      	movs	r2, #3
 801caa4:	701a      	strb	r2, [r3, #0]
 801caa6:	f000 bdef 	b.w	801d688 <SM_StateMachineHandler+0xf98>
		}

		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Completed){
 801caaa:	4b66      	ldr	r3, [pc, #408]	; (801cc44 <SM_StateMachineHandler+0x554>)
 801caac:	781b      	ldrb	r3, [r3, #0]
 801caae:	b2db      	uxtb	r3, r3
 801cab0:	2b06      	cmp	r3, #6
 801cab2:	f040 8138 	bne.w	801cd26 <SM_StateMachineHandler+0x636>
			if(SM_KeyPressed == CMD_Enum_B4){}
			if(SM_KeyPressed == CMD_Enum_B3){}
			if(SM_KeyPressed == CMD_Enum_B2){}
			if(SM_KeyPressed == CMD_Enum_B1){}
			ORANGELEDON();
 801cab6:	2201      	movs	r2, #1
 801cab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cabc:	4865      	ldr	r0, [pc, #404]	; (801cc54 <SM_StateMachineHandler+0x564>)
 801cabe:	f7f7 f89d 	bl	8013bfc <HAL_GPIO_WritePin>
			if(Appl_Display.SelectedSubIndex == 1){
 801cac2:	4b5e      	ldr	r3, [pc, #376]	; (801cc3c <SM_StateMachineHandler+0x54c>)
 801cac4:	789b      	ldrb	r3, [r3, #2]
 801cac6:	2b01      	cmp	r3, #1
 801cac8:	f040 80e4 	bne.w	801cc94 <SM_StateMachineHandler+0x5a4>
				 * For the current implementation, it can take values 0,16,32,..240.
				 * Once it reaches 240, data must be read --> then increment the page --> Reset the offset to 0
				 */


				if(SM_ApplParam.ExtEepTotalRecordsTotransferred > 0 ){
 801cacc:	4b5e      	ldr	r3, [pc, #376]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cace:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	f000 80d0 	beq.w	801cc78 <SM_StateMachineHandler+0x588>
					/*Step 1: Read 1 Record*/
					Appl_EEPParam.stm32.ExtEepAddress = 0xA0;
 801cad8:	4b5c      	ldr	r3, [pc, #368]	; (801cc4c <SM_StateMachineHandler+0x55c>)
 801cada:	22a0      	movs	r2, #160	; 0xa0
 801cadc:	749a      	strb	r2, [r3, #18]
					EEP_Error = EEPROM_Read(SM_ApplParam.Transfer_PageloopCount,SM_ApplParam.Transfer_OffsetCounter,&sendBuffer[0].bytes[0],1*NUM_OF_BYTES_IN_A_EXTEEP_RECORD,Appl_EEPParam.stm32.ExtEepAddress);
 801cade:	4b5a      	ldr	r3, [pc, #360]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cae2:	b298      	uxth	r0, r3
 801cae4:	4b58      	ldr	r3, [pc, #352]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cae8:	b299      	uxth	r1, r3
 801caea:	4b58      	ldr	r3, [pc, #352]	; (801cc4c <SM_StateMachineHandler+0x55c>)
 801caec:	7c9b      	ldrb	r3, [r3, #18]
 801caee:	9300      	str	r3, [sp, #0]
 801caf0:	2310      	movs	r3, #16
 801caf2:	4a59      	ldr	r2, [pc, #356]	; (801cc58 <SM_StateMachineHandler+0x568>)
 801caf4:	f7fe fea2 	bl	801b83c <EEPROM_Read>
 801caf8:	4603      	mov	r3, r0
 801cafa:	737b      	strb	r3, [r7, #13]
					if(EEP_Error == EXTEEP_OK){
 801cafc:	7b7b      	ldrb	r3, [r7, #13]
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d179      	bne.n	801cbf6 <SM_StateMachineHandler+0x506>
						/*Step 2: Increment offset to next record*/
						SM_ApplParam.Transfer_OffsetCounter += NUM_OF_BYTES_IN_A_EXTEEP_RECORD;
 801cb02:	4b51      	ldr	r3, [pc, #324]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cb04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb06:	3310      	adds	r3, #16
 801cb08:	4a4f      	ldr	r2, [pc, #316]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cb0a:	6493      	str	r3, [r2, #72]	; 0x48
						/*Step 3: Decrement offset to next record*/
						SM_ApplParam.ExtEepTotalRecordsTotransferred-=1;
 801cb0c:	4b4e      	ldr	r3, [pc, #312]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cb0e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801cb12:	3b01      	subs	r3, #1
 801cb14:	b29a      	uxth	r2, r3
 801cb16:	4b4c      	ldr	r3, [pc, #304]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cb18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						 * ascii format. Since each number is 1 byte, maximum of 3-bytes required
						 * for each hex-byte. (i.e 0x255 = '2''5''5')
						 * last byte added '|' is wall delimiter
						 * So total 16*3+1 bytes are sent per record through RS-232
						 * If you know number of records avaialble, you can predict how much bytes are sent*/
						for(uint8_t i = 0, j=0; i<(NUM_OF_BYTES_IN_A_EXTEEP_RECORD);i++,j+=3){
 801cb1c:	2300      	movs	r3, #0
 801cb1e:	73fb      	strb	r3, [r7, #15]
 801cb20:	2300      	movs	r3, #0
 801cb22:	73bb      	strb	r3, [r7, #14]
 801cb24:	e04b      	b.n	801cbbe <SM_StateMachineHandler+0x4ce>
							Fnclocal_uartBuffer[0] = (sendBuffer[0].bytes[i]/100)+0x30;
 801cb26:	7bfb      	ldrb	r3, [r7, #15]
 801cb28:	4a4b      	ldr	r2, [pc, #300]	; (801cc58 <SM_StateMachineHandler+0x568>)
 801cb2a:	5cd3      	ldrb	r3, [r2, r3]
 801cb2c:	4a4b      	ldr	r2, [pc, #300]	; (801cc5c <SM_StateMachineHandler+0x56c>)
 801cb2e:	fba2 2303 	umull	r2, r3, r2, r3
 801cb32:	095b      	lsrs	r3, r3, #5
 801cb34:	b2db      	uxtb	r3, r3
 801cb36:	3330      	adds	r3, #48	; 0x30
 801cb38:	b2da      	uxtb	r2, r3
 801cb3a:	4b49      	ldr	r3, [pc, #292]	; (801cc60 <SM_StateMachineHandler+0x570>)
 801cb3c:	701a      	strb	r2, [r3, #0]
							Fnclocal_char = (sendBuffer[0].bytes[i])%100;
 801cb3e:	7bfb      	ldrb	r3, [r7, #15]
 801cb40:	4a45      	ldr	r2, [pc, #276]	; (801cc58 <SM_StateMachineHandler+0x568>)
 801cb42:	5cd3      	ldrb	r3, [r2, r3]
 801cb44:	4a45      	ldr	r2, [pc, #276]	; (801cc5c <SM_StateMachineHandler+0x56c>)
 801cb46:	fba2 1203 	umull	r1, r2, r2, r3
 801cb4a:	0952      	lsrs	r2, r2, #5
 801cb4c:	2164      	movs	r1, #100	; 0x64
 801cb4e:	fb01 f202 	mul.w	r2, r1, r2
 801cb52:	1a9b      	subs	r3, r3, r2
 801cb54:	b2da      	uxtb	r2, r3
 801cb56:	4b43      	ldr	r3, [pc, #268]	; (801cc64 <SM_StateMachineHandler+0x574>)
 801cb58:	701a      	strb	r2, [r3, #0]
							Fnclocal_uartBuffer[1] = (Fnclocal_char/10)+0x30;
 801cb5a:	4b42      	ldr	r3, [pc, #264]	; (801cc64 <SM_StateMachineHandler+0x574>)
 801cb5c:	781b      	ldrb	r3, [r3, #0]
 801cb5e:	4a42      	ldr	r2, [pc, #264]	; (801cc68 <SM_StateMachineHandler+0x578>)
 801cb60:	fba2 2303 	umull	r2, r3, r2, r3
 801cb64:	08db      	lsrs	r3, r3, #3
 801cb66:	b2db      	uxtb	r3, r3
 801cb68:	3330      	adds	r3, #48	; 0x30
 801cb6a:	b2da      	uxtb	r2, r3
 801cb6c:	4b3c      	ldr	r3, [pc, #240]	; (801cc60 <SM_StateMachineHandler+0x570>)
 801cb6e:	705a      	strb	r2, [r3, #1]
							Fnclocal_uartBuffer[2] = (Fnclocal_char%10)+0x30;
 801cb70:	4b3c      	ldr	r3, [pc, #240]	; (801cc64 <SM_StateMachineHandler+0x574>)
 801cb72:	781a      	ldrb	r2, [r3, #0]
 801cb74:	4b3c      	ldr	r3, [pc, #240]	; (801cc68 <SM_StateMachineHandler+0x578>)
 801cb76:	fba3 1302 	umull	r1, r3, r3, r2
 801cb7a:	08d9      	lsrs	r1, r3, #3
 801cb7c:	460b      	mov	r3, r1
 801cb7e:	009b      	lsls	r3, r3, #2
 801cb80:	440b      	add	r3, r1
 801cb82:	005b      	lsls	r3, r3, #1
 801cb84:	1ad3      	subs	r3, r2, r3
 801cb86:	b2db      	uxtb	r3, r3
 801cb88:	3330      	adds	r3, #48	; 0x30
 801cb8a:	b2da      	uxtb	r2, r3
 801cb8c:	4b34      	ldr	r3, [pc, #208]	; (801cc60 <SM_StateMachineHandler+0x570>)
 801cb8e:	709a      	strb	r2, [r3, #2]
							uartSendBytesBuffer[j+0] = Fnclocal_uartBuffer[0];
 801cb90:	7bbb      	ldrb	r3, [r7, #14]
 801cb92:	4a33      	ldr	r2, [pc, #204]	; (801cc60 <SM_StateMachineHandler+0x570>)
 801cb94:	7811      	ldrb	r1, [r2, #0]
 801cb96:	4a35      	ldr	r2, [pc, #212]	; (801cc6c <SM_StateMachineHandler+0x57c>)
 801cb98:	54d1      	strb	r1, [r2, r3]
							uartSendBytesBuffer[j+1] = Fnclocal_uartBuffer[1];
 801cb9a:	7bbb      	ldrb	r3, [r7, #14]
 801cb9c:	3301      	adds	r3, #1
 801cb9e:	4a30      	ldr	r2, [pc, #192]	; (801cc60 <SM_StateMachineHandler+0x570>)
 801cba0:	7851      	ldrb	r1, [r2, #1]
 801cba2:	4a32      	ldr	r2, [pc, #200]	; (801cc6c <SM_StateMachineHandler+0x57c>)
 801cba4:	54d1      	strb	r1, [r2, r3]
							uartSendBytesBuffer[j+2] = Fnclocal_uartBuffer[2];
 801cba6:	7bbb      	ldrb	r3, [r7, #14]
 801cba8:	3302      	adds	r3, #2
 801cbaa:	4a2d      	ldr	r2, [pc, #180]	; (801cc60 <SM_StateMachineHandler+0x570>)
 801cbac:	7891      	ldrb	r1, [r2, #2]
 801cbae:	4a2f      	ldr	r2, [pc, #188]	; (801cc6c <SM_StateMachineHandler+0x57c>)
 801cbb0:	54d1      	strb	r1, [r2, r3]
						for(uint8_t i = 0, j=0; i<(NUM_OF_BYTES_IN_A_EXTEEP_RECORD);i++,j+=3){
 801cbb2:	7bfb      	ldrb	r3, [r7, #15]
 801cbb4:	3301      	adds	r3, #1
 801cbb6:	73fb      	strb	r3, [r7, #15]
 801cbb8:	7bbb      	ldrb	r3, [r7, #14]
 801cbba:	3303      	adds	r3, #3
 801cbbc:	73bb      	strb	r3, [r7, #14]
 801cbbe:	7bfb      	ldrb	r3, [r7, #15]
 801cbc0:	2b0f      	cmp	r3, #15
 801cbc2:	d9b0      	bls.n	801cb26 <SM_StateMachineHandler+0x436>
						}
						uartSendBytesBuffer[NUM_OF_BYTES_IN_A_EXTEEP_RECORD*3] = '|';
 801cbc4:	4b29      	ldr	r3, [pc, #164]	; (801cc6c <SM_StateMachineHandler+0x57c>)
 801cbc6:	227c      	movs	r2, #124	; 0x7c
 801cbc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						/*step 5: Transmit via UART*/
						HAL_UART_Transmit(&huart1, &uartSendBytesBuffer[0], 3*NUM_OF_BYTES_IN_A_EXTEEP_RECORD+1, loopms);
 801cbcc:	79fb      	ldrb	r3, [r7, #7]
 801cbce:	2231      	movs	r2, #49	; 0x31
 801cbd0:	4926      	ldr	r1, [pc, #152]	; (801cc6c <SM_StateMachineHandler+0x57c>)
 801cbd2:	481f      	ldr	r0, [pc, #124]	; (801cc50 <SM_StateMachineHandler+0x560>)
 801cbd4:	f7f9 fdd1 	bl	801677a <HAL_UART_Transmit>
						/*step 6 : */
						if(SM_ApplParam.Transfer_OffsetCounter >= 256){
 801cbd8:	4b1b      	ldr	r3, [pc, #108]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cbda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cbdc:	2bff      	cmp	r3, #255	; 0xff
 801cbde:	f240 8553 	bls.w	801d688 <SM_StateMachineHandler+0xf98>
							SM_ApplParam.Transfer_OffsetCounter = 0;
 801cbe2:	4b19      	ldr	r3, [pc, #100]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cbe4:	2200      	movs	r2, #0
 801cbe6:	649a      	str	r2, [r3, #72]	; 0x48
							SM_ApplParam.Transfer_PageloopCount++;
 801cbe8:	4b17      	ldr	r3, [pc, #92]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cbea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cbec:	3301      	adds	r3, #1
 801cbee:	4a16      	ldr	r2, [pc, #88]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cbf0:	6453      	str	r3, [r2, #68]	; 0x44
 801cbf2:	f000 bd49 	b.w	801d688 <SM_StateMachineHandler+0xf98>
						}
					}
					else{
						ExtEEP_ErrorCounter++;
 801cbf6:	4b1e      	ldr	r3, [pc, #120]	; (801cc70 <SM_StateMachineHandler+0x580>)
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	3301      	adds	r3, #1
 801cbfc:	4a1c      	ldr	r2, [pc, #112]	; (801cc70 <SM_StateMachineHandler+0x580>)
 801cbfe:	6013      	str	r3, [r2, #0]
						/*ResetI2c*/
						(&hi2c1)->Instance->CR1 |= I2C_CR1_SWRST;
 801cc00:	4b1c      	ldr	r3, [pc, #112]	; (801cc74 <SM_StateMachineHandler+0x584>)
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	681a      	ldr	r2, [r3, #0]
 801cc06:	4b1b      	ldr	r3, [pc, #108]	; (801cc74 <SM_StateMachineHandler+0x584>)
 801cc08:	681b      	ldr	r3, [r3, #0]
 801cc0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801cc0e:	601a      	str	r2, [r3, #0]
						(&hi2c1)->Instance->CR1 &= ~I2C_CR1_SWRST;
 801cc10:	4b18      	ldr	r3, [pc, #96]	; (801cc74 <SM_StateMachineHandler+0x584>)
 801cc12:	681b      	ldr	r3, [r3, #0]
 801cc14:	681a      	ldr	r2, [r3, #0]
 801cc16:	4b17      	ldr	r3, [pc, #92]	; (801cc74 <SM_StateMachineHandler+0x584>)
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801cc1e:	601a      	str	r2, [r3, #0]

						if(ExtEEP_ErrorCounter >= 30){
 801cc20:	4b13      	ldr	r3, [pc, #76]	; (801cc70 <SM_StateMachineHandler+0x580>)
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	2b1d      	cmp	r3, #29
 801cc26:	f240 852f 	bls.w	801d688 <SM_StateMachineHandler+0xf98>
							ExtEEP_ErrorCounter = 0;
 801cc2a:	4b11      	ldr	r3, [pc, #68]	; (801cc70 <SM_StateMachineHandler+0x580>)
 801cc2c:	2200      	movs	r2, #0
 801cc2e:	601a      	str	r2, [r3, #0]
							SM_ApplParam.ExtEepTotalRecordsTotransferred = 0;
 801cc30:	4b05      	ldr	r3, [pc, #20]	; (801cc48 <SM_StateMachineHandler+0x558>)
 801cc32:	2200      	movs	r2, #0
 801cc34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 801cc38:	f000 bd26 	b.w	801d688 <SM_StateMachineHandler+0xf98>
 801cc3c:	20004870 	.word	0x20004870
 801cc40:	200048e4 	.word	0x200048e4
 801cc44:	2000490c 	.word	0x2000490c
 801cc48:	20004974 	.word	0x20004974
 801cc4c:	2000005c 	.word	0x2000005c
 801cc50:	20004470 	.word	0x20004470
 801cc54:	40020800 	.word	0x40020800
 801cc58:	200049ec 	.word	0x200049ec
 801cc5c:	51eb851f 	.word	0x51eb851f
 801cc60:	200005e4 	.word	0x200005e4
 801cc64:	200005e8 	.word	0x200005e8
 801cc68:	cccccccd 	.word	0xcccccccd
 801cc6c:	20004940 	.word	0x20004940
 801cc70:	200005d4 	.word	0x200005d4
 801cc74:	200043bc 	.word	0x200043bc
						}
					}

				}
				else{
					SM_enumECUState = SM_enum_ECU_SettingMenu;
 801cc78:	4b9c      	ldr	r3, [pc, #624]	; (801ceec <SM_StateMachineHandler+0x7fc>)
 801cc7a:	2203      	movs	r2, #3
 801cc7c:	701a      	strb	r2, [r3, #0]
					delimiter = '#';
 801cc7e:	2323      	movs	r3, #35	; 0x23
 801cc80:	733b      	strb	r3, [r7, #12]
					HAL_UART_Transmit(&huart1, &delimiter, 1, loopms);
 801cc82:	79fb      	ldrb	r3, [r7, #7]
 801cc84:	f107 010c 	add.w	r1, r7, #12
 801cc88:	2201      	movs	r2, #1
 801cc8a:	4899      	ldr	r0, [pc, #612]	; (801cef0 <SM_StateMachineHandler+0x800>)
 801cc8c:	f7f9 fd75 	bl	801677a <HAL_UART_Transmit>
 801cc90:	f000 bcfa 	b.w	801d688 <SM_StateMachineHandler+0xf98>
				}
			}
			else if(Appl_Display.SelectedSubIndex == 2){
 801cc94:	4b97      	ldr	r3, [pc, #604]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801cc96:	789b      	ldrb	r3, [r3, #2]
 801cc98:	2b02      	cmp	r3, #2
 801cc9a:	f040 84f5 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
				ResetRecords();
 801cc9e:	f7fe fd37 	bl	801b710 <ResetRecords>
				WriteEEPData();
 801cca2:	f7fe fa39 	bl	801b118 <WriteEEPData>
				Appl_EEPParam.stm32.ExtEepAddress = 0xA0;
 801cca6:	4b94      	ldr	r3, [pc, #592]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cca8:	22a0      	movs	r2, #160	; 0xa0
 801ccaa:	749a      	strb	r2, [r3, #18]
				EEP_Error = EEPROM_PageErase(SM_ApplParam.Transfer_PageloopCount,Appl_EEPParam.stm32.ExtEepAddress);
 801ccac:	4b93      	ldr	r3, [pc, #588]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801ccae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ccb0:	b29b      	uxth	r3, r3
 801ccb2:	4a91      	ldr	r2, [pc, #580]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801ccb4:	7c92      	ldrb	r2, [r2, #18]
 801ccb6:	4611      	mov	r1, r2
 801ccb8:	4618      	mov	r0, r3
 801ccba:	f7fe fe2f 	bl	801b91c <EEPROM_PageErase>
 801ccbe:	4603      	mov	r3, r0
 801ccc0:	737b      	strb	r3, [r7, #13]
				if(EEP_Error == EXTEEP_OK){
 801ccc2:	7b7b      	ldrb	r3, [r7, #13]
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d105      	bne.n	801ccd4 <SM_StateMachineHandler+0x5e4>
					SM_ApplParam.Transfer_PageloopCount++;
 801ccc8:	4b8c      	ldr	r3, [pc, #560]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801ccca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cccc:	3301      	adds	r3, #1
 801ccce:	4a8b      	ldr	r2, [pc, #556]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801ccd0:	6453      	str	r3, [r2, #68]	; 0x44
 801ccd2:	e01e      	b.n	801cd12 <SM_StateMachineHandler+0x622>

				}
				else{
					ExtEEP_ErrorCounter++;
 801ccd4:	4b8a      	ldr	r3, [pc, #552]	; (801cf00 <SM_StateMachineHandler+0x810>)
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	3301      	adds	r3, #1
 801ccda:	4a89      	ldr	r2, [pc, #548]	; (801cf00 <SM_StateMachineHandler+0x810>)
 801ccdc:	6013      	str	r3, [r2, #0]
					/*ResetI2c*/
					(&hi2c1)->Instance->CR1 |= I2C_CR1_SWRST;
 801ccde:	4b89      	ldr	r3, [pc, #548]	; (801cf04 <SM_StateMachineHandler+0x814>)
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	681a      	ldr	r2, [r3, #0]
 801cce4:	4b87      	ldr	r3, [pc, #540]	; (801cf04 <SM_StateMachineHandler+0x814>)
 801cce6:	681b      	ldr	r3, [r3, #0]
 801cce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ccec:	601a      	str	r2, [r3, #0]
					(&hi2c1)->Instance->CR1 &= ~I2C_CR1_SWRST;
 801ccee:	4b85      	ldr	r3, [pc, #532]	; (801cf04 <SM_StateMachineHandler+0x814>)
 801ccf0:	681b      	ldr	r3, [r3, #0]
 801ccf2:	681a      	ldr	r2, [r3, #0]
 801ccf4:	4b83      	ldr	r3, [pc, #524]	; (801cf04 <SM_StateMachineHandler+0x814>)
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801ccfc:	601a      	str	r2, [r3, #0]

					if(ExtEEP_ErrorCounter >= 30){
 801ccfe:	4b80      	ldr	r3, [pc, #512]	; (801cf00 <SM_StateMachineHandler+0x810>)
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	2b1d      	cmp	r3, #29
 801cd04:	d905      	bls.n	801cd12 <SM_StateMachineHandler+0x622>
						ExtEEP_ErrorCounter = 0;
 801cd06:	4b7e      	ldr	r3, [pc, #504]	; (801cf00 <SM_StateMachineHandler+0x810>)
 801cd08:	2200      	movs	r2, #0
 801cd0a:	601a      	str	r2, [r3, #0]
						SM_ApplParam.Transfer_PageloopCount = 0xFF;
 801cd0c:	4b7b      	ldr	r3, [pc, #492]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801cd0e:	22ff      	movs	r2, #255	; 0xff
 801cd10:	645a      	str	r2, [r3, #68]	; 0x44
					}
				}
				if(SM_ApplParam.Transfer_PageloopCount >= 0xFF){
 801cd12:	4b7a      	ldr	r3, [pc, #488]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801cd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd16:	2bfe      	cmp	r3, #254	; 0xfe
 801cd18:	f240 84b6 	bls.w	801d688 <SM_StateMachineHandler+0xf98>
					SM_enumECUState = SM_enum_ECU_SettingMenu;
 801cd1c:	4b73      	ldr	r3, [pc, #460]	; (801ceec <SM_StateMachineHandler+0x7fc>)
 801cd1e:	2203      	movs	r2, #3
 801cd20:	701a      	strb	r2, [r3, #0]
 801cd22:	f000 bcb1 	b.w	801d688 <SM_StateMachineHandler+0xf98>
				}

			}
		}

		else if(SM_enumECUState == SM_enum_ECU_RejuvenationMenu){
 801cd26:	4b71      	ldr	r3, [pc, #452]	; (801ceec <SM_StateMachineHandler+0x7fc>)
 801cd28:	781b      	ldrb	r3, [r3, #0]
 801cd2a:	b2db      	uxtb	r3, r3
 801cd2c:	2b02      	cmp	r3, #2
 801cd2e:	f040 80f1 	bne.w	801cf14 <SM_StateMachineHandler+0x824>
			if(SM_KeyPressed == CMD_Enum_B4){
 801cd32:	4b75      	ldr	r3, [pc, #468]	; (801cf08 <SM_StateMachineHandler+0x818>)
 801cd34:	781b      	ldrb	r3, [r3, #0]
 801cd36:	2b04      	cmp	r3, #4
 801cd38:	d146      	bne.n	801cdc8 <SM_StateMachineHandler+0x6d8>
				if(Appl_Display.SelectedIndexIntheList == 1) INC(Appl_EEPParam.stm32.EEP_CustomerNumber,100,1);
 801cd3a:	4b6e      	ldr	r3, [pc, #440]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801cd3c:	781b      	ldrb	r3, [r3, #0]
 801cd3e:	2b01      	cmp	r3, #1
 801cd40:	d109      	bne.n	801cd56 <SM_StateMachineHandler+0x666>
 801cd42:	4b6d      	ldr	r3, [pc, #436]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cd44:	7b9b      	ldrb	r3, [r3, #14]
 801cd46:	2b63      	cmp	r3, #99	; 0x63
 801cd48:	bf28      	it	cs
 801cd4a:	2363      	movcs	r3, #99	; 0x63
 801cd4c:	b2db      	uxtb	r3, r3
 801cd4e:	3301      	adds	r3, #1
 801cd50:	b2da      	uxtb	r2, r3
 801cd52:	4b69      	ldr	r3, [pc, #420]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cd54:	739a      	strb	r2, [r3, #14]
				if(Appl_Display.SelectedIndexIntheList == 2) DEC(Appl_EEPParam.stm32.EEP_RejuvenationCycleID,1,1);
 801cd56:	4b67      	ldr	r3, [pc, #412]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801cd58:	781b      	ldrb	r3, [r3, #0]
 801cd5a:	2b02      	cmp	r3, #2
 801cd5c:	d10b      	bne.n	801cd76 <SM_StateMachineHandler+0x686>
 801cd5e:	4b66      	ldr	r3, [pc, #408]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cd60:	7bdb      	ldrb	r3, [r3, #15]
 801cd62:	2b01      	cmp	r3, #1
 801cd64:	d904      	bls.n	801cd70 <SM_StateMachineHandler+0x680>
 801cd66:	4b64      	ldr	r3, [pc, #400]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cd68:	7bdb      	ldrb	r3, [r3, #15]
 801cd6a:	3b01      	subs	r3, #1
 801cd6c:	b2db      	uxtb	r3, r3
 801cd6e:	e000      	b.n	801cd72 <SM_StateMachineHandler+0x682>
 801cd70:	2301      	movs	r3, #1
 801cd72:	4a61      	ldr	r2, [pc, #388]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cd74:	73d3      	strb	r3, [r2, #15]
				if(Appl_Display.SelectedIndexIntheList == 3) INC(SM_ApplParam.UserSetCurrent,60,1);
 801cd76:	4b5f      	ldr	r3, [pc, #380]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801cd78:	781b      	ldrb	r3, [r3, #0]
 801cd7a:	2b03      	cmp	r3, #3
 801cd7c:	d116      	bne.n	801cdac <SM_StateMachineHandler+0x6bc>
 801cd7e:	4b5f      	ldr	r3, [pc, #380]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801cd80:	edd3 7a05 	vldr	s15, [r3, #20]
 801cd84:	ed9f 7a61 	vldr	s14, [pc, #388]	; 801cf0c <SM_StateMachineHandler+0x81c>
 801cd88:	eef4 7ac7 	vcmpe.f32	s15, s14
 801cd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd90:	d807      	bhi.n	801cda2 <SM_StateMachineHandler+0x6b2>
 801cd92:	4b5a      	ldr	r3, [pc, #360]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801cd94:	edd3 7a05 	vldr	s15, [r3, #20]
 801cd98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cda0:	e001      	b.n	801cda6 <SM_StateMachineHandler+0x6b6>
 801cda2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801cf10 <SM_StateMachineHandler+0x820>
 801cda6:	4b55      	ldr	r3, [pc, #340]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801cda8:	edc3 7a05 	vstr	s15, [r3, #20]
				if(Appl_Display.SelectedIndexIntheList == 4) INC(Appl_EEPParam.stm32.EEP_TimerSetHours,60,1);
 801cdac:	4b51      	ldr	r3, [pc, #324]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801cdae:	781b      	ldrb	r3, [r3, #0]
 801cdb0:	2b04      	cmp	r3, #4
 801cdb2:	d109      	bne.n	801cdc8 <SM_StateMachineHandler+0x6d8>
 801cdb4:	4b50      	ldr	r3, [pc, #320]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cdb6:	7b5b      	ldrb	r3, [r3, #13]
 801cdb8:	2b3b      	cmp	r3, #59	; 0x3b
 801cdba:	bf28      	it	cs
 801cdbc:	233b      	movcs	r3, #59	; 0x3b
 801cdbe:	b2db      	uxtb	r3, r3
 801cdc0:	3301      	adds	r3, #1
 801cdc2:	b2da      	uxtb	r2, r3
 801cdc4:	4b4c      	ldr	r3, [pc, #304]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cdc6:	735a      	strb	r2, [r3, #13]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801cdc8:	4b4f      	ldr	r3, [pc, #316]	; (801cf08 <SM_StateMachineHandler+0x818>)
 801cdca:	781b      	ldrb	r3, [r3, #0]
 801cdcc:	2b03      	cmp	r3, #3
 801cdce:	d14a      	bne.n	801ce66 <SM_StateMachineHandler+0x776>
				if(Appl_Display.SelectedIndexIntheList == 1) DEC(Appl_EEPParam.stm32.EEP_CustomerNumber,0,1);
 801cdd0:	4b48      	ldr	r3, [pc, #288]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801cdd2:	781b      	ldrb	r3, [r3, #0]
 801cdd4:	2b01      	cmp	r3, #1
 801cdd6:	d10b      	bne.n	801cdf0 <SM_StateMachineHandler+0x700>
 801cdd8:	4b47      	ldr	r3, [pc, #284]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cdda:	7b9b      	ldrb	r3, [r3, #14]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d004      	beq.n	801cdea <SM_StateMachineHandler+0x6fa>
 801cde0:	4b45      	ldr	r3, [pc, #276]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cde2:	7b9b      	ldrb	r3, [r3, #14]
 801cde4:	3b01      	subs	r3, #1
 801cde6:	b2db      	uxtb	r3, r3
 801cde8:	e000      	b.n	801cdec <SM_StateMachineHandler+0x6fc>
 801cdea:	2300      	movs	r3, #0
 801cdec:	4a42      	ldr	r2, [pc, #264]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cdee:	7393      	strb	r3, [r2, #14]
				if(Appl_Display.SelectedIndexIntheList == 2) INC(Appl_EEPParam.stm32.EEP_RejuvenationCycleID,6,1);
 801cdf0:	4b40      	ldr	r3, [pc, #256]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801cdf2:	781b      	ldrb	r3, [r3, #0]
 801cdf4:	2b02      	cmp	r3, #2
 801cdf6:	d10b      	bne.n	801ce10 <SM_StateMachineHandler+0x720>
 801cdf8:	4b3f      	ldr	r3, [pc, #252]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cdfa:	7bdb      	ldrb	r3, [r3, #15]
 801cdfc:	2b05      	cmp	r3, #5
 801cdfe:	d804      	bhi.n	801ce0a <SM_StateMachineHandler+0x71a>
 801ce00:	4b3d      	ldr	r3, [pc, #244]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801ce02:	7bdb      	ldrb	r3, [r3, #15]
 801ce04:	3301      	adds	r3, #1
 801ce06:	b2db      	uxtb	r3, r3
 801ce08:	e000      	b.n	801ce0c <SM_StateMachineHandler+0x71c>
 801ce0a:	2306      	movs	r3, #6
 801ce0c:	4a3a      	ldr	r2, [pc, #232]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801ce0e:	73d3      	strb	r3, [r2, #15]
				if(Appl_Display.SelectedIndexIntheList == 3) DEC(SM_ApplParam.UserSetCurrent,4,1);
 801ce10:	4b38      	ldr	r3, [pc, #224]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ce12:	781b      	ldrb	r3, [r3, #0]
 801ce14:	2b03      	cmp	r3, #3
 801ce16:	d116      	bne.n	801ce46 <SM_StateMachineHandler+0x756>
 801ce18:	4b38      	ldr	r3, [pc, #224]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801ce1a:	edd3 7a05 	vldr	s15, [r3, #20]
 801ce1e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801ce22:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ce26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce2a:	db07      	blt.n	801ce3c <SM_StateMachineHandler+0x74c>
 801ce2c:	4b33      	ldr	r3, [pc, #204]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801ce2e:	edd3 7a05 	vldr	s15, [r3, #20]
 801ce32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ce36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ce3a:	e001      	b.n	801ce40 <SM_StateMachineHandler+0x750>
 801ce3c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801ce40:	4b2e      	ldr	r3, [pc, #184]	; (801cefc <SM_StateMachineHandler+0x80c>)
 801ce42:	edc3 7a05 	vstr	s15, [r3, #20]
				if(Appl_Display.SelectedIndexIntheList == 4) DEC(Appl_EEPParam.stm32.EEP_TimerSetHours,0,1);
 801ce46:	4b2b      	ldr	r3, [pc, #172]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ce48:	781b      	ldrb	r3, [r3, #0]
 801ce4a:	2b04      	cmp	r3, #4
 801ce4c:	d10b      	bne.n	801ce66 <SM_StateMachineHandler+0x776>
 801ce4e:	4b2a      	ldr	r3, [pc, #168]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801ce50:	7b5b      	ldrb	r3, [r3, #13]
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d004      	beq.n	801ce60 <SM_StateMachineHandler+0x770>
 801ce56:	4b28      	ldr	r3, [pc, #160]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801ce58:	7b5b      	ldrb	r3, [r3, #13]
 801ce5a:	3b01      	subs	r3, #1
 801ce5c:	b2db      	uxtb	r3, r3
 801ce5e:	e000      	b.n	801ce62 <SM_StateMachineHandler+0x772>
 801ce60:	2300      	movs	r3, #0
 801ce62:	4a25      	ldr	r2, [pc, #148]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801ce64:	7353      	strb	r3, [r2, #13]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801ce66:	4b28      	ldr	r3, [pc, #160]	; (801cf08 <SM_StateMachineHandler+0x818>)
 801ce68:	781b      	ldrb	r3, [r3, #0]
 801ce6a:	2b02      	cmp	r3, #2
 801ce6c:	d124      	bne.n	801ceb8 <SM_StateMachineHandler+0x7c8>
				INC(Appl_Display.SelectedIndexIntheList,Appl_Display.MaximumIndexInTheList+1,1);
 801ce6e:	4b21      	ldr	r3, [pc, #132]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ce70:	781a      	ldrb	r2, [r3, #0]
 801ce72:	4b20      	ldr	r3, [pc, #128]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ce74:	785b      	ldrb	r3, [r3, #1]
 801ce76:	429a      	cmp	r2, r3
 801ce78:	d804      	bhi.n	801ce84 <SM_StateMachineHandler+0x794>
 801ce7a:	4b1e      	ldr	r3, [pc, #120]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ce7c:	781b      	ldrb	r3, [r3, #0]
 801ce7e:	3301      	adds	r3, #1
 801ce80:	b2db      	uxtb	r3, r3
 801ce82:	e003      	b.n	801ce8c <SM_StateMachineHandler+0x79c>
 801ce84:	4b1b      	ldr	r3, [pc, #108]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ce86:	785b      	ldrb	r3, [r3, #1]
 801ce88:	3301      	adds	r3, #1
 801ce8a:	b2db      	uxtb	r3, r3
 801ce8c:	4a19      	ldr	r2, [pc, #100]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ce8e:	7013      	strb	r3, [r2, #0]
				if(Appl_Display.SelectedIndexIntheList >Appl_Display.MaximumIndexInTheList){
 801ce90:	4b18      	ldr	r3, [pc, #96]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ce92:	781a      	ldrb	r2, [r3, #0]
 801ce94:	4b17      	ldr	r3, [pc, #92]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ce96:	785b      	ldrb	r3, [r3, #1]
 801ce98:	429a      	cmp	r2, r3
 801ce9a:	d90d      	bls.n	801ceb8 <SM_StateMachineHandler+0x7c8>
					Appl_Display.SelectedIndexIntheList = 1;
 801ce9c:	4b15      	ldr	r3, [pc, #84]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ce9e:	2201      	movs	r2, #1
 801cea0:	701a      	strb	r2, [r3, #0]
					Appl_EEPParam.stm32.EEP_Run_Hour = 0;
 801cea2:	4b15      	ldr	r3, [pc, #84]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801cea4:	2200      	movs	r2, #0
 801cea6:	731a      	strb	r2, [r3, #12]
					Appl_EEPParam.stm32.EEP_Run_Min = 0;
 801cea8:	4b13      	ldr	r3, [pc, #76]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801ceaa:	2200      	movs	r2, #0
 801ceac:	72da      	strb	r2, [r3, #11]
					Appl_EEPParam.stm32.EEP_Run_Sec = 0;
 801ceae:	4b12      	ldr	r3, [pc, #72]	; (801cef8 <SM_StateMachineHandler+0x808>)
 801ceb0:	2200      	movs	r2, #0
 801ceb2:	729a      	strb	r2, [r3, #10]
					StartCurrentProvidingLoop();
 801ceb4:	f001 fa8e 	bl	801e3d4 <StartCurrentProvidingLoop>
				}
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801ceb8:	4b13      	ldr	r3, [pc, #76]	; (801cf08 <SM_StateMachineHandler+0x818>)
 801ceba:	781b      	ldrb	r3, [r3, #0]
 801cebc:	2b01      	cmp	r3, #1
 801cebe:	f040 83e3 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
				DEC(Appl_Display.SelectedIndexIntheList,0,1);
 801cec2:	4b0c      	ldr	r3, [pc, #48]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801cec4:	781b      	ldrb	r3, [r3, #0]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d004      	beq.n	801ced4 <SM_StateMachineHandler+0x7e4>
 801ceca:	4b0a      	ldr	r3, [pc, #40]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801cecc:	781b      	ldrb	r3, [r3, #0]
 801cece:	3b01      	subs	r3, #1
 801ced0:	b2db      	uxtb	r3, r3
 801ced2:	e000      	b.n	801ced6 <SM_StateMachineHandler+0x7e6>
 801ced4:	2300      	movs	r3, #0
 801ced6:	4a07      	ldr	r2, [pc, #28]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801ced8:	7013      	strb	r3, [r2, #0]
				MAP_SM(0,SM_enum_ECU_StandByMode);
 801ceda:	4b06      	ldr	r3, [pc, #24]	; (801cef4 <SM_StateMachineHandler+0x804>)
 801cedc:	781b      	ldrb	r3, [r3, #0]
 801cede:	2b00      	cmp	r3, #0
 801cee0:	f040 83d2 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
 801cee4:	4b01      	ldr	r3, [pc, #4]	; (801ceec <SM_StateMachineHandler+0x7fc>)
 801cee6:	2201      	movs	r2, #1
 801cee8:	701a      	strb	r2, [r3, #0]
 801ceea:	e3cd      	b.n	801d688 <SM_StateMachineHandler+0xf98>
 801ceec:	2000490c 	.word	0x2000490c
 801cef0:	20004470 	.word	0x20004470
 801cef4:	20004870 	.word	0x20004870
 801cef8:	2000005c 	.word	0x2000005c
 801cefc:	20004974 	.word	0x20004974
 801cf00:	200005d4 	.word	0x200005d4
 801cf04:	200043bc 	.word	0x200043bc
 801cf08:	200048e4 	.word	0x200048e4
 801cf0c:	426c0000 	.word	0x426c0000
 801cf10:	42700000 	.word	0x42700000
			}

		}

		else if((SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow)){
 801cf14:	4bb5      	ldr	r3, [pc, #724]	; (801d1ec <SM_StateMachineHandler+0xafc>)
 801cf16:	781b      	ldrb	r3, [r3, #0]
 801cf18:	b2db      	uxtb	r3, r3
 801cf1a:	2b0b      	cmp	r3, #11
 801cf1c:	d163      	bne.n	801cfe6 <SM_StateMachineHandler+0x8f6>
			localruntimrctr++;
 801cf1e:	4bb4      	ldr	r3, [pc, #720]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	3301      	adds	r3, #1
 801cf24:	4ab2      	ldr	r2, [pc, #712]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801cf26:	6013      	str	r3, [r2, #0]
			SM_ApplParam.BuzzerCounter++;
 801cf28:	4bb2      	ldr	r3, [pc, #712]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801cf2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cf2c:	3301      	adds	r3, #1
 801cf2e:	4ab1      	ldr	r2, [pc, #708]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801cf30:	6653      	str	r3, [r2, #100]	; 0x64
			if(SM_ApplParam.BuzzerCounter > (1000/loopms) && SM_ApplParam.Buzzertoggle == 0){
 801cf32:	4bb0      	ldr	r3, [pc, #704]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801cf34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cf36:	79fa      	ldrb	r2, [r7, #7]
 801cf38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801cf3c:	fb91 f2f2 	sdiv	r2, r1, r2
 801cf40:	4293      	cmp	r3, r2
 801cf42:	d910      	bls.n	801cf66 <SM_StateMachineHandler+0x876>
 801cf44:	4bab      	ldr	r3, [pc, #684]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801cf46:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d10b      	bne.n	801cf66 <SM_StateMachineHandler+0x876>
				BUZZER_OFF();
 801cf4e:	2201      	movs	r2, #1
 801cf50:	2180      	movs	r1, #128	; 0x80
 801cf52:	48a9      	ldr	r0, [pc, #676]	; (801d1f8 <SM_StateMachineHandler+0xb08>)
 801cf54:	f7f6 fe52 	bl	8013bfc <HAL_GPIO_WritePin>
				SM_ApplParam.Buzzertoggle = 1;
 801cf58:	4ba6      	ldr	r3, [pc, #664]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801cf5a:	2201      	movs	r2, #1
 801cf5c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				SM_ApplParam.BuzzerCounter = 0;
 801cf60:	4ba4      	ldr	r3, [pc, #656]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801cf62:	2200      	movs	r2, #0
 801cf64:	665a      	str	r2, [r3, #100]	; 0x64
			}
			if(localruntimrctr >= (1000/loopms)){
 801cf66:	79fb      	ldrb	r3, [r7, #7]
 801cf68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cf6c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf70:	461a      	mov	r2, r3
 801cf72:	4b9f      	ldr	r3, [pc, #636]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	429a      	cmp	r2, r3
 801cf78:	d80a      	bhi.n	801cf90 <SM_StateMachineHandler+0x8a0>
				localruntimrctr = 0;
 801cf7a:	4b9d      	ldr	r3, [pc, #628]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801cf7c:	2200      	movs	r2, #0
 801cf7e:	601a      	str	r2, [r3, #0]
				MonitorTemperature();
 801cf80:	f001 f96c 	bl	801e25c <MonitorTemperature>
				Update_Usage_hour_eep();
 801cf84:	f7fe f856 	bl	801b034 <Update_Usage_hour_eep>
				SafeRunMonitoring();
 801cf88:	f001 f986 	bl	801e298 <SafeRunMonitoring>
				Update_RunningTime_eep();
 801cf8c:	f7fe f88a 	bl	801b0a4 <Update_RunningTime_eep>

			}

			if(SM_KeyPressed == CMD_Enum_B4){
 801cf90:	4b9a      	ldr	r3, [pc, #616]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801cf92:	781b      	ldrb	r3, [r3, #0]
 801cf94:	2b04      	cmp	r3, #4
 801cf96:	d102      	bne.n	801cf9e <SM_StateMachineHandler+0x8ae>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801cf98:	4b98      	ldr	r3, [pc, #608]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801cf9a:	2200      	movs	r2, #0
 801cf9c:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801cf9e:	4b97      	ldr	r3, [pc, #604]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801cfa0:	781b      	ldrb	r3, [r3, #0]
 801cfa2:	2b03      	cmp	r3, #3
 801cfa4:	d102      	bne.n	801cfac <SM_StateMachineHandler+0x8bc>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801cfa6:	4b95      	ldr	r3, [pc, #596]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801cfa8:	2200      	movs	r2, #0
 801cfaa:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801cfac:	4b93      	ldr	r3, [pc, #588]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801cfae:	781b      	ldrb	r3, [r3, #0]
 801cfb0:	2b02      	cmp	r3, #2
 801cfb2:	d102      	bne.n	801cfba <SM_StateMachineHandler+0x8ca>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801cfb4:	4b91      	ldr	r3, [pc, #580]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801cfb6:	2200      	movs	r2, #0
 801cfb8:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801cfba:	4b90      	ldr	r3, [pc, #576]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801cfbc:	781b      	ldrb	r3, [r3, #0]
 801cfbe:	2b01      	cmp	r3, #1
 801cfc0:	f040 8362 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801cfc4:	4b8d      	ldr	r3, [pc, #564]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801cfc6:	2200      	movs	r2, #0
 801cfc8:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_PauseMode;
 801cfca:	4b88      	ldr	r3, [pc, #544]	; (801d1ec <SM_StateMachineHandler+0xafc>)
 801cfcc:	2209      	movs	r2, #9
 801cfce:	701a      	strb	r2, [r3, #0]
				SM_ApplParam.Pausereason = PauseReasonEnum_UserPaused;
 801cfd0:	4b88      	ldr	r3, [pc, #544]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801cfd2:	2202      	movs	r2, #2
 801cfd4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				StopCurrentProvidingLoop(SM_ApplParam.Pausereason);
 801cfd8:	4b86      	ldr	r3, [pc, #536]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801cfda:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801cfde:	4618      	mov	r0, r3
 801cfe0:	f001 faa0 	bl	801e524 <StopCurrentProvidingLoop>
 801cfe4:	e350      	b.n	801d688 <SM_StateMachineHandler+0xf98>
			}
		}

		else if(SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_StableVoltagefloat){
 801cfe6:	4b81      	ldr	r3, [pc, #516]	; (801d1ec <SM_StateMachineHandler+0xafc>)
 801cfe8:	781b      	ldrb	r3, [r3, #0]
 801cfea:	b2db      	uxtb	r3, r3
 801cfec:	2b0c      	cmp	r3, #12
 801cfee:	d15c      	bne.n	801d0aa <SM_StateMachineHandler+0x9ba>
			localruntimrctr++;
 801cff0:	4b7f      	ldr	r3, [pc, #508]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	3301      	adds	r3, #1
 801cff6:	4a7e      	ldr	r2, [pc, #504]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801cff8:	6013      	str	r3, [r2, #0]
			SM_ApplParam.BuzzerCounter++;
 801cffa:	4b7e      	ldr	r3, [pc, #504]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801cffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cffe:	3301      	adds	r3, #1
 801d000:	4a7c      	ldr	r2, [pc, #496]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801d002:	6653      	str	r3, [r2, #100]	; 0x64
			if(SM_ApplParam.BuzzerCounter > (1000/loopms) && SM_ApplParam.Buzzertoggle == 0){
 801d004:	4b7b      	ldr	r3, [pc, #492]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801d006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d008:	79fa      	ldrb	r2, [r7, #7]
 801d00a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d00e:	fb91 f2f2 	sdiv	r2, r1, r2
 801d012:	4293      	cmp	r3, r2
 801d014:	d910      	bls.n	801d038 <SM_StateMachineHandler+0x948>
 801d016:	4b77      	ldr	r3, [pc, #476]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801d018:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d10b      	bne.n	801d038 <SM_StateMachineHandler+0x948>
				BUZZER_OFF();
 801d020:	2201      	movs	r2, #1
 801d022:	2180      	movs	r1, #128	; 0x80
 801d024:	4874      	ldr	r0, [pc, #464]	; (801d1f8 <SM_StateMachineHandler+0xb08>)
 801d026:	f7f6 fde9 	bl	8013bfc <HAL_GPIO_WritePin>
				SM_ApplParam.Buzzertoggle = 1;
 801d02a:	4b72      	ldr	r3, [pc, #456]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801d02c:	2201      	movs	r2, #1
 801d02e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				SM_ApplParam.BuzzerCounter = 0;
 801d032:	4b70      	ldr	r3, [pc, #448]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801d034:	2200      	movs	r2, #0
 801d036:	665a      	str	r2, [r3, #100]	; 0x64
			}
			if(localruntimrctr >= (1000/loopms)){
 801d038:	79fb      	ldrb	r3, [r7, #7]
 801d03a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d03e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d042:	461a      	mov	r2, r3
 801d044:	4b6a      	ldr	r3, [pc, #424]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	429a      	cmp	r2, r3
 801d04a:	d80a      	bhi.n	801d062 <SM_StateMachineHandler+0x972>
				localruntimrctr = 0;
 801d04c:	4b68      	ldr	r3, [pc, #416]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801d04e:	2200      	movs	r2, #0
 801d050:	601a      	str	r2, [r3, #0]
				MonitorTemperature();
 801d052:	f001 f903 	bl	801e25c <MonitorTemperature>
				Update_Usage_hour_eep();
 801d056:	f7fd ffed 	bl	801b034 <Update_Usage_hour_eep>
				SafeRunMonitoring();
 801d05a:	f001 f91d 	bl	801e298 <SafeRunMonitoring>
				Update_RunningTime_eep();
 801d05e:	f7fe f821 	bl	801b0a4 <Update_RunningTime_eep>
			}
			if(SM_KeyPressed == CMD_Enum_B4){}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d062:	4b66      	ldr	r3, [pc, #408]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d064:	781b      	ldrb	r3, [r3, #0]
 801d066:	2b03      	cmp	r3, #3
 801d068:	d102      	bne.n	801d070 <SM_StateMachineHandler+0x980>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d06a:	4b64      	ldr	r3, [pc, #400]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d06c:	2200      	movs	r2, #0
 801d06e:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d070:	4b62      	ldr	r3, [pc, #392]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d072:	781b      	ldrb	r3, [r3, #0]
 801d074:	2b02      	cmp	r3, #2
 801d076:	d102      	bne.n	801d07e <SM_StateMachineHandler+0x98e>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d078:	4b60      	ldr	r3, [pc, #384]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d07a:	2200      	movs	r2, #0
 801d07c:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d07e:	4b5f      	ldr	r3, [pc, #380]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d080:	781b      	ldrb	r3, [r3, #0]
 801d082:	2b01      	cmp	r3, #1
 801d084:	f040 8300 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d088:	4b5c      	ldr	r3, [pc, #368]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d08a:	2200      	movs	r2, #0
 801d08c:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_PauseMode;
 801d08e:	4b57      	ldr	r3, [pc, #348]	; (801d1ec <SM_StateMachineHandler+0xafc>)
 801d090:	2209      	movs	r2, #9
 801d092:	701a      	strb	r2, [r3, #0]
				SM_ApplParam.Pausereason = PauseReasonEnum_UserPaused;
 801d094:	4b57      	ldr	r3, [pc, #348]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801d096:	2202      	movs	r2, #2
 801d098:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				StopCurrentProvidingLoop(SM_ApplParam.Pausereason);
 801d09c:	4b55      	ldr	r3, [pc, #340]	; (801d1f4 <SM_StateMachineHandler+0xb04>)
 801d09e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	f001 fa3e 	bl	801e524 <StopCurrentProvidingLoop>
 801d0a8:	e2ee      	b.n	801d688 <SM_StateMachineHandler+0xf98>
			}
		}

		else if(SM_enumECUState == SM_enum_ECU_SelfTest){
 801d0aa:	4b50      	ldr	r3, [pc, #320]	; (801d1ec <SM_StateMachineHandler+0xafc>)
 801d0ac:	781b      	ldrb	r3, [r3, #0]
 801d0ae:	b2db      	uxtb	r3, r3
 801d0b0:	2b0d      	cmp	r3, #13
 801d0b2:	f040 80a9 	bne.w	801d208 <SM_StateMachineHandler+0xb18>
			if(SM_KeyPressed == CMD_Enum_B4){
 801d0b6:	4b51      	ldr	r3, [pc, #324]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d0b8:	781b      	ldrb	r3, [r3, #0]
 801d0ba:	2b04      	cmp	r3, #4
 801d0bc:	d105      	bne.n	801d0ca <SM_StateMachineHandler+0x9da>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d0be:	4b4f      	ldr	r3, [pc, #316]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d0c0:	2200      	movs	r2, #0
 801d0c2:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d0c4:	4b49      	ldr	r3, [pc, #292]	; (801d1ec <SM_StateMachineHandler+0xafc>)
 801d0c6:	2201      	movs	r2, #1
 801d0c8:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d0ca:	4b4c      	ldr	r3, [pc, #304]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d0cc:	781b      	ldrb	r3, [r3, #0]
 801d0ce:	2b03      	cmp	r3, #3
 801d0d0:	d105      	bne.n	801d0de <SM_StateMachineHandler+0x9ee>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d0d2:	4b4a      	ldr	r3, [pc, #296]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d0d4:	2200      	movs	r2, #0
 801d0d6:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d0d8:	4b44      	ldr	r3, [pc, #272]	; (801d1ec <SM_StateMachineHandler+0xafc>)
 801d0da:	2201      	movs	r2, #1
 801d0dc:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d0de:	4b47      	ldr	r3, [pc, #284]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d0e0:	781b      	ldrb	r3, [r3, #0]
 801d0e2:	2b02      	cmp	r3, #2
 801d0e4:	d105      	bne.n	801d0f2 <SM_StateMachineHandler+0xa02>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d0e6:	4b45      	ldr	r3, [pc, #276]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d0e8:	2200      	movs	r2, #0
 801d0ea:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d0ec:	4b3f      	ldr	r3, [pc, #252]	; (801d1ec <SM_StateMachineHandler+0xafc>)
 801d0ee:	2201      	movs	r2, #1
 801d0f0:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d0f2:	4b42      	ldr	r3, [pc, #264]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d0f4:	781b      	ldrb	r3, [r3, #0]
 801d0f6:	2b01      	cmp	r3, #1
 801d0f8:	d105      	bne.n	801d106 <SM_StateMachineHandler+0xa16>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d0fa:	4b40      	ldr	r3, [pc, #256]	; (801d1fc <SM_StateMachineHandler+0xb0c>)
 801d0fc:	2200      	movs	r2, #0
 801d0fe:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d100:	4b3a      	ldr	r3, [pc, #232]	; (801d1ec <SM_StateMachineHandler+0xafc>)
 801d102:	2201      	movs	r2, #1
 801d104:	701a      	strb	r2, [r3, #0]
			}
			if(Appl_diagActiveFault.BatteryReversal == 0){
 801d106:	4b3e      	ldr	r3, [pc, #248]	; (801d200 <SM_StateMachineHandler+0xb10>)
 801d108:	7a1b      	ldrb	r3, [r3, #8]
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d104      	bne.n	801d118 <SM_StateMachineHandler+0xa28>
				DC_CONTACTOR_ON();
 801d10e:	2200      	movs	r2, #0
 801d110:	2102      	movs	r1, #2
 801d112:	483c      	ldr	r0, [pc, #240]	; (801d204 <SM_StateMachineHandler+0xb14>)
 801d114:	f7f6 fd72 	bl	8013bfc <HAL_GPIO_WritePin>
			}
			localruntimrctr++;
 801d118:	4b35      	ldr	r3, [pc, #212]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	3301      	adds	r3, #1
 801d11e:	4a34      	ldr	r2, [pc, #208]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801d120:	6013      	str	r3, [r2, #0]
			if(localruntimrctr >= (500/loopms)){
 801d122:	79fb      	ldrb	r3, [r7, #7]
 801d124:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801d128:	fb92 f3f3 	sdiv	r3, r2, r3
 801d12c:	461a      	mov	r2, r3
 801d12e:	4b30      	ldr	r3, [pc, #192]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	429a      	cmp	r2, r3
 801d134:	f200 82a8 	bhi.w	801d688 <SM_StateMachineHandler+0xf98>
				GREENLEDON();
 801d138:	2201      	movs	r2, #1
 801d13a:	2120      	movs	r1, #32
 801d13c:	482e      	ldr	r0, [pc, #184]	; (801d1f8 <SM_StateMachineHandler+0xb08>)
 801d13e:	f7f6 fd5d 	bl	8013bfc <HAL_GPIO_WritePin>
				if(localruntimrctr >= (600/loopms)){
 801d142:	79fb      	ldrb	r3, [r7, #7]
 801d144:	f44f 7216 	mov.w	r2, #600	; 0x258
 801d148:	fb92 f3f3 	sdiv	r3, r2, r3
 801d14c:	461a      	mov	r2, r3
 801d14e:	4b28      	ldr	r3, [pc, #160]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801d150:	681b      	ldr	r3, [r3, #0]
 801d152:	429a      	cmp	r2, r3
 801d154:	f200 8298 	bhi.w	801d688 <SM_StateMachineHandler+0xf98>
					REDLEDON();
 801d158:	2201      	movs	r2, #1
 801d15a:	2140      	movs	r1, #64	; 0x40
 801d15c:	4826      	ldr	r0, [pc, #152]	; (801d1f8 <SM_StateMachineHandler+0xb08>)
 801d15e:	f7f6 fd4d 	bl	8013bfc <HAL_GPIO_WritePin>
					if(localruntimrctr >= (700/loopms)){
 801d162:	79fb      	ldrb	r3, [r7, #7]
 801d164:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 801d168:	fb92 f3f3 	sdiv	r3, r2, r3
 801d16c:	461a      	mov	r2, r3
 801d16e:	4b20      	ldr	r3, [pc, #128]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801d170:	681b      	ldr	r3, [r3, #0]
 801d172:	429a      	cmp	r2, r3
 801d174:	f200 8288 	bhi.w	801d688 <SM_StateMachineHandler+0xf98>
						ORANGELEDON();
 801d178:	2201      	movs	r2, #1
 801d17a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d17e:	481e      	ldr	r0, [pc, #120]	; (801d1f8 <SM_StateMachineHandler+0xb08>)
 801d180:	f7f6 fd3c 	bl	8013bfc <HAL_GPIO_WritePin>
						if(localruntimrctr >= (800/loopms)){
 801d184:	79fb      	ldrb	r3, [r7, #7]
 801d186:	f44f 7248 	mov.w	r2, #800	; 0x320
 801d18a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d18e:	461a      	mov	r2, r3
 801d190:	4b17      	ldr	r3, [pc, #92]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	429a      	cmp	r2, r3
 801d196:	f200 8277 	bhi.w	801d688 <SM_StateMachineHandler+0xf98>
							BLUELEDON();
 801d19a:	2201      	movs	r2, #1
 801d19c:	2110      	movs	r1, #16
 801d19e:	4816      	ldr	r0, [pc, #88]	; (801d1f8 <SM_StateMachineHandler+0xb08>)
 801d1a0:	f7f6 fd2c 	bl	8013bfc <HAL_GPIO_WritePin>
							if(localruntimrctr >= (1000/loopms)){
 801d1a4:	79fb      	ldrb	r3, [r7, #7]
 801d1a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d1aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1ae:	461a      	mov	r2, r3
 801d1b0:	4b0f      	ldr	r3, [pc, #60]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	429a      	cmp	r2, r3
 801d1b6:	f200 8267 	bhi.w	801d688 <SM_StateMachineHandler+0xf98>
								localruntimrctr = 0;
 801d1ba:	4b0d      	ldr	r3, [pc, #52]	; (801d1f0 <SM_StateMachineHandler+0xb00>)
 801d1bc:	2200      	movs	r2, #0
 801d1be:	601a      	str	r2, [r3, #0]
								REDLEDOFF();
 801d1c0:	2200      	movs	r2, #0
 801d1c2:	2140      	movs	r1, #64	; 0x40
 801d1c4:	480c      	ldr	r0, [pc, #48]	; (801d1f8 <SM_StateMachineHandler+0xb08>)
 801d1c6:	f7f6 fd19 	bl	8013bfc <HAL_GPIO_WritePin>
								ORANGELEDOFF();
 801d1ca:	2200      	movs	r2, #0
 801d1cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d1d0:	4809      	ldr	r0, [pc, #36]	; (801d1f8 <SM_StateMachineHandler+0xb08>)
 801d1d2:	f7f6 fd13 	bl	8013bfc <HAL_GPIO_WritePin>
								GREENLEDOFF();
 801d1d6:	2200      	movs	r2, #0
 801d1d8:	2120      	movs	r1, #32
 801d1da:	4807      	ldr	r0, [pc, #28]	; (801d1f8 <SM_StateMachineHandler+0xb08>)
 801d1dc:	f7f6 fd0e 	bl	8013bfc <HAL_GPIO_WritePin>
								BLUELEDOFF();
 801d1e0:	2200      	movs	r2, #0
 801d1e2:	2110      	movs	r1, #16
 801d1e4:	4804      	ldr	r0, [pc, #16]	; (801d1f8 <SM_StateMachineHandler+0xb08>)
 801d1e6:	f7f6 fd09 	bl	8013bfc <HAL_GPIO_WritePin>
 801d1ea:	e24d      	b.n	801d688 <SM_StateMachineHandler+0xf98>
 801d1ec:	2000490c 	.word	0x2000490c
 801d1f0:	200005ec 	.word	0x200005ec
 801d1f4:	20004974 	.word	0x20004974
 801d1f8:	40020800 	.word	0x40020800
 801d1fc:	200048e4 	.word	0x200048e4
 801d200:	200047b0 	.word	0x200047b0
 801d204:	40020400 	.word	0x40020400
					}
				}
			}
		}

		else if(SM_enumECUState == SM_enum_ECU_VishwatestMode){
 801d208:	4baa      	ldr	r3, [pc, #680]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d20a:	781b      	ldrb	r3, [r3, #0]
 801d20c:	b2db      	uxtb	r3, r3
 801d20e:	2b11      	cmp	r3, #17
 801d210:	d132      	bne.n	801d278 <SM_StateMachineHandler+0xb88>
			if(SM_KeyPressed == CMD_Enum_B4){
 801d212:	4ba9      	ldr	r3, [pc, #676]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d214:	781b      	ldrb	r3, [r3, #0]
 801d216:	2b04      	cmp	r3, #4
 801d218:	d105      	bne.n	801d226 <SM_StateMachineHandler+0xb36>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d21a:	4ba7      	ldr	r3, [pc, #668]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d21c:	2200      	movs	r2, #0
 801d21e:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d220:	4ba4      	ldr	r3, [pc, #656]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d222:	2201      	movs	r2, #1
 801d224:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d226:	4ba4      	ldr	r3, [pc, #656]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d228:	781b      	ldrb	r3, [r3, #0]
 801d22a:	2b03      	cmp	r3, #3
 801d22c:	d105      	bne.n	801d23a <SM_StateMachineHandler+0xb4a>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d22e:	4ba2      	ldr	r3, [pc, #648]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d230:	2200      	movs	r2, #0
 801d232:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d234:	4b9f      	ldr	r3, [pc, #636]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d236:	2201      	movs	r2, #1
 801d238:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d23a:	4b9f      	ldr	r3, [pc, #636]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d23c:	781b      	ldrb	r3, [r3, #0]
 801d23e:	2b02      	cmp	r3, #2
 801d240:	d105      	bne.n	801d24e <SM_StateMachineHandler+0xb5e>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d242:	4b9d      	ldr	r3, [pc, #628]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d244:	2200      	movs	r2, #0
 801d246:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d248:	4b9a      	ldr	r3, [pc, #616]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d24a:	2201      	movs	r2, #1
 801d24c:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d24e:	4b9a      	ldr	r3, [pc, #616]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d250:	781b      	ldrb	r3, [r3, #0]
 801d252:	2b01      	cmp	r3, #1
 801d254:	d105      	bne.n	801d262 <SM_StateMachineHandler+0xb72>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d256:	4b98      	ldr	r3, [pc, #608]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d258:	2200      	movs	r2, #0
 801d25a:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d25c:	4b95      	ldr	r3, [pc, #596]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d25e:	2201      	movs	r2, #1
 801d260:	701a      	strb	r2, [r3, #0]

			}
			if(Appl_diagActiveFault.BatteryReversal == 0){
 801d262:	4b96      	ldr	r3, [pc, #600]	; (801d4bc <SM_StateMachineHandler+0xdcc>)
 801d264:	7a1b      	ldrb	r3, [r3, #8]
 801d266:	2b00      	cmp	r3, #0
 801d268:	f040 820e 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
				DC_CONTACTOR_ON();
 801d26c:	2200      	movs	r2, #0
 801d26e:	2102      	movs	r1, #2
 801d270:	4893      	ldr	r0, [pc, #588]	; (801d4c0 <SM_StateMachineHandler+0xdd0>)
 801d272:	f7f6 fcc3 	bl	8013bfc <HAL_GPIO_WritePin>
 801d276:	e207      	b.n	801d688 <SM_StateMachineHandler+0xf98>
			}

		}

		else if(SM_enumECUState == SM_enum_ECU_PauseMode){
 801d278:	4b8e      	ldr	r3, [pc, #568]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d27a:	781b      	ldrb	r3, [r3, #0]
 801d27c:	b2db      	uxtb	r3, r3
 801d27e:	2b09      	cmp	r3, #9
 801d280:	f040 8092 	bne.w	801d3a8 <SM_StateMachineHandler+0xcb8>


			if(SM_KeyPressed == CMD_Enum_B4){
 801d284:	4b8c      	ldr	r3, [pc, #560]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d286:	781b      	ldrb	r3, [r3, #0]
 801d288:	2b04      	cmp	r3, #4
 801d28a:	d102      	bne.n	801d292 <SM_StateMachineHandler+0xba2>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d28c:	4b8a      	ldr	r3, [pc, #552]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d28e:	2200      	movs	r2, #0
 801d290:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d292:	4b89      	ldr	r3, [pc, #548]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d294:	781b      	ldrb	r3, [r3, #0]
 801d296:	2b03      	cmp	r3, #3
 801d298:	d102      	bne.n	801d2a0 <SM_StateMachineHandler+0xbb0>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d29a:	4b87      	ldr	r3, [pc, #540]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d29c:	2200      	movs	r2, #0
 801d29e:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d2a0:	4b85      	ldr	r3, [pc, #532]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d2a2:	781b      	ldrb	r3, [r3, #0]
 801d2a4:	2b02      	cmp	r3, #2
 801d2a6:	d107      	bne.n	801d2b8 <SM_StateMachineHandler+0xbc8>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d2a8:	4b83      	ldr	r3, [pc, #524]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow;
 801d2ae:	4b81      	ldr	r3, [pc, #516]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d2b0:	220b      	movs	r2, #11
 801d2b2:	701a      	strb	r2, [r3, #0]
				StartCurrentProvidingLoop();
 801d2b4:	f001 f88e 	bl	801e3d4 <StartCurrentProvidingLoop>
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d2b8:	4b7f      	ldr	r3, [pc, #508]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d2ba:	781b      	ldrb	r3, [r3, #0]
 801d2bc:	2b01      	cmp	r3, #1
 801d2be:	d108      	bne.n	801d2d2 <SM_StateMachineHandler+0xbe2>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d2c0:	4b7d      	ldr	r3, [pc, #500]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d2c2:	2200      	movs	r2, #0
 801d2c4:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d2c6:	4b7b      	ldr	r3, [pc, #492]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d2c8:	2201      	movs	r2, #1
 801d2ca:	701a      	strb	r2, [r3, #0]
				Appl_EEPParam.stm32.EEP_PowerFailedLastTime = 0;
 801d2cc:	4b7d      	ldr	r3, [pc, #500]	; (801d4c4 <SM_StateMachineHandler+0xdd4>)
 801d2ce:	2200      	movs	r2, #0
 801d2d0:	725a      	strb	r2, [r3, #9]
			}

			if(SM_ApplParam.Pausereason == PauseReasonEnum_UserPaused){
 801d2d2:	4b7d      	ldr	r3, [pc, #500]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d2d4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801d2d8:	2b02      	cmp	r3, #2
 801d2da:	d11f      	bne.n	801d31c <SM_StateMachineHandler+0xc2c>
				SM_ApplParam.BuzzerCounter++;
 801d2dc:	4b7a      	ldr	r3, [pc, #488]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d2de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d2e0:	3301      	adds	r3, #1
 801d2e2:	4a79      	ldr	r2, [pc, #484]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d2e4:	6653      	str	r3, [r2, #100]	; 0x64
				if(SM_ApplParam.BuzzerCounter > (1000/loopms) && SM_ApplParam.Buzzertoggle == 0){
 801d2e6:	4b78      	ldr	r3, [pc, #480]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d2e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d2ea:	79fa      	ldrb	r2, [r7, #7]
 801d2ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d2f0:	fb91 f2f2 	sdiv	r2, r1, r2
 801d2f4:	4293      	cmp	r3, r2
 801d2f6:	d954      	bls.n	801d3a2 <SM_StateMachineHandler+0xcb2>
 801d2f8:	4b73      	ldr	r3, [pc, #460]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d2fa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d14f      	bne.n	801d3a2 <SM_StateMachineHandler+0xcb2>
					BUZZER_OFF();
 801d302:	2201      	movs	r2, #1
 801d304:	2180      	movs	r1, #128	; 0x80
 801d306:	4871      	ldr	r0, [pc, #452]	; (801d4cc <SM_StateMachineHandler+0xddc>)
 801d308:	f7f6 fc78 	bl	8013bfc <HAL_GPIO_WritePin>
					SM_ApplParam.Buzzertoggle = 1;
 801d30c:	4b6e      	ldr	r3, [pc, #440]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d30e:	2201      	movs	r2, #1
 801d310:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
					SM_ApplParam.BuzzerCounter = 0;
 801d314:	4b6c      	ldr	r3, [pc, #432]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d316:	2200      	movs	r2, #0
 801d318:	665a      	str	r2, [r3, #100]	; 0x64
 801d31a:	e042      	b.n	801d3a2 <SM_StateMachineHandler+0xcb2>
				}
			}
			else{
				SM_ApplParam.BuzzerCounter++;
 801d31c:	4b6a      	ldr	r3, [pc, #424]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d31e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d320:	3301      	adds	r3, #1
 801d322:	4a69      	ldr	r2, [pc, #420]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d324:	6653      	str	r3, [r2, #100]	; 0x64
				if((SM_ApplParam.BuzzerCounter % (100/loopms)) == 0 && SM_ApplParam.Buzzertoggle == 0){
 801d326:	4b68      	ldr	r3, [pc, #416]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d32a:	79fa      	ldrb	r2, [r7, #7]
 801d32c:	2164      	movs	r1, #100	; 0x64
 801d32e:	fb91 f2f2 	sdiv	r2, r1, r2
 801d332:	fbb3 f1f2 	udiv	r1, r3, r2
 801d336:	fb02 f201 	mul.w	r2, r2, r1
 801d33a:	1a9b      	subs	r3, r3, r2
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	d130      	bne.n	801d3a2 <SM_StateMachineHandler+0xcb2>
 801d340:	4b61      	ldr	r3, [pc, #388]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d342:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801d346:	2b00      	cmp	r3, #0
 801d348:	d12b      	bne.n	801d3a2 <SM_StateMachineHandler+0xcb2>
					BUZZER_OFF();
 801d34a:	2201      	movs	r2, #1
 801d34c:	2180      	movs	r1, #128	; 0x80
 801d34e:	485f      	ldr	r0, [pc, #380]	; (801d4cc <SM_StateMachineHandler+0xddc>)
 801d350:	f7f6 fc54 	bl	8013bfc <HAL_GPIO_WritePin>
					if(SM_ApplParam.BuzzerCounter % (200/loopms) == 0){
 801d354:	4b5c      	ldr	r3, [pc, #368]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d358:	79fa      	ldrb	r2, [r7, #7]
 801d35a:	21c8      	movs	r1, #200	; 0xc8
 801d35c:	fb91 f2f2 	sdiv	r2, r1, r2
 801d360:	fbb3 f1f2 	udiv	r1, r3, r2
 801d364:	fb02 f201 	mul.w	r2, r2, r1
 801d368:	1a9b      	subs	r3, r3, r2
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d119      	bne.n	801d3a2 <SM_StateMachineHandler+0xcb2>
						BUZZER_ON();
 801d36e:	2200      	movs	r2, #0
 801d370:	2180      	movs	r1, #128	; 0x80
 801d372:	4856      	ldr	r0, [pc, #344]	; (801d4cc <SM_StateMachineHandler+0xddc>)
 801d374:	f7f6 fc42 	bl	8013bfc <HAL_GPIO_WritePin>
						if(SM_ApplParam.BuzzerCounter > (2500/loopms)){
 801d378:	4b53      	ldr	r3, [pc, #332]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d37a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d37c:	79fa      	ldrb	r2, [r7, #7]
 801d37e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 801d382:	fb91 f2f2 	sdiv	r2, r1, r2
 801d386:	4293      	cmp	r3, r2
 801d388:	d90b      	bls.n	801d3a2 <SM_StateMachineHandler+0xcb2>
							SM_ApplParam.Buzzertoggle = 1;
 801d38a:	4b4f      	ldr	r3, [pc, #316]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d38c:	2201      	movs	r2, #1
 801d38e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
							SM_ApplParam.BuzzerCounter = 0;
 801d392:	4b4d      	ldr	r3, [pc, #308]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d394:	2200      	movs	r2, #0
 801d396:	665a      	str	r2, [r3, #100]	; 0x64
							BUZZER_OFF();
 801d398:	2201      	movs	r2, #1
 801d39a:	2180      	movs	r1, #128	; 0x80
 801d39c:	484b      	ldr	r0, [pc, #300]	; (801d4cc <SM_StateMachineHandler+0xddc>)
 801d39e:	f7f6 fc2d 	bl	8013bfc <HAL_GPIO_WritePin>
					}
				}
			}


			WriteEEPData();
 801d3a2:	f7fd feb9 	bl	801b118 <WriteEEPData>
 801d3a6:	e16f      	b.n	801d688 <SM_StateMachineHandler+0xf98>
		}

		else if(SM_enumECUState == SM_enum_ECU_Info){
 801d3a8:	4b42      	ldr	r3, [pc, #264]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d3aa:	781b      	ldrb	r3, [r3, #0]
 801d3ac:	b2db      	uxtb	r3, r3
 801d3ae:	2b0f      	cmp	r3, #15
 801d3b0:	d129      	bne.n	801d406 <SM_StateMachineHandler+0xd16>
			if(SM_KeyPressed == CMD_Enum_B4){
 801d3b2:	4b41      	ldr	r3, [pc, #260]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d3b4:	781b      	ldrb	r3, [r3, #0]
 801d3b6:	2b04      	cmp	r3, #4
 801d3b8:	d105      	bne.n	801d3c6 <SM_StateMachineHandler+0xcd6>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d3ba:	4b3f      	ldr	r3, [pc, #252]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d3bc:	2200      	movs	r2, #0
 801d3be:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d3c0:	4b3c      	ldr	r3, [pc, #240]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d3c2:	2201      	movs	r2, #1
 801d3c4:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d3c6:	4b3c      	ldr	r3, [pc, #240]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d3c8:	781b      	ldrb	r3, [r3, #0]
 801d3ca:	2b03      	cmp	r3, #3
 801d3cc:	d105      	bne.n	801d3da <SM_StateMachineHandler+0xcea>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d3ce:	4b3a      	ldr	r3, [pc, #232]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d3d0:	2200      	movs	r2, #0
 801d3d2:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d3d4:	4b37      	ldr	r3, [pc, #220]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d3d6:	2201      	movs	r2, #1
 801d3d8:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d3da:	4b37      	ldr	r3, [pc, #220]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d3dc:	781b      	ldrb	r3, [r3, #0]
 801d3de:	2b02      	cmp	r3, #2
 801d3e0:	d105      	bne.n	801d3ee <SM_StateMachineHandler+0xcfe>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d3e2:	4b35      	ldr	r3, [pc, #212]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d3e4:	2200      	movs	r2, #0
 801d3e6:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d3e8:	4b32      	ldr	r3, [pc, #200]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d3ea:	2201      	movs	r2, #1
 801d3ec:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d3ee:	4b32      	ldr	r3, [pc, #200]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d3f0:	781b      	ldrb	r3, [r3, #0]
 801d3f2:	2b01      	cmp	r3, #1
 801d3f4:	f040 8148 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d3f8:	4b2f      	ldr	r3, [pc, #188]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d3fe:	4b2d      	ldr	r3, [pc, #180]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d400:	2201      	movs	r2, #1
 801d402:	701a      	strb	r2, [r3, #0]
 801d404:	e140      	b.n	801d688 <SM_StateMachineHandler+0xf98>
			}
		}

		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801d406:	4b2b      	ldr	r3, [pc, #172]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d408:	781b      	ldrb	r3, [r3, #0]
 801d40a:	b2db      	uxtb	r3, r3
 801d40c:	2b10      	cmp	r3, #16
 801d40e:	d161      	bne.n	801d4d4 <SM_StateMachineHandler+0xde4>
			if(SM_KeyPressed == CMD_Enum_B4){
 801d410:	4b29      	ldr	r3, [pc, #164]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d412:	781b      	ldrb	r3, [r3, #0]
 801d414:	2b04      	cmp	r3, #4
 801d416:	d102      	bne.n	801d41e <SM_StateMachineHandler+0xd2e>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d418:	4b27      	ldr	r3, [pc, #156]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d41a:	2200      	movs	r2, #0
 801d41c:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d41e:	4b26      	ldr	r3, [pc, #152]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d420:	781b      	ldrb	r3, [r3, #0]
 801d422:	2b03      	cmp	r3, #3
 801d424:	d102      	bne.n	801d42c <SM_StateMachineHandler+0xd3c>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d426:	4b24      	ldr	r3, [pc, #144]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d428:	2200      	movs	r2, #0
 801d42a:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d42c:	4b22      	ldr	r3, [pc, #136]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d42e:	781b      	ldrb	r3, [r3, #0]
 801d430:	2b02      	cmp	r3, #2
 801d432:	d107      	bne.n	801d444 <SM_StateMachineHandler+0xd54>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d434:	4b20      	ldr	r3, [pc, #128]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d436:	2200      	movs	r2, #0
 801d438:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow;
 801d43a:	4b1e      	ldr	r3, [pc, #120]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d43c:	220b      	movs	r2, #11
 801d43e:	701a      	strb	r2, [r3, #0]
				StartCurrentProvidingLoop();
 801d440:	f000 ffc8 	bl	801e3d4 <StartCurrentProvidingLoop>
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d444:	4b1c      	ldr	r3, [pc, #112]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d446:	781b      	ldrb	r3, [r3, #0]
 801d448:	2b01      	cmp	r3, #1
 801d44a:	d105      	bne.n	801d458 <SM_StateMachineHandler+0xd68>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d44c:	4b1a      	ldr	r3, [pc, #104]	; (801d4b8 <SM_StateMachineHandler+0xdc8>)
 801d44e:	2200      	movs	r2, #0
 801d450:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_StandByMode;
 801d452:	4b18      	ldr	r3, [pc, #96]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d454:	2201      	movs	r2, #1
 801d456:	701a      	strb	r2, [r3, #0]
			}

			BUZZER_OFF();
 801d458:	2201      	movs	r2, #1
 801d45a:	2180      	movs	r1, #128	; 0x80
 801d45c:	481b      	ldr	r0, [pc, #108]	; (801d4cc <SM_StateMachineHandler+0xddc>)
 801d45e:	f7f6 fbcd 	bl	8013bfc <HAL_GPIO_WritePin>
			SM_ApplParam.BuzzerCounter++;
 801d462:	4b19      	ldr	r3, [pc, #100]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d466:	3301      	adds	r3, #1
 801d468:	4a17      	ldr	r2, [pc, #92]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d46a:	6653      	str	r3, [r2, #100]	; 0x64
			if(SM_ApplParam.BuzzerCounter>(1000/loopms)){
 801d46c:	4b16      	ldr	r3, [pc, #88]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d470:	79fa      	ldrb	r2, [r7, #7]
 801d472:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d476:	fb91 f2f2 	sdiv	r2, r1, r2
 801d47a:	4293      	cmp	r3, r2
 801d47c:	f240 8104 	bls.w	801d688 <SM_StateMachineHandler+0xf98>
				BUZZER_ON();
 801d480:	2200      	movs	r2, #0
 801d482:	2180      	movs	r1, #128	; 0x80
 801d484:	4811      	ldr	r0, [pc, #68]	; (801d4cc <SM_StateMachineHandler+0xddc>)
 801d486:	f7f6 fbb9 	bl	8013bfc <HAL_GPIO_WritePin>
				SM_ApplParam.BuzzerCounter =0;
 801d48a:	4b0f      	ldr	r3, [pc, #60]	; (801d4c8 <SM_StateMachineHandler+0xdd8>)
 801d48c:	2200      	movs	r2, #0
 801d48e:	665a      	str	r2, [r3, #100]	; 0x64
				Appl_Display.PowerOnCounter++;
 801d490:	4b0f      	ldr	r3, [pc, #60]	; (801d4d0 <SM_StateMachineHandler+0xde0>)
 801d492:	78db      	ldrb	r3, [r3, #3]
 801d494:	3301      	adds	r3, #1
 801d496:	b2da      	uxtb	r2, r3
 801d498:	4b0d      	ldr	r3, [pc, #52]	; (801d4d0 <SM_StateMachineHandler+0xde0>)
 801d49a:	70da      	strb	r2, [r3, #3]
				if(Appl_Display.PowerOnCounter >= 20){
 801d49c:	4b0c      	ldr	r3, [pc, #48]	; (801d4d0 <SM_StateMachineHandler+0xde0>)
 801d49e:	78db      	ldrb	r3, [r3, #3]
 801d4a0:	2b13      	cmp	r3, #19
 801d4a2:	f240 80f1 	bls.w	801d688 <SM_StateMachineHandler+0xf98>
					SM_enumECUState = SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow;
 801d4a6:	4b03      	ldr	r3, [pc, #12]	; (801d4b4 <SM_StateMachineHandler+0xdc4>)
 801d4a8:	220b      	movs	r2, #11
 801d4aa:	701a      	strb	r2, [r3, #0]
					StartCurrentProvidingLoop();
 801d4ac:	f000 ff92 	bl	801e3d4 <StartCurrentProvidingLoop>
 801d4b0:	e0ea      	b.n	801d688 <SM_StateMachineHandler+0xf98>
 801d4b2:	bf00      	nop
 801d4b4:	2000490c 	.word	0x2000490c
 801d4b8:	200048e4 	.word	0x200048e4
 801d4bc:	200047b0 	.word	0x200047b0
 801d4c0:	40020400 	.word	0x40020400
 801d4c4:	2000005c 	.word	0x2000005c
 801d4c8:	20004974 	.word	0x20004974
 801d4cc:	40020800 	.word	0x40020800
 801d4d0:	20004870 	.word	0x20004870
				}
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_MaxVoltage){
 801d4d4:	4b6f      	ldr	r3, [pc, #444]	; (801d694 <SM_StateMachineHandler+0xfa4>)
 801d4d6:	781b      	ldrb	r3, [r3, #0]
 801d4d8:	b2db      	uxtb	r3, r3
 801d4da:	2b07      	cmp	r3, #7
 801d4dc:	d14b      	bne.n	801d576 <SM_StateMachineHandler+0xe86>
			if(SM_KeyPressed == CMD_Enum_B4){
 801d4de:	4b6e      	ldr	r3, [pc, #440]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d4e0:	781b      	ldrb	r3, [r3, #0]
 801d4e2:	2b04      	cmp	r3, #4
 801d4e4:	d116      	bne.n	801d514 <SM_StateMachineHandler+0xe24>
				INC(SM_ApplParam.OverVoltageThreshold,270,1);
 801d4e6:	4b6d      	ldr	r3, [pc, #436]	; (801d69c <SM_StateMachineHandler+0xfac>)
 801d4e8:	edd3 7a00 	vldr	s15, [r3]
 801d4ec:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801d6a0 <SM_StateMachineHandler+0xfb0>
 801d4f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4f8:	d807      	bhi.n	801d50a <SM_StateMachineHandler+0xe1a>
 801d4fa:	4b68      	ldr	r3, [pc, #416]	; (801d69c <SM_StateMachineHandler+0xfac>)
 801d4fc:	edd3 7a00 	vldr	s15, [r3]
 801d500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d504:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d508:	e001      	b.n	801d50e <SM_StateMachineHandler+0xe1e>
 801d50a:	eddf 7a66 	vldr	s15, [pc, #408]	; 801d6a4 <SM_StateMachineHandler+0xfb4>
 801d50e:	4b63      	ldr	r3, [pc, #396]	; (801d69c <SM_StateMachineHandler+0xfac>)
 801d510:	edc3 7a00 	vstr	s15, [r3]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d514:	4b60      	ldr	r3, [pc, #384]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d516:	781b      	ldrb	r3, [r3, #0]
 801d518:	2b03      	cmp	r3, #3
 801d51a:	d116      	bne.n	801d54a <SM_StateMachineHandler+0xe5a>
				DEC(SM_ApplParam.OverVoltageThreshold,48,1);
 801d51c:	4b5f      	ldr	r3, [pc, #380]	; (801d69c <SM_StateMachineHandler+0xfac>)
 801d51e:	edd3 7a00 	vldr	s15, [r3]
 801d522:	ed9f 7a61 	vldr	s14, [pc, #388]	; 801d6a8 <SM_StateMachineHandler+0xfb8>
 801d526:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d52e:	db07      	blt.n	801d540 <SM_StateMachineHandler+0xe50>
 801d530:	4b5a      	ldr	r3, [pc, #360]	; (801d69c <SM_StateMachineHandler+0xfac>)
 801d532:	edd3 7a00 	vldr	s15, [r3]
 801d536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d53a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d53e:	e001      	b.n	801d544 <SM_StateMachineHandler+0xe54>
 801d540:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801d6ac <SM_StateMachineHandler+0xfbc>
 801d544:	4b55      	ldr	r3, [pc, #340]	; (801d69c <SM_StateMachineHandler+0xfac>)
 801d546:	edc3 7a00 	vstr	s15, [r3]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d54a:	4b53      	ldr	r3, [pc, #332]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d54c:	781b      	ldrb	r3, [r3, #0]
 801d54e:	2b02      	cmp	r3, #2
 801d550:	d105      	bne.n	801d55e <SM_StateMachineHandler+0xe6e>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d552:	4b51      	ldr	r3, [pc, #324]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d554:	2200      	movs	r2, #0
 801d556:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_SettingMenu;
 801d558:	4b4e      	ldr	r3, [pc, #312]	; (801d694 <SM_StateMachineHandler+0xfa4>)
 801d55a:	2203      	movs	r2, #3
 801d55c:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d55e:	4b4e      	ldr	r3, [pc, #312]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d560:	781b      	ldrb	r3, [r3, #0]
 801d562:	2b01      	cmp	r3, #1
 801d564:	f040 8090 	bne.w	801d688 <SM_StateMachineHandler+0xf98>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d568:	4b4b      	ldr	r3, [pc, #300]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d56a:	2200      	movs	r2, #0
 801d56c:	701a      	strb	r2, [r3, #0]
				SM_enumECUState = SM_enum_ECU_SettingMenu;
 801d56e:	4b49      	ldr	r3, [pc, #292]	; (801d694 <SM_StateMachineHandler+0xfa4>)
 801d570:	2203      	movs	r2, #3
 801d572:	701a      	strb	r2, [r3, #0]
 801d574:	e088      	b.n	801d688 <SM_StateMachineHandler+0xf98>
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801d576:	4b47      	ldr	r3, [pc, #284]	; (801d694 <SM_StateMachineHandler+0xfa4>)
 801d578:	781b      	ldrb	r3, [r3, #0]
 801d57a:	b2db      	uxtb	r3, r3
 801d57c:	2b10      	cmp	r3, #16
 801d57e:	d11c      	bne.n	801d5ba <SM_StateMachineHandler+0xeca>
			if(SM_KeyPressed == CMD_Enum_B4){
 801d580:	4b45      	ldr	r3, [pc, #276]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d582:	781b      	ldrb	r3, [r3, #0]
 801d584:	2b04      	cmp	r3, #4
 801d586:	d102      	bne.n	801d58e <SM_StateMachineHandler+0xe9e>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d588:	4b43      	ldr	r3, [pc, #268]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d58a:	2200      	movs	r2, #0
 801d58c:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d58e:	4b42      	ldr	r3, [pc, #264]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d590:	781b      	ldrb	r3, [r3, #0]
 801d592:	2b03      	cmp	r3, #3
 801d594:	d102      	bne.n	801d59c <SM_StateMachineHandler+0xeac>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d596:	4b40      	ldr	r3, [pc, #256]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d598:	2200      	movs	r2, #0
 801d59a:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d59c:	4b3e      	ldr	r3, [pc, #248]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d59e:	781b      	ldrb	r3, [r3, #0]
 801d5a0:	2b02      	cmp	r3, #2
 801d5a2:	d102      	bne.n	801d5aa <SM_StateMachineHandler+0xeba>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d5a4:	4b3c      	ldr	r3, [pc, #240]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5a6:	2200      	movs	r2, #0
 801d5a8:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d5aa:	4b3b      	ldr	r3, [pc, #236]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5ac:	781b      	ldrb	r3, [r3, #0]
 801d5ae:	2b01      	cmp	r3, #1
 801d5b0:	d16a      	bne.n	801d688 <SM_StateMachineHandler+0xf98>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d5b2:	4b39      	ldr	r3, [pc, #228]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5b4:	2200      	movs	r2, #0
 801d5b6:	701a      	strb	r2, [r3, #0]
 801d5b8:	e066      	b.n	801d688 <SM_StateMachineHandler+0xf98>
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801d5ba:	4b36      	ldr	r3, [pc, #216]	; (801d694 <SM_StateMachineHandler+0xfa4>)
 801d5bc:	781b      	ldrb	r3, [r3, #0]
 801d5be:	b2db      	uxtb	r3, r3
 801d5c0:	2b10      	cmp	r3, #16
 801d5c2:	d11c      	bne.n	801d5fe <SM_StateMachineHandler+0xf0e>
			if(SM_KeyPressed == CMD_Enum_B4){
 801d5c4:	4b34      	ldr	r3, [pc, #208]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5c6:	781b      	ldrb	r3, [r3, #0]
 801d5c8:	2b04      	cmp	r3, #4
 801d5ca:	d102      	bne.n	801d5d2 <SM_StateMachineHandler+0xee2>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d5cc:	4b32      	ldr	r3, [pc, #200]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5ce:	2200      	movs	r2, #0
 801d5d0:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d5d2:	4b31      	ldr	r3, [pc, #196]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5d4:	781b      	ldrb	r3, [r3, #0]
 801d5d6:	2b03      	cmp	r3, #3
 801d5d8:	d102      	bne.n	801d5e0 <SM_StateMachineHandler+0xef0>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d5da:	4b2f      	ldr	r3, [pc, #188]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5dc:	2200      	movs	r2, #0
 801d5de:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d5e0:	4b2d      	ldr	r3, [pc, #180]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5e2:	781b      	ldrb	r3, [r3, #0]
 801d5e4:	2b02      	cmp	r3, #2
 801d5e6:	d102      	bne.n	801d5ee <SM_StateMachineHandler+0xefe>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d5e8:	4b2b      	ldr	r3, [pc, #172]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d5ee:	4b2a      	ldr	r3, [pc, #168]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5f0:	781b      	ldrb	r3, [r3, #0]
 801d5f2:	2b01      	cmp	r3, #1
 801d5f4:	d148      	bne.n	801d688 <SM_StateMachineHandler+0xf98>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d5f6:	4b28      	ldr	r3, [pc, #160]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d5f8:	2200      	movs	r2, #0
 801d5fa:	701a      	strb	r2, [r3, #0]
 801d5fc:	e044      	b.n	801d688 <SM_StateMachineHandler+0xf98>
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801d5fe:	4b25      	ldr	r3, [pc, #148]	; (801d694 <SM_StateMachineHandler+0xfa4>)
 801d600:	781b      	ldrb	r3, [r3, #0]
 801d602:	b2db      	uxtb	r3, r3
 801d604:	2b10      	cmp	r3, #16
 801d606:	d11c      	bne.n	801d642 <SM_StateMachineHandler+0xf52>
			if(SM_KeyPressed == CMD_Enum_B4){
 801d608:	4b23      	ldr	r3, [pc, #140]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d60a:	781b      	ldrb	r3, [r3, #0]
 801d60c:	2b04      	cmp	r3, #4
 801d60e:	d102      	bne.n	801d616 <SM_StateMachineHandler+0xf26>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d610:	4b21      	ldr	r3, [pc, #132]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d612:	2200      	movs	r2, #0
 801d614:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d616:	4b20      	ldr	r3, [pc, #128]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d618:	781b      	ldrb	r3, [r3, #0]
 801d61a:	2b03      	cmp	r3, #3
 801d61c:	d102      	bne.n	801d624 <SM_StateMachineHandler+0xf34>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d61e:	4b1e      	ldr	r3, [pc, #120]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d620:	2200      	movs	r2, #0
 801d622:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d624:	4b1c      	ldr	r3, [pc, #112]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d626:	781b      	ldrb	r3, [r3, #0]
 801d628:	2b02      	cmp	r3, #2
 801d62a:	d102      	bne.n	801d632 <SM_StateMachineHandler+0xf42>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d62c:	4b1a      	ldr	r3, [pc, #104]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d62e:	2200      	movs	r2, #0
 801d630:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d632:	4b19      	ldr	r3, [pc, #100]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d634:	781b      	ldrb	r3, [r3, #0]
 801d636:	2b01      	cmp	r3, #1
 801d638:	d126      	bne.n	801d688 <SM_StateMachineHandler+0xf98>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d63a:	4b17      	ldr	r3, [pc, #92]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d63c:	2200      	movs	r2, #0
 801d63e:	701a      	strb	r2, [r3, #0]
 801d640:	e022      	b.n	801d688 <SM_StateMachineHandler+0xf98>
			}
		}
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801d642:	4b14      	ldr	r3, [pc, #80]	; (801d694 <SM_StateMachineHandler+0xfa4>)
 801d644:	781b      	ldrb	r3, [r3, #0]
 801d646:	b2db      	uxtb	r3, r3
 801d648:	2b10      	cmp	r3, #16
 801d64a:	d11d      	bne.n	801d688 <SM_StateMachineHandler+0xf98>
			if(SM_KeyPressed == CMD_Enum_B4){
 801d64c:	4b12      	ldr	r3, [pc, #72]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d64e:	781b      	ldrb	r3, [r3, #0]
 801d650:	2b04      	cmp	r3, #4
 801d652:	d102      	bne.n	801d65a <SM_StateMachineHandler+0xf6a>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d654:	4b10      	ldr	r3, [pc, #64]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d656:	2200      	movs	r2, #0
 801d658:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B3){
 801d65a:	4b0f      	ldr	r3, [pc, #60]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d65c:	781b      	ldrb	r3, [r3, #0]
 801d65e:	2b03      	cmp	r3, #3
 801d660:	d102      	bne.n	801d668 <SM_StateMachineHandler+0xf78>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d662:	4b0d      	ldr	r3, [pc, #52]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d664:	2200      	movs	r2, #0
 801d666:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B2){
 801d668:	4b0b      	ldr	r3, [pc, #44]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d66a:	781b      	ldrb	r3, [r3, #0]
 801d66c:	2b02      	cmp	r3, #2
 801d66e:	d102      	bne.n	801d676 <SM_StateMachineHandler+0xf86>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d670:	4b09      	ldr	r3, [pc, #36]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d672:	2200      	movs	r2, #0
 801d674:	701a      	strb	r2, [r3, #0]
			}
			if(SM_KeyPressed == CMD_Enum_B1){
 801d676:	4b08      	ldr	r3, [pc, #32]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d678:	781b      	ldrb	r3, [r3, #0]
 801d67a:	2b01      	cmp	r3, #1
 801d67c:	d104      	bne.n	801d688 <SM_StateMachineHandler+0xf98>
				SM_KeyPressed = CMD_Enum_DEFAULT;
 801d67e:	4b06      	ldr	r3, [pc, #24]	; (801d698 <SM_StateMachineHandler+0xfa8>)
 801d680:	2200      	movs	r2, #0
 801d682:	701a      	strb	r2, [r3, #0]
 801d684:	e000      	b.n	801d688 <SM_StateMachineHandler+0xf98>
		if(SM_ApplParam.BuzzerCounter>(1000/loopms)){
 801d686:	bf00      	nop
			}
		}
	}
	DisplayWindowSelection();
 801d688:	f000 ff84 	bl	801e594 <DisplayWindowSelection>


}
 801d68c:	bf00      	nop
 801d68e:	3710      	adds	r7, #16
 801d690:	46bd      	mov	sp, r7
 801d692:	bd80      	pop	{r7, pc}
 801d694:	2000490c 	.word	0x2000490c
 801d698:	200048e4 	.word	0x200048e4
 801d69c:	20004974 	.word	0x20004974
 801d6a0:	43868000 	.word	0x43868000
 801d6a4:	43870000 	.word	0x43870000
 801d6a8:	42440000 	.word	0x42440000
 801d6ac:	42400000 	.word	0x42400000

0801d6b0 <SM_10msTask>:

void SM_10msTask(void){
 801d6b0:	b580      	push	{r7, lr}
 801d6b2:	af00      	add	r7, sp, #0
	Run_Diagnostic_Actions();
 801d6b4:	f7fc f81c 	bl	80196f0 <Run_Diagnostic_Actions>

}
 801d6b8:	bf00      	nop
 801d6ba:	bd80      	pop	{r7, pc}

0801d6bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	b084      	sub	sp, #16
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	4603      	mov	r3, r0
 801d6c4:	80fb      	strh	r3, [r7, #6]

	uint8_t SCRSequenceNumber;
	if((GPIO_Pin == uC_ZC1_Pin)){
 801d6c6:	88fb      	ldrh	r3, [r7, #6]
 801d6c8:	2b40      	cmp	r3, #64	; 0x40
 801d6ca:	f040 8089 	bne.w	801d7e0 <HAL_GPIO_EXTI_Callback+0x124>
		/*Vishwas:
		 * I expect Appl_u32ACDiag_DiffBtwFallEdgetime_ZC1 to be hit every 20000us ideally. Considering up to 90% error margin, if any pulse comes earlier ignore it
		 */
		Appl_u32ACDiag_DiffBtwFallEdgetime_ZC1 =  (__HAL_TIM_GET_COUNTER(phtim8))- (0);
 801d6ce:	4b99      	ldr	r3, [pc, #612]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6d6:	4a98      	ldr	r2, [pc, #608]	; (801d938 <HAL_GPIO_EXTI_Callback+0x27c>)
 801d6d8:	6013      	str	r3, [r2, #0]
		if(((__HAL_TIM_GET_COUNTER(phtim8)) < 18000)){
 801d6da:	4b96      	ldr	r3, [pc, #600]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6e2:	f244 624f 	movw	r2, #17999	; 0x464f
 801d6e6:	4293      	cmp	r3, r2
 801d6e8:	d803      	bhi.n	801d6f2 <HAL_GPIO_EXTI_Callback+0x36>
			Appl_u8ACDiagIgnoreThisPulse_ZC1 = 1;
 801d6ea:	4b94      	ldr	r3, [pc, #592]	; (801d93c <HAL_GPIO_EXTI_Callback+0x280>)
 801d6ec:	2201      	movs	r2, #1
 801d6ee:	701a      	strb	r2, [r3, #0]
 801d6f0:	e009      	b.n	801d706 <HAL_GPIO_EXTI_Callback+0x4a>
		}
		else{
			Appl_u8ACDiagIgnoreThisPulse_ZC1 = 0;
 801d6f2:	4b92      	ldr	r3, [pc, #584]	; (801d93c <HAL_GPIO_EXTI_Callback+0x280>)
 801d6f4:	2200      	movs	r2, #0
 801d6f6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(phtim8,0);
 801d6f8:	4b8e      	ldr	r3, [pc, #568]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d6fa:	681b      	ldr	r3, [r3, #0]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	2200      	movs	r2, #0
 801d700:	625a      	str	r2, [r3, #36]	; 0x24
			SCRSequenceNumber = 1;
 801d702:	2301      	movs	r3, #1
 801d704:	73fb      	strb	r3, [r7, #15]
		}

		if(Appl_u8ACDiagIgnoreThisPulse_ZC1 == 0){
 801d706:	4b8d      	ldr	r3, [pc, #564]	; (801d93c <HAL_GPIO_EXTI_Callback+0x280>)
 801d708:	781b      	ldrb	r3, [r3, #0]
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d156      	bne.n	801d7bc <HAL_GPIO_EXTI_Callback+0x100>
			ScheduleTrigger(SCRSequenceNumber);
 801d70e:	7bfb      	ldrb	r3, [r7, #15]
 801d710:	4618      	mov	r0, r3
 801d712:	f000 f949 	bl	801d9a8 <ScheduleTrigger>
			if(Appl_diagActiveFault.PowerFail_Z1 == 0 && \
 801d716:	4b8a      	ldr	r3, [pc, #552]	; (801d940 <HAL_GPIO_EXTI_Callback+0x284>)
 801d718:	781b      	ldrb	r3, [r3, #0]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d14e      	bne.n	801d7bc <HAL_GPIO_EXTI_Callback+0x100>
					Appl_diagActiveFault.PowerFail_Z2 == 0 && \
 801d71e:	4b88      	ldr	r3, [pc, #544]	; (801d940 <HAL_GPIO_EXTI_Callback+0x284>)
 801d720:	785b      	ldrb	r3, [r3, #1]
			if(Appl_diagActiveFault.PowerFail_Z1 == 0 && \
 801d722:	2b00      	cmp	r3, #0
 801d724:	d14a      	bne.n	801d7bc <HAL_GPIO_EXTI_Callback+0x100>
					Appl_diagActiveFault.PowerFail_Z3 == 0 ){
 801d726:	4b86      	ldr	r3, [pc, #536]	; (801d940 <HAL_GPIO_EXTI_Callback+0x284>)
 801d728:	789b      	ldrb	r3, [r3, #2]
					Appl_diagActiveFault.PowerFail_Z2 == 0 && \
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d146      	bne.n	801d7bc <HAL_GPIO_EXTI_Callback+0x100>
				if((HAL_GPIO_ReadPin(uC_ZC2_GPIO_Port,uC_ZC2_Pin) == GPIO_PIN_SET) && \
 801d72e:	2180      	movs	r1, #128	; 0x80
 801d730:	4884      	ldr	r0, [pc, #528]	; (801d944 <HAL_GPIO_EXTI_Callback+0x288>)
 801d732:	f7f6 fa4b 	bl	8013bcc <HAL_GPIO_ReadPin>
 801d736:	4603      	mov	r3, r0
 801d738:	2b01      	cmp	r3, #1
 801d73a:	d11a      	bne.n	801d772 <HAL_GPIO_EXTI_Callback+0xb6>
						(HAL_GPIO_ReadPin(uC_ZC3_GPIO_Port,uC_ZC3_Pin) == GPIO_PIN_RESET)){
 801d73c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d740:	4880      	ldr	r0, [pc, #512]	; (801d944 <HAL_GPIO_EXTI_Callback+0x288>)
 801d742:	f7f6 fa43 	bl	8013bcc <HAL_GPIO_ReadPin>
 801d746:	4603      	mov	r3, r0
				if((HAL_GPIO_ReadPin(uC_ZC2_GPIO_Port,uC_ZC2_Pin) == GPIO_PIN_SET) && \
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d112      	bne.n	801d772 <HAL_GPIO_EXTI_Callback+0xb6>
					FaultParamTable[Diag_enum_PhaseReversal].DebouncehealCounter++;
 801d74c:	4b7e      	ldr	r3, [pc, #504]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d74e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801d750:	3301      	adds	r3, #1
 801d752:	b29a      	uxth	r2, r3
 801d754:	4b7c      	ldr	r3, [pc, #496]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d756:	875a      	strh	r2, [r3, #58]	; 0x3a
					if(FaultParamTable[Diag_enum_PhaseReversal].DebouncehealCounter > FaultParamTable[Diag_enum_PhaseReversal].healconfirmThreshold){
 801d758:	4b7b      	ldr	r3, [pc, #492]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d75a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801d75c:	4b7a      	ldr	r3, [pc, #488]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d75e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d760:	429a      	cmp	r2, r3
 801d762:	d92b      	bls.n	801d7bc <HAL_GPIO_EXTI_Callback+0x100>
						FaultParamTable[Diag_enum_PhaseReversal].DebouncehealCounter = 0;
 801d764:	4b78      	ldr	r3, [pc, #480]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d766:	2200      	movs	r2, #0
 801d768:	875a      	strh	r2, [r3, #58]	; 0x3a
						Appl_diagActiveFault.PhaseReversal = 0;
 801d76a:	4b75      	ldr	r3, [pc, #468]	; (801d940 <HAL_GPIO_EXTI_Callback+0x284>)
 801d76c:	2200      	movs	r2, #0
 801d76e:	71da      	strb	r2, [r3, #7]
					if(FaultParamTable[Diag_enum_PhaseReversal].DebouncehealCounter > FaultParamTable[Diag_enum_PhaseReversal].healconfirmThreshold){
 801d770:	e024      	b.n	801d7bc <HAL_GPIO_EXTI_Callback+0x100>
					}
				}
				else if((HAL_GPIO_ReadPin(uC_ZC2_GPIO_Port,uC_ZC2_Pin) == GPIO_PIN_RESET) && \
 801d772:	2180      	movs	r1, #128	; 0x80
 801d774:	4873      	ldr	r0, [pc, #460]	; (801d944 <HAL_GPIO_EXTI_Callback+0x288>)
 801d776:	f7f6 fa29 	bl	8013bcc <HAL_GPIO_ReadPin>
 801d77a:	4603      	mov	r3, r0
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d11a      	bne.n	801d7b6 <HAL_GPIO_EXTI_Callback+0xfa>
						(HAL_GPIO_ReadPin(uC_ZC3_GPIO_Port,uC_ZC3_Pin) == GPIO_PIN_SET)){
 801d780:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d784:	486f      	ldr	r0, [pc, #444]	; (801d944 <HAL_GPIO_EXTI_Callback+0x288>)
 801d786:	f7f6 fa21 	bl	8013bcc <HAL_GPIO_ReadPin>
 801d78a:	4603      	mov	r3, r0
				else if((HAL_GPIO_ReadPin(uC_ZC2_GPIO_Port,uC_ZC2_Pin) == GPIO_PIN_RESET) && \
 801d78c:	2b01      	cmp	r3, #1
 801d78e:	d112      	bne.n	801d7b6 <HAL_GPIO_EXTI_Callback+0xfa>
					FaultParamTable[Diag_enum_PhaseReversal].DebouncefaultCounter++;
 801d790:	4b6d      	ldr	r3, [pc, #436]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d792:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801d794:	3301      	adds	r3, #1
 801d796:	b29a      	uxth	r2, r3
 801d798:	4b6b      	ldr	r3, [pc, #428]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d79a:	871a      	strh	r2, [r3, #56]	; 0x38
					if(FaultParamTable[Diag_enum_PhaseReversal].DebouncefaultCounter > FaultParamTable[Diag_enum_PhaseReversal].faultconfirmThreshold){
 801d79c:	4b6a      	ldr	r3, [pc, #424]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d79e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 801d7a0:	4b69      	ldr	r3, [pc, #420]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d7a2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801d7a4:	429a      	cmp	r2, r3
 801d7a6:	d909      	bls.n	801d7bc <HAL_GPIO_EXTI_Callback+0x100>
						FaultParamTable[Diag_enum_PhaseReversal].DebouncefaultCounter = 0;
 801d7a8:	4b67      	ldr	r3, [pc, #412]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d7aa:	2200      	movs	r2, #0
 801d7ac:	871a      	strh	r2, [r3, #56]	; 0x38
						Appl_diagActiveFault.PhaseReversal = 1;
 801d7ae:	4b64      	ldr	r3, [pc, #400]	; (801d940 <HAL_GPIO_EXTI_Callback+0x284>)
 801d7b0:	2201      	movs	r2, #1
 801d7b2:	71da      	strb	r2, [r3, #7]
					if(FaultParamTable[Diag_enum_PhaseReversal].DebouncefaultCounter > FaultParamTable[Diag_enum_PhaseReversal].faultconfirmThreshold){
 801d7b4:	e002      	b.n	801d7bc <HAL_GPIO_EXTI_Callback+0x100>
					}
				}
				else{
					Appl_diagActiveFault.PhaseReversal = 2;
 801d7b6:	4b62      	ldr	r3, [pc, #392]	; (801d940 <HAL_GPIO_EXTI_Callback+0x284>)
 801d7b8:	2202      	movs	r2, #2
 801d7ba:	71da      	strb	r2, [r3, #7]
		/* Vishwas:
		 * Diagnostic Logic :
		 * If any ZCD interrupt occur, I assume that AC has been given in that Phase line and I debounce it few times before confirming AC on that line
		 */
		/*Diag_enum_Powerfail_Z1*/
		FaultParamTable[Diag_enum_Powerfail_Z1].DebouncehealCounter++;
 801d7bc:	4b62      	ldr	r3, [pc, #392]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d7be:	885b      	ldrh	r3, [r3, #2]
 801d7c0:	3301      	adds	r3, #1
 801d7c2:	b29a      	uxth	r2, r3
 801d7c4:	4b60      	ldr	r3, [pc, #384]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d7c6:	805a      	strh	r2, [r3, #2]
		FaultParamTable[Diag_enum_Powerfail_Z1].DebouncefaultCounter = 0;
 801d7c8:	4b5f      	ldr	r3, [pc, #380]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d7ca:	2200      	movs	r2, #0
 801d7cc:	801a      	strh	r2, [r3, #0]
		if(FaultParamTable[Diag_enum_Powerfail_Z1].DebouncehealCounter >= 100){
 801d7ce:	4b5e      	ldr	r3, [pc, #376]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d7d0:	885b      	ldrh	r3, [r3, #2]
 801d7d2:	2b63      	cmp	r3, #99	; 0x63
 801d7d4:	f240 80df 	bls.w	801d996 <HAL_GPIO_EXTI_Callback+0x2da>
			FaultParamTable[Diag_enum_Powerfail_Z1].DebouncehealCounter = 100;
 801d7d8:	4b5b      	ldr	r3, [pc, #364]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d7da:	2264      	movs	r2, #100	; 0x64
 801d7dc:	805a      	strh	r2, [r3, #2]
		FaultParamTable[Diag_enum_Powerfail_Z3].DebouncefaultCounter = 0;
		if(FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter >= 100){
			FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter = 100;
		}
	}
}
 801d7de:	e0da      	b.n	801d996 <HAL_GPIO_EXTI_Callback+0x2da>
	else if((GPIO_Pin == uC_ZC2_Pin)){
 801d7e0:	88fb      	ldrh	r3, [r7, #6]
 801d7e2:	2b80      	cmp	r3, #128	; 0x80
 801d7e4:	d15f      	bne.n	801d8a6 <HAL_GPIO_EXTI_Callback+0x1ea>
		Appl_u32ACDiag_DiffBtwFallEdgetime_ZC2 = (__HAL_TIM_GET_COUNTER(phtim8))- (0);
 801d7e6:	4b53      	ldr	r3, [pc, #332]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7ee:	4a57      	ldr	r2, [pc, #348]	; (801d94c <HAL_GPIO_EXTI_Callback+0x290>)
 801d7f0:	6013      	str	r3, [r2, #0]
		if(Appl_diagActiveFault.PhaseReversal == 0){
 801d7f2:	4b53      	ldr	r3, [pc, #332]	; (801d940 <HAL_GPIO_EXTI_Callback+0x284>)
 801d7f4:	79db      	ldrb	r3, [r3, #7]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d119      	bne.n	801d82e <HAL_GPIO_EXTI_Callback+0x172>
			if(((__HAL_TIM_GET_COUNTER(phtim8)) < 5500) || ((__HAL_TIM_GET_COUNTER(phtim8)) > 7333)){
 801d7fa:	4b4e      	ldr	r3, [pc, #312]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d802:	f241 527b 	movw	r2, #5499	; 0x157b
 801d806:	4293      	cmp	r3, r2
 801d808:	d907      	bls.n	801d81a <HAL_GPIO_EXTI_Callback+0x15e>
 801d80a:	4b4a      	ldr	r3, [pc, #296]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d80c:	681b      	ldr	r3, [r3, #0]
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d812:	f641 42a5 	movw	r2, #7333	; 0x1ca5
 801d816:	4293      	cmp	r3, r2
 801d818:	d903      	bls.n	801d822 <HAL_GPIO_EXTI_Callback+0x166>
				Appl_u8ACDiagIgnoreThisPulse_ZC2 = 1;
 801d81a:	4b4d      	ldr	r3, [pc, #308]	; (801d950 <HAL_GPIO_EXTI_Callback+0x294>)
 801d81c:	2201      	movs	r2, #1
 801d81e:	701a      	strb	r2, [r3, #0]
 801d820:	e026      	b.n	801d870 <HAL_GPIO_EXTI_Callback+0x1b4>
				Appl_u8ACDiagIgnoreThisPulse_ZC2 = 0;
 801d822:	4b4b      	ldr	r3, [pc, #300]	; (801d950 <HAL_GPIO_EXTI_Callback+0x294>)
 801d824:	2200      	movs	r2, #0
 801d826:	701a      	strb	r2, [r3, #0]
				SCRSequenceNumber = 2;
 801d828:	2302      	movs	r3, #2
 801d82a:	73fb      	strb	r3, [r7, #15]
 801d82c:	e020      	b.n	801d870 <HAL_GPIO_EXTI_Callback+0x1b4>
		else if(Appl_diagActiveFault.PhaseReversal == 1){
 801d82e:	4b44      	ldr	r3, [pc, #272]	; (801d940 <HAL_GPIO_EXTI_Callback+0x284>)
 801d830:	79db      	ldrb	r3, [r3, #7]
 801d832:	2b01      	cmp	r3, #1
 801d834:	d119      	bne.n	801d86a <HAL_GPIO_EXTI_Callback+0x1ae>
			if(((__HAL_TIM_GET_COUNTER(phtim8)) < 12500)|| ((__HAL_TIM_GET_COUNTER(phtim8)) > 14666)){
 801d836:	4b3f      	ldr	r3, [pc, #252]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d83e:	f243 02d3 	movw	r2, #12499	; 0x30d3
 801d842:	4293      	cmp	r3, r2
 801d844:	d907      	bls.n	801d856 <HAL_GPIO_EXTI_Callback+0x19a>
 801d846:	4b3b      	ldr	r3, [pc, #236]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d84e:	f643 124a 	movw	r2, #14666	; 0x394a
 801d852:	4293      	cmp	r3, r2
 801d854:	d903      	bls.n	801d85e <HAL_GPIO_EXTI_Callback+0x1a2>
				Appl_u8ACDiagIgnoreThisPulse_ZC2 = 1;
 801d856:	4b3e      	ldr	r3, [pc, #248]	; (801d950 <HAL_GPIO_EXTI_Callback+0x294>)
 801d858:	2201      	movs	r2, #1
 801d85a:	701a      	strb	r2, [r3, #0]
 801d85c:	e008      	b.n	801d870 <HAL_GPIO_EXTI_Callback+0x1b4>
				Appl_u8ACDiagIgnoreThisPulse_ZC2 = 0;
 801d85e:	4b3c      	ldr	r3, [pc, #240]	; (801d950 <HAL_GPIO_EXTI_Callback+0x294>)
 801d860:	2200      	movs	r2, #0
 801d862:	701a      	strb	r2, [r3, #0]
				SCRSequenceNumber = 3;
 801d864:	2303      	movs	r3, #3
 801d866:	73fb      	strb	r3, [r7, #15]
 801d868:	e002      	b.n	801d870 <HAL_GPIO_EXTI_Callback+0x1b4>
			Appl_u8ACDiagIgnoreThisPulse_ZC2 = 1;
 801d86a:	4b39      	ldr	r3, [pc, #228]	; (801d950 <HAL_GPIO_EXTI_Callback+0x294>)
 801d86c:	2201      	movs	r2, #1
 801d86e:	701a      	strb	r2, [r3, #0]
		if(Appl_u8ACDiagIgnoreThisPulse_ZC2 == 0){
 801d870:	4b37      	ldr	r3, [pc, #220]	; (801d950 <HAL_GPIO_EXTI_Callback+0x294>)
 801d872:	781b      	ldrb	r3, [r3, #0]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d105      	bne.n	801d884 <HAL_GPIO_EXTI_Callback+0x1c8>
			SCRSequenceNumber = 2;
 801d878:	2302      	movs	r3, #2
 801d87a:	73fb      	strb	r3, [r7, #15]
			ScheduleTrigger(SCRSequenceNumber);
 801d87c:	7bfb      	ldrb	r3, [r7, #15]
 801d87e:	4618      	mov	r0, r3
 801d880:	f000 f892 	bl	801d9a8 <ScheduleTrigger>
		FaultParamTable[Diag_enum_Powerfail_Z2].DebouncehealCounter++;
 801d884:	4b30      	ldr	r3, [pc, #192]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d886:	895b      	ldrh	r3, [r3, #10]
 801d888:	3301      	adds	r3, #1
 801d88a:	b29a      	uxth	r2, r3
 801d88c:	4b2e      	ldr	r3, [pc, #184]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d88e:	815a      	strh	r2, [r3, #10]
		FaultParamTable[Diag_enum_Powerfail_Z2].DebouncefaultCounter = 0;
 801d890:	4b2d      	ldr	r3, [pc, #180]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d892:	2200      	movs	r2, #0
 801d894:	811a      	strh	r2, [r3, #8]
		if(FaultParamTable[Diag_enum_Powerfail_Z2].DebouncehealCounter >= 100){
 801d896:	4b2c      	ldr	r3, [pc, #176]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d898:	895b      	ldrh	r3, [r3, #10]
 801d89a:	2b63      	cmp	r3, #99	; 0x63
 801d89c:	d97b      	bls.n	801d996 <HAL_GPIO_EXTI_Callback+0x2da>
			FaultParamTable[Diag_enum_Powerfail_Z2].DebouncehealCounter = 100;
 801d89e:	4b2a      	ldr	r3, [pc, #168]	; (801d948 <HAL_GPIO_EXTI_Callback+0x28c>)
 801d8a0:	2264      	movs	r2, #100	; 0x64
 801d8a2:	815a      	strh	r2, [r3, #10]
}
 801d8a4:	e077      	b.n	801d996 <HAL_GPIO_EXTI_Callback+0x2da>
	else if((GPIO_Pin == uC_ZC3_Pin)){
 801d8a6:	88fb      	ldrh	r3, [r7, #6]
 801d8a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d8ac:	d173      	bne.n	801d996 <HAL_GPIO_EXTI_Callback+0x2da>
		Appl_u32ACDiag_DiffBtwFallEdgetime_ZC3 = (__HAL_TIM_GET_COUNTER(phtim8))- (0);
 801d8ae:	4b21      	ldr	r3, [pc, #132]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	681b      	ldr	r3, [r3, #0]
 801d8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8b6:	4a27      	ldr	r2, [pc, #156]	; (801d954 <HAL_GPIO_EXTI_Callback+0x298>)
 801d8b8:	6013      	str	r3, [r2, #0]
		if(Appl_diagActiveFault.PhaseReversal == 0){
 801d8ba:	4b21      	ldr	r3, [pc, #132]	; (801d940 <HAL_GPIO_EXTI_Callback+0x284>)
 801d8bc:	79db      	ldrb	r3, [r3, #7]
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d119      	bne.n	801d8f6 <HAL_GPIO_EXTI_Callback+0x23a>
			if(((__HAL_TIM_GET_COUNTER(phtim8)) < 12500) || ((__HAL_TIM_GET_COUNTER(phtim8)) > 14666)){
 801d8c2:	4b1c      	ldr	r3, [pc, #112]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d8c4:	681b      	ldr	r3, [r3, #0]
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8ca:	f243 02d3 	movw	r2, #12499	; 0x30d3
 801d8ce:	4293      	cmp	r3, r2
 801d8d0:	d907      	bls.n	801d8e2 <HAL_GPIO_EXTI_Callback+0x226>
 801d8d2:	4b18      	ldr	r3, [pc, #96]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d8d4:	681b      	ldr	r3, [r3, #0]
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8da:	f643 124a 	movw	r2, #14666	; 0x394a
 801d8de:	4293      	cmp	r3, r2
 801d8e0:	d903      	bls.n	801d8ea <HAL_GPIO_EXTI_Callback+0x22e>
				Appl_u8ACDiagIgnoreThisPulse_ZC3 = 1;
 801d8e2:	4b1d      	ldr	r3, [pc, #116]	; (801d958 <HAL_GPIO_EXTI_Callback+0x29c>)
 801d8e4:	2201      	movs	r2, #1
 801d8e6:	701a      	strb	r2, [r3, #0]
 801d8e8:	e03b      	b.n	801d962 <HAL_GPIO_EXTI_Callback+0x2a6>
				Appl_u8ACDiagIgnoreThisPulse_ZC3 = 0;
 801d8ea:	4b1b      	ldr	r3, [pc, #108]	; (801d958 <HAL_GPIO_EXTI_Callback+0x29c>)
 801d8ec:	2200      	movs	r2, #0
 801d8ee:	701a      	strb	r2, [r3, #0]
				SCRSequenceNumber = 3;
 801d8f0:	2303      	movs	r3, #3
 801d8f2:	73fb      	strb	r3, [r7, #15]
 801d8f4:	e035      	b.n	801d962 <HAL_GPIO_EXTI_Callback+0x2a6>
		else if(Appl_diagActiveFault.PhaseReversal == 1){
 801d8f6:	4b12      	ldr	r3, [pc, #72]	; (801d940 <HAL_GPIO_EXTI_Callback+0x284>)
 801d8f8:	79db      	ldrb	r3, [r3, #7]
 801d8fa:	2b01      	cmp	r3, #1
 801d8fc:	d12e      	bne.n	801d95c <HAL_GPIO_EXTI_Callback+0x2a0>
			if(((__HAL_TIM_GET_COUNTER(phtim8)) < 5500)|| ((__HAL_TIM_GET_COUNTER(phtim8)) > 7333)){
 801d8fe:	4b0d      	ldr	r3, [pc, #52]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d906:	f241 527b 	movw	r2, #5499	; 0x157b
 801d90a:	4293      	cmp	r3, r2
 801d90c:	d907      	bls.n	801d91e <HAL_GPIO_EXTI_Callback+0x262>
 801d90e:	4b09      	ldr	r3, [pc, #36]	; (801d934 <HAL_GPIO_EXTI_Callback+0x278>)
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d916:	f641 42a5 	movw	r2, #7333	; 0x1ca5
 801d91a:	4293      	cmp	r3, r2
 801d91c:	d903      	bls.n	801d926 <HAL_GPIO_EXTI_Callback+0x26a>
				Appl_u8ACDiagIgnoreThisPulse_ZC3 = 1;
 801d91e:	4b0e      	ldr	r3, [pc, #56]	; (801d958 <HAL_GPIO_EXTI_Callback+0x29c>)
 801d920:	2201      	movs	r2, #1
 801d922:	701a      	strb	r2, [r3, #0]
 801d924:	e01d      	b.n	801d962 <HAL_GPIO_EXTI_Callback+0x2a6>
				Appl_u8ACDiagIgnoreThisPulse_ZC3 = 0;
 801d926:	4b0c      	ldr	r3, [pc, #48]	; (801d958 <HAL_GPIO_EXTI_Callback+0x29c>)
 801d928:	2200      	movs	r2, #0
 801d92a:	701a      	strb	r2, [r3, #0]
				SCRSequenceNumber = 2;
 801d92c:	2302      	movs	r3, #2
 801d92e:	73fb      	strb	r3, [r7, #15]
 801d930:	e017      	b.n	801d962 <HAL_GPIO_EXTI_Callback+0x2a6>
 801d932:	bf00      	nop
 801d934:	200000e0 	.word	0x200000e0
 801d938:	20004904 	.word	0x20004904
 801d93c:	200049e2 	.word	0x200049e2
 801d940:	200047b0 	.word	0x200047b0
 801d944:	40020000 	.word	0x40020000
 801d948:	2000000c 	.word	0x2000000c
 801d94c:	20004908 	.word	0x20004908
 801d950:	200049e1 	.word	0x200049e1
 801d954:	20004918 	.word	0x20004918
 801d958:	200049e0 	.word	0x200049e0
			Appl_u8ACDiagIgnoreThisPulse_ZC3 = 1;
 801d95c:	4b10      	ldr	r3, [pc, #64]	; (801d9a0 <HAL_GPIO_EXTI_Callback+0x2e4>)
 801d95e:	2201      	movs	r2, #1
 801d960:	701a      	strb	r2, [r3, #0]
		if(Appl_u8ACDiagIgnoreThisPulse_ZC3 == 0){
 801d962:	4b0f      	ldr	r3, [pc, #60]	; (801d9a0 <HAL_GPIO_EXTI_Callback+0x2e4>)
 801d964:	781b      	ldrb	r3, [r3, #0]
 801d966:	2b00      	cmp	r3, #0
 801d968:	d105      	bne.n	801d976 <HAL_GPIO_EXTI_Callback+0x2ba>
			SCRSequenceNumber = 3;
 801d96a:	2303      	movs	r3, #3
 801d96c:	73fb      	strb	r3, [r7, #15]
			ScheduleTrigger(SCRSequenceNumber);
 801d96e:	7bfb      	ldrb	r3, [r7, #15]
 801d970:	4618      	mov	r0, r3
 801d972:	f000 f819 	bl	801d9a8 <ScheduleTrigger>
		FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter++;
 801d976:	4b0b      	ldr	r3, [pc, #44]	; (801d9a4 <HAL_GPIO_EXTI_Callback+0x2e8>)
 801d978:	8a5b      	ldrh	r3, [r3, #18]
 801d97a:	3301      	adds	r3, #1
 801d97c:	b29a      	uxth	r2, r3
 801d97e:	4b09      	ldr	r3, [pc, #36]	; (801d9a4 <HAL_GPIO_EXTI_Callback+0x2e8>)
 801d980:	825a      	strh	r2, [r3, #18]
		FaultParamTable[Diag_enum_Powerfail_Z3].DebouncefaultCounter = 0;
 801d982:	4b08      	ldr	r3, [pc, #32]	; (801d9a4 <HAL_GPIO_EXTI_Callback+0x2e8>)
 801d984:	2200      	movs	r2, #0
 801d986:	821a      	strh	r2, [r3, #16]
		if(FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter >= 100){
 801d988:	4b06      	ldr	r3, [pc, #24]	; (801d9a4 <HAL_GPIO_EXTI_Callback+0x2e8>)
 801d98a:	8a5b      	ldrh	r3, [r3, #18]
 801d98c:	2b63      	cmp	r3, #99	; 0x63
 801d98e:	d902      	bls.n	801d996 <HAL_GPIO_EXTI_Callback+0x2da>
			FaultParamTable[Diag_enum_Powerfail_Z3].DebouncehealCounter = 100;
 801d990:	4b04      	ldr	r3, [pc, #16]	; (801d9a4 <HAL_GPIO_EXTI_Callback+0x2e8>)
 801d992:	2264      	movs	r2, #100	; 0x64
 801d994:	825a      	strh	r2, [r3, #18]
}
 801d996:	bf00      	nop
 801d998:	3710      	adds	r7, #16
 801d99a:	46bd      	mov	sp, r7
 801d99c:	bd80      	pop	{r7, pc}
 801d99e:	bf00      	nop
 801d9a0:	200049e0 	.word	0x200049e0
 801d9a4:	2000000c 	.word	0x2000000c

0801d9a8 <ScheduleTrigger>:


static inline void ScheduleTrigger(uint8_t Fnclocal_u8SelectedGate){
 801d9a8:	b580      	push	{r7, lr}
 801d9aa:	b082      	sub	sp, #8
 801d9ac:	af00      	add	r7, sp, #0
 801d9ae:	4603      	mov	r3, r0
 801d9b0:	71fb      	strb	r3, [r7, #7]

	if(\
			(Appl_dblPhaseSetValue_degree > SCR_ANGLE_TRIGGER_MIN && Appl_dblPhaseSetValue_degree < SCR_ANGLE_TRIGGER_MAX) && \
 801d9b2:	4b81      	ldr	r3, [pc, #516]	; (801dbb8 <ScheduleTrigger+0x210>)
 801d9b4:	e9d3 0100 	ldrd	r0, r1, [r3]
	if(\
 801d9b8:	f04f 0200 	mov.w	r2, #0
 801d9bc:	4b7f      	ldr	r3, [pc, #508]	; (801dbbc <ScheduleTrigger+0x214>)
 801d9be:	f7f2 ffdb 	bl	8010978 <__aeabi_dcmpgt>
 801d9c2:	4603      	mov	r3, r0
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	f000 810d 	beq.w	801dbe4 <ScheduleTrigger+0x23c>
			(Appl_dblPhaseSetValue_degree > SCR_ANGLE_TRIGGER_MIN && Appl_dblPhaseSetValue_degree < SCR_ANGLE_TRIGGER_MAX) && \
 801d9ca:	4b7b      	ldr	r3, [pc, #492]	; (801dbb8 <ScheduleTrigger+0x210>)
 801d9cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d9d0:	f04f 0200 	mov.w	r2, #0
 801d9d4:	4b7a      	ldr	r3, [pc, #488]	; (801dbc0 <ScheduleTrigger+0x218>)
 801d9d6:	f7f2 ffb1 	bl	801093c <__aeabi_dcmplt>
 801d9da:	4603      	mov	r3, r0
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	f000 8101 	beq.w	801dbe4 <ScheduleTrigger+0x23c>
			(Appl_diagActiveFault.PowerFail_Z1 == 0) && \
 801d9e2:	4b78      	ldr	r3, [pc, #480]	; (801dbc4 <ScheduleTrigger+0x21c>)
 801d9e4:	781b      	ldrb	r3, [r3, #0]
			(Appl_dblPhaseSetValue_degree > SCR_ANGLE_TRIGGER_MIN && Appl_dblPhaseSetValue_degree < SCR_ANGLE_TRIGGER_MAX) && \
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	f040 80fc 	bne.w	801dbe4 <ScheduleTrigger+0x23c>
			(Appl_diagActiveFault.PowerFail_Z2 == 0) && \
 801d9ec:	4b75      	ldr	r3, [pc, #468]	; (801dbc4 <ScheduleTrigger+0x21c>)
 801d9ee:	785b      	ldrb	r3, [r3, #1]
			(Appl_diagActiveFault.PowerFail_Z1 == 0) && \
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	f040 80f7 	bne.w	801dbe4 <ScheduleTrigger+0x23c>
			(Appl_diagActiveFault.PowerFail_Z3 == 0) && \
 801d9f6:	4b73      	ldr	r3, [pc, #460]	; (801dbc4 <ScheduleTrigger+0x21c>)
 801d9f8:	789b      	ldrb	r3, [r3, #2]
			(Appl_diagActiveFault.PowerFail_Z2 == 0) && \
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	f040 80f2 	bne.w	801dbe4 <ScheduleTrigger+0x23c>
			(Appl_diagActiveFault.OverCurrent == 0) && \
 801da00:	4b70      	ldr	r3, [pc, #448]	; (801dbc4 <ScheduleTrigger+0x21c>)
 801da02:	791b      	ldrb	r3, [r3, #4]
			(Appl_diagActiveFault.PowerFail_Z3 == 0) && \
 801da04:	2b00      	cmp	r3, #0
 801da06:	f040 80ed 	bne.w	801dbe4 <ScheduleTrigger+0x23c>
			((SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow) || \
 801da0a:	4b6f      	ldr	r3, [pc, #444]	; (801dbc8 <ScheduleTrigger+0x220>)
 801da0c:	781b      	ldrb	r3, [r3, #0]
 801da0e:	b2db      	uxtb	r3, r3
			(Appl_diagActiveFault.OverCurrent == 0) && \
 801da10:	2b0b      	cmp	r3, #11
 801da12:	d005      	beq.n	801da20 <ScheduleTrigger+0x78>
					(SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_StableVoltagefloat))
 801da14:	4b6c      	ldr	r3, [pc, #432]	; (801dbc8 <ScheduleTrigger+0x220>)
 801da16:	781b      	ldrb	r3, [r3, #0]
 801da18:	b2db      	uxtb	r3, r3
			((SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow) || \
 801da1a:	2b0c      	cmp	r3, #12
 801da1c:	f040 80e2 	bne.w	801dbe4 <ScheduleTrigger+0x23c>
	){
		if(Fnclocal_u8SelectedGate == 1 && SM_ApplParam.u8ApplSCRTrggerOffG1 == 0){
 801da20:	79fb      	ldrb	r3, [r7, #7]
 801da22:	2b01      	cmp	r3, #1
 801da24:	d13d      	bne.n	801daa2 <ScheduleTrigger+0xfa>
 801da26:	4b69      	ldr	r3, [pc, #420]	; (801dbcc <ScheduleTrigger+0x224>)
 801da28:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d138      	bne.n	801daa2 <ScheduleTrigger+0xfa>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801da30:	4b61      	ldr	r3, [pc, #388]	; (801dbb8 <ScheduleTrigger+0x210>)
 801da32:	e9d3 0100 	ldrd	r0, r1, [r3]
 801da36:	a35e      	add	r3, pc, #376	; (adr r3, 801dbb0 <ScheduleTrigger+0x208>)
 801da38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da3c:	f7f2 fd0c 	bl	8010458 <__aeabi_dmul>
 801da40:	4602      	mov	r2, r0
 801da42:	460b      	mov	r3, r1
 801da44:	4610      	mov	r0, r2
 801da46:	4619      	mov	r1, r3
 801da48:	f7f2 ffc8 	bl	80109dc <__aeabi_d2uiz>
 801da4c:	4603      	mov	r3, r0
 801da4e:	4a60      	ldr	r2, [pc, #384]	; (801dbd0 <ScheduleTrigger+0x228>)
 801da50:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801da52:	4a60      	ldr	r2, [pc, #384]	; (801dbd4 <ScheduleTrigger+0x22c>)
 801da54:	79fb      	ldrb	r3, [r7, #7]
 801da56:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim5,0);
 801da58:	4b5f      	ldr	r3, [pc, #380]	; (801dbd8 <ScheduleTrigger+0x230>)
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	681b      	ldr	r3, [r3, #0]
 801da5e:	2200      	movs	r2, #0
 801da60:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim5,Appl_u32AngleInTime);
 801da62:	4b5d      	ldr	r3, [pc, #372]	; (801dbd8 <ScheduleTrigger+0x230>)
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	681b      	ldr	r3, [r3, #0]
 801da68:	4a59      	ldr	r2, [pc, #356]	; (801dbd0 <ScheduleTrigger+0x228>)
 801da6a:	6812      	ldr	r2, [r2, #0]
 801da6c:	62da      	str	r2, [r3, #44]	; 0x2c
 801da6e:	4b5a      	ldr	r3, [pc, #360]	; (801dbd8 <ScheduleTrigger+0x230>)
 801da70:	681b      	ldr	r3, [r3, #0]
 801da72:	4a57      	ldr	r2, [pc, #348]	; (801dbd0 <ScheduleTrigger+0x228>)
 801da74:	6812      	ldr	r2, [r2, #0]
 801da76:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim5, TIM_IT_UPDATE);
 801da78:	4b57      	ldr	r3, [pc, #348]	; (801dbd8 <ScheduleTrigger+0x230>)
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	68da      	ldr	r2, [r3, #12]
 801da80:	4b55      	ldr	r3, [pc, #340]	; (801dbd8 <ScheduleTrigger+0x230>)
 801da82:	681b      	ldr	r3, [r3, #0]
 801da84:	681b      	ldr	r3, [r3, #0]
 801da86:	f042 0201 	orr.w	r2, r2, #1
 801da8a:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim5);
 801da8c:	4b52      	ldr	r3, [pc, #328]	; (801dbd8 <ScheduleTrigger+0x230>)
 801da8e:	681b      	ldr	r3, [r3, #0]
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	681a      	ldr	r2, [r3, #0]
 801da94:	4b50      	ldr	r3, [pc, #320]	; (801dbd8 <ScheduleTrigger+0x230>)
 801da96:	681b      	ldr	r3, [r3, #0]
 801da98:	681b      	ldr	r3, [r3, #0]
 801da9a:	f042 0201 	orr.w	r2, r2, #1
 801da9e:	601a      	str	r2, [r3, #0]
 801daa0:	e083      	b.n	801dbaa <ScheduleTrigger+0x202>
		}
		else if(Fnclocal_u8SelectedGate == 2 && SM_ApplParam.u8ApplSCRTrggerOffG2 == 0){
 801daa2:	79fb      	ldrb	r3, [r7, #7]
 801daa4:	2b02      	cmp	r3, #2
 801daa6:	d13d      	bne.n	801db24 <ScheduleTrigger+0x17c>
 801daa8:	4b48      	ldr	r3, [pc, #288]	; (801dbcc <ScheduleTrigger+0x224>)
 801daaa:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d138      	bne.n	801db24 <ScheduleTrigger+0x17c>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801dab2:	4b41      	ldr	r3, [pc, #260]	; (801dbb8 <ScheduleTrigger+0x210>)
 801dab4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dab8:	a33d      	add	r3, pc, #244	; (adr r3, 801dbb0 <ScheduleTrigger+0x208>)
 801daba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dabe:	f7f2 fccb 	bl	8010458 <__aeabi_dmul>
 801dac2:	4602      	mov	r2, r0
 801dac4:	460b      	mov	r3, r1
 801dac6:	4610      	mov	r0, r2
 801dac8:	4619      	mov	r1, r3
 801daca:	f7f2 ff87 	bl	80109dc <__aeabi_d2uiz>
 801dace:	4603      	mov	r3, r0
 801dad0:	4a3f      	ldr	r2, [pc, #252]	; (801dbd0 <ScheduleTrigger+0x228>)
 801dad2:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801dad4:	4a3f      	ldr	r2, [pc, #252]	; (801dbd4 <ScheduleTrigger+0x22c>)
 801dad6:	79fb      	ldrb	r3, [r7, #7]
 801dad8:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim6,0);
 801dada:	4b40      	ldr	r3, [pc, #256]	; (801dbdc <ScheduleTrigger+0x234>)
 801dadc:	681b      	ldr	r3, [r3, #0]
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	2200      	movs	r2, #0
 801dae2:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim6,Appl_u32AngleInTime);
 801dae4:	4b3d      	ldr	r3, [pc, #244]	; (801dbdc <ScheduleTrigger+0x234>)
 801dae6:	681b      	ldr	r3, [r3, #0]
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	4a39      	ldr	r2, [pc, #228]	; (801dbd0 <ScheduleTrigger+0x228>)
 801daec:	6812      	ldr	r2, [r2, #0]
 801daee:	62da      	str	r2, [r3, #44]	; 0x2c
 801daf0:	4b3a      	ldr	r3, [pc, #232]	; (801dbdc <ScheduleTrigger+0x234>)
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	4a36      	ldr	r2, [pc, #216]	; (801dbd0 <ScheduleTrigger+0x228>)
 801daf6:	6812      	ldr	r2, [r2, #0]
 801daf8:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim6, TIM_IT_UPDATE);
 801dafa:	4b38      	ldr	r3, [pc, #224]	; (801dbdc <ScheduleTrigger+0x234>)
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	68da      	ldr	r2, [r3, #12]
 801db02:	4b36      	ldr	r3, [pc, #216]	; (801dbdc <ScheduleTrigger+0x234>)
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	f042 0201 	orr.w	r2, r2, #1
 801db0c:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim6);
 801db0e:	4b33      	ldr	r3, [pc, #204]	; (801dbdc <ScheduleTrigger+0x234>)
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	681a      	ldr	r2, [r3, #0]
 801db16:	4b31      	ldr	r3, [pc, #196]	; (801dbdc <ScheduleTrigger+0x234>)
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	681b      	ldr	r3, [r3, #0]
 801db1c:	f042 0201 	orr.w	r2, r2, #1
 801db20:	601a      	str	r2, [r3, #0]
 801db22:	e042      	b.n	801dbaa <ScheduleTrigger+0x202>
		}
		else if(Fnclocal_u8SelectedGate == 3 && SM_ApplParam.u8ApplSCRTrggerOffG3 == 0){
 801db24:	79fb      	ldrb	r3, [r7, #7]
 801db26:	2b03      	cmp	r3, #3
 801db28:	f040 816b 	bne.w	801de02 <ScheduleTrigger+0x45a>
 801db2c:	4b27      	ldr	r3, [pc, #156]	; (801dbcc <ScheduleTrigger+0x224>)
 801db2e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801db32:	2b00      	cmp	r3, #0
 801db34:	f040 8165 	bne.w	801de02 <ScheduleTrigger+0x45a>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801db38:	4b1f      	ldr	r3, [pc, #124]	; (801dbb8 <ScheduleTrigger+0x210>)
 801db3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801db3e:	a31c      	add	r3, pc, #112	; (adr r3, 801dbb0 <ScheduleTrigger+0x208>)
 801db40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db44:	f7f2 fc88 	bl	8010458 <__aeabi_dmul>
 801db48:	4602      	mov	r2, r0
 801db4a:	460b      	mov	r3, r1
 801db4c:	4610      	mov	r0, r2
 801db4e:	4619      	mov	r1, r3
 801db50:	f7f2 ff44 	bl	80109dc <__aeabi_d2uiz>
 801db54:	4603      	mov	r3, r0
 801db56:	4a1e      	ldr	r2, [pc, #120]	; (801dbd0 <ScheduleTrigger+0x228>)
 801db58:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801db5a:	4a1e      	ldr	r2, [pc, #120]	; (801dbd4 <ScheduleTrigger+0x22c>)
 801db5c:	79fb      	ldrb	r3, [r7, #7]
 801db5e:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim7,0);
 801db60:	4b1f      	ldr	r3, [pc, #124]	; (801dbe0 <ScheduleTrigger+0x238>)
 801db62:	681b      	ldr	r3, [r3, #0]
 801db64:	681b      	ldr	r3, [r3, #0]
 801db66:	2200      	movs	r2, #0
 801db68:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim7,Appl_u32AngleInTime);
 801db6a:	4b1d      	ldr	r3, [pc, #116]	; (801dbe0 <ScheduleTrigger+0x238>)
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	4a17      	ldr	r2, [pc, #92]	; (801dbd0 <ScheduleTrigger+0x228>)
 801db72:	6812      	ldr	r2, [r2, #0]
 801db74:	62da      	str	r2, [r3, #44]	; 0x2c
 801db76:	4b1a      	ldr	r3, [pc, #104]	; (801dbe0 <ScheduleTrigger+0x238>)
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	4a15      	ldr	r2, [pc, #84]	; (801dbd0 <ScheduleTrigger+0x228>)
 801db7c:	6812      	ldr	r2, [r2, #0]
 801db7e:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim7, TIM_IT_UPDATE);
 801db80:	4b17      	ldr	r3, [pc, #92]	; (801dbe0 <ScheduleTrigger+0x238>)
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	68da      	ldr	r2, [r3, #12]
 801db88:	4b15      	ldr	r3, [pc, #84]	; (801dbe0 <ScheduleTrigger+0x238>)
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	f042 0201 	orr.w	r2, r2, #1
 801db92:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim7);
 801db94:	4b12      	ldr	r3, [pc, #72]	; (801dbe0 <ScheduleTrigger+0x238>)
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	681a      	ldr	r2, [r3, #0]
 801db9c:	4b10      	ldr	r3, [pc, #64]	; (801dbe0 <ScheduleTrigger+0x238>)
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	f042 0201 	orr.w	r2, r2, #1
 801dba6:	601a      	str	r2, [r3, #0]
		if(Fnclocal_u8SelectedGate == 1 && SM_ApplParam.u8ApplSCRTrggerOffG1 == 0){
 801dba8:	e12b      	b.n	801de02 <ScheduleTrigger+0x45a>
 801dbaa:	e12a      	b.n	801de02 <ScheduleTrigger+0x45a>
 801dbac:	f3af 8000 	nop.w
 801dbb0:	00000000 	.word	0x00000000
 801dbb4:	404bc000 	.word	0x404bc000
 801dbb8:	200005d8 	.word	0x200005d8
 801dbbc:	40490000 	.word	0x40490000
 801dbc0:	40690000 	.word	0x40690000
 801dbc4:	200047b0 	.word	0x200047b0
 801dbc8:	2000490c 	.word	0x2000490c
 801dbcc:	20004974 	.word	0x20004974
 801dbd0:	20004928 	.word	0x20004928
 801dbd4:	2000492e 	.word	0x2000492e
 801dbd8:	200000d4 	.word	0x200000d4
 801dbdc:	200000d8 	.word	0x200000d8
 801dbe0:	200000dc 	.word	0x200000dc
		}
	}
	else if(\
			(Appl_dblPhaseSetValue_degree >0 && Appl_dblPhaseSetValue_degree< SCR_ANGLE_TRIGGER_MAX) && \
 801dbe4:	4b8c      	ldr	r3, [pc, #560]	; (801de18 <ScheduleTrigger+0x470>)
 801dbe6:	e9d3 0100 	ldrd	r0, r1, [r3]
	else if(\
 801dbea:	f04f 0200 	mov.w	r2, #0
 801dbee:	f04f 0300 	mov.w	r3, #0
 801dbf2:	f7f2 fec1 	bl	8010978 <__aeabi_dcmpgt>
 801dbf6:	4603      	mov	r3, r0
 801dbf8:	2b00      	cmp	r3, #0
 801dbfa:	f000 80e5 	beq.w	801ddc8 <ScheduleTrigger+0x420>
			(Appl_dblPhaseSetValue_degree >0 && Appl_dblPhaseSetValue_degree< SCR_ANGLE_TRIGGER_MAX) && \
 801dbfe:	4b86      	ldr	r3, [pc, #536]	; (801de18 <ScheduleTrigger+0x470>)
 801dc00:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dc04:	f04f 0200 	mov.w	r2, #0
 801dc08:	4b84      	ldr	r3, [pc, #528]	; (801de1c <ScheduleTrigger+0x474>)
 801dc0a:	f7f2 fe97 	bl	801093c <__aeabi_dcmplt>
 801dc0e:	4603      	mov	r3, r0
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	f000 80d9 	beq.w	801ddc8 <ScheduleTrigger+0x420>
			(Appl_diagActiveFault.PowerFail_Z1 == 0) && \
 801dc16:	4b82      	ldr	r3, [pc, #520]	; (801de20 <ScheduleTrigger+0x478>)
 801dc18:	781b      	ldrb	r3, [r3, #0]
			(Appl_dblPhaseSetValue_degree >0 && Appl_dblPhaseSetValue_degree< SCR_ANGLE_TRIGGER_MAX) && \
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	f040 80d4 	bne.w	801ddc8 <ScheduleTrigger+0x420>
			(Appl_diagActiveFault.PowerFail_Z2 == 0) && \
 801dc20:	4b7f      	ldr	r3, [pc, #508]	; (801de20 <ScheduleTrigger+0x478>)
 801dc22:	785b      	ldrb	r3, [r3, #1]
			(Appl_diagActiveFault.PowerFail_Z1 == 0) && \
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	f040 80cf 	bne.w	801ddc8 <ScheduleTrigger+0x420>
			(Appl_diagActiveFault.PowerFail_Z3 == 0) && \
 801dc2a:	4b7d      	ldr	r3, [pc, #500]	; (801de20 <ScheduleTrigger+0x478>)
 801dc2c:	789b      	ldrb	r3, [r3, #2]
			(Appl_diagActiveFault.PowerFail_Z2 == 0) && \
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	f040 80ca 	bne.w	801ddc8 <ScheduleTrigger+0x420>
			((SM_enumECUState == SM_enum_ECU_VishwatestMode))
 801dc34:	4b7b      	ldr	r3, [pc, #492]	; (801de24 <ScheduleTrigger+0x47c>)
 801dc36:	781b      	ldrb	r3, [r3, #0]
 801dc38:	b2db      	uxtb	r3, r3
			(Appl_diagActiveFault.PowerFail_Z3 == 0) && \
 801dc3a:	2b11      	cmp	r3, #17
 801dc3c:	f040 80c4 	bne.w	801ddc8 <ScheduleTrigger+0x420>
	){
		if(Fnclocal_u8SelectedGate == 1 && SM_ApplParam.u8ApplSCRTrggerOffG1 == 0){
 801dc40:	79fb      	ldrb	r3, [r7, #7]
 801dc42:	2b01      	cmp	r3, #1
 801dc44:	d13d      	bne.n	801dcc2 <ScheduleTrigger+0x31a>
 801dc46:	4b78      	ldr	r3, [pc, #480]	; (801de28 <ScheduleTrigger+0x480>)
 801dc48:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d138      	bne.n	801dcc2 <ScheduleTrigger+0x31a>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801dc50:	4b71      	ldr	r3, [pc, #452]	; (801de18 <ScheduleTrigger+0x470>)
 801dc52:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dc56:	a36e      	add	r3, pc, #440	; (adr r3, 801de10 <ScheduleTrigger+0x468>)
 801dc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc5c:	f7f2 fbfc 	bl	8010458 <__aeabi_dmul>
 801dc60:	4602      	mov	r2, r0
 801dc62:	460b      	mov	r3, r1
 801dc64:	4610      	mov	r0, r2
 801dc66:	4619      	mov	r1, r3
 801dc68:	f7f2 feb8 	bl	80109dc <__aeabi_d2uiz>
 801dc6c:	4603      	mov	r3, r0
 801dc6e:	4a6f      	ldr	r2, [pc, #444]	; (801de2c <ScheduleTrigger+0x484>)
 801dc70:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801dc72:	4a6f      	ldr	r2, [pc, #444]	; (801de30 <ScheduleTrigger+0x488>)
 801dc74:	79fb      	ldrb	r3, [r7, #7]
 801dc76:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim5,0);
 801dc78:	4b6e      	ldr	r3, [pc, #440]	; (801de34 <ScheduleTrigger+0x48c>)
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	681b      	ldr	r3, [r3, #0]
 801dc7e:	2200      	movs	r2, #0
 801dc80:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim5,Appl_u32AngleInTime);
 801dc82:	4b6c      	ldr	r3, [pc, #432]	; (801de34 <ScheduleTrigger+0x48c>)
 801dc84:	681b      	ldr	r3, [r3, #0]
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	4a68      	ldr	r2, [pc, #416]	; (801de2c <ScheduleTrigger+0x484>)
 801dc8a:	6812      	ldr	r2, [r2, #0]
 801dc8c:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc8e:	4b69      	ldr	r3, [pc, #420]	; (801de34 <ScheduleTrigger+0x48c>)
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	4a66      	ldr	r2, [pc, #408]	; (801de2c <ScheduleTrigger+0x484>)
 801dc94:	6812      	ldr	r2, [r2, #0]
 801dc96:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim5, TIM_IT_UPDATE);
 801dc98:	4b66      	ldr	r3, [pc, #408]	; (801de34 <ScheduleTrigger+0x48c>)
 801dc9a:	681b      	ldr	r3, [r3, #0]
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	68da      	ldr	r2, [r3, #12]
 801dca0:	4b64      	ldr	r3, [pc, #400]	; (801de34 <ScheduleTrigger+0x48c>)
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	f042 0201 	orr.w	r2, r2, #1
 801dcaa:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim5);
 801dcac:	4b61      	ldr	r3, [pc, #388]	; (801de34 <ScheduleTrigger+0x48c>)
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	681a      	ldr	r2, [r3, #0]
 801dcb4:	4b5f      	ldr	r3, [pc, #380]	; (801de34 <ScheduleTrigger+0x48c>)
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	f042 0201 	orr.w	r2, r2, #1
 801dcbe:	601a      	str	r2, [r3, #0]
 801dcc0:	e081      	b.n	801ddc6 <ScheduleTrigger+0x41e>
		}
		else if(Fnclocal_u8SelectedGate == 2 && SM_ApplParam.u8ApplSCRTrggerOffG2 == 0){
 801dcc2:	79fb      	ldrb	r3, [r7, #7]
 801dcc4:	2b02      	cmp	r3, #2
 801dcc6:	d13d      	bne.n	801dd44 <ScheduleTrigger+0x39c>
 801dcc8:	4b57      	ldr	r3, [pc, #348]	; (801de28 <ScheduleTrigger+0x480>)
 801dcca:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d138      	bne.n	801dd44 <ScheduleTrigger+0x39c>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801dcd2:	4b51      	ldr	r3, [pc, #324]	; (801de18 <ScheduleTrigger+0x470>)
 801dcd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dcd8:	a34d      	add	r3, pc, #308	; (adr r3, 801de10 <ScheduleTrigger+0x468>)
 801dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcde:	f7f2 fbbb 	bl	8010458 <__aeabi_dmul>
 801dce2:	4602      	mov	r2, r0
 801dce4:	460b      	mov	r3, r1
 801dce6:	4610      	mov	r0, r2
 801dce8:	4619      	mov	r1, r3
 801dcea:	f7f2 fe77 	bl	80109dc <__aeabi_d2uiz>
 801dcee:	4603      	mov	r3, r0
 801dcf0:	4a4e      	ldr	r2, [pc, #312]	; (801de2c <ScheduleTrigger+0x484>)
 801dcf2:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801dcf4:	4a4e      	ldr	r2, [pc, #312]	; (801de30 <ScheduleTrigger+0x488>)
 801dcf6:	79fb      	ldrb	r3, [r7, #7]
 801dcf8:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim6,0);
 801dcfa:	4b4f      	ldr	r3, [pc, #316]	; (801de38 <ScheduleTrigger+0x490>)
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	2200      	movs	r2, #0
 801dd02:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim6,Appl_u32AngleInTime);
 801dd04:	4b4c      	ldr	r3, [pc, #304]	; (801de38 <ScheduleTrigger+0x490>)
 801dd06:	681b      	ldr	r3, [r3, #0]
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	4a48      	ldr	r2, [pc, #288]	; (801de2c <ScheduleTrigger+0x484>)
 801dd0c:	6812      	ldr	r2, [r2, #0]
 801dd0e:	62da      	str	r2, [r3, #44]	; 0x2c
 801dd10:	4b49      	ldr	r3, [pc, #292]	; (801de38 <ScheduleTrigger+0x490>)
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	4a45      	ldr	r2, [pc, #276]	; (801de2c <ScheduleTrigger+0x484>)
 801dd16:	6812      	ldr	r2, [r2, #0]
 801dd18:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim6, TIM_IT_UPDATE);
 801dd1a:	4b47      	ldr	r3, [pc, #284]	; (801de38 <ScheduleTrigger+0x490>)
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	68da      	ldr	r2, [r3, #12]
 801dd22:	4b45      	ldr	r3, [pc, #276]	; (801de38 <ScheduleTrigger+0x490>)
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	681b      	ldr	r3, [r3, #0]
 801dd28:	f042 0201 	orr.w	r2, r2, #1
 801dd2c:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim6);
 801dd2e:	4b42      	ldr	r3, [pc, #264]	; (801de38 <ScheduleTrigger+0x490>)
 801dd30:	681b      	ldr	r3, [r3, #0]
 801dd32:	681b      	ldr	r3, [r3, #0]
 801dd34:	681a      	ldr	r2, [r3, #0]
 801dd36:	4b40      	ldr	r3, [pc, #256]	; (801de38 <ScheduleTrigger+0x490>)
 801dd38:	681b      	ldr	r3, [r3, #0]
 801dd3a:	681b      	ldr	r3, [r3, #0]
 801dd3c:	f042 0201 	orr.w	r2, r2, #1
 801dd40:	601a      	str	r2, [r3, #0]
 801dd42:	e040      	b.n	801ddc6 <ScheduleTrigger+0x41e>
		}
		else if(Fnclocal_u8SelectedGate == 3 && SM_ApplParam.u8ApplSCRTrggerOffG3 == 0){
 801dd44:	79fb      	ldrb	r3, [r7, #7]
 801dd46:	2b03      	cmp	r3, #3
 801dd48:	d15d      	bne.n	801de06 <ScheduleTrigger+0x45e>
 801dd4a:	4b37      	ldr	r3, [pc, #220]	; (801de28 <ScheduleTrigger+0x480>)
 801dd4c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d158      	bne.n	801de06 <ScheduleTrigger+0x45e>
			Appl_u32AngleInTime = Appl_dblPhaseSetValue_degree*55.5;
 801dd54:	4b30      	ldr	r3, [pc, #192]	; (801de18 <ScheduleTrigger+0x470>)
 801dd56:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dd5a:	a32d      	add	r3, pc, #180	; (adr r3, 801de10 <ScheduleTrigger+0x468>)
 801dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd60:	f7f2 fb7a 	bl	8010458 <__aeabi_dmul>
 801dd64:	4602      	mov	r2, r0
 801dd66:	460b      	mov	r3, r1
 801dd68:	4610      	mov	r0, r2
 801dd6a:	4619      	mov	r1, r3
 801dd6c:	f7f2 fe36 	bl	80109dc <__aeabi_d2uiz>
 801dd70:	4603      	mov	r3, r0
 801dd72:	4a2e      	ldr	r2, [pc, #184]	; (801de2c <ScheduleTrigger+0x484>)
 801dd74:	6013      	str	r3, [r2, #0]
			Appl_u8SelectedGate = Fnclocal_u8SelectedGate;
 801dd76:	4a2e      	ldr	r2, [pc, #184]	; (801de30 <ScheduleTrigger+0x488>)
 801dd78:	79fb      	ldrb	r3, [r7, #7]
 801dd7a:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(phtim7,0);
 801dd7c:	4b2f      	ldr	r3, [pc, #188]	; (801de3c <ScheduleTrigger+0x494>)
 801dd7e:	681b      	ldr	r3, [r3, #0]
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	2200      	movs	r2, #0
 801dd84:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(phtim7,Appl_u32AngleInTime);
 801dd86:	4b2d      	ldr	r3, [pc, #180]	; (801de3c <ScheduleTrigger+0x494>)
 801dd88:	681b      	ldr	r3, [r3, #0]
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	4a27      	ldr	r2, [pc, #156]	; (801de2c <ScheduleTrigger+0x484>)
 801dd8e:	6812      	ldr	r2, [r2, #0]
 801dd90:	62da      	str	r2, [r3, #44]	; 0x2c
 801dd92:	4b2a      	ldr	r3, [pc, #168]	; (801de3c <ScheduleTrigger+0x494>)
 801dd94:	681b      	ldr	r3, [r3, #0]
 801dd96:	4a25      	ldr	r2, [pc, #148]	; (801de2c <ScheduleTrigger+0x484>)
 801dd98:	6812      	ldr	r2, [r2, #0]
 801dd9a:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE_IT(phtim7, TIM_IT_UPDATE);
 801dd9c:	4b27      	ldr	r3, [pc, #156]	; (801de3c <ScheduleTrigger+0x494>)
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	68da      	ldr	r2, [r3, #12]
 801dda4:	4b25      	ldr	r3, [pc, #148]	; (801de3c <ScheduleTrigger+0x494>)
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	f042 0201 	orr.w	r2, r2, #1
 801ddae:	60da      	str	r2, [r3, #12]
			__HAL_TIM_ENABLE(phtim7);
 801ddb0:	4b22      	ldr	r3, [pc, #136]	; (801de3c <ScheduleTrigger+0x494>)
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	681b      	ldr	r3, [r3, #0]
 801ddb6:	681a      	ldr	r2, [r3, #0]
 801ddb8:	4b20      	ldr	r3, [pc, #128]	; (801de3c <ScheduleTrigger+0x494>)
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	f042 0201 	orr.w	r2, r2, #1
 801ddc2:	601a      	str	r2, [r3, #0]
		if(Fnclocal_u8SelectedGate == 1 && SM_ApplParam.u8ApplSCRTrggerOffG1 == 0){
 801ddc4:	e01f      	b.n	801de06 <ScheduleTrigger+0x45e>
 801ddc6:	e01e      	b.n	801de06 <ScheduleTrigger+0x45e>
		}

	}
	else{
		output = 0;
 801ddc8:	4b1d      	ldr	r3, [pc, #116]	; (801de40 <ScheduleTrigger+0x498>)
 801ddca:	f04f 0200 	mov.w	r2, #0
 801ddce:	601a      	str	r2, [r3, #0]
		Appl_dblPhaseSetValue_degree = 0;
 801ddd0:	4911      	ldr	r1, [pc, #68]	; (801de18 <ScheduleTrigger+0x470>)
 801ddd2:	f04f 0200 	mov.w	r2, #0
 801ddd6:	f04f 0300 	mov.w	r3, #0
 801ddda:	e9c1 2300 	strd	r2, r3, [r1]
		G1T_OFF();
 801ddde:	2201      	movs	r2, #1
 801dde0:	2120      	movs	r1, #32
 801dde2:	4818      	ldr	r0, [pc, #96]	; (801de44 <ScheduleTrigger+0x49c>)
 801dde4:	f7f5 ff0a 	bl	8013bfc <HAL_GPIO_WritePin>
		G2T_OFF();
 801dde8:	2201      	movs	r2, #1
 801ddea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801ddee:	4816      	ldr	r0, [pc, #88]	; (801de48 <ScheduleTrigger+0x4a0>)
 801ddf0:	f7f5 ff04 	bl	8013bfc <HAL_GPIO_WritePin>
		G3T_OFF();
 801ddf4:	2201      	movs	r2, #1
 801ddf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801ddfa:	4813      	ldr	r0, [pc, #76]	; (801de48 <ScheduleTrigger+0x4a0>)
 801ddfc:	f7f5 fefe 	bl	8013bfc <HAL_GPIO_WritePin>
	}
}
 801de00:	e002      	b.n	801de08 <ScheduleTrigger+0x460>
		if(Fnclocal_u8SelectedGate == 1 && SM_ApplParam.u8ApplSCRTrggerOffG1 == 0){
 801de02:	bf00      	nop
 801de04:	e000      	b.n	801de08 <ScheduleTrigger+0x460>
		if(Fnclocal_u8SelectedGate == 1 && SM_ApplParam.u8ApplSCRTrggerOffG1 == 0){
 801de06:	bf00      	nop
}
 801de08:	bf00      	nop
 801de0a:	3708      	adds	r7, #8
 801de0c:	46bd      	mov	sp, r7
 801de0e:	bd80      	pop	{r7, pc}
 801de10:	00000000 	.word	0x00000000
 801de14:	404bc000 	.word	0x404bc000
 801de18:	200005d8 	.word	0x200005d8
 801de1c:	40690000 	.word	0x40690000
 801de20:	200047b0 	.word	0x200047b0
 801de24:	2000490c 	.word	0x2000490c
 801de28:	20004974 	.word	0x20004974
 801de2c:	20004928 	.word	0x20004928
 801de30:	2000492e 	.word	0x2000492e
 801de34:	200000d4 	.word	0x200000d4
 801de38:	200000d8 	.word	0x200000d8
 801de3c:	200000dc 	.word	0x200000dc
 801de40:	2000491c 	.word	0x2000491c
 801de44:	40020400 	.word	0x40020400
 801de48:	40020000 	.word	0x40020000

0801de4c <TIM5_Callback>:


void TIM5_Callback(void){
 801de4c:	b580      	push	{r7, lr}
 801de4e:	af00      	add	r7, sp, #0
	/*Test Code*/
	/*Vishwesh:
	 * Here my strategy is, TIM5_Callback() is called only when Gate1 Trigger is scheduled.
	 * Its just a meeter of time a trigger pulse is served
	 */
	if (__HAL_TIM_GET_FLAG(phtim5, TIM_FLAG_UPDATE) != RESET)
 801de50:	4b29      	ldr	r3, [pc, #164]	; (801def8 <TIM5_Callback+0xac>)
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	691b      	ldr	r3, [r3, #16]
 801de58:	f003 0301 	and.w	r3, r3, #1
 801de5c:	2b01      	cmp	r3, #1
 801de5e:	d148      	bne.n	801def2 <TIM5_Callback+0xa6>
	{
		if (__HAL_TIM_GET_IT_SOURCE(phtim5, TIM_IT_UPDATE) != RESET)
 801de60:	4b25      	ldr	r3, [pc, #148]	; (801def8 <TIM5_Callback+0xac>)
 801de62:	681b      	ldr	r3, [r3, #0]
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	68db      	ldr	r3, [r3, #12]
 801de68:	f003 0301 	and.w	r3, r3, #1
 801de6c:	2b01      	cmp	r3, #1
 801de6e:	d140      	bne.n	801def2 <TIM5_Callback+0xa6>
		{
			__HAL_TIM_CLEAR_IT(phtim5, TIM_IT_UPDATE);
 801de70:	4b21      	ldr	r3, [pc, #132]	; (801def8 <TIM5_Callback+0xac>)
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	681b      	ldr	r3, [r3, #0]
 801de76:	f06f 0201 	mvn.w	r2, #1
 801de7a:	611a      	str	r2, [r3, #16]
			__HAL_TIM_DISABLE_IT(phtim5,TIM_IT_UPDATE);
 801de7c:	4b1e      	ldr	r3, [pc, #120]	; (801def8 <TIM5_Callback+0xac>)
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	681b      	ldr	r3, [r3, #0]
 801de82:	68da      	ldr	r2, [r3, #12]
 801de84:	4b1c      	ldr	r3, [pc, #112]	; (801def8 <TIM5_Callback+0xac>)
 801de86:	681b      	ldr	r3, [r3, #0]
 801de88:	681b      	ldr	r3, [r3, #0]
 801de8a:	f022 0201 	bic.w	r2, r2, #1
 801de8e:	60da      	str	r2, [r3, #12]
			__HAL_TIM_DISABLE(phtim5);
 801de90:	4b19      	ldr	r3, [pc, #100]	; (801def8 <TIM5_Callback+0xac>)
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	6a1a      	ldr	r2, [r3, #32]
 801de98:	f241 1311 	movw	r3, #4369	; 0x1111
 801de9c:	4013      	ands	r3, r2
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d112      	bne.n	801dec8 <TIM5_Callback+0x7c>
 801dea2:	4b15      	ldr	r3, [pc, #84]	; (801def8 <TIM5_Callback+0xac>)
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	6a1a      	ldr	r2, [r3, #32]
 801deaa:	f240 4344 	movw	r3, #1092	; 0x444
 801deae:	4013      	ands	r3, r2
 801deb0:	2b00      	cmp	r3, #0
 801deb2:	d109      	bne.n	801dec8 <TIM5_Callback+0x7c>
 801deb4:	4b10      	ldr	r3, [pc, #64]	; (801def8 <TIM5_Callback+0xac>)
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	681a      	ldr	r2, [r3, #0]
 801debc:	4b0e      	ldr	r3, [pc, #56]	; (801def8 <TIM5_Callback+0xac>)
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	f022 0201 	bic.w	r2, r2, #1
 801dec6:	601a      	str	r2, [r3, #0]
			G1T_ON();
 801dec8:	2200      	movs	r2, #0
 801deca:	2120      	movs	r1, #32
 801decc:	480b      	ldr	r0, [pc, #44]	; (801defc <TIM5_Callback+0xb0>)
 801dece:	f7f5 fe95 	bl	8013bfc <HAL_GPIO_WritePin>
			delay_us(SM_ApplParam.Appl_u16PulseSCRWidth_us);
 801ded2:	4b0b      	ldr	r3, [pc, #44]	; (801df00 <TIM5_Callback+0xb4>)
 801ded4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801ded8:	4618      	mov	r0, r3
 801deda:	f000 f9a7 	bl	801e22c <delay_us>
			G1T_OFF();
 801dede:	2201      	movs	r2, #1
 801dee0:	2120      	movs	r1, #32
 801dee2:	4806      	ldr	r0, [pc, #24]	; (801defc <TIM5_Callback+0xb0>)
 801dee4:	f7f5 fe8a 	bl	8013bfc <HAL_GPIO_WritePin>
			SM_ApplParam.Appl_u32_TriggersCountForG1++;
 801dee8:	4b05      	ldr	r3, [pc, #20]	; (801df00 <TIM5_Callback+0xb4>)
 801deea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801deec:	3301      	adds	r3, #1
 801deee:	4a04      	ldr	r2, [pc, #16]	; (801df00 <TIM5_Callback+0xb4>)
 801def0:	6553      	str	r3, [r2, #84]	; 0x54
		}
	}

}
 801def2:	bf00      	nop
 801def4:	bd80      	pop	{r7, pc}
 801def6:	bf00      	nop
 801def8:	200000d4 	.word	0x200000d4
 801defc:	40020400 	.word	0x40020400
 801df00:	20004974 	.word	0x20004974

0801df04 <TIM6_Callback>:

void TIM6_Callback(void){
 801df04:	b580      	push	{r7, lr}
 801df06:	af00      	add	r7, sp, #0
	/*Vishwesh:
	 * Here my strategy is, TIM6_Callback() is called only when Gate2 Trigger is scheduled.
	 * Its just a meeter of time a trigger pulse is served
	 */
	if (__HAL_TIM_GET_FLAG(phtim6, TIM_FLAG_UPDATE) != RESET)
 801df08:	4b2a      	ldr	r3, [pc, #168]	; (801dfb4 <TIM6_Callback+0xb0>)
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	681b      	ldr	r3, [r3, #0]
 801df0e:	691b      	ldr	r3, [r3, #16]
 801df10:	f003 0301 	and.w	r3, r3, #1
 801df14:	2b01      	cmp	r3, #1
 801df16:	d14a      	bne.n	801dfae <TIM6_Callback+0xaa>
	{
		if (__HAL_TIM_GET_IT_SOURCE(phtim6, TIM_IT_UPDATE) != RESET)
 801df18:	4b26      	ldr	r3, [pc, #152]	; (801dfb4 <TIM6_Callback+0xb0>)
 801df1a:	681b      	ldr	r3, [r3, #0]
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	68db      	ldr	r3, [r3, #12]
 801df20:	f003 0301 	and.w	r3, r3, #1
 801df24:	2b01      	cmp	r3, #1
 801df26:	d142      	bne.n	801dfae <TIM6_Callback+0xaa>
		{
			__HAL_TIM_CLEAR_IT(phtim6, TIM_IT_UPDATE);
 801df28:	4b22      	ldr	r3, [pc, #136]	; (801dfb4 <TIM6_Callback+0xb0>)
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	681b      	ldr	r3, [r3, #0]
 801df2e:	f06f 0201 	mvn.w	r2, #1
 801df32:	611a      	str	r2, [r3, #16]
			__HAL_TIM_DISABLE_IT(phtim6,TIM_IT_UPDATE);
 801df34:	4b1f      	ldr	r3, [pc, #124]	; (801dfb4 <TIM6_Callback+0xb0>)
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	681b      	ldr	r3, [r3, #0]
 801df3a:	68da      	ldr	r2, [r3, #12]
 801df3c:	4b1d      	ldr	r3, [pc, #116]	; (801dfb4 <TIM6_Callback+0xb0>)
 801df3e:	681b      	ldr	r3, [r3, #0]
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	f022 0201 	bic.w	r2, r2, #1
 801df46:	60da      	str	r2, [r3, #12]
			__HAL_TIM_DISABLE(phtim6);
 801df48:	4b1a      	ldr	r3, [pc, #104]	; (801dfb4 <TIM6_Callback+0xb0>)
 801df4a:	681b      	ldr	r3, [r3, #0]
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	6a1a      	ldr	r2, [r3, #32]
 801df50:	f241 1311 	movw	r3, #4369	; 0x1111
 801df54:	4013      	ands	r3, r2
 801df56:	2b00      	cmp	r3, #0
 801df58:	d112      	bne.n	801df80 <TIM6_Callback+0x7c>
 801df5a:	4b16      	ldr	r3, [pc, #88]	; (801dfb4 <TIM6_Callback+0xb0>)
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	6a1a      	ldr	r2, [r3, #32]
 801df62:	f240 4344 	movw	r3, #1092	; 0x444
 801df66:	4013      	ands	r3, r2
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d109      	bne.n	801df80 <TIM6_Callback+0x7c>
 801df6c:	4b11      	ldr	r3, [pc, #68]	; (801dfb4 <TIM6_Callback+0xb0>)
 801df6e:	681b      	ldr	r3, [r3, #0]
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	681a      	ldr	r2, [r3, #0]
 801df74:	4b0f      	ldr	r3, [pc, #60]	; (801dfb4 <TIM6_Callback+0xb0>)
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	f022 0201 	bic.w	r2, r2, #1
 801df7e:	601a      	str	r2, [r3, #0]
			G2T_ON();
 801df80:	2200      	movs	r2, #0
 801df82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801df86:	480c      	ldr	r0, [pc, #48]	; (801dfb8 <TIM6_Callback+0xb4>)
 801df88:	f7f5 fe38 	bl	8013bfc <HAL_GPIO_WritePin>
			delay_us(SM_ApplParam.Appl_u16PulseSCRWidth_us);
 801df8c:	4b0b      	ldr	r3, [pc, #44]	; (801dfbc <TIM6_Callback+0xb8>)
 801df8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801df92:	4618      	mov	r0, r3
 801df94:	f000 f94a 	bl	801e22c <delay_us>
			G2T_OFF();
 801df98:	2201      	movs	r2, #1
 801df9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801df9e:	4806      	ldr	r0, [pc, #24]	; (801dfb8 <TIM6_Callback+0xb4>)
 801dfa0:	f7f5 fe2c 	bl	8013bfc <HAL_GPIO_WritePin>
			SM_ApplParam.Appl_u32_TriggersCountForG2++;
 801dfa4:	4b05      	ldr	r3, [pc, #20]	; (801dfbc <TIM6_Callback+0xb8>)
 801dfa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dfa8:	3301      	adds	r3, #1
 801dfaa:	4a04      	ldr	r2, [pc, #16]	; (801dfbc <TIM6_Callback+0xb8>)
 801dfac:	6593      	str	r3, [r2, #88]	; 0x58
		}
	}
}
 801dfae:	bf00      	nop
 801dfb0:	bd80      	pop	{r7, pc}
 801dfb2:	bf00      	nop
 801dfb4:	200000d8 	.word	0x200000d8
 801dfb8:	40020000 	.word	0x40020000
 801dfbc:	20004974 	.word	0x20004974

0801dfc0 <TIM7_Callback>:

void TIM7_Callback(void){
 801dfc0:	b580      	push	{r7, lr}
 801dfc2:	af00      	add	r7, sp, #0
	/*Vishwesh:
	 * Here my strategy is, TIM6_Callback() is called only when Gate2 Trigger is scheduled.
	 * Its just a meeter of time a trigger pulse is served
	 */
	if (__HAL_TIM_GET_FLAG(phtim7, TIM_FLAG_UPDATE) != RESET)
 801dfc4:	4b2a      	ldr	r3, [pc, #168]	; (801e070 <TIM7_Callback+0xb0>)
 801dfc6:	681b      	ldr	r3, [r3, #0]
 801dfc8:	681b      	ldr	r3, [r3, #0]
 801dfca:	691b      	ldr	r3, [r3, #16]
 801dfcc:	f003 0301 	and.w	r3, r3, #1
 801dfd0:	2b01      	cmp	r3, #1
 801dfd2:	d14a      	bne.n	801e06a <TIM7_Callback+0xaa>
	{
		if (__HAL_TIM_GET_IT_SOURCE(phtim7, TIM_IT_UPDATE) != RESET)
 801dfd4:	4b26      	ldr	r3, [pc, #152]	; (801e070 <TIM7_Callback+0xb0>)
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	681b      	ldr	r3, [r3, #0]
 801dfda:	68db      	ldr	r3, [r3, #12]
 801dfdc:	f003 0301 	and.w	r3, r3, #1
 801dfe0:	2b01      	cmp	r3, #1
 801dfe2:	d142      	bne.n	801e06a <TIM7_Callback+0xaa>
		{
			__HAL_TIM_CLEAR_IT(phtim7, TIM_IT_UPDATE);
 801dfe4:	4b22      	ldr	r3, [pc, #136]	; (801e070 <TIM7_Callback+0xb0>)
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	f06f 0201 	mvn.w	r2, #1
 801dfee:	611a      	str	r2, [r3, #16]
			__HAL_TIM_DISABLE_IT(phtim7,TIM_IT_UPDATE);
 801dff0:	4b1f      	ldr	r3, [pc, #124]	; (801e070 <TIM7_Callback+0xb0>)
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	681b      	ldr	r3, [r3, #0]
 801dff6:	68da      	ldr	r2, [r3, #12]
 801dff8:	4b1d      	ldr	r3, [pc, #116]	; (801e070 <TIM7_Callback+0xb0>)
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	681b      	ldr	r3, [r3, #0]
 801dffe:	f022 0201 	bic.w	r2, r2, #1
 801e002:	60da      	str	r2, [r3, #12]
			__HAL_TIM_DISABLE(phtim7);
 801e004:	4b1a      	ldr	r3, [pc, #104]	; (801e070 <TIM7_Callback+0xb0>)
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	6a1a      	ldr	r2, [r3, #32]
 801e00c:	f241 1311 	movw	r3, #4369	; 0x1111
 801e010:	4013      	ands	r3, r2
 801e012:	2b00      	cmp	r3, #0
 801e014:	d112      	bne.n	801e03c <TIM7_Callback+0x7c>
 801e016:	4b16      	ldr	r3, [pc, #88]	; (801e070 <TIM7_Callback+0xb0>)
 801e018:	681b      	ldr	r3, [r3, #0]
 801e01a:	681b      	ldr	r3, [r3, #0]
 801e01c:	6a1a      	ldr	r2, [r3, #32]
 801e01e:	f240 4344 	movw	r3, #1092	; 0x444
 801e022:	4013      	ands	r3, r2
 801e024:	2b00      	cmp	r3, #0
 801e026:	d109      	bne.n	801e03c <TIM7_Callback+0x7c>
 801e028:	4b11      	ldr	r3, [pc, #68]	; (801e070 <TIM7_Callback+0xb0>)
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	681a      	ldr	r2, [r3, #0]
 801e030:	4b0f      	ldr	r3, [pc, #60]	; (801e070 <TIM7_Callback+0xb0>)
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	f022 0201 	bic.w	r2, r2, #1
 801e03a:	601a      	str	r2, [r3, #0]
			G3T_ON();
 801e03c:	2200      	movs	r2, #0
 801e03e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801e042:	480c      	ldr	r0, [pc, #48]	; (801e074 <TIM7_Callback+0xb4>)
 801e044:	f7f5 fdda 	bl	8013bfc <HAL_GPIO_WritePin>
			delay_us(SM_ApplParam.Appl_u16PulseSCRWidth_us);
 801e048:	4b0b      	ldr	r3, [pc, #44]	; (801e078 <TIM7_Callback+0xb8>)
 801e04a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801e04e:	4618      	mov	r0, r3
 801e050:	f000 f8ec 	bl	801e22c <delay_us>
			G3T_OFF();
 801e054:	2201      	movs	r2, #1
 801e056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801e05a:	4806      	ldr	r0, [pc, #24]	; (801e074 <TIM7_Callback+0xb4>)
 801e05c:	f7f5 fdce 	bl	8013bfc <HAL_GPIO_WritePin>
			SM_ApplParam.Appl_u32_TriggersCountForG3++;
 801e060:	4b05      	ldr	r3, [pc, #20]	; (801e078 <TIM7_Callback+0xb8>)
 801e062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e064:	3301      	adds	r3, #1
 801e066:	4a04      	ldr	r2, [pc, #16]	; (801e078 <TIM7_Callback+0xb8>)
 801e068:	65d3      	str	r3, [r2, #92]	; 0x5c
		}
	}
}
 801e06a:	bf00      	nop
 801e06c:	bd80      	pop	{r7, pc}
 801e06e:	bf00      	nop
 801e070:	200000dc 	.word	0x200000dc
 801e074:	40020000 	.word	0x40020000
 801e078:	20004974 	.word	0x20004974

0801e07c <Appl_AdcPhaseAngleDetermination>:

void Appl_AdcPhaseAngleDetermination(void){
 801e07c:	b580      	push	{r7, lr}
 801e07e:	af00      	add	r7, sp, #0

	if(SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow){
 801e080:	4b3a      	ldr	r3, [pc, #232]	; (801e16c <Appl_AdcPhaseAngleDetermination+0xf0>)
 801e082:	781b      	ldrb	r3, [r3, #0]
 801e084:	b2db      	uxtb	r3, r3
 801e086:	2b0b      	cmp	r3, #11
 801e088:	d143      	bne.n	801e112 <Appl_AdcPhaseAngleDetermination+0x96>

		if(((SM_ApplParam.targetPIDCurrent - SM_ApplParam.RealtimeCurrent) < 1.5) && \
 801e08a:	4b39      	ldr	r3, [pc, #228]	; (801e170 <Appl_AdcPhaseAngleDetermination+0xf4>)
 801e08c:	ed93 7a03 	vldr	s14, [r3, #12]
 801e090:	4b37      	ldr	r3, [pc, #220]	; (801e170 <Appl_AdcPhaseAngleDetermination+0xf4>)
 801e092:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801e096:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e09a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801e09e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0a6:	d512      	bpl.n	801e0ce <Appl_AdcPhaseAngleDetermination+0x52>
				((SM_ApplParam.targetPIDCurrent - SM_ApplParam.RealtimeCurrent) > (-1.5)))
 801e0a8:	4b31      	ldr	r3, [pc, #196]	; (801e170 <Appl_AdcPhaseAngleDetermination+0xf4>)
 801e0aa:	ed93 7a03 	vldr	s14, [r3, #12]
 801e0ae:	4b30      	ldr	r3, [pc, #192]	; (801e170 <Appl_AdcPhaseAngleDetermination+0xf4>)
 801e0b0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801e0b4:	ee77 7a67 	vsub.f32	s15, s14, s15
		if(((SM_ApplParam.targetPIDCurrent - SM_ApplParam.RealtimeCurrent) < 1.5) && \
 801e0b8:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 801e0bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0c4:	dd03      	ble.n	801e0ce <Appl_AdcPhaseAngleDetermination+0x52>
		{
			SM_enumECUState = SM_enum_ECU_VldAC_RunCurrentLoop_StableVoltagefloat;
 801e0c6:	4b29      	ldr	r3, [pc, #164]	; (801e16c <Appl_AdcPhaseAngleDetermination+0xf0>)
 801e0c8:	220c      	movs	r2, #12
 801e0ca:	701a      	strb	r2, [r3, #0]
 801e0cc:	e003      	b.n	801e0d6 <Appl_AdcPhaseAngleDetermination+0x5a>
		}
		else{
			kgain = INITIAL_START_GAIN;
 801e0ce:	4b29      	ldr	r3, [pc, #164]	; (801e174 <Appl_AdcPhaseAngleDetermination+0xf8>)
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	4a29      	ldr	r2, [pc, #164]	; (801e178 <Appl_AdcPhaseAngleDetermination+0xfc>)
 801e0d4:	6013      	str	r3, [r2, #0]
		}
		Appl_fltPhasePowerDelivery = PID_Current(kgain);
 801e0d6:	4b28      	ldr	r3, [pc, #160]	; (801e178 <Appl_AdcPhaseAngleDetermination+0xfc>)
 801e0d8:	edd3 7a00 	vldr	s15, [r3]
 801e0dc:	eeb0 0a67 	vmov.f32	s0, s15
 801e0e0:	f000 f856 	bl	801e190 <PID_Current>
 801e0e4:	eef0 7a40 	vmov.f32	s15, s0
 801e0e8:	4b24      	ldr	r3, [pc, #144]	; (801e17c <Appl_AdcPhaseAngleDetermination+0x100>)
 801e0ea:	edc3 7a00 	vstr	s15, [r3]
		Appl_dblPhaseSetValue_degree = (double)SCR_ANGLE_TRIGGER_MAX - (double)Appl_fltPhasePowerDelivery;
 801e0ee:	4b23      	ldr	r3, [pc, #140]	; (801e17c <Appl_AdcPhaseAngleDetermination+0x100>)
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	4618      	mov	r0, r3
 801e0f4:	f7f2 f958 	bl	80103a8 <__aeabi_f2d>
 801e0f8:	4602      	mov	r2, r0
 801e0fa:	460b      	mov	r3, r1
 801e0fc:	f04f 0000 	mov.w	r0, #0
 801e100:	491f      	ldr	r1, [pc, #124]	; (801e180 <Appl_AdcPhaseAngleDetermination+0x104>)
 801e102:	f7f1 fff1 	bl	80100e8 <__aeabi_dsub>
 801e106:	4602      	mov	r2, r0
 801e108:	460b      	mov	r3, r1
 801e10a:	491e      	ldr	r1, [pc, #120]	; (801e184 <Appl_AdcPhaseAngleDetermination+0x108>)
 801e10c:	e9c1 2300 	strd	r2, r3, [r1]
		Appl_dblPhaseSetValue_degree = (double)SCR_ANGLE_TRIGGER_MAX - (double)Appl_fltPhasePowerDelivery;
	}
	else{
		output = 0;
	}
}
 801e110:	e02a      	b.n	801e168 <Appl_AdcPhaseAngleDetermination+0xec>
	else if(SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_StableVoltagefloat){
 801e112:	4b16      	ldr	r3, [pc, #88]	; (801e16c <Appl_AdcPhaseAngleDetermination+0xf0>)
 801e114:	781b      	ldrb	r3, [r3, #0]
 801e116:	b2db      	uxtb	r3, r3
 801e118:	2b0c      	cmp	r3, #12
 801e11a:	d121      	bne.n	801e160 <Appl_AdcPhaseAngleDetermination+0xe4>
		kgain = STABLE_GAIN;
 801e11c:	4b1a      	ldr	r3, [pc, #104]	; (801e188 <Appl_AdcPhaseAngleDetermination+0x10c>)
 801e11e:	681b      	ldr	r3, [r3, #0]
 801e120:	4a15      	ldr	r2, [pc, #84]	; (801e178 <Appl_AdcPhaseAngleDetermination+0xfc>)
 801e122:	6013      	str	r3, [r2, #0]
		Appl_fltPhasePowerDelivery = PID_Current(kgain);
 801e124:	4b14      	ldr	r3, [pc, #80]	; (801e178 <Appl_AdcPhaseAngleDetermination+0xfc>)
 801e126:	edd3 7a00 	vldr	s15, [r3]
 801e12a:	eeb0 0a67 	vmov.f32	s0, s15
 801e12e:	f000 f82f 	bl	801e190 <PID_Current>
 801e132:	eef0 7a40 	vmov.f32	s15, s0
 801e136:	4b11      	ldr	r3, [pc, #68]	; (801e17c <Appl_AdcPhaseAngleDetermination+0x100>)
 801e138:	edc3 7a00 	vstr	s15, [r3]
		Appl_dblPhaseSetValue_degree = (double)SCR_ANGLE_TRIGGER_MAX - (double)Appl_fltPhasePowerDelivery;
 801e13c:	4b0f      	ldr	r3, [pc, #60]	; (801e17c <Appl_AdcPhaseAngleDetermination+0x100>)
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	4618      	mov	r0, r3
 801e142:	f7f2 f931 	bl	80103a8 <__aeabi_f2d>
 801e146:	4602      	mov	r2, r0
 801e148:	460b      	mov	r3, r1
 801e14a:	f04f 0000 	mov.w	r0, #0
 801e14e:	490c      	ldr	r1, [pc, #48]	; (801e180 <Appl_AdcPhaseAngleDetermination+0x104>)
 801e150:	f7f1 ffca 	bl	80100e8 <__aeabi_dsub>
 801e154:	4602      	mov	r2, r0
 801e156:	460b      	mov	r3, r1
 801e158:	490a      	ldr	r1, [pc, #40]	; (801e184 <Appl_AdcPhaseAngleDetermination+0x108>)
 801e15a:	e9c1 2300 	strd	r2, r3, [r1]
}
 801e15e:	e003      	b.n	801e168 <Appl_AdcPhaseAngleDetermination+0xec>
		output = 0;
 801e160:	4b0a      	ldr	r3, [pc, #40]	; (801e18c <Appl_AdcPhaseAngleDetermination+0x110>)
 801e162:	f04f 0200 	mov.w	r2, #0
 801e166:	601a      	str	r2, [r3, #0]
}
 801e168:	bf00      	nop
 801e16a:	bd80      	pop	{r7, pc}
 801e16c:	2000490c 	.word	0x2000490c
 801e170:	20004974 	.word	0x20004974
 801e174:	200000e8 	.word	0x200000e8
 801e178:	200000e4 	.word	0x200000e4
 801e17c:	200048f8 	.word	0x200048f8
 801e180:	40690000 	.word	0x40690000
 801e184:	200005d8 	.word	0x200005d8
 801e188:	200000ec 	.word	0x200000ec
 801e18c:	2000491c 	.word	0x2000491c

0801e190 <PID_Current>:

float PID_Current(float gain){
 801e190:	b480      	push	{r7}
 801e192:	b083      	sub	sp, #12
 801e194:	af00      	add	r7, sp, #0
 801e196:	ed87 0a01 	vstr	s0, [r7, #4]
	error = SM_ApplParam.targetPIDCurrent - SM_ApplParam.RealtimeCurrent;
 801e19a:	4b1f      	ldr	r3, [pc, #124]	; (801e218 <PID_Current+0x88>)
 801e19c:	ed93 7a03 	vldr	s14, [r3, #12]
 801e1a0:	4b1d      	ldr	r3, [pc, #116]	; (801e218 <PID_Current+0x88>)
 801e1a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801e1a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e1aa:	4b1c      	ldr	r3, [pc, #112]	; (801e21c <PID_Current+0x8c>)
 801e1ac:	edc3 7a00 	vstr	s15, [r3]
	output = output + error * gain;
 801e1b0:	4b1a      	ldr	r3, [pc, #104]	; (801e21c <PID_Current+0x8c>)
 801e1b2:	ed93 7a00 	vldr	s14, [r3]
 801e1b6:	edd7 7a01 	vldr	s15, [r7, #4]
 801e1ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e1be:	4b18      	ldr	r3, [pc, #96]	; (801e220 <PID_Current+0x90>)
 801e1c0:	edd3 7a00 	vldr	s15, [r3]
 801e1c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e1c8:	4b15      	ldr	r3, [pc, #84]	; (801e220 <PID_Current+0x90>)
 801e1ca:	edc3 7a00 	vstr	s15, [r3]
	if(output >= PID_CURRENT_MAX) output = PID_CURRENT_MAX;
 801e1ce:	4b14      	ldr	r3, [pc, #80]	; (801e220 <PID_Current+0x90>)
 801e1d0:	edd3 7a00 	vldr	s15, [r3]
 801e1d4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801e224 <PID_Current+0x94>
 801e1d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1e0:	db02      	blt.n	801e1e8 <PID_Current+0x58>
 801e1e2:	4b0f      	ldr	r3, [pc, #60]	; (801e220 <PID_Current+0x90>)
 801e1e4:	4a10      	ldr	r2, [pc, #64]	; (801e228 <PID_Current+0x98>)
 801e1e6:	601a      	str	r2, [r3, #0]
	if(output <= PID_CURRENT_MIN) output = PID_CURRENT_MIN;
 801e1e8:	4b0d      	ldr	r3, [pc, #52]	; (801e220 <PID_Current+0x90>)
 801e1ea:	edd3 7a00 	vldr	s15, [r3]
 801e1ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1f6:	d803      	bhi.n	801e200 <PID_Current+0x70>
 801e1f8:	4b09      	ldr	r3, [pc, #36]	; (801e220 <PID_Current+0x90>)
 801e1fa:	f04f 0200 	mov.w	r2, #0
 801e1fe:	601a      	str	r2, [r3, #0]
	return output;
 801e200:	4b07      	ldr	r3, [pc, #28]	; (801e220 <PID_Current+0x90>)
 801e202:	681b      	ldr	r3, [r3, #0]
 801e204:	ee07 3a90 	vmov	s15, r3
}
 801e208:	eeb0 0a67 	vmov.f32	s0, s15
 801e20c:	370c      	adds	r7, #12
 801e20e:	46bd      	mov	sp, r7
 801e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e214:	4770      	bx	lr
 801e216:	bf00      	nop
 801e218:	20004974 	.word	0x20004974
 801e21c:	2000493c 	.word	0x2000493c
 801e220:	2000491c 	.word	0x2000491c
 801e224:	43160000 	.word	0x43160000
 801e228:	43160000 	.word	0x43160000

0801e22c <delay_us>:
	Appl_u32TimerTicks++;
}
#endif

void delay_us (uint16_t us)
{
 801e22c:	b480      	push	{r7}
 801e22e:	b083      	sub	sp, #12
 801e230:	af00      	add	r7, sp, #0
 801e232:	4603      	mov	r3, r0
 801e234:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 801e236:	4b08      	ldr	r3, [pc, #32]	; (801e258 <delay_us+0x2c>)
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	2200      	movs	r2, #0
 801e23c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 801e23e:	bf00      	nop
 801e240:	4b05      	ldr	r3, [pc, #20]	; (801e258 <delay_us+0x2c>)
 801e242:	681b      	ldr	r3, [r3, #0]
 801e244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e246:	88fb      	ldrh	r3, [r7, #6]
 801e248:	429a      	cmp	r2, r3
 801e24a:	d3f9      	bcc.n	801e240 <delay_us+0x14>
	return;
 801e24c:	bf00      	nop
}
 801e24e:	370c      	adds	r7, #12
 801e250:	46bd      	mov	sp, r7
 801e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e256:	4770      	bx	lr
 801e258:	2000458c 	.word	0x2000458c

0801e25c <MonitorTemperature>:



void MonitorTemperature(void){
 801e25c:	b480      	push	{r7}
 801e25e:	af00      	add	r7, sp, #0
	if(Appl_diagActiveFault.HighTempperatureSCR == 1){
 801e260:	4b0a      	ldr	r3, [pc, #40]	; (801e28c <MonitorTemperature+0x30>)
 801e262:	799b      	ldrb	r3, [r3, #6]
 801e264:	2b01      	cmp	r3, #1
 801e266:	d107      	bne.n	801e278 <MonitorTemperature+0x1c>
		SM_ApplParam.targetPIDCurrent = SM_ApplParam.HighTemperatureCurrent;
 801e268:	4b09      	ldr	r3, [pc, #36]	; (801e290 <MonitorTemperature+0x34>)
 801e26a:	691b      	ldr	r3, [r3, #16]
 801e26c:	4a08      	ldr	r2, [pc, #32]	; (801e290 <MonitorTemperature+0x34>)
 801e26e:	60d3      	str	r3, [r2, #12]
		SM_enumECUState = SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow;
 801e270:	4b08      	ldr	r3, [pc, #32]	; (801e294 <MonitorTemperature+0x38>)
 801e272:	220b      	movs	r2, #11
 801e274:	701a      	strb	r2, [r3, #0]
	}
	else
		SM_ApplParam.targetPIDCurrent = SM_ApplParam.UserSetCurrent;
}
 801e276:	e003      	b.n	801e280 <MonitorTemperature+0x24>
		SM_ApplParam.targetPIDCurrent = SM_ApplParam.UserSetCurrent;
 801e278:	4b05      	ldr	r3, [pc, #20]	; (801e290 <MonitorTemperature+0x34>)
 801e27a:	695b      	ldr	r3, [r3, #20]
 801e27c:	4a04      	ldr	r2, [pc, #16]	; (801e290 <MonitorTemperature+0x34>)
 801e27e:	60d3      	str	r3, [r2, #12]
}
 801e280:	bf00      	nop
 801e282:	46bd      	mov	sp, r7
 801e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e288:	4770      	bx	lr
 801e28a:	bf00      	nop
 801e28c:	200047b0 	.word	0x200047b0
 801e290:	20004974 	.word	0x20004974
 801e294:	2000490c 	.word	0x2000490c

0801e298 <SafeRunMonitoring>:

void SafeRunMonitoring(void){
 801e298:	b580      	push	{r7, lr}
 801e29a:	af00      	add	r7, sp, #0
	Appl_EEPParam.stm32.EEP_PowerFailedLastTime = 1;
 801e29c:	4b49      	ldr	r3, [pc, #292]	; (801e3c4 <SafeRunMonitoring+0x12c>)
 801e29e:	2201      	movs	r2, #1
 801e2a0:	725a      	strb	r2, [r3, #9]

	if(Appl_diagActiveFault.PowerFail_Z1 != 1 &&
 801e2a2:	4b49      	ldr	r3, [pc, #292]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e2a4:	781b      	ldrb	r3, [r3, #0]
 801e2a6:	2b01      	cmp	r3, #1
 801e2a8:	d01b      	beq.n	801e2e2 <SafeRunMonitoring+0x4a>
				Appl_diagActiveFault.PowerFail_Z2 != 1 &&
 801e2aa:	4b47      	ldr	r3, [pc, #284]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e2ac:	785b      	ldrb	r3, [r3, #1]
	if(Appl_diagActiveFault.PowerFail_Z1 != 1 &&
 801e2ae:	2b01      	cmp	r3, #1
 801e2b0:	d017      	beq.n	801e2e2 <SafeRunMonitoring+0x4a>
				Appl_diagActiveFault.PowerFail_Z3 != 1 &&
 801e2b2:	4b45      	ldr	r3, [pc, #276]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e2b4:	789b      	ldrb	r3, [r3, #2]
				Appl_diagActiveFault.PowerFail_Z2 != 1 &&
 801e2b6:	2b01      	cmp	r3, #1
 801e2b8:	d013      	beq.n	801e2e2 <SafeRunMonitoring+0x4a>
				Appl_diagActiveFault.BatteryReversal != 1 &&
 801e2ba:	4b43      	ldr	r3, [pc, #268]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e2bc:	7a1b      	ldrb	r3, [r3, #8]
				Appl_diagActiveFault.PowerFail_Z3 != 1 &&
 801e2be:	2b01      	cmp	r3, #1
 801e2c0:	d00f      	beq.n	801e2e2 <SafeRunMonitoring+0x4a>
				Appl_diagActiveFault.EEPLogMemoryFull != 1 &&
 801e2c2:	4b41      	ldr	r3, [pc, #260]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e2c4:	7a5b      	ldrb	r3, [r3, #9]
				Appl_diagActiveFault.BatteryReversal != 1 &&
 801e2c6:	2b01      	cmp	r3, #1
 801e2c8:	d00b      	beq.n	801e2e2 <SafeRunMonitoring+0x4a>
				Appl_diagActiveFault.OverVoltage != 1 &&
 801e2ca:	4b3f      	ldr	r3, [pc, #252]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e2cc:	78db      	ldrb	r3, [r3, #3]
				Appl_diagActiveFault.EEPLogMemoryFull != 1 &&
 801e2ce:	2b01      	cmp	r3, #1
 801e2d0:	d007      	beq.n	801e2e2 <SafeRunMonitoring+0x4a>
				Appl_diagActiveFault.UnderVoltage != 1 &&
 801e2d2:	4b3d      	ldr	r3, [pc, #244]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e2d4:	795b      	ldrb	r3, [r3, #5]
				Appl_diagActiveFault.OverVoltage != 1 &&
 801e2d6:	2b01      	cmp	r3, #1
 801e2d8:	d003      	beq.n	801e2e2 <SafeRunMonitoring+0x4a>
				Appl_diagActiveFault.OverCurrent != 1){
 801e2da:	4b3b      	ldr	r3, [pc, #236]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e2dc:	791b      	ldrb	r3, [r3, #4]
				Appl_diagActiveFault.UnderVoltage != 1 &&
 801e2de:	2b01      	cmp	r3, #1
 801e2e0:	d14f      	bne.n	801e382 <SafeRunMonitoring+0xea>

		}
	else{
		if(Appl_diagActiveFault.PowerFail_Z1 == 1) SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ1;
 801e2e2:	4b39      	ldr	r3, [pc, #228]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e2e4:	781b      	ldrb	r3, [r3, #0]
 801e2e6:	2b01      	cmp	r3, #1
 801e2e8:	d104      	bne.n	801e2f4 <SafeRunMonitoring+0x5c>
 801e2ea:	4b38      	ldr	r3, [pc, #224]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e2ec:	2205      	movs	r2, #5
 801e2ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e2f2:	e03d      	b.n	801e370 <SafeRunMonitoring+0xd8>
		else if(Appl_diagActiveFault.PowerFail_Z2 == 1) SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ2;
 801e2f4:	4b34      	ldr	r3, [pc, #208]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e2f6:	785b      	ldrb	r3, [r3, #1]
 801e2f8:	2b01      	cmp	r3, #1
 801e2fa:	d104      	bne.n	801e306 <SafeRunMonitoring+0x6e>
 801e2fc:	4b33      	ldr	r3, [pc, #204]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e2fe:	2206      	movs	r2, #6
 801e300:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e304:	e034      	b.n	801e370 <SafeRunMonitoring+0xd8>
		else if(Appl_diagActiveFault.PowerFail_Z3 == 1) SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ3;
 801e306:	4b30      	ldr	r3, [pc, #192]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e308:	789b      	ldrb	r3, [r3, #2]
 801e30a:	2b01      	cmp	r3, #1
 801e30c:	d104      	bne.n	801e318 <SafeRunMonitoring+0x80>
 801e30e:	4b2f      	ldr	r3, [pc, #188]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e310:	2207      	movs	r2, #7
 801e312:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e316:	e02b      	b.n	801e370 <SafeRunMonitoring+0xd8>
		else if(Appl_diagActiveFault.OverVoltage == 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverVoltage;
 801e318:	4b2b      	ldr	r3, [pc, #172]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e31a:	78db      	ldrb	r3, [r3, #3]
 801e31c:	2b01      	cmp	r3, #1
 801e31e:	d104      	bne.n	801e32a <SafeRunMonitoring+0x92>
 801e320:	4b2a      	ldr	r3, [pc, #168]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e322:	220a      	movs	r2, #10
 801e324:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e328:	e022      	b.n	801e370 <SafeRunMonitoring+0xd8>
		else if(Appl_diagActiveFault.BatteryReversal == 1) SM_ApplParam.Pausereason = PauseReasonEnum_BatteryReversal;
 801e32a:	4b27      	ldr	r3, [pc, #156]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e32c:	7a1b      	ldrb	r3, [r3, #8]
 801e32e:	2b01      	cmp	r3, #1
 801e330:	d104      	bne.n	801e33c <SafeRunMonitoring+0xa4>
 801e332:	4b26      	ldr	r3, [pc, #152]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e334:	2208      	movs	r2, #8
 801e336:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e33a:	e019      	b.n	801e370 <SafeRunMonitoring+0xd8>
		else if(Appl_diagActiveFault.EEPLogMemoryFull == 1) SM_ApplParam.Pausereason = PauseReasonEnum_EEPLogMemoryFull;
 801e33c:	4b22      	ldr	r3, [pc, #136]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e33e:	7a5b      	ldrb	r3, [r3, #9]
 801e340:	2b01      	cmp	r3, #1
 801e342:	d104      	bne.n	801e34e <SafeRunMonitoring+0xb6>
 801e344:	4b21      	ldr	r3, [pc, #132]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e346:	2209      	movs	r2, #9
 801e348:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e34c:	e010      	b.n	801e370 <SafeRunMonitoring+0xd8>
		else if(Appl_diagActiveFault.UnderVoltage == 1) SM_ApplParam.Pausereason = PauseReasonEnum_UnderVoltage;
 801e34e:	4b1e      	ldr	r3, [pc, #120]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e350:	795b      	ldrb	r3, [r3, #5]
 801e352:	2b01      	cmp	r3, #1
 801e354:	d104      	bne.n	801e360 <SafeRunMonitoring+0xc8>
 801e356:	4b1d      	ldr	r3, [pc, #116]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e358:	220b      	movs	r2, #11
 801e35a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e35e:	e007      	b.n	801e370 <SafeRunMonitoring+0xd8>
		else if(Appl_diagActiveFault.OverCurrent == 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverCurrent;
 801e360:	4b19      	ldr	r3, [pc, #100]	; (801e3c8 <SafeRunMonitoring+0x130>)
 801e362:	791b      	ldrb	r3, [r3, #4]
 801e364:	2b01      	cmp	r3, #1
 801e366:	d103      	bne.n	801e370 <SafeRunMonitoring+0xd8>
 801e368:	4b18      	ldr	r3, [pc, #96]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e36a:	220c      	movs	r2, #12
 801e36c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		StopCurrentProvidingLoop(SM_ApplParam.Pausereason);
 801e370:	4b16      	ldr	r3, [pc, #88]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e372:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801e376:	4618      	mov	r0, r3
 801e378:	f000 f8d4 	bl	801e524 <StopCurrentProvidingLoop>
		SM_enumECUState = SM_enum_ECU_PauseMode;
 801e37c:	4b14      	ldr	r3, [pc, #80]	; (801e3d0 <SafeRunMonitoring+0x138>)
 801e37e:	2209      	movs	r2, #9
 801e380:	701a      	strb	r2, [r3, #0]
	}


	if(Appl_EEPParam.stm32.EEP_Run_Hour == Appl_EEPParam.stm32.EEP_TimerSetHours){
 801e382:	4b10      	ldr	r3, [pc, #64]	; (801e3c4 <SafeRunMonitoring+0x12c>)
 801e384:	7b1a      	ldrb	r2, [r3, #12]
 801e386:	4b0f      	ldr	r3, [pc, #60]	; (801e3c4 <SafeRunMonitoring+0x12c>)
 801e388:	7b5b      	ldrb	r3, [r3, #13]
 801e38a:	429a      	cmp	r2, r3
 801e38c:	d118      	bne.n	801e3c0 <SafeRunMonitoring+0x128>
		SM_ApplParam.Pausereason = PauseReasonEnum_TimerComplete;
 801e38e:	4b0f      	ldr	r3, [pc, #60]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e390:	2203      	movs	r2, #3
 801e392:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		SM_enumECUState = SM_enum_ECU_PauseMode;
 801e396:	4b0e      	ldr	r3, [pc, #56]	; (801e3d0 <SafeRunMonitoring+0x138>)
 801e398:	2209      	movs	r2, #9
 801e39a:	701a      	strb	r2, [r3, #0]
		Appl_EEPParam.stm32.EEP_Run_Hour = 0;
 801e39c:	4b09      	ldr	r3, [pc, #36]	; (801e3c4 <SafeRunMonitoring+0x12c>)
 801e39e:	2200      	movs	r2, #0
 801e3a0:	731a      	strb	r2, [r3, #12]
		Appl_EEPParam.stm32.EEP_Run_Min = 0;
 801e3a2:	4b08      	ldr	r3, [pc, #32]	; (801e3c4 <SafeRunMonitoring+0x12c>)
 801e3a4:	2200      	movs	r2, #0
 801e3a6:	72da      	strb	r2, [r3, #11]
		Appl_EEPParam.stm32.EEP_Run_Sec = 0;
 801e3a8:	4b06      	ldr	r3, [pc, #24]	; (801e3c4 <SafeRunMonitoring+0x12c>)
 801e3aa:	2200      	movs	r2, #0
 801e3ac:	729a      	strb	r2, [r3, #10]
		Appl_EEPParam.stm32.EEP_PowerFailedLastTime = 0;
 801e3ae:	4b05      	ldr	r3, [pc, #20]	; (801e3c4 <SafeRunMonitoring+0x12c>)
 801e3b0:	2200      	movs	r2, #0
 801e3b2:	725a      	strb	r2, [r3, #9]
		StopCurrentProvidingLoop(SM_ApplParam.Pausereason);
 801e3b4:	4b05      	ldr	r3, [pc, #20]	; (801e3cc <SafeRunMonitoring+0x134>)
 801e3b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801e3ba:	4618      	mov	r0, r3
 801e3bc:	f000 f8b2 	bl	801e524 <StopCurrentProvidingLoop>
	}

}
 801e3c0:	bf00      	nop
 801e3c2:	bd80      	pop	{r7, pc}
 801e3c4:	2000005c 	.word	0x2000005c
 801e3c8:	200047b0 	.word	0x200047b0
 801e3cc:	20004974 	.word	0x20004974
 801e3d0:	2000490c 	.word	0x2000490c

0801e3d4 <StartCurrentProvidingLoop>:

void StartCurrentProvidingLoop(void){
 801e3d4:	b580      	push	{r7, lr}
 801e3d6:	af00      	add	r7, sp, #0
	Appl_diagActiveFault.OverVoltage = 0;
 801e3d8:	4b4d      	ldr	r3, [pc, #308]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e3da:	2200      	movs	r2, #0
 801e3dc:	70da      	strb	r2, [r3, #3]
	if(Appl_diagActiveFault.PowerFail_Z1 != 1 &&
 801e3de:	4b4c      	ldr	r3, [pc, #304]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e3e0:	781b      	ldrb	r3, [r3, #0]
 801e3e2:	2b01      	cmp	r3, #1
 801e3e4:	d050      	beq.n	801e488 <StartCurrentProvidingLoop+0xb4>
			Appl_diagActiveFault.PowerFail_Z2 != 1 &&
 801e3e6:	4b4a      	ldr	r3, [pc, #296]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e3e8:	785b      	ldrb	r3, [r3, #1]
	if(Appl_diagActiveFault.PowerFail_Z1 != 1 &&
 801e3ea:	2b01      	cmp	r3, #1
 801e3ec:	d04c      	beq.n	801e488 <StartCurrentProvidingLoop+0xb4>
			Appl_diagActiveFault.PowerFail_Z3 != 1 &&
 801e3ee:	4b48      	ldr	r3, [pc, #288]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e3f0:	789b      	ldrb	r3, [r3, #2]
			Appl_diagActiveFault.PowerFail_Z2 != 1 &&
 801e3f2:	2b01      	cmp	r3, #1
 801e3f4:	d048      	beq.n	801e488 <StartCurrentProvidingLoop+0xb4>
			Appl_diagActiveFault.BatteryReversal != 1 &&
 801e3f6:	4b46      	ldr	r3, [pc, #280]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e3f8:	7a1b      	ldrb	r3, [r3, #8]
			Appl_diagActiveFault.PowerFail_Z3 != 1 &&
 801e3fa:	2b01      	cmp	r3, #1
 801e3fc:	d044      	beq.n	801e488 <StartCurrentProvidingLoop+0xb4>
			Appl_diagActiveFault.EEPLogMemoryFull != 1 &&
 801e3fe:	4b44      	ldr	r3, [pc, #272]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e400:	7a5b      	ldrb	r3, [r3, #9]
			Appl_diagActiveFault.BatteryReversal != 1 &&
 801e402:	2b01      	cmp	r3, #1
 801e404:	d040      	beq.n	801e488 <StartCurrentProvidingLoop+0xb4>
			Appl_diagActiveFault.OverVoltage != 1 &&
 801e406:	4b42      	ldr	r3, [pc, #264]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e408:	78db      	ldrb	r3, [r3, #3]
			Appl_diagActiveFault.EEPLogMemoryFull != 1 &&
 801e40a:	2b01      	cmp	r3, #1
 801e40c:	d03c      	beq.n	801e488 <StartCurrentProvidingLoop+0xb4>
			Appl_diagActiveFault.UnderVoltage != 1){
 801e40e:	4b40      	ldr	r3, [pc, #256]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e410:	795b      	ldrb	r3, [r3, #5]
			Appl_diagActiveFault.OverVoltage != 1 &&
 801e412:	2b01      	cmp	r3, #1
 801e414:	d038      	beq.n	801e488 <StartCurrentProvidingLoop+0xb4>
		SM_enumECUState = SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow;
 801e416:	4b3f      	ldr	r3, [pc, #252]	; (801e514 <StartCurrentProvidingLoop+0x140>)
 801e418:	220b      	movs	r2, #11
 801e41a:	701a      	strb	r2, [r3, #0]
		SM_ApplParam.targetPIDCurrent = SM_ApplParam.UserSetCurrent;
 801e41c:	4b3e      	ldr	r3, [pc, #248]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e41e:	695b      	ldr	r3, [r3, #20]
 801e420:	4a3d      	ldr	r2, [pc, #244]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e422:	60d3      	str	r3, [r2, #12]
		SM_ApplParam.HighTemperatureCurrent = SM_ApplParam.UserSetCurrent/2.0;
 801e424:	4b3c      	ldr	r3, [pc, #240]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e426:	ed93 7a05 	vldr	s14, [r3, #20]
 801e42a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e42e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801e432:	4b39      	ldr	r3, [pc, #228]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e434:	edc3 7a04 	vstr	s15, [r3, #16]

		CaptureExtEEPSnapshot_SingleShot(START_RECORD_FLAG,0);
 801e438:	2100      	movs	r1, #0
 801e43a:	2001      	movs	r0, #1
 801e43c:	f7fd f87a 	bl	801b534 <CaptureExtEEPSnapshot_SingleShot>
		REDLEDOFF();
 801e440:	2200      	movs	r2, #0
 801e442:	2140      	movs	r1, #64	; 0x40
 801e444:	4835      	ldr	r0, [pc, #212]	; (801e51c <StartCurrentProvidingLoop+0x148>)
 801e446:	f7f5 fbd9 	bl	8013bfc <HAL_GPIO_WritePin>
		GREENLEDON();
 801e44a:	2201      	movs	r2, #1
 801e44c:	2120      	movs	r1, #32
 801e44e:	4833      	ldr	r0, [pc, #204]	; (801e51c <StartCurrentProvidingLoop+0x148>)
 801e450:	f7f5 fbd4 	bl	8013bfc <HAL_GPIO_WritePin>
		DC_CONTACTOR_ON();
 801e454:	2200      	movs	r2, #0
 801e456:	2102      	movs	r1, #2
 801e458:	4831      	ldr	r0, [pc, #196]	; (801e520 <StartCurrentProvidingLoop+0x14c>)
 801e45a:	f7f5 fbcf 	bl	8013bfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(uC_LedOnBoard_GPIO_Port, uC_LedOnBoard_Pin,GPIO_PIN_SET);
 801e45e:	2201      	movs	r2, #1
 801e460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e464:	482e      	ldr	r0, [pc, #184]	; (801e520 <StartCurrentProvidingLoop+0x14c>)
 801e466:	f7f5 fbc9 	bl	8013bfc <HAL_GPIO_WritePin>
		WriteEEPData();
 801e46a:	f7fc fe55 	bl	801b118 <WriteEEPData>

		BUZZER_ON();
 801e46e:	2200      	movs	r2, #0
 801e470:	2180      	movs	r1, #128	; 0x80
 801e472:	482a      	ldr	r0, [pc, #168]	; (801e51c <StartCurrentProvidingLoop+0x148>)
 801e474:	f7f5 fbc2 	bl	8013bfc <HAL_GPIO_WritePin>
		SM_ApplParam.Buzzertoggle = 0;
 801e478:	4b27      	ldr	r3, [pc, #156]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e47a:	2200      	movs	r2, #0
 801e47c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		SM_ApplParam.BuzzerCounter = 0;
 801e480:	4b25      	ldr	r3, [pc, #148]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e482:	2200      	movs	r2, #0
 801e484:	665a      	str	r2, [r3, #100]	; 0x64
 801e486:	e041      	b.n	801e50c <StartCurrentProvidingLoop+0x138>
	}
	else{
		if(Appl_diagActiveFault.PowerFail_Z1 == 1) SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ1;
 801e488:	4b21      	ldr	r3, [pc, #132]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e48a:	781b      	ldrb	r3, [r3, #0]
 801e48c:	2b01      	cmp	r3, #1
 801e48e:	d104      	bne.n	801e49a <StartCurrentProvidingLoop+0xc6>
 801e490:	4b21      	ldr	r3, [pc, #132]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e492:	2205      	movs	r2, #5
 801e494:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e498:	e034      	b.n	801e504 <StartCurrentProvidingLoop+0x130>
		else if(Appl_diagActiveFault.PowerFail_Z2 == 1) SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ2;
 801e49a:	4b1d      	ldr	r3, [pc, #116]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e49c:	785b      	ldrb	r3, [r3, #1]
 801e49e:	2b01      	cmp	r3, #1
 801e4a0:	d104      	bne.n	801e4ac <StartCurrentProvidingLoop+0xd8>
 801e4a2:	4b1d      	ldr	r3, [pc, #116]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e4a4:	2206      	movs	r2, #6
 801e4a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e4aa:	e02b      	b.n	801e504 <StartCurrentProvidingLoop+0x130>
		else if(Appl_diagActiveFault.PowerFail_Z3 == 1) SM_ApplParam.Pausereason = PauseReasonEnum_PowerFailZ3;
 801e4ac:	4b18      	ldr	r3, [pc, #96]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e4ae:	789b      	ldrb	r3, [r3, #2]
 801e4b0:	2b01      	cmp	r3, #1
 801e4b2:	d104      	bne.n	801e4be <StartCurrentProvidingLoop+0xea>
 801e4b4:	4b18      	ldr	r3, [pc, #96]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e4b6:	2207      	movs	r2, #7
 801e4b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e4bc:	e022      	b.n	801e504 <StartCurrentProvidingLoop+0x130>
		else if(Appl_diagActiveFault.OverVoltage == 1) SM_ApplParam.Pausereason = PauseReasonEnum_OverVoltage;
 801e4be:	4b14      	ldr	r3, [pc, #80]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e4c0:	78db      	ldrb	r3, [r3, #3]
 801e4c2:	2b01      	cmp	r3, #1
 801e4c4:	d104      	bne.n	801e4d0 <StartCurrentProvidingLoop+0xfc>
 801e4c6:	4b14      	ldr	r3, [pc, #80]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e4c8:	220a      	movs	r2, #10
 801e4ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e4ce:	e019      	b.n	801e504 <StartCurrentProvidingLoop+0x130>
		else if(Appl_diagActiveFault.BatteryReversal == 1) SM_ApplParam.Pausereason = PauseReasonEnum_BatteryReversal;
 801e4d0:	4b0f      	ldr	r3, [pc, #60]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e4d2:	7a1b      	ldrb	r3, [r3, #8]
 801e4d4:	2b01      	cmp	r3, #1
 801e4d6:	d104      	bne.n	801e4e2 <StartCurrentProvidingLoop+0x10e>
 801e4d8:	4b0f      	ldr	r3, [pc, #60]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e4da:	2208      	movs	r2, #8
 801e4dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e4e0:	e010      	b.n	801e504 <StartCurrentProvidingLoop+0x130>
		else if(Appl_diagActiveFault.EEPLogMemoryFull == 1) SM_ApplParam.Pausereason = PauseReasonEnum_EEPLogMemoryFull;
 801e4e2:	4b0b      	ldr	r3, [pc, #44]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e4e4:	7a5b      	ldrb	r3, [r3, #9]
 801e4e6:	2b01      	cmp	r3, #1
 801e4e8:	d104      	bne.n	801e4f4 <StartCurrentProvidingLoop+0x120>
 801e4ea:	4b0b      	ldr	r3, [pc, #44]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e4ec:	2209      	movs	r2, #9
 801e4ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801e4f2:	e007      	b.n	801e504 <StartCurrentProvidingLoop+0x130>
		else if(Appl_diagActiveFault.UnderVoltage == 1) SM_ApplParam.Pausereason = PauseReasonEnum_UnderVoltage;
 801e4f4:	4b06      	ldr	r3, [pc, #24]	; (801e510 <StartCurrentProvidingLoop+0x13c>)
 801e4f6:	795b      	ldrb	r3, [r3, #5]
 801e4f8:	2b01      	cmp	r3, #1
 801e4fa:	d103      	bne.n	801e504 <StartCurrentProvidingLoop+0x130>
 801e4fc:	4b06      	ldr	r3, [pc, #24]	; (801e518 <StartCurrentProvidingLoop+0x144>)
 801e4fe:	220b      	movs	r2, #11
 801e500:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		SM_enumECUState = SM_enum_ECU_PauseMode;
 801e504:	4b03      	ldr	r3, [pc, #12]	; (801e514 <StartCurrentProvidingLoop+0x140>)
 801e506:	2209      	movs	r2, #9
 801e508:	701a      	strb	r2, [r3, #0]
	}
}
 801e50a:	bf00      	nop
 801e50c:	bf00      	nop
 801e50e:	bd80      	pop	{r7, pc}
 801e510:	200047b0 	.word	0x200047b0
 801e514:	2000490c 	.word	0x2000490c
 801e518:	20004974 	.word	0x20004974
 801e51c:	40020800 	.word	0x40020800
 801e520:	40020400 	.word	0x40020400

0801e524 <StopCurrentProvidingLoop>:

void StopCurrentProvidingLoop(PauseReason reason){
 801e524:	b580      	push	{r7, lr}
 801e526:	b082      	sub	sp, #8
 801e528:	af00      	add	r7, sp, #0
 801e52a:	4603      	mov	r3, r0
 801e52c:	71fb      	strb	r3, [r7, #7]
	REDLEDON();
 801e52e:	2201      	movs	r2, #1
 801e530:	2140      	movs	r1, #64	; 0x40
 801e532:	4815      	ldr	r0, [pc, #84]	; (801e588 <StopCurrentProvidingLoop+0x64>)
 801e534:	f7f5 fb62 	bl	8013bfc <HAL_GPIO_WritePin>
	GREENLEDOFF();
 801e538:	2200      	movs	r2, #0
 801e53a:	2120      	movs	r1, #32
 801e53c:	4812      	ldr	r0, [pc, #72]	; (801e588 <StopCurrentProvidingLoop+0x64>)
 801e53e:	f7f5 fb5d 	bl	8013bfc <HAL_GPIO_WritePin>
	DC_CONTACTOR_OFF();
 801e542:	2201      	movs	r2, #1
 801e544:	2102      	movs	r1, #2
 801e546:	4811      	ldr	r0, [pc, #68]	; (801e58c <StopCurrentProvidingLoop+0x68>)
 801e548:	f7f5 fb58 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(uC_LedOnBoard_GPIO_Port, uC_LedOnBoard_Pin,GPIO_PIN_RESET);
 801e54c:	2200      	movs	r2, #0
 801e54e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e552:	480e      	ldr	r0, [pc, #56]	; (801e58c <StopCurrentProvidingLoop+0x68>)
 801e554:	f7f5 fb52 	bl	8013bfc <HAL_GPIO_WritePin>
	CaptureExtEEPSnapshot_SingleShot(STOP_RECORD_FLAG,reason);
 801e558:	79fb      	ldrb	r3, [r7, #7]
 801e55a:	4619      	mov	r1, r3
 801e55c:	2000      	movs	r0, #0
 801e55e:	f7fc ffe9 	bl	801b534 <CaptureExtEEPSnapshot_SingleShot>
	WriteEEPData();
 801e562:	f7fc fdd9 	bl	801b118 <WriteEEPData>
	BUZZER_ON();
 801e566:	2200      	movs	r2, #0
 801e568:	2180      	movs	r1, #128	; 0x80
 801e56a:	4807      	ldr	r0, [pc, #28]	; (801e588 <StopCurrentProvidingLoop+0x64>)
 801e56c:	f7f5 fb46 	bl	8013bfc <HAL_GPIO_WritePin>
	SM_ApplParam.Buzzertoggle = 0;
 801e570:	4b07      	ldr	r3, [pc, #28]	; (801e590 <StopCurrentProvidingLoop+0x6c>)
 801e572:	2200      	movs	r2, #0
 801e574:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	SM_ApplParam.BuzzerCounter = 0;
 801e578:	4b05      	ldr	r3, [pc, #20]	; (801e590 <StopCurrentProvidingLoop+0x6c>)
 801e57a:	2200      	movs	r2, #0
 801e57c:	665a      	str	r2, [r3, #100]	; 0x64
}
 801e57e:	bf00      	nop
 801e580:	3708      	adds	r7, #8
 801e582:	46bd      	mov	sp, r7
 801e584:	bd80      	pop	{r7, pc}
 801e586:	bf00      	nop
 801e588:	40020800 	.word	0x40020800
 801e58c:	40020400 	.word	0x40020400
 801e590:	20004974 	.word	0x20004974

0801e594 <DisplayWindowSelection>:

static inline void DisplayWindowSelection(void){
 801e594:	b480      	push	{r7}
 801e596:	af00      	add	r7, sp, #0
	/* DISPLAY WINDOW SELECTION */

	if((Appl_diagActiveFault.PowerFail_Z1 == 1) || \
 801e598:	4b6f      	ldr	r3, [pc, #444]	; (801e758 <DisplayWindowSelection+0x1c4>)
 801e59a:	781b      	ldrb	r3, [r3, #0]
 801e59c:	2b01      	cmp	r3, #1
 801e59e:	d003      	beq.n	801e5a8 <DisplayWindowSelection+0x14>
			(Appl_diagActiveFault.PowerFail_Z3 == 1)){
 801e5a0:	4b6d      	ldr	r3, [pc, #436]	; (801e758 <DisplayWindowSelection+0x1c4>)
 801e5a2:	789b      	ldrb	r3, [r3, #2]
	if((Appl_diagActiveFault.PowerFail_Z1 == 1) || \
 801e5a4:	2b01      	cmp	r3, #1
 801e5a6:	d103      	bne.n	801e5b0 <DisplayWindowSelection+0x1c>
		SM_enumDisplayState = SM_enum_Display_PoweringOffWindow;
 801e5a8:	4b6c      	ldr	r3, [pc, #432]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e5aa:	220b      	movs	r2, #11
 801e5ac:	701a      	strb	r2, [r3, #0]
		}
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
			SM_enumDisplayState = SM_enum_Display_StoppedWhileRunning;
		}

}
 801e5ae:	e0cd      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		if(SM_enumECUState == SM_enum_ECU_Init){
 801e5b0:	4b6b      	ldr	r3, [pc, #428]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e5b2:	781b      	ldrb	r3, [r3, #0]
 801e5b4:	b2db      	uxtb	r3, r3
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	d103      	bne.n	801e5c2 <DisplayWindowSelection+0x2e>
			SM_enumDisplayState = SM_enum_Display_POWERON_LOGO;
 801e5ba:	4b68      	ldr	r3, [pc, #416]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e5bc:	2200      	movs	r2, #0
 801e5be:	701a      	strb	r2, [r3, #0]
}
 801e5c0:	e0c4      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_StandByMode){
 801e5c2:	4b67      	ldr	r3, [pc, #412]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e5c4:	781b      	ldrb	r3, [r3, #0]
 801e5c6:	b2db      	uxtb	r3, r3
 801e5c8:	2b01      	cmp	r3, #1
 801e5ca:	d103      	bne.n	801e5d4 <DisplayWindowSelection+0x40>
			SM_enumDisplayState = SM_enum_Display_MAIN_MENU;
 801e5cc:	4b63      	ldr	r3, [pc, #396]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e5ce:	2201      	movs	r2, #1
 801e5d0:	701a      	strb	r2, [r3, #0]
}
 801e5d2:	e0bb      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if((SM_enumECUState == SM_enum_ECU_RejuvenationMenu)){
 801e5d4:	4b62      	ldr	r3, [pc, #392]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e5d6:	781b      	ldrb	r3, [r3, #0]
 801e5d8:	b2db      	uxtb	r3, r3
 801e5da:	2b02      	cmp	r3, #2
 801e5dc:	d103      	bne.n	801e5e6 <DisplayWindowSelection+0x52>
			SM_enumDisplayState = SM_enum_Display_RejuvenationMenu;
 801e5de:	4b5f      	ldr	r3, [pc, #380]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e5e0:	2202      	movs	r2, #2
 801e5e2:	701a      	strb	r2, [r3, #0]
}
 801e5e4:	e0b2      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_StableVoltagefloat){
 801e5e6:	4b5e      	ldr	r3, [pc, #376]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e5e8:	781b      	ldrb	r3, [r3, #0]
 801e5ea:	b2db      	uxtb	r3, r3
 801e5ec:	2b0c      	cmp	r3, #12
 801e5ee:	d103      	bne.n	801e5f8 <DisplayWindowSelection+0x64>
			SM_enumDisplayState = SM_enum_Display_MM_CurrentloopRunning_Stable;
 801e5f0:	4b5a      	ldr	r3, [pc, #360]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e5f2:	220a      	movs	r2, #10
 801e5f4:	701a      	strb	r2, [r3, #0]
}
 801e5f6:	e0a9      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_VldAC_RunCurrentLoop_increaseVoltageMode_Slow){
 801e5f8:	4b59      	ldr	r3, [pc, #356]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e5fa:	781b      	ldrb	r3, [r3, #0]
 801e5fc:	b2db      	uxtb	r3, r3
 801e5fe:	2b0b      	cmp	r3, #11
 801e600:	d103      	bne.n	801e60a <DisplayWindowSelection+0x76>
			SM_enumDisplayState = SM_enum_Display_MM_CurrentloopRunning_Slow;
 801e602:	4b56      	ldr	r3, [pc, #344]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e604:	2209      	movs	r2, #9
 801e606:	701a      	strb	r2, [r3, #0]
}
 801e608:	e0a0      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SelfTest){
 801e60a:	4b55      	ldr	r3, [pc, #340]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e60c:	781b      	ldrb	r3, [r3, #0]
 801e60e:	b2db      	uxtb	r3, r3
 801e610:	2b0d      	cmp	r3, #13
 801e612:	d103      	bne.n	801e61c <DisplayWindowSelection+0x88>
			SM_enumDisplayState = SM_enum_Display_SelfTest;
 801e614:	4b51      	ldr	r3, [pc, #324]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e616:	2203      	movs	r2, #3
 801e618:	701a      	strb	r2, [r3, #0]
}
 801e61a:	e097      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu){
 801e61c:	4b50      	ldr	r3, [pc, #320]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e61e:	781b      	ldrb	r3, [r3, #0]
 801e620:	b2db      	uxtb	r3, r3
 801e622:	2b03      	cmp	r3, #3
 801e624:	d103      	bne.n	801e62e <DisplayWindowSelection+0x9a>
			SM_enumDisplayState = SM_enum_Display_Settings_Menu;
 801e626:	4b4d      	ldr	r3, [pc, #308]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e628:	2204      	movs	r2, #4
 801e62a:	701a      	strb	r2, [r3, #0]
}
 801e62c:	e08e      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu){
 801e62e:	4b4c      	ldr	r3, [pc, #304]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e630:	781b      	ldrb	r3, [r3, #0]
 801e632:	b2db      	uxtb	r3, r3
 801e634:	2b03      	cmp	r3, #3
 801e636:	d103      	bne.n	801e640 <DisplayWindowSelection+0xac>
			SM_enumDisplayState = SM_enum_Display_Settings_Menu;
 801e638:	4b48      	ldr	r3, [pc, #288]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e63a:	2204      	movs	r2, #4
 801e63c:	701a      	strb	r2, [r3, #0]
}
 801e63e:	e085      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Transfer){
 801e640:	4b47      	ldr	r3, [pc, #284]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e642:	781b      	ldrb	r3, [r3, #0]
 801e644:	b2db      	uxtb	r3, r3
 801e646:	2b04      	cmp	r3, #4
 801e648:	d103      	bne.n	801e652 <DisplayWindowSelection+0xbe>
			SM_enumDisplayState = SM_enum_Display_Settings_Menu_Transfer;
 801e64a:	4b44      	ldr	r3, [pc, #272]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e64c:	2205      	movs	r2, #5
 801e64e:	701a      	strb	r2, [r3, #0]
}
 801e650:	e07c      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Erase){
 801e652:	4b43      	ldr	r3, [pc, #268]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e654:	781b      	ldrb	r3, [r3, #0]
 801e656:	b2db      	uxtb	r3, r3
 801e658:	2b05      	cmp	r3, #5
 801e65a:	d103      	bne.n	801e664 <DisplayWindowSelection+0xd0>
			SM_enumDisplayState = SM_enum_Display_Settings_Menu_Erase;
 801e65c:	4b3f      	ldr	r3, [pc, #252]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e65e:	2206      	movs	r2, #6
 801e660:	701a      	strb	r2, [r3, #0]
}
 801e662:	e073      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_Completed){
 801e664:	4b3e      	ldr	r3, [pc, #248]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e666:	781b      	ldrb	r3, [r3, #0]
 801e668:	b2db      	uxtb	r3, r3
 801e66a:	2b06      	cmp	r3, #6
 801e66c:	d103      	bne.n	801e676 <DisplayWindowSelection+0xe2>
			SM_enumDisplayState = SM_enum_Display_Settings_Menu_Completed;
 801e66e:	4b3b      	ldr	r3, [pc, #236]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e670:	2207      	movs	r2, #7
 801e672:	701a      	strb	r2, [r3, #0]
}
 801e674:	e06a      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_VishwatestMode){
 801e676:	4b3a      	ldr	r3, [pc, #232]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e678:	781b      	ldrb	r3, [r3, #0]
 801e67a:	b2db      	uxtb	r3, r3
 801e67c:	2b11      	cmp	r3, #17
 801e67e:	d103      	bne.n	801e688 <DisplayWindowSelection+0xf4>
			SM_enumDisplayState = SM_enum_Display_VishwaTest;
 801e680:	4b36      	ldr	r3, [pc, #216]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e682:	220c      	movs	r2, #12
 801e684:	701a      	strb	r2, [r3, #0]
}
 801e686:	e061      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_AutoModeUserInput){
 801e688:	4b35      	ldr	r3, [pc, #212]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e68a:	781b      	ldrb	r3, [r3, #0]
 801e68c:	b2db      	uxtb	r3, r3
 801e68e:	2b0a      	cmp	r3, #10
 801e690:	d103      	bne.n	801e69a <DisplayWindowSelection+0x106>
			SM_enumDisplayState = SM_enum_Display_AutoModeUserInput;
 801e692:	4b32      	ldr	r3, [pc, #200]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e694:	220d      	movs	r2, #13
 801e696:	701a      	strb	r2, [r3, #0]
}
 801e698:	e058      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_StatusDisplay){
 801e69a:	4b31      	ldr	r3, [pc, #196]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e69c:	781b      	ldrb	r3, [r3, #0]
 801e69e:	b2db      	uxtb	r3, r3
 801e6a0:	2b0e      	cmp	r3, #14
 801e6a2:	d103      	bne.n	801e6ac <DisplayWindowSelection+0x118>
			SM_enumDisplayState = SM_enum_Display_StatusDisplay;
 801e6a4:	4b2d      	ldr	r3, [pc, #180]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e6a6:	220e      	movs	r2, #14
 801e6a8:	701a      	strb	r2, [r3, #0]
}
 801e6aa:	e04f      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_PauseMode){
 801e6ac:	4b2c      	ldr	r3, [pc, #176]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e6ae:	781b      	ldrb	r3, [r3, #0]
 801e6b0:	b2db      	uxtb	r3, r3
 801e6b2:	2b09      	cmp	r3, #9
 801e6b4:	d103      	bne.n	801e6be <DisplayWindowSelection+0x12a>
			SM_enumDisplayState = SM_enum_Display_Pause;
 801e6b6:	4b29      	ldr	r3, [pc, #164]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e6b8:	2210      	movs	r2, #16
 801e6ba:	701a      	strb	r2, [r3, #0]
}
 801e6bc:	e046      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_Info){
 801e6be:	4b28      	ldr	r3, [pc, #160]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e6c0:	781b      	ldrb	r3, [r3, #0]
 801e6c2:	b2db      	uxtb	r3, r3
 801e6c4:	2b0f      	cmp	r3, #15
 801e6c6:	d103      	bne.n	801e6d0 <DisplayWindowSelection+0x13c>
			SM_enumDisplayState = SM_enum_Display_Info;
 801e6c8:	4b24      	ldr	r3, [pc, #144]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e6ca:	220f      	movs	r2, #15
 801e6cc:	701a      	strb	r2, [r3, #0]
}
 801e6ce:	e03d      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801e6d0:	4b23      	ldr	r3, [pc, #140]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e6d2:	781b      	ldrb	r3, [r3, #0]
 801e6d4:	b2db      	uxtb	r3, r3
 801e6d6:	2b10      	cmp	r3, #16
 801e6d8:	d103      	bne.n	801e6e2 <DisplayWindowSelection+0x14e>
			SM_enumDisplayState = SM_enum_Display_StoppedWhileRunning;
 801e6da:	4b20      	ldr	r3, [pc, #128]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e6dc:	2211      	movs	r2, #17
 801e6de:	701a      	strb	r2, [r3, #0]
}
 801e6e0:	e034      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_SettingMenu_MaxVoltage){
 801e6e2:	4b1f      	ldr	r3, [pc, #124]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e6e4:	781b      	ldrb	r3, [r3, #0]
 801e6e6:	b2db      	uxtb	r3, r3
 801e6e8:	2b07      	cmp	r3, #7
 801e6ea:	d103      	bne.n	801e6f4 <DisplayWindowSelection+0x160>
			SM_enumDisplayState = SM_enum_Display_Settings_Menu_MaxVoltage;
 801e6ec:	4b1b      	ldr	r3, [pc, #108]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e6ee:	2208      	movs	r2, #8
 801e6f0:	701a      	strb	r2, [r3, #0]
}
 801e6f2:	e02b      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801e6f4:	4b1a      	ldr	r3, [pc, #104]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e6f6:	781b      	ldrb	r3, [r3, #0]
 801e6f8:	b2db      	uxtb	r3, r3
 801e6fa:	2b10      	cmp	r3, #16
 801e6fc:	d103      	bne.n	801e706 <DisplayWindowSelection+0x172>
			SM_enumDisplayState = SM_enum_Display_StoppedWhileRunning;
 801e6fe:	4b17      	ldr	r3, [pc, #92]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e700:	2211      	movs	r2, #17
 801e702:	701a      	strb	r2, [r3, #0]
}
 801e704:	e022      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801e706:	4b16      	ldr	r3, [pc, #88]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e708:	781b      	ldrb	r3, [r3, #0]
 801e70a:	b2db      	uxtb	r3, r3
 801e70c:	2b10      	cmp	r3, #16
 801e70e:	d103      	bne.n	801e718 <DisplayWindowSelection+0x184>
			SM_enumDisplayState = SM_enum_Display_StoppedWhileRunning;
 801e710:	4b12      	ldr	r3, [pc, #72]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e712:	2211      	movs	r2, #17
 801e714:	701a      	strb	r2, [r3, #0]
}
 801e716:	e019      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801e718:	4b11      	ldr	r3, [pc, #68]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e71a:	781b      	ldrb	r3, [r3, #0]
 801e71c:	b2db      	uxtb	r3, r3
 801e71e:	2b10      	cmp	r3, #16
 801e720:	d103      	bne.n	801e72a <DisplayWindowSelection+0x196>
			SM_enumDisplayState = SM_enum_Display_StoppedWhileRunning;
 801e722:	4b0e      	ldr	r3, [pc, #56]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e724:	2211      	movs	r2, #17
 801e726:	701a      	strb	r2, [r3, #0]
}
 801e728:	e010      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801e72a:	4b0d      	ldr	r3, [pc, #52]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e72c:	781b      	ldrb	r3, [r3, #0]
 801e72e:	b2db      	uxtb	r3, r3
 801e730:	2b10      	cmp	r3, #16
 801e732:	d103      	bne.n	801e73c <DisplayWindowSelection+0x1a8>
			SM_enumDisplayState = SM_enum_Display_StoppedWhileRunning;
 801e734:	4b09      	ldr	r3, [pc, #36]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e736:	2211      	movs	r2, #17
 801e738:	701a      	strb	r2, [r3, #0]
}
 801e73a:	e007      	b.n	801e74c <DisplayWindowSelection+0x1b8>
		else if(SM_enumECUState == SM_enum_ECU_ContinueFromLastPowerOff){
 801e73c:	4b08      	ldr	r3, [pc, #32]	; (801e760 <DisplayWindowSelection+0x1cc>)
 801e73e:	781b      	ldrb	r3, [r3, #0]
 801e740:	b2db      	uxtb	r3, r3
 801e742:	2b10      	cmp	r3, #16
 801e744:	d102      	bne.n	801e74c <DisplayWindowSelection+0x1b8>
			SM_enumDisplayState = SM_enum_Display_StoppedWhileRunning;
 801e746:	4b05      	ldr	r3, [pc, #20]	; (801e75c <DisplayWindowSelection+0x1c8>)
 801e748:	2211      	movs	r2, #17
 801e74a:	701a      	strb	r2, [r3, #0]
}
 801e74c:	bf00      	nop
 801e74e:	46bd      	mov	sp, r7
 801e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e754:	4770      	bx	lr
 801e756:	bf00      	nop
 801e758:	200047b0 	.word	0x200047b0
 801e75c:	2000486e 	.word	0x2000486e
 801e760:	2000490c 	.word	0x2000490c

0801e764 <switchOnBuzzer>:

void switchOnBuzzer(void){
 801e764:	b580      	push	{r7, lr}
 801e766:	af00      	add	r7, sp, #0
	static uint8_t offtime = 125;
	static uint8_t ontime = 75;
	ALL_INDICATORS_ON();
 801e768:	2200      	movs	r2, #0
 801e76a:	2180      	movs	r1, #128	; 0x80
 801e76c:	48d1      	ldr	r0, [pc, #836]	; (801eab4 <switchOnBuzzer+0x350>)
 801e76e:	f7f5 fa45 	bl	8013bfc <HAL_GPIO_WritePin>
 801e772:	2201      	movs	r2, #1
 801e774:	2140      	movs	r1, #64	; 0x40
 801e776:	48cf      	ldr	r0, [pc, #828]	; (801eab4 <switchOnBuzzer+0x350>)
 801e778:	f7f5 fa40 	bl	8013bfc <HAL_GPIO_WritePin>
 801e77c:	2201      	movs	r2, #1
 801e77e:	2120      	movs	r1, #32
 801e780:	48cc      	ldr	r0, [pc, #816]	; (801eab4 <switchOnBuzzer+0x350>)
 801e782:	f7f5 fa3b 	bl	8013bfc <HAL_GPIO_WritePin>
 801e786:	2201      	movs	r2, #1
 801e788:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e78c:	48c9      	ldr	r0, [pc, #804]	; (801eab4 <switchOnBuzzer+0x350>)
 801e78e:	f7f5 fa35 	bl	8013bfc <HAL_GPIO_WritePin>
 801e792:	2201      	movs	r2, #1
 801e794:	2110      	movs	r1, #16
 801e796:	48c7      	ldr	r0, [pc, #796]	; (801eab4 <switchOnBuzzer+0x350>)
 801e798:	f7f5 fa30 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801e79c:	4bc6      	ldr	r3, [pc, #792]	; (801eab8 <switchOnBuzzer+0x354>)
 801e79e:	781b      	ldrb	r3, [r3, #0]
 801e7a0:	4618      	mov	r0, r3
 801e7a2:	f7f3 fdf3 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_OFF();
 801e7a6:	2201      	movs	r2, #1
 801e7a8:	2180      	movs	r1, #128	; 0x80
 801e7aa:	48c2      	ldr	r0, [pc, #776]	; (801eab4 <switchOnBuzzer+0x350>)
 801e7ac:	f7f5 fa26 	bl	8013bfc <HAL_GPIO_WritePin>
 801e7b0:	2200      	movs	r2, #0
 801e7b2:	2140      	movs	r1, #64	; 0x40
 801e7b4:	48bf      	ldr	r0, [pc, #764]	; (801eab4 <switchOnBuzzer+0x350>)
 801e7b6:	f7f5 fa21 	bl	8013bfc <HAL_GPIO_WritePin>
 801e7ba:	2200      	movs	r2, #0
 801e7bc:	2120      	movs	r1, #32
 801e7be:	48bd      	ldr	r0, [pc, #756]	; (801eab4 <switchOnBuzzer+0x350>)
 801e7c0:	f7f5 fa1c 	bl	8013bfc <HAL_GPIO_WritePin>
 801e7c4:	2200      	movs	r2, #0
 801e7c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e7ca:	48ba      	ldr	r0, [pc, #744]	; (801eab4 <switchOnBuzzer+0x350>)
 801e7cc:	f7f5 fa16 	bl	8013bfc <HAL_GPIO_WritePin>
 801e7d0:	2200      	movs	r2, #0
 801e7d2:	2110      	movs	r1, #16
 801e7d4:	48b7      	ldr	r0, [pc, #732]	; (801eab4 <switchOnBuzzer+0x350>)
 801e7d6:	f7f5 fa11 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 801e7da:	4bb8      	ldr	r3, [pc, #736]	; (801eabc <switchOnBuzzer+0x358>)
 801e7dc:	781b      	ldrb	r3, [r3, #0]
 801e7de:	4618      	mov	r0, r3
 801e7e0:	f7f3 fdd4 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_ON();
 801e7e4:	2200      	movs	r2, #0
 801e7e6:	2180      	movs	r1, #128	; 0x80
 801e7e8:	48b2      	ldr	r0, [pc, #712]	; (801eab4 <switchOnBuzzer+0x350>)
 801e7ea:	f7f5 fa07 	bl	8013bfc <HAL_GPIO_WritePin>
 801e7ee:	2201      	movs	r2, #1
 801e7f0:	2140      	movs	r1, #64	; 0x40
 801e7f2:	48b0      	ldr	r0, [pc, #704]	; (801eab4 <switchOnBuzzer+0x350>)
 801e7f4:	f7f5 fa02 	bl	8013bfc <HAL_GPIO_WritePin>
 801e7f8:	2201      	movs	r2, #1
 801e7fa:	2120      	movs	r1, #32
 801e7fc:	48ad      	ldr	r0, [pc, #692]	; (801eab4 <switchOnBuzzer+0x350>)
 801e7fe:	f7f5 f9fd 	bl	8013bfc <HAL_GPIO_WritePin>
 801e802:	2201      	movs	r2, #1
 801e804:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e808:	48aa      	ldr	r0, [pc, #680]	; (801eab4 <switchOnBuzzer+0x350>)
 801e80a:	f7f5 f9f7 	bl	8013bfc <HAL_GPIO_WritePin>
 801e80e:	2201      	movs	r2, #1
 801e810:	2110      	movs	r1, #16
 801e812:	48a8      	ldr	r0, [pc, #672]	; (801eab4 <switchOnBuzzer+0x350>)
 801e814:	f7f5 f9f2 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801e818:	4ba7      	ldr	r3, [pc, #668]	; (801eab8 <switchOnBuzzer+0x354>)
 801e81a:	781b      	ldrb	r3, [r3, #0]
 801e81c:	4618      	mov	r0, r3
 801e81e:	f7f3 fdb5 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_OFF();
 801e822:	2201      	movs	r2, #1
 801e824:	2180      	movs	r1, #128	; 0x80
 801e826:	48a3      	ldr	r0, [pc, #652]	; (801eab4 <switchOnBuzzer+0x350>)
 801e828:	f7f5 f9e8 	bl	8013bfc <HAL_GPIO_WritePin>
 801e82c:	2200      	movs	r2, #0
 801e82e:	2140      	movs	r1, #64	; 0x40
 801e830:	48a0      	ldr	r0, [pc, #640]	; (801eab4 <switchOnBuzzer+0x350>)
 801e832:	f7f5 f9e3 	bl	8013bfc <HAL_GPIO_WritePin>
 801e836:	2200      	movs	r2, #0
 801e838:	2120      	movs	r1, #32
 801e83a:	489e      	ldr	r0, [pc, #632]	; (801eab4 <switchOnBuzzer+0x350>)
 801e83c:	f7f5 f9de 	bl	8013bfc <HAL_GPIO_WritePin>
 801e840:	2200      	movs	r2, #0
 801e842:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e846:	489b      	ldr	r0, [pc, #620]	; (801eab4 <switchOnBuzzer+0x350>)
 801e848:	f7f5 f9d8 	bl	8013bfc <HAL_GPIO_WritePin>
 801e84c:	2200      	movs	r2, #0
 801e84e:	2110      	movs	r1, #16
 801e850:	4898      	ldr	r0, [pc, #608]	; (801eab4 <switchOnBuzzer+0x350>)
 801e852:	f7f5 f9d3 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 801e856:	4b99      	ldr	r3, [pc, #612]	; (801eabc <switchOnBuzzer+0x358>)
 801e858:	781b      	ldrb	r3, [r3, #0]
 801e85a:	4618      	mov	r0, r3
 801e85c:	f7f3 fd96 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_ON();
 801e860:	2200      	movs	r2, #0
 801e862:	2180      	movs	r1, #128	; 0x80
 801e864:	4893      	ldr	r0, [pc, #588]	; (801eab4 <switchOnBuzzer+0x350>)
 801e866:	f7f5 f9c9 	bl	8013bfc <HAL_GPIO_WritePin>
 801e86a:	2201      	movs	r2, #1
 801e86c:	2140      	movs	r1, #64	; 0x40
 801e86e:	4891      	ldr	r0, [pc, #580]	; (801eab4 <switchOnBuzzer+0x350>)
 801e870:	f7f5 f9c4 	bl	8013bfc <HAL_GPIO_WritePin>
 801e874:	2201      	movs	r2, #1
 801e876:	2120      	movs	r1, #32
 801e878:	488e      	ldr	r0, [pc, #568]	; (801eab4 <switchOnBuzzer+0x350>)
 801e87a:	f7f5 f9bf 	bl	8013bfc <HAL_GPIO_WritePin>
 801e87e:	2201      	movs	r2, #1
 801e880:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e884:	488b      	ldr	r0, [pc, #556]	; (801eab4 <switchOnBuzzer+0x350>)
 801e886:	f7f5 f9b9 	bl	8013bfc <HAL_GPIO_WritePin>
 801e88a:	2201      	movs	r2, #1
 801e88c:	2110      	movs	r1, #16
 801e88e:	4889      	ldr	r0, [pc, #548]	; (801eab4 <switchOnBuzzer+0x350>)
 801e890:	f7f5 f9b4 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801e894:	4b88      	ldr	r3, [pc, #544]	; (801eab8 <switchOnBuzzer+0x354>)
 801e896:	781b      	ldrb	r3, [r3, #0]
 801e898:	4618      	mov	r0, r3
 801e89a:	f7f3 fd77 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_OFF();
 801e89e:	2201      	movs	r2, #1
 801e8a0:	2180      	movs	r1, #128	; 0x80
 801e8a2:	4884      	ldr	r0, [pc, #528]	; (801eab4 <switchOnBuzzer+0x350>)
 801e8a4:	f7f5 f9aa 	bl	8013bfc <HAL_GPIO_WritePin>
 801e8a8:	2200      	movs	r2, #0
 801e8aa:	2140      	movs	r1, #64	; 0x40
 801e8ac:	4881      	ldr	r0, [pc, #516]	; (801eab4 <switchOnBuzzer+0x350>)
 801e8ae:	f7f5 f9a5 	bl	8013bfc <HAL_GPIO_WritePin>
 801e8b2:	2200      	movs	r2, #0
 801e8b4:	2120      	movs	r1, #32
 801e8b6:	487f      	ldr	r0, [pc, #508]	; (801eab4 <switchOnBuzzer+0x350>)
 801e8b8:	f7f5 f9a0 	bl	8013bfc <HAL_GPIO_WritePin>
 801e8bc:	2200      	movs	r2, #0
 801e8be:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e8c2:	487c      	ldr	r0, [pc, #496]	; (801eab4 <switchOnBuzzer+0x350>)
 801e8c4:	f7f5 f99a 	bl	8013bfc <HAL_GPIO_WritePin>
 801e8c8:	2200      	movs	r2, #0
 801e8ca:	2110      	movs	r1, #16
 801e8cc:	4879      	ldr	r0, [pc, #484]	; (801eab4 <switchOnBuzzer+0x350>)
 801e8ce:	f7f5 f995 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 801e8d2:	4b7a      	ldr	r3, [pc, #488]	; (801eabc <switchOnBuzzer+0x358>)
 801e8d4:	781b      	ldrb	r3, [r3, #0]
 801e8d6:	4618      	mov	r0, r3
 801e8d8:	f7f3 fd58 	bl	801238c <HAL_Delay>

	ALL_INDICATORS_ON();
 801e8dc:	2200      	movs	r2, #0
 801e8de:	2180      	movs	r1, #128	; 0x80
 801e8e0:	4874      	ldr	r0, [pc, #464]	; (801eab4 <switchOnBuzzer+0x350>)
 801e8e2:	f7f5 f98b 	bl	8013bfc <HAL_GPIO_WritePin>
 801e8e6:	2201      	movs	r2, #1
 801e8e8:	2140      	movs	r1, #64	; 0x40
 801e8ea:	4872      	ldr	r0, [pc, #456]	; (801eab4 <switchOnBuzzer+0x350>)
 801e8ec:	f7f5 f986 	bl	8013bfc <HAL_GPIO_WritePin>
 801e8f0:	2201      	movs	r2, #1
 801e8f2:	2120      	movs	r1, #32
 801e8f4:	486f      	ldr	r0, [pc, #444]	; (801eab4 <switchOnBuzzer+0x350>)
 801e8f6:	f7f5 f981 	bl	8013bfc <HAL_GPIO_WritePin>
 801e8fa:	2201      	movs	r2, #1
 801e8fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e900:	486c      	ldr	r0, [pc, #432]	; (801eab4 <switchOnBuzzer+0x350>)
 801e902:	f7f5 f97b 	bl	8013bfc <HAL_GPIO_WritePin>
 801e906:	2201      	movs	r2, #1
 801e908:	2110      	movs	r1, #16
 801e90a:	486a      	ldr	r0, [pc, #424]	; (801eab4 <switchOnBuzzer+0x350>)
 801e90c:	f7f5 f976 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 801e910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801e914:	f7f3 fd3a 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_OFF();
 801e918:	2201      	movs	r2, #1
 801e91a:	2180      	movs	r1, #128	; 0x80
 801e91c:	4865      	ldr	r0, [pc, #404]	; (801eab4 <switchOnBuzzer+0x350>)
 801e91e:	f7f5 f96d 	bl	8013bfc <HAL_GPIO_WritePin>
 801e922:	2200      	movs	r2, #0
 801e924:	2140      	movs	r1, #64	; 0x40
 801e926:	4863      	ldr	r0, [pc, #396]	; (801eab4 <switchOnBuzzer+0x350>)
 801e928:	f7f5 f968 	bl	8013bfc <HAL_GPIO_WritePin>
 801e92c:	2200      	movs	r2, #0
 801e92e:	2120      	movs	r1, #32
 801e930:	4860      	ldr	r0, [pc, #384]	; (801eab4 <switchOnBuzzer+0x350>)
 801e932:	f7f5 f963 	bl	8013bfc <HAL_GPIO_WritePin>
 801e936:	2200      	movs	r2, #0
 801e938:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e93c:	485d      	ldr	r0, [pc, #372]	; (801eab4 <switchOnBuzzer+0x350>)
 801e93e:	f7f5 f95d 	bl	8013bfc <HAL_GPIO_WritePin>
 801e942:	2200      	movs	r2, #0
 801e944:	2110      	movs	r1, #16
 801e946:	485b      	ldr	r0, [pc, #364]	; (801eab4 <switchOnBuzzer+0x350>)
 801e948:	f7f5 f958 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(250);
 801e94c:	20fa      	movs	r0, #250	; 0xfa
 801e94e:	f7f3 fd1d 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_ON();
 801e952:	2200      	movs	r2, #0
 801e954:	2180      	movs	r1, #128	; 0x80
 801e956:	4857      	ldr	r0, [pc, #348]	; (801eab4 <switchOnBuzzer+0x350>)
 801e958:	f7f5 f950 	bl	8013bfc <HAL_GPIO_WritePin>
 801e95c:	2201      	movs	r2, #1
 801e95e:	2140      	movs	r1, #64	; 0x40
 801e960:	4854      	ldr	r0, [pc, #336]	; (801eab4 <switchOnBuzzer+0x350>)
 801e962:	f7f5 f94b 	bl	8013bfc <HAL_GPIO_WritePin>
 801e966:	2201      	movs	r2, #1
 801e968:	2120      	movs	r1, #32
 801e96a:	4852      	ldr	r0, [pc, #328]	; (801eab4 <switchOnBuzzer+0x350>)
 801e96c:	f7f5 f946 	bl	8013bfc <HAL_GPIO_WritePin>
 801e970:	2201      	movs	r2, #1
 801e972:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e976:	484f      	ldr	r0, [pc, #316]	; (801eab4 <switchOnBuzzer+0x350>)
 801e978:	f7f5 f940 	bl	8013bfc <HAL_GPIO_WritePin>
 801e97c:	2201      	movs	r2, #1
 801e97e:	2110      	movs	r1, #16
 801e980:	484c      	ldr	r0, [pc, #304]	; (801eab4 <switchOnBuzzer+0x350>)
 801e982:	f7f5 f93b 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 801e986:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801e98a:	f7f3 fcff 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_OFF();
 801e98e:	2201      	movs	r2, #1
 801e990:	2180      	movs	r1, #128	; 0x80
 801e992:	4848      	ldr	r0, [pc, #288]	; (801eab4 <switchOnBuzzer+0x350>)
 801e994:	f7f5 f932 	bl	8013bfc <HAL_GPIO_WritePin>
 801e998:	2200      	movs	r2, #0
 801e99a:	2140      	movs	r1, #64	; 0x40
 801e99c:	4845      	ldr	r0, [pc, #276]	; (801eab4 <switchOnBuzzer+0x350>)
 801e99e:	f7f5 f92d 	bl	8013bfc <HAL_GPIO_WritePin>
 801e9a2:	2200      	movs	r2, #0
 801e9a4:	2120      	movs	r1, #32
 801e9a6:	4843      	ldr	r0, [pc, #268]	; (801eab4 <switchOnBuzzer+0x350>)
 801e9a8:	f7f5 f928 	bl	8013bfc <HAL_GPIO_WritePin>
 801e9ac:	2200      	movs	r2, #0
 801e9ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e9b2:	4840      	ldr	r0, [pc, #256]	; (801eab4 <switchOnBuzzer+0x350>)
 801e9b4:	f7f5 f922 	bl	8013bfc <HAL_GPIO_WritePin>
 801e9b8:	2200      	movs	r2, #0
 801e9ba:	2110      	movs	r1, #16
 801e9bc:	483d      	ldr	r0, [pc, #244]	; (801eab4 <switchOnBuzzer+0x350>)
 801e9be:	f7f5 f91d 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(250);
 801e9c2:	20fa      	movs	r0, #250	; 0xfa
 801e9c4:	f7f3 fce2 	bl	801238c <HAL_Delay>

	ALL_INDICATORS_ON();
 801e9c8:	2200      	movs	r2, #0
 801e9ca:	2180      	movs	r1, #128	; 0x80
 801e9cc:	4839      	ldr	r0, [pc, #228]	; (801eab4 <switchOnBuzzer+0x350>)
 801e9ce:	f7f5 f915 	bl	8013bfc <HAL_GPIO_WritePin>
 801e9d2:	2201      	movs	r2, #1
 801e9d4:	2140      	movs	r1, #64	; 0x40
 801e9d6:	4837      	ldr	r0, [pc, #220]	; (801eab4 <switchOnBuzzer+0x350>)
 801e9d8:	f7f5 f910 	bl	8013bfc <HAL_GPIO_WritePin>
 801e9dc:	2201      	movs	r2, #1
 801e9de:	2120      	movs	r1, #32
 801e9e0:	4834      	ldr	r0, [pc, #208]	; (801eab4 <switchOnBuzzer+0x350>)
 801e9e2:	f7f5 f90b 	bl	8013bfc <HAL_GPIO_WritePin>
 801e9e6:	2201      	movs	r2, #1
 801e9e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e9ec:	4831      	ldr	r0, [pc, #196]	; (801eab4 <switchOnBuzzer+0x350>)
 801e9ee:	f7f5 f905 	bl	8013bfc <HAL_GPIO_WritePin>
 801e9f2:	2201      	movs	r2, #1
 801e9f4:	2110      	movs	r1, #16
 801e9f6:	482f      	ldr	r0, [pc, #188]	; (801eab4 <switchOnBuzzer+0x350>)
 801e9f8:	f7f5 f900 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801e9fc:	4b2e      	ldr	r3, [pc, #184]	; (801eab8 <switchOnBuzzer+0x354>)
 801e9fe:	781b      	ldrb	r3, [r3, #0]
 801ea00:	4618      	mov	r0, r3
 801ea02:	f7f3 fcc3 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_OFF();
 801ea06:	2201      	movs	r2, #1
 801ea08:	2180      	movs	r1, #128	; 0x80
 801ea0a:	482a      	ldr	r0, [pc, #168]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea0c:	f7f5 f8f6 	bl	8013bfc <HAL_GPIO_WritePin>
 801ea10:	2200      	movs	r2, #0
 801ea12:	2140      	movs	r1, #64	; 0x40
 801ea14:	4827      	ldr	r0, [pc, #156]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea16:	f7f5 f8f1 	bl	8013bfc <HAL_GPIO_WritePin>
 801ea1a:	2200      	movs	r2, #0
 801ea1c:	2120      	movs	r1, #32
 801ea1e:	4825      	ldr	r0, [pc, #148]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea20:	f7f5 f8ec 	bl	8013bfc <HAL_GPIO_WritePin>
 801ea24:	2200      	movs	r2, #0
 801ea26:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ea2a:	4822      	ldr	r0, [pc, #136]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea2c:	f7f5 f8e6 	bl	8013bfc <HAL_GPIO_WritePin>
 801ea30:	2200      	movs	r2, #0
 801ea32:	2110      	movs	r1, #16
 801ea34:	481f      	ldr	r0, [pc, #124]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea36:	f7f5 f8e1 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 801ea3a:	4b20      	ldr	r3, [pc, #128]	; (801eabc <switchOnBuzzer+0x358>)
 801ea3c:	781b      	ldrb	r3, [r3, #0]
 801ea3e:	4618      	mov	r0, r3
 801ea40:	f7f3 fca4 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_ON();
 801ea44:	2200      	movs	r2, #0
 801ea46:	2180      	movs	r1, #128	; 0x80
 801ea48:	481a      	ldr	r0, [pc, #104]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea4a:	f7f5 f8d7 	bl	8013bfc <HAL_GPIO_WritePin>
 801ea4e:	2201      	movs	r2, #1
 801ea50:	2140      	movs	r1, #64	; 0x40
 801ea52:	4818      	ldr	r0, [pc, #96]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea54:	f7f5 f8d2 	bl	8013bfc <HAL_GPIO_WritePin>
 801ea58:	2201      	movs	r2, #1
 801ea5a:	2120      	movs	r1, #32
 801ea5c:	4815      	ldr	r0, [pc, #84]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea5e:	f7f5 f8cd 	bl	8013bfc <HAL_GPIO_WritePin>
 801ea62:	2201      	movs	r2, #1
 801ea64:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ea68:	4812      	ldr	r0, [pc, #72]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea6a:	f7f5 f8c7 	bl	8013bfc <HAL_GPIO_WritePin>
 801ea6e:	2201      	movs	r2, #1
 801ea70:	2110      	movs	r1, #16
 801ea72:	4810      	ldr	r0, [pc, #64]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea74:	f7f5 f8c2 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801ea78:	4b0f      	ldr	r3, [pc, #60]	; (801eab8 <switchOnBuzzer+0x354>)
 801ea7a:	781b      	ldrb	r3, [r3, #0]
 801ea7c:	4618      	mov	r0, r3
 801ea7e:	f7f3 fc85 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_OFF();
 801ea82:	2201      	movs	r2, #1
 801ea84:	2180      	movs	r1, #128	; 0x80
 801ea86:	480b      	ldr	r0, [pc, #44]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea88:	f7f5 f8b8 	bl	8013bfc <HAL_GPIO_WritePin>
 801ea8c:	2200      	movs	r2, #0
 801ea8e:	2140      	movs	r1, #64	; 0x40
 801ea90:	4808      	ldr	r0, [pc, #32]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea92:	f7f5 f8b3 	bl	8013bfc <HAL_GPIO_WritePin>
 801ea96:	2200      	movs	r2, #0
 801ea98:	2120      	movs	r1, #32
 801ea9a:	4806      	ldr	r0, [pc, #24]	; (801eab4 <switchOnBuzzer+0x350>)
 801ea9c:	f7f5 f8ae 	bl	8013bfc <HAL_GPIO_WritePin>
 801eaa0:	2200      	movs	r2, #0
 801eaa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 801eaa6:	4803      	ldr	r0, [pc, #12]	; (801eab4 <switchOnBuzzer+0x350>)
 801eaa8:	f7f5 f8a8 	bl	8013bfc <HAL_GPIO_WritePin>
 801eaac:	2200      	movs	r2, #0
 801eaae:	2110      	movs	r1, #16
 801eab0:	e006      	b.n	801eac0 <switchOnBuzzer+0x35c>
 801eab2:	bf00      	nop
 801eab4:	40020800 	.word	0x40020800
 801eab8:	200000f0 	.word	0x200000f0
 801eabc:	200000f1 	.word	0x200000f1
 801eac0:	4823      	ldr	r0, [pc, #140]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801eac2:	f7f5 f89b 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 801eac6:	4b23      	ldr	r3, [pc, #140]	; (801eb54 <switchOnBuzzer+0x3f0>)
 801eac8:	781b      	ldrb	r3, [r3, #0]
 801eaca:	4618      	mov	r0, r3
 801eacc:	f7f3 fc5e 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_ON();
 801ead0:	2200      	movs	r2, #0
 801ead2:	2180      	movs	r1, #128	; 0x80
 801ead4:	481e      	ldr	r0, [pc, #120]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801ead6:	f7f5 f891 	bl	8013bfc <HAL_GPIO_WritePin>
 801eada:	2201      	movs	r2, #1
 801eadc:	2140      	movs	r1, #64	; 0x40
 801eade:	481c      	ldr	r0, [pc, #112]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801eae0:	f7f5 f88c 	bl	8013bfc <HAL_GPIO_WritePin>
 801eae4:	2201      	movs	r2, #1
 801eae6:	2120      	movs	r1, #32
 801eae8:	4819      	ldr	r0, [pc, #100]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801eaea:	f7f5 f887 	bl	8013bfc <HAL_GPIO_WritePin>
 801eaee:	2201      	movs	r2, #1
 801eaf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801eaf4:	4816      	ldr	r0, [pc, #88]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801eaf6:	f7f5 f881 	bl	8013bfc <HAL_GPIO_WritePin>
 801eafa:	2201      	movs	r2, #1
 801eafc:	2110      	movs	r1, #16
 801eafe:	4814      	ldr	r0, [pc, #80]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801eb00:	f7f5 f87c 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(ontime);
 801eb04:	4b14      	ldr	r3, [pc, #80]	; (801eb58 <switchOnBuzzer+0x3f4>)
 801eb06:	781b      	ldrb	r3, [r3, #0]
 801eb08:	4618      	mov	r0, r3
 801eb0a:	f7f3 fc3f 	bl	801238c <HAL_Delay>
	ALL_INDICATORS_OFF();
 801eb0e:	2201      	movs	r2, #1
 801eb10:	2180      	movs	r1, #128	; 0x80
 801eb12:	480f      	ldr	r0, [pc, #60]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801eb14:	f7f5 f872 	bl	8013bfc <HAL_GPIO_WritePin>
 801eb18:	2200      	movs	r2, #0
 801eb1a:	2140      	movs	r1, #64	; 0x40
 801eb1c:	480c      	ldr	r0, [pc, #48]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801eb1e:	f7f5 f86d 	bl	8013bfc <HAL_GPIO_WritePin>
 801eb22:	2200      	movs	r2, #0
 801eb24:	2120      	movs	r1, #32
 801eb26:	480a      	ldr	r0, [pc, #40]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801eb28:	f7f5 f868 	bl	8013bfc <HAL_GPIO_WritePin>
 801eb2c:	2200      	movs	r2, #0
 801eb2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801eb32:	4807      	ldr	r0, [pc, #28]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801eb34:	f7f5 f862 	bl	8013bfc <HAL_GPIO_WritePin>
 801eb38:	2200      	movs	r2, #0
 801eb3a:	2110      	movs	r1, #16
 801eb3c:	4804      	ldr	r0, [pc, #16]	; (801eb50 <switchOnBuzzer+0x3ec>)
 801eb3e:	f7f5 f85d 	bl	8013bfc <HAL_GPIO_WritePin>
	HAL_Delay(offtime);
 801eb42:	4b04      	ldr	r3, [pc, #16]	; (801eb54 <switchOnBuzzer+0x3f0>)
 801eb44:	781b      	ldrb	r3, [r3, #0]
 801eb46:	4618      	mov	r0, r3
 801eb48:	f7f3 fc20 	bl	801238c <HAL_Delay>
}
 801eb4c:	bf00      	nop
 801eb4e:	bd80      	pop	{r7, pc}
 801eb50:	40020800 	.word	0x40020800
 801eb54:	200000f1 	.word	0x200000f1
 801eb58:	200000f0 	.word	0x200000f0

0801eb5c <VishwaAdcInit>:
------------------------------------------------------------------------------*/
#define ADC_TEST 				(0)
#define NUMBER_OF_CONVERSIONS	(10)
#define ADC_THRESHOLD			(7)

void VishwaAdcInit(void){
 801eb5c:	b580      	push	{r7, lr}
 801eb5e:	af00      	add	r7, sp, #0
	/*Vishwesh : 4 ADC configured, However only 2 being used
	 * ADC samples at rate of 10kHz. Good enough for 150 Hz pulses
	 * */

	memset(Appl_u16pAdcDmaValues,0,sizeof(Appl_u16pAdcDmaValues));
 801eb60:	2208      	movs	r2, #8
 801eb62:	2100      	movs	r1, #0
 801eb64:	481b      	ldr	r0, [pc, #108]	; (801ebd4 <VishwaAdcInit+0x78>)
 801eb66:	f001 fd4d 	bl	8020604 <memset>
	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Appl_u16pAdcDmaValues, 4)){
 801eb6a:	2204      	movs	r2, #4
 801eb6c:	4919      	ldr	r1, [pc, #100]	; (801ebd4 <VishwaAdcInit+0x78>)
 801eb6e:	481a      	ldr	r0, [pc, #104]	; (801ebd8 <VishwaAdcInit+0x7c>)
 801eb70:	f7f3 fc74 	bl	801245c <HAL_ADC_Start_DMA>
 801eb74:	4603      	mov	r3, r0
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	d001      	beq.n	801eb7e <VishwaAdcInit+0x22>
		Error_Handler();
 801eb7a:	f7f2 ff7b 	bl	8011a74 <Error_Handler>
	}
	RectifiedSineAnalyzer_Config(&Sinev1,10000,0.1);
 801eb7e:	eddf 0a17 	vldr	s1, [pc, #92]	; 801ebdc <VishwaAdcInit+0x80>
 801eb82:	ed9f 0a17 	vldr	s0, [pc, #92]	; 801ebe0 <VishwaAdcInit+0x84>
 801eb86:	4817      	ldr	r0, [pc, #92]	; (801ebe4 <VishwaAdcInit+0x88>)
 801eb88:	f000 f9a8 	bl	801eedc <RectifiedSineAnalyzer_Config>
	RectifiedSineAnalyzer_Config(&Sinev2,10000,0.1);
 801eb8c:	eddf 0a13 	vldr	s1, [pc, #76]	; 801ebdc <VishwaAdcInit+0x80>
 801eb90:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801ebe0 <VishwaAdcInit+0x84>
 801eb94:	4814      	ldr	r0, [pc, #80]	; (801ebe8 <VishwaAdcInit+0x8c>)
 801eb96:	f000 f9a1 	bl	801eedc <RectifiedSineAnalyzer_Config>
	RectifiedSineAnalyzer_Config(&Sinei1,10000,0.1);
 801eb9a:	eddf 0a10 	vldr	s1, [pc, #64]	; 801ebdc <VishwaAdcInit+0x80>
 801eb9e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801ebe0 <VishwaAdcInit+0x84>
 801eba2:	4812      	ldr	r0, [pc, #72]	; (801ebec <VishwaAdcInit+0x90>)
 801eba4:	f000 f99a 	bl	801eedc <RectifiedSineAnalyzer_Config>
	RectifiedSineAnalyzer_Config(&Sinei2,10000,0.1);
 801eba8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 801ebdc <VishwaAdcInit+0x80>
 801ebac:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801ebe0 <VishwaAdcInit+0x84>
 801ebb0:	480f      	ldr	r0, [pc, #60]	; (801ebf0 <VishwaAdcInit+0x94>)
 801ebb2:	f000 f993 	bl	801eedc <RectifiedSineAnalyzer_Config>
	Sinev1.Recalibrateflag = 0;
 801ebb6:	4b0b      	ldr	r3, [pc, #44]	; (801ebe4 <VishwaAdcInit+0x88>)
 801ebb8:	2200      	movs	r2, #0
 801ebba:	701a      	strb	r2, [r3, #0]
	Sinei1.Recalibrateflag = 0;
 801ebbc:	4b0b      	ldr	r3, [pc, #44]	; (801ebec <VishwaAdcInit+0x90>)
 801ebbe:	2200      	movs	r2, #0
 801ebc0:	701a      	strb	r2, [r3, #0]
	Sinev2.Recalibrateflag = 0;
 801ebc2:	4b09      	ldr	r3, [pc, #36]	; (801ebe8 <VishwaAdcInit+0x8c>)
 801ebc4:	2200      	movs	r2, #0
 801ebc6:	701a      	strb	r2, [r3, #0]
	Sinei2.Recalibrateflag = 0;
 801ebc8:	4b09      	ldr	r3, [pc, #36]	; (801ebf0 <VishwaAdcInit+0x94>)
 801ebca:	2200      	movs	r2, #0
 801ebcc:	701a      	strb	r2, [r3, #0]
}
 801ebce:	bf00      	nop
 801ebd0:	bd80      	pop	{r7, pc}
 801ebd2:	bf00      	nop
 801ebd4:	200005f0 	.word	0x200005f0
 801ebd8:	200044b8 	.word	0x200044b8
 801ebdc:	3dcccccd 	.word	0x3dcccccd
 801ebe0:	461c4000 	.word	0x461c4000
 801ebe4:	20004b34 	.word	0x20004b34
 801ebe8:	20004af8 	.word	0x20004af8
 801ebec:	20004db4 	.word	0x20004db4
 801ebf0:	20004d78 	.word	0x20004d78

0801ebf4 <Appl_fncCalculateFeedbackShuntCurrent>:
  ptrArrNumbers[pos] = nextNum;
  //return the average
  return *ptrSum / len;
}

void Appl_fncCalculateFeedbackShuntCurrent(void){
 801ebf4:	b580      	push	{r7, lr}
 801ebf6:	af00      	add	r7, sp, #0
	static uint16_t AdcCalibCounter;
	if(Sinei1.Recalibrateflag == 1){
 801ebf8:	4b27      	ldr	r3, [pc, #156]	; (801ec98 <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 801ebfa:	781b      	ldrb	r3, [r3, #0]
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d01f      	beq.n	801ec40 <Appl_fncCalculateFeedbackShuntCurrent+0x4c>
		AdcCalibCounter++;
 801ec00:	4b26      	ldr	r3, [pc, #152]	; (801ec9c <Appl_fncCalculateFeedbackShuntCurrent+0xa8>)
 801ec02:	881b      	ldrh	r3, [r3, #0]
 801ec04:	3301      	adds	r3, #1
 801ec06:	b29a      	uxth	r2, r3
 801ec08:	4b24      	ldr	r3, [pc, #144]	; (801ec9c <Appl_fncCalculateFeedbackShuntCurrent+0xa8>)
 801ec0a:	801a      	strh	r2, [r3, #0]
		Sinei1.SinemeasOffset = Appl_u16pAdcDmaValues[1] * ( VISHWA_ADC_4096_INVERSE);
 801ec0c:	4b24      	ldr	r3, [pc, #144]	; (801eca0 <Appl_fncCalculateFeedbackShuntCurrent+0xac>)
 801ec0e:	885b      	ldrh	r3, [r3, #2]
 801ec10:	ee07 3a90 	vmov	s15, r3
 801ec14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec18:	ed9f 7a22 	vldr	s14, [pc, #136]	; 801eca4 <Appl_fncCalculateFeedbackShuntCurrent+0xb0>
 801ec1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ec20:	4b1d      	ldr	r3, [pc, #116]	; (801ec98 <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 801ec22:	edc3 7a01 	vstr	s15, [r3, #4]
		if(AdcCalibCounter > 25000){
 801ec26:	4b1d      	ldr	r3, [pc, #116]	; (801ec9c <Appl_fncCalculateFeedbackShuntCurrent+0xa8>)
 801ec28:	881b      	ldrh	r3, [r3, #0]
 801ec2a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801ec2e:	4293      	cmp	r3, r2
 801ec30:	d930      	bls.n	801ec94 <Appl_fncCalculateFeedbackShuntCurrent+0xa0>
			AdcCalibCounter = 0;
 801ec32:	4b1a      	ldr	r3, [pc, #104]	; (801ec9c <Appl_fncCalculateFeedbackShuntCurrent+0xa8>)
 801ec34:	2200      	movs	r2, #0
 801ec36:	801a      	strh	r2, [r3, #0]
			Sinei1.Recalibrateflag = 0;
 801ec38:	4b17      	ldr	r3, [pc, #92]	; (801ec98 <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 801ec3a:	2200      	movs	r2, #0
 801ec3c:	701a      	strb	r2, [r3, #0]
		RectifiedSineAnalyzer(&Sinei1);
//		SM_ApplParam.RealtimeShuntCurrent = Sinei1.vRms * VISHWA_I1_MAX_SENSE_AMPS;
		SM_ApplParam.RealtimeShuntCurrent_vrms = Sinei1.vRms * VISHWA_I1_MAX_SENSE_AMPS;
		SM_ApplParam.RealtimeShuntCurrent_vavg = Sinei1.vAvg * VISHWA_I1_MAX_SENSE_AMPS;
	}
}
 801ec3e:	e029      	b.n	801ec94 <Appl_fncCalculateFeedbackShuntCurrent+0xa0>
		Sinei1.SinemeasOffset = 0;
 801ec40:	4b15      	ldr	r3, [pc, #84]	; (801ec98 <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 801ec42:	f04f 0200 	mov.w	r2, #0
 801ec46:	605a      	str	r2, [r3, #4]
		Sinei1.Sinemeaspu = (Appl_u16pAdcDmaValues[1] ) * VISHWA_ADC_4096_INVERSE ;
 801ec48:	4b15      	ldr	r3, [pc, #84]	; (801eca0 <Appl_fncCalculateFeedbackShuntCurrent+0xac>)
 801ec4a:	885b      	ldrh	r3, [r3, #2]
 801ec4c:	ee07 3a90 	vmov	s15, r3
 801ec50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec54:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801eca4 <Appl_fncCalculateFeedbackShuntCurrent+0xb0>
 801ec58:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ec5c:	4b0e      	ldr	r3, [pc, #56]	; (801ec98 <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 801ec5e:	edc3 7a02 	vstr	s15, [r3, #8]
		RectifiedSineAnalyzer(&Sinei1);
 801ec62:	480d      	ldr	r0, [pc, #52]	; (801ec98 <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 801ec64:	f000 f8b4 	bl	801edd0 <RectifiedSineAnalyzer>
		SM_ApplParam.RealtimeShuntCurrent_vrms = Sinei1.vRms * VISHWA_I1_MAX_SENSE_AMPS;
 801ec68:	4b0b      	ldr	r3, [pc, #44]	; (801ec98 <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 801ec6a:	ed93 7a05 	vldr	s14, [r3, #20]
 801ec6e:	4b0e      	ldr	r3, [pc, #56]	; (801eca8 <Appl_fncCalculateFeedbackShuntCurrent+0xb4>)
 801ec70:	edd3 7a00 	vldr	s15, [r3]
 801ec74:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec78:	4b0c      	ldr	r3, [pc, #48]	; (801ecac <Appl_fncCalculateFeedbackShuntCurrent+0xb8>)
 801ec7a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		SM_ApplParam.RealtimeShuntCurrent_vavg = Sinei1.vAvg * VISHWA_I1_MAX_SENSE_AMPS;
 801ec7e:	4b06      	ldr	r3, [pc, #24]	; (801ec98 <Appl_fncCalculateFeedbackShuntCurrent+0xa4>)
 801ec80:	ed93 7a06 	vldr	s14, [r3, #24]
 801ec84:	4b08      	ldr	r3, [pc, #32]	; (801eca8 <Appl_fncCalculateFeedbackShuntCurrent+0xb4>)
 801ec86:	edd3 7a00 	vldr	s15, [r3]
 801ec8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec8e:	4b07      	ldr	r3, [pc, #28]	; (801ecac <Appl_fncCalculateFeedbackShuntCurrent+0xb8>)
 801ec90:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 801ec94:	bf00      	nop
 801ec96:	bd80      	pop	{r7, pc}
 801ec98:	20004db4 	.word	0x20004db4
 801ec9c:	200005f8 	.word	0x200005f8
 801eca0:	200005f0 	.word	0x200005f0
 801eca4:	39800000 	.word	0x39800000
 801eca8:	200000f8 	.word	0x200000f8
 801ecac:	20004974 	.word	0x20004974

0801ecb0 <HAL_ADC_ConvCpltCallback>:
			if(FindPeakBufferHallCurrent[i]> peakValue)peakValue = FindPeakBufferHallCurrent[i];
		}
	}
	return peakValue;
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 801ecb0:	b580      	push	{r7, lr}
 801ecb2:	b082      	sub	sp, #8
 801ecb4:	af00      	add	r7, sp, #0
 801ecb6:	6078      	str	r0, [r7, #4]
	Appl_fncCalculateFeedbackVoltage();
 801ecb8:	f000 f820 	bl	801ecfc <Appl_fncCalculateFeedbackVoltage>
//	Appl_fncCalculateFeedbackHallCurrent();
	Appl_fncCalculateFeedbackShuntCurrent();
 801ecbc:	f7ff ff9a 	bl	801ebf4 <Appl_fncCalculateFeedbackShuntCurrent>
	SM_ApplParam.RealtimeCurrent = SM_ApplParam.RealtimeShuntCurrent_vavg;
 801ecc0:	4b0d      	ldr	r3, [pc, #52]	; (801ecf8 <HAL_ADC_ConvCpltCallback+0x48>)
 801ecc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ecc4:	4a0c      	ldr	r2, [pc, #48]	; (801ecf8 <HAL_ADC_ConvCpltCallback+0x48>)
 801ecc6:	6293      	str	r3, [r2, #40]	; 0x28
	SM_ApplParam.RealtimeVoltage = SM_ApplParam.Realtime_floatingVoltage_vavg;
 801ecc8:	4b0b      	ldr	r3, [pc, #44]	; (801ecf8 <HAL_ADC_ConvCpltCallback+0x48>)
 801ecca:	6a1b      	ldr	r3, [r3, #32]
 801eccc:	4a0a      	ldr	r2, [pc, #40]	; (801ecf8 <HAL_ADC_ConvCpltCallback+0x48>)
 801ecce:	6253      	str	r3, [r2, #36]	; 0x24
	if(SM_ApplParam.RealtimeVoltage < 5) SM_ApplParam.RealtimeVoltage = 0;
 801ecd0:	4b09      	ldr	r3, [pc, #36]	; (801ecf8 <HAL_ADC_ConvCpltCallback+0x48>)
 801ecd2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801ecd6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801ecda:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ecde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ece2:	d503      	bpl.n	801ecec <HAL_ADC_ConvCpltCallback+0x3c>
 801ece4:	4b04      	ldr	r3, [pc, #16]	; (801ecf8 <HAL_ADC_ConvCpltCallback+0x48>)
 801ece6:	f04f 0200 	mov.w	r2, #0
 801ecea:	625a      	str	r2, [r3, #36]	; 0x24
	Appl_AdcPhaseAngleDetermination();
 801ecec:	f7ff f9c6 	bl	801e07c <Appl_AdcPhaseAngleDetermination>
}
 801ecf0:	bf00      	nop
 801ecf2:	3708      	adds	r7, #8
 801ecf4:	46bd      	mov	sp, r7
 801ecf6:	bd80      	pop	{r7, pc}
 801ecf8:	20004974 	.word	0x20004974

0801ecfc <Appl_fncCalculateFeedbackVoltage>:


void Appl_fncCalculateFeedbackVoltage(void){
 801ecfc:	b580      	push	{r7, lr}
 801ecfe:	af00      	add	r7, sp, #0
	Appl_u8MovingAvgPositionVoltage++;
	if(Appl_u8MovingAvgPositionVoltage>=MOVING_AVERAGE_SIZE_VOLTAGE)Appl_u8MovingAvgPositionVoltage=0;
	SM_ApplParam.Realtime_floatingVoltage = ((Appl_fltAdcRawValueVoltage * 3.3)*(1)/((4096.0)*(0.002123142))) - 0.005;
#endif
#if 1
	if(Sinev1.Recalibrateflag == 1){
 801ed00:	4b2d      	ldr	r3, [pc, #180]	; (801edb8 <Appl_fncCalculateFeedbackVoltage+0xbc>)
 801ed02:	781b      	ldrb	r3, [r3, #0]
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	d01f      	beq.n	801ed48 <Appl_fncCalculateFeedbackVoltage+0x4c>
		AdcCalibCounter++;
 801ed08:	4b2c      	ldr	r3, [pc, #176]	; (801edbc <Appl_fncCalculateFeedbackVoltage+0xc0>)
 801ed0a:	881b      	ldrh	r3, [r3, #0]
 801ed0c:	3301      	adds	r3, #1
 801ed0e:	b29a      	uxth	r2, r3
 801ed10:	4b2a      	ldr	r3, [pc, #168]	; (801edbc <Appl_fncCalculateFeedbackVoltage+0xc0>)
 801ed12:	801a      	strh	r2, [r3, #0]
		Sinev1.SinemeasOffset = Appl_u16pAdcDmaValues[0] * ( VISHWA_ADC_4096_INVERSE);
 801ed14:	4b2a      	ldr	r3, [pc, #168]	; (801edc0 <Appl_fncCalculateFeedbackVoltage+0xc4>)
 801ed16:	881b      	ldrh	r3, [r3, #0]
 801ed18:	ee07 3a90 	vmov	s15, r3
 801ed1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed20:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801edc4 <Appl_fncCalculateFeedbackVoltage+0xc8>
 801ed24:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ed28:	4b23      	ldr	r3, [pc, #140]	; (801edb8 <Appl_fncCalculateFeedbackVoltage+0xbc>)
 801ed2a:	edc3 7a01 	vstr	s15, [r3, #4]
		if(AdcCalibCounter > 25000){
 801ed2e:	4b23      	ldr	r3, [pc, #140]	; (801edbc <Appl_fncCalculateFeedbackVoltage+0xc0>)
 801ed30:	881b      	ldrh	r3, [r3, #0]
 801ed32:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801ed36:	4293      	cmp	r3, r2
 801ed38:	d93c      	bls.n	801edb4 <Appl_fncCalculateFeedbackVoltage+0xb8>
			AdcCalibCounter = 0;
 801ed3a:	4b20      	ldr	r3, [pc, #128]	; (801edbc <Appl_fncCalculateFeedbackVoltage+0xc0>)
 801ed3c:	2200      	movs	r2, #0
 801ed3e:	801a      	strh	r2, [r3, #0]
			Sinev1.Recalibrateflag = 0;
 801ed40:	4b1d      	ldr	r3, [pc, #116]	; (801edb8 <Appl_fncCalculateFeedbackVoltage+0xbc>)
 801ed42:	2200      	movs	r2, #0
 801ed44:	701a      	strb	r2, [r3, #0]
		SM_ApplParam.Realtime_floatingVoltage_vrms = Sinev1.vRms * VISHWA_V1_MAX_SENSE_VOLTS;
		SM_ApplParam.Realtime_floatingVoltage_vavg = Sinev1.vAvg * VISHWA_V1_MAX_SENSE_VOLTS;

	}
#endif
}
 801ed46:	e035      	b.n	801edb4 <Appl_fncCalculateFeedbackVoltage+0xb8>
		Sinev1.Sinemeaspu = Appl_u16pAdcDmaValues[0] * VISHWA_ADC_4096_INVERSE - Sinev1.SinemeasOffset;
 801ed48:	4b1d      	ldr	r3, [pc, #116]	; (801edc0 <Appl_fncCalculateFeedbackVoltage+0xc4>)
 801ed4a:	881b      	ldrh	r3, [r3, #0]
 801ed4c:	ee07 3a90 	vmov	s15, r3
 801ed50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed54:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 801edc4 <Appl_fncCalculateFeedbackVoltage+0xc8>
 801ed58:	ee27 7a87 	vmul.f32	s14, s15, s14
 801ed5c:	4b16      	ldr	r3, [pc, #88]	; (801edb8 <Appl_fncCalculateFeedbackVoltage+0xbc>)
 801ed5e:	edd3 7a01 	vldr	s15, [r3, #4]
 801ed62:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ed66:	4b14      	ldr	r3, [pc, #80]	; (801edb8 <Appl_fncCalculateFeedbackVoltage+0xbc>)
 801ed68:	edc3 7a02 	vstr	s15, [r3, #8]
		RectifiedSineAnalyzer(&Sinev1);
 801ed6c:	4812      	ldr	r0, [pc, #72]	; (801edb8 <Appl_fncCalculateFeedbackVoltage+0xbc>)
 801ed6e:	f000 f82f 	bl	801edd0 <RectifiedSineAnalyzer>
		SM_ApplParam.Realtime_floatingVoltage = Sinev1.vRms * VISHWA_V1_MAX_SENSE_VOLTS;
 801ed72:	4b11      	ldr	r3, [pc, #68]	; (801edb8 <Appl_fncCalculateFeedbackVoltage+0xbc>)
 801ed74:	ed93 7a05 	vldr	s14, [r3, #20]
 801ed78:	4b13      	ldr	r3, [pc, #76]	; (801edc8 <Appl_fncCalculateFeedbackVoltage+0xcc>)
 801ed7a:	edd3 7a00 	vldr	s15, [r3]
 801ed7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed82:	4b12      	ldr	r3, [pc, #72]	; (801edcc <Appl_fncCalculateFeedbackVoltage+0xd0>)
 801ed84:	edc3 7a06 	vstr	s15, [r3, #24]
		SM_ApplParam.Realtime_floatingVoltage_vrms = Sinev1.vRms * VISHWA_V1_MAX_SENSE_VOLTS;
 801ed88:	4b0b      	ldr	r3, [pc, #44]	; (801edb8 <Appl_fncCalculateFeedbackVoltage+0xbc>)
 801ed8a:	ed93 7a05 	vldr	s14, [r3, #20]
 801ed8e:	4b0e      	ldr	r3, [pc, #56]	; (801edc8 <Appl_fncCalculateFeedbackVoltage+0xcc>)
 801ed90:	edd3 7a00 	vldr	s15, [r3]
 801ed94:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed98:	4b0c      	ldr	r3, [pc, #48]	; (801edcc <Appl_fncCalculateFeedbackVoltage+0xd0>)
 801ed9a:	edc3 7a07 	vstr	s15, [r3, #28]
		SM_ApplParam.Realtime_floatingVoltage_vavg = Sinev1.vAvg * VISHWA_V1_MAX_SENSE_VOLTS;
 801ed9e:	4b06      	ldr	r3, [pc, #24]	; (801edb8 <Appl_fncCalculateFeedbackVoltage+0xbc>)
 801eda0:	ed93 7a06 	vldr	s14, [r3, #24]
 801eda4:	4b08      	ldr	r3, [pc, #32]	; (801edc8 <Appl_fncCalculateFeedbackVoltage+0xcc>)
 801eda6:	edd3 7a00 	vldr	s15, [r3]
 801edaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801edae:	4b07      	ldr	r3, [pc, #28]	; (801edcc <Appl_fncCalculateFeedbackVoltage+0xd0>)
 801edb0:	edc3 7a08 	vstr	s15, [r3, #32]
}
 801edb4:	bf00      	nop
 801edb6:	bd80      	pop	{r7, pc}
 801edb8:	20004b34 	.word	0x20004b34
 801edbc:	200005fa 	.word	0x200005fa
 801edc0:	200005f0 	.word	0x200005f0
 801edc4:	39800000 	.word	0x39800000
 801edc8:	200000f4 	.word	0x200000f4
 801edcc:	20004974 	.word	0x20004974

0801edd0 <RectifiedSineAnalyzer>:

uint32_t noofsamples=200;

void RectifiedSineAnalyzer(vishwaAdc* v){
 801edd0:	b580      	push	{r7, lr}
 801edd2:	b082      	sub	sp, #8
 801edd4:	af00      	add	r7, sp, #0
 801edd6:	6078      	str	r0, [r7, #4]
	v->nSamples++;
 801edd8:	687b      	ldr	r3, [r7, #4]
 801edda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eddc:	1c5a      	adds	r2, r3, #1
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	62da      	str	r2, [r3, #44]	; 0x2c
	v->vSum = v->vSum+v->Sinemeaspu;
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	ed93 7a08 	vldr	s14, [r3, #32]
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	edd3 7a02 	vldr	s15, [r3, #8]
 801edee:	ee77 7a27 	vadd.f32	s15, s14, s15
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	edc3 7a08 	vstr	s15, [r3, #32]
    v->vSqrSum = v->vSqrSum+(v->Sinemeaspu*v->Sinemeaspu);
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	edd3 6a02 	vldr	s13, [r3, #8]
 801ee04:	687b      	ldr	r3, [r7, #4]
 801ee06:	edd3 7a02 	vldr	s15, [r3, #8]
 801ee0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ee0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    v->vEma = v->vEma+(v->emaFilterMultiplier*(v->Sinemeaspu - v->vEma));
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	ed93 7a07 	vldr	s14, [r3, #28]
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 801ee24:	687b      	ldr	r3, [r7, #4]
 801ee26:	ed93 6a02 	vldr	s12, [r3, #8]
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	edd3 7a07 	vldr	s15, [r3, #28]
 801ee30:	ee76 7a67 	vsub.f32	s15, s12, s15
 801ee34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ee38:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	edc3 7a07 	vstr	s15, [r3, #28]
    if(v->nSamples >= noofsamples)
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee46:	461a      	mov	r2, r3
 801ee48:	4b23      	ldr	r3, [pc, #140]	; (801eed8 <RectifiedSineAnalyzer+0x108>)
 801ee4a:	681b      	ldr	r3, [r3, #0]
 801ee4c:	429a      	cmp	r2, r3
 801ee4e:	d33f      	bcc.n	801eed0 <RectifiedSineAnalyzer+0x100>
    {
        v->inverse_nSamples = (1.0f)/(v->nSamples);
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee54:	ee07 3a90 	vmov	s15, r3
 801ee58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ee5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ee60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        v->sqrt_inverse_nSamples = sqrtf(v->inverse_nSamples);
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801ee70:	eeb0 0a67 	vmov.f32	s0, s15
 801ee74:	f001 fb18 	bl	80204a8 <sqrtf>
 801ee78:	eef0 7a40 	vmov.f32	s15, s0
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        v->vAvg = (v->vSum*v->inverse_nSamples);
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	ed93 7a08 	vldr	s14, [r3, #32]
 801ee88:	687b      	ldr	r3, [r7, #4]
 801ee8a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801ee8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	edc3 7a06 	vstr	s15, [r3, #24]
        v->vRms = sqrtf(v->vSqrSum)*v->sqrt_inverse_nSamples;
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801ee9e:	eeb0 0a67 	vmov.f32	s0, s15
 801eea2:	f001 fb01 	bl	80204a8 <sqrtf>
 801eea6:	eeb0 7a40 	vmov.f32	s14, s0
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801eeb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eeb4:	687b      	ldr	r3, [r7, #4]
 801eeb6:	edc3 7a05 	vstr	s15, [r3, #20]
        v->nSamples=0;
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	2200      	movs	r2, #0
 801eebe:	62da      	str	r2, [r3, #44]	; 0x2c
        v->vSum=0;
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	f04f 0200 	mov.w	r2, #0
 801eec6:	621a      	str	r2, [r3, #32]
        v->vSqrSum=0;
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	f04f 0200 	mov.w	r2, #0
 801eece:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 801eed0:	bf00      	nop
 801eed2:	3708      	adds	r7, #8
 801eed4:	46bd      	mov	sp, r7
 801eed6:	bd80      	pop	{r7, pc}
 801eed8:	200000fc 	.word	0x200000fc

0801eedc <RectifiedSineAnalyzer_Config>:

void RectifiedSineAnalyzer_Config(vishwaAdc* v,float isrFrequency, float threshold){
 801eedc:	b480      	push	{r7}
 801eede:	b085      	sub	sp, #20
 801eee0:	af00      	add	r7, sp, #0
 801eee2:	60f8      	str	r0, [r7, #12]
 801eee4:	ed87 0a02 	vstr	s0, [r7, #8]
 801eee8:	edc7 0a01 	vstr	s1, [r7, #4]
    v->sampleFreq = (float)(isrFrequency);
 801eeec:	68fb      	ldr	r3, [r7, #12]
 801eeee:	68ba      	ldr	r2, [r7, #8]
 801eef0:	60da      	str	r2, [r3, #12]
    v->threshold = (float)(threshold);
 801eef2:	68fb      	ldr	r3, [r7, #12]
 801eef4:	687a      	ldr	r2, [r7, #4]
 801eef6:	611a      	str	r2, [r3, #16]
    v->emaFilterMultiplier=2.0f/isrFrequency;
 801eef8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801eefc:	ed97 7a02 	vldr	s14, [r7, #8]
 801ef00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ef04:	68fb      	ldr	r3, [r7, #12]
 801ef06:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 801ef0a:	bf00      	nop
 801ef0c:	3714      	adds	r7, #20
 801ef0e:	46bd      	mov	sp, r7
 801ef10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef14:	4770      	bx	lr

0801ef16 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801ef16:	b480      	push	{r7}
 801ef18:	b085      	sub	sp, #20
 801ef1a:	af00      	add	r7, sp, #0
 801ef1c:	4603      	mov	r3, r0
 801ef1e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801ef20:	2300      	movs	r3, #0
 801ef22:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801ef24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ef28:	2b84      	cmp	r3, #132	; 0x84
 801ef2a:	d005      	beq.n	801ef38 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801ef2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801ef30:	68fb      	ldr	r3, [r7, #12]
 801ef32:	4413      	add	r3, r2
 801ef34:	3303      	adds	r3, #3
 801ef36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801ef38:	68fb      	ldr	r3, [r7, #12]
}
 801ef3a:	4618      	mov	r0, r3
 801ef3c:	3714      	adds	r7, #20
 801ef3e:	46bd      	mov	sp, r7
 801ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef44:	4770      	bx	lr

0801ef46 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801ef46:	b580      	push	{r7, lr}
 801ef48:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801ef4a:	f000 fb15 	bl	801f578 <vTaskStartScheduler>
  
  return osOK;
 801ef4e:	2300      	movs	r3, #0
}
 801ef50:	4618      	mov	r0, r3
 801ef52:	bd80      	pop	{r7, pc}

0801ef54 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801ef54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef56:	b089      	sub	sp, #36	; 0x24
 801ef58:	af04      	add	r7, sp, #16
 801ef5a:	6078      	str	r0, [r7, #4]
 801ef5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	695b      	ldr	r3, [r3, #20]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d020      	beq.n	801efa8 <osThreadCreate+0x54>
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	699b      	ldr	r3, [r3, #24]
 801ef6a:	2b00      	cmp	r3, #0
 801ef6c:	d01c      	beq.n	801efa8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	685c      	ldr	r4, [r3, #4]
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	681d      	ldr	r5, [r3, #0]
 801ef76:	687b      	ldr	r3, [r7, #4]
 801ef78:	691e      	ldr	r6, [r3, #16]
 801ef7a:	687b      	ldr	r3, [r7, #4]
 801ef7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ef80:	4618      	mov	r0, r3
 801ef82:	f7ff ffc8 	bl	801ef16 <makeFreeRtosPriority>
 801ef86:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	695b      	ldr	r3, [r3, #20]
 801ef8c:	687a      	ldr	r2, [r7, #4]
 801ef8e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801ef90:	9202      	str	r2, [sp, #8]
 801ef92:	9301      	str	r3, [sp, #4]
 801ef94:	9100      	str	r1, [sp, #0]
 801ef96:	683b      	ldr	r3, [r7, #0]
 801ef98:	4632      	mov	r2, r6
 801ef9a:	4629      	mov	r1, r5
 801ef9c:	4620      	mov	r0, r4
 801ef9e:	f000 f8d9 	bl	801f154 <xTaskCreateStatic>
 801efa2:	4603      	mov	r3, r0
 801efa4:	60fb      	str	r3, [r7, #12]
 801efa6:	e01c      	b.n	801efe2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	685c      	ldr	r4, [r3, #4]
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801efb4:	b29e      	uxth	r6, r3
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801efbc:	4618      	mov	r0, r3
 801efbe:	f7ff ffaa 	bl	801ef16 <makeFreeRtosPriority>
 801efc2:	4602      	mov	r2, r0
 801efc4:	f107 030c 	add.w	r3, r7, #12
 801efc8:	9301      	str	r3, [sp, #4]
 801efca:	9200      	str	r2, [sp, #0]
 801efcc:	683b      	ldr	r3, [r7, #0]
 801efce:	4632      	mov	r2, r6
 801efd0:	4629      	mov	r1, r5
 801efd2:	4620      	mov	r0, r4
 801efd4:	f000 f91b 	bl	801f20e <xTaskCreate>
 801efd8:	4603      	mov	r3, r0
 801efda:	2b01      	cmp	r3, #1
 801efdc:	d001      	beq.n	801efe2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801efde:	2300      	movs	r3, #0
 801efe0:	e000      	b.n	801efe4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801efe2:	68fb      	ldr	r3, [r7, #12]
}
 801efe4:	4618      	mov	r0, r3
 801efe6:	3714      	adds	r7, #20
 801efe8:	46bd      	mov	sp, r7
 801efea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801efec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801efec:	b480      	push	{r7}
 801efee:	b083      	sub	sp, #12
 801eff0:	af00      	add	r7, sp, #0
 801eff2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	f103 0208 	add.w	r2, r3, #8
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	f04f 32ff 	mov.w	r2, #4294967295
 801f004:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	f103 0208 	add.w	r2, r3, #8
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	f103 0208 	add.w	r2, r3, #8
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	2200      	movs	r2, #0
 801f01e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801f020:	bf00      	nop
 801f022:	370c      	adds	r7, #12
 801f024:	46bd      	mov	sp, r7
 801f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f02a:	4770      	bx	lr

0801f02c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801f02c:	b480      	push	{r7}
 801f02e:	b083      	sub	sp, #12
 801f030:	af00      	add	r7, sp, #0
 801f032:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	2200      	movs	r2, #0
 801f038:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801f03a:	bf00      	nop
 801f03c:	370c      	adds	r7, #12
 801f03e:	46bd      	mov	sp, r7
 801f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f044:	4770      	bx	lr

0801f046 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801f046:	b480      	push	{r7}
 801f048:	b085      	sub	sp, #20
 801f04a:	af00      	add	r7, sp, #0
 801f04c:	6078      	str	r0, [r7, #4]
 801f04e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	685b      	ldr	r3, [r3, #4]
 801f054:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801f056:	683b      	ldr	r3, [r7, #0]
 801f058:	68fa      	ldr	r2, [r7, #12]
 801f05a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801f05c:	68fb      	ldr	r3, [r7, #12]
 801f05e:	689a      	ldr	r2, [r3, #8]
 801f060:	683b      	ldr	r3, [r7, #0]
 801f062:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801f064:	68fb      	ldr	r3, [r7, #12]
 801f066:	689b      	ldr	r3, [r3, #8]
 801f068:	683a      	ldr	r2, [r7, #0]
 801f06a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801f06c:	68fb      	ldr	r3, [r7, #12]
 801f06e:	683a      	ldr	r2, [r7, #0]
 801f070:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801f072:	683b      	ldr	r3, [r7, #0]
 801f074:	687a      	ldr	r2, [r7, #4]
 801f076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	681b      	ldr	r3, [r3, #0]
 801f07c:	1c5a      	adds	r2, r3, #1
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	601a      	str	r2, [r3, #0]
}
 801f082:	bf00      	nop
 801f084:	3714      	adds	r7, #20
 801f086:	46bd      	mov	sp, r7
 801f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f08c:	4770      	bx	lr

0801f08e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801f08e:	b480      	push	{r7}
 801f090:	b085      	sub	sp, #20
 801f092:	af00      	add	r7, sp, #0
 801f094:	6078      	str	r0, [r7, #4]
 801f096:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801f098:	683b      	ldr	r3, [r7, #0]
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801f09e:	68bb      	ldr	r3, [r7, #8]
 801f0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f0a4:	d103      	bne.n	801f0ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	691b      	ldr	r3, [r3, #16]
 801f0aa:	60fb      	str	r3, [r7, #12]
 801f0ac:	e00c      	b.n	801f0c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	3308      	adds	r3, #8
 801f0b2:	60fb      	str	r3, [r7, #12]
 801f0b4:	e002      	b.n	801f0bc <vListInsert+0x2e>
 801f0b6:	68fb      	ldr	r3, [r7, #12]
 801f0b8:	685b      	ldr	r3, [r3, #4]
 801f0ba:	60fb      	str	r3, [r7, #12]
 801f0bc:	68fb      	ldr	r3, [r7, #12]
 801f0be:	685b      	ldr	r3, [r3, #4]
 801f0c0:	681b      	ldr	r3, [r3, #0]
 801f0c2:	68ba      	ldr	r2, [r7, #8]
 801f0c4:	429a      	cmp	r2, r3
 801f0c6:	d2f6      	bcs.n	801f0b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801f0c8:	68fb      	ldr	r3, [r7, #12]
 801f0ca:	685a      	ldr	r2, [r3, #4]
 801f0cc:	683b      	ldr	r3, [r7, #0]
 801f0ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801f0d0:	683b      	ldr	r3, [r7, #0]
 801f0d2:	685b      	ldr	r3, [r3, #4]
 801f0d4:	683a      	ldr	r2, [r7, #0]
 801f0d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801f0d8:	683b      	ldr	r3, [r7, #0]
 801f0da:	68fa      	ldr	r2, [r7, #12]
 801f0dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	683a      	ldr	r2, [r7, #0]
 801f0e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801f0e4:	683b      	ldr	r3, [r7, #0]
 801f0e6:	687a      	ldr	r2, [r7, #4]
 801f0e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	681b      	ldr	r3, [r3, #0]
 801f0ee:	1c5a      	adds	r2, r3, #1
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	601a      	str	r2, [r3, #0]
}
 801f0f4:	bf00      	nop
 801f0f6:	3714      	adds	r7, #20
 801f0f8:	46bd      	mov	sp, r7
 801f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0fe:	4770      	bx	lr

0801f100 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801f100:	b480      	push	{r7}
 801f102:	b085      	sub	sp, #20
 801f104:	af00      	add	r7, sp, #0
 801f106:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	691b      	ldr	r3, [r3, #16]
 801f10c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801f10e:	687b      	ldr	r3, [r7, #4]
 801f110:	685b      	ldr	r3, [r3, #4]
 801f112:	687a      	ldr	r2, [r7, #4]
 801f114:	6892      	ldr	r2, [r2, #8]
 801f116:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	689b      	ldr	r3, [r3, #8]
 801f11c:	687a      	ldr	r2, [r7, #4]
 801f11e:	6852      	ldr	r2, [r2, #4]
 801f120:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801f122:	68fb      	ldr	r3, [r7, #12]
 801f124:	685b      	ldr	r3, [r3, #4]
 801f126:	687a      	ldr	r2, [r7, #4]
 801f128:	429a      	cmp	r2, r3
 801f12a:	d103      	bne.n	801f134 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	689a      	ldr	r2, [r3, #8]
 801f130:	68fb      	ldr	r3, [r7, #12]
 801f132:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	2200      	movs	r2, #0
 801f138:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801f13a:	68fb      	ldr	r3, [r7, #12]
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	1e5a      	subs	r2, r3, #1
 801f140:	68fb      	ldr	r3, [r7, #12]
 801f142:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801f144:	68fb      	ldr	r3, [r7, #12]
 801f146:	681b      	ldr	r3, [r3, #0]
}
 801f148:	4618      	mov	r0, r3
 801f14a:	3714      	adds	r7, #20
 801f14c:	46bd      	mov	sp, r7
 801f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f152:	4770      	bx	lr

0801f154 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801f154:	b580      	push	{r7, lr}
 801f156:	b08e      	sub	sp, #56	; 0x38
 801f158:	af04      	add	r7, sp, #16
 801f15a:	60f8      	str	r0, [r7, #12]
 801f15c:	60b9      	str	r1, [r7, #8]
 801f15e:	607a      	str	r2, [r7, #4]
 801f160:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801f162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f164:	2b00      	cmp	r3, #0
 801f166:	d10a      	bne.n	801f17e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801f168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f16c:	f383 8811 	msr	BASEPRI, r3
 801f170:	f3bf 8f6f 	isb	sy
 801f174:	f3bf 8f4f 	dsb	sy
 801f178:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801f17a:	bf00      	nop
 801f17c:	e7fe      	b.n	801f17c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801f17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f180:	2b00      	cmp	r3, #0
 801f182:	d10a      	bne.n	801f19a <xTaskCreateStatic+0x46>
	__asm volatile
 801f184:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f188:	f383 8811 	msr	BASEPRI, r3
 801f18c:	f3bf 8f6f 	isb	sy
 801f190:	f3bf 8f4f 	dsb	sy
 801f194:	61fb      	str	r3, [r7, #28]
}
 801f196:	bf00      	nop
 801f198:	e7fe      	b.n	801f198 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801f19a:	2354      	movs	r3, #84	; 0x54
 801f19c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801f19e:	693b      	ldr	r3, [r7, #16]
 801f1a0:	2b54      	cmp	r3, #84	; 0x54
 801f1a2:	d00a      	beq.n	801f1ba <xTaskCreateStatic+0x66>
	__asm volatile
 801f1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1a8:	f383 8811 	msr	BASEPRI, r3
 801f1ac:	f3bf 8f6f 	isb	sy
 801f1b0:	f3bf 8f4f 	dsb	sy
 801f1b4:	61bb      	str	r3, [r7, #24]
}
 801f1b6:	bf00      	nop
 801f1b8:	e7fe      	b.n	801f1b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801f1ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801f1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d01e      	beq.n	801f200 <xTaskCreateStatic+0xac>
 801f1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	d01b      	beq.n	801f200 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801f1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f1d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801f1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1d4:	2202      	movs	r2, #2
 801f1d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801f1da:	2300      	movs	r3, #0
 801f1dc:	9303      	str	r3, [sp, #12]
 801f1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1e0:	9302      	str	r3, [sp, #8]
 801f1e2:	f107 0314 	add.w	r3, r7, #20
 801f1e6:	9301      	str	r3, [sp, #4]
 801f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1ea:	9300      	str	r3, [sp, #0]
 801f1ec:	683b      	ldr	r3, [r7, #0]
 801f1ee:	687a      	ldr	r2, [r7, #4]
 801f1f0:	68b9      	ldr	r1, [r7, #8]
 801f1f2:	68f8      	ldr	r0, [r7, #12]
 801f1f4:	f000 f850 	bl	801f298 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801f1f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f1fa:	f000 f8d5 	bl	801f3a8 <prvAddNewTaskToReadyList>
 801f1fe:	e001      	b.n	801f204 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801f200:	2300      	movs	r3, #0
 801f202:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801f204:	697b      	ldr	r3, [r7, #20]
	}
 801f206:	4618      	mov	r0, r3
 801f208:	3728      	adds	r7, #40	; 0x28
 801f20a:	46bd      	mov	sp, r7
 801f20c:	bd80      	pop	{r7, pc}

0801f20e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801f20e:	b580      	push	{r7, lr}
 801f210:	b08c      	sub	sp, #48	; 0x30
 801f212:	af04      	add	r7, sp, #16
 801f214:	60f8      	str	r0, [r7, #12]
 801f216:	60b9      	str	r1, [r7, #8]
 801f218:	603b      	str	r3, [r7, #0]
 801f21a:	4613      	mov	r3, r2
 801f21c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801f21e:	88fb      	ldrh	r3, [r7, #6]
 801f220:	009b      	lsls	r3, r3, #2
 801f222:	4618      	mov	r0, r3
 801f224:	f000 ff10 	bl	8020048 <pvPortMalloc>
 801f228:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801f22a:	697b      	ldr	r3, [r7, #20]
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	d00e      	beq.n	801f24e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801f230:	2054      	movs	r0, #84	; 0x54
 801f232:	f000 ff09 	bl	8020048 <pvPortMalloc>
 801f236:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801f238:	69fb      	ldr	r3, [r7, #28]
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	d003      	beq.n	801f246 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801f23e:	69fb      	ldr	r3, [r7, #28]
 801f240:	697a      	ldr	r2, [r7, #20]
 801f242:	631a      	str	r2, [r3, #48]	; 0x30
 801f244:	e005      	b.n	801f252 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801f246:	6978      	ldr	r0, [r7, #20]
 801f248:	f000 ffca 	bl	80201e0 <vPortFree>
 801f24c:	e001      	b.n	801f252 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801f24e:	2300      	movs	r3, #0
 801f250:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801f252:	69fb      	ldr	r3, [r7, #28]
 801f254:	2b00      	cmp	r3, #0
 801f256:	d017      	beq.n	801f288 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801f258:	69fb      	ldr	r3, [r7, #28]
 801f25a:	2200      	movs	r2, #0
 801f25c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801f260:	88fa      	ldrh	r2, [r7, #6]
 801f262:	2300      	movs	r3, #0
 801f264:	9303      	str	r3, [sp, #12]
 801f266:	69fb      	ldr	r3, [r7, #28]
 801f268:	9302      	str	r3, [sp, #8]
 801f26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f26c:	9301      	str	r3, [sp, #4]
 801f26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f270:	9300      	str	r3, [sp, #0]
 801f272:	683b      	ldr	r3, [r7, #0]
 801f274:	68b9      	ldr	r1, [r7, #8]
 801f276:	68f8      	ldr	r0, [r7, #12]
 801f278:	f000 f80e 	bl	801f298 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801f27c:	69f8      	ldr	r0, [r7, #28]
 801f27e:	f000 f893 	bl	801f3a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801f282:	2301      	movs	r3, #1
 801f284:	61bb      	str	r3, [r7, #24]
 801f286:	e002      	b.n	801f28e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801f288:	f04f 33ff 	mov.w	r3, #4294967295
 801f28c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801f28e:	69bb      	ldr	r3, [r7, #24]
	}
 801f290:	4618      	mov	r0, r3
 801f292:	3720      	adds	r7, #32
 801f294:	46bd      	mov	sp, r7
 801f296:	bd80      	pop	{r7, pc}

0801f298 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801f298:	b580      	push	{r7, lr}
 801f29a:	b088      	sub	sp, #32
 801f29c:	af00      	add	r7, sp, #0
 801f29e:	60f8      	str	r0, [r7, #12]
 801f2a0:	60b9      	str	r1, [r7, #8]
 801f2a2:	607a      	str	r2, [r7, #4]
 801f2a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801f2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f2a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f2b0:	3b01      	subs	r3, #1
 801f2b2:	009b      	lsls	r3, r3, #2
 801f2b4:	4413      	add	r3, r2
 801f2b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801f2b8:	69bb      	ldr	r3, [r7, #24]
 801f2ba:	f023 0307 	bic.w	r3, r3, #7
 801f2be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801f2c0:	69bb      	ldr	r3, [r7, #24]
 801f2c2:	f003 0307 	and.w	r3, r3, #7
 801f2c6:	2b00      	cmp	r3, #0
 801f2c8:	d00a      	beq.n	801f2e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 801f2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f2ce:	f383 8811 	msr	BASEPRI, r3
 801f2d2:	f3bf 8f6f 	isb	sy
 801f2d6:	f3bf 8f4f 	dsb	sy
 801f2da:	617b      	str	r3, [r7, #20]
}
 801f2dc:	bf00      	nop
 801f2de:	e7fe      	b.n	801f2de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801f2e0:	68bb      	ldr	r3, [r7, #8]
 801f2e2:	2b00      	cmp	r3, #0
 801f2e4:	d01f      	beq.n	801f326 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801f2e6:	2300      	movs	r3, #0
 801f2e8:	61fb      	str	r3, [r7, #28]
 801f2ea:	e012      	b.n	801f312 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801f2ec:	68ba      	ldr	r2, [r7, #8]
 801f2ee:	69fb      	ldr	r3, [r7, #28]
 801f2f0:	4413      	add	r3, r2
 801f2f2:	7819      	ldrb	r1, [r3, #0]
 801f2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f2f6:	69fb      	ldr	r3, [r7, #28]
 801f2f8:	4413      	add	r3, r2
 801f2fa:	3334      	adds	r3, #52	; 0x34
 801f2fc:	460a      	mov	r2, r1
 801f2fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801f300:	68ba      	ldr	r2, [r7, #8]
 801f302:	69fb      	ldr	r3, [r7, #28]
 801f304:	4413      	add	r3, r2
 801f306:	781b      	ldrb	r3, [r3, #0]
 801f308:	2b00      	cmp	r3, #0
 801f30a:	d006      	beq.n	801f31a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801f30c:	69fb      	ldr	r3, [r7, #28]
 801f30e:	3301      	adds	r3, #1
 801f310:	61fb      	str	r3, [r7, #28]
 801f312:	69fb      	ldr	r3, [r7, #28]
 801f314:	2b0f      	cmp	r3, #15
 801f316:	d9e9      	bls.n	801f2ec <prvInitialiseNewTask+0x54>
 801f318:	e000      	b.n	801f31c <prvInitialiseNewTask+0x84>
			{
				break;
 801f31a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801f31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f31e:	2200      	movs	r2, #0
 801f320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801f324:	e003      	b.n	801f32e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801f326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f328:	2200      	movs	r2, #0
 801f32a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801f32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f330:	2b06      	cmp	r3, #6
 801f332:	d901      	bls.n	801f338 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801f334:	2306      	movs	r3, #6
 801f336:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801f338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f33a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f33c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801f33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f342:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801f344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f346:	2200      	movs	r2, #0
 801f348:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801f34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f34c:	3304      	adds	r3, #4
 801f34e:	4618      	mov	r0, r3
 801f350:	f7ff fe6c 	bl	801f02c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801f354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f356:	3318      	adds	r3, #24
 801f358:	4618      	mov	r0, r3
 801f35a:	f7ff fe67 	bl	801f02c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801f35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f362:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f366:	f1c3 0207 	rsb	r2, r3, #7
 801f36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f36c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801f36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f372:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801f374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f376:	2200      	movs	r2, #0
 801f378:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801f37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f37c:	2200      	movs	r2, #0
 801f37e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801f382:	683a      	ldr	r2, [r7, #0]
 801f384:	68f9      	ldr	r1, [r7, #12]
 801f386:	69b8      	ldr	r0, [r7, #24]
 801f388:	f000 fc50 	bl	801fc2c <pxPortInitialiseStack>
 801f38c:	4602      	mov	r2, r0
 801f38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801f392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f394:	2b00      	cmp	r3, #0
 801f396:	d002      	beq.n	801f39e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f39a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f39c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f39e:	bf00      	nop
 801f3a0:	3720      	adds	r7, #32
 801f3a2:	46bd      	mov	sp, r7
 801f3a4:	bd80      	pop	{r7, pc}
	...

0801f3a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801f3a8:	b580      	push	{r7, lr}
 801f3aa:	b082      	sub	sp, #8
 801f3ac:	af00      	add	r7, sp, #0
 801f3ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801f3b0:	f000 fd68 	bl	801fe84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801f3b4:	4b2a      	ldr	r3, [pc, #168]	; (801f460 <prvAddNewTaskToReadyList+0xb8>)
 801f3b6:	681b      	ldr	r3, [r3, #0]
 801f3b8:	3301      	adds	r3, #1
 801f3ba:	4a29      	ldr	r2, [pc, #164]	; (801f460 <prvAddNewTaskToReadyList+0xb8>)
 801f3bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801f3be:	4b29      	ldr	r3, [pc, #164]	; (801f464 <prvAddNewTaskToReadyList+0xbc>)
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d109      	bne.n	801f3da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801f3c6:	4a27      	ldr	r2, [pc, #156]	; (801f464 <prvAddNewTaskToReadyList+0xbc>)
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801f3cc:	4b24      	ldr	r3, [pc, #144]	; (801f460 <prvAddNewTaskToReadyList+0xb8>)
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	2b01      	cmp	r3, #1
 801f3d2:	d110      	bne.n	801f3f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801f3d4:	f000 fb06 	bl	801f9e4 <prvInitialiseTaskLists>
 801f3d8:	e00d      	b.n	801f3f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801f3da:	4b23      	ldr	r3, [pc, #140]	; (801f468 <prvAddNewTaskToReadyList+0xc0>)
 801f3dc:	681b      	ldr	r3, [r3, #0]
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	d109      	bne.n	801f3f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801f3e2:	4b20      	ldr	r3, [pc, #128]	; (801f464 <prvAddNewTaskToReadyList+0xbc>)
 801f3e4:	681b      	ldr	r3, [r3, #0]
 801f3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f3ec:	429a      	cmp	r2, r3
 801f3ee:	d802      	bhi.n	801f3f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801f3f0:	4a1c      	ldr	r2, [pc, #112]	; (801f464 <prvAddNewTaskToReadyList+0xbc>)
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801f3f6:	4b1d      	ldr	r3, [pc, #116]	; (801f46c <prvAddNewTaskToReadyList+0xc4>)
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	3301      	adds	r3, #1
 801f3fc:	4a1b      	ldr	r2, [pc, #108]	; (801f46c <prvAddNewTaskToReadyList+0xc4>)
 801f3fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f404:	2201      	movs	r2, #1
 801f406:	409a      	lsls	r2, r3
 801f408:	4b19      	ldr	r3, [pc, #100]	; (801f470 <prvAddNewTaskToReadyList+0xc8>)
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	4313      	orrs	r3, r2
 801f40e:	4a18      	ldr	r2, [pc, #96]	; (801f470 <prvAddNewTaskToReadyList+0xc8>)
 801f410:	6013      	str	r3, [r2, #0]
 801f412:	687b      	ldr	r3, [r7, #4]
 801f414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f416:	4613      	mov	r3, r2
 801f418:	009b      	lsls	r3, r3, #2
 801f41a:	4413      	add	r3, r2
 801f41c:	009b      	lsls	r3, r3, #2
 801f41e:	4a15      	ldr	r2, [pc, #84]	; (801f474 <prvAddNewTaskToReadyList+0xcc>)
 801f420:	441a      	add	r2, r3
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	3304      	adds	r3, #4
 801f426:	4619      	mov	r1, r3
 801f428:	4610      	mov	r0, r2
 801f42a:	f7ff fe0c 	bl	801f046 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801f42e:	f000 fd59 	bl	801fee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801f432:	4b0d      	ldr	r3, [pc, #52]	; (801f468 <prvAddNewTaskToReadyList+0xc0>)
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	2b00      	cmp	r3, #0
 801f438:	d00e      	beq.n	801f458 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801f43a:	4b0a      	ldr	r3, [pc, #40]	; (801f464 <prvAddNewTaskToReadyList+0xbc>)
 801f43c:	681b      	ldr	r3, [r3, #0]
 801f43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f444:	429a      	cmp	r2, r3
 801f446:	d207      	bcs.n	801f458 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801f448:	4b0b      	ldr	r3, [pc, #44]	; (801f478 <prvAddNewTaskToReadyList+0xd0>)
 801f44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f44e:	601a      	str	r2, [r3, #0]
 801f450:	f3bf 8f4f 	dsb	sy
 801f454:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f458:	bf00      	nop
 801f45a:	3708      	adds	r7, #8
 801f45c:	46bd      	mov	sp, r7
 801f45e:	bd80      	pop	{r7, pc}
 801f460:	200006fc 	.word	0x200006fc
 801f464:	200005fc 	.word	0x200005fc
 801f468:	20000708 	.word	0x20000708
 801f46c:	20000718 	.word	0x20000718
 801f470:	20000704 	.word	0x20000704
 801f474:	20000600 	.word	0x20000600
 801f478:	e000ed04 	.word	0xe000ed04

0801f47c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801f47c:	b580      	push	{r7, lr}
 801f47e:	b08a      	sub	sp, #40	; 0x28
 801f480:	af00      	add	r7, sp, #0
 801f482:	6078      	str	r0, [r7, #4]
 801f484:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801f486:	2300      	movs	r3, #0
 801f488:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d10a      	bne.n	801f4a6 <vTaskDelayUntil+0x2a>
	__asm volatile
 801f490:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f494:	f383 8811 	msr	BASEPRI, r3
 801f498:	f3bf 8f6f 	isb	sy
 801f49c:	f3bf 8f4f 	dsb	sy
 801f4a0:	617b      	str	r3, [r7, #20]
}
 801f4a2:	bf00      	nop
 801f4a4:	e7fe      	b.n	801f4a4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801f4a6:	683b      	ldr	r3, [r7, #0]
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	d10a      	bne.n	801f4c2 <vTaskDelayUntil+0x46>
	__asm volatile
 801f4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f4b0:	f383 8811 	msr	BASEPRI, r3
 801f4b4:	f3bf 8f6f 	isb	sy
 801f4b8:	f3bf 8f4f 	dsb	sy
 801f4bc:	613b      	str	r3, [r7, #16]
}
 801f4be:	bf00      	nop
 801f4c0:	e7fe      	b.n	801f4c0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801f4c2:	4b2a      	ldr	r3, [pc, #168]	; (801f56c <vTaskDelayUntil+0xf0>)
 801f4c4:	681b      	ldr	r3, [r3, #0]
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d00a      	beq.n	801f4e0 <vTaskDelayUntil+0x64>
	__asm volatile
 801f4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f4ce:	f383 8811 	msr	BASEPRI, r3
 801f4d2:	f3bf 8f6f 	isb	sy
 801f4d6:	f3bf 8f4f 	dsb	sy
 801f4da:	60fb      	str	r3, [r7, #12]
}
 801f4dc:	bf00      	nop
 801f4de:	e7fe      	b.n	801f4de <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 801f4e0:	f000 f8aa 	bl	801f638 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801f4e4:	4b22      	ldr	r3, [pc, #136]	; (801f570 <vTaskDelayUntil+0xf4>)
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	683a      	ldr	r2, [r7, #0]
 801f4f0:	4413      	add	r3, r2
 801f4f2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	681b      	ldr	r3, [r3, #0]
 801f4f8:	6a3a      	ldr	r2, [r7, #32]
 801f4fa:	429a      	cmp	r2, r3
 801f4fc:	d20b      	bcs.n	801f516 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	681b      	ldr	r3, [r3, #0]
 801f502:	69fa      	ldr	r2, [r7, #28]
 801f504:	429a      	cmp	r2, r3
 801f506:	d211      	bcs.n	801f52c <vTaskDelayUntil+0xb0>
 801f508:	69fa      	ldr	r2, [r7, #28]
 801f50a:	6a3b      	ldr	r3, [r7, #32]
 801f50c:	429a      	cmp	r2, r3
 801f50e:	d90d      	bls.n	801f52c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801f510:	2301      	movs	r3, #1
 801f512:	627b      	str	r3, [r7, #36]	; 0x24
 801f514:	e00a      	b.n	801f52c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	681b      	ldr	r3, [r3, #0]
 801f51a:	69fa      	ldr	r2, [r7, #28]
 801f51c:	429a      	cmp	r2, r3
 801f51e:	d303      	bcc.n	801f528 <vTaskDelayUntil+0xac>
 801f520:	69fa      	ldr	r2, [r7, #28]
 801f522:	6a3b      	ldr	r3, [r7, #32]
 801f524:	429a      	cmp	r2, r3
 801f526:	d901      	bls.n	801f52c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801f528:	2301      	movs	r3, #1
 801f52a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	69fa      	ldr	r2, [r7, #28]
 801f530:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801f532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f534:	2b00      	cmp	r3, #0
 801f536:	d006      	beq.n	801f546 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801f538:	69fa      	ldr	r2, [r7, #28]
 801f53a:	6a3b      	ldr	r3, [r7, #32]
 801f53c:	1ad3      	subs	r3, r2, r3
 801f53e:	2100      	movs	r1, #0
 801f540:	4618      	mov	r0, r3
 801f542:	f000 fb0d 	bl	801fb60 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801f546:	f000 f885 	bl	801f654 <xTaskResumeAll>
 801f54a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801f54c:	69bb      	ldr	r3, [r7, #24]
 801f54e:	2b00      	cmp	r3, #0
 801f550:	d107      	bne.n	801f562 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 801f552:	4b08      	ldr	r3, [pc, #32]	; (801f574 <vTaskDelayUntil+0xf8>)
 801f554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f558:	601a      	str	r2, [r3, #0]
 801f55a:	f3bf 8f4f 	dsb	sy
 801f55e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f562:	bf00      	nop
 801f564:	3728      	adds	r7, #40	; 0x28
 801f566:	46bd      	mov	sp, r7
 801f568:	bd80      	pop	{r7, pc}
 801f56a:	bf00      	nop
 801f56c:	20000724 	.word	0x20000724
 801f570:	20000700 	.word	0x20000700
 801f574:	e000ed04 	.word	0xe000ed04

0801f578 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801f578:	b580      	push	{r7, lr}
 801f57a:	b08a      	sub	sp, #40	; 0x28
 801f57c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801f57e:	2300      	movs	r3, #0
 801f580:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801f582:	2300      	movs	r3, #0
 801f584:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801f586:	463a      	mov	r2, r7
 801f588:	1d39      	adds	r1, r7, #4
 801f58a:	f107 0308 	add.w	r3, r7, #8
 801f58e:	4618      	mov	r0, r3
 801f590:	f7f1 fc10 	bl	8010db4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801f594:	6839      	ldr	r1, [r7, #0]
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	68ba      	ldr	r2, [r7, #8]
 801f59a:	9202      	str	r2, [sp, #8]
 801f59c:	9301      	str	r3, [sp, #4]
 801f59e:	2300      	movs	r3, #0
 801f5a0:	9300      	str	r3, [sp, #0]
 801f5a2:	2300      	movs	r3, #0
 801f5a4:	460a      	mov	r2, r1
 801f5a6:	491e      	ldr	r1, [pc, #120]	; (801f620 <vTaskStartScheduler+0xa8>)
 801f5a8:	481e      	ldr	r0, [pc, #120]	; (801f624 <vTaskStartScheduler+0xac>)
 801f5aa:	f7ff fdd3 	bl	801f154 <xTaskCreateStatic>
 801f5ae:	4603      	mov	r3, r0
 801f5b0:	4a1d      	ldr	r2, [pc, #116]	; (801f628 <vTaskStartScheduler+0xb0>)
 801f5b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801f5b4:	4b1c      	ldr	r3, [pc, #112]	; (801f628 <vTaskStartScheduler+0xb0>)
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	d002      	beq.n	801f5c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801f5bc:	2301      	movs	r3, #1
 801f5be:	617b      	str	r3, [r7, #20]
 801f5c0:	e001      	b.n	801f5c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801f5c2:	2300      	movs	r3, #0
 801f5c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801f5c6:	697b      	ldr	r3, [r7, #20]
 801f5c8:	2b01      	cmp	r3, #1
 801f5ca:	d116      	bne.n	801f5fa <vTaskStartScheduler+0x82>
	__asm volatile
 801f5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f5d0:	f383 8811 	msr	BASEPRI, r3
 801f5d4:	f3bf 8f6f 	isb	sy
 801f5d8:	f3bf 8f4f 	dsb	sy
 801f5dc:	613b      	str	r3, [r7, #16]
}
 801f5de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801f5e0:	4b12      	ldr	r3, [pc, #72]	; (801f62c <vTaskStartScheduler+0xb4>)
 801f5e2:	f04f 32ff 	mov.w	r2, #4294967295
 801f5e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801f5e8:	4b11      	ldr	r3, [pc, #68]	; (801f630 <vTaskStartScheduler+0xb8>)
 801f5ea:	2201      	movs	r2, #1
 801f5ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801f5ee:	4b11      	ldr	r3, [pc, #68]	; (801f634 <vTaskStartScheduler+0xbc>)
 801f5f0:	2200      	movs	r2, #0
 801f5f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801f5f4:	f000 fba4 	bl	801fd40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801f5f8:	e00e      	b.n	801f618 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801f5fa:	697b      	ldr	r3, [r7, #20]
 801f5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f600:	d10a      	bne.n	801f618 <vTaskStartScheduler+0xa0>
	__asm volatile
 801f602:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f606:	f383 8811 	msr	BASEPRI, r3
 801f60a:	f3bf 8f6f 	isb	sy
 801f60e:	f3bf 8f4f 	dsb	sy
 801f612:	60fb      	str	r3, [r7, #12]
}
 801f614:	bf00      	nop
 801f616:	e7fe      	b.n	801f616 <vTaskStartScheduler+0x9e>
}
 801f618:	bf00      	nop
 801f61a:	3718      	adds	r7, #24
 801f61c:	46bd      	mov	sp, r7
 801f61e:	bd80      	pop	{r7, pc}
 801f620:	08023390 	.word	0x08023390
 801f624:	0801f9b5 	.word	0x0801f9b5
 801f628:	20000720 	.word	0x20000720
 801f62c:	2000071c 	.word	0x2000071c
 801f630:	20000708 	.word	0x20000708
 801f634:	20000700 	.word	0x20000700

0801f638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801f638:	b480      	push	{r7}
 801f63a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801f63c:	4b04      	ldr	r3, [pc, #16]	; (801f650 <vTaskSuspendAll+0x18>)
 801f63e:	681b      	ldr	r3, [r3, #0]
 801f640:	3301      	adds	r3, #1
 801f642:	4a03      	ldr	r2, [pc, #12]	; (801f650 <vTaskSuspendAll+0x18>)
 801f644:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801f646:	bf00      	nop
 801f648:	46bd      	mov	sp, r7
 801f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f64e:	4770      	bx	lr
 801f650:	20000724 	.word	0x20000724

0801f654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801f654:	b580      	push	{r7, lr}
 801f656:	b084      	sub	sp, #16
 801f658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801f65a:	2300      	movs	r3, #0
 801f65c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801f65e:	2300      	movs	r3, #0
 801f660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801f662:	4b41      	ldr	r3, [pc, #260]	; (801f768 <xTaskResumeAll+0x114>)
 801f664:	681b      	ldr	r3, [r3, #0]
 801f666:	2b00      	cmp	r3, #0
 801f668:	d10a      	bne.n	801f680 <xTaskResumeAll+0x2c>
	__asm volatile
 801f66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f66e:	f383 8811 	msr	BASEPRI, r3
 801f672:	f3bf 8f6f 	isb	sy
 801f676:	f3bf 8f4f 	dsb	sy
 801f67a:	603b      	str	r3, [r7, #0]
}
 801f67c:	bf00      	nop
 801f67e:	e7fe      	b.n	801f67e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801f680:	f000 fc00 	bl	801fe84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801f684:	4b38      	ldr	r3, [pc, #224]	; (801f768 <xTaskResumeAll+0x114>)
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	3b01      	subs	r3, #1
 801f68a:	4a37      	ldr	r2, [pc, #220]	; (801f768 <xTaskResumeAll+0x114>)
 801f68c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f68e:	4b36      	ldr	r3, [pc, #216]	; (801f768 <xTaskResumeAll+0x114>)
 801f690:	681b      	ldr	r3, [r3, #0]
 801f692:	2b00      	cmp	r3, #0
 801f694:	d161      	bne.n	801f75a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801f696:	4b35      	ldr	r3, [pc, #212]	; (801f76c <xTaskResumeAll+0x118>)
 801f698:	681b      	ldr	r3, [r3, #0]
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	d05d      	beq.n	801f75a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801f69e:	e02e      	b.n	801f6fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f6a0:	4b33      	ldr	r3, [pc, #204]	; (801f770 <xTaskResumeAll+0x11c>)
 801f6a2:	68db      	ldr	r3, [r3, #12]
 801f6a4:	68db      	ldr	r3, [r3, #12]
 801f6a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f6a8:	68fb      	ldr	r3, [r7, #12]
 801f6aa:	3318      	adds	r3, #24
 801f6ac:	4618      	mov	r0, r3
 801f6ae:	f7ff fd27 	bl	801f100 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	3304      	adds	r3, #4
 801f6b6:	4618      	mov	r0, r3
 801f6b8:	f7ff fd22 	bl	801f100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801f6bc:	68fb      	ldr	r3, [r7, #12]
 801f6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f6c0:	2201      	movs	r2, #1
 801f6c2:	409a      	lsls	r2, r3
 801f6c4:	4b2b      	ldr	r3, [pc, #172]	; (801f774 <xTaskResumeAll+0x120>)
 801f6c6:	681b      	ldr	r3, [r3, #0]
 801f6c8:	4313      	orrs	r3, r2
 801f6ca:	4a2a      	ldr	r2, [pc, #168]	; (801f774 <xTaskResumeAll+0x120>)
 801f6cc:	6013      	str	r3, [r2, #0]
 801f6ce:	68fb      	ldr	r3, [r7, #12]
 801f6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f6d2:	4613      	mov	r3, r2
 801f6d4:	009b      	lsls	r3, r3, #2
 801f6d6:	4413      	add	r3, r2
 801f6d8:	009b      	lsls	r3, r3, #2
 801f6da:	4a27      	ldr	r2, [pc, #156]	; (801f778 <xTaskResumeAll+0x124>)
 801f6dc:	441a      	add	r2, r3
 801f6de:	68fb      	ldr	r3, [r7, #12]
 801f6e0:	3304      	adds	r3, #4
 801f6e2:	4619      	mov	r1, r3
 801f6e4:	4610      	mov	r0, r2
 801f6e6:	f7ff fcae 	bl	801f046 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801f6ea:	68fb      	ldr	r3, [r7, #12]
 801f6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f6ee:	4b23      	ldr	r3, [pc, #140]	; (801f77c <xTaskResumeAll+0x128>)
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f6f4:	429a      	cmp	r2, r3
 801f6f6:	d302      	bcc.n	801f6fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801f6f8:	4b21      	ldr	r3, [pc, #132]	; (801f780 <xTaskResumeAll+0x12c>)
 801f6fa:	2201      	movs	r2, #1
 801f6fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801f6fe:	4b1c      	ldr	r3, [pc, #112]	; (801f770 <xTaskResumeAll+0x11c>)
 801f700:	681b      	ldr	r3, [r3, #0]
 801f702:	2b00      	cmp	r3, #0
 801f704:	d1cc      	bne.n	801f6a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801f706:	68fb      	ldr	r3, [r7, #12]
 801f708:	2b00      	cmp	r3, #0
 801f70a:	d001      	beq.n	801f710 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801f70c:	f000 fa08 	bl	801fb20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801f710:	4b1c      	ldr	r3, [pc, #112]	; (801f784 <xTaskResumeAll+0x130>)
 801f712:	681b      	ldr	r3, [r3, #0]
 801f714:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	2b00      	cmp	r3, #0
 801f71a:	d010      	beq.n	801f73e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801f71c:	f000 f836 	bl	801f78c <xTaskIncrementTick>
 801f720:	4603      	mov	r3, r0
 801f722:	2b00      	cmp	r3, #0
 801f724:	d002      	beq.n	801f72c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801f726:	4b16      	ldr	r3, [pc, #88]	; (801f780 <xTaskResumeAll+0x12c>)
 801f728:	2201      	movs	r2, #1
 801f72a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801f72c:	687b      	ldr	r3, [r7, #4]
 801f72e:	3b01      	subs	r3, #1
 801f730:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	2b00      	cmp	r3, #0
 801f736:	d1f1      	bne.n	801f71c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801f738:	4b12      	ldr	r3, [pc, #72]	; (801f784 <xTaskResumeAll+0x130>)
 801f73a:	2200      	movs	r2, #0
 801f73c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801f73e:	4b10      	ldr	r3, [pc, #64]	; (801f780 <xTaskResumeAll+0x12c>)
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	2b00      	cmp	r3, #0
 801f744:	d009      	beq.n	801f75a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801f746:	2301      	movs	r3, #1
 801f748:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801f74a:	4b0f      	ldr	r3, [pc, #60]	; (801f788 <xTaskResumeAll+0x134>)
 801f74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f750:	601a      	str	r2, [r3, #0]
 801f752:	f3bf 8f4f 	dsb	sy
 801f756:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801f75a:	f000 fbc3 	bl	801fee4 <vPortExitCritical>

	return xAlreadyYielded;
 801f75e:	68bb      	ldr	r3, [r7, #8]
}
 801f760:	4618      	mov	r0, r3
 801f762:	3710      	adds	r7, #16
 801f764:	46bd      	mov	sp, r7
 801f766:	bd80      	pop	{r7, pc}
 801f768:	20000724 	.word	0x20000724
 801f76c:	200006fc 	.word	0x200006fc
 801f770:	200006bc 	.word	0x200006bc
 801f774:	20000704 	.word	0x20000704
 801f778:	20000600 	.word	0x20000600
 801f77c:	200005fc 	.word	0x200005fc
 801f780:	20000710 	.word	0x20000710
 801f784:	2000070c 	.word	0x2000070c
 801f788:	e000ed04 	.word	0xe000ed04

0801f78c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801f78c:	b580      	push	{r7, lr}
 801f78e:	b086      	sub	sp, #24
 801f790:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801f792:	2300      	movs	r3, #0
 801f794:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f796:	4b4e      	ldr	r3, [pc, #312]	; (801f8d0 <xTaskIncrementTick+0x144>)
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	2b00      	cmp	r3, #0
 801f79c:	f040 808e 	bne.w	801f8bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801f7a0:	4b4c      	ldr	r3, [pc, #304]	; (801f8d4 <xTaskIncrementTick+0x148>)
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	3301      	adds	r3, #1
 801f7a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801f7a8:	4a4a      	ldr	r2, [pc, #296]	; (801f8d4 <xTaskIncrementTick+0x148>)
 801f7aa:	693b      	ldr	r3, [r7, #16]
 801f7ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801f7ae:	693b      	ldr	r3, [r7, #16]
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d120      	bne.n	801f7f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801f7b4:	4b48      	ldr	r3, [pc, #288]	; (801f8d8 <xTaskIncrementTick+0x14c>)
 801f7b6:	681b      	ldr	r3, [r3, #0]
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	d00a      	beq.n	801f7d4 <xTaskIncrementTick+0x48>
	__asm volatile
 801f7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f7c2:	f383 8811 	msr	BASEPRI, r3
 801f7c6:	f3bf 8f6f 	isb	sy
 801f7ca:	f3bf 8f4f 	dsb	sy
 801f7ce:	603b      	str	r3, [r7, #0]
}
 801f7d0:	bf00      	nop
 801f7d2:	e7fe      	b.n	801f7d2 <xTaskIncrementTick+0x46>
 801f7d4:	4b40      	ldr	r3, [pc, #256]	; (801f8d8 <xTaskIncrementTick+0x14c>)
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	60fb      	str	r3, [r7, #12]
 801f7da:	4b40      	ldr	r3, [pc, #256]	; (801f8dc <xTaskIncrementTick+0x150>)
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	4a3e      	ldr	r2, [pc, #248]	; (801f8d8 <xTaskIncrementTick+0x14c>)
 801f7e0:	6013      	str	r3, [r2, #0]
 801f7e2:	4a3e      	ldr	r2, [pc, #248]	; (801f8dc <xTaskIncrementTick+0x150>)
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	6013      	str	r3, [r2, #0]
 801f7e8:	4b3d      	ldr	r3, [pc, #244]	; (801f8e0 <xTaskIncrementTick+0x154>)
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	3301      	adds	r3, #1
 801f7ee:	4a3c      	ldr	r2, [pc, #240]	; (801f8e0 <xTaskIncrementTick+0x154>)
 801f7f0:	6013      	str	r3, [r2, #0]
 801f7f2:	f000 f995 	bl	801fb20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801f7f6:	4b3b      	ldr	r3, [pc, #236]	; (801f8e4 <xTaskIncrementTick+0x158>)
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	693a      	ldr	r2, [r7, #16]
 801f7fc:	429a      	cmp	r2, r3
 801f7fe:	d348      	bcc.n	801f892 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f800:	4b35      	ldr	r3, [pc, #212]	; (801f8d8 <xTaskIncrementTick+0x14c>)
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	681b      	ldr	r3, [r3, #0]
 801f806:	2b00      	cmp	r3, #0
 801f808:	d104      	bne.n	801f814 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f80a:	4b36      	ldr	r3, [pc, #216]	; (801f8e4 <xTaskIncrementTick+0x158>)
 801f80c:	f04f 32ff 	mov.w	r2, #4294967295
 801f810:	601a      	str	r2, [r3, #0]
					break;
 801f812:	e03e      	b.n	801f892 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f814:	4b30      	ldr	r3, [pc, #192]	; (801f8d8 <xTaskIncrementTick+0x14c>)
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	68db      	ldr	r3, [r3, #12]
 801f81a:	68db      	ldr	r3, [r3, #12]
 801f81c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801f81e:	68bb      	ldr	r3, [r7, #8]
 801f820:	685b      	ldr	r3, [r3, #4]
 801f822:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801f824:	693a      	ldr	r2, [r7, #16]
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	429a      	cmp	r2, r3
 801f82a:	d203      	bcs.n	801f834 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801f82c:	4a2d      	ldr	r2, [pc, #180]	; (801f8e4 <xTaskIncrementTick+0x158>)
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801f832:	e02e      	b.n	801f892 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f834:	68bb      	ldr	r3, [r7, #8]
 801f836:	3304      	adds	r3, #4
 801f838:	4618      	mov	r0, r3
 801f83a:	f7ff fc61 	bl	801f100 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801f83e:	68bb      	ldr	r3, [r7, #8]
 801f840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f842:	2b00      	cmp	r3, #0
 801f844:	d004      	beq.n	801f850 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f846:	68bb      	ldr	r3, [r7, #8]
 801f848:	3318      	adds	r3, #24
 801f84a:	4618      	mov	r0, r3
 801f84c:	f7ff fc58 	bl	801f100 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801f850:	68bb      	ldr	r3, [r7, #8]
 801f852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f854:	2201      	movs	r2, #1
 801f856:	409a      	lsls	r2, r3
 801f858:	4b23      	ldr	r3, [pc, #140]	; (801f8e8 <xTaskIncrementTick+0x15c>)
 801f85a:	681b      	ldr	r3, [r3, #0]
 801f85c:	4313      	orrs	r3, r2
 801f85e:	4a22      	ldr	r2, [pc, #136]	; (801f8e8 <xTaskIncrementTick+0x15c>)
 801f860:	6013      	str	r3, [r2, #0]
 801f862:	68bb      	ldr	r3, [r7, #8]
 801f864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f866:	4613      	mov	r3, r2
 801f868:	009b      	lsls	r3, r3, #2
 801f86a:	4413      	add	r3, r2
 801f86c:	009b      	lsls	r3, r3, #2
 801f86e:	4a1f      	ldr	r2, [pc, #124]	; (801f8ec <xTaskIncrementTick+0x160>)
 801f870:	441a      	add	r2, r3
 801f872:	68bb      	ldr	r3, [r7, #8]
 801f874:	3304      	adds	r3, #4
 801f876:	4619      	mov	r1, r3
 801f878:	4610      	mov	r0, r2
 801f87a:	f7ff fbe4 	bl	801f046 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801f87e:	68bb      	ldr	r3, [r7, #8]
 801f880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f882:	4b1b      	ldr	r3, [pc, #108]	; (801f8f0 <xTaskIncrementTick+0x164>)
 801f884:	681b      	ldr	r3, [r3, #0]
 801f886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f888:	429a      	cmp	r2, r3
 801f88a:	d3b9      	bcc.n	801f800 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801f88c:	2301      	movs	r3, #1
 801f88e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f890:	e7b6      	b.n	801f800 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801f892:	4b17      	ldr	r3, [pc, #92]	; (801f8f0 <xTaskIncrementTick+0x164>)
 801f894:	681b      	ldr	r3, [r3, #0]
 801f896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f898:	4914      	ldr	r1, [pc, #80]	; (801f8ec <xTaskIncrementTick+0x160>)
 801f89a:	4613      	mov	r3, r2
 801f89c:	009b      	lsls	r3, r3, #2
 801f89e:	4413      	add	r3, r2
 801f8a0:	009b      	lsls	r3, r3, #2
 801f8a2:	440b      	add	r3, r1
 801f8a4:	681b      	ldr	r3, [r3, #0]
 801f8a6:	2b01      	cmp	r3, #1
 801f8a8:	d901      	bls.n	801f8ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801f8aa:	2301      	movs	r3, #1
 801f8ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801f8ae:	4b11      	ldr	r3, [pc, #68]	; (801f8f4 <xTaskIncrementTick+0x168>)
 801f8b0:	681b      	ldr	r3, [r3, #0]
 801f8b2:	2b00      	cmp	r3, #0
 801f8b4:	d007      	beq.n	801f8c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801f8b6:	2301      	movs	r3, #1
 801f8b8:	617b      	str	r3, [r7, #20]
 801f8ba:	e004      	b.n	801f8c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801f8bc:	4b0e      	ldr	r3, [pc, #56]	; (801f8f8 <xTaskIncrementTick+0x16c>)
 801f8be:	681b      	ldr	r3, [r3, #0]
 801f8c0:	3301      	adds	r3, #1
 801f8c2:	4a0d      	ldr	r2, [pc, #52]	; (801f8f8 <xTaskIncrementTick+0x16c>)
 801f8c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801f8c6:	697b      	ldr	r3, [r7, #20]
}
 801f8c8:	4618      	mov	r0, r3
 801f8ca:	3718      	adds	r7, #24
 801f8cc:	46bd      	mov	sp, r7
 801f8ce:	bd80      	pop	{r7, pc}
 801f8d0:	20000724 	.word	0x20000724
 801f8d4:	20000700 	.word	0x20000700
 801f8d8:	200006b4 	.word	0x200006b4
 801f8dc:	200006b8 	.word	0x200006b8
 801f8e0:	20000714 	.word	0x20000714
 801f8e4:	2000071c 	.word	0x2000071c
 801f8e8:	20000704 	.word	0x20000704
 801f8ec:	20000600 	.word	0x20000600
 801f8f0:	200005fc 	.word	0x200005fc
 801f8f4:	20000710 	.word	0x20000710
 801f8f8:	2000070c 	.word	0x2000070c

0801f8fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801f8fc:	b480      	push	{r7}
 801f8fe:	b087      	sub	sp, #28
 801f900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801f902:	4b27      	ldr	r3, [pc, #156]	; (801f9a0 <vTaskSwitchContext+0xa4>)
 801f904:	681b      	ldr	r3, [r3, #0]
 801f906:	2b00      	cmp	r3, #0
 801f908:	d003      	beq.n	801f912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801f90a:	4b26      	ldr	r3, [pc, #152]	; (801f9a4 <vTaskSwitchContext+0xa8>)
 801f90c:	2201      	movs	r2, #1
 801f90e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801f910:	e03f      	b.n	801f992 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 801f912:	4b24      	ldr	r3, [pc, #144]	; (801f9a4 <vTaskSwitchContext+0xa8>)
 801f914:	2200      	movs	r2, #0
 801f916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f918:	4b23      	ldr	r3, [pc, #140]	; (801f9a8 <vTaskSwitchContext+0xac>)
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	fab3 f383 	clz	r3, r3
 801f924:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801f926:	7afb      	ldrb	r3, [r7, #11]
 801f928:	f1c3 031f 	rsb	r3, r3, #31
 801f92c:	617b      	str	r3, [r7, #20]
 801f92e:	491f      	ldr	r1, [pc, #124]	; (801f9ac <vTaskSwitchContext+0xb0>)
 801f930:	697a      	ldr	r2, [r7, #20]
 801f932:	4613      	mov	r3, r2
 801f934:	009b      	lsls	r3, r3, #2
 801f936:	4413      	add	r3, r2
 801f938:	009b      	lsls	r3, r3, #2
 801f93a:	440b      	add	r3, r1
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	2b00      	cmp	r3, #0
 801f940:	d10a      	bne.n	801f958 <vTaskSwitchContext+0x5c>
	__asm volatile
 801f942:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f946:	f383 8811 	msr	BASEPRI, r3
 801f94a:	f3bf 8f6f 	isb	sy
 801f94e:	f3bf 8f4f 	dsb	sy
 801f952:	607b      	str	r3, [r7, #4]
}
 801f954:	bf00      	nop
 801f956:	e7fe      	b.n	801f956 <vTaskSwitchContext+0x5a>
 801f958:	697a      	ldr	r2, [r7, #20]
 801f95a:	4613      	mov	r3, r2
 801f95c:	009b      	lsls	r3, r3, #2
 801f95e:	4413      	add	r3, r2
 801f960:	009b      	lsls	r3, r3, #2
 801f962:	4a12      	ldr	r2, [pc, #72]	; (801f9ac <vTaskSwitchContext+0xb0>)
 801f964:	4413      	add	r3, r2
 801f966:	613b      	str	r3, [r7, #16]
 801f968:	693b      	ldr	r3, [r7, #16]
 801f96a:	685b      	ldr	r3, [r3, #4]
 801f96c:	685a      	ldr	r2, [r3, #4]
 801f96e:	693b      	ldr	r3, [r7, #16]
 801f970:	605a      	str	r2, [r3, #4]
 801f972:	693b      	ldr	r3, [r7, #16]
 801f974:	685a      	ldr	r2, [r3, #4]
 801f976:	693b      	ldr	r3, [r7, #16]
 801f978:	3308      	adds	r3, #8
 801f97a:	429a      	cmp	r2, r3
 801f97c:	d104      	bne.n	801f988 <vTaskSwitchContext+0x8c>
 801f97e:	693b      	ldr	r3, [r7, #16]
 801f980:	685b      	ldr	r3, [r3, #4]
 801f982:	685a      	ldr	r2, [r3, #4]
 801f984:	693b      	ldr	r3, [r7, #16]
 801f986:	605a      	str	r2, [r3, #4]
 801f988:	693b      	ldr	r3, [r7, #16]
 801f98a:	685b      	ldr	r3, [r3, #4]
 801f98c:	68db      	ldr	r3, [r3, #12]
 801f98e:	4a08      	ldr	r2, [pc, #32]	; (801f9b0 <vTaskSwitchContext+0xb4>)
 801f990:	6013      	str	r3, [r2, #0]
}
 801f992:	bf00      	nop
 801f994:	371c      	adds	r7, #28
 801f996:	46bd      	mov	sp, r7
 801f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f99c:	4770      	bx	lr
 801f99e:	bf00      	nop
 801f9a0:	20000724 	.word	0x20000724
 801f9a4:	20000710 	.word	0x20000710
 801f9a8:	20000704 	.word	0x20000704
 801f9ac:	20000600 	.word	0x20000600
 801f9b0:	200005fc 	.word	0x200005fc

0801f9b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801f9b4:	b580      	push	{r7, lr}
 801f9b6:	b082      	sub	sp, #8
 801f9b8:	af00      	add	r7, sp, #0
 801f9ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801f9bc:	f000 f852 	bl	801fa64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801f9c0:	4b06      	ldr	r3, [pc, #24]	; (801f9dc <prvIdleTask+0x28>)
 801f9c2:	681b      	ldr	r3, [r3, #0]
 801f9c4:	2b01      	cmp	r3, #1
 801f9c6:	d9f9      	bls.n	801f9bc <prvIdleTask+0x8>
			{
				taskYIELD();
 801f9c8:	4b05      	ldr	r3, [pc, #20]	; (801f9e0 <prvIdleTask+0x2c>)
 801f9ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f9ce:	601a      	str	r2, [r3, #0]
 801f9d0:	f3bf 8f4f 	dsb	sy
 801f9d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801f9d8:	e7f0      	b.n	801f9bc <prvIdleTask+0x8>
 801f9da:	bf00      	nop
 801f9dc:	20000600 	.word	0x20000600
 801f9e0:	e000ed04 	.word	0xe000ed04

0801f9e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801f9e4:	b580      	push	{r7, lr}
 801f9e6:	b082      	sub	sp, #8
 801f9e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801f9ea:	2300      	movs	r3, #0
 801f9ec:	607b      	str	r3, [r7, #4]
 801f9ee:	e00c      	b.n	801fa0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801f9f0:	687a      	ldr	r2, [r7, #4]
 801f9f2:	4613      	mov	r3, r2
 801f9f4:	009b      	lsls	r3, r3, #2
 801f9f6:	4413      	add	r3, r2
 801f9f8:	009b      	lsls	r3, r3, #2
 801f9fa:	4a12      	ldr	r2, [pc, #72]	; (801fa44 <prvInitialiseTaskLists+0x60>)
 801f9fc:	4413      	add	r3, r2
 801f9fe:	4618      	mov	r0, r3
 801fa00:	f7ff faf4 	bl	801efec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801fa04:	687b      	ldr	r3, [r7, #4]
 801fa06:	3301      	adds	r3, #1
 801fa08:	607b      	str	r3, [r7, #4]
 801fa0a:	687b      	ldr	r3, [r7, #4]
 801fa0c:	2b06      	cmp	r3, #6
 801fa0e:	d9ef      	bls.n	801f9f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801fa10:	480d      	ldr	r0, [pc, #52]	; (801fa48 <prvInitialiseTaskLists+0x64>)
 801fa12:	f7ff faeb 	bl	801efec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801fa16:	480d      	ldr	r0, [pc, #52]	; (801fa4c <prvInitialiseTaskLists+0x68>)
 801fa18:	f7ff fae8 	bl	801efec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801fa1c:	480c      	ldr	r0, [pc, #48]	; (801fa50 <prvInitialiseTaskLists+0x6c>)
 801fa1e:	f7ff fae5 	bl	801efec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801fa22:	480c      	ldr	r0, [pc, #48]	; (801fa54 <prvInitialiseTaskLists+0x70>)
 801fa24:	f7ff fae2 	bl	801efec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801fa28:	480b      	ldr	r0, [pc, #44]	; (801fa58 <prvInitialiseTaskLists+0x74>)
 801fa2a:	f7ff fadf 	bl	801efec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801fa2e:	4b0b      	ldr	r3, [pc, #44]	; (801fa5c <prvInitialiseTaskLists+0x78>)
 801fa30:	4a05      	ldr	r2, [pc, #20]	; (801fa48 <prvInitialiseTaskLists+0x64>)
 801fa32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801fa34:	4b0a      	ldr	r3, [pc, #40]	; (801fa60 <prvInitialiseTaskLists+0x7c>)
 801fa36:	4a05      	ldr	r2, [pc, #20]	; (801fa4c <prvInitialiseTaskLists+0x68>)
 801fa38:	601a      	str	r2, [r3, #0]
}
 801fa3a:	bf00      	nop
 801fa3c:	3708      	adds	r7, #8
 801fa3e:	46bd      	mov	sp, r7
 801fa40:	bd80      	pop	{r7, pc}
 801fa42:	bf00      	nop
 801fa44:	20000600 	.word	0x20000600
 801fa48:	2000068c 	.word	0x2000068c
 801fa4c:	200006a0 	.word	0x200006a0
 801fa50:	200006bc 	.word	0x200006bc
 801fa54:	200006d0 	.word	0x200006d0
 801fa58:	200006e8 	.word	0x200006e8
 801fa5c:	200006b4 	.word	0x200006b4
 801fa60:	200006b8 	.word	0x200006b8

0801fa64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801fa64:	b580      	push	{r7, lr}
 801fa66:	b082      	sub	sp, #8
 801fa68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801fa6a:	e019      	b.n	801faa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801fa6c:	f000 fa0a 	bl	801fe84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fa70:	4b10      	ldr	r3, [pc, #64]	; (801fab4 <prvCheckTasksWaitingTermination+0x50>)
 801fa72:	68db      	ldr	r3, [r3, #12]
 801fa74:	68db      	ldr	r3, [r3, #12]
 801fa76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801fa78:	687b      	ldr	r3, [r7, #4]
 801fa7a:	3304      	adds	r3, #4
 801fa7c:	4618      	mov	r0, r3
 801fa7e:	f7ff fb3f 	bl	801f100 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801fa82:	4b0d      	ldr	r3, [pc, #52]	; (801fab8 <prvCheckTasksWaitingTermination+0x54>)
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	3b01      	subs	r3, #1
 801fa88:	4a0b      	ldr	r2, [pc, #44]	; (801fab8 <prvCheckTasksWaitingTermination+0x54>)
 801fa8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801fa8c:	4b0b      	ldr	r3, [pc, #44]	; (801fabc <prvCheckTasksWaitingTermination+0x58>)
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	3b01      	subs	r3, #1
 801fa92:	4a0a      	ldr	r2, [pc, #40]	; (801fabc <prvCheckTasksWaitingTermination+0x58>)
 801fa94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801fa96:	f000 fa25 	bl	801fee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801fa9a:	6878      	ldr	r0, [r7, #4]
 801fa9c:	f000 f810 	bl	801fac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801faa0:	4b06      	ldr	r3, [pc, #24]	; (801fabc <prvCheckTasksWaitingTermination+0x58>)
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	d1e1      	bne.n	801fa6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801faa8:	bf00      	nop
 801faaa:	bf00      	nop
 801faac:	3708      	adds	r7, #8
 801faae:	46bd      	mov	sp, r7
 801fab0:	bd80      	pop	{r7, pc}
 801fab2:	bf00      	nop
 801fab4:	200006d0 	.word	0x200006d0
 801fab8:	200006fc 	.word	0x200006fc
 801fabc:	200006e4 	.word	0x200006e4

0801fac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801fac0:	b580      	push	{r7, lr}
 801fac2:	b084      	sub	sp, #16
 801fac4:	af00      	add	r7, sp, #0
 801fac6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801face:	2b00      	cmp	r3, #0
 801fad0:	d108      	bne.n	801fae4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fad6:	4618      	mov	r0, r3
 801fad8:	f000 fb82 	bl	80201e0 <vPortFree>
				vPortFree( pxTCB );
 801fadc:	6878      	ldr	r0, [r7, #4]
 801fade:	f000 fb7f 	bl	80201e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801fae2:	e018      	b.n	801fb16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801faea:	2b01      	cmp	r3, #1
 801faec:	d103      	bne.n	801faf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801faee:	6878      	ldr	r0, [r7, #4]
 801faf0:	f000 fb76 	bl	80201e0 <vPortFree>
	}
 801faf4:	e00f      	b.n	801fb16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801fafc:	2b02      	cmp	r3, #2
 801fafe:	d00a      	beq.n	801fb16 <prvDeleteTCB+0x56>
	__asm volatile
 801fb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fb04:	f383 8811 	msr	BASEPRI, r3
 801fb08:	f3bf 8f6f 	isb	sy
 801fb0c:	f3bf 8f4f 	dsb	sy
 801fb10:	60fb      	str	r3, [r7, #12]
}
 801fb12:	bf00      	nop
 801fb14:	e7fe      	b.n	801fb14 <prvDeleteTCB+0x54>
	}
 801fb16:	bf00      	nop
 801fb18:	3710      	adds	r7, #16
 801fb1a:	46bd      	mov	sp, r7
 801fb1c:	bd80      	pop	{r7, pc}
	...

0801fb20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801fb20:	b480      	push	{r7}
 801fb22:	b083      	sub	sp, #12
 801fb24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801fb26:	4b0c      	ldr	r3, [pc, #48]	; (801fb58 <prvResetNextTaskUnblockTime+0x38>)
 801fb28:	681b      	ldr	r3, [r3, #0]
 801fb2a:	681b      	ldr	r3, [r3, #0]
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d104      	bne.n	801fb3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801fb30:	4b0a      	ldr	r3, [pc, #40]	; (801fb5c <prvResetNextTaskUnblockTime+0x3c>)
 801fb32:	f04f 32ff 	mov.w	r2, #4294967295
 801fb36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801fb38:	e008      	b.n	801fb4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fb3a:	4b07      	ldr	r3, [pc, #28]	; (801fb58 <prvResetNextTaskUnblockTime+0x38>)
 801fb3c:	681b      	ldr	r3, [r3, #0]
 801fb3e:	68db      	ldr	r3, [r3, #12]
 801fb40:	68db      	ldr	r3, [r3, #12]
 801fb42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801fb44:	687b      	ldr	r3, [r7, #4]
 801fb46:	685b      	ldr	r3, [r3, #4]
 801fb48:	4a04      	ldr	r2, [pc, #16]	; (801fb5c <prvResetNextTaskUnblockTime+0x3c>)
 801fb4a:	6013      	str	r3, [r2, #0]
}
 801fb4c:	bf00      	nop
 801fb4e:	370c      	adds	r7, #12
 801fb50:	46bd      	mov	sp, r7
 801fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb56:	4770      	bx	lr
 801fb58:	200006b4 	.word	0x200006b4
 801fb5c:	2000071c 	.word	0x2000071c

0801fb60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801fb60:	b580      	push	{r7, lr}
 801fb62:	b084      	sub	sp, #16
 801fb64:	af00      	add	r7, sp, #0
 801fb66:	6078      	str	r0, [r7, #4]
 801fb68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801fb6a:	4b29      	ldr	r3, [pc, #164]	; (801fc10 <prvAddCurrentTaskToDelayedList+0xb0>)
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801fb70:	4b28      	ldr	r3, [pc, #160]	; (801fc14 <prvAddCurrentTaskToDelayedList+0xb4>)
 801fb72:	681b      	ldr	r3, [r3, #0]
 801fb74:	3304      	adds	r3, #4
 801fb76:	4618      	mov	r0, r3
 801fb78:	f7ff fac2 	bl	801f100 <uxListRemove>
 801fb7c:	4603      	mov	r3, r0
 801fb7e:	2b00      	cmp	r3, #0
 801fb80:	d10b      	bne.n	801fb9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801fb82:	4b24      	ldr	r3, [pc, #144]	; (801fc14 <prvAddCurrentTaskToDelayedList+0xb4>)
 801fb84:	681b      	ldr	r3, [r3, #0]
 801fb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb88:	2201      	movs	r2, #1
 801fb8a:	fa02 f303 	lsl.w	r3, r2, r3
 801fb8e:	43da      	mvns	r2, r3
 801fb90:	4b21      	ldr	r3, [pc, #132]	; (801fc18 <prvAddCurrentTaskToDelayedList+0xb8>)
 801fb92:	681b      	ldr	r3, [r3, #0]
 801fb94:	4013      	ands	r3, r2
 801fb96:	4a20      	ldr	r2, [pc, #128]	; (801fc18 <prvAddCurrentTaskToDelayedList+0xb8>)
 801fb98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fba0:	d10a      	bne.n	801fbb8 <prvAddCurrentTaskToDelayedList+0x58>
 801fba2:	683b      	ldr	r3, [r7, #0]
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d007      	beq.n	801fbb8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801fba8:	4b1a      	ldr	r3, [pc, #104]	; (801fc14 <prvAddCurrentTaskToDelayedList+0xb4>)
 801fbaa:	681b      	ldr	r3, [r3, #0]
 801fbac:	3304      	adds	r3, #4
 801fbae:	4619      	mov	r1, r3
 801fbb0:	481a      	ldr	r0, [pc, #104]	; (801fc1c <prvAddCurrentTaskToDelayedList+0xbc>)
 801fbb2:	f7ff fa48 	bl	801f046 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801fbb6:	e026      	b.n	801fc06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801fbb8:	68fa      	ldr	r2, [r7, #12]
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	4413      	add	r3, r2
 801fbbe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801fbc0:	4b14      	ldr	r3, [pc, #80]	; (801fc14 <prvAddCurrentTaskToDelayedList+0xb4>)
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	68ba      	ldr	r2, [r7, #8]
 801fbc6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801fbc8:	68ba      	ldr	r2, [r7, #8]
 801fbca:	68fb      	ldr	r3, [r7, #12]
 801fbcc:	429a      	cmp	r2, r3
 801fbce:	d209      	bcs.n	801fbe4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801fbd0:	4b13      	ldr	r3, [pc, #76]	; (801fc20 <prvAddCurrentTaskToDelayedList+0xc0>)
 801fbd2:	681a      	ldr	r2, [r3, #0]
 801fbd4:	4b0f      	ldr	r3, [pc, #60]	; (801fc14 <prvAddCurrentTaskToDelayedList+0xb4>)
 801fbd6:	681b      	ldr	r3, [r3, #0]
 801fbd8:	3304      	adds	r3, #4
 801fbda:	4619      	mov	r1, r3
 801fbdc:	4610      	mov	r0, r2
 801fbde:	f7ff fa56 	bl	801f08e <vListInsert>
}
 801fbe2:	e010      	b.n	801fc06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801fbe4:	4b0f      	ldr	r3, [pc, #60]	; (801fc24 <prvAddCurrentTaskToDelayedList+0xc4>)
 801fbe6:	681a      	ldr	r2, [r3, #0]
 801fbe8:	4b0a      	ldr	r3, [pc, #40]	; (801fc14 <prvAddCurrentTaskToDelayedList+0xb4>)
 801fbea:	681b      	ldr	r3, [r3, #0]
 801fbec:	3304      	adds	r3, #4
 801fbee:	4619      	mov	r1, r3
 801fbf0:	4610      	mov	r0, r2
 801fbf2:	f7ff fa4c 	bl	801f08e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801fbf6:	4b0c      	ldr	r3, [pc, #48]	; (801fc28 <prvAddCurrentTaskToDelayedList+0xc8>)
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	68ba      	ldr	r2, [r7, #8]
 801fbfc:	429a      	cmp	r2, r3
 801fbfe:	d202      	bcs.n	801fc06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801fc00:	4a09      	ldr	r2, [pc, #36]	; (801fc28 <prvAddCurrentTaskToDelayedList+0xc8>)
 801fc02:	68bb      	ldr	r3, [r7, #8]
 801fc04:	6013      	str	r3, [r2, #0]
}
 801fc06:	bf00      	nop
 801fc08:	3710      	adds	r7, #16
 801fc0a:	46bd      	mov	sp, r7
 801fc0c:	bd80      	pop	{r7, pc}
 801fc0e:	bf00      	nop
 801fc10:	20000700 	.word	0x20000700
 801fc14:	200005fc 	.word	0x200005fc
 801fc18:	20000704 	.word	0x20000704
 801fc1c:	200006e8 	.word	0x200006e8
 801fc20:	200006b8 	.word	0x200006b8
 801fc24:	200006b4 	.word	0x200006b4
 801fc28:	2000071c 	.word	0x2000071c

0801fc2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801fc2c:	b480      	push	{r7}
 801fc2e:	b085      	sub	sp, #20
 801fc30:	af00      	add	r7, sp, #0
 801fc32:	60f8      	str	r0, [r7, #12]
 801fc34:	60b9      	str	r1, [r7, #8]
 801fc36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801fc38:	68fb      	ldr	r3, [r7, #12]
 801fc3a:	3b04      	subs	r3, #4
 801fc3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801fc3e:	68fb      	ldr	r3, [r7, #12]
 801fc40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801fc44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801fc46:	68fb      	ldr	r3, [r7, #12]
 801fc48:	3b04      	subs	r3, #4
 801fc4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801fc4c:	68bb      	ldr	r3, [r7, #8]
 801fc4e:	f023 0201 	bic.w	r2, r3, #1
 801fc52:	68fb      	ldr	r3, [r7, #12]
 801fc54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801fc56:	68fb      	ldr	r3, [r7, #12]
 801fc58:	3b04      	subs	r3, #4
 801fc5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801fc5c:	4a0c      	ldr	r2, [pc, #48]	; (801fc90 <pxPortInitialiseStack+0x64>)
 801fc5e:	68fb      	ldr	r3, [r7, #12]
 801fc60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801fc62:	68fb      	ldr	r3, [r7, #12]
 801fc64:	3b14      	subs	r3, #20
 801fc66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801fc68:	687a      	ldr	r2, [r7, #4]
 801fc6a:	68fb      	ldr	r3, [r7, #12]
 801fc6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801fc6e:	68fb      	ldr	r3, [r7, #12]
 801fc70:	3b04      	subs	r3, #4
 801fc72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801fc74:	68fb      	ldr	r3, [r7, #12]
 801fc76:	f06f 0202 	mvn.w	r2, #2
 801fc7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801fc7c:	68fb      	ldr	r3, [r7, #12]
 801fc7e:	3b20      	subs	r3, #32
 801fc80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801fc82:	68fb      	ldr	r3, [r7, #12]
}
 801fc84:	4618      	mov	r0, r3
 801fc86:	3714      	adds	r7, #20
 801fc88:	46bd      	mov	sp, r7
 801fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc8e:	4770      	bx	lr
 801fc90:	0801fc95 	.word	0x0801fc95

0801fc94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801fc94:	b480      	push	{r7}
 801fc96:	b085      	sub	sp, #20
 801fc98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801fc9a:	2300      	movs	r3, #0
 801fc9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801fc9e:	4b12      	ldr	r3, [pc, #72]	; (801fce8 <prvTaskExitError+0x54>)
 801fca0:	681b      	ldr	r3, [r3, #0]
 801fca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fca6:	d00a      	beq.n	801fcbe <prvTaskExitError+0x2a>
	__asm volatile
 801fca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fcac:	f383 8811 	msr	BASEPRI, r3
 801fcb0:	f3bf 8f6f 	isb	sy
 801fcb4:	f3bf 8f4f 	dsb	sy
 801fcb8:	60fb      	str	r3, [r7, #12]
}
 801fcba:	bf00      	nop
 801fcbc:	e7fe      	b.n	801fcbc <prvTaskExitError+0x28>
	__asm volatile
 801fcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fcc2:	f383 8811 	msr	BASEPRI, r3
 801fcc6:	f3bf 8f6f 	isb	sy
 801fcca:	f3bf 8f4f 	dsb	sy
 801fcce:	60bb      	str	r3, [r7, #8]
}
 801fcd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801fcd2:	bf00      	nop
 801fcd4:	687b      	ldr	r3, [r7, #4]
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d0fc      	beq.n	801fcd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801fcda:	bf00      	nop
 801fcdc:	bf00      	nop
 801fcde:	3714      	adds	r7, #20
 801fce0:	46bd      	mov	sp, r7
 801fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fce6:	4770      	bx	lr
 801fce8:	20000100 	.word	0x20000100
 801fcec:	00000000 	.word	0x00000000

0801fcf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801fcf0:	4b07      	ldr	r3, [pc, #28]	; (801fd10 <pxCurrentTCBConst2>)
 801fcf2:	6819      	ldr	r1, [r3, #0]
 801fcf4:	6808      	ldr	r0, [r1, #0]
 801fcf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcfa:	f380 8809 	msr	PSP, r0
 801fcfe:	f3bf 8f6f 	isb	sy
 801fd02:	f04f 0000 	mov.w	r0, #0
 801fd06:	f380 8811 	msr	BASEPRI, r0
 801fd0a:	4770      	bx	lr
 801fd0c:	f3af 8000 	nop.w

0801fd10 <pxCurrentTCBConst2>:
 801fd10:	200005fc 	.word	0x200005fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801fd14:	bf00      	nop
 801fd16:	bf00      	nop

0801fd18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801fd18:	4808      	ldr	r0, [pc, #32]	; (801fd3c <prvPortStartFirstTask+0x24>)
 801fd1a:	6800      	ldr	r0, [r0, #0]
 801fd1c:	6800      	ldr	r0, [r0, #0]
 801fd1e:	f380 8808 	msr	MSP, r0
 801fd22:	f04f 0000 	mov.w	r0, #0
 801fd26:	f380 8814 	msr	CONTROL, r0
 801fd2a:	b662      	cpsie	i
 801fd2c:	b661      	cpsie	f
 801fd2e:	f3bf 8f4f 	dsb	sy
 801fd32:	f3bf 8f6f 	isb	sy
 801fd36:	df00      	svc	0
 801fd38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801fd3a:	bf00      	nop
 801fd3c:	e000ed08 	.word	0xe000ed08

0801fd40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801fd40:	b580      	push	{r7, lr}
 801fd42:	b086      	sub	sp, #24
 801fd44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801fd46:	4b46      	ldr	r3, [pc, #280]	; (801fe60 <xPortStartScheduler+0x120>)
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	4a46      	ldr	r2, [pc, #280]	; (801fe64 <xPortStartScheduler+0x124>)
 801fd4c:	4293      	cmp	r3, r2
 801fd4e:	d10a      	bne.n	801fd66 <xPortStartScheduler+0x26>
	__asm volatile
 801fd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fd54:	f383 8811 	msr	BASEPRI, r3
 801fd58:	f3bf 8f6f 	isb	sy
 801fd5c:	f3bf 8f4f 	dsb	sy
 801fd60:	613b      	str	r3, [r7, #16]
}
 801fd62:	bf00      	nop
 801fd64:	e7fe      	b.n	801fd64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801fd66:	4b3e      	ldr	r3, [pc, #248]	; (801fe60 <xPortStartScheduler+0x120>)
 801fd68:	681b      	ldr	r3, [r3, #0]
 801fd6a:	4a3f      	ldr	r2, [pc, #252]	; (801fe68 <xPortStartScheduler+0x128>)
 801fd6c:	4293      	cmp	r3, r2
 801fd6e:	d10a      	bne.n	801fd86 <xPortStartScheduler+0x46>
	__asm volatile
 801fd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fd74:	f383 8811 	msr	BASEPRI, r3
 801fd78:	f3bf 8f6f 	isb	sy
 801fd7c:	f3bf 8f4f 	dsb	sy
 801fd80:	60fb      	str	r3, [r7, #12]
}
 801fd82:	bf00      	nop
 801fd84:	e7fe      	b.n	801fd84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801fd86:	4b39      	ldr	r3, [pc, #228]	; (801fe6c <xPortStartScheduler+0x12c>)
 801fd88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801fd8a:	697b      	ldr	r3, [r7, #20]
 801fd8c:	781b      	ldrb	r3, [r3, #0]
 801fd8e:	b2db      	uxtb	r3, r3
 801fd90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801fd92:	697b      	ldr	r3, [r7, #20]
 801fd94:	22ff      	movs	r2, #255	; 0xff
 801fd96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801fd98:	697b      	ldr	r3, [r7, #20]
 801fd9a:	781b      	ldrb	r3, [r3, #0]
 801fd9c:	b2db      	uxtb	r3, r3
 801fd9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801fda0:	78fb      	ldrb	r3, [r7, #3]
 801fda2:	b2db      	uxtb	r3, r3
 801fda4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801fda8:	b2da      	uxtb	r2, r3
 801fdaa:	4b31      	ldr	r3, [pc, #196]	; (801fe70 <xPortStartScheduler+0x130>)
 801fdac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801fdae:	4b31      	ldr	r3, [pc, #196]	; (801fe74 <xPortStartScheduler+0x134>)
 801fdb0:	2207      	movs	r2, #7
 801fdb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801fdb4:	e009      	b.n	801fdca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801fdb6:	4b2f      	ldr	r3, [pc, #188]	; (801fe74 <xPortStartScheduler+0x134>)
 801fdb8:	681b      	ldr	r3, [r3, #0]
 801fdba:	3b01      	subs	r3, #1
 801fdbc:	4a2d      	ldr	r2, [pc, #180]	; (801fe74 <xPortStartScheduler+0x134>)
 801fdbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801fdc0:	78fb      	ldrb	r3, [r7, #3]
 801fdc2:	b2db      	uxtb	r3, r3
 801fdc4:	005b      	lsls	r3, r3, #1
 801fdc6:	b2db      	uxtb	r3, r3
 801fdc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801fdca:	78fb      	ldrb	r3, [r7, #3]
 801fdcc:	b2db      	uxtb	r3, r3
 801fdce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fdd2:	2b80      	cmp	r3, #128	; 0x80
 801fdd4:	d0ef      	beq.n	801fdb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801fdd6:	4b27      	ldr	r3, [pc, #156]	; (801fe74 <xPortStartScheduler+0x134>)
 801fdd8:	681b      	ldr	r3, [r3, #0]
 801fdda:	f1c3 0307 	rsb	r3, r3, #7
 801fdde:	2b04      	cmp	r3, #4
 801fde0:	d00a      	beq.n	801fdf8 <xPortStartScheduler+0xb8>
	__asm volatile
 801fde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fde6:	f383 8811 	msr	BASEPRI, r3
 801fdea:	f3bf 8f6f 	isb	sy
 801fdee:	f3bf 8f4f 	dsb	sy
 801fdf2:	60bb      	str	r3, [r7, #8]
}
 801fdf4:	bf00      	nop
 801fdf6:	e7fe      	b.n	801fdf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801fdf8:	4b1e      	ldr	r3, [pc, #120]	; (801fe74 <xPortStartScheduler+0x134>)
 801fdfa:	681b      	ldr	r3, [r3, #0]
 801fdfc:	021b      	lsls	r3, r3, #8
 801fdfe:	4a1d      	ldr	r2, [pc, #116]	; (801fe74 <xPortStartScheduler+0x134>)
 801fe00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801fe02:	4b1c      	ldr	r3, [pc, #112]	; (801fe74 <xPortStartScheduler+0x134>)
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801fe0a:	4a1a      	ldr	r2, [pc, #104]	; (801fe74 <xPortStartScheduler+0x134>)
 801fe0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	b2da      	uxtb	r2, r3
 801fe12:	697b      	ldr	r3, [r7, #20]
 801fe14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801fe16:	4b18      	ldr	r3, [pc, #96]	; (801fe78 <xPortStartScheduler+0x138>)
 801fe18:	681b      	ldr	r3, [r3, #0]
 801fe1a:	4a17      	ldr	r2, [pc, #92]	; (801fe78 <xPortStartScheduler+0x138>)
 801fe1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801fe20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801fe22:	4b15      	ldr	r3, [pc, #84]	; (801fe78 <xPortStartScheduler+0x138>)
 801fe24:	681b      	ldr	r3, [r3, #0]
 801fe26:	4a14      	ldr	r2, [pc, #80]	; (801fe78 <xPortStartScheduler+0x138>)
 801fe28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801fe2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801fe2e:	f000 f8dd 	bl	801ffec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801fe32:	4b12      	ldr	r3, [pc, #72]	; (801fe7c <xPortStartScheduler+0x13c>)
 801fe34:	2200      	movs	r2, #0
 801fe36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801fe38:	f000 f8fc 	bl	8020034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801fe3c:	4b10      	ldr	r3, [pc, #64]	; (801fe80 <xPortStartScheduler+0x140>)
 801fe3e:	681b      	ldr	r3, [r3, #0]
 801fe40:	4a0f      	ldr	r2, [pc, #60]	; (801fe80 <xPortStartScheduler+0x140>)
 801fe42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801fe46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801fe48:	f7ff ff66 	bl	801fd18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801fe4c:	f7ff fd56 	bl	801f8fc <vTaskSwitchContext>
	prvTaskExitError();
 801fe50:	f7ff ff20 	bl	801fc94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801fe54:	2300      	movs	r3, #0
}
 801fe56:	4618      	mov	r0, r3
 801fe58:	3718      	adds	r7, #24
 801fe5a:	46bd      	mov	sp, r7
 801fe5c:	bd80      	pop	{r7, pc}
 801fe5e:	bf00      	nop
 801fe60:	e000ed00 	.word	0xe000ed00
 801fe64:	410fc271 	.word	0x410fc271
 801fe68:	410fc270 	.word	0x410fc270
 801fe6c:	e000e400 	.word	0xe000e400
 801fe70:	20000728 	.word	0x20000728
 801fe74:	2000072c 	.word	0x2000072c
 801fe78:	e000ed20 	.word	0xe000ed20
 801fe7c:	20000100 	.word	0x20000100
 801fe80:	e000ef34 	.word	0xe000ef34

0801fe84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801fe84:	b480      	push	{r7}
 801fe86:	b083      	sub	sp, #12
 801fe88:	af00      	add	r7, sp, #0
	__asm volatile
 801fe8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fe8e:	f383 8811 	msr	BASEPRI, r3
 801fe92:	f3bf 8f6f 	isb	sy
 801fe96:	f3bf 8f4f 	dsb	sy
 801fe9a:	607b      	str	r3, [r7, #4]
}
 801fe9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801fe9e:	4b0f      	ldr	r3, [pc, #60]	; (801fedc <vPortEnterCritical+0x58>)
 801fea0:	681b      	ldr	r3, [r3, #0]
 801fea2:	3301      	adds	r3, #1
 801fea4:	4a0d      	ldr	r2, [pc, #52]	; (801fedc <vPortEnterCritical+0x58>)
 801fea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801fea8:	4b0c      	ldr	r3, [pc, #48]	; (801fedc <vPortEnterCritical+0x58>)
 801feaa:	681b      	ldr	r3, [r3, #0]
 801feac:	2b01      	cmp	r3, #1
 801feae:	d10f      	bne.n	801fed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801feb0:	4b0b      	ldr	r3, [pc, #44]	; (801fee0 <vPortEnterCritical+0x5c>)
 801feb2:	681b      	ldr	r3, [r3, #0]
 801feb4:	b2db      	uxtb	r3, r3
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d00a      	beq.n	801fed0 <vPortEnterCritical+0x4c>
	__asm volatile
 801feba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801febe:	f383 8811 	msr	BASEPRI, r3
 801fec2:	f3bf 8f6f 	isb	sy
 801fec6:	f3bf 8f4f 	dsb	sy
 801feca:	603b      	str	r3, [r7, #0]
}
 801fecc:	bf00      	nop
 801fece:	e7fe      	b.n	801fece <vPortEnterCritical+0x4a>
	}
}
 801fed0:	bf00      	nop
 801fed2:	370c      	adds	r7, #12
 801fed4:	46bd      	mov	sp, r7
 801fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801feda:	4770      	bx	lr
 801fedc:	20000100 	.word	0x20000100
 801fee0:	e000ed04 	.word	0xe000ed04

0801fee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801fee4:	b480      	push	{r7}
 801fee6:	b083      	sub	sp, #12
 801fee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801feea:	4b12      	ldr	r3, [pc, #72]	; (801ff34 <vPortExitCritical+0x50>)
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d10a      	bne.n	801ff08 <vPortExitCritical+0x24>
	__asm volatile
 801fef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fef6:	f383 8811 	msr	BASEPRI, r3
 801fefa:	f3bf 8f6f 	isb	sy
 801fefe:	f3bf 8f4f 	dsb	sy
 801ff02:	607b      	str	r3, [r7, #4]
}
 801ff04:	bf00      	nop
 801ff06:	e7fe      	b.n	801ff06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801ff08:	4b0a      	ldr	r3, [pc, #40]	; (801ff34 <vPortExitCritical+0x50>)
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	3b01      	subs	r3, #1
 801ff0e:	4a09      	ldr	r2, [pc, #36]	; (801ff34 <vPortExitCritical+0x50>)
 801ff10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801ff12:	4b08      	ldr	r3, [pc, #32]	; (801ff34 <vPortExitCritical+0x50>)
 801ff14:	681b      	ldr	r3, [r3, #0]
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	d105      	bne.n	801ff26 <vPortExitCritical+0x42>
 801ff1a:	2300      	movs	r3, #0
 801ff1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801ff1e:	683b      	ldr	r3, [r7, #0]
 801ff20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801ff24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801ff26:	bf00      	nop
 801ff28:	370c      	adds	r7, #12
 801ff2a:	46bd      	mov	sp, r7
 801ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff30:	4770      	bx	lr
 801ff32:	bf00      	nop
 801ff34:	20000100 	.word	0x20000100
	...

0801ff40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801ff40:	f3ef 8009 	mrs	r0, PSP
 801ff44:	f3bf 8f6f 	isb	sy
 801ff48:	4b15      	ldr	r3, [pc, #84]	; (801ffa0 <pxCurrentTCBConst>)
 801ff4a:	681a      	ldr	r2, [r3, #0]
 801ff4c:	f01e 0f10 	tst.w	lr, #16
 801ff50:	bf08      	it	eq
 801ff52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801ff56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff5a:	6010      	str	r0, [r2, #0]
 801ff5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801ff60:	f04f 0050 	mov.w	r0, #80	; 0x50
 801ff64:	f380 8811 	msr	BASEPRI, r0
 801ff68:	f3bf 8f4f 	dsb	sy
 801ff6c:	f3bf 8f6f 	isb	sy
 801ff70:	f7ff fcc4 	bl	801f8fc <vTaskSwitchContext>
 801ff74:	f04f 0000 	mov.w	r0, #0
 801ff78:	f380 8811 	msr	BASEPRI, r0
 801ff7c:	bc09      	pop	{r0, r3}
 801ff7e:	6819      	ldr	r1, [r3, #0]
 801ff80:	6808      	ldr	r0, [r1, #0]
 801ff82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff86:	f01e 0f10 	tst.w	lr, #16
 801ff8a:	bf08      	it	eq
 801ff8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801ff90:	f380 8809 	msr	PSP, r0
 801ff94:	f3bf 8f6f 	isb	sy
 801ff98:	4770      	bx	lr
 801ff9a:	bf00      	nop
 801ff9c:	f3af 8000 	nop.w

0801ffa0 <pxCurrentTCBConst>:
 801ffa0:	200005fc 	.word	0x200005fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801ffa4:	bf00      	nop
 801ffa6:	bf00      	nop

0801ffa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801ffa8:	b580      	push	{r7, lr}
 801ffaa:	b082      	sub	sp, #8
 801ffac:	af00      	add	r7, sp, #0
	__asm volatile
 801ffae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ffb2:	f383 8811 	msr	BASEPRI, r3
 801ffb6:	f3bf 8f6f 	isb	sy
 801ffba:	f3bf 8f4f 	dsb	sy
 801ffbe:	607b      	str	r3, [r7, #4]
}
 801ffc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801ffc2:	f7ff fbe3 	bl	801f78c <xTaskIncrementTick>
 801ffc6:	4603      	mov	r3, r0
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d003      	beq.n	801ffd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801ffcc:	4b06      	ldr	r3, [pc, #24]	; (801ffe8 <SysTick_Handler+0x40>)
 801ffce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ffd2:	601a      	str	r2, [r3, #0]
 801ffd4:	2300      	movs	r3, #0
 801ffd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801ffd8:	683b      	ldr	r3, [r7, #0]
 801ffda:	f383 8811 	msr	BASEPRI, r3
}
 801ffde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801ffe0:	bf00      	nop
 801ffe2:	3708      	adds	r7, #8
 801ffe4:	46bd      	mov	sp, r7
 801ffe6:	bd80      	pop	{r7, pc}
 801ffe8:	e000ed04 	.word	0xe000ed04

0801ffec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801ffec:	b480      	push	{r7}
 801ffee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801fff0:	4b0b      	ldr	r3, [pc, #44]	; (8020020 <vPortSetupTimerInterrupt+0x34>)
 801fff2:	2200      	movs	r2, #0
 801fff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801fff6:	4b0b      	ldr	r3, [pc, #44]	; (8020024 <vPortSetupTimerInterrupt+0x38>)
 801fff8:	2200      	movs	r2, #0
 801fffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801fffc:	4b0a      	ldr	r3, [pc, #40]	; (8020028 <vPortSetupTimerInterrupt+0x3c>)
 801fffe:	681b      	ldr	r3, [r3, #0]
 8020000:	4a0a      	ldr	r2, [pc, #40]	; (802002c <vPortSetupTimerInterrupt+0x40>)
 8020002:	fba2 2303 	umull	r2, r3, r2, r3
 8020006:	099b      	lsrs	r3, r3, #6
 8020008:	4a09      	ldr	r2, [pc, #36]	; (8020030 <vPortSetupTimerInterrupt+0x44>)
 802000a:	3b01      	subs	r3, #1
 802000c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802000e:	4b04      	ldr	r3, [pc, #16]	; (8020020 <vPortSetupTimerInterrupt+0x34>)
 8020010:	2207      	movs	r2, #7
 8020012:	601a      	str	r2, [r3, #0]
}
 8020014:	bf00      	nop
 8020016:	46bd      	mov	sp, r7
 8020018:	f85d 7b04 	ldr.w	r7, [sp], #4
 802001c:	4770      	bx	lr
 802001e:	bf00      	nop
 8020020:	e000e010 	.word	0xe000e010
 8020024:	e000e018 	.word	0xe000e018
 8020028:	20000000 	.word	0x20000000
 802002c:	10624dd3 	.word	0x10624dd3
 8020030:	e000e014 	.word	0xe000e014

08020034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8020034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8020044 <vPortEnableVFP+0x10>
 8020038:	6801      	ldr	r1, [r0, #0]
 802003a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802003e:	6001      	str	r1, [r0, #0]
 8020040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8020042:	bf00      	nop
 8020044:	e000ed88 	.word	0xe000ed88

08020048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8020048:	b580      	push	{r7, lr}
 802004a:	b08a      	sub	sp, #40	; 0x28
 802004c:	af00      	add	r7, sp, #0
 802004e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8020050:	2300      	movs	r3, #0
 8020052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8020054:	f7ff faf0 	bl	801f638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8020058:	4b5b      	ldr	r3, [pc, #364]	; (80201c8 <pvPortMalloc+0x180>)
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	2b00      	cmp	r3, #0
 802005e:	d101      	bne.n	8020064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8020060:	f000 f920 	bl	80202a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8020064:	4b59      	ldr	r3, [pc, #356]	; (80201cc <pvPortMalloc+0x184>)
 8020066:	681a      	ldr	r2, [r3, #0]
 8020068:	687b      	ldr	r3, [r7, #4]
 802006a:	4013      	ands	r3, r2
 802006c:	2b00      	cmp	r3, #0
 802006e:	f040 8093 	bne.w	8020198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8020072:	687b      	ldr	r3, [r7, #4]
 8020074:	2b00      	cmp	r3, #0
 8020076:	d01d      	beq.n	80200b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8020078:	2208      	movs	r2, #8
 802007a:	687b      	ldr	r3, [r7, #4]
 802007c:	4413      	add	r3, r2
 802007e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	f003 0307 	and.w	r3, r3, #7
 8020086:	2b00      	cmp	r3, #0
 8020088:	d014      	beq.n	80200b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	f023 0307 	bic.w	r3, r3, #7
 8020090:	3308      	adds	r3, #8
 8020092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	f003 0307 	and.w	r3, r3, #7
 802009a:	2b00      	cmp	r3, #0
 802009c:	d00a      	beq.n	80200b4 <pvPortMalloc+0x6c>
	__asm volatile
 802009e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80200a2:	f383 8811 	msr	BASEPRI, r3
 80200a6:	f3bf 8f6f 	isb	sy
 80200aa:	f3bf 8f4f 	dsb	sy
 80200ae:	617b      	str	r3, [r7, #20]
}
 80200b0:	bf00      	nop
 80200b2:	e7fe      	b.n	80200b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	d06e      	beq.n	8020198 <pvPortMalloc+0x150>
 80200ba:	4b45      	ldr	r3, [pc, #276]	; (80201d0 <pvPortMalloc+0x188>)
 80200bc:	681b      	ldr	r3, [r3, #0]
 80200be:	687a      	ldr	r2, [r7, #4]
 80200c0:	429a      	cmp	r2, r3
 80200c2:	d869      	bhi.n	8020198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80200c4:	4b43      	ldr	r3, [pc, #268]	; (80201d4 <pvPortMalloc+0x18c>)
 80200c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80200c8:	4b42      	ldr	r3, [pc, #264]	; (80201d4 <pvPortMalloc+0x18c>)
 80200ca:	681b      	ldr	r3, [r3, #0]
 80200cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80200ce:	e004      	b.n	80200da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80200d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80200d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200d6:	681b      	ldr	r3, [r3, #0]
 80200d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80200da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200dc:	685b      	ldr	r3, [r3, #4]
 80200de:	687a      	ldr	r2, [r7, #4]
 80200e0:	429a      	cmp	r2, r3
 80200e2:	d903      	bls.n	80200ec <pvPortMalloc+0xa4>
 80200e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d1f1      	bne.n	80200d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80200ec:	4b36      	ldr	r3, [pc, #216]	; (80201c8 <pvPortMalloc+0x180>)
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80200f2:	429a      	cmp	r2, r3
 80200f4:	d050      	beq.n	8020198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80200f6:	6a3b      	ldr	r3, [r7, #32]
 80200f8:	681b      	ldr	r3, [r3, #0]
 80200fa:	2208      	movs	r2, #8
 80200fc:	4413      	add	r3, r2
 80200fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8020100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020102:	681a      	ldr	r2, [r3, #0]
 8020104:	6a3b      	ldr	r3, [r7, #32]
 8020106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8020108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802010a:	685a      	ldr	r2, [r3, #4]
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	1ad2      	subs	r2, r2, r3
 8020110:	2308      	movs	r3, #8
 8020112:	005b      	lsls	r3, r3, #1
 8020114:	429a      	cmp	r2, r3
 8020116:	d91f      	bls.n	8020158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8020118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	4413      	add	r3, r2
 802011e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020120:	69bb      	ldr	r3, [r7, #24]
 8020122:	f003 0307 	and.w	r3, r3, #7
 8020126:	2b00      	cmp	r3, #0
 8020128:	d00a      	beq.n	8020140 <pvPortMalloc+0xf8>
	__asm volatile
 802012a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802012e:	f383 8811 	msr	BASEPRI, r3
 8020132:	f3bf 8f6f 	isb	sy
 8020136:	f3bf 8f4f 	dsb	sy
 802013a:	613b      	str	r3, [r7, #16]
}
 802013c:	bf00      	nop
 802013e:	e7fe      	b.n	802013e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8020140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020142:	685a      	ldr	r2, [r3, #4]
 8020144:	687b      	ldr	r3, [r7, #4]
 8020146:	1ad2      	subs	r2, r2, r3
 8020148:	69bb      	ldr	r3, [r7, #24]
 802014a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 802014c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802014e:	687a      	ldr	r2, [r7, #4]
 8020150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8020152:	69b8      	ldr	r0, [r7, #24]
 8020154:	f000 f908 	bl	8020368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8020158:	4b1d      	ldr	r3, [pc, #116]	; (80201d0 <pvPortMalloc+0x188>)
 802015a:	681a      	ldr	r2, [r3, #0]
 802015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802015e:	685b      	ldr	r3, [r3, #4]
 8020160:	1ad3      	subs	r3, r2, r3
 8020162:	4a1b      	ldr	r2, [pc, #108]	; (80201d0 <pvPortMalloc+0x188>)
 8020164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8020166:	4b1a      	ldr	r3, [pc, #104]	; (80201d0 <pvPortMalloc+0x188>)
 8020168:	681a      	ldr	r2, [r3, #0]
 802016a:	4b1b      	ldr	r3, [pc, #108]	; (80201d8 <pvPortMalloc+0x190>)
 802016c:	681b      	ldr	r3, [r3, #0]
 802016e:	429a      	cmp	r2, r3
 8020170:	d203      	bcs.n	802017a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8020172:	4b17      	ldr	r3, [pc, #92]	; (80201d0 <pvPortMalloc+0x188>)
 8020174:	681b      	ldr	r3, [r3, #0]
 8020176:	4a18      	ldr	r2, [pc, #96]	; (80201d8 <pvPortMalloc+0x190>)
 8020178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802017a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802017c:	685a      	ldr	r2, [r3, #4]
 802017e:	4b13      	ldr	r3, [pc, #76]	; (80201cc <pvPortMalloc+0x184>)
 8020180:	681b      	ldr	r3, [r3, #0]
 8020182:	431a      	orrs	r2, r3
 8020184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8020188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802018a:	2200      	movs	r2, #0
 802018c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 802018e:	4b13      	ldr	r3, [pc, #76]	; (80201dc <pvPortMalloc+0x194>)
 8020190:	681b      	ldr	r3, [r3, #0]
 8020192:	3301      	adds	r3, #1
 8020194:	4a11      	ldr	r2, [pc, #68]	; (80201dc <pvPortMalloc+0x194>)
 8020196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8020198:	f7ff fa5c 	bl	801f654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 802019c:	69fb      	ldr	r3, [r7, #28]
 802019e:	f003 0307 	and.w	r3, r3, #7
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d00a      	beq.n	80201bc <pvPortMalloc+0x174>
	__asm volatile
 80201a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80201aa:	f383 8811 	msr	BASEPRI, r3
 80201ae:	f3bf 8f6f 	isb	sy
 80201b2:	f3bf 8f4f 	dsb	sy
 80201b6:	60fb      	str	r3, [r7, #12]
}
 80201b8:	bf00      	nop
 80201ba:	e7fe      	b.n	80201ba <pvPortMalloc+0x172>
	return pvReturn;
 80201bc:	69fb      	ldr	r3, [r7, #28]
}
 80201be:	4618      	mov	r0, r3
 80201c0:	3728      	adds	r7, #40	; 0x28
 80201c2:	46bd      	mov	sp, r7
 80201c4:	bd80      	pop	{r7, pc}
 80201c6:	bf00      	nop
 80201c8:	20004338 	.word	0x20004338
 80201cc:	2000434c 	.word	0x2000434c
 80201d0:	2000433c 	.word	0x2000433c
 80201d4:	20004330 	.word	0x20004330
 80201d8:	20004340 	.word	0x20004340
 80201dc:	20004344 	.word	0x20004344

080201e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80201e0:	b580      	push	{r7, lr}
 80201e2:	b086      	sub	sp, #24
 80201e4:	af00      	add	r7, sp, #0
 80201e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80201e8:	687b      	ldr	r3, [r7, #4]
 80201ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d04d      	beq.n	802028e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80201f2:	2308      	movs	r3, #8
 80201f4:	425b      	negs	r3, r3
 80201f6:	697a      	ldr	r2, [r7, #20]
 80201f8:	4413      	add	r3, r2
 80201fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80201fc:	697b      	ldr	r3, [r7, #20]
 80201fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8020200:	693b      	ldr	r3, [r7, #16]
 8020202:	685a      	ldr	r2, [r3, #4]
 8020204:	4b24      	ldr	r3, [pc, #144]	; (8020298 <vPortFree+0xb8>)
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	4013      	ands	r3, r2
 802020a:	2b00      	cmp	r3, #0
 802020c:	d10a      	bne.n	8020224 <vPortFree+0x44>
	__asm volatile
 802020e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020212:	f383 8811 	msr	BASEPRI, r3
 8020216:	f3bf 8f6f 	isb	sy
 802021a:	f3bf 8f4f 	dsb	sy
 802021e:	60fb      	str	r3, [r7, #12]
}
 8020220:	bf00      	nop
 8020222:	e7fe      	b.n	8020222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8020224:	693b      	ldr	r3, [r7, #16]
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	2b00      	cmp	r3, #0
 802022a:	d00a      	beq.n	8020242 <vPortFree+0x62>
	__asm volatile
 802022c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020230:	f383 8811 	msr	BASEPRI, r3
 8020234:	f3bf 8f6f 	isb	sy
 8020238:	f3bf 8f4f 	dsb	sy
 802023c:	60bb      	str	r3, [r7, #8]
}
 802023e:	bf00      	nop
 8020240:	e7fe      	b.n	8020240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8020242:	693b      	ldr	r3, [r7, #16]
 8020244:	685a      	ldr	r2, [r3, #4]
 8020246:	4b14      	ldr	r3, [pc, #80]	; (8020298 <vPortFree+0xb8>)
 8020248:	681b      	ldr	r3, [r3, #0]
 802024a:	4013      	ands	r3, r2
 802024c:	2b00      	cmp	r3, #0
 802024e:	d01e      	beq.n	802028e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8020250:	693b      	ldr	r3, [r7, #16]
 8020252:	681b      	ldr	r3, [r3, #0]
 8020254:	2b00      	cmp	r3, #0
 8020256:	d11a      	bne.n	802028e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8020258:	693b      	ldr	r3, [r7, #16]
 802025a:	685a      	ldr	r2, [r3, #4]
 802025c:	4b0e      	ldr	r3, [pc, #56]	; (8020298 <vPortFree+0xb8>)
 802025e:	681b      	ldr	r3, [r3, #0]
 8020260:	43db      	mvns	r3, r3
 8020262:	401a      	ands	r2, r3
 8020264:	693b      	ldr	r3, [r7, #16]
 8020266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8020268:	f7ff f9e6 	bl	801f638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802026c:	693b      	ldr	r3, [r7, #16]
 802026e:	685a      	ldr	r2, [r3, #4]
 8020270:	4b0a      	ldr	r3, [pc, #40]	; (802029c <vPortFree+0xbc>)
 8020272:	681b      	ldr	r3, [r3, #0]
 8020274:	4413      	add	r3, r2
 8020276:	4a09      	ldr	r2, [pc, #36]	; (802029c <vPortFree+0xbc>)
 8020278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802027a:	6938      	ldr	r0, [r7, #16]
 802027c:	f000 f874 	bl	8020368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8020280:	4b07      	ldr	r3, [pc, #28]	; (80202a0 <vPortFree+0xc0>)
 8020282:	681b      	ldr	r3, [r3, #0]
 8020284:	3301      	adds	r3, #1
 8020286:	4a06      	ldr	r2, [pc, #24]	; (80202a0 <vPortFree+0xc0>)
 8020288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 802028a:	f7ff f9e3 	bl	801f654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802028e:	bf00      	nop
 8020290:	3718      	adds	r7, #24
 8020292:	46bd      	mov	sp, r7
 8020294:	bd80      	pop	{r7, pc}
 8020296:	bf00      	nop
 8020298:	2000434c 	.word	0x2000434c
 802029c:	2000433c 	.word	0x2000433c
 80202a0:	20004348 	.word	0x20004348

080202a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80202a4:	b480      	push	{r7}
 80202a6:	b085      	sub	sp, #20
 80202a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80202aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80202ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80202b0:	4b27      	ldr	r3, [pc, #156]	; (8020350 <prvHeapInit+0xac>)
 80202b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80202b4:	68fb      	ldr	r3, [r7, #12]
 80202b6:	f003 0307 	and.w	r3, r3, #7
 80202ba:	2b00      	cmp	r3, #0
 80202bc:	d00c      	beq.n	80202d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80202be:	68fb      	ldr	r3, [r7, #12]
 80202c0:	3307      	adds	r3, #7
 80202c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80202c4:	68fb      	ldr	r3, [r7, #12]
 80202c6:	f023 0307 	bic.w	r3, r3, #7
 80202ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80202cc:	68ba      	ldr	r2, [r7, #8]
 80202ce:	68fb      	ldr	r3, [r7, #12]
 80202d0:	1ad3      	subs	r3, r2, r3
 80202d2:	4a1f      	ldr	r2, [pc, #124]	; (8020350 <prvHeapInit+0xac>)
 80202d4:	4413      	add	r3, r2
 80202d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80202d8:	68fb      	ldr	r3, [r7, #12]
 80202da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80202dc:	4a1d      	ldr	r2, [pc, #116]	; (8020354 <prvHeapInit+0xb0>)
 80202de:	687b      	ldr	r3, [r7, #4]
 80202e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80202e2:	4b1c      	ldr	r3, [pc, #112]	; (8020354 <prvHeapInit+0xb0>)
 80202e4:	2200      	movs	r2, #0
 80202e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80202e8:	687b      	ldr	r3, [r7, #4]
 80202ea:	68ba      	ldr	r2, [r7, #8]
 80202ec:	4413      	add	r3, r2
 80202ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80202f0:	2208      	movs	r2, #8
 80202f2:	68fb      	ldr	r3, [r7, #12]
 80202f4:	1a9b      	subs	r3, r3, r2
 80202f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80202f8:	68fb      	ldr	r3, [r7, #12]
 80202fa:	f023 0307 	bic.w	r3, r3, #7
 80202fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8020300:	68fb      	ldr	r3, [r7, #12]
 8020302:	4a15      	ldr	r2, [pc, #84]	; (8020358 <prvHeapInit+0xb4>)
 8020304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8020306:	4b14      	ldr	r3, [pc, #80]	; (8020358 <prvHeapInit+0xb4>)
 8020308:	681b      	ldr	r3, [r3, #0]
 802030a:	2200      	movs	r2, #0
 802030c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802030e:	4b12      	ldr	r3, [pc, #72]	; (8020358 <prvHeapInit+0xb4>)
 8020310:	681b      	ldr	r3, [r3, #0]
 8020312:	2200      	movs	r2, #0
 8020314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8020316:	687b      	ldr	r3, [r7, #4]
 8020318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802031a:	683b      	ldr	r3, [r7, #0]
 802031c:	68fa      	ldr	r2, [r7, #12]
 802031e:	1ad2      	subs	r2, r2, r3
 8020320:	683b      	ldr	r3, [r7, #0]
 8020322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8020324:	4b0c      	ldr	r3, [pc, #48]	; (8020358 <prvHeapInit+0xb4>)
 8020326:	681a      	ldr	r2, [r3, #0]
 8020328:	683b      	ldr	r3, [r7, #0]
 802032a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802032c:	683b      	ldr	r3, [r7, #0]
 802032e:	685b      	ldr	r3, [r3, #4]
 8020330:	4a0a      	ldr	r2, [pc, #40]	; (802035c <prvHeapInit+0xb8>)
 8020332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8020334:	683b      	ldr	r3, [r7, #0]
 8020336:	685b      	ldr	r3, [r3, #4]
 8020338:	4a09      	ldr	r2, [pc, #36]	; (8020360 <prvHeapInit+0xbc>)
 802033a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802033c:	4b09      	ldr	r3, [pc, #36]	; (8020364 <prvHeapInit+0xc0>)
 802033e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020342:	601a      	str	r2, [r3, #0]
}
 8020344:	bf00      	nop
 8020346:	3714      	adds	r7, #20
 8020348:	46bd      	mov	sp, r7
 802034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802034e:	4770      	bx	lr
 8020350:	20000730 	.word	0x20000730
 8020354:	20004330 	.word	0x20004330
 8020358:	20004338 	.word	0x20004338
 802035c:	20004340 	.word	0x20004340
 8020360:	2000433c 	.word	0x2000433c
 8020364:	2000434c 	.word	0x2000434c

08020368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8020368:	b480      	push	{r7}
 802036a:	b085      	sub	sp, #20
 802036c:	af00      	add	r7, sp, #0
 802036e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8020370:	4b28      	ldr	r3, [pc, #160]	; (8020414 <prvInsertBlockIntoFreeList+0xac>)
 8020372:	60fb      	str	r3, [r7, #12]
 8020374:	e002      	b.n	802037c <prvInsertBlockIntoFreeList+0x14>
 8020376:	68fb      	ldr	r3, [r7, #12]
 8020378:	681b      	ldr	r3, [r3, #0]
 802037a:	60fb      	str	r3, [r7, #12]
 802037c:	68fb      	ldr	r3, [r7, #12]
 802037e:	681b      	ldr	r3, [r3, #0]
 8020380:	687a      	ldr	r2, [r7, #4]
 8020382:	429a      	cmp	r2, r3
 8020384:	d8f7      	bhi.n	8020376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8020386:	68fb      	ldr	r3, [r7, #12]
 8020388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802038a:	68fb      	ldr	r3, [r7, #12]
 802038c:	685b      	ldr	r3, [r3, #4]
 802038e:	68ba      	ldr	r2, [r7, #8]
 8020390:	4413      	add	r3, r2
 8020392:	687a      	ldr	r2, [r7, #4]
 8020394:	429a      	cmp	r2, r3
 8020396:	d108      	bne.n	80203aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8020398:	68fb      	ldr	r3, [r7, #12]
 802039a:	685a      	ldr	r2, [r3, #4]
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	685b      	ldr	r3, [r3, #4]
 80203a0:	441a      	add	r2, r3
 80203a2:	68fb      	ldr	r3, [r7, #12]
 80203a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80203a6:	68fb      	ldr	r3, [r7, #12]
 80203a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	685b      	ldr	r3, [r3, #4]
 80203b2:	68ba      	ldr	r2, [r7, #8]
 80203b4:	441a      	add	r2, r3
 80203b6:	68fb      	ldr	r3, [r7, #12]
 80203b8:	681b      	ldr	r3, [r3, #0]
 80203ba:	429a      	cmp	r2, r3
 80203bc:	d118      	bne.n	80203f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	681a      	ldr	r2, [r3, #0]
 80203c2:	4b15      	ldr	r3, [pc, #84]	; (8020418 <prvInsertBlockIntoFreeList+0xb0>)
 80203c4:	681b      	ldr	r3, [r3, #0]
 80203c6:	429a      	cmp	r2, r3
 80203c8:	d00d      	beq.n	80203e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	685a      	ldr	r2, [r3, #4]
 80203ce:	68fb      	ldr	r3, [r7, #12]
 80203d0:	681b      	ldr	r3, [r3, #0]
 80203d2:	685b      	ldr	r3, [r3, #4]
 80203d4:	441a      	add	r2, r3
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80203da:	68fb      	ldr	r3, [r7, #12]
 80203dc:	681b      	ldr	r3, [r3, #0]
 80203de:	681a      	ldr	r2, [r3, #0]
 80203e0:	687b      	ldr	r3, [r7, #4]
 80203e2:	601a      	str	r2, [r3, #0]
 80203e4:	e008      	b.n	80203f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80203e6:	4b0c      	ldr	r3, [pc, #48]	; (8020418 <prvInsertBlockIntoFreeList+0xb0>)
 80203e8:	681a      	ldr	r2, [r3, #0]
 80203ea:	687b      	ldr	r3, [r7, #4]
 80203ec:	601a      	str	r2, [r3, #0]
 80203ee:	e003      	b.n	80203f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80203f0:	68fb      	ldr	r3, [r7, #12]
 80203f2:	681a      	ldr	r2, [r3, #0]
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80203f8:	68fa      	ldr	r2, [r7, #12]
 80203fa:	687b      	ldr	r3, [r7, #4]
 80203fc:	429a      	cmp	r2, r3
 80203fe:	d002      	beq.n	8020406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8020400:	68fb      	ldr	r3, [r7, #12]
 8020402:	687a      	ldr	r2, [r7, #4]
 8020404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8020406:	bf00      	nop
 8020408:	3714      	adds	r7, #20
 802040a:	46bd      	mov	sp, r7
 802040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020410:	4770      	bx	lr
 8020412:	bf00      	nop
 8020414:	20004330 	.word	0x20004330
 8020418:	20004338 	.word	0x20004338

0802041c <round>:
 802041c:	ec51 0b10 	vmov	r0, r1, d0
 8020420:	b570      	push	{r4, r5, r6, lr}
 8020422:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8020426:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 802042a:	2c13      	cmp	r4, #19
 802042c:	ee10 2a10 	vmov	r2, s0
 8020430:	460b      	mov	r3, r1
 8020432:	dc19      	bgt.n	8020468 <round+0x4c>
 8020434:	2c00      	cmp	r4, #0
 8020436:	da09      	bge.n	802044c <round+0x30>
 8020438:	3401      	adds	r4, #1
 802043a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 802043e:	d103      	bne.n	8020448 <round+0x2c>
 8020440:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8020444:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020448:	2100      	movs	r1, #0
 802044a:	e028      	b.n	802049e <round+0x82>
 802044c:	4d15      	ldr	r5, [pc, #84]	; (80204a4 <round+0x88>)
 802044e:	4125      	asrs	r5, r4
 8020450:	ea01 0605 	and.w	r6, r1, r5
 8020454:	4332      	orrs	r2, r6
 8020456:	d00e      	beq.n	8020476 <round+0x5a>
 8020458:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 802045c:	fa42 f404 	asr.w	r4, r2, r4
 8020460:	4423      	add	r3, r4
 8020462:	ea23 0305 	bic.w	r3, r3, r5
 8020466:	e7ef      	b.n	8020448 <round+0x2c>
 8020468:	2c33      	cmp	r4, #51	; 0x33
 802046a:	dd07      	ble.n	802047c <round+0x60>
 802046c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8020470:	d101      	bne.n	8020476 <round+0x5a>
 8020472:	f7ef fe3b 	bl	80100ec <__adddf3>
 8020476:	ec41 0b10 	vmov	d0, r0, r1
 802047a:	bd70      	pop	{r4, r5, r6, pc}
 802047c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8020480:	f04f 35ff 	mov.w	r5, #4294967295
 8020484:	40f5      	lsrs	r5, r6
 8020486:	4228      	tst	r0, r5
 8020488:	d0f5      	beq.n	8020476 <round+0x5a>
 802048a:	2101      	movs	r1, #1
 802048c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8020490:	fa01 f404 	lsl.w	r4, r1, r4
 8020494:	1912      	adds	r2, r2, r4
 8020496:	bf28      	it	cs
 8020498:	185b      	addcs	r3, r3, r1
 802049a:	ea22 0105 	bic.w	r1, r2, r5
 802049e:	4608      	mov	r0, r1
 80204a0:	4619      	mov	r1, r3
 80204a2:	e7e8      	b.n	8020476 <round+0x5a>
 80204a4:	000fffff 	.word	0x000fffff

080204a8 <sqrtf>:
 80204a8:	b508      	push	{r3, lr}
 80204aa:	ed2d 8b02 	vpush	{d8}
 80204ae:	eeb0 8a40 	vmov.f32	s16, s0
 80204b2:	f000 f81f 	bl	80204f4 <__ieee754_sqrtf>
 80204b6:	4b0d      	ldr	r3, [pc, #52]	; (80204ec <sqrtf+0x44>)
 80204b8:	f993 3000 	ldrsb.w	r3, [r3]
 80204bc:	3301      	adds	r3, #1
 80204be:	d011      	beq.n	80204e4 <sqrtf+0x3c>
 80204c0:	eeb4 8a48 	vcmp.f32	s16, s16
 80204c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204c8:	d60c      	bvs.n	80204e4 <sqrtf+0x3c>
 80204ca:	eddf 8a09 	vldr	s17, [pc, #36]	; 80204f0 <sqrtf+0x48>
 80204ce:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80204d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204d6:	d505      	bpl.n	80204e4 <sqrtf+0x3c>
 80204d8:	f000 f834 	bl	8020544 <__errno>
 80204dc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80204e0:	2321      	movs	r3, #33	; 0x21
 80204e2:	6003      	str	r3, [r0, #0]
 80204e4:	ecbd 8b02 	vpop	{d8}
 80204e8:	bd08      	pop	{r3, pc}
 80204ea:	bf00      	nop
 80204ec:	20000104 	.word	0x20000104
 80204f0:	00000000 	.word	0x00000000

080204f4 <__ieee754_sqrtf>:
 80204f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80204f8:	4770      	bx	lr
	...

080204fc <gcvt>:
 80204fc:	b530      	push	{r4, r5, lr}
 80204fe:	2200      	movs	r2, #0
 8020500:	b085      	sub	sp, #20
 8020502:	460c      	mov	r4, r1
 8020504:	4605      	mov	r5, r0
 8020506:	2300      	movs	r3, #0
 8020508:	ec51 0b10 	vmov	r0, r1, d0
 802050c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8020510:	f7f0 fa14 	bl	801093c <__aeabi_dcmplt>
 8020514:	ed9d 0b02 	vldr	d0, [sp, #8]
 8020518:	4622      	mov	r2, r4
 802051a:	b118      	cbz	r0, 8020524 <gcvt+0x28>
 802051c:	232d      	movs	r3, #45	; 0x2d
 802051e:	f802 3b01 	strb.w	r3, [r2], #1
 8020522:	3d01      	subs	r5, #1
 8020524:	2300      	movs	r3, #0
 8020526:	4806      	ldr	r0, [pc, #24]	; (8020540 <gcvt+0x44>)
 8020528:	9300      	str	r3, [sp, #0]
 802052a:	4629      	mov	r1, r5
 802052c:	2367      	movs	r3, #103	; 0x67
 802052e:	6800      	ldr	r0, [r0, #0]
 8020530:	f000 f92a 	bl	8020788 <_gcvt>
 8020534:	2800      	cmp	r0, #0
 8020536:	bf14      	ite	ne
 8020538:	4620      	movne	r0, r4
 802053a:	2000      	moveq	r0, #0
 802053c:	b005      	add	sp, #20
 802053e:	bd30      	pop	{r4, r5, pc}
 8020540:	20000108 	.word	0x20000108

08020544 <__errno>:
 8020544:	4b01      	ldr	r3, [pc, #4]	; (802054c <__errno+0x8>)
 8020546:	6818      	ldr	r0, [r3, #0]
 8020548:	4770      	bx	lr
 802054a:	bf00      	nop
 802054c:	20000108 	.word	0x20000108

08020550 <__libc_init_array>:
 8020550:	b570      	push	{r4, r5, r6, lr}
 8020552:	4d0d      	ldr	r5, [pc, #52]	; (8020588 <__libc_init_array+0x38>)
 8020554:	4c0d      	ldr	r4, [pc, #52]	; (802058c <__libc_init_array+0x3c>)
 8020556:	1b64      	subs	r4, r4, r5
 8020558:	10a4      	asrs	r4, r4, #2
 802055a:	2600      	movs	r6, #0
 802055c:	42a6      	cmp	r6, r4
 802055e:	d109      	bne.n	8020574 <__libc_init_array+0x24>
 8020560:	4d0b      	ldr	r5, [pc, #44]	; (8020590 <__libc_init_array+0x40>)
 8020562:	4c0c      	ldr	r4, [pc, #48]	; (8020594 <__libc_init_array+0x44>)
 8020564:	f002 fbc0 	bl	8022ce8 <_init>
 8020568:	1b64      	subs	r4, r4, r5
 802056a:	10a4      	asrs	r4, r4, #2
 802056c:	2600      	movs	r6, #0
 802056e:	42a6      	cmp	r6, r4
 8020570:	d105      	bne.n	802057e <__libc_init_array+0x2e>
 8020572:	bd70      	pop	{r4, r5, r6, pc}
 8020574:	f855 3b04 	ldr.w	r3, [r5], #4
 8020578:	4798      	blx	r3
 802057a:	3601      	adds	r6, #1
 802057c:	e7ee      	b.n	802055c <__libc_init_array+0xc>
 802057e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020582:	4798      	blx	r3
 8020584:	3601      	adds	r6, #1
 8020586:	e7f2      	b.n	802056e <__libc_init_array+0x1e>
 8020588:	080001cc 	.word	0x080001cc
 802058c:	080001cc 	.word	0x080001cc
 8020590:	080001cc 	.word	0x080001cc
 8020594:	080001d0 	.word	0x080001d0

08020598 <__itoa>:
 8020598:	1e93      	subs	r3, r2, #2
 802059a:	2b22      	cmp	r3, #34	; 0x22
 802059c:	b510      	push	{r4, lr}
 802059e:	460c      	mov	r4, r1
 80205a0:	d904      	bls.n	80205ac <__itoa+0x14>
 80205a2:	2300      	movs	r3, #0
 80205a4:	700b      	strb	r3, [r1, #0]
 80205a6:	461c      	mov	r4, r3
 80205a8:	4620      	mov	r0, r4
 80205aa:	bd10      	pop	{r4, pc}
 80205ac:	2a0a      	cmp	r2, #10
 80205ae:	d109      	bne.n	80205c4 <__itoa+0x2c>
 80205b0:	2800      	cmp	r0, #0
 80205b2:	da07      	bge.n	80205c4 <__itoa+0x2c>
 80205b4:	232d      	movs	r3, #45	; 0x2d
 80205b6:	700b      	strb	r3, [r1, #0]
 80205b8:	4240      	negs	r0, r0
 80205ba:	2101      	movs	r1, #1
 80205bc:	4421      	add	r1, r4
 80205be:	f000 f829 	bl	8020614 <__utoa>
 80205c2:	e7f1      	b.n	80205a8 <__itoa+0x10>
 80205c4:	2100      	movs	r1, #0
 80205c6:	e7f9      	b.n	80205bc <__itoa+0x24>

080205c8 <itoa>:
 80205c8:	f7ff bfe6 	b.w	8020598 <__itoa>

080205cc <memcmp>:
 80205cc:	b530      	push	{r4, r5, lr}
 80205ce:	3901      	subs	r1, #1
 80205d0:	2400      	movs	r4, #0
 80205d2:	42a2      	cmp	r2, r4
 80205d4:	d101      	bne.n	80205da <memcmp+0xe>
 80205d6:	2000      	movs	r0, #0
 80205d8:	e005      	b.n	80205e6 <memcmp+0x1a>
 80205da:	5d03      	ldrb	r3, [r0, r4]
 80205dc:	3401      	adds	r4, #1
 80205de:	5d0d      	ldrb	r5, [r1, r4]
 80205e0:	42ab      	cmp	r3, r5
 80205e2:	d0f6      	beq.n	80205d2 <memcmp+0x6>
 80205e4:	1b58      	subs	r0, r3, r5
 80205e6:	bd30      	pop	{r4, r5, pc}

080205e8 <memcpy>:
 80205e8:	440a      	add	r2, r1
 80205ea:	4291      	cmp	r1, r2
 80205ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80205f0:	d100      	bne.n	80205f4 <memcpy+0xc>
 80205f2:	4770      	bx	lr
 80205f4:	b510      	push	{r4, lr}
 80205f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80205fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80205fe:	4291      	cmp	r1, r2
 8020600:	d1f9      	bne.n	80205f6 <memcpy+0xe>
 8020602:	bd10      	pop	{r4, pc}

08020604 <memset>:
 8020604:	4402      	add	r2, r0
 8020606:	4603      	mov	r3, r0
 8020608:	4293      	cmp	r3, r2
 802060a:	d100      	bne.n	802060e <memset+0xa>
 802060c:	4770      	bx	lr
 802060e:	f803 1b01 	strb.w	r1, [r3], #1
 8020612:	e7f9      	b.n	8020608 <memset+0x4>

08020614 <__utoa>:
 8020614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020616:	4c1f      	ldr	r4, [pc, #124]	; (8020694 <__utoa+0x80>)
 8020618:	b08b      	sub	sp, #44	; 0x2c
 802061a:	4605      	mov	r5, r0
 802061c:	460b      	mov	r3, r1
 802061e:	466e      	mov	r6, sp
 8020620:	f104 0c20 	add.w	ip, r4, #32
 8020624:	6820      	ldr	r0, [r4, #0]
 8020626:	6861      	ldr	r1, [r4, #4]
 8020628:	4637      	mov	r7, r6
 802062a:	c703      	stmia	r7!, {r0, r1}
 802062c:	3408      	adds	r4, #8
 802062e:	4564      	cmp	r4, ip
 8020630:	463e      	mov	r6, r7
 8020632:	d1f7      	bne.n	8020624 <__utoa+0x10>
 8020634:	7921      	ldrb	r1, [r4, #4]
 8020636:	7139      	strb	r1, [r7, #4]
 8020638:	1e91      	subs	r1, r2, #2
 802063a:	6820      	ldr	r0, [r4, #0]
 802063c:	6038      	str	r0, [r7, #0]
 802063e:	2922      	cmp	r1, #34	; 0x22
 8020640:	f04f 0100 	mov.w	r1, #0
 8020644:	d904      	bls.n	8020650 <__utoa+0x3c>
 8020646:	7019      	strb	r1, [r3, #0]
 8020648:	460b      	mov	r3, r1
 802064a:	4618      	mov	r0, r3
 802064c:	b00b      	add	sp, #44	; 0x2c
 802064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020650:	1e58      	subs	r0, r3, #1
 8020652:	4684      	mov	ip, r0
 8020654:	fbb5 f7f2 	udiv	r7, r5, r2
 8020658:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 802065c:	fb02 5617 	mls	r6, r2, r7, r5
 8020660:	4476      	add	r6, lr
 8020662:	460c      	mov	r4, r1
 8020664:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8020668:	f80c 6f01 	strb.w	r6, [ip, #1]!
 802066c:	462e      	mov	r6, r5
 802066e:	42b2      	cmp	r2, r6
 8020670:	f101 0101 	add.w	r1, r1, #1
 8020674:	463d      	mov	r5, r7
 8020676:	d9ed      	bls.n	8020654 <__utoa+0x40>
 8020678:	2200      	movs	r2, #0
 802067a:	545a      	strb	r2, [r3, r1]
 802067c:	1919      	adds	r1, r3, r4
 802067e:	1aa5      	subs	r5, r4, r2
 8020680:	42aa      	cmp	r2, r5
 8020682:	dae2      	bge.n	802064a <__utoa+0x36>
 8020684:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8020688:	780e      	ldrb	r6, [r1, #0]
 802068a:	7006      	strb	r6, [r0, #0]
 802068c:	3201      	adds	r2, #1
 802068e:	f801 5901 	strb.w	r5, [r1], #-1
 8020692:	e7f4      	b.n	802067e <__utoa+0x6a>
 8020694:	0802a5c0 	.word	0x0802a5c0

08020698 <print_e>:
 8020698:	b5f0      	push	{r4, r5, r6, r7, lr}
 802069a:	b087      	sub	sp, #28
 802069c:	ec43 2b10 	vmov	d0, r2, r3
 80206a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80206a2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80206a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80206a8:	ab04      	add	r3, sp, #16
 80206aa:	9301      	str	r3, [sp, #4]
 80206ac:	ab03      	add	r3, sp, #12
 80206ae:	9300      	str	r3, [sp, #0]
 80206b0:	1c62      	adds	r2, r4, #1
 80206b2:	ab05      	add	r3, sp, #20
 80206b4:	460f      	mov	r7, r1
 80206b6:	2102      	movs	r1, #2
 80206b8:	f001 f80e 	bl	80216d8 <_dtoa_r>
 80206bc:	9a05      	ldr	r2, [sp, #20]
 80206be:	f242 730f 	movw	r3, #9999	; 0x270f
 80206c2:	429a      	cmp	r2, r3
 80206c4:	d105      	bne.n	80206d2 <print_e+0x3a>
 80206c6:	4601      	mov	r1, r0
 80206c8:	4638      	mov	r0, r7
 80206ca:	f000 fe6e 	bl	80213aa <strcpy>
 80206ce:	b007      	add	sp, #28
 80206d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80206d2:	463b      	mov	r3, r7
 80206d4:	7801      	ldrb	r1, [r0, #0]
 80206d6:	f803 1b01 	strb.w	r1, [r3], #1
 80206da:	2c00      	cmp	r4, #0
 80206dc:	bfc8      	it	gt
 80206de:	2501      	movgt	r5, #1
 80206e0:	212e      	movs	r1, #46	; 0x2e
 80206e2:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 80206e6:	b10f      	cbz	r7, 80206ec <print_e+0x54>
 80206e8:	2c00      	cmp	r4, #0
 80206ea:	dc37      	bgt.n	802075c <print_e+0xc4>
 80206ec:	2e67      	cmp	r6, #103	; 0x67
 80206ee:	d046      	beq.n	802077e <print_e+0xe6>
 80206f0:	2e47      	cmp	r6, #71	; 0x47
 80206f2:	d046      	beq.n	8020782 <print_e+0xea>
 80206f4:	212e      	movs	r1, #46	; 0x2e
 80206f6:	2030      	movs	r0, #48	; 0x30
 80206f8:	2c00      	cmp	r4, #0
 80206fa:	dc38      	bgt.n	802076e <print_e+0xd6>
 80206fc:	1e51      	subs	r1, r2, #1
 80206fe:	2900      	cmp	r1, #0
 8020700:	bfb8      	it	lt
 8020702:	f1c2 0201 	rsblt	r2, r2, #1
 8020706:	4618      	mov	r0, r3
 8020708:	9105      	str	r1, [sp, #20]
 802070a:	bfbc      	itt	lt
 802070c:	212d      	movlt	r1, #45	; 0x2d
 802070e:	9205      	strlt	r2, [sp, #20]
 8020710:	f800 6b02 	strb.w	r6, [r0], #2
 8020714:	bfb8      	it	lt
 8020716:	7059      	strblt	r1, [r3, #1]
 8020718:	9905      	ldr	r1, [sp, #20]
 802071a:	bfa4      	itt	ge
 802071c:	222b      	movge	r2, #43	; 0x2b
 802071e:	705a      	strbge	r2, [r3, #1]
 8020720:	2963      	cmp	r1, #99	; 0x63
 8020722:	dd0b      	ble.n	802073c <print_e+0xa4>
 8020724:	2264      	movs	r2, #100	; 0x64
 8020726:	fb91 f2f2 	sdiv	r2, r1, r2
 802072a:	f102 0430 	add.w	r4, r2, #48	; 0x30
 802072e:	1cd8      	adds	r0, r3, #3
 8020730:	709c      	strb	r4, [r3, #2]
 8020732:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8020736:	fb03 1202 	mla	r2, r3, r2, r1
 802073a:	9205      	str	r2, [sp, #20]
 802073c:	9a05      	ldr	r2, [sp, #20]
 802073e:	230a      	movs	r3, #10
 8020740:	fb92 f3f3 	sdiv	r3, r2, r3
 8020744:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8020748:	7001      	strb	r1, [r0, #0]
 802074a:	f06f 0109 	mvn.w	r1, #9
 802074e:	fb01 2303 	mla	r3, r1, r3, r2
 8020752:	3330      	adds	r3, #48	; 0x30
 8020754:	7043      	strb	r3, [r0, #1]
 8020756:	2300      	movs	r3, #0
 8020758:	7083      	strb	r3, [r0, #2]
 802075a:	e7b8      	b.n	80206ce <print_e+0x36>
 802075c:	b10d      	cbz	r5, 8020762 <print_e+0xca>
 802075e:	f803 1b01 	strb.w	r1, [r3], #1
 8020762:	7805      	ldrb	r5, [r0, #0]
 8020764:	f803 5b01 	strb.w	r5, [r3], #1
 8020768:	3c01      	subs	r4, #1
 802076a:	2500      	movs	r5, #0
 802076c:	e7b9      	b.n	80206e2 <print_e+0x4a>
 802076e:	b10d      	cbz	r5, 8020774 <print_e+0xdc>
 8020770:	f803 1b01 	strb.w	r1, [r3], #1
 8020774:	f803 0b01 	strb.w	r0, [r3], #1
 8020778:	3c01      	subs	r4, #1
 802077a:	2500      	movs	r5, #0
 802077c:	e7bc      	b.n	80206f8 <print_e+0x60>
 802077e:	2665      	movs	r6, #101	; 0x65
 8020780:	e7bc      	b.n	80206fc <print_e+0x64>
 8020782:	2645      	movs	r6, #69	; 0x45
 8020784:	e7ba      	b.n	80206fc <print_e+0x64>
	...

08020788 <_gcvt>:
 8020788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802078c:	ec55 4b10 	vmov	r4, r5, d0
 8020790:	b088      	sub	sp, #32
 8020792:	4681      	mov	r9, r0
 8020794:	4688      	mov	r8, r1
 8020796:	4616      	mov	r6, r2
 8020798:	469a      	mov	sl, r3
 802079a:	ee10 0a10 	vmov	r0, s0
 802079e:	2200      	movs	r2, #0
 80207a0:	2300      	movs	r3, #0
 80207a2:	4629      	mov	r1, r5
 80207a4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80207a6:	f7f0 f8c9 	bl	801093c <__aeabi_dcmplt>
 80207aa:	b110      	cbz	r0, 80207b2 <_gcvt+0x2a>
 80207ac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80207b0:	461d      	mov	r5, r3
 80207b2:	2200      	movs	r2, #0
 80207b4:	2300      	movs	r3, #0
 80207b6:	4620      	mov	r0, r4
 80207b8:	4629      	mov	r1, r5
 80207ba:	f7f0 f8b5 	bl	8010928 <__aeabi_dcmpeq>
 80207be:	b138      	cbz	r0, 80207d0 <_gcvt+0x48>
 80207c0:	2330      	movs	r3, #48	; 0x30
 80207c2:	7033      	strb	r3, [r6, #0]
 80207c4:	2300      	movs	r3, #0
 80207c6:	7073      	strb	r3, [r6, #1]
 80207c8:	4630      	mov	r0, r6
 80207ca:	b008      	add	sp, #32
 80207cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80207d0:	a34b      	add	r3, pc, #300	; (adr r3, 8020900 <_gcvt+0x178>)
 80207d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207d6:	4620      	mov	r0, r4
 80207d8:	4629      	mov	r1, r5
 80207da:	f7f0 f8b9 	bl	8010950 <__aeabi_dcmple>
 80207de:	b158      	cbz	r0, 80207f8 <_gcvt+0x70>
 80207e0:	f108 31ff 	add.w	r1, r8, #4294967295
 80207e4:	9100      	str	r1, [sp, #0]
 80207e6:	e9cd a701 	strd	sl, r7, [sp, #4]
 80207ea:	4622      	mov	r2, r4
 80207ec:	462b      	mov	r3, r5
 80207ee:	4631      	mov	r1, r6
 80207f0:	4648      	mov	r0, r9
 80207f2:	f7ff ff51 	bl	8020698 <print_e>
 80207f6:	e7e7      	b.n	80207c8 <_gcvt+0x40>
 80207f8:	4640      	mov	r0, r8
 80207fa:	f000 fcfb 	bl	80211f4 <_mprec_log10>
 80207fe:	4622      	mov	r2, r4
 8020800:	ec51 0b10 	vmov	r0, r1, d0
 8020804:	462b      	mov	r3, r5
 8020806:	f7f0 f8a3 	bl	8010950 <__aeabi_dcmple>
 802080a:	2800      	cmp	r0, #0
 802080c:	d1e8      	bne.n	80207e0 <_gcvt+0x58>
 802080e:	ab07      	add	r3, sp, #28
 8020810:	9301      	str	r3, [sp, #4]
 8020812:	ab06      	add	r3, sp, #24
 8020814:	9300      	str	r3, [sp, #0]
 8020816:	4642      	mov	r2, r8
 8020818:	ab05      	add	r3, sp, #20
 802081a:	ec45 4b10 	vmov	d0, r4, r5
 802081e:	2102      	movs	r1, #2
 8020820:	4648      	mov	r0, r9
 8020822:	f000 ff59 	bl	80216d8 <_dtoa_r>
 8020826:	9a05      	ldr	r2, [sp, #20]
 8020828:	f242 730f 	movw	r3, #9999	; 0x270f
 802082c:	429a      	cmp	r2, r3
 802082e:	d00e      	beq.n	802084e <_gcvt+0xc6>
 8020830:	4633      	mov	r3, r6
 8020832:	44b0      	add	r8, r6
 8020834:	4604      	mov	r4, r0
 8020836:	f810 5b01 	ldrb.w	r5, [r0], #1
 802083a:	9905      	ldr	r1, [sp, #20]
 802083c:	eba8 0203 	sub.w	r2, r8, r3
 8020840:	b10d      	cbz	r5, 8020846 <_gcvt+0xbe>
 8020842:	2900      	cmp	r1, #0
 8020844:	dc08      	bgt.n	8020858 <_gcvt+0xd0>
 8020846:	2000      	movs	r0, #0
 8020848:	f04f 0c30 	mov.w	ip, #48	; 0x30
 802084c:	e00d      	b.n	802086a <_gcvt+0xe2>
 802084e:	4601      	mov	r1, r0
 8020850:	4630      	mov	r0, r6
 8020852:	f000 fdaa 	bl	80213aa <strcpy>
 8020856:	e7b7      	b.n	80207c8 <_gcvt+0x40>
 8020858:	3901      	subs	r1, #1
 802085a:	f803 5b01 	strb.w	r5, [r3], #1
 802085e:	9105      	str	r1, [sp, #20]
 8020860:	e7e8      	b.n	8020834 <_gcvt+0xac>
 8020862:	f803 cb01 	strb.w	ip, [r3], #1
 8020866:	3a01      	subs	r2, #1
 8020868:	2001      	movs	r0, #1
 802086a:	2900      	cmp	r1, #0
 802086c:	460d      	mov	r5, r1
 802086e:	dc2a      	bgt.n	80208c6 <_gcvt+0x13e>
 8020870:	b100      	cbz	r0, 8020874 <_gcvt+0xec>
 8020872:	9105      	str	r1, [sp, #20]
 8020874:	b90f      	cbnz	r7, 802087a <_gcvt+0xf2>
 8020876:	7821      	ldrb	r1, [r4, #0]
 8020878:	b311      	cbz	r1, 80208c0 <_gcvt+0x138>
 802087a:	42b3      	cmp	r3, r6
 802087c:	bf04      	itt	eq
 802087e:	2130      	moveq	r1, #48	; 0x30
 8020880:	f803 1b01 	strbeq.w	r1, [r3], #1
 8020884:	212e      	movs	r1, #46	; 0x2e
 8020886:	7019      	strb	r1, [r3, #0]
 8020888:	9905      	ldr	r1, [sp, #20]
 802088a:	4618      	mov	r0, r3
 802088c:	2500      	movs	r5, #0
 802088e:	eba1 0c03 	sub.w	ip, r1, r3
 8020892:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8020896:	eb1c 0f00 	cmn.w	ip, r0
 802089a:	d41c      	bmi.n	80208d6 <_gcvt+0x14e>
 802089c:	2900      	cmp	r1, #0
 802089e:	f1c1 0000 	rsb	r0, r1, #0
 80208a2:	bfc8      	it	gt
 80208a4:	2000      	movgt	r0, #0
 80208a6:	f100 0c01 	add.w	ip, r0, #1
 80208aa:	4463      	add	r3, ip
 80208ac:	4401      	add	r1, r0
 80208ae:	b105      	cbz	r5, 80208b2 <_gcvt+0x12a>
 80208b0:	9105      	str	r1, [sp, #20]
 80208b2:	1e61      	subs	r1, r4, #1
 80208b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80208b8:	b108      	cbz	r0, 80208be <_gcvt+0x136>
 80208ba:	2a00      	cmp	r2, #0
 80208bc:	dc0f      	bgt.n	80208de <_gcvt+0x156>
 80208be:	b9df      	cbnz	r7, 80208f8 <_gcvt+0x170>
 80208c0:	2200      	movs	r2, #0
 80208c2:	701a      	strb	r2, [r3, #0]
 80208c4:	e780      	b.n	80207c8 <_gcvt+0x40>
 80208c6:	2a00      	cmp	r2, #0
 80208c8:	f101 31ff 	add.w	r1, r1, #4294967295
 80208cc:	dcc9      	bgt.n	8020862 <_gcvt+0xda>
 80208ce:	2800      	cmp	r0, #0
 80208d0:	d0d0      	beq.n	8020874 <_gcvt+0xec>
 80208d2:	9505      	str	r5, [sp, #20]
 80208d4:	e7ce      	b.n	8020874 <_gcvt+0xec>
 80208d6:	f800 ef01 	strb.w	lr, [r0, #1]!
 80208da:	2501      	movs	r5, #1
 80208dc:	e7db      	b.n	8020896 <_gcvt+0x10e>
 80208de:	f803 0b01 	strb.w	r0, [r3], #1
 80208e2:	3a01      	subs	r2, #1
 80208e4:	e7e6      	b.n	80208b4 <_gcvt+0x12c>
 80208e6:	f801 5b01 	strb.w	r5, [r1], #1
 80208ea:	1a60      	subs	r0, r4, r1
 80208ec:	2800      	cmp	r0, #0
 80208ee:	dcfa      	bgt.n	80208e6 <_gcvt+0x15e>
 80208f0:	2a00      	cmp	r2, #0
 80208f2:	bfa8      	it	ge
 80208f4:	189b      	addge	r3, r3, r2
 80208f6:	e7e3      	b.n	80208c0 <_gcvt+0x138>
 80208f8:	4619      	mov	r1, r3
 80208fa:	189c      	adds	r4, r3, r2
 80208fc:	2530      	movs	r5, #48	; 0x30
 80208fe:	e7f4      	b.n	80208ea <_gcvt+0x162>
 8020900:	eb1c432d 	.word	0xeb1c432d
 8020904:	3f1a36e2 	.word	0x3f1a36e2

08020908 <std>:
 8020908:	2300      	movs	r3, #0
 802090a:	b510      	push	{r4, lr}
 802090c:	4604      	mov	r4, r0
 802090e:	e9c0 3300 	strd	r3, r3, [r0]
 8020912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020916:	6083      	str	r3, [r0, #8]
 8020918:	8181      	strh	r1, [r0, #12]
 802091a:	6643      	str	r3, [r0, #100]	; 0x64
 802091c:	81c2      	strh	r2, [r0, #14]
 802091e:	6183      	str	r3, [r0, #24]
 8020920:	4619      	mov	r1, r3
 8020922:	2208      	movs	r2, #8
 8020924:	305c      	adds	r0, #92	; 0x5c
 8020926:	f7ff fe6d 	bl	8020604 <memset>
 802092a:	4b05      	ldr	r3, [pc, #20]	; (8020940 <std+0x38>)
 802092c:	6263      	str	r3, [r4, #36]	; 0x24
 802092e:	4b05      	ldr	r3, [pc, #20]	; (8020944 <std+0x3c>)
 8020930:	62a3      	str	r3, [r4, #40]	; 0x28
 8020932:	4b05      	ldr	r3, [pc, #20]	; (8020948 <std+0x40>)
 8020934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020936:	4b05      	ldr	r3, [pc, #20]	; (802094c <std+0x44>)
 8020938:	6224      	str	r4, [r4, #32]
 802093a:	6323      	str	r3, [r4, #48]	; 0x30
 802093c:	bd10      	pop	{r4, pc}
 802093e:	bf00      	nop
 8020940:	08021325 	.word	0x08021325
 8020944:	08021347 	.word	0x08021347
 8020948:	0802137f 	.word	0x0802137f
 802094c:	080213a3 	.word	0x080213a3

08020950 <_cleanup_r>:
 8020950:	4901      	ldr	r1, [pc, #4]	; (8020958 <_cleanup_r+0x8>)
 8020952:	f000 b8af 	b.w	8020ab4 <_fwalk_reent>
 8020956:	bf00      	nop
 8020958:	080223bd 	.word	0x080223bd

0802095c <__sfmoreglue>:
 802095c:	b570      	push	{r4, r5, r6, lr}
 802095e:	1e4a      	subs	r2, r1, #1
 8020960:	2568      	movs	r5, #104	; 0x68
 8020962:	4355      	muls	r5, r2
 8020964:	460e      	mov	r6, r1
 8020966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802096a:	f000 fc71 	bl	8021250 <_malloc_r>
 802096e:	4604      	mov	r4, r0
 8020970:	b140      	cbz	r0, 8020984 <__sfmoreglue+0x28>
 8020972:	2100      	movs	r1, #0
 8020974:	e9c0 1600 	strd	r1, r6, [r0]
 8020978:	300c      	adds	r0, #12
 802097a:	60a0      	str	r0, [r4, #8]
 802097c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020980:	f7ff fe40 	bl	8020604 <memset>
 8020984:	4620      	mov	r0, r4
 8020986:	bd70      	pop	{r4, r5, r6, pc}

08020988 <__sfp_lock_acquire>:
 8020988:	4801      	ldr	r0, [pc, #4]	; (8020990 <__sfp_lock_acquire+0x8>)
 802098a:	f000 b8b3 	b.w	8020af4 <__retarget_lock_acquire_recursive>
 802098e:	bf00      	nop
 8020990:	20004df8 	.word	0x20004df8

08020994 <__sfp_lock_release>:
 8020994:	4801      	ldr	r0, [pc, #4]	; (802099c <__sfp_lock_release+0x8>)
 8020996:	f000 b8ae 	b.w	8020af6 <__retarget_lock_release_recursive>
 802099a:	bf00      	nop
 802099c:	20004df8 	.word	0x20004df8

080209a0 <__sinit_lock_acquire>:
 80209a0:	4801      	ldr	r0, [pc, #4]	; (80209a8 <__sinit_lock_acquire+0x8>)
 80209a2:	f000 b8a7 	b.w	8020af4 <__retarget_lock_acquire_recursive>
 80209a6:	bf00      	nop
 80209a8:	20004df7 	.word	0x20004df7

080209ac <__sinit_lock_release>:
 80209ac:	4801      	ldr	r0, [pc, #4]	; (80209b4 <__sinit_lock_release+0x8>)
 80209ae:	f000 b8a2 	b.w	8020af6 <__retarget_lock_release_recursive>
 80209b2:	bf00      	nop
 80209b4:	20004df7 	.word	0x20004df7

080209b8 <__sinit>:
 80209b8:	b510      	push	{r4, lr}
 80209ba:	4604      	mov	r4, r0
 80209bc:	f7ff fff0 	bl	80209a0 <__sinit_lock_acquire>
 80209c0:	69a3      	ldr	r3, [r4, #24]
 80209c2:	b11b      	cbz	r3, 80209cc <__sinit+0x14>
 80209c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209c8:	f7ff bff0 	b.w	80209ac <__sinit_lock_release>
 80209cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80209d0:	6523      	str	r3, [r4, #80]	; 0x50
 80209d2:	4b13      	ldr	r3, [pc, #76]	; (8020a20 <__sinit+0x68>)
 80209d4:	4a13      	ldr	r2, [pc, #76]	; (8020a24 <__sinit+0x6c>)
 80209d6:	681b      	ldr	r3, [r3, #0]
 80209d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80209da:	42a3      	cmp	r3, r4
 80209dc:	bf04      	itt	eq
 80209de:	2301      	moveq	r3, #1
 80209e0:	61a3      	streq	r3, [r4, #24]
 80209e2:	4620      	mov	r0, r4
 80209e4:	f000 f820 	bl	8020a28 <__sfp>
 80209e8:	6060      	str	r0, [r4, #4]
 80209ea:	4620      	mov	r0, r4
 80209ec:	f000 f81c 	bl	8020a28 <__sfp>
 80209f0:	60a0      	str	r0, [r4, #8]
 80209f2:	4620      	mov	r0, r4
 80209f4:	f000 f818 	bl	8020a28 <__sfp>
 80209f8:	2200      	movs	r2, #0
 80209fa:	60e0      	str	r0, [r4, #12]
 80209fc:	2104      	movs	r1, #4
 80209fe:	6860      	ldr	r0, [r4, #4]
 8020a00:	f7ff ff82 	bl	8020908 <std>
 8020a04:	68a0      	ldr	r0, [r4, #8]
 8020a06:	2201      	movs	r2, #1
 8020a08:	2109      	movs	r1, #9
 8020a0a:	f7ff ff7d 	bl	8020908 <std>
 8020a0e:	68e0      	ldr	r0, [r4, #12]
 8020a10:	2202      	movs	r2, #2
 8020a12:	2112      	movs	r1, #18
 8020a14:	f7ff ff78 	bl	8020908 <std>
 8020a18:	2301      	movs	r3, #1
 8020a1a:	61a3      	str	r3, [r4, #24]
 8020a1c:	e7d2      	b.n	80209c4 <__sinit+0xc>
 8020a1e:	bf00      	nop
 8020a20:	0802a5bc 	.word	0x0802a5bc
 8020a24:	08020951 	.word	0x08020951

08020a28 <__sfp>:
 8020a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a2a:	4607      	mov	r7, r0
 8020a2c:	f7ff ffac 	bl	8020988 <__sfp_lock_acquire>
 8020a30:	4b1e      	ldr	r3, [pc, #120]	; (8020aac <__sfp+0x84>)
 8020a32:	681e      	ldr	r6, [r3, #0]
 8020a34:	69b3      	ldr	r3, [r6, #24]
 8020a36:	b913      	cbnz	r3, 8020a3e <__sfp+0x16>
 8020a38:	4630      	mov	r0, r6
 8020a3a:	f7ff ffbd 	bl	80209b8 <__sinit>
 8020a3e:	3648      	adds	r6, #72	; 0x48
 8020a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020a44:	3b01      	subs	r3, #1
 8020a46:	d503      	bpl.n	8020a50 <__sfp+0x28>
 8020a48:	6833      	ldr	r3, [r6, #0]
 8020a4a:	b30b      	cbz	r3, 8020a90 <__sfp+0x68>
 8020a4c:	6836      	ldr	r6, [r6, #0]
 8020a4e:	e7f7      	b.n	8020a40 <__sfp+0x18>
 8020a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020a54:	b9d5      	cbnz	r5, 8020a8c <__sfp+0x64>
 8020a56:	4b16      	ldr	r3, [pc, #88]	; (8020ab0 <__sfp+0x88>)
 8020a58:	60e3      	str	r3, [r4, #12]
 8020a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8020a60:	f000 f847 	bl	8020af2 <__retarget_lock_init_recursive>
 8020a64:	f7ff ff96 	bl	8020994 <__sfp_lock_release>
 8020a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020a70:	6025      	str	r5, [r4, #0]
 8020a72:	61a5      	str	r5, [r4, #24]
 8020a74:	2208      	movs	r2, #8
 8020a76:	4629      	mov	r1, r5
 8020a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020a7c:	f7ff fdc2 	bl	8020604 <memset>
 8020a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020a88:	4620      	mov	r0, r4
 8020a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a8c:	3468      	adds	r4, #104	; 0x68
 8020a8e:	e7d9      	b.n	8020a44 <__sfp+0x1c>
 8020a90:	2104      	movs	r1, #4
 8020a92:	4638      	mov	r0, r7
 8020a94:	f7ff ff62 	bl	802095c <__sfmoreglue>
 8020a98:	4604      	mov	r4, r0
 8020a9a:	6030      	str	r0, [r6, #0]
 8020a9c:	2800      	cmp	r0, #0
 8020a9e:	d1d5      	bne.n	8020a4c <__sfp+0x24>
 8020aa0:	f7ff ff78 	bl	8020994 <__sfp_lock_release>
 8020aa4:	230c      	movs	r3, #12
 8020aa6:	603b      	str	r3, [r7, #0]
 8020aa8:	e7ee      	b.n	8020a88 <__sfp+0x60>
 8020aaa:	bf00      	nop
 8020aac:	0802a5bc 	.word	0x0802a5bc
 8020ab0:	ffff0001 	.word	0xffff0001

08020ab4 <_fwalk_reent>:
 8020ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020ab8:	4606      	mov	r6, r0
 8020aba:	4688      	mov	r8, r1
 8020abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020ac0:	2700      	movs	r7, #0
 8020ac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020ac6:	f1b9 0901 	subs.w	r9, r9, #1
 8020aca:	d505      	bpl.n	8020ad8 <_fwalk_reent+0x24>
 8020acc:	6824      	ldr	r4, [r4, #0]
 8020ace:	2c00      	cmp	r4, #0
 8020ad0:	d1f7      	bne.n	8020ac2 <_fwalk_reent+0xe>
 8020ad2:	4638      	mov	r0, r7
 8020ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020ad8:	89ab      	ldrh	r3, [r5, #12]
 8020ada:	2b01      	cmp	r3, #1
 8020adc:	d907      	bls.n	8020aee <_fwalk_reent+0x3a>
 8020ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020ae2:	3301      	adds	r3, #1
 8020ae4:	d003      	beq.n	8020aee <_fwalk_reent+0x3a>
 8020ae6:	4629      	mov	r1, r5
 8020ae8:	4630      	mov	r0, r6
 8020aea:	47c0      	blx	r8
 8020aec:	4307      	orrs	r7, r0
 8020aee:	3568      	adds	r5, #104	; 0x68
 8020af0:	e7e9      	b.n	8020ac6 <_fwalk_reent+0x12>

08020af2 <__retarget_lock_init_recursive>:
 8020af2:	4770      	bx	lr

08020af4 <__retarget_lock_acquire_recursive>:
 8020af4:	4770      	bx	lr

08020af6 <__retarget_lock_release_recursive>:
 8020af6:	4770      	bx	lr

08020af8 <_Balloc>:
 8020af8:	b570      	push	{r4, r5, r6, lr}
 8020afa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020afc:	4604      	mov	r4, r0
 8020afe:	460d      	mov	r5, r1
 8020b00:	b976      	cbnz	r6, 8020b20 <_Balloc+0x28>
 8020b02:	2010      	movs	r0, #16
 8020b04:	f001 fd1e 	bl	8022544 <malloc>
 8020b08:	4602      	mov	r2, r0
 8020b0a:	6260      	str	r0, [r4, #36]	; 0x24
 8020b0c:	b920      	cbnz	r0, 8020b18 <_Balloc+0x20>
 8020b0e:	4b18      	ldr	r3, [pc, #96]	; (8020b70 <_Balloc+0x78>)
 8020b10:	4818      	ldr	r0, [pc, #96]	; (8020b74 <_Balloc+0x7c>)
 8020b12:	2166      	movs	r1, #102	; 0x66
 8020b14:	f000 fd24 	bl	8021560 <__assert_func>
 8020b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020b1c:	6006      	str	r6, [r0, #0]
 8020b1e:	60c6      	str	r6, [r0, #12]
 8020b20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020b22:	68f3      	ldr	r3, [r6, #12]
 8020b24:	b183      	cbz	r3, 8020b48 <_Balloc+0x50>
 8020b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020b28:	68db      	ldr	r3, [r3, #12]
 8020b2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020b2e:	b9b8      	cbnz	r0, 8020b60 <_Balloc+0x68>
 8020b30:	2101      	movs	r1, #1
 8020b32:	fa01 f605 	lsl.w	r6, r1, r5
 8020b36:	1d72      	adds	r2, r6, #5
 8020b38:	0092      	lsls	r2, r2, #2
 8020b3a:	4620      	mov	r0, r4
 8020b3c:	f000 fb78 	bl	8021230 <_calloc_r>
 8020b40:	b160      	cbz	r0, 8020b5c <_Balloc+0x64>
 8020b42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020b46:	e00e      	b.n	8020b66 <_Balloc+0x6e>
 8020b48:	2221      	movs	r2, #33	; 0x21
 8020b4a:	2104      	movs	r1, #4
 8020b4c:	4620      	mov	r0, r4
 8020b4e:	f000 fb6f 	bl	8021230 <_calloc_r>
 8020b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020b54:	60f0      	str	r0, [r6, #12]
 8020b56:	68db      	ldr	r3, [r3, #12]
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d1e4      	bne.n	8020b26 <_Balloc+0x2e>
 8020b5c:	2000      	movs	r0, #0
 8020b5e:	bd70      	pop	{r4, r5, r6, pc}
 8020b60:	6802      	ldr	r2, [r0, #0]
 8020b62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020b66:	2300      	movs	r3, #0
 8020b68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020b6c:	e7f7      	b.n	8020b5e <_Balloc+0x66>
 8020b6e:	bf00      	nop
 8020b70:	0802a648 	.word	0x0802a648
 8020b74:	0802a65f 	.word	0x0802a65f

08020b78 <_Bfree>:
 8020b78:	b570      	push	{r4, r5, r6, lr}
 8020b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020b7c:	4605      	mov	r5, r0
 8020b7e:	460c      	mov	r4, r1
 8020b80:	b976      	cbnz	r6, 8020ba0 <_Bfree+0x28>
 8020b82:	2010      	movs	r0, #16
 8020b84:	f001 fcde 	bl	8022544 <malloc>
 8020b88:	4602      	mov	r2, r0
 8020b8a:	6268      	str	r0, [r5, #36]	; 0x24
 8020b8c:	b920      	cbnz	r0, 8020b98 <_Bfree+0x20>
 8020b8e:	4b09      	ldr	r3, [pc, #36]	; (8020bb4 <_Bfree+0x3c>)
 8020b90:	4809      	ldr	r0, [pc, #36]	; (8020bb8 <_Bfree+0x40>)
 8020b92:	218a      	movs	r1, #138	; 0x8a
 8020b94:	f000 fce4 	bl	8021560 <__assert_func>
 8020b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020b9c:	6006      	str	r6, [r0, #0]
 8020b9e:	60c6      	str	r6, [r0, #12]
 8020ba0:	b13c      	cbz	r4, 8020bb2 <_Bfree+0x3a>
 8020ba2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020ba4:	6862      	ldr	r2, [r4, #4]
 8020ba6:	68db      	ldr	r3, [r3, #12]
 8020ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020bac:	6021      	str	r1, [r4, #0]
 8020bae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020bb2:	bd70      	pop	{r4, r5, r6, pc}
 8020bb4:	0802a648 	.word	0x0802a648
 8020bb8:	0802a65f 	.word	0x0802a65f

08020bbc <__multadd>:
 8020bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020bc0:	690e      	ldr	r6, [r1, #16]
 8020bc2:	4607      	mov	r7, r0
 8020bc4:	4698      	mov	r8, r3
 8020bc6:	460c      	mov	r4, r1
 8020bc8:	f101 0014 	add.w	r0, r1, #20
 8020bcc:	2300      	movs	r3, #0
 8020bce:	6805      	ldr	r5, [r0, #0]
 8020bd0:	b2a9      	uxth	r1, r5
 8020bd2:	fb02 8101 	mla	r1, r2, r1, r8
 8020bd6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8020bda:	0c2d      	lsrs	r5, r5, #16
 8020bdc:	fb02 c505 	mla	r5, r2, r5, ip
 8020be0:	b289      	uxth	r1, r1
 8020be2:	3301      	adds	r3, #1
 8020be4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8020be8:	429e      	cmp	r6, r3
 8020bea:	f840 1b04 	str.w	r1, [r0], #4
 8020bee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020bf2:	dcec      	bgt.n	8020bce <__multadd+0x12>
 8020bf4:	f1b8 0f00 	cmp.w	r8, #0
 8020bf8:	d022      	beq.n	8020c40 <__multadd+0x84>
 8020bfa:	68a3      	ldr	r3, [r4, #8]
 8020bfc:	42b3      	cmp	r3, r6
 8020bfe:	dc19      	bgt.n	8020c34 <__multadd+0x78>
 8020c00:	6861      	ldr	r1, [r4, #4]
 8020c02:	4638      	mov	r0, r7
 8020c04:	3101      	adds	r1, #1
 8020c06:	f7ff ff77 	bl	8020af8 <_Balloc>
 8020c0a:	4605      	mov	r5, r0
 8020c0c:	b928      	cbnz	r0, 8020c1a <__multadd+0x5e>
 8020c0e:	4602      	mov	r2, r0
 8020c10:	4b0d      	ldr	r3, [pc, #52]	; (8020c48 <__multadd+0x8c>)
 8020c12:	480e      	ldr	r0, [pc, #56]	; (8020c4c <__multadd+0x90>)
 8020c14:	21b5      	movs	r1, #181	; 0xb5
 8020c16:	f000 fca3 	bl	8021560 <__assert_func>
 8020c1a:	6922      	ldr	r2, [r4, #16]
 8020c1c:	3202      	adds	r2, #2
 8020c1e:	f104 010c 	add.w	r1, r4, #12
 8020c22:	0092      	lsls	r2, r2, #2
 8020c24:	300c      	adds	r0, #12
 8020c26:	f7ff fcdf 	bl	80205e8 <memcpy>
 8020c2a:	4621      	mov	r1, r4
 8020c2c:	4638      	mov	r0, r7
 8020c2e:	f7ff ffa3 	bl	8020b78 <_Bfree>
 8020c32:	462c      	mov	r4, r5
 8020c34:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8020c38:	3601      	adds	r6, #1
 8020c3a:	f8c3 8014 	str.w	r8, [r3, #20]
 8020c3e:	6126      	str	r6, [r4, #16]
 8020c40:	4620      	mov	r0, r4
 8020c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c46:	bf00      	nop
 8020c48:	0802a6bf 	.word	0x0802a6bf
 8020c4c:	0802a65f 	.word	0x0802a65f

08020c50 <__hi0bits>:
 8020c50:	0c03      	lsrs	r3, r0, #16
 8020c52:	041b      	lsls	r3, r3, #16
 8020c54:	b9d3      	cbnz	r3, 8020c8c <__hi0bits+0x3c>
 8020c56:	0400      	lsls	r0, r0, #16
 8020c58:	2310      	movs	r3, #16
 8020c5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020c5e:	bf04      	itt	eq
 8020c60:	0200      	lsleq	r0, r0, #8
 8020c62:	3308      	addeq	r3, #8
 8020c64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020c68:	bf04      	itt	eq
 8020c6a:	0100      	lsleq	r0, r0, #4
 8020c6c:	3304      	addeq	r3, #4
 8020c6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020c72:	bf04      	itt	eq
 8020c74:	0080      	lsleq	r0, r0, #2
 8020c76:	3302      	addeq	r3, #2
 8020c78:	2800      	cmp	r0, #0
 8020c7a:	db05      	blt.n	8020c88 <__hi0bits+0x38>
 8020c7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020c80:	f103 0301 	add.w	r3, r3, #1
 8020c84:	bf08      	it	eq
 8020c86:	2320      	moveq	r3, #32
 8020c88:	4618      	mov	r0, r3
 8020c8a:	4770      	bx	lr
 8020c8c:	2300      	movs	r3, #0
 8020c8e:	e7e4      	b.n	8020c5a <__hi0bits+0xa>

08020c90 <__lo0bits>:
 8020c90:	6803      	ldr	r3, [r0, #0]
 8020c92:	f013 0207 	ands.w	r2, r3, #7
 8020c96:	4601      	mov	r1, r0
 8020c98:	d00b      	beq.n	8020cb2 <__lo0bits+0x22>
 8020c9a:	07da      	lsls	r2, r3, #31
 8020c9c:	d424      	bmi.n	8020ce8 <__lo0bits+0x58>
 8020c9e:	0798      	lsls	r0, r3, #30
 8020ca0:	bf49      	itett	mi
 8020ca2:	085b      	lsrmi	r3, r3, #1
 8020ca4:	089b      	lsrpl	r3, r3, #2
 8020ca6:	2001      	movmi	r0, #1
 8020ca8:	600b      	strmi	r3, [r1, #0]
 8020caa:	bf5c      	itt	pl
 8020cac:	600b      	strpl	r3, [r1, #0]
 8020cae:	2002      	movpl	r0, #2
 8020cb0:	4770      	bx	lr
 8020cb2:	b298      	uxth	r0, r3
 8020cb4:	b9b0      	cbnz	r0, 8020ce4 <__lo0bits+0x54>
 8020cb6:	0c1b      	lsrs	r3, r3, #16
 8020cb8:	2010      	movs	r0, #16
 8020cba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8020cbe:	bf04      	itt	eq
 8020cc0:	0a1b      	lsreq	r3, r3, #8
 8020cc2:	3008      	addeq	r0, #8
 8020cc4:	071a      	lsls	r2, r3, #28
 8020cc6:	bf04      	itt	eq
 8020cc8:	091b      	lsreq	r3, r3, #4
 8020cca:	3004      	addeq	r0, #4
 8020ccc:	079a      	lsls	r2, r3, #30
 8020cce:	bf04      	itt	eq
 8020cd0:	089b      	lsreq	r3, r3, #2
 8020cd2:	3002      	addeq	r0, #2
 8020cd4:	07da      	lsls	r2, r3, #31
 8020cd6:	d403      	bmi.n	8020ce0 <__lo0bits+0x50>
 8020cd8:	085b      	lsrs	r3, r3, #1
 8020cda:	f100 0001 	add.w	r0, r0, #1
 8020cde:	d005      	beq.n	8020cec <__lo0bits+0x5c>
 8020ce0:	600b      	str	r3, [r1, #0]
 8020ce2:	4770      	bx	lr
 8020ce4:	4610      	mov	r0, r2
 8020ce6:	e7e8      	b.n	8020cba <__lo0bits+0x2a>
 8020ce8:	2000      	movs	r0, #0
 8020cea:	4770      	bx	lr
 8020cec:	2020      	movs	r0, #32
 8020cee:	4770      	bx	lr

08020cf0 <__i2b>:
 8020cf0:	b510      	push	{r4, lr}
 8020cf2:	460c      	mov	r4, r1
 8020cf4:	2101      	movs	r1, #1
 8020cf6:	f7ff feff 	bl	8020af8 <_Balloc>
 8020cfa:	4602      	mov	r2, r0
 8020cfc:	b928      	cbnz	r0, 8020d0a <__i2b+0x1a>
 8020cfe:	4b05      	ldr	r3, [pc, #20]	; (8020d14 <__i2b+0x24>)
 8020d00:	4805      	ldr	r0, [pc, #20]	; (8020d18 <__i2b+0x28>)
 8020d02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020d06:	f000 fc2b 	bl	8021560 <__assert_func>
 8020d0a:	2301      	movs	r3, #1
 8020d0c:	6144      	str	r4, [r0, #20]
 8020d0e:	6103      	str	r3, [r0, #16]
 8020d10:	bd10      	pop	{r4, pc}
 8020d12:	bf00      	nop
 8020d14:	0802a6bf 	.word	0x0802a6bf
 8020d18:	0802a65f 	.word	0x0802a65f

08020d1c <__multiply>:
 8020d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d20:	4614      	mov	r4, r2
 8020d22:	690a      	ldr	r2, [r1, #16]
 8020d24:	6923      	ldr	r3, [r4, #16]
 8020d26:	429a      	cmp	r2, r3
 8020d28:	bfb8      	it	lt
 8020d2a:	460b      	movlt	r3, r1
 8020d2c:	460d      	mov	r5, r1
 8020d2e:	bfbc      	itt	lt
 8020d30:	4625      	movlt	r5, r4
 8020d32:	461c      	movlt	r4, r3
 8020d34:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8020d38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020d3c:	68ab      	ldr	r3, [r5, #8]
 8020d3e:	6869      	ldr	r1, [r5, #4]
 8020d40:	eb0a 0709 	add.w	r7, sl, r9
 8020d44:	42bb      	cmp	r3, r7
 8020d46:	b085      	sub	sp, #20
 8020d48:	bfb8      	it	lt
 8020d4a:	3101      	addlt	r1, #1
 8020d4c:	f7ff fed4 	bl	8020af8 <_Balloc>
 8020d50:	b930      	cbnz	r0, 8020d60 <__multiply+0x44>
 8020d52:	4602      	mov	r2, r0
 8020d54:	4b42      	ldr	r3, [pc, #264]	; (8020e60 <__multiply+0x144>)
 8020d56:	4843      	ldr	r0, [pc, #268]	; (8020e64 <__multiply+0x148>)
 8020d58:	f240 115d 	movw	r1, #349	; 0x15d
 8020d5c:	f000 fc00 	bl	8021560 <__assert_func>
 8020d60:	f100 0614 	add.w	r6, r0, #20
 8020d64:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8020d68:	4633      	mov	r3, r6
 8020d6a:	2200      	movs	r2, #0
 8020d6c:	4543      	cmp	r3, r8
 8020d6e:	d31e      	bcc.n	8020dae <__multiply+0x92>
 8020d70:	f105 0c14 	add.w	ip, r5, #20
 8020d74:	f104 0314 	add.w	r3, r4, #20
 8020d78:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8020d7c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8020d80:	9202      	str	r2, [sp, #8]
 8020d82:	ebac 0205 	sub.w	r2, ip, r5
 8020d86:	3a15      	subs	r2, #21
 8020d88:	f022 0203 	bic.w	r2, r2, #3
 8020d8c:	3204      	adds	r2, #4
 8020d8e:	f105 0115 	add.w	r1, r5, #21
 8020d92:	458c      	cmp	ip, r1
 8020d94:	bf38      	it	cc
 8020d96:	2204      	movcc	r2, #4
 8020d98:	9201      	str	r2, [sp, #4]
 8020d9a:	9a02      	ldr	r2, [sp, #8]
 8020d9c:	9303      	str	r3, [sp, #12]
 8020d9e:	429a      	cmp	r2, r3
 8020da0:	d808      	bhi.n	8020db4 <__multiply+0x98>
 8020da2:	2f00      	cmp	r7, #0
 8020da4:	dc55      	bgt.n	8020e52 <__multiply+0x136>
 8020da6:	6107      	str	r7, [r0, #16]
 8020da8:	b005      	add	sp, #20
 8020daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dae:	f843 2b04 	str.w	r2, [r3], #4
 8020db2:	e7db      	b.n	8020d6c <__multiply+0x50>
 8020db4:	f8b3 a000 	ldrh.w	sl, [r3]
 8020db8:	f1ba 0f00 	cmp.w	sl, #0
 8020dbc:	d020      	beq.n	8020e00 <__multiply+0xe4>
 8020dbe:	f105 0e14 	add.w	lr, r5, #20
 8020dc2:	46b1      	mov	r9, r6
 8020dc4:	2200      	movs	r2, #0
 8020dc6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8020dca:	f8d9 b000 	ldr.w	fp, [r9]
 8020dce:	b2a1      	uxth	r1, r4
 8020dd0:	fa1f fb8b 	uxth.w	fp, fp
 8020dd4:	fb0a b101 	mla	r1, sl, r1, fp
 8020dd8:	4411      	add	r1, r2
 8020dda:	f8d9 2000 	ldr.w	r2, [r9]
 8020dde:	0c24      	lsrs	r4, r4, #16
 8020de0:	0c12      	lsrs	r2, r2, #16
 8020de2:	fb0a 2404 	mla	r4, sl, r4, r2
 8020de6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8020dea:	b289      	uxth	r1, r1
 8020dec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8020df0:	45f4      	cmp	ip, lr
 8020df2:	f849 1b04 	str.w	r1, [r9], #4
 8020df6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8020dfa:	d8e4      	bhi.n	8020dc6 <__multiply+0xaa>
 8020dfc:	9901      	ldr	r1, [sp, #4]
 8020dfe:	5072      	str	r2, [r6, r1]
 8020e00:	9a03      	ldr	r2, [sp, #12]
 8020e02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8020e06:	3304      	adds	r3, #4
 8020e08:	f1b9 0f00 	cmp.w	r9, #0
 8020e0c:	d01f      	beq.n	8020e4e <__multiply+0x132>
 8020e0e:	6834      	ldr	r4, [r6, #0]
 8020e10:	f105 0114 	add.w	r1, r5, #20
 8020e14:	46b6      	mov	lr, r6
 8020e16:	f04f 0a00 	mov.w	sl, #0
 8020e1a:	880a      	ldrh	r2, [r1, #0]
 8020e1c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020e20:	fb09 b202 	mla	r2, r9, r2, fp
 8020e24:	4492      	add	sl, r2
 8020e26:	b2a4      	uxth	r4, r4
 8020e28:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020e2c:	f84e 4b04 	str.w	r4, [lr], #4
 8020e30:	f851 4b04 	ldr.w	r4, [r1], #4
 8020e34:	f8be 2000 	ldrh.w	r2, [lr]
 8020e38:	0c24      	lsrs	r4, r4, #16
 8020e3a:	fb09 2404 	mla	r4, r9, r4, r2
 8020e3e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8020e42:	458c      	cmp	ip, r1
 8020e44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8020e48:	d8e7      	bhi.n	8020e1a <__multiply+0xfe>
 8020e4a:	9a01      	ldr	r2, [sp, #4]
 8020e4c:	50b4      	str	r4, [r6, r2]
 8020e4e:	3604      	adds	r6, #4
 8020e50:	e7a3      	b.n	8020d9a <__multiply+0x7e>
 8020e52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020e56:	2b00      	cmp	r3, #0
 8020e58:	d1a5      	bne.n	8020da6 <__multiply+0x8a>
 8020e5a:	3f01      	subs	r7, #1
 8020e5c:	e7a1      	b.n	8020da2 <__multiply+0x86>
 8020e5e:	bf00      	nop
 8020e60:	0802a6bf 	.word	0x0802a6bf
 8020e64:	0802a65f 	.word	0x0802a65f

08020e68 <__pow5mult>:
 8020e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020e6c:	4615      	mov	r5, r2
 8020e6e:	f012 0203 	ands.w	r2, r2, #3
 8020e72:	4606      	mov	r6, r0
 8020e74:	460f      	mov	r7, r1
 8020e76:	d007      	beq.n	8020e88 <__pow5mult+0x20>
 8020e78:	4c25      	ldr	r4, [pc, #148]	; (8020f10 <__pow5mult+0xa8>)
 8020e7a:	3a01      	subs	r2, #1
 8020e7c:	2300      	movs	r3, #0
 8020e7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020e82:	f7ff fe9b 	bl	8020bbc <__multadd>
 8020e86:	4607      	mov	r7, r0
 8020e88:	10ad      	asrs	r5, r5, #2
 8020e8a:	d03d      	beq.n	8020f08 <__pow5mult+0xa0>
 8020e8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8020e8e:	b97c      	cbnz	r4, 8020eb0 <__pow5mult+0x48>
 8020e90:	2010      	movs	r0, #16
 8020e92:	f001 fb57 	bl	8022544 <malloc>
 8020e96:	4602      	mov	r2, r0
 8020e98:	6270      	str	r0, [r6, #36]	; 0x24
 8020e9a:	b928      	cbnz	r0, 8020ea8 <__pow5mult+0x40>
 8020e9c:	4b1d      	ldr	r3, [pc, #116]	; (8020f14 <__pow5mult+0xac>)
 8020e9e:	481e      	ldr	r0, [pc, #120]	; (8020f18 <__pow5mult+0xb0>)
 8020ea0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8020ea4:	f000 fb5c 	bl	8021560 <__assert_func>
 8020ea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020eac:	6004      	str	r4, [r0, #0]
 8020eae:	60c4      	str	r4, [r0, #12]
 8020eb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8020eb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020eb8:	b94c      	cbnz	r4, 8020ece <__pow5mult+0x66>
 8020eba:	f240 2171 	movw	r1, #625	; 0x271
 8020ebe:	4630      	mov	r0, r6
 8020ec0:	f7ff ff16 	bl	8020cf0 <__i2b>
 8020ec4:	2300      	movs	r3, #0
 8020ec6:	f8c8 0008 	str.w	r0, [r8, #8]
 8020eca:	4604      	mov	r4, r0
 8020ecc:	6003      	str	r3, [r0, #0]
 8020ece:	f04f 0900 	mov.w	r9, #0
 8020ed2:	07eb      	lsls	r3, r5, #31
 8020ed4:	d50a      	bpl.n	8020eec <__pow5mult+0x84>
 8020ed6:	4639      	mov	r1, r7
 8020ed8:	4622      	mov	r2, r4
 8020eda:	4630      	mov	r0, r6
 8020edc:	f7ff ff1e 	bl	8020d1c <__multiply>
 8020ee0:	4639      	mov	r1, r7
 8020ee2:	4680      	mov	r8, r0
 8020ee4:	4630      	mov	r0, r6
 8020ee6:	f7ff fe47 	bl	8020b78 <_Bfree>
 8020eea:	4647      	mov	r7, r8
 8020eec:	106d      	asrs	r5, r5, #1
 8020eee:	d00b      	beq.n	8020f08 <__pow5mult+0xa0>
 8020ef0:	6820      	ldr	r0, [r4, #0]
 8020ef2:	b938      	cbnz	r0, 8020f04 <__pow5mult+0x9c>
 8020ef4:	4622      	mov	r2, r4
 8020ef6:	4621      	mov	r1, r4
 8020ef8:	4630      	mov	r0, r6
 8020efa:	f7ff ff0f 	bl	8020d1c <__multiply>
 8020efe:	6020      	str	r0, [r4, #0]
 8020f00:	f8c0 9000 	str.w	r9, [r0]
 8020f04:	4604      	mov	r4, r0
 8020f06:	e7e4      	b.n	8020ed2 <__pow5mult+0x6a>
 8020f08:	4638      	mov	r0, r7
 8020f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f0e:	bf00      	nop
 8020f10:	0802a7c0 	.word	0x0802a7c0
 8020f14:	0802a648 	.word	0x0802a648
 8020f18:	0802a65f 	.word	0x0802a65f

08020f1c <__lshift>:
 8020f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020f20:	460c      	mov	r4, r1
 8020f22:	6849      	ldr	r1, [r1, #4]
 8020f24:	6923      	ldr	r3, [r4, #16]
 8020f26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020f2a:	68a3      	ldr	r3, [r4, #8]
 8020f2c:	4607      	mov	r7, r0
 8020f2e:	4691      	mov	r9, r2
 8020f30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020f34:	f108 0601 	add.w	r6, r8, #1
 8020f38:	42b3      	cmp	r3, r6
 8020f3a:	db0b      	blt.n	8020f54 <__lshift+0x38>
 8020f3c:	4638      	mov	r0, r7
 8020f3e:	f7ff fddb 	bl	8020af8 <_Balloc>
 8020f42:	4605      	mov	r5, r0
 8020f44:	b948      	cbnz	r0, 8020f5a <__lshift+0x3e>
 8020f46:	4602      	mov	r2, r0
 8020f48:	4b28      	ldr	r3, [pc, #160]	; (8020fec <__lshift+0xd0>)
 8020f4a:	4829      	ldr	r0, [pc, #164]	; (8020ff0 <__lshift+0xd4>)
 8020f4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020f50:	f000 fb06 	bl	8021560 <__assert_func>
 8020f54:	3101      	adds	r1, #1
 8020f56:	005b      	lsls	r3, r3, #1
 8020f58:	e7ee      	b.n	8020f38 <__lshift+0x1c>
 8020f5a:	2300      	movs	r3, #0
 8020f5c:	f100 0114 	add.w	r1, r0, #20
 8020f60:	f100 0210 	add.w	r2, r0, #16
 8020f64:	4618      	mov	r0, r3
 8020f66:	4553      	cmp	r3, sl
 8020f68:	db33      	blt.n	8020fd2 <__lshift+0xb6>
 8020f6a:	6920      	ldr	r0, [r4, #16]
 8020f6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020f70:	f104 0314 	add.w	r3, r4, #20
 8020f74:	f019 091f 	ands.w	r9, r9, #31
 8020f78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020f7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020f80:	d02b      	beq.n	8020fda <__lshift+0xbe>
 8020f82:	f1c9 0e20 	rsb	lr, r9, #32
 8020f86:	468a      	mov	sl, r1
 8020f88:	2200      	movs	r2, #0
 8020f8a:	6818      	ldr	r0, [r3, #0]
 8020f8c:	fa00 f009 	lsl.w	r0, r0, r9
 8020f90:	4302      	orrs	r2, r0
 8020f92:	f84a 2b04 	str.w	r2, [sl], #4
 8020f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8020f9a:	459c      	cmp	ip, r3
 8020f9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8020fa0:	d8f3      	bhi.n	8020f8a <__lshift+0x6e>
 8020fa2:	ebac 0304 	sub.w	r3, ip, r4
 8020fa6:	3b15      	subs	r3, #21
 8020fa8:	f023 0303 	bic.w	r3, r3, #3
 8020fac:	3304      	adds	r3, #4
 8020fae:	f104 0015 	add.w	r0, r4, #21
 8020fb2:	4584      	cmp	ip, r0
 8020fb4:	bf38      	it	cc
 8020fb6:	2304      	movcc	r3, #4
 8020fb8:	50ca      	str	r2, [r1, r3]
 8020fba:	b10a      	cbz	r2, 8020fc0 <__lshift+0xa4>
 8020fbc:	f108 0602 	add.w	r6, r8, #2
 8020fc0:	3e01      	subs	r6, #1
 8020fc2:	4638      	mov	r0, r7
 8020fc4:	612e      	str	r6, [r5, #16]
 8020fc6:	4621      	mov	r1, r4
 8020fc8:	f7ff fdd6 	bl	8020b78 <_Bfree>
 8020fcc:	4628      	mov	r0, r5
 8020fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020fd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8020fd6:	3301      	adds	r3, #1
 8020fd8:	e7c5      	b.n	8020f66 <__lshift+0x4a>
 8020fda:	3904      	subs	r1, #4
 8020fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8020fe0:	f841 2f04 	str.w	r2, [r1, #4]!
 8020fe4:	459c      	cmp	ip, r3
 8020fe6:	d8f9      	bhi.n	8020fdc <__lshift+0xc0>
 8020fe8:	e7ea      	b.n	8020fc0 <__lshift+0xa4>
 8020fea:	bf00      	nop
 8020fec:	0802a6bf 	.word	0x0802a6bf
 8020ff0:	0802a65f 	.word	0x0802a65f

08020ff4 <__mcmp>:
 8020ff4:	b530      	push	{r4, r5, lr}
 8020ff6:	6902      	ldr	r2, [r0, #16]
 8020ff8:	690c      	ldr	r4, [r1, #16]
 8020ffa:	1b12      	subs	r2, r2, r4
 8020ffc:	d10e      	bne.n	802101c <__mcmp+0x28>
 8020ffe:	f100 0314 	add.w	r3, r0, #20
 8021002:	3114      	adds	r1, #20
 8021004:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021008:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802100c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021010:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021014:	42a5      	cmp	r5, r4
 8021016:	d003      	beq.n	8021020 <__mcmp+0x2c>
 8021018:	d305      	bcc.n	8021026 <__mcmp+0x32>
 802101a:	2201      	movs	r2, #1
 802101c:	4610      	mov	r0, r2
 802101e:	bd30      	pop	{r4, r5, pc}
 8021020:	4283      	cmp	r3, r0
 8021022:	d3f3      	bcc.n	802100c <__mcmp+0x18>
 8021024:	e7fa      	b.n	802101c <__mcmp+0x28>
 8021026:	f04f 32ff 	mov.w	r2, #4294967295
 802102a:	e7f7      	b.n	802101c <__mcmp+0x28>

0802102c <__mdiff>:
 802102c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021030:	460c      	mov	r4, r1
 8021032:	4606      	mov	r6, r0
 8021034:	4611      	mov	r1, r2
 8021036:	4620      	mov	r0, r4
 8021038:	4617      	mov	r7, r2
 802103a:	f7ff ffdb 	bl	8020ff4 <__mcmp>
 802103e:	1e05      	subs	r5, r0, #0
 8021040:	d110      	bne.n	8021064 <__mdiff+0x38>
 8021042:	4629      	mov	r1, r5
 8021044:	4630      	mov	r0, r6
 8021046:	f7ff fd57 	bl	8020af8 <_Balloc>
 802104a:	b930      	cbnz	r0, 802105a <__mdiff+0x2e>
 802104c:	4b39      	ldr	r3, [pc, #228]	; (8021134 <__mdiff+0x108>)
 802104e:	4602      	mov	r2, r0
 8021050:	f240 2132 	movw	r1, #562	; 0x232
 8021054:	4838      	ldr	r0, [pc, #224]	; (8021138 <__mdiff+0x10c>)
 8021056:	f000 fa83 	bl	8021560 <__assert_func>
 802105a:	2301      	movs	r3, #1
 802105c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021064:	bfa4      	itt	ge
 8021066:	463b      	movge	r3, r7
 8021068:	4627      	movge	r7, r4
 802106a:	4630      	mov	r0, r6
 802106c:	6879      	ldr	r1, [r7, #4]
 802106e:	bfa6      	itte	ge
 8021070:	461c      	movge	r4, r3
 8021072:	2500      	movge	r5, #0
 8021074:	2501      	movlt	r5, #1
 8021076:	f7ff fd3f 	bl	8020af8 <_Balloc>
 802107a:	b920      	cbnz	r0, 8021086 <__mdiff+0x5a>
 802107c:	4b2d      	ldr	r3, [pc, #180]	; (8021134 <__mdiff+0x108>)
 802107e:	4602      	mov	r2, r0
 8021080:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021084:	e7e6      	b.n	8021054 <__mdiff+0x28>
 8021086:	693e      	ldr	r6, [r7, #16]
 8021088:	60c5      	str	r5, [r0, #12]
 802108a:	6925      	ldr	r5, [r4, #16]
 802108c:	f107 0114 	add.w	r1, r7, #20
 8021090:	f104 0914 	add.w	r9, r4, #20
 8021094:	f100 0e14 	add.w	lr, r0, #20
 8021098:	f107 0210 	add.w	r2, r7, #16
 802109c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80210a0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80210a4:	46f2      	mov	sl, lr
 80210a6:	2700      	movs	r7, #0
 80210a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80210ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80210b0:	fa1f f883 	uxth.w	r8, r3
 80210b4:	fa17 f78b 	uxtah	r7, r7, fp
 80210b8:	0c1b      	lsrs	r3, r3, #16
 80210ba:	eba7 0808 	sub.w	r8, r7, r8
 80210be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80210c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80210c6:	fa1f f888 	uxth.w	r8, r8
 80210ca:	141f      	asrs	r7, r3, #16
 80210cc:	454d      	cmp	r5, r9
 80210ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80210d2:	f84a 3b04 	str.w	r3, [sl], #4
 80210d6:	d8e7      	bhi.n	80210a8 <__mdiff+0x7c>
 80210d8:	1b2b      	subs	r3, r5, r4
 80210da:	3b15      	subs	r3, #21
 80210dc:	f023 0303 	bic.w	r3, r3, #3
 80210e0:	3304      	adds	r3, #4
 80210e2:	3415      	adds	r4, #21
 80210e4:	42a5      	cmp	r5, r4
 80210e6:	bf38      	it	cc
 80210e8:	2304      	movcc	r3, #4
 80210ea:	4419      	add	r1, r3
 80210ec:	4473      	add	r3, lr
 80210ee:	469e      	mov	lr, r3
 80210f0:	460d      	mov	r5, r1
 80210f2:	4565      	cmp	r5, ip
 80210f4:	d30e      	bcc.n	8021114 <__mdiff+0xe8>
 80210f6:	f10c 0203 	add.w	r2, ip, #3
 80210fa:	1a52      	subs	r2, r2, r1
 80210fc:	f022 0203 	bic.w	r2, r2, #3
 8021100:	3903      	subs	r1, #3
 8021102:	458c      	cmp	ip, r1
 8021104:	bf38      	it	cc
 8021106:	2200      	movcc	r2, #0
 8021108:	441a      	add	r2, r3
 802110a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802110e:	b17b      	cbz	r3, 8021130 <__mdiff+0x104>
 8021110:	6106      	str	r6, [r0, #16]
 8021112:	e7a5      	b.n	8021060 <__mdiff+0x34>
 8021114:	f855 8b04 	ldr.w	r8, [r5], #4
 8021118:	fa17 f488 	uxtah	r4, r7, r8
 802111c:	1422      	asrs	r2, r4, #16
 802111e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8021122:	b2a4      	uxth	r4, r4
 8021124:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8021128:	f84e 4b04 	str.w	r4, [lr], #4
 802112c:	1417      	asrs	r7, r2, #16
 802112e:	e7e0      	b.n	80210f2 <__mdiff+0xc6>
 8021130:	3e01      	subs	r6, #1
 8021132:	e7ea      	b.n	802110a <__mdiff+0xde>
 8021134:	0802a6bf 	.word	0x0802a6bf
 8021138:	0802a65f 	.word	0x0802a65f

0802113c <__d2b>:
 802113c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021140:	4689      	mov	r9, r1
 8021142:	2101      	movs	r1, #1
 8021144:	ec57 6b10 	vmov	r6, r7, d0
 8021148:	4690      	mov	r8, r2
 802114a:	f7ff fcd5 	bl	8020af8 <_Balloc>
 802114e:	4604      	mov	r4, r0
 8021150:	b930      	cbnz	r0, 8021160 <__d2b+0x24>
 8021152:	4602      	mov	r2, r0
 8021154:	4b25      	ldr	r3, [pc, #148]	; (80211ec <__d2b+0xb0>)
 8021156:	4826      	ldr	r0, [pc, #152]	; (80211f0 <__d2b+0xb4>)
 8021158:	f240 310a 	movw	r1, #778	; 0x30a
 802115c:	f000 fa00 	bl	8021560 <__assert_func>
 8021160:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021164:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021168:	bb35      	cbnz	r5, 80211b8 <__d2b+0x7c>
 802116a:	2e00      	cmp	r6, #0
 802116c:	9301      	str	r3, [sp, #4]
 802116e:	d028      	beq.n	80211c2 <__d2b+0x86>
 8021170:	4668      	mov	r0, sp
 8021172:	9600      	str	r6, [sp, #0]
 8021174:	f7ff fd8c 	bl	8020c90 <__lo0bits>
 8021178:	9900      	ldr	r1, [sp, #0]
 802117a:	b300      	cbz	r0, 80211be <__d2b+0x82>
 802117c:	9a01      	ldr	r2, [sp, #4]
 802117e:	f1c0 0320 	rsb	r3, r0, #32
 8021182:	fa02 f303 	lsl.w	r3, r2, r3
 8021186:	430b      	orrs	r3, r1
 8021188:	40c2      	lsrs	r2, r0
 802118a:	6163      	str	r3, [r4, #20]
 802118c:	9201      	str	r2, [sp, #4]
 802118e:	9b01      	ldr	r3, [sp, #4]
 8021190:	61a3      	str	r3, [r4, #24]
 8021192:	2b00      	cmp	r3, #0
 8021194:	bf14      	ite	ne
 8021196:	2202      	movne	r2, #2
 8021198:	2201      	moveq	r2, #1
 802119a:	6122      	str	r2, [r4, #16]
 802119c:	b1d5      	cbz	r5, 80211d4 <__d2b+0x98>
 802119e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80211a2:	4405      	add	r5, r0
 80211a4:	f8c9 5000 	str.w	r5, [r9]
 80211a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80211ac:	f8c8 0000 	str.w	r0, [r8]
 80211b0:	4620      	mov	r0, r4
 80211b2:	b003      	add	sp, #12
 80211b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80211b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80211bc:	e7d5      	b.n	802116a <__d2b+0x2e>
 80211be:	6161      	str	r1, [r4, #20]
 80211c0:	e7e5      	b.n	802118e <__d2b+0x52>
 80211c2:	a801      	add	r0, sp, #4
 80211c4:	f7ff fd64 	bl	8020c90 <__lo0bits>
 80211c8:	9b01      	ldr	r3, [sp, #4]
 80211ca:	6163      	str	r3, [r4, #20]
 80211cc:	2201      	movs	r2, #1
 80211ce:	6122      	str	r2, [r4, #16]
 80211d0:	3020      	adds	r0, #32
 80211d2:	e7e3      	b.n	802119c <__d2b+0x60>
 80211d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80211d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80211dc:	f8c9 0000 	str.w	r0, [r9]
 80211e0:	6918      	ldr	r0, [r3, #16]
 80211e2:	f7ff fd35 	bl	8020c50 <__hi0bits>
 80211e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80211ea:	e7df      	b.n	80211ac <__d2b+0x70>
 80211ec:	0802a6bf 	.word	0x0802a6bf
 80211f0:	0802a65f 	.word	0x0802a65f

080211f4 <_mprec_log10>:
 80211f4:	2817      	cmp	r0, #23
 80211f6:	b5d0      	push	{r4, r6, r7, lr}
 80211f8:	4604      	mov	r4, r0
 80211fa:	dc07      	bgt.n	802120c <_mprec_log10+0x18>
 80211fc:	4809      	ldr	r0, [pc, #36]	; (8021224 <_mprec_log10+0x30>)
 80211fe:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8021202:	e9d4 0100 	ldrd	r0, r1, [r4]
 8021206:	ec41 0b10 	vmov	d0, r0, r1
 802120a:	bdd0      	pop	{r4, r6, r7, pc}
 802120c:	4906      	ldr	r1, [pc, #24]	; (8021228 <_mprec_log10+0x34>)
 802120e:	4f07      	ldr	r7, [pc, #28]	; (802122c <_mprec_log10+0x38>)
 8021210:	2000      	movs	r0, #0
 8021212:	2600      	movs	r6, #0
 8021214:	4632      	mov	r2, r6
 8021216:	463b      	mov	r3, r7
 8021218:	f7ef f91e 	bl	8010458 <__aeabi_dmul>
 802121c:	3c01      	subs	r4, #1
 802121e:	d1f9      	bne.n	8021214 <_mprec_log10+0x20>
 8021220:	e7f1      	b.n	8021206 <_mprec_log10+0x12>
 8021222:	bf00      	nop
 8021224:	0802a6f8 	.word	0x0802a6f8
 8021228:	3ff00000 	.word	0x3ff00000
 802122c:	40240000 	.word	0x40240000

08021230 <_calloc_r>:
 8021230:	b513      	push	{r0, r1, r4, lr}
 8021232:	434a      	muls	r2, r1
 8021234:	4611      	mov	r1, r2
 8021236:	9201      	str	r2, [sp, #4]
 8021238:	f000 f80a 	bl	8021250 <_malloc_r>
 802123c:	4604      	mov	r4, r0
 802123e:	b118      	cbz	r0, 8021248 <_calloc_r+0x18>
 8021240:	9a01      	ldr	r2, [sp, #4]
 8021242:	2100      	movs	r1, #0
 8021244:	f7ff f9de 	bl	8020604 <memset>
 8021248:	4620      	mov	r0, r4
 802124a:	b002      	add	sp, #8
 802124c:	bd10      	pop	{r4, pc}
	...

08021250 <_malloc_r>:
 8021250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021252:	1ccd      	adds	r5, r1, #3
 8021254:	f025 0503 	bic.w	r5, r5, #3
 8021258:	3508      	adds	r5, #8
 802125a:	2d0c      	cmp	r5, #12
 802125c:	bf38      	it	cc
 802125e:	250c      	movcc	r5, #12
 8021260:	2d00      	cmp	r5, #0
 8021262:	4606      	mov	r6, r0
 8021264:	db01      	blt.n	802126a <_malloc_r+0x1a>
 8021266:	42a9      	cmp	r1, r5
 8021268:	d903      	bls.n	8021272 <_malloc_r+0x22>
 802126a:	230c      	movs	r3, #12
 802126c:	6033      	str	r3, [r6, #0]
 802126e:	2000      	movs	r0, #0
 8021270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021272:	f001 f96f 	bl	8022554 <__malloc_lock>
 8021276:	4921      	ldr	r1, [pc, #132]	; (80212fc <_malloc_r+0xac>)
 8021278:	680a      	ldr	r2, [r1, #0]
 802127a:	4614      	mov	r4, r2
 802127c:	b99c      	cbnz	r4, 80212a6 <_malloc_r+0x56>
 802127e:	4f20      	ldr	r7, [pc, #128]	; (8021300 <_malloc_r+0xb0>)
 8021280:	683b      	ldr	r3, [r7, #0]
 8021282:	b923      	cbnz	r3, 802128e <_malloc_r+0x3e>
 8021284:	4621      	mov	r1, r4
 8021286:	4630      	mov	r0, r6
 8021288:	f000 f83c 	bl	8021304 <_sbrk_r>
 802128c:	6038      	str	r0, [r7, #0]
 802128e:	4629      	mov	r1, r5
 8021290:	4630      	mov	r0, r6
 8021292:	f000 f837 	bl	8021304 <_sbrk_r>
 8021296:	1c43      	adds	r3, r0, #1
 8021298:	d123      	bne.n	80212e2 <_malloc_r+0x92>
 802129a:	230c      	movs	r3, #12
 802129c:	6033      	str	r3, [r6, #0]
 802129e:	4630      	mov	r0, r6
 80212a0:	f001 f95e 	bl	8022560 <__malloc_unlock>
 80212a4:	e7e3      	b.n	802126e <_malloc_r+0x1e>
 80212a6:	6823      	ldr	r3, [r4, #0]
 80212a8:	1b5b      	subs	r3, r3, r5
 80212aa:	d417      	bmi.n	80212dc <_malloc_r+0x8c>
 80212ac:	2b0b      	cmp	r3, #11
 80212ae:	d903      	bls.n	80212b8 <_malloc_r+0x68>
 80212b0:	6023      	str	r3, [r4, #0]
 80212b2:	441c      	add	r4, r3
 80212b4:	6025      	str	r5, [r4, #0]
 80212b6:	e004      	b.n	80212c2 <_malloc_r+0x72>
 80212b8:	6863      	ldr	r3, [r4, #4]
 80212ba:	42a2      	cmp	r2, r4
 80212bc:	bf0c      	ite	eq
 80212be:	600b      	streq	r3, [r1, #0]
 80212c0:	6053      	strne	r3, [r2, #4]
 80212c2:	4630      	mov	r0, r6
 80212c4:	f001 f94c 	bl	8022560 <__malloc_unlock>
 80212c8:	f104 000b 	add.w	r0, r4, #11
 80212cc:	1d23      	adds	r3, r4, #4
 80212ce:	f020 0007 	bic.w	r0, r0, #7
 80212d2:	1ac2      	subs	r2, r0, r3
 80212d4:	d0cc      	beq.n	8021270 <_malloc_r+0x20>
 80212d6:	1a1b      	subs	r3, r3, r0
 80212d8:	50a3      	str	r3, [r4, r2]
 80212da:	e7c9      	b.n	8021270 <_malloc_r+0x20>
 80212dc:	4622      	mov	r2, r4
 80212de:	6864      	ldr	r4, [r4, #4]
 80212e0:	e7cc      	b.n	802127c <_malloc_r+0x2c>
 80212e2:	1cc4      	adds	r4, r0, #3
 80212e4:	f024 0403 	bic.w	r4, r4, #3
 80212e8:	42a0      	cmp	r0, r4
 80212ea:	d0e3      	beq.n	80212b4 <_malloc_r+0x64>
 80212ec:	1a21      	subs	r1, r4, r0
 80212ee:	4630      	mov	r0, r6
 80212f0:	f000 f808 	bl	8021304 <_sbrk_r>
 80212f4:	3001      	adds	r0, #1
 80212f6:	d1dd      	bne.n	80212b4 <_malloc_r+0x64>
 80212f8:	e7cf      	b.n	802129a <_malloc_r+0x4a>
 80212fa:	bf00      	nop
 80212fc:	20004350 	.word	0x20004350
 8021300:	20004354 	.word	0x20004354

08021304 <_sbrk_r>:
 8021304:	b538      	push	{r3, r4, r5, lr}
 8021306:	4d06      	ldr	r5, [pc, #24]	; (8021320 <_sbrk_r+0x1c>)
 8021308:	2300      	movs	r3, #0
 802130a:	4604      	mov	r4, r0
 802130c:	4608      	mov	r0, r1
 802130e:	602b      	str	r3, [r5, #0]
 8021310:	f7f0 ff88 	bl	8012224 <_sbrk>
 8021314:	1c43      	adds	r3, r0, #1
 8021316:	d102      	bne.n	802131e <_sbrk_r+0x1a>
 8021318:	682b      	ldr	r3, [r5, #0]
 802131a:	b103      	cbz	r3, 802131e <_sbrk_r+0x1a>
 802131c:	6023      	str	r3, [r4, #0]
 802131e:	bd38      	pop	{r3, r4, r5, pc}
 8021320:	20004e00 	.word	0x20004e00

08021324 <__sread>:
 8021324:	b510      	push	{r4, lr}
 8021326:	460c      	mov	r4, r1
 8021328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802132c:	f001 fc5c 	bl	8022be8 <_read_r>
 8021330:	2800      	cmp	r0, #0
 8021332:	bfab      	itete	ge
 8021334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021336:	89a3      	ldrhlt	r3, [r4, #12]
 8021338:	181b      	addge	r3, r3, r0
 802133a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802133e:	bfac      	ite	ge
 8021340:	6563      	strge	r3, [r4, #84]	; 0x54
 8021342:	81a3      	strhlt	r3, [r4, #12]
 8021344:	bd10      	pop	{r4, pc}

08021346 <__swrite>:
 8021346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802134a:	461f      	mov	r7, r3
 802134c:	898b      	ldrh	r3, [r1, #12]
 802134e:	05db      	lsls	r3, r3, #23
 8021350:	4605      	mov	r5, r0
 8021352:	460c      	mov	r4, r1
 8021354:	4616      	mov	r6, r2
 8021356:	d505      	bpl.n	8021364 <__swrite+0x1e>
 8021358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802135c:	2302      	movs	r3, #2
 802135e:	2200      	movs	r2, #0
 8021360:	f001 f87a 	bl	8022458 <_lseek_r>
 8021364:	89a3      	ldrh	r3, [r4, #12]
 8021366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802136a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802136e:	81a3      	strh	r3, [r4, #12]
 8021370:	4632      	mov	r2, r6
 8021372:	463b      	mov	r3, r7
 8021374:	4628      	mov	r0, r5
 8021376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802137a:	f000 b871 	b.w	8021460 <_write_r>

0802137e <__sseek>:
 802137e:	b510      	push	{r4, lr}
 8021380:	460c      	mov	r4, r1
 8021382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021386:	f001 f867 	bl	8022458 <_lseek_r>
 802138a:	1c43      	adds	r3, r0, #1
 802138c:	89a3      	ldrh	r3, [r4, #12]
 802138e:	bf15      	itete	ne
 8021390:	6560      	strne	r0, [r4, #84]	; 0x54
 8021392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802139a:	81a3      	strheq	r3, [r4, #12]
 802139c:	bf18      	it	ne
 802139e:	81a3      	strhne	r3, [r4, #12]
 80213a0:	bd10      	pop	{r4, pc}

080213a2 <__sclose>:
 80213a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80213a6:	f000 b8f9 	b.w	802159c <_close_r>

080213aa <strcpy>:
 80213aa:	4603      	mov	r3, r0
 80213ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80213b0:	f803 2b01 	strb.w	r2, [r3], #1
 80213b4:	2a00      	cmp	r2, #0
 80213b6:	d1f9      	bne.n	80213ac <strcpy+0x2>
 80213b8:	4770      	bx	lr
	...

080213bc <__swbuf_r>:
 80213bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80213be:	460e      	mov	r6, r1
 80213c0:	4614      	mov	r4, r2
 80213c2:	4605      	mov	r5, r0
 80213c4:	b118      	cbz	r0, 80213ce <__swbuf_r+0x12>
 80213c6:	6983      	ldr	r3, [r0, #24]
 80213c8:	b90b      	cbnz	r3, 80213ce <__swbuf_r+0x12>
 80213ca:	f7ff faf5 	bl	80209b8 <__sinit>
 80213ce:	4b21      	ldr	r3, [pc, #132]	; (8021454 <__swbuf_r+0x98>)
 80213d0:	429c      	cmp	r4, r3
 80213d2:	d12b      	bne.n	802142c <__swbuf_r+0x70>
 80213d4:	686c      	ldr	r4, [r5, #4]
 80213d6:	69a3      	ldr	r3, [r4, #24]
 80213d8:	60a3      	str	r3, [r4, #8]
 80213da:	89a3      	ldrh	r3, [r4, #12]
 80213dc:	071a      	lsls	r2, r3, #28
 80213de:	d52f      	bpl.n	8021440 <__swbuf_r+0x84>
 80213e0:	6923      	ldr	r3, [r4, #16]
 80213e2:	b36b      	cbz	r3, 8021440 <__swbuf_r+0x84>
 80213e4:	6923      	ldr	r3, [r4, #16]
 80213e6:	6820      	ldr	r0, [r4, #0]
 80213e8:	1ac0      	subs	r0, r0, r3
 80213ea:	6963      	ldr	r3, [r4, #20]
 80213ec:	b2f6      	uxtb	r6, r6
 80213ee:	4283      	cmp	r3, r0
 80213f0:	4637      	mov	r7, r6
 80213f2:	dc04      	bgt.n	80213fe <__swbuf_r+0x42>
 80213f4:	4621      	mov	r1, r4
 80213f6:	4628      	mov	r0, r5
 80213f8:	f000 ffe0 	bl	80223bc <_fflush_r>
 80213fc:	bb30      	cbnz	r0, 802144c <__swbuf_r+0x90>
 80213fe:	68a3      	ldr	r3, [r4, #8]
 8021400:	3b01      	subs	r3, #1
 8021402:	60a3      	str	r3, [r4, #8]
 8021404:	6823      	ldr	r3, [r4, #0]
 8021406:	1c5a      	adds	r2, r3, #1
 8021408:	6022      	str	r2, [r4, #0]
 802140a:	701e      	strb	r6, [r3, #0]
 802140c:	6963      	ldr	r3, [r4, #20]
 802140e:	3001      	adds	r0, #1
 8021410:	4283      	cmp	r3, r0
 8021412:	d004      	beq.n	802141e <__swbuf_r+0x62>
 8021414:	89a3      	ldrh	r3, [r4, #12]
 8021416:	07db      	lsls	r3, r3, #31
 8021418:	d506      	bpl.n	8021428 <__swbuf_r+0x6c>
 802141a:	2e0a      	cmp	r6, #10
 802141c:	d104      	bne.n	8021428 <__swbuf_r+0x6c>
 802141e:	4621      	mov	r1, r4
 8021420:	4628      	mov	r0, r5
 8021422:	f000 ffcb 	bl	80223bc <_fflush_r>
 8021426:	b988      	cbnz	r0, 802144c <__swbuf_r+0x90>
 8021428:	4638      	mov	r0, r7
 802142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802142c:	4b0a      	ldr	r3, [pc, #40]	; (8021458 <__swbuf_r+0x9c>)
 802142e:	429c      	cmp	r4, r3
 8021430:	d101      	bne.n	8021436 <__swbuf_r+0x7a>
 8021432:	68ac      	ldr	r4, [r5, #8]
 8021434:	e7cf      	b.n	80213d6 <__swbuf_r+0x1a>
 8021436:	4b09      	ldr	r3, [pc, #36]	; (802145c <__swbuf_r+0xa0>)
 8021438:	429c      	cmp	r4, r3
 802143a:	bf08      	it	eq
 802143c:	68ec      	ldreq	r4, [r5, #12]
 802143e:	e7ca      	b.n	80213d6 <__swbuf_r+0x1a>
 8021440:	4621      	mov	r1, r4
 8021442:	4628      	mov	r0, r5
 8021444:	f000 f81e 	bl	8021484 <__swsetup_r>
 8021448:	2800      	cmp	r0, #0
 802144a:	d0cb      	beq.n	80213e4 <__swbuf_r+0x28>
 802144c:	f04f 37ff 	mov.w	r7, #4294967295
 8021450:	e7ea      	b.n	8021428 <__swbuf_r+0x6c>
 8021452:	bf00      	nop
 8021454:	0802a608 	.word	0x0802a608
 8021458:	0802a628 	.word	0x0802a628
 802145c:	0802a5e8 	.word	0x0802a5e8

08021460 <_write_r>:
 8021460:	b538      	push	{r3, r4, r5, lr}
 8021462:	4d07      	ldr	r5, [pc, #28]	; (8021480 <_write_r+0x20>)
 8021464:	4604      	mov	r4, r0
 8021466:	4608      	mov	r0, r1
 8021468:	4611      	mov	r1, r2
 802146a:	2200      	movs	r2, #0
 802146c:	602a      	str	r2, [r5, #0]
 802146e:	461a      	mov	r2, r3
 8021470:	f7f0 fe87 	bl	8012182 <_write>
 8021474:	1c43      	adds	r3, r0, #1
 8021476:	d102      	bne.n	802147e <_write_r+0x1e>
 8021478:	682b      	ldr	r3, [r5, #0]
 802147a:	b103      	cbz	r3, 802147e <_write_r+0x1e>
 802147c:	6023      	str	r3, [r4, #0]
 802147e:	bd38      	pop	{r3, r4, r5, pc}
 8021480:	20004e00 	.word	0x20004e00

08021484 <__swsetup_r>:
 8021484:	4b32      	ldr	r3, [pc, #200]	; (8021550 <__swsetup_r+0xcc>)
 8021486:	b570      	push	{r4, r5, r6, lr}
 8021488:	681d      	ldr	r5, [r3, #0]
 802148a:	4606      	mov	r6, r0
 802148c:	460c      	mov	r4, r1
 802148e:	b125      	cbz	r5, 802149a <__swsetup_r+0x16>
 8021490:	69ab      	ldr	r3, [r5, #24]
 8021492:	b913      	cbnz	r3, 802149a <__swsetup_r+0x16>
 8021494:	4628      	mov	r0, r5
 8021496:	f7ff fa8f 	bl	80209b8 <__sinit>
 802149a:	4b2e      	ldr	r3, [pc, #184]	; (8021554 <__swsetup_r+0xd0>)
 802149c:	429c      	cmp	r4, r3
 802149e:	d10f      	bne.n	80214c0 <__swsetup_r+0x3c>
 80214a0:	686c      	ldr	r4, [r5, #4]
 80214a2:	89a3      	ldrh	r3, [r4, #12]
 80214a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80214a8:	0719      	lsls	r1, r3, #28
 80214aa:	d42c      	bmi.n	8021506 <__swsetup_r+0x82>
 80214ac:	06dd      	lsls	r5, r3, #27
 80214ae:	d411      	bmi.n	80214d4 <__swsetup_r+0x50>
 80214b0:	2309      	movs	r3, #9
 80214b2:	6033      	str	r3, [r6, #0]
 80214b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80214b8:	81a3      	strh	r3, [r4, #12]
 80214ba:	f04f 30ff 	mov.w	r0, #4294967295
 80214be:	e03e      	b.n	802153e <__swsetup_r+0xba>
 80214c0:	4b25      	ldr	r3, [pc, #148]	; (8021558 <__swsetup_r+0xd4>)
 80214c2:	429c      	cmp	r4, r3
 80214c4:	d101      	bne.n	80214ca <__swsetup_r+0x46>
 80214c6:	68ac      	ldr	r4, [r5, #8]
 80214c8:	e7eb      	b.n	80214a2 <__swsetup_r+0x1e>
 80214ca:	4b24      	ldr	r3, [pc, #144]	; (802155c <__swsetup_r+0xd8>)
 80214cc:	429c      	cmp	r4, r3
 80214ce:	bf08      	it	eq
 80214d0:	68ec      	ldreq	r4, [r5, #12]
 80214d2:	e7e6      	b.n	80214a2 <__swsetup_r+0x1e>
 80214d4:	0758      	lsls	r0, r3, #29
 80214d6:	d512      	bpl.n	80214fe <__swsetup_r+0x7a>
 80214d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80214da:	b141      	cbz	r1, 80214ee <__swsetup_r+0x6a>
 80214dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80214e0:	4299      	cmp	r1, r3
 80214e2:	d002      	beq.n	80214ea <__swsetup_r+0x66>
 80214e4:	4630      	mov	r0, r6
 80214e6:	f001 f841 	bl	802256c <_free_r>
 80214ea:	2300      	movs	r3, #0
 80214ec:	6363      	str	r3, [r4, #52]	; 0x34
 80214ee:	89a3      	ldrh	r3, [r4, #12]
 80214f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80214f4:	81a3      	strh	r3, [r4, #12]
 80214f6:	2300      	movs	r3, #0
 80214f8:	6063      	str	r3, [r4, #4]
 80214fa:	6923      	ldr	r3, [r4, #16]
 80214fc:	6023      	str	r3, [r4, #0]
 80214fe:	89a3      	ldrh	r3, [r4, #12]
 8021500:	f043 0308 	orr.w	r3, r3, #8
 8021504:	81a3      	strh	r3, [r4, #12]
 8021506:	6923      	ldr	r3, [r4, #16]
 8021508:	b94b      	cbnz	r3, 802151e <__swsetup_r+0x9a>
 802150a:	89a3      	ldrh	r3, [r4, #12]
 802150c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021514:	d003      	beq.n	802151e <__swsetup_r+0x9a>
 8021516:	4621      	mov	r1, r4
 8021518:	4630      	mov	r0, r6
 802151a:	f000 ffd3 	bl	80224c4 <__smakebuf_r>
 802151e:	89a0      	ldrh	r0, [r4, #12]
 8021520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021524:	f010 0301 	ands.w	r3, r0, #1
 8021528:	d00a      	beq.n	8021540 <__swsetup_r+0xbc>
 802152a:	2300      	movs	r3, #0
 802152c:	60a3      	str	r3, [r4, #8]
 802152e:	6963      	ldr	r3, [r4, #20]
 8021530:	425b      	negs	r3, r3
 8021532:	61a3      	str	r3, [r4, #24]
 8021534:	6923      	ldr	r3, [r4, #16]
 8021536:	b943      	cbnz	r3, 802154a <__swsetup_r+0xc6>
 8021538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802153c:	d1ba      	bne.n	80214b4 <__swsetup_r+0x30>
 802153e:	bd70      	pop	{r4, r5, r6, pc}
 8021540:	0781      	lsls	r1, r0, #30
 8021542:	bf58      	it	pl
 8021544:	6963      	ldrpl	r3, [r4, #20]
 8021546:	60a3      	str	r3, [r4, #8]
 8021548:	e7f4      	b.n	8021534 <__swsetup_r+0xb0>
 802154a:	2000      	movs	r0, #0
 802154c:	e7f7      	b.n	802153e <__swsetup_r+0xba>
 802154e:	bf00      	nop
 8021550:	20000108 	.word	0x20000108
 8021554:	0802a608 	.word	0x0802a608
 8021558:	0802a628 	.word	0x0802a628
 802155c:	0802a5e8 	.word	0x0802a5e8

08021560 <__assert_func>:
 8021560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021562:	4614      	mov	r4, r2
 8021564:	461a      	mov	r2, r3
 8021566:	4b09      	ldr	r3, [pc, #36]	; (802158c <__assert_func+0x2c>)
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	4605      	mov	r5, r0
 802156c:	68d8      	ldr	r0, [r3, #12]
 802156e:	b14c      	cbz	r4, 8021584 <__assert_func+0x24>
 8021570:	4b07      	ldr	r3, [pc, #28]	; (8021590 <__assert_func+0x30>)
 8021572:	9100      	str	r1, [sp, #0]
 8021574:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021578:	4906      	ldr	r1, [pc, #24]	; (8021594 <__assert_func+0x34>)
 802157a:	462b      	mov	r3, r5
 802157c:	f000 ff5a 	bl	8022434 <fiprintf>
 8021580:	f001 fb44 	bl	8022c0c <abort>
 8021584:	4b04      	ldr	r3, [pc, #16]	; (8021598 <__assert_func+0x38>)
 8021586:	461c      	mov	r4, r3
 8021588:	e7f3      	b.n	8021572 <__assert_func+0x12>
 802158a:	bf00      	nop
 802158c:	20000108 	.word	0x20000108
 8021590:	0802a7cc 	.word	0x0802a7cc
 8021594:	0802a7d9 	.word	0x0802a7d9
 8021598:	0802a807 	.word	0x0802a807

0802159c <_close_r>:
 802159c:	b538      	push	{r3, r4, r5, lr}
 802159e:	4d06      	ldr	r5, [pc, #24]	; (80215b8 <_close_r+0x1c>)
 80215a0:	2300      	movs	r3, #0
 80215a2:	4604      	mov	r4, r0
 80215a4:	4608      	mov	r0, r1
 80215a6:	602b      	str	r3, [r5, #0]
 80215a8:	f7f0 fe07 	bl	80121ba <_close>
 80215ac:	1c43      	adds	r3, r0, #1
 80215ae:	d102      	bne.n	80215b6 <_close_r+0x1a>
 80215b0:	682b      	ldr	r3, [r5, #0]
 80215b2:	b103      	cbz	r3, 80215b6 <_close_r+0x1a>
 80215b4:	6023      	str	r3, [r4, #0]
 80215b6:	bd38      	pop	{r3, r4, r5, pc}
 80215b8:	20004e00 	.word	0x20004e00

080215bc <quorem>:
 80215bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215c0:	6903      	ldr	r3, [r0, #16]
 80215c2:	690c      	ldr	r4, [r1, #16]
 80215c4:	42a3      	cmp	r3, r4
 80215c6:	4607      	mov	r7, r0
 80215c8:	f2c0 8081 	blt.w	80216ce <quorem+0x112>
 80215cc:	3c01      	subs	r4, #1
 80215ce:	f101 0814 	add.w	r8, r1, #20
 80215d2:	f100 0514 	add.w	r5, r0, #20
 80215d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80215da:	9301      	str	r3, [sp, #4]
 80215dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80215e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80215e4:	3301      	adds	r3, #1
 80215e6:	429a      	cmp	r2, r3
 80215e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80215ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80215f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80215f4:	d331      	bcc.n	802165a <quorem+0x9e>
 80215f6:	f04f 0e00 	mov.w	lr, #0
 80215fa:	4640      	mov	r0, r8
 80215fc:	46ac      	mov	ip, r5
 80215fe:	46f2      	mov	sl, lr
 8021600:	f850 2b04 	ldr.w	r2, [r0], #4
 8021604:	b293      	uxth	r3, r2
 8021606:	fb06 e303 	mla	r3, r6, r3, lr
 802160a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802160e:	b29b      	uxth	r3, r3
 8021610:	ebaa 0303 	sub.w	r3, sl, r3
 8021614:	0c12      	lsrs	r2, r2, #16
 8021616:	f8dc a000 	ldr.w	sl, [ip]
 802161a:	fb06 e202 	mla	r2, r6, r2, lr
 802161e:	fa13 f38a 	uxtah	r3, r3, sl
 8021622:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021626:	fa1f fa82 	uxth.w	sl, r2
 802162a:	f8dc 2000 	ldr.w	r2, [ip]
 802162e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8021632:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021636:	b29b      	uxth	r3, r3
 8021638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802163c:	4581      	cmp	r9, r0
 802163e:	f84c 3b04 	str.w	r3, [ip], #4
 8021642:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8021646:	d2db      	bcs.n	8021600 <quorem+0x44>
 8021648:	f855 300b 	ldr.w	r3, [r5, fp]
 802164c:	b92b      	cbnz	r3, 802165a <quorem+0x9e>
 802164e:	9b01      	ldr	r3, [sp, #4]
 8021650:	3b04      	subs	r3, #4
 8021652:	429d      	cmp	r5, r3
 8021654:	461a      	mov	r2, r3
 8021656:	d32e      	bcc.n	80216b6 <quorem+0xfa>
 8021658:	613c      	str	r4, [r7, #16]
 802165a:	4638      	mov	r0, r7
 802165c:	f7ff fcca 	bl	8020ff4 <__mcmp>
 8021660:	2800      	cmp	r0, #0
 8021662:	db24      	blt.n	80216ae <quorem+0xf2>
 8021664:	3601      	adds	r6, #1
 8021666:	4628      	mov	r0, r5
 8021668:	f04f 0c00 	mov.w	ip, #0
 802166c:	f858 2b04 	ldr.w	r2, [r8], #4
 8021670:	f8d0 e000 	ldr.w	lr, [r0]
 8021674:	b293      	uxth	r3, r2
 8021676:	ebac 0303 	sub.w	r3, ip, r3
 802167a:	0c12      	lsrs	r2, r2, #16
 802167c:	fa13 f38e 	uxtah	r3, r3, lr
 8021680:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8021684:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021688:	b29b      	uxth	r3, r3
 802168a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802168e:	45c1      	cmp	r9, r8
 8021690:	f840 3b04 	str.w	r3, [r0], #4
 8021694:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8021698:	d2e8      	bcs.n	802166c <quorem+0xb0>
 802169a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802169e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80216a2:	b922      	cbnz	r2, 80216ae <quorem+0xf2>
 80216a4:	3b04      	subs	r3, #4
 80216a6:	429d      	cmp	r5, r3
 80216a8:	461a      	mov	r2, r3
 80216aa:	d30a      	bcc.n	80216c2 <quorem+0x106>
 80216ac:	613c      	str	r4, [r7, #16]
 80216ae:	4630      	mov	r0, r6
 80216b0:	b003      	add	sp, #12
 80216b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216b6:	6812      	ldr	r2, [r2, #0]
 80216b8:	3b04      	subs	r3, #4
 80216ba:	2a00      	cmp	r2, #0
 80216bc:	d1cc      	bne.n	8021658 <quorem+0x9c>
 80216be:	3c01      	subs	r4, #1
 80216c0:	e7c7      	b.n	8021652 <quorem+0x96>
 80216c2:	6812      	ldr	r2, [r2, #0]
 80216c4:	3b04      	subs	r3, #4
 80216c6:	2a00      	cmp	r2, #0
 80216c8:	d1f0      	bne.n	80216ac <quorem+0xf0>
 80216ca:	3c01      	subs	r4, #1
 80216cc:	e7eb      	b.n	80216a6 <quorem+0xea>
 80216ce:	2000      	movs	r0, #0
 80216d0:	e7ee      	b.n	80216b0 <quorem+0xf4>
 80216d2:	0000      	movs	r0, r0
 80216d4:	0000      	movs	r0, r0
	...

080216d8 <_dtoa_r>:
 80216d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216dc:	ed2d 8b02 	vpush	{d8}
 80216e0:	ec57 6b10 	vmov	r6, r7, d0
 80216e4:	b095      	sub	sp, #84	; 0x54
 80216e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80216e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80216ec:	9105      	str	r1, [sp, #20]
 80216ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80216f2:	4604      	mov	r4, r0
 80216f4:	9209      	str	r2, [sp, #36]	; 0x24
 80216f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80216f8:	b975      	cbnz	r5, 8021718 <_dtoa_r+0x40>
 80216fa:	2010      	movs	r0, #16
 80216fc:	f000 ff22 	bl	8022544 <malloc>
 8021700:	4602      	mov	r2, r0
 8021702:	6260      	str	r0, [r4, #36]	; 0x24
 8021704:	b920      	cbnz	r0, 8021710 <_dtoa_r+0x38>
 8021706:	4bb2      	ldr	r3, [pc, #712]	; (80219d0 <_dtoa_r+0x2f8>)
 8021708:	21ea      	movs	r1, #234	; 0xea
 802170a:	48b2      	ldr	r0, [pc, #712]	; (80219d4 <_dtoa_r+0x2fc>)
 802170c:	f7ff ff28 	bl	8021560 <__assert_func>
 8021710:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021714:	6005      	str	r5, [r0, #0]
 8021716:	60c5      	str	r5, [r0, #12]
 8021718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802171a:	6819      	ldr	r1, [r3, #0]
 802171c:	b151      	cbz	r1, 8021734 <_dtoa_r+0x5c>
 802171e:	685a      	ldr	r2, [r3, #4]
 8021720:	604a      	str	r2, [r1, #4]
 8021722:	2301      	movs	r3, #1
 8021724:	4093      	lsls	r3, r2
 8021726:	608b      	str	r3, [r1, #8]
 8021728:	4620      	mov	r0, r4
 802172a:	f7ff fa25 	bl	8020b78 <_Bfree>
 802172e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021730:	2200      	movs	r2, #0
 8021732:	601a      	str	r2, [r3, #0]
 8021734:	1e3b      	subs	r3, r7, #0
 8021736:	bfb9      	ittee	lt
 8021738:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802173c:	9303      	strlt	r3, [sp, #12]
 802173e:	2300      	movge	r3, #0
 8021740:	f8c8 3000 	strge.w	r3, [r8]
 8021744:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8021748:	4ba3      	ldr	r3, [pc, #652]	; (80219d8 <_dtoa_r+0x300>)
 802174a:	bfbc      	itt	lt
 802174c:	2201      	movlt	r2, #1
 802174e:	f8c8 2000 	strlt.w	r2, [r8]
 8021752:	ea33 0309 	bics.w	r3, r3, r9
 8021756:	d11b      	bne.n	8021790 <_dtoa_r+0xb8>
 8021758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802175a:	f242 730f 	movw	r3, #9999	; 0x270f
 802175e:	6013      	str	r3, [r2, #0]
 8021760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021764:	4333      	orrs	r3, r6
 8021766:	f000 857a 	beq.w	802225e <_dtoa_r+0xb86>
 802176a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802176c:	b963      	cbnz	r3, 8021788 <_dtoa_r+0xb0>
 802176e:	4b9b      	ldr	r3, [pc, #620]	; (80219dc <_dtoa_r+0x304>)
 8021770:	e024      	b.n	80217bc <_dtoa_r+0xe4>
 8021772:	4b9b      	ldr	r3, [pc, #620]	; (80219e0 <_dtoa_r+0x308>)
 8021774:	9300      	str	r3, [sp, #0]
 8021776:	3308      	adds	r3, #8
 8021778:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802177a:	6013      	str	r3, [r2, #0]
 802177c:	9800      	ldr	r0, [sp, #0]
 802177e:	b015      	add	sp, #84	; 0x54
 8021780:	ecbd 8b02 	vpop	{d8}
 8021784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021788:	4b94      	ldr	r3, [pc, #592]	; (80219dc <_dtoa_r+0x304>)
 802178a:	9300      	str	r3, [sp, #0]
 802178c:	3303      	adds	r3, #3
 802178e:	e7f3      	b.n	8021778 <_dtoa_r+0xa0>
 8021790:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021794:	2200      	movs	r2, #0
 8021796:	ec51 0b17 	vmov	r0, r1, d7
 802179a:	2300      	movs	r3, #0
 802179c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80217a0:	f7ef f8c2 	bl	8010928 <__aeabi_dcmpeq>
 80217a4:	4680      	mov	r8, r0
 80217a6:	b158      	cbz	r0, 80217c0 <_dtoa_r+0xe8>
 80217a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80217aa:	2301      	movs	r3, #1
 80217ac:	6013      	str	r3, [r2, #0]
 80217ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80217b0:	2b00      	cmp	r3, #0
 80217b2:	f000 8551 	beq.w	8022258 <_dtoa_r+0xb80>
 80217b6:	488b      	ldr	r0, [pc, #556]	; (80219e4 <_dtoa_r+0x30c>)
 80217b8:	6018      	str	r0, [r3, #0]
 80217ba:	1e43      	subs	r3, r0, #1
 80217bc:	9300      	str	r3, [sp, #0]
 80217be:	e7dd      	b.n	802177c <_dtoa_r+0xa4>
 80217c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80217c4:	aa12      	add	r2, sp, #72	; 0x48
 80217c6:	a913      	add	r1, sp, #76	; 0x4c
 80217c8:	4620      	mov	r0, r4
 80217ca:	f7ff fcb7 	bl	802113c <__d2b>
 80217ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80217d2:	4683      	mov	fp, r0
 80217d4:	2d00      	cmp	r5, #0
 80217d6:	d07c      	beq.n	80218d2 <_dtoa_r+0x1fa>
 80217d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80217da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80217de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80217e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80217e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80217ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80217ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80217f2:	4b7d      	ldr	r3, [pc, #500]	; (80219e8 <_dtoa_r+0x310>)
 80217f4:	2200      	movs	r2, #0
 80217f6:	4630      	mov	r0, r6
 80217f8:	4639      	mov	r1, r7
 80217fa:	f7ee fc75 	bl	80100e8 <__aeabi_dsub>
 80217fe:	a36e      	add	r3, pc, #440	; (adr r3, 80219b8 <_dtoa_r+0x2e0>)
 8021800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021804:	f7ee fe28 	bl	8010458 <__aeabi_dmul>
 8021808:	a36d      	add	r3, pc, #436	; (adr r3, 80219c0 <_dtoa_r+0x2e8>)
 802180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802180e:	f7ee fc6d 	bl	80100ec <__adddf3>
 8021812:	4606      	mov	r6, r0
 8021814:	4628      	mov	r0, r5
 8021816:	460f      	mov	r7, r1
 8021818:	f7ee fdb4 	bl	8010384 <__aeabi_i2d>
 802181c:	a36a      	add	r3, pc, #424	; (adr r3, 80219c8 <_dtoa_r+0x2f0>)
 802181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021822:	f7ee fe19 	bl	8010458 <__aeabi_dmul>
 8021826:	4602      	mov	r2, r0
 8021828:	460b      	mov	r3, r1
 802182a:	4630      	mov	r0, r6
 802182c:	4639      	mov	r1, r7
 802182e:	f7ee fc5d 	bl	80100ec <__adddf3>
 8021832:	4606      	mov	r6, r0
 8021834:	460f      	mov	r7, r1
 8021836:	f7ef f8a9 	bl	801098c <__aeabi_d2iz>
 802183a:	2200      	movs	r2, #0
 802183c:	4682      	mov	sl, r0
 802183e:	2300      	movs	r3, #0
 8021840:	4630      	mov	r0, r6
 8021842:	4639      	mov	r1, r7
 8021844:	f7ef f87a 	bl	801093c <__aeabi_dcmplt>
 8021848:	b148      	cbz	r0, 802185e <_dtoa_r+0x186>
 802184a:	4650      	mov	r0, sl
 802184c:	f7ee fd9a 	bl	8010384 <__aeabi_i2d>
 8021850:	4632      	mov	r2, r6
 8021852:	463b      	mov	r3, r7
 8021854:	f7ef f868 	bl	8010928 <__aeabi_dcmpeq>
 8021858:	b908      	cbnz	r0, 802185e <_dtoa_r+0x186>
 802185a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802185e:	f1ba 0f16 	cmp.w	sl, #22
 8021862:	d854      	bhi.n	802190e <_dtoa_r+0x236>
 8021864:	4b61      	ldr	r3, [pc, #388]	; (80219ec <_dtoa_r+0x314>)
 8021866:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802186e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021872:	f7ef f863 	bl	801093c <__aeabi_dcmplt>
 8021876:	2800      	cmp	r0, #0
 8021878:	d04b      	beq.n	8021912 <_dtoa_r+0x23a>
 802187a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802187e:	2300      	movs	r3, #0
 8021880:	930e      	str	r3, [sp, #56]	; 0x38
 8021882:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021884:	1b5d      	subs	r5, r3, r5
 8021886:	1e6b      	subs	r3, r5, #1
 8021888:	9304      	str	r3, [sp, #16]
 802188a:	bf43      	ittte	mi
 802188c:	2300      	movmi	r3, #0
 802188e:	f1c5 0801 	rsbmi	r8, r5, #1
 8021892:	9304      	strmi	r3, [sp, #16]
 8021894:	f04f 0800 	movpl.w	r8, #0
 8021898:	f1ba 0f00 	cmp.w	sl, #0
 802189c:	db3b      	blt.n	8021916 <_dtoa_r+0x23e>
 802189e:	9b04      	ldr	r3, [sp, #16]
 80218a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80218a4:	4453      	add	r3, sl
 80218a6:	9304      	str	r3, [sp, #16]
 80218a8:	2300      	movs	r3, #0
 80218aa:	9306      	str	r3, [sp, #24]
 80218ac:	9b05      	ldr	r3, [sp, #20]
 80218ae:	2b09      	cmp	r3, #9
 80218b0:	d869      	bhi.n	8021986 <_dtoa_r+0x2ae>
 80218b2:	2b05      	cmp	r3, #5
 80218b4:	bfc4      	itt	gt
 80218b6:	3b04      	subgt	r3, #4
 80218b8:	9305      	strgt	r3, [sp, #20]
 80218ba:	9b05      	ldr	r3, [sp, #20]
 80218bc:	f1a3 0302 	sub.w	r3, r3, #2
 80218c0:	bfcc      	ite	gt
 80218c2:	2500      	movgt	r5, #0
 80218c4:	2501      	movle	r5, #1
 80218c6:	2b03      	cmp	r3, #3
 80218c8:	d869      	bhi.n	802199e <_dtoa_r+0x2c6>
 80218ca:	e8df f003 	tbb	[pc, r3]
 80218ce:	4e2c      	.short	0x4e2c
 80218d0:	5a4c      	.short	0x5a4c
 80218d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80218d6:	441d      	add	r5, r3
 80218d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80218dc:	2b20      	cmp	r3, #32
 80218de:	bfc1      	itttt	gt
 80218e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80218e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80218e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80218ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80218f0:	bfda      	itte	le
 80218f2:	f1c3 0320 	rsble	r3, r3, #32
 80218f6:	fa06 f003 	lslle.w	r0, r6, r3
 80218fa:	4318      	orrgt	r0, r3
 80218fc:	f7ee fd32 	bl	8010364 <__aeabi_ui2d>
 8021900:	2301      	movs	r3, #1
 8021902:	4606      	mov	r6, r0
 8021904:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8021908:	3d01      	subs	r5, #1
 802190a:	9310      	str	r3, [sp, #64]	; 0x40
 802190c:	e771      	b.n	80217f2 <_dtoa_r+0x11a>
 802190e:	2301      	movs	r3, #1
 8021910:	e7b6      	b.n	8021880 <_dtoa_r+0x1a8>
 8021912:	900e      	str	r0, [sp, #56]	; 0x38
 8021914:	e7b5      	b.n	8021882 <_dtoa_r+0x1aa>
 8021916:	f1ca 0300 	rsb	r3, sl, #0
 802191a:	9306      	str	r3, [sp, #24]
 802191c:	2300      	movs	r3, #0
 802191e:	eba8 080a 	sub.w	r8, r8, sl
 8021922:	930d      	str	r3, [sp, #52]	; 0x34
 8021924:	e7c2      	b.n	80218ac <_dtoa_r+0x1d4>
 8021926:	2300      	movs	r3, #0
 8021928:	9308      	str	r3, [sp, #32]
 802192a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802192c:	2b00      	cmp	r3, #0
 802192e:	dc39      	bgt.n	80219a4 <_dtoa_r+0x2cc>
 8021930:	f04f 0901 	mov.w	r9, #1
 8021934:	f8cd 9004 	str.w	r9, [sp, #4]
 8021938:	464b      	mov	r3, r9
 802193a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 802193e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021940:	2200      	movs	r2, #0
 8021942:	6042      	str	r2, [r0, #4]
 8021944:	2204      	movs	r2, #4
 8021946:	f102 0614 	add.w	r6, r2, #20
 802194a:	429e      	cmp	r6, r3
 802194c:	6841      	ldr	r1, [r0, #4]
 802194e:	d92f      	bls.n	80219b0 <_dtoa_r+0x2d8>
 8021950:	4620      	mov	r0, r4
 8021952:	f7ff f8d1 	bl	8020af8 <_Balloc>
 8021956:	9000      	str	r0, [sp, #0]
 8021958:	2800      	cmp	r0, #0
 802195a:	d14b      	bne.n	80219f4 <_dtoa_r+0x31c>
 802195c:	4b24      	ldr	r3, [pc, #144]	; (80219f0 <_dtoa_r+0x318>)
 802195e:	4602      	mov	r2, r0
 8021960:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021964:	e6d1      	b.n	802170a <_dtoa_r+0x32>
 8021966:	2301      	movs	r3, #1
 8021968:	e7de      	b.n	8021928 <_dtoa_r+0x250>
 802196a:	2300      	movs	r3, #0
 802196c:	9308      	str	r3, [sp, #32]
 802196e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021970:	eb0a 0903 	add.w	r9, sl, r3
 8021974:	f109 0301 	add.w	r3, r9, #1
 8021978:	2b01      	cmp	r3, #1
 802197a:	9301      	str	r3, [sp, #4]
 802197c:	bfb8      	it	lt
 802197e:	2301      	movlt	r3, #1
 8021980:	e7dd      	b.n	802193e <_dtoa_r+0x266>
 8021982:	2301      	movs	r3, #1
 8021984:	e7f2      	b.n	802196c <_dtoa_r+0x294>
 8021986:	2501      	movs	r5, #1
 8021988:	2300      	movs	r3, #0
 802198a:	9305      	str	r3, [sp, #20]
 802198c:	9508      	str	r5, [sp, #32]
 802198e:	f04f 39ff 	mov.w	r9, #4294967295
 8021992:	2200      	movs	r2, #0
 8021994:	f8cd 9004 	str.w	r9, [sp, #4]
 8021998:	2312      	movs	r3, #18
 802199a:	9209      	str	r2, [sp, #36]	; 0x24
 802199c:	e7cf      	b.n	802193e <_dtoa_r+0x266>
 802199e:	2301      	movs	r3, #1
 80219a0:	9308      	str	r3, [sp, #32]
 80219a2:	e7f4      	b.n	802198e <_dtoa_r+0x2b6>
 80219a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80219a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80219ac:	464b      	mov	r3, r9
 80219ae:	e7c6      	b.n	802193e <_dtoa_r+0x266>
 80219b0:	3101      	adds	r1, #1
 80219b2:	6041      	str	r1, [r0, #4]
 80219b4:	0052      	lsls	r2, r2, #1
 80219b6:	e7c6      	b.n	8021946 <_dtoa_r+0x26e>
 80219b8:	636f4361 	.word	0x636f4361
 80219bc:	3fd287a7 	.word	0x3fd287a7
 80219c0:	8b60c8b3 	.word	0x8b60c8b3
 80219c4:	3fc68a28 	.word	0x3fc68a28
 80219c8:	509f79fb 	.word	0x509f79fb
 80219cc:	3fd34413 	.word	0x3fd34413
 80219d0:	0802a648 	.word	0x0802a648
 80219d4:	0802a817 	.word	0x0802a817
 80219d8:	7ff00000 	.word	0x7ff00000
 80219dc:	0802a811 	.word	0x0802a811
 80219e0:	0802a808 	.word	0x0802a808
 80219e4:	0802a816 	.word	0x0802a816
 80219e8:	3ff80000 	.word	0x3ff80000
 80219ec:	0802a6f8 	.word	0x0802a6f8
 80219f0:	0802a6bf 	.word	0x0802a6bf
 80219f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80219f6:	9a00      	ldr	r2, [sp, #0]
 80219f8:	601a      	str	r2, [r3, #0]
 80219fa:	9b01      	ldr	r3, [sp, #4]
 80219fc:	2b0e      	cmp	r3, #14
 80219fe:	f200 80ad 	bhi.w	8021b5c <_dtoa_r+0x484>
 8021a02:	2d00      	cmp	r5, #0
 8021a04:	f000 80aa 	beq.w	8021b5c <_dtoa_r+0x484>
 8021a08:	f1ba 0f00 	cmp.w	sl, #0
 8021a0c:	dd36      	ble.n	8021a7c <_dtoa_r+0x3a4>
 8021a0e:	4ac3      	ldr	r2, [pc, #780]	; (8021d1c <_dtoa_r+0x644>)
 8021a10:	f00a 030f 	and.w	r3, sl, #15
 8021a14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021a18:	ed93 7b00 	vldr	d7, [r3]
 8021a1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8021a20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8021a24:	eeb0 8a47 	vmov.f32	s16, s14
 8021a28:	eef0 8a67 	vmov.f32	s17, s15
 8021a2c:	d016      	beq.n	8021a5c <_dtoa_r+0x384>
 8021a2e:	4bbc      	ldr	r3, [pc, #752]	; (8021d20 <_dtoa_r+0x648>)
 8021a30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021a34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021a38:	f7ee fe38 	bl	80106ac <__aeabi_ddiv>
 8021a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021a40:	f007 070f 	and.w	r7, r7, #15
 8021a44:	2503      	movs	r5, #3
 8021a46:	4eb6      	ldr	r6, [pc, #728]	; (8021d20 <_dtoa_r+0x648>)
 8021a48:	b957      	cbnz	r7, 8021a60 <_dtoa_r+0x388>
 8021a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021a4e:	ec53 2b18 	vmov	r2, r3, d8
 8021a52:	f7ee fe2b 	bl	80106ac <__aeabi_ddiv>
 8021a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021a5a:	e029      	b.n	8021ab0 <_dtoa_r+0x3d8>
 8021a5c:	2502      	movs	r5, #2
 8021a5e:	e7f2      	b.n	8021a46 <_dtoa_r+0x36e>
 8021a60:	07f9      	lsls	r1, r7, #31
 8021a62:	d508      	bpl.n	8021a76 <_dtoa_r+0x39e>
 8021a64:	ec51 0b18 	vmov	r0, r1, d8
 8021a68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021a6c:	f7ee fcf4 	bl	8010458 <__aeabi_dmul>
 8021a70:	ec41 0b18 	vmov	d8, r0, r1
 8021a74:	3501      	adds	r5, #1
 8021a76:	107f      	asrs	r7, r7, #1
 8021a78:	3608      	adds	r6, #8
 8021a7a:	e7e5      	b.n	8021a48 <_dtoa_r+0x370>
 8021a7c:	f000 80a6 	beq.w	8021bcc <_dtoa_r+0x4f4>
 8021a80:	f1ca 0600 	rsb	r6, sl, #0
 8021a84:	4ba5      	ldr	r3, [pc, #660]	; (8021d1c <_dtoa_r+0x644>)
 8021a86:	4fa6      	ldr	r7, [pc, #664]	; (8021d20 <_dtoa_r+0x648>)
 8021a88:	f006 020f 	and.w	r2, r6, #15
 8021a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021a98:	f7ee fcde 	bl	8010458 <__aeabi_dmul>
 8021a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021aa0:	1136      	asrs	r6, r6, #4
 8021aa2:	2300      	movs	r3, #0
 8021aa4:	2502      	movs	r5, #2
 8021aa6:	2e00      	cmp	r6, #0
 8021aa8:	f040 8085 	bne.w	8021bb6 <_dtoa_r+0x4de>
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	d1d2      	bne.n	8021a56 <_dtoa_r+0x37e>
 8021ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	f000 808c 	beq.w	8021bd0 <_dtoa_r+0x4f8>
 8021ab8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021abc:	4b99      	ldr	r3, [pc, #612]	; (8021d24 <_dtoa_r+0x64c>)
 8021abe:	2200      	movs	r2, #0
 8021ac0:	4630      	mov	r0, r6
 8021ac2:	4639      	mov	r1, r7
 8021ac4:	f7ee ff3a 	bl	801093c <__aeabi_dcmplt>
 8021ac8:	2800      	cmp	r0, #0
 8021aca:	f000 8081 	beq.w	8021bd0 <_dtoa_r+0x4f8>
 8021ace:	9b01      	ldr	r3, [sp, #4]
 8021ad0:	2b00      	cmp	r3, #0
 8021ad2:	d07d      	beq.n	8021bd0 <_dtoa_r+0x4f8>
 8021ad4:	f1b9 0f00 	cmp.w	r9, #0
 8021ad8:	dd3c      	ble.n	8021b54 <_dtoa_r+0x47c>
 8021ada:	f10a 33ff 	add.w	r3, sl, #4294967295
 8021ade:	9307      	str	r3, [sp, #28]
 8021ae0:	2200      	movs	r2, #0
 8021ae2:	4b91      	ldr	r3, [pc, #580]	; (8021d28 <_dtoa_r+0x650>)
 8021ae4:	4630      	mov	r0, r6
 8021ae6:	4639      	mov	r1, r7
 8021ae8:	f7ee fcb6 	bl	8010458 <__aeabi_dmul>
 8021aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021af0:	3501      	adds	r5, #1
 8021af2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8021af6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021afa:	4628      	mov	r0, r5
 8021afc:	f7ee fc42 	bl	8010384 <__aeabi_i2d>
 8021b00:	4632      	mov	r2, r6
 8021b02:	463b      	mov	r3, r7
 8021b04:	f7ee fca8 	bl	8010458 <__aeabi_dmul>
 8021b08:	4b88      	ldr	r3, [pc, #544]	; (8021d2c <_dtoa_r+0x654>)
 8021b0a:	2200      	movs	r2, #0
 8021b0c:	f7ee faee 	bl	80100ec <__adddf3>
 8021b10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8021b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021b18:	9303      	str	r3, [sp, #12]
 8021b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b1c:	2b00      	cmp	r3, #0
 8021b1e:	d15c      	bne.n	8021bda <_dtoa_r+0x502>
 8021b20:	4b83      	ldr	r3, [pc, #524]	; (8021d30 <_dtoa_r+0x658>)
 8021b22:	2200      	movs	r2, #0
 8021b24:	4630      	mov	r0, r6
 8021b26:	4639      	mov	r1, r7
 8021b28:	f7ee fade 	bl	80100e8 <__aeabi_dsub>
 8021b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8021b30:	4606      	mov	r6, r0
 8021b32:	460f      	mov	r7, r1
 8021b34:	f7ee ff20 	bl	8010978 <__aeabi_dcmpgt>
 8021b38:	2800      	cmp	r0, #0
 8021b3a:	f040 8296 	bne.w	802206a <_dtoa_r+0x992>
 8021b3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8021b42:	4630      	mov	r0, r6
 8021b44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021b48:	4639      	mov	r1, r7
 8021b4a:	f7ee fef7 	bl	801093c <__aeabi_dcmplt>
 8021b4e:	2800      	cmp	r0, #0
 8021b50:	f040 8288 	bne.w	8022064 <_dtoa_r+0x98c>
 8021b54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8021b58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8021b5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	f2c0 8158 	blt.w	8021e14 <_dtoa_r+0x73c>
 8021b64:	f1ba 0f0e 	cmp.w	sl, #14
 8021b68:	f300 8154 	bgt.w	8021e14 <_dtoa_r+0x73c>
 8021b6c:	4b6b      	ldr	r3, [pc, #428]	; (8021d1c <_dtoa_r+0x644>)
 8021b6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8021b72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	f280 80e3 	bge.w	8021d44 <_dtoa_r+0x66c>
 8021b7e:	9b01      	ldr	r3, [sp, #4]
 8021b80:	2b00      	cmp	r3, #0
 8021b82:	f300 80df 	bgt.w	8021d44 <_dtoa_r+0x66c>
 8021b86:	f040 826d 	bne.w	8022064 <_dtoa_r+0x98c>
 8021b8a:	4b69      	ldr	r3, [pc, #420]	; (8021d30 <_dtoa_r+0x658>)
 8021b8c:	2200      	movs	r2, #0
 8021b8e:	4640      	mov	r0, r8
 8021b90:	4649      	mov	r1, r9
 8021b92:	f7ee fc61 	bl	8010458 <__aeabi_dmul>
 8021b96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8021b9a:	f7ee fee3 	bl	8010964 <__aeabi_dcmpge>
 8021b9e:	9e01      	ldr	r6, [sp, #4]
 8021ba0:	4637      	mov	r7, r6
 8021ba2:	2800      	cmp	r0, #0
 8021ba4:	f040 8243 	bne.w	802202e <_dtoa_r+0x956>
 8021ba8:	9d00      	ldr	r5, [sp, #0]
 8021baa:	2331      	movs	r3, #49	; 0x31
 8021bac:	f805 3b01 	strb.w	r3, [r5], #1
 8021bb0:	f10a 0a01 	add.w	sl, sl, #1
 8021bb4:	e23f      	b.n	8022036 <_dtoa_r+0x95e>
 8021bb6:	07f2      	lsls	r2, r6, #31
 8021bb8:	d505      	bpl.n	8021bc6 <_dtoa_r+0x4ee>
 8021bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021bbe:	f7ee fc4b 	bl	8010458 <__aeabi_dmul>
 8021bc2:	3501      	adds	r5, #1
 8021bc4:	2301      	movs	r3, #1
 8021bc6:	1076      	asrs	r6, r6, #1
 8021bc8:	3708      	adds	r7, #8
 8021bca:	e76c      	b.n	8021aa6 <_dtoa_r+0x3ce>
 8021bcc:	2502      	movs	r5, #2
 8021bce:	e76f      	b.n	8021ab0 <_dtoa_r+0x3d8>
 8021bd0:	9b01      	ldr	r3, [sp, #4]
 8021bd2:	f8cd a01c 	str.w	sl, [sp, #28]
 8021bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8021bd8:	e78d      	b.n	8021af6 <_dtoa_r+0x41e>
 8021bda:	9900      	ldr	r1, [sp, #0]
 8021bdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021be0:	4b4e      	ldr	r3, [pc, #312]	; (8021d1c <_dtoa_r+0x644>)
 8021be2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021be6:	4401      	add	r1, r0
 8021be8:	9102      	str	r1, [sp, #8]
 8021bea:	9908      	ldr	r1, [sp, #32]
 8021bec:	eeb0 8a47 	vmov.f32	s16, s14
 8021bf0:	eef0 8a67 	vmov.f32	s17, s15
 8021bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021bf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8021bfc:	2900      	cmp	r1, #0
 8021bfe:	d045      	beq.n	8021c8c <_dtoa_r+0x5b4>
 8021c00:	494c      	ldr	r1, [pc, #304]	; (8021d34 <_dtoa_r+0x65c>)
 8021c02:	2000      	movs	r0, #0
 8021c04:	f7ee fd52 	bl	80106ac <__aeabi_ddiv>
 8021c08:	ec53 2b18 	vmov	r2, r3, d8
 8021c0c:	f7ee fa6c 	bl	80100e8 <__aeabi_dsub>
 8021c10:	9d00      	ldr	r5, [sp, #0]
 8021c12:	ec41 0b18 	vmov	d8, r0, r1
 8021c16:	4639      	mov	r1, r7
 8021c18:	4630      	mov	r0, r6
 8021c1a:	f7ee feb7 	bl	801098c <__aeabi_d2iz>
 8021c1e:	900c      	str	r0, [sp, #48]	; 0x30
 8021c20:	f7ee fbb0 	bl	8010384 <__aeabi_i2d>
 8021c24:	4602      	mov	r2, r0
 8021c26:	460b      	mov	r3, r1
 8021c28:	4630      	mov	r0, r6
 8021c2a:	4639      	mov	r1, r7
 8021c2c:	f7ee fa5c 	bl	80100e8 <__aeabi_dsub>
 8021c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c32:	3330      	adds	r3, #48	; 0x30
 8021c34:	f805 3b01 	strb.w	r3, [r5], #1
 8021c38:	ec53 2b18 	vmov	r2, r3, d8
 8021c3c:	4606      	mov	r6, r0
 8021c3e:	460f      	mov	r7, r1
 8021c40:	f7ee fe7c 	bl	801093c <__aeabi_dcmplt>
 8021c44:	2800      	cmp	r0, #0
 8021c46:	d165      	bne.n	8021d14 <_dtoa_r+0x63c>
 8021c48:	4632      	mov	r2, r6
 8021c4a:	463b      	mov	r3, r7
 8021c4c:	4935      	ldr	r1, [pc, #212]	; (8021d24 <_dtoa_r+0x64c>)
 8021c4e:	2000      	movs	r0, #0
 8021c50:	f7ee fa4a 	bl	80100e8 <__aeabi_dsub>
 8021c54:	ec53 2b18 	vmov	r2, r3, d8
 8021c58:	f7ee fe70 	bl	801093c <__aeabi_dcmplt>
 8021c5c:	2800      	cmp	r0, #0
 8021c5e:	f040 80b9 	bne.w	8021dd4 <_dtoa_r+0x6fc>
 8021c62:	9b02      	ldr	r3, [sp, #8]
 8021c64:	429d      	cmp	r5, r3
 8021c66:	f43f af75 	beq.w	8021b54 <_dtoa_r+0x47c>
 8021c6a:	4b2f      	ldr	r3, [pc, #188]	; (8021d28 <_dtoa_r+0x650>)
 8021c6c:	ec51 0b18 	vmov	r0, r1, d8
 8021c70:	2200      	movs	r2, #0
 8021c72:	f7ee fbf1 	bl	8010458 <__aeabi_dmul>
 8021c76:	4b2c      	ldr	r3, [pc, #176]	; (8021d28 <_dtoa_r+0x650>)
 8021c78:	ec41 0b18 	vmov	d8, r0, r1
 8021c7c:	2200      	movs	r2, #0
 8021c7e:	4630      	mov	r0, r6
 8021c80:	4639      	mov	r1, r7
 8021c82:	f7ee fbe9 	bl	8010458 <__aeabi_dmul>
 8021c86:	4606      	mov	r6, r0
 8021c88:	460f      	mov	r7, r1
 8021c8a:	e7c4      	b.n	8021c16 <_dtoa_r+0x53e>
 8021c8c:	ec51 0b17 	vmov	r0, r1, d7
 8021c90:	f7ee fbe2 	bl	8010458 <__aeabi_dmul>
 8021c94:	9b02      	ldr	r3, [sp, #8]
 8021c96:	9d00      	ldr	r5, [sp, #0]
 8021c98:	930c      	str	r3, [sp, #48]	; 0x30
 8021c9a:	ec41 0b18 	vmov	d8, r0, r1
 8021c9e:	4639      	mov	r1, r7
 8021ca0:	4630      	mov	r0, r6
 8021ca2:	f7ee fe73 	bl	801098c <__aeabi_d2iz>
 8021ca6:	9011      	str	r0, [sp, #68]	; 0x44
 8021ca8:	f7ee fb6c 	bl	8010384 <__aeabi_i2d>
 8021cac:	4602      	mov	r2, r0
 8021cae:	460b      	mov	r3, r1
 8021cb0:	4630      	mov	r0, r6
 8021cb2:	4639      	mov	r1, r7
 8021cb4:	f7ee fa18 	bl	80100e8 <__aeabi_dsub>
 8021cb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021cba:	3330      	adds	r3, #48	; 0x30
 8021cbc:	f805 3b01 	strb.w	r3, [r5], #1
 8021cc0:	9b02      	ldr	r3, [sp, #8]
 8021cc2:	429d      	cmp	r5, r3
 8021cc4:	4606      	mov	r6, r0
 8021cc6:	460f      	mov	r7, r1
 8021cc8:	f04f 0200 	mov.w	r2, #0
 8021ccc:	d134      	bne.n	8021d38 <_dtoa_r+0x660>
 8021cce:	4b19      	ldr	r3, [pc, #100]	; (8021d34 <_dtoa_r+0x65c>)
 8021cd0:	ec51 0b18 	vmov	r0, r1, d8
 8021cd4:	f7ee fa0a 	bl	80100ec <__adddf3>
 8021cd8:	4602      	mov	r2, r0
 8021cda:	460b      	mov	r3, r1
 8021cdc:	4630      	mov	r0, r6
 8021cde:	4639      	mov	r1, r7
 8021ce0:	f7ee fe4a 	bl	8010978 <__aeabi_dcmpgt>
 8021ce4:	2800      	cmp	r0, #0
 8021ce6:	d175      	bne.n	8021dd4 <_dtoa_r+0x6fc>
 8021ce8:	ec53 2b18 	vmov	r2, r3, d8
 8021cec:	4911      	ldr	r1, [pc, #68]	; (8021d34 <_dtoa_r+0x65c>)
 8021cee:	2000      	movs	r0, #0
 8021cf0:	f7ee f9fa 	bl	80100e8 <__aeabi_dsub>
 8021cf4:	4602      	mov	r2, r0
 8021cf6:	460b      	mov	r3, r1
 8021cf8:	4630      	mov	r0, r6
 8021cfa:	4639      	mov	r1, r7
 8021cfc:	f7ee fe1e 	bl	801093c <__aeabi_dcmplt>
 8021d00:	2800      	cmp	r0, #0
 8021d02:	f43f af27 	beq.w	8021b54 <_dtoa_r+0x47c>
 8021d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021d08:	1e6b      	subs	r3, r5, #1
 8021d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8021d0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021d10:	2b30      	cmp	r3, #48	; 0x30
 8021d12:	d0f8      	beq.n	8021d06 <_dtoa_r+0x62e>
 8021d14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021d18:	e04a      	b.n	8021db0 <_dtoa_r+0x6d8>
 8021d1a:	bf00      	nop
 8021d1c:	0802a6f8 	.word	0x0802a6f8
 8021d20:	0802a6d0 	.word	0x0802a6d0
 8021d24:	3ff00000 	.word	0x3ff00000
 8021d28:	40240000 	.word	0x40240000
 8021d2c:	401c0000 	.word	0x401c0000
 8021d30:	40140000 	.word	0x40140000
 8021d34:	3fe00000 	.word	0x3fe00000
 8021d38:	4baf      	ldr	r3, [pc, #700]	; (8021ff8 <_dtoa_r+0x920>)
 8021d3a:	f7ee fb8d 	bl	8010458 <__aeabi_dmul>
 8021d3e:	4606      	mov	r6, r0
 8021d40:	460f      	mov	r7, r1
 8021d42:	e7ac      	b.n	8021c9e <_dtoa_r+0x5c6>
 8021d44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021d48:	9d00      	ldr	r5, [sp, #0]
 8021d4a:	4642      	mov	r2, r8
 8021d4c:	464b      	mov	r3, r9
 8021d4e:	4630      	mov	r0, r6
 8021d50:	4639      	mov	r1, r7
 8021d52:	f7ee fcab 	bl	80106ac <__aeabi_ddiv>
 8021d56:	f7ee fe19 	bl	801098c <__aeabi_d2iz>
 8021d5a:	9002      	str	r0, [sp, #8]
 8021d5c:	f7ee fb12 	bl	8010384 <__aeabi_i2d>
 8021d60:	4642      	mov	r2, r8
 8021d62:	464b      	mov	r3, r9
 8021d64:	f7ee fb78 	bl	8010458 <__aeabi_dmul>
 8021d68:	4602      	mov	r2, r0
 8021d6a:	460b      	mov	r3, r1
 8021d6c:	4630      	mov	r0, r6
 8021d6e:	4639      	mov	r1, r7
 8021d70:	f7ee f9ba 	bl	80100e8 <__aeabi_dsub>
 8021d74:	9e02      	ldr	r6, [sp, #8]
 8021d76:	9f01      	ldr	r7, [sp, #4]
 8021d78:	3630      	adds	r6, #48	; 0x30
 8021d7a:	f805 6b01 	strb.w	r6, [r5], #1
 8021d7e:	9e00      	ldr	r6, [sp, #0]
 8021d80:	1bae      	subs	r6, r5, r6
 8021d82:	42b7      	cmp	r7, r6
 8021d84:	4602      	mov	r2, r0
 8021d86:	460b      	mov	r3, r1
 8021d88:	d137      	bne.n	8021dfa <_dtoa_r+0x722>
 8021d8a:	f7ee f9af 	bl	80100ec <__adddf3>
 8021d8e:	4642      	mov	r2, r8
 8021d90:	464b      	mov	r3, r9
 8021d92:	4606      	mov	r6, r0
 8021d94:	460f      	mov	r7, r1
 8021d96:	f7ee fdef 	bl	8010978 <__aeabi_dcmpgt>
 8021d9a:	b9c8      	cbnz	r0, 8021dd0 <_dtoa_r+0x6f8>
 8021d9c:	4642      	mov	r2, r8
 8021d9e:	464b      	mov	r3, r9
 8021da0:	4630      	mov	r0, r6
 8021da2:	4639      	mov	r1, r7
 8021da4:	f7ee fdc0 	bl	8010928 <__aeabi_dcmpeq>
 8021da8:	b110      	cbz	r0, 8021db0 <_dtoa_r+0x6d8>
 8021daa:	9b02      	ldr	r3, [sp, #8]
 8021dac:	07d9      	lsls	r1, r3, #31
 8021dae:	d40f      	bmi.n	8021dd0 <_dtoa_r+0x6f8>
 8021db0:	4620      	mov	r0, r4
 8021db2:	4659      	mov	r1, fp
 8021db4:	f7fe fee0 	bl	8020b78 <_Bfree>
 8021db8:	2300      	movs	r3, #0
 8021dba:	702b      	strb	r3, [r5, #0]
 8021dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021dbe:	f10a 0001 	add.w	r0, sl, #1
 8021dc2:	6018      	str	r0, [r3, #0]
 8021dc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	f43f acd8 	beq.w	802177c <_dtoa_r+0xa4>
 8021dcc:	601d      	str	r5, [r3, #0]
 8021dce:	e4d5      	b.n	802177c <_dtoa_r+0xa4>
 8021dd0:	f8cd a01c 	str.w	sl, [sp, #28]
 8021dd4:	462b      	mov	r3, r5
 8021dd6:	461d      	mov	r5, r3
 8021dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021ddc:	2a39      	cmp	r2, #57	; 0x39
 8021dde:	d108      	bne.n	8021df2 <_dtoa_r+0x71a>
 8021de0:	9a00      	ldr	r2, [sp, #0]
 8021de2:	429a      	cmp	r2, r3
 8021de4:	d1f7      	bne.n	8021dd6 <_dtoa_r+0x6fe>
 8021de6:	9a07      	ldr	r2, [sp, #28]
 8021de8:	9900      	ldr	r1, [sp, #0]
 8021dea:	3201      	adds	r2, #1
 8021dec:	9207      	str	r2, [sp, #28]
 8021dee:	2230      	movs	r2, #48	; 0x30
 8021df0:	700a      	strb	r2, [r1, #0]
 8021df2:	781a      	ldrb	r2, [r3, #0]
 8021df4:	3201      	adds	r2, #1
 8021df6:	701a      	strb	r2, [r3, #0]
 8021df8:	e78c      	b.n	8021d14 <_dtoa_r+0x63c>
 8021dfa:	4b7f      	ldr	r3, [pc, #508]	; (8021ff8 <_dtoa_r+0x920>)
 8021dfc:	2200      	movs	r2, #0
 8021dfe:	f7ee fb2b 	bl	8010458 <__aeabi_dmul>
 8021e02:	2200      	movs	r2, #0
 8021e04:	2300      	movs	r3, #0
 8021e06:	4606      	mov	r6, r0
 8021e08:	460f      	mov	r7, r1
 8021e0a:	f7ee fd8d 	bl	8010928 <__aeabi_dcmpeq>
 8021e0e:	2800      	cmp	r0, #0
 8021e10:	d09b      	beq.n	8021d4a <_dtoa_r+0x672>
 8021e12:	e7cd      	b.n	8021db0 <_dtoa_r+0x6d8>
 8021e14:	9a08      	ldr	r2, [sp, #32]
 8021e16:	2a00      	cmp	r2, #0
 8021e18:	f000 80c4 	beq.w	8021fa4 <_dtoa_r+0x8cc>
 8021e1c:	9a05      	ldr	r2, [sp, #20]
 8021e1e:	2a01      	cmp	r2, #1
 8021e20:	f300 80a8 	bgt.w	8021f74 <_dtoa_r+0x89c>
 8021e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e26:	2a00      	cmp	r2, #0
 8021e28:	f000 80a0 	beq.w	8021f6c <_dtoa_r+0x894>
 8021e2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8021e30:	9e06      	ldr	r6, [sp, #24]
 8021e32:	4645      	mov	r5, r8
 8021e34:	9a04      	ldr	r2, [sp, #16]
 8021e36:	2101      	movs	r1, #1
 8021e38:	441a      	add	r2, r3
 8021e3a:	4620      	mov	r0, r4
 8021e3c:	4498      	add	r8, r3
 8021e3e:	9204      	str	r2, [sp, #16]
 8021e40:	f7fe ff56 	bl	8020cf0 <__i2b>
 8021e44:	4607      	mov	r7, r0
 8021e46:	2d00      	cmp	r5, #0
 8021e48:	dd0b      	ble.n	8021e62 <_dtoa_r+0x78a>
 8021e4a:	9b04      	ldr	r3, [sp, #16]
 8021e4c:	2b00      	cmp	r3, #0
 8021e4e:	dd08      	ble.n	8021e62 <_dtoa_r+0x78a>
 8021e50:	42ab      	cmp	r3, r5
 8021e52:	9a04      	ldr	r2, [sp, #16]
 8021e54:	bfa8      	it	ge
 8021e56:	462b      	movge	r3, r5
 8021e58:	eba8 0803 	sub.w	r8, r8, r3
 8021e5c:	1aed      	subs	r5, r5, r3
 8021e5e:	1ad3      	subs	r3, r2, r3
 8021e60:	9304      	str	r3, [sp, #16]
 8021e62:	9b06      	ldr	r3, [sp, #24]
 8021e64:	b1fb      	cbz	r3, 8021ea6 <_dtoa_r+0x7ce>
 8021e66:	9b08      	ldr	r3, [sp, #32]
 8021e68:	2b00      	cmp	r3, #0
 8021e6a:	f000 809f 	beq.w	8021fac <_dtoa_r+0x8d4>
 8021e6e:	2e00      	cmp	r6, #0
 8021e70:	dd11      	ble.n	8021e96 <_dtoa_r+0x7be>
 8021e72:	4639      	mov	r1, r7
 8021e74:	4632      	mov	r2, r6
 8021e76:	4620      	mov	r0, r4
 8021e78:	f7fe fff6 	bl	8020e68 <__pow5mult>
 8021e7c:	465a      	mov	r2, fp
 8021e7e:	4601      	mov	r1, r0
 8021e80:	4607      	mov	r7, r0
 8021e82:	4620      	mov	r0, r4
 8021e84:	f7fe ff4a 	bl	8020d1c <__multiply>
 8021e88:	4659      	mov	r1, fp
 8021e8a:	9007      	str	r0, [sp, #28]
 8021e8c:	4620      	mov	r0, r4
 8021e8e:	f7fe fe73 	bl	8020b78 <_Bfree>
 8021e92:	9b07      	ldr	r3, [sp, #28]
 8021e94:	469b      	mov	fp, r3
 8021e96:	9b06      	ldr	r3, [sp, #24]
 8021e98:	1b9a      	subs	r2, r3, r6
 8021e9a:	d004      	beq.n	8021ea6 <_dtoa_r+0x7ce>
 8021e9c:	4659      	mov	r1, fp
 8021e9e:	4620      	mov	r0, r4
 8021ea0:	f7fe ffe2 	bl	8020e68 <__pow5mult>
 8021ea4:	4683      	mov	fp, r0
 8021ea6:	2101      	movs	r1, #1
 8021ea8:	4620      	mov	r0, r4
 8021eaa:	f7fe ff21 	bl	8020cf0 <__i2b>
 8021eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	4606      	mov	r6, r0
 8021eb4:	dd7c      	ble.n	8021fb0 <_dtoa_r+0x8d8>
 8021eb6:	461a      	mov	r2, r3
 8021eb8:	4601      	mov	r1, r0
 8021eba:	4620      	mov	r0, r4
 8021ebc:	f7fe ffd4 	bl	8020e68 <__pow5mult>
 8021ec0:	9b05      	ldr	r3, [sp, #20]
 8021ec2:	2b01      	cmp	r3, #1
 8021ec4:	4606      	mov	r6, r0
 8021ec6:	dd76      	ble.n	8021fb6 <_dtoa_r+0x8de>
 8021ec8:	2300      	movs	r3, #0
 8021eca:	9306      	str	r3, [sp, #24]
 8021ecc:	6933      	ldr	r3, [r6, #16]
 8021ece:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021ed2:	6918      	ldr	r0, [r3, #16]
 8021ed4:	f7fe febc 	bl	8020c50 <__hi0bits>
 8021ed8:	f1c0 0020 	rsb	r0, r0, #32
 8021edc:	9b04      	ldr	r3, [sp, #16]
 8021ede:	4418      	add	r0, r3
 8021ee0:	f010 001f 	ands.w	r0, r0, #31
 8021ee4:	f000 8086 	beq.w	8021ff4 <_dtoa_r+0x91c>
 8021ee8:	f1c0 0320 	rsb	r3, r0, #32
 8021eec:	2b04      	cmp	r3, #4
 8021eee:	dd7f      	ble.n	8021ff0 <_dtoa_r+0x918>
 8021ef0:	f1c0 001c 	rsb	r0, r0, #28
 8021ef4:	9b04      	ldr	r3, [sp, #16]
 8021ef6:	4403      	add	r3, r0
 8021ef8:	4480      	add	r8, r0
 8021efa:	4405      	add	r5, r0
 8021efc:	9304      	str	r3, [sp, #16]
 8021efe:	f1b8 0f00 	cmp.w	r8, #0
 8021f02:	dd05      	ble.n	8021f10 <_dtoa_r+0x838>
 8021f04:	4659      	mov	r1, fp
 8021f06:	4642      	mov	r2, r8
 8021f08:	4620      	mov	r0, r4
 8021f0a:	f7ff f807 	bl	8020f1c <__lshift>
 8021f0e:	4683      	mov	fp, r0
 8021f10:	9b04      	ldr	r3, [sp, #16]
 8021f12:	2b00      	cmp	r3, #0
 8021f14:	dd05      	ble.n	8021f22 <_dtoa_r+0x84a>
 8021f16:	4631      	mov	r1, r6
 8021f18:	461a      	mov	r2, r3
 8021f1a:	4620      	mov	r0, r4
 8021f1c:	f7fe fffe 	bl	8020f1c <__lshift>
 8021f20:	4606      	mov	r6, r0
 8021f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	d069      	beq.n	8021ffc <_dtoa_r+0x924>
 8021f28:	4631      	mov	r1, r6
 8021f2a:	4658      	mov	r0, fp
 8021f2c:	f7ff f862 	bl	8020ff4 <__mcmp>
 8021f30:	2800      	cmp	r0, #0
 8021f32:	da63      	bge.n	8021ffc <_dtoa_r+0x924>
 8021f34:	2300      	movs	r3, #0
 8021f36:	4659      	mov	r1, fp
 8021f38:	220a      	movs	r2, #10
 8021f3a:	4620      	mov	r0, r4
 8021f3c:	f7fe fe3e 	bl	8020bbc <__multadd>
 8021f40:	9b08      	ldr	r3, [sp, #32]
 8021f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021f46:	4683      	mov	fp, r0
 8021f48:	2b00      	cmp	r3, #0
 8021f4a:	f000 818f 	beq.w	802226c <_dtoa_r+0xb94>
 8021f4e:	4639      	mov	r1, r7
 8021f50:	2300      	movs	r3, #0
 8021f52:	220a      	movs	r2, #10
 8021f54:	4620      	mov	r0, r4
 8021f56:	f7fe fe31 	bl	8020bbc <__multadd>
 8021f5a:	f1b9 0f00 	cmp.w	r9, #0
 8021f5e:	4607      	mov	r7, r0
 8021f60:	f300 808e 	bgt.w	8022080 <_dtoa_r+0x9a8>
 8021f64:	9b05      	ldr	r3, [sp, #20]
 8021f66:	2b02      	cmp	r3, #2
 8021f68:	dc50      	bgt.n	802200c <_dtoa_r+0x934>
 8021f6a:	e089      	b.n	8022080 <_dtoa_r+0x9a8>
 8021f6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021f6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021f72:	e75d      	b.n	8021e30 <_dtoa_r+0x758>
 8021f74:	9b01      	ldr	r3, [sp, #4]
 8021f76:	1e5e      	subs	r6, r3, #1
 8021f78:	9b06      	ldr	r3, [sp, #24]
 8021f7a:	42b3      	cmp	r3, r6
 8021f7c:	bfbf      	itttt	lt
 8021f7e:	9b06      	ldrlt	r3, [sp, #24]
 8021f80:	9606      	strlt	r6, [sp, #24]
 8021f82:	1af2      	sublt	r2, r6, r3
 8021f84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8021f86:	bfb6      	itet	lt
 8021f88:	189b      	addlt	r3, r3, r2
 8021f8a:	1b9e      	subge	r6, r3, r6
 8021f8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8021f8e:	9b01      	ldr	r3, [sp, #4]
 8021f90:	bfb8      	it	lt
 8021f92:	2600      	movlt	r6, #0
 8021f94:	2b00      	cmp	r3, #0
 8021f96:	bfb5      	itete	lt
 8021f98:	eba8 0503 	sublt.w	r5, r8, r3
 8021f9c:	9b01      	ldrge	r3, [sp, #4]
 8021f9e:	2300      	movlt	r3, #0
 8021fa0:	4645      	movge	r5, r8
 8021fa2:	e747      	b.n	8021e34 <_dtoa_r+0x75c>
 8021fa4:	9e06      	ldr	r6, [sp, #24]
 8021fa6:	9f08      	ldr	r7, [sp, #32]
 8021fa8:	4645      	mov	r5, r8
 8021faa:	e74c      	b.n	8021e46 <_dtoa_r+0x76e>
 8021fac:	9a06      	ldr	r2, [sp, #24]
 8021fae:	e775      	b.n	8021e9c <_dtoa_r+0x7c4>
 8021fb0:	9b05      	ldr	r3, [sp, #20]
 8021fb2:	2b01      	cmp	r3, #1
 8021fb4:	dc18      	bgt.n	8021fe8 <_dtoa_r+0x910>
 8021fb6:	9b02      	ldr	r3, [sp, #8]
 8021fb8:	b9b3      	cbnz	r3, 8021fe8 <_dtoa_r+0x910>
 8021fba:	9b03      	ldr	r3, [sp, #12]
 8021fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021fc0:	b9a3      	cbnz	r3, 8021fec <_dtoa_r+0x914>
 8021fc2:	9b03      	ldr	r3, [sp, #12]
 8021fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021fc8:	0d1b      	lsrs	r3, r3, #20
 8021fca:	051b      	lsls	r3, r3, #20
 8021fcc:	b12b      	cbz	r3, 8021fda <_dtoa_r+0x902>
 8021fce:	9b04      	ldr	r3, [sp, #16]
 8021fd0:	3301      	adds	r3, #1
 8021fd2:	9304      	str	r3, [sp, #16]
 8021fd4:	f108 0801 	add.w	r8, r8, #1
 8021fd8:	2301      	movs	r3, #1
 8021fda:	9306      	str	r3, [sp, #24]
 8021fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	f47f af74 	bne.w	8021ecc <_dtoa_r+0x7f4>
 8021fe4:	2001      	movs	r0, #1
 8021fe6:	e779      	b.n	8021edc <_dtoa_r+0x804>
 8021fe8:	2300      	movs	r3, #0
 8021fea:	e7f6      	b.n	8021fda <_dtoa_r+0x902>
 8021fec:	9b02      	ldr	r3, [sp, #8]
 8021fee:	e7f4      	b.n	8021fda <_dtoa_r+0x902>
 8021ff0:	d085      	beq.n	8021efe <_dtoa_r+0x826>
 8021ff2:	4618      	mov	r0, r3
 8021ff4:	301c      	adds	r0, #28
 8021ff6:	e77d      	b.n	8021ef4 <_dtoa_r+0x81c>
 8021ff8:	40240000 	.word	0x40240000
 8021ffc:	9b01      	ldr	r3, [sp, #4]
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	dc38      	bgt.n	8022074 <_dtoa_r+0x99c>
 8022002:	9b05      	ldr	r3, [sp, #20]
 8022004:	2b02      	cmp	r3, #2
 8022006:	dd35      	ble.n	8022074 <_dtoa_r+0x99c>
 8022008:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802200c:	f1b9 0f00 	cmp.w	r9, #0
 8022010:	d10d      	bne.n	802202e <_dtoa_r+0x956>
 8022012:	4631      	mov	r1, r6
 8022014:	464b      	mov	r3, r9
 8022016:	2205      	movs	r2, #5
 8022018:	4620      	mov	r0, r4
 802201a:	f7fe fdcf 	bl	8020bbc <__multadd>
 802201e:	4601      	mov	r1, r0
 8022020:	4606      	mov	r6, r0
 8022022:	4658      	mov	r0, fp
 8022024:	f7fe ffe6 	bl	8020ff4 <__mcmp>
 8022028:	2800      	cmp	r0, #0
 802202a:	f73f adbd 	bgt.w	8021ba8 <_dtoa_r+0x4d0>
 802202e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022030:	9d00      	ldr	r5, [sp, #0]
 8022032:	ea6f 0a03 	mvn.w	sl, r3
 8022036:	f04f 0800 	mov.w	r8, #0
 802203a:	4631      	mov	r1, r6
 802203c:	4620      	mov	r0, r4
 802203e:	f7fe fd9b 	bl	8020b78 <_Bfree>
 8022042:	2f00      	cmp	r7, #0
 8022044:	f43f aeb4 	beq.w	8021db0 <_dtoa_r+0x6d8>
 8022048:	f1b8 0f00 	cmp.w	r8, #0
 802204c:	d005      	beq.n	802205a <_dtoa_r+0x982>
 802204e:	45b8      	cmp	r8, r7
 8022050:	d003      	beq.n	802205a <_dtoa_r+0x982>
 8022052:	4641      	mov	r1, r8
 8022054:	4620      	mov	r0, r4
 8022056:	f7fe fd8f 	bl	8020b78 <_Bfree>
 802205a:	4639      	mov	r1, r7
 802205c:	4620      	mov	r0, r4
 802205e:	f7fe fd8b 	bl	8020b78 <_Bfree>
 8022062:	e6a5      	b.n	8021db0 <_dtoa_r+0x6d8>
 8022064:	2600      	movs	r6, #0
 8022066:	4637      	mov	r7, r6
 8022068:	e7e1      	b.n	802202e <_dtoa_r+0x956>
 802206a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802206c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8022070:	4637      	mov	r7, r6
 8022072:	e599      	b.n	8021ba8 <_dtoa_r+0x4d0>
 8022074:	9b08      	ldr	r3, [sp, #32]
 8022076:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802207a:	2b00      	cmp	r3, #0
 802207c:	f000 80fd 	beq.w	802227a <_dtoa_r+0xba2>
 8022080:	2d00      	cmp	r5, #0
 8022082:	dd05      	ble.n	8022090 <_dtoa_r+0x9b8>
 8022084:	4639      	mov	r1, r7
 8022086:	462a      	mov	r2, r5
 8022088:	4620      	mov	r0, r4
 802208a:	f7fe ff47 	bl	8020f1c <__lshift>
 802208e:	4607      	mov	r7, r0
 8022090:	9b06      	ldr	r3, [sp, #24]
 8022092:	2b00      	cmp	r3, #0
 8022094:	d05c      	beq.n	8022150 <_dtoa_r+0xa78>
 8022096:	6879      	ldr	r1, [r7, #4]
 8022098:	4620      	mov	r0, r4
 802209a:	f7fe fd2d 	bl	8020af8 <_Balloc>
 802209e:	4605      	mov	r5, r0
 80220a0:	b928      	cbnz	r0, 80220ae <_dtoa_r+0x9d6>
 80220a2:	4b80      	ldr	r3, [pc, #512]	; (80222a4 <_dtoa_r+0xbcc>)
 80220a4:	4602      	mov	r2, r0
 80220a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80220aa:	f7ff bb2e 	b.w	802170a <_dtoa_r+0x32>
 80220ae:	693a      	ldr	r2, [r7, #16]
 80220b0:	3202      	adds	r2, #2
 80220b2:	0092      	lsls	r2, r2, #2
 80220b4:	f107 010c 	add.w	r1, r7, #12
 80220b8:	300c      	adds	r0, #12
 80220ba:	f7fe fa95 	bl	80205e8 <memcpy>
 80220be:	2201      	movs	r2, #1
 80220c0:	4629      	mov	r1, r5
 80220c2:	4620      	mov	r0, r4
 80220c4:	f7fe ff2a 	bl	8020f1c <__lshift>
 80220c8:	9b00      	ldr	r3, [sp, #0]
 80220ca:	3301      	adds	r3, #1
 80220cc:	9301      	str	r3, [sp, #4]
 80220ce:	9b00      	ldr	r3, [sp, #0]
 80220d0:	444b      	add	r3, r9
 80220d2:	9307      	str	r3, [sp, #28]
 80220d4:	9b02      	ldr	r3, [sp, #8]
 80220d6:	f003 0301 	and.w	r3, r3, #1
 80220da:	46b8      	mov	r8, r7
 80220dc:	9306      	str	r3, [sp, #24]
 80220de:	4607      	mov	r7, r0
 80220e0:	9b01      	ldr	r3, [sp, #4]
 80220e2:	4631      	mov	r1, r6
 80220e4:	3b01      	subs	r3, #1
 80220e6:	4658      	mov	r0, fp
 80220e8:	9302      	str	r3, [sp, #8]
 80220ea:	f7ff fa67 	bl	80215bc <quorem>
 80220ee:	4603      	mov	r3, r0
 80220f0:	3330      	adds	r3, #48	; 0x30
 80220f2:	9004      	str	r0, [sp, #16]
 80220f4:	4641      	mov	r1, r8
 80220f6:	4658      	mov	r0, fp
 80220f8:	9308      	str	r3, [sp, #32]
 80220fa:	f7fe ff7b 	bl	8020ff4 <__mcmp>
 80220fe:	463a      	mov	r2, r7
 8022100:	4681      	mov	r9, r0
 8022102:	4631      	mov	r1, r6
 8022104:	4620      	mov	r0, r4
 8022106:	f7fe ff91 	bl	802102c <__mdiff>
 802210a:	68c2      	ldr	r2, [r0, #12]
 802210c:	9b08      	ldr	r3, [sp, #32]
 802210e:	4605      	mov	r5, r0
 8022110:	bb02      	cbnz	r2, 8022154 <_dtoa_r+0xa7c>
 8022112:	4601      	mov	r1, r0
 8022114:	4658      	mov	r0, fp
 8022116:	f7fe ff6d 	bl	8020ff4 <__mcmp>
 802211a:	9b08      	ldr	r3, [sp, #32]
 802211c:	4602      	mov	r2, r0
 802211e:	4629      	mov	r1, r5
 8022120:	4620      	mov	r0, r4
 8022122:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8022126:	f7fe fd27 	bl	8020b78 <_Bfree>
 802212a:	9b05      	ldr	r3, [sp, #20]
 802212c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802212e:	9d01      	ldr	r5, [sp, #4]
 8022130:	ea43 0102 	orr.w	r1, r3, r2
 8022134:	9b06      	ldr	r3, [sp, #24]
 8022136:	430b      	orrs	r3, r1
 8022138:	9b08      	ldr	r3, [sp, #32]
 802213a:	d10d      	bne.n	8022158 <_dtoa_r+0xa80>
 802213c:	2b39      	cmp	r3, #57	; 0x39
 802213e:	d029      	beq.n	8022194 <_dtoa_r+0xabc>
 8022140:	f1b9 0f00 	cmp.w	r9, #0
 8022144:	dd01      	ble.n	802214a <_dtoa_r+0xa72>
 8022146:	9b04      	ldr	r3, [sp, #16]
 8022148:	3331      	adds	r3, #49	; 0x31
 802214a:	9a02      	ldr	r2, [sp, #8]
 802214c:	7013      	strb	r3, [r2, #0]
 802214e:	e774      	b.n	802203a <_dtoa_r+0x962>
 8022150:	4638      	mov	r0, r7
 8022152:	e7b9      	b.n	80220c8 <_dtoa_r+0x9f0>
 8022154:	2201      	movs	r2, #1
 8022156:	e7e2      	b.n	802211e <_dtoa_r+0xa46>
 8022158:	f1b9 0f00 	cmp.w	r9, #0
 802215c:	db06      	blt.n	802216c <_dtoa_r+0xa94>
 802215e:	9905      	ldr	r1, [sp, #20]
 8022160:	ea41 0909 	orr.w	r9, r1, r9
 8022164:	9906      	ldr	r1, [sp, #24]
 8022166:	ea59 0101 	orrs.w	r1, r9, r1
 802216a:	d120      	bne.n	80221ae <_dtoa_r+0xad6>
 802216c:	2a00      	cmp	r2, #0
 802216e:	ddec      	ble.n	802214a <_dtoa_r+0xa72>
 8022170:	4659      	mov	r1, fp
 8022172:	2201      	movs	r2, #1
 8022174:	4620      	mov	r0, r4
 8022176:	9301      	str	r3, [sp, #4]
 8022178:	f7fe fed0 	bl	8020f1c <__lshift>
 802217c:	4631      	mov	r1, r6
 802217e:	4683      	mov	fp, r0
 8022180:	f7fe ff38 	bl	8020ff4 <__mcmp>
 8022184:	2800      	cmp	r0, #0
 8022186:	9b01      	ldr	r3, [sp, #4]
 8022188:	dc02      	bgt.n	8022190 <_dtoa_r+0xab8>
 802218a:	d1de      	bne.n	802214a <_dtoa_r+0xa72>
 802218c:	07da      	lsls	r2, r3, #31
 802218e:	d5dc      	bpl.n	802214a <_dtoa_r+0xa72>
 8022190:	2b39      	cmp	r3, #57	; 0x39
 8022192:	d1d8      	bne.n	8022146 <_dtoa_r+0xa6e>
 8022194:	9a02      	ldr	r2, [sp, #8]
 8022196:	2339      	movs	r3, #57	; 0x39
 8022198:	7013      	strb	r3, [r2, #0]
 802219a:	462b      	mov	r3, r5
 802219c:	461d      	mov	r5, r3
 802219e:	3b01      	subs	r3, #1
 80221a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80221a4:	2a39      	cmp	r2, #57	; 0x39
 80221a6:	d050      	beq.n	802224a <_dtoa_r+0xb72>
 80221a8:	3201      	adds	r2, #1
 80221aa:	701a      	strb	r2, [r3, #0]
 80221ac:	e745      	b.n	802203a <_dtoa_r+0x962>
 80221ae:	2a00      	cmp	r2, #0
 80221b0:	dd03      	ble.n	80221ba <_dtoa_r+0xae2>
 80221b2:	2b39      	cmp	r3, #57	; 0x39
 80221b4:	d0ee      	beq.n	8022194 <_dtoa_r+0xabc>
 80221b6:	3301      	adds	r3, #1
 80221b8:	e7c7      	b.n	802214a <_dtoa_r+0xa72>
 80221ba:	9a01      	ldr	r2, [sp, #4]
 80221bc:	9907      	ldr	r1, [sp, #28]
 80221be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80221c2:	428a      	cmp	r2, r1
 80221c4:	d02a      	beq.n	802221c <_dtoa_r+0xb44>
 80221c6:	4659      	mov	r1, fp
 80221c8:	2300      	movs	r3, #0
 80221ca:	220a      	movs	r2, #10
 80221cc:	4620      	mov	r0, r4
 80221ce:	f7fe fcf5 	bl	8020bbc <__multadd>
 80221d2:	45b8      	cmp	r8, r7
 80221d4:	4683      	mov	fp, r0
 80221d6:	f04f 0300 	mov.w	r3, #0
 80221da:	f04f 020a 	mov.w	r2, #10
 80221de:	4641      	mov	r1, r8
 80221e0:	4620      	mov	r0, r4
 80221e2:	d107      	bne.n	80221f4 <_dtoa_r+0xb1c>
 80221e4:	f7fe fcea 	bl	8020bbc <__multadd>
 80221e8:	4680      	mov	r8, r0
 80221ea:	4607      	mov	r7, r0
 80221ec:	9b01      	ldr	r3, [sp, #4]
 80221ee:	3301      	adds	r3, #1
 80221f0:	9301      	str	r3, [sp, #4]
 80221f2:	e775      	b.n	80220e0 <_dtoa_r+0xa08>
 80221f4:	f7fe fce2 	bl	8020bbc <__multadd>
 80221f8:	4639      	mov	r1, r7
 80221fa:	4680      	mov	r8, r0
 80221fc:	2300      	movs	r3, #0
 80221fe:	220a      	movs	r2, #10
 8022200:	4620      	mov	r0, r4
 8022202:	f7fe fcdb 	bl	8020bbc <__multadd>
 8022206:	4607      	mov	r7, r0
 8022208:	e7f0      	b.n	80221ec <_dtoa_r+0xb14>
 802220a:	f1b9 0f00 	cmp.w	r9, #0
 802220e:	9a00      	ldr	r2, [sp, #0]
 8022210:	bfcc      	ite	gt
 8022212:	464d      	movgt	r5, r9
 8022214:	2501      	movle	r5, #1
 8022216:	4415      	add	r5, r2
 8022218:	f04f 0800 	mov.w	r8, #0
 802221c:	4659      	mov	r1, fp
 802221e:	2201      	movs	r2, #1
 8022220:	4620      	mov	r0, r4
 8022222:	9301      	str	r3, [sp, #4]
 8022224:	f7fe fe7a 	bl	8020f1c <__lshift>
 8022228:	4631      	mov	r1, r6
 802222a:	4683      	mov	fp, r0
 802222c:	f7fe fee2 	bl	8020ff4 <__mcmp>
 8022230:	2800      	cmp	r0, #0
 8022232:	dcb2      	bgt.n	802219a <_dtoa_r+0xac2>
 8022234:	d102      	bne.n	802223c <_dtoa_r+0xb64>
 8022236:	9b01      	ldr	r3, [sp, #4]
 8022238:	07db      	lsls	r3, r3, #31
 802223a:	d4ae      	bmi.n	802219a <_dtoa_r+0xac2>
 802223c:	462b      	mov	r3, r5
 802223e:	461d      	mov	r5, r3
 8022240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022244:	2a30      	cmp	r2, #48	; 0x30
 8022246:	d0fa      	beq.n	802223e <_dtoa_r+0xb66>
 8022248:	e6f7      	b.n	802203a <_dtoa_r+0x962>
 802224a:	9a00      	ldr	r2, [sp, #0]
 802224c:	429a      	cmp	r2, r3
 802224e:	d1a5      	bne.n	802219c <_dtoa_r+0xac4>
 8022250:	f10a 0a01 	add.w	sl, sl, #1
 8022254:	2331      	movs	r3, #49	; 0x31
 8022256:	e779      	b.n	802214c <_dtoa_r+0xa74>
 8022258:	4b13      	ldr	r3, [pc, #76]	; (80222a8 <_dtoa_r+0xbd0>)
 802225a:	f7ff baaf 	b.w	80217bc <_dtoa_r+0xe4>
 802225e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022260:	2b00      	cmp	r3, #0
 8022262:	f47f aa86 	bne.w	8021772 <_dtoa_r+0x9a>
 8022266:	4b11      	ldr	r3, [pc, #68]	; (80222ac <_dtoa_r+0xbd4>)
 8022268:	f7ff baa8 	b.w	80217bc <_dtoa_r+0xe4>
 802226c:	f1b9 0f00 	cmp.w	r9, #0
 8022270:	dc03      	bgt.n	802227a <_dtoa_r+0xba2>
 8022272:	9b05      	ldr	r3, [sp, #20]
 8022274:	2b02      	cmp	r3, #2
 8022276:	f73f aec9 	bgt.w	802200c <_dtoa_r+0x934>
 802227a:	9d00      	ldr	r5, [sp, #0]
 802227c:	4631      	mov	r1, r6
 802227e:	4658      	mov	r0, fp
 8022280:	f7ff f99c 	bl	80215bc <quorem>
 8022284:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8022288:	f805 3b01 	strb.w	r3, [r5], #1
 802228c:	9a00      	ldr	r2, [sp, #0]
 802228e:	1aaa      	subs	r2, r5, r2
 8022290:	4591      	cmp	r9, r2
 8022292:	ddba      	ble.n	802220a <_dtoa_r+0xb32>
 8022294:	4659      	mov	r1, fp
 8022296:	2300      	movs	r3, #0
 8022298:	220a      	movs	r2, #10
 802229a:	4620      	mov	r0, r4
 802229c:	f7fe fc8e 	bl	8020bbc <__multadd>
 80222a0:	4683      	mov	fp, r0
 80222a2:	e7eb      	b.n	802227c <_dtoa_r+0xba4>
 80222a4:	0802a6bf 	.word	0x0802a6bf
 80222a8:	0802a815 	.word	0x0802a815
 80222ac:	0802a808 	.word	0x0802a808

080222b0 <__sflush_r>:
 80222b0:	898a      	ldrh	r2, [r1, #12]
 80222b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222b6:	4605      	mov	r5, r0
 80222b8:	0710      	lsls	r0, r2, #28
 80222ba:	460c      	mov	r4, r1
 80222bc:	d458      	bmi.n	8022370 <__sflush_r+0xc0>
 80222be:	684b      	ldr	r3, [r1, #4]
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	dc05      	bgt.n	80222d0 <__sflush_r+0x20>
 80222c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	dc02      	bgt.n	80222d0 <__sflush_r+0x20>
 80222ca:	2000      	movs	r0, #0
 80222cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80222d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80222d2:	2e00      	cmp	r6, #0
 80222d4:	d0f9      	beq.n	80222ca <__sflush_r+0x1a>
 80222d6:	2300      	movs	r3, #0
 80222d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80222dc:	682f      	ldr	r7, [r5, #0]
 80222de:	602b      	str	r3, [r5, #0]
 80222e0:	d032      	beq.n	8022348 <__sflush_r+0x98>
 80222e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80222e4:	89a3      	ldrh	r3, [r4, #12]
 80222e6:	075a      	lsls	r2, r3, #29
 80222e8:	d505      	bpl.n	80222f6 <__sflush_r+0x46>
 80222ea:	6863      	ldr	r3, [r4, #4]
 80222ec:	1ac0      	subs	r0, r0, r3
 80222ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80222f0:	b10b      	cbz	r3, 80222f6 <__sflush_r+0x46>
 80222f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80222f4:	1ac0      	subs	r0, r0, r3
 80222f6:	2300      	movs	r3, #0
 80222f8:	4602      	mov	r2, r0
 80222fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80222fc:	6a21      	ldr	r1, [r4, #32]
 80222fe:	4628      	mov	r0, r5
 8022300:	47b0      	blx	r6
 8022302:	1c43      	adds	r3, r0, #1
 8022304:	89a3      	ldrh	r3, [r4, #12]
 8022306:	d106      	bne.n	8022316 <__sflush_r+0x66>
 8022308:	6829      	ldr	r1, [r5, #0]
 802230a:	291d      	cmp	r1, #29
 802230c:	d82c      	bhi.n	8022368 <__sflush_r+0xb8>
 802230e:	4a2a      	ldr	r2, [pc, #168]	; (80223b8 <__sflush_r+0x108>)
 8022310:	40ca      	lsrs	r2, r1
 8022312:	07d6      	lsls	r6, r2, #31
 8022314:	d528      	bpl.n	8022368 <__sflush_r+0xb8>
 8022316:	2200      	movs	r2, #0
 8022318:	6062      	str	r2, [r4, #4]
 802231a:	04d9      	lsls	r1, r3, #19
 802231c:	6922      	ldr	r2, [r4, #16]
 802231e:	6022      	str	r2, [r4, #0]
 8022320:	d504      	bpl.n	802232c <__sflush_r+0x7c>
 8022322:	1c42      	adds	r2, r0, #1
 8022324:	d101      	bne.n	802232a <__sflush_r+0x7a>
 8022326:	682b      	ldr	r3, [r5, #0]
 8022328:	b903      	cbnz	r3, 802232c <__sflush_r+0x7c>
 802232a:	6560      	str	r0, [r4, #84]	; 0x54
 802232c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802232e:	602f      	str	r7, [r5, #0]
 8022330:	2900      	cmp	r1, #0
 8022332:	d0ca      	beq.n	80222ca <__sflush_r+0x1a>
 8022334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022338:	4299      	cmp	r1, r3
 802233a:	d002      	beq.n	8022342 <__sflush_r+0x92>
 802233c:	4628      	mov	r0, r5
 802233e:	f000 f915 	bl	802256c <_free_r>
 8022342:	2000      	movs	r0, #0
 8022344:	6360      	str	r0, [r4, #52]	; 0x34
 8022346:	e7c1      	b.n	80222cc <__sflush_r+0x1c>
 8022348:	6a21      	ldr	r1, [r4, #32]
 802234a:	2301      	movs	r3, #1
 802234c:	4628      	mov	r0, r5
 802234e:	47b0      	blx	r6
 8022350:	1c41      	adds	r1, r0, #1
 8022352:	d1c7      	bne.n	80222e4 <__sflush_r+0x34>
 8022354:	682b      	ldr	r3, [r5, #0]
 8022356:	2b00      	cmp	r3, #0
 8022358:	d0c4      	beq.n	80222e4 <__sflush_r+0x34>
 802235a:	2b1d      	cmp	r3, #29
 802235c:	d001      	beq.n	8022362 <__sflush_r+0xb2>
 802235e:	2b16      	cmp	r3, #22
 8022360:	d101      	bne.n	8022366 <__sflush_r+0xb6>
 8022362:	602f      	str	r7, [r5, #0]
 8022364:	e7b1      	b.n	80222ca <__sflush_r+0x1a>
 8022366:	89a3      	ldrh	r3, [r4, #12]
 8022368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802236c:	81a3      	strh	r3, [r4, #12]
 802236e:	e7ad      	b.n	80222cc <__sflush_r+0x1c>
 8022370:	690f      	ldr	r7, [r1, #16]
 8022372:	2f00      	cmp	r7, #0
 8022374:	d0a9      	beq.n	80222ca <__sflush_r+0x1a>
 8022376:	0793      	lsls	r3, r2, #30
 8022378:	680e      	ldr	r6, [r1, #0]
 802237a:	bf08      	it	eq
 802237c:	694b      	ldreq	r3, [r1, #20]
 802237e:	600f      	str	r7, [r1, #0]
 8022380:	bf18      	it	ne
 8022382:	2300      	movne	r3, #0
 8022384:	eba6 0807 	sub.w	r8, r6, r7
 8022388:	608b      	str	r3, [r1, #8]
 802238a:	f1b8 0f00 	cmp.w	r8, #0
 802238e:	dd9c      	ble.n	80222ca <__sflush_r+0x1a>
 8022390:	6a21      	ldr	r1, [r4, #32]
 8022392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022394:	4643      	mov	r3, r8
 8022396:	463a      	mov	r2, r7
 8022398:	4628      	mov	r0, r5
 802239a:	47b0      	blx	r6
 802239c:	2800      	cmp	r0, #0
 802239e:	dc06      	bgt.n	80223ae <__sflush_r+0xfe>
 80223a0:	89a3      	ldrh	r3, [r4, #12]
 80223a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80223a6:	81a3      	strh	r3, [r4, #12]
 80223a8:	f04f 30ff 	mov.w	r0, #4294967295
 80223ac:	e78e      	b.n	80222cc <__sflush_r+0x1c>
 80223ae:	4407      	add	r7, r0
 80223b0:	eba8 0800 	sub.w	r8, r8, r0
 80223b4:	e7e9      	b.n	802238a <__sflush_r+0xda>
 80223b6:	bf00      	nop
 80223b8:	20400001 	.word	0x20400001

080223bc <_fflush_r>:
 80223bc:	b538      	push	{r3, r4, r5, lr}
 80223be:	690b      	ldr	r3, [r1, #16]
 80223c0:	4605      	mov	r5, r0
 80223c2:	460c      	mov	r4, r1
 80223c4:	b913      	cbnz	r3, 80223cc <_fflush_r+0x10>
 80223c6:	2500      	movs	r5, #0
 80223c8:	4628      	mov	r0, r5
 80223ca:	bd38      	pop	{r3, r4, r5, pc}
 80223cc:	b118      	cbz	r0, 80223d6 <_fflush_r+0x1a>
 80223ce:	6983      	ldr	r3, [r0, #24]
 80223d0:	b90b      	cbnz	r3, 80223d6 <_fflush_r+0x1a>
 80223d2:	f7fe faf1 	bl	80209b8 <__sinit>
 80223d6:	4b14      	ldr	r3, [pc, #80]	; (8022428 <_fflush_r+0x6c>)
 80223d8:	429c      	cmp	r4, r3
 80223da:	d11b      	bne.n	8022414 <_fflush_r+0x58>
 80223dc:	686c      	ldr	r4, [r5, #4]
 80223de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80223e2:	2b00      	cmp	r3, #0
 80223e4:	d0ef      	beq.n	80223c6 <_fflush_r+0xa>
 80223e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80223e8:	07d0      	lsls	r0, r2, #31
 80223ea:	d404      	bmi.n	80223f6 <_fflush_r+0x3a>
 80223ec:	0599      	lsls	r1, r3, #22
 80223ee:	d402      	bmi.n	80223f6 <_fflush_r+0x3a>
 80223f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223f2:	f7fe fb7f 	bl	8020af4 <__retarget_lock_acquire_recursive>
 80223f6:	4628      	mov	r0, r5
 80223f8:	4621      	mov	r1, r4
 80223fa:	f7ff ff59 	bl	80222b0 <__sflush_r>
 80223fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022400:	07da      	lsls	r2, r3, #31
 8022402:	4605      	mov	r5, r0
 8022404:	d4e0      	bmi.n	80223c8 <_fflush_r+0xc>
 8022406:	89a3      	ldrh	r3, [r4, #12]
 8022408:	059b      	lsls	r3, r3, #22
 802240a:	d4dd      	bmi.n	80223c8 <_fflush_r+0xc>
 802240c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802240e:	f7fe fb72 	bl	8020af6 <__retarget_lock_release_recursive>
 8022412:	e7d9      	b.n	80223c8 <_fflush_r+0xc>
 8022414:	4b05      	ldr	r3, [pc, #20]	; (802242c <_fflush_r+0x70>)
 8022416:	429c      	cmp	r4, r3
 8022418:	d101      	bne.n	802241e <_fflush_r+0x62>
 802241a:	68ac      	ldr	r4, [r5, #8]
 802241c:	e7df      	b.n	80223de <_fflush_r+0x22>
 802241e:	4b04      	ldr	r3, [pc, #16]	; (8022430 <_fflush_r+0x74>)
 8022420:	429c      	cmp	r4, r3
 8022422:	bf08      	it	eq
 8022424:	68ec      	ldreq	r4, [r5, #12]
 8022426:	e7da      	b.n	80223de <_fflush_r+0x22>
 8022428:	0802a608 	.word	0x0802a608
 802242c:	0802a628 	.word	0x0802a628
 8022430:	0802a5e8 	.word	0x0802a5e8

08022434 <fiprintf>:
 8022434:	b40e      	push	{r1, r2, r3}
 8022436:	b503      	push	{r0, r1, lr}
 8022438:	4601      	mov	r1, r0
 802243a:	ab03      	add	r3, sp, #12
 802243c:	4805      	ldr	r0, [pc, #20]	; (8022454 <fiprintf+0x20>)
 802243e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022442:	6800      	ldr	r0, [r0, #0]
 8022444:	9301      	str	r3, [sp, #4]
 8022446:	f000 f90b 	bl	8022660 <_vfiprintf_r>
 802244a:	b002      	add	sp, #8
 802244c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022450:	b003      	add	sp, #12
 8022452:	4770      	bx	lr
 8022454:	20000108 	.word	0x20000108

08022458 <_lseek_r>:
 8022458:	b538      	push	{r3, r4, r5, lr}
 802245a:	4d07      	ldr	r5, [pc, #28]	; (8022478 <_lseek_r+0x20>)
 802245c:	4604      	mov	r4, r0
 802245e:	4608      	mov	r0, r1
 8022460:	4611      	mov	r1, r2
 8022462:	2200      	movs	r2, #0
 8022464:	602a      	str	r2, [r5, #0]
 8022466:	461a      	mov	r2, r3
 8022468:	f7ef fece 	bl	8012208 <_lseek>
 802246c:	1c43      	adds	r3, r0, #1
 802246e:	d102      	bne.n	8022476 <_lseek_r+0x1e>
 8022470:	682b      	ldr	r3, [r5, #0]
 8022472:	b103      	cbz	r3, 8022476 <_lseek_r+0x1e>
 8022474:	6023      	str	r3, [r4, #0]
 8022476:	bd38      	pop	{r3, r4, r5, pc}
 8022478:	20004e00 	.word	0x20004e00

0802247c <__swhatbuf_r>:
 802247c:	b570      	push	{r4, r5, r6, lr}
 802247e:	460e      	mov	r6, r1
 8022480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022484:	2900      	cmp	r1, #0
 8022486:	b096      	sub	sp, #88	; 0x58
 8022488:	4614      	mov	r4, r2
 802248a:	461d      	mov	r5, r3
 802248c:	da07      	bge.n	802249e <__swhatbuf_r+0x22>
 802248e:	2300      	movs	r3, #0
 8022490:	602b      	str	r3, [r5, #0]
 8022492:	89b3      	ldrh	r3, [r6, #12]
 8022494:	061a      	lsls	r2, r3, #24
 8022496:	d410      	bmi.n	80224ba <__swhatbuf_r+0x3e>
 8022498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802249c:	e00e      	b.n	80224bc <__swhatbuf_r+0x40>
 802249e:	466a      	mov	r2, sp
 80224a0:	f000 fbbc 	bl	8022c1c <_fstat_r>
 80224a4:	2800      	cmp	r0, #0
 80224a6:	dbf2      	blt.n	802248e <__swhatbuf_r+0x12>
 80224a8:	9a01      	ldr	r2, [sp, #4]
 80224aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80224ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80224b2:	425a      	negs	r2, r3
 80224b4:	415a      	adcs	r2, r3
 80224b6:	602a      	str	r2, [r5, #0]
 80224b8:	e7ee      	b.n	8022498 <__swhatbuf_r+0x1c>
 80224ba:	2340      	movs	r3, #64	; 0x40
 80224bc:	2000      	movs	r0, #0
 80224be:	6023      	str	r3, [r4, #0]
 80224c0:	b016      	add	sp, #88	; 0x58
 80224c2:	bd70      	pop	{r4, r5, r6, pc}

080224c4 <__smakebuf_r>:
 80224c4:	898b      	ldrh	r3, [r1, #12]
 80224c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80224c8:	079d      	lsls	r5, r3, #30
 80224ca:	4606      	mov	r6, r0
 80224cc:	460c      	mov	r4, r1
 80224ce:	d507      	bpl.n	80224e0 <__smakebuf_r+0x1c>
 80224d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80224d4:	6023      	str	r3, [r4, #0]
 80224d6:	6123      	str	r3, [r4, #16]
 80224d8:	2301      	movs	r3, #1
 80224da:	6163      	str	r3, [r4, #20]
 80224dc:	b002      	add	sp, #8
 80224de:	bd70      	pop	{r4, r5, r6, pc}
 80224e0:	ab01      	add	r3, sp, #4
 80224e2:	466a      	mov	r2, sp
 80224e4:	f7ff ffca 	bl	802247c <__swhatbuf_r>
 80224e8:	9900      	ldr	r1, [sp, #0]
 80224ea:	4605      	mov	r5, r0
 80224ec:	4630      	mov	r0, r6
 80224ee:	f7fe feaf 	bl	8021250 <_malloc_r>
 80224f2:	b948      	cbnz	r0, 8022508 <__smakebuf_r+0x44>
 80224f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80224f8:	059a      	lsls	r2, r3, #22
 80224fa:	d4ef      	bmi.n	80224dc <__smakebuf_r+0x18>
 80224fc:	f023 0303 	bic.w	r3, r3, #3
 8022500:	f043 0302 	orr.w	r3, r3, #2
 8022504:	81a3      	strh	r3, [r4, #12]
 8022506:	e7e3      	b.n	80224d0 <__smakebuf_r+0xc>
 8022508:	4b0d      	ldr	r3, [pc, #52]	; (8022540 <__smakebuf_r+0x7c>)
 802250a:	62b3      	str	r3, [r6, #40]	; 0x28
 802250c:	89a3      	ldrh	r3, [r4, #12]
 802250e:	6020      	str	r0, [r4, #0]
 8022510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022514:	81a3      	strh	r3, [r4, #12]
 8022516:	9b00      	ldr	r3, [sp, #0]
 8022518:	6163      	str	r3, [r4, #20]
 802251a:	9b01      	ldr	r3, [sp, #4]
 802251c:	6120      	str	r0, [r4, #16]
 802251e:	b15b      	cbz	r3, 8022538 <__smakebuf_r+0x74>
 8022520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022524:	4630      	mov	r0, r6
 8022526:	f000 fb8b 	bl	8022c40 <_isatty_r>
 802252a:	b128      	cbz	r0, 8022538 <__smakebuf_r+0x74>
 802252c:	89a3      	ldrh	r3, [r4, #12]
 802252e:	f023 0303 	bic.w	r3, r3, #3
 8022532:	f043 0301 	orr.w	r3, r3, #1
 8022536:	81a3      	strh	r3, [r4, #12]
 8022538:	89a0      	ldrh	r0, [r4, #12]
 802253a:	4305      	orrs	r5, r0
 802253c:	81a5      	strh	r5, [r4, #12]
 802253e:	e7cd      	b.n	80224dc <__smakebuf_r+0x18>
 8022540:	08020951 	.word	0x08020951

08022544 <malloc>:
 8022544:	4b02      	ldr	r3, [pc, #8]	; (8022550 <malloc+0xc>)
 8022546:	4601      	mov	r1, r0
 8022548:	6818      	ldr	r0, [r3, #0]
 802254a:	f7fe be81 	b.w	8021250 <_malloc_r>
 802254e:	bf00      	nop
 8022550:	20000108 	.word	0x20000108

08022554 <__malloc_lock>:
 8022554:	4801      	ldr	r0, [pc, #4]	; (802255c <__malloc_lock+0x8>)
 8022556:	f7fe bacd 	b.w	8020af4 <__retarget_lock_acquire_recursive>
 802255a:	bf00      	nop
 802255c:	20004df4 	.word	0x20004df4

08022560 <__malloc_unlock>:
 8022560:	4801      	ldr	r0, [pc, #4]	; (8022568 <__malloc_unlock+0x8>)
 8022562:	f7fe bac8 	b.w	8020af6 <__retarget_lock_release_recursive>
 8022566:	bf00      	nop
 8022568:	20004df4 	.word	0x20004df4

0802256c <_free_r>:
 802256c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802256e:	2900      	cmp	r1, #0
 8022570:	d048      	beq.n	8022604 <_free_r+0x98>
 8022572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022576:	9001      	str	r0, [sp, #4]
 8022578:	2b00      	cmp	r3, #0
 802257a:	f1a1 0404 	sub.w	r4, r1, #4
 802257e:	bfb8      	it	lt
 8022580:	18e4      	addlt	r4, r4, r3
 8022582:	f7ff ffe7 	bl	8022554 <__malloc_lock>
 8022586:	4a20      	ldr	r2, [pc, #128]	; (8022608 <_free_r+0x9c>)
 8022588:	9801      	ldr	r0, [sp, #4]
 802258a:	6813      	ldr	r3, [r2, #0]
 802258c:	4615      	mov	r5, r2
 802258e:	b933      	cbnz	r3, 802259e <_free_r+0x32>
 8022590:	6063      	str	r3, [r4, #4]
 8022592:	6014      	str	r4, [r2, #0]
 8022594:	b003      	add	sp, #12
 8022596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802259a:	f7ff bfe1 	b.w	8022560 <__malloc_unlock>
 802259e:	42a3      	cmp	r3, r4
 80225a0:	d90b      	bls.n	80225ba <_free_r+0x4e>
 80225a2:	6821      	ldr	r1, [r4, #0]
 80225a4:	1862      	adds	r2, r4, r1
 80225a6:	4293      	cmp	r3, r2
 80225a8:	bf04      	itt	eq
 80225aa:	681a      	ldreq	r2, [r3, #0]
 80225ac:	685b      	ldreq	r3, [r3, #4]
 80225ae:	6063      	str	r3, [r4, #4]
 80225b0:	bf04      	itt	eq
 80225b2:	1852      	addeq	r2, r2, r1
 80225b4:	6022      	streq	r2, [r4, #0]
 80225b6:	602c      	str	r4, [r5, #0]
 80225b8:	e7ec      	b.n	8022594 <_free_r+0x28>
 80225ba:	461a      	mov	r2, r3
 80225bc:	685b      	ldr	r3, [r3, #4]
 80225be:	b10b      	cbz	r3, 80225c4 <_free_r+0x58>
 80225c0:	42a3      	cmp	r3, r4
 80225c2:	d9fa      	bls.n	80225ba <_free_r+0x4e>
 80225c4:	6811      	ldr	r1, [r2, #0]
 80225c6:	1855      	adds	r5, r2, r1
 80225c8:	42a5      	cmp	r5, r4
 80225ca:	d10b      	bne.n	80225e4 <_free_r+0x78>
 80225cc:	6824      	ldr	r4, [r4, #0]
 80225ce:	4421      	add	r1, r4
 80225d0:	1854      	adds	r4, r2, r1
 80225d2:	42a3      	cmp	r3, r4
 80225d4:	6011      	str	r1, [r2, #0]
 80225d6:	d1dd      	bne.n	8022594 <_free_r+0x28>
 80225d8:	681c      	ldr	r4, [r3, #0]
 80225da:	685b      	ldr	r3, [r3, #4]
 80225dc:	6053      	str	r3, [r2, #4]
 80225de:	4421      	add	r1, r4
 80225e0:	6011      	str	r1, [r2, #0]
 80225e2:	e7d7      	b.n	8022594 <_free_r+0x28>
 80225e4:	d902      	bls.n	80225ec <_free_r+0x80>
 80225e6:	230c      	movs	r3, #12
 80225e8:	6003      	str	r3, [r0, #0]
 80225ea:	e7d3      	b.n	8022594 <_free_r+0x28>
 80225ec:	6825      	ldr	r5, [r4, #0]
 80225ee:	1961      	adds	r1, r4, r5
 80225f0:	428b      	cmp	r3, r1
 80225f2:	bf04      	itt	eq
 80225f4:	6819      	ldreq	r1, [r3, #0]
 80225f6:	685b      	ldreq	r3, [r3, #4]
 80225f8:	6063      	str	r3, [r4, #4]
 80225fa:	bf04      	itt	eq
 80225fc:	1949      	addeq	r1, r1, r5
 80225fe:	6021      	streq	r1, [r4, #0]
 8022600:	6054      	str	r4, [r2, #4]
 8022602:	e7c7      	b.n	8022594 <_free_r+0x28>
 8022604:	b003      	add	sp, #12
 8022606:	bd30      	pop	{r4, r5, pc}
 8022608:	20004350 	.word	0x20004350

0802260c <__sfputc_r>:
 802260c:	6893      	ldr	r3, [r2, #8]
 802260e:	3b01      	subs	r3, #1
 8022610:	2b00      	cmp	r3, #0
 8022612:	b410      	push	{r4}
 8022614:	6093      	str	r3, [r2, #8]
 8022616:	da08      	bge.n	802262a <__sfputc_r+0x1e>
 8022618:	6994      	ldr	r4, [r2, #24]
 802261a:	42a3      	cmp	r3, r4
 802261c:	db01      	blt.n	8022622 <__sfputc_r+0x16>
 802261e:	290a      	cmp	r1, #10
 8022620:	d103      	bne.n	802262a <__sfputc_r+0x1e>
 8022622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022626:	f7fe bec9 	b.w	80213bc <__swbuf_r>
 802262a:	6813      	ldr	r3, [r2, #0]
 802262c:	1c58      	adds	r0, r3, #1
 802262e:	6010      	str	r0, [r2, #0]
 8022630:	7019      	strb	r1, [r3, #0]
 8022632:	4608      	mov	r0, r1
 8022634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022638:	4770      	bx	lr

0802263a <__sfputs_r>:
 802263a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802263c:	4606      	mov	r6, r0
 802263e:	460f      	mov	r7, r1
 8022640:	4614      	mov	r4, r2
 8022642:	18d5      	adds	r5, r2, r3
 8022644:	42ac      	cmp	r4, r5
 8022646:	d101      	bne.n	802264c <__sfputs_r+0x12>
 8022648:	2000      	movs	r0, #0
 802264a:	e007      	b.n	802265c <__sfputs_r+0x22>
 802264c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022650:	463a      	mov	r2, r7
 8022652:	4630      	mov	r0, r6
 8022654:	f7ff ffda 	bl	802260c <__sfputc_r>
 8022658:	1c43      	adds	r3, r0, #1
 802265a:	d1f3      	bne.n	8022644 <__sfputs_r+0xa>
 802265c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022660 <_vfiprintf_r>:
 8022660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022664:	460d      	mov	r5, r1
 8022666:	b09d      	sub	sp, #116	; 0x74
 8022668:	4614      	mov	r4, r2
 802266a:	4698      	mov	r8, r3
 802266c:	4606      	mov	r6, r0
 802266e:	b118      	cbz	r0, 8022678 <_vfiprintf_r+0x18>
 8022670:	6983      	ldr	r3, [r0, #24]
 8022672:	b90b      	cbnz	r3, 8022678 <_vfiprintf_r+0x18>
 8022674:	f7fe f9a0 	bl	80209b8 <__sinit>
 8022678:	4b89      	ldr	r3, [pc, #548]	; (80228a0 <_vfiprintf_r+0x240>)
 802267a:	429d      	cmp	r5, r3
 802267c:	d11b      	bne.n	80226b6 <_vfiprintf_r+0x56>
 802267e:	6875      	ldr	r5, [r6, #4]
 8022680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022682:	07d9      	lsls	r1, r3, #31
 8022684:	d405      	bmi.n	8022692 <_vfiprintf_r+0x32>
 8022686:	89ab      	ldrh	r3, [r5, #12]
 8022688:	059a      	lsls	r2, r3, #22
 802268a:	d402      	bmi.n	8022692 <_vfiprintf_r+0x32>
 802268c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802268e:	f7fe fa31 	bl	8020af4 <__retarget_lock_acquire_recursive>
 8022692:	89ab      	ldrh	r3, [r5, #12]
 8022694:	071b      	lsls	r3, r3, #28
 8022696:	d501      	bpl.n	802269c <_vfiprintf_r+0x3c>
 8022698:	692b      	ldr	r3, [r5, #16]
 802269a:	b9eb      	cbnz	r3, 80226d8 <_vfiprintf_r+0x78>
 802269c:	4629      	mov	r1, r5
 802269e:	4630      	mov	r0, r6
 80226a0:	f7fe fef0 	bl	8021484 <__swsetup_r>
 80226a4:	b1c0      	cbz	r0, 80226d8 <_vfiprintf_r+0x78>
 80226a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80226a8:	07dc      	lsls	r4, r3, #31
 80226aa:	d50e      	bpl.n	80226ca <_vfiprintf_r+0x6a>
 80226ac:	f04f 30ff 	mov.w	r0, #4294967295
 80226b0:	b01d      	add	sp, #116	; 0x74
 80226b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226b6:	4b7b      	ldr	r3, [pc, #492]	; (80228a4 <_vfiprintf_r+0x244>)
 80226b8:	429d      	cmp	r5, r3
 80226ba:	d101      	bne.n	80226c0 <_vfiprintf_r+0x60>
 80226bc:	68b5      	ldr	r5, [r6, #8]
 80226be:	e7df      	b.n	8022680 <_vfiprintf_r+0x20>
 80226c0:	4b79      	ldr	r3, [pc, #484]	; (80228a8 <_vfiprintf_r+0x248>)
 80226c2:	429d      	cmp	r5, r3
 80226c4:	bf08      	it	eq
 80226c6:	68f5      	ldreq	r5, [r6, #12]
 80226c8:	e7da      	b.n	8022680 <_vfiprintf_r+0x20>
 80226ca:	89ab      	ldrh	r3, [r5, #12]
 80226cc:	0598      	lsls	r0, r3, #22
 80226ce:	d4ed      	bmi.n	80226ac <_vfiprintf_r+0x4c>
 80226d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80226d2:	f7fe fa10 	bl	8020af6 <__retarget_lock_release_recursive>
 80226d6:	e7e9      	b.n	80226ac <_vfiprintf_r+0x4c>
 80226d8:	2300      	movs	r3, #0
 80226da:	9309      	str	r3, [sp, #36]	; 0x24
 80226dc:	2320      	movs	r3, #32
 80226de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80226e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80226e6:	2330      	movs	r3, #48	; 0x30
 80226e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80228ac <_vfiprintf_r+0x24c>
 80226ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80226f0:	f04f 0901 	mov.w	r9, #1
 80226f4:	4623      	mov	r3, r4
 80226f6:	469a      	mov	sl, r3
 80226f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80226fc:	b10a      	cbz	r2, 8022702 <_vfiprintf_r+0xa2>
 80226fe:	2a25      	cmp	r2, #37	; 0x25
 8022700:	d1f9      	bne.n	80226f6 <_vfiprintf_r+0x96>
 8022702:	ebba 0b04 	subs.w	fp, sl, r4
 8022706:	d00b      	beq.n	8022720 <_vfiprintf_r+0xc0>
 8022708:	465b      	mov	r3, fp
 802270a:	4622      	mov	r2, r4
 802270c:	4629      	mov	r1, r5
 802270e:	4630      	mov	r0, r6
 8022710:	f7ff ff93 	bl	802263a <__sfputs_r>
 8022714:	3001      	adds	r0, #1
 8022716:	f000 80aa 	beq.w	802286e <_vfiprintf_r+0x20e>
 802271a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802271c:	445a      	add	r2, fp
 802271e:	9209      	str	r2, [sp, #36]	; 0x24
 8022720:	f89a 3000 	ldrb.w	r3, [sl]
 8022724:	2b00      	cmp	r3, #0
 8022726:	f000 80a2 	beq.w	802286e <_vfiprintf_r+0x20e>
 802272a:	2300      	movs	r3, #0
 802272c:	f04f 32ff 	mov.w	r2, #4294967295
 8022730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022734:	f10a 0a01 	add.w	sl, sl, #1
 8022738:	9304      	str	r3, [sp, #16]
 802273a:	9307      	str	r3, [sp, #28]
 802273c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022740:	931a      	str	r3, [sp, #104]	; 0x68
 8022742:	4654      	mov	r4, sl
 8022744:	2205      	movs	r2, #5
 8022746:	f814 1b01 	ldrb.w	r1, [r4], #1
 802274a:	4858      	ldr	r0, [pc, #352]	; (80228ac <_vfiprintf_r+0x24c>)
 802274c:	f7ed fc78 	bl	8010040 <memchr>
 8022750:	9a04      	ldr	r2, [sp, #16]
 8022752:	b9d8      	cbnz	r0, 802278c <_vfiprintf_r+0x12c>
 8022754:	06d1      	lsls	r1, r2, #27
 8022756:	bf44      	itt	mi
 8022758:	2320      	movmi	r3, #32
 802275a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802275e:	0713      	lsls	r3, r2, #28
 8022760:	bf44      	itt	mi
 8022762:	232b      	movmi	r3, #43	; 0x2b
 8022764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022768:	f89a 3000 	ldrb.w	r3, [sl]
 802276c:	2b2a      	cmp	r3, #42	; 0x2a
 802276e:	d015      	beq.n	802279c <_vfiprintf_r+0x13c>
 8022770:	9a07      	ldr	r2, [sp, #28]
 8022772:	4654      	mov	r4, sl
 8022774:	2000      	movs	r0, #0
 8022776:	f04f 0c0a 	mov.w	ip, #10
 802277a:	4621      	mov	r1, r4
 802277c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022780:	3b30      	subs	r3, #48	; 0x30
 8022782:	2b09      	cmp	r3, #9
 8022784:	d94e      	bls.n	8022824 <_vfiprintf_r+0x1c4>
 8022786:	b1b0      	cbz	r0, 80227b6 <_vfiprintf_r+0x156>
 8022788:	9207      	str	r2, [sp, #28]
 802278a:	e014      	b.n	80227b6 <_vfiprintf_r+0x156>
 802278c:	eba0 0308 	sub.w	r3, r0, r8
 8022790:	fa09 f303 	lsl.w	r3, r9, r3
 8022794:	4313      	orrs	r3, r2
 8022796:	9304      	str	r3, [sp, #16]
 8022798:	46a2      	mov	sl, r4
 802279a:	e7d2      	b.n	8022742 <_vfiprintf_r+0xe2>
 802279c:	9b03      	ldr	r3, [sp, #12]
 802279e:	1d19      	adds	r1, r3, #4
 80227a0:	681b      	ldr	r3, [r3, #0]
 80227a2:	9103      	str	r1, [sp, #12]
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	bfbb      	ittet	lt
 80227a8:	425b      	neglt	r3, r3
 80227aa:	f042 0202 	orrlt.w	r2, r2, #2
 80227ae:	9307      	strge	r3, [sp, #28]
 80227b0:	9307      	strlt	r3, [sp, #28]
 80227b2:	bfb8      	it	lt
 80227b4:	9204      	strlt	r2, [sp, #16]
 80227b6:	7823      	ldrb	r3, [r4, #0]
 80227b8:	2b2e      	cmp	r3, #46	; 0x2e
 80227ba:	d10c      	bne.n	80227d6 <_vfiprintf_r+0x176>
 80227bc:	7863      	ldrb	r3, [r4, #1]
 80227be:	2b2a      	cmp	r3, #42	; 0x2a
 80227c0:	d135      	bne.n	802282e <_vfiprintf_r+0x1ce>
 80227c2:	9b03      	ldr	r3, [sp, #12]
 80227c4:	1d1a      	adds	r2, r3, #4
 80227c6:	681b      	ldr	r3, [r3, #0]
 80227c8:	9203      	str	r2, [sp, #12]
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	bfb8      	it	lt
 80227ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80227d2:	3402      	adds	r4, #2
 80227d4:	9305      	str	r3, [sp, #20]
 80227d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80228bc <_vfiprintf_r+0x25c>
 80227da:	7821      	ldrb	r1, [r4, #0]
 80227dc:	2203      	movs	r2, #3
 80227de:	4650      	mov	r0, sl
 80227e0:	f7ed fc2e 	bl	8010040 <memchr>
 80227e4:	b140      	cbz	r0, 80227f8 <_vfiprintf_r+0x198>
 80227e6:	2340      	movs	r3, #64	; 0x40
 80227e8:	eba0 000a 	sub.w	r0, r0, sl
 80227ec:	fa03 f000 	lsl.w	r0, r3, r0
 80227f0:	9b04      	ldr	r3, [sp, #16]
 80227f2:	4303      	orrs	r3, r0
 80227f4:	3401      	adds	r4, #1
 80227f6:	9304      	str	r3, [sp, #16]
 80227f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227fc:	482c      	ldr	r0, [pc, #176]	; (80228b0 <_vfiprintf_r+0x250>)
 80227fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022802:	2206      	movs	r2, #6
 8022804:	f7ed fc1c 	bl	8010040 <memchr>
 8022808:	2800      	cmp	r0, #0
 802280a:	d03f      	beq.n	802288c <_vfiprintf_r+0x22c>
 802280c:	4b29      	ldr	r3, [pc, #164]	; (80228b4 <_vfiprintf_r+0x254>)
 802280e:	bb1b      	cbnz	r3, 8022858 <_vfiprintf_r+0x1f8>
 8022810:	9b03      	ldr	r3, [sp, #12]
 8022812:	3307      	adds	r3, #7
 8022814:	f023 0307 	bic.w	r3, r3, #7
 8022818:	3308      	adds	r3, #8
 802281a:	9303      	str	r3, [sp, #12]
 802281c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802281e:	443b      	add	r3, r7
 8022820:	9309      	str	r3, [sp, #36]	; 0x24
 8022822:	e767      	b.n	80226f4 <_vfiprintf_r+0x94>
 8022824:	fb0c 3202 	mla	r2, ip, r2, r3
 8022828:	460c      	mov	r4, r1
 802282a:	2001      	movs	r0, #1
 802282c:	e7a5      	b.n	802277a <_vfiprintf_r+0x11a>
 802282e:	2300      	movs	r3, #0
 8022830:	3401      	adds	r4, #1
 8022832:	9305      	str	r3, [sp, #20]
 8022834:	4619      	mov	r1, r3
 8022836:	f04f 0c0a 	mov.w	ip, #10
 802283a:	4620      	mov	r0, r4
 802283c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022840:	3a30      	subs	r2, #48	; 0x30
 8022842:	2a09      	cmp	r2, #9
 8022844:	d903      	bls.n	802284e <_vfiprintf_r+0x1ee>
 8022846:	2b00      	cmp	r3, #0
 8022848:	d0c5      	beq.n	80227d6 <_vfiprintf_r+0x176>
 802284a:	9105      	str	r1, [sp, #20]
 802284c:	e7c3      	b.n	80227d6 <_vfiprintf_r+0x176>
 802284e:	fb0c 2101 	mla	r1, ip, r1, r2
 8022852:	4604      	mov	r4, r0
 8022854:	2301      	movs	r3, #1
 8022856:	e7f0      	b.n	802283a <_vfiprintf_r+0x1da>
 8022858:	ab03      	add	r3, sp, #12
 802285a:	9300      	str	r3, [sp, #0]
 802285c:	462a      	mov	r2, r5
 802285e:	4b16      	ldr	r3, [pc, #88]	; (80228b8 <_vfiprintf_r+0x258>)
 8022860:	a904      	add	r1, sp, #16
 8022862:	4630      	mov	r0, r6
 8022864:	f3af 8000 	nop.w
 8022868:	4607      	mov	r7, r0
 802286a:	1c78      	adds	r0, r7, #1
 802286c:	d1d6      	bne.n	802281c <_vfiprintf_r+0x1bc>
 802286e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022870:	07d9      	lsls	r1, r3, #31
 8022872:	d405      	bmi.n	8022880 <_vfiprintf_r+0x220>
 8022874:	89ab      	ldrh	r3, [r5, #12]
 8022876:	059a      	lsls	r2, r3, #22
 8022878:	d402      	bmi.n	8022880 <_vfiprintf_r+0x220>
 802287a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802287c:	f7fe f93b 	bl	8020af6 <__retarget_lock_release_recursive>
 8022880:	89ab      	ldrh	r3, [r5, #12]
 8022882:	065b      	lsls	r3, r3, #25
 8022884:	f53f af12 	bmi.w	80226ac <_vfiprintf_r+0x4c>
 8022888:	9809      	ldr	r0, [sp, #36]	; 0x24
 802288a:	e711      	b.n	80226b0 <_vfiprintf_r+0x50>
 802288c:	ab03      	add	r3, sp, #12
 802288e:	9300      	str	r3, [sp, #0]
 8022890:	462a      	mov	r2, r5
 8022892:	4b09      	ldr	r3, [pc, #36]	; (80228b8 <_vfiprintf_r+0x258>)
 8022894:	a904      	add	r1, sp, #16
 8022896:	4630      	mov	r0, r6
 8022898:	f000 f880 	bl	802299c <_printf_i>
 802289c:	e7e4      	b.n	8022868 <_vfiprintf_r+0x208>
 802289e:	bf00      	nop
 80228a0:	0802a608 	.word	0x0802a608
 80228a4:	0802a628 	.word	0x0802a628
 80228a8:	0802a5e8 	.word	0x0802a5e8
 80228ac:	0802a876 	.word	0x0802a876
 80228b0:	0802a880 	.word	0x0802a880
 80228b4:	00000000 	.word	0x00000000
 80228b8:	0802263b 	.word	0x0802263b
 80228bc:	0802a87c 	.word	0x0802a87c

080228c0 <_printf_common>:
 80228c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80228c4:	4616      	mov	r6, r2
 80228c6:	4699      	mov	r9, r3
 80228c8:	688a      	ldr	r2, [r1, #8]
 80228ca:	690b      	ldr	r3, [r1, #16]
 80228cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80228d0:	4293      	cmp	r3, r2
 80228d2:	bfb8      	it	lt
 80228d4:	4613      	movlt	r3, r2
 80228d6:	6033      	str	r3, [r6, #0]
 80228d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80228dc:	4607      	mov	r7, r0
 80228de:	460c      	mov	r4, r1
 80228e0:	b10a      	cbz	r2, 80228e6 <_printf_common+0x26>
 80228e2:	3301      	adds	r3, #1
 80228e4:	6033      	str	r3, [r6, #0]
 80228e6:	6823      	ldr	r3, [r4, #0]
 80228e8:	0699      	lsls	r1, r3, #26
 80228ea:	bf42      	ittt	mi
 80228ec:	6833      	ldrmi	r3, [r6, #0]
 80228ee:	3302      	addmi	r3, #2
 80228f0:	6033      	strmi	r3, [r6, #0]
 80228f2:	6825      	ldr	r5, [r4, #0]
 80228f4:	f015 0506 	ands.w	r5, r5, #6
 80228f8:	d106      	bne.n	8022908 <_printf_common+0x48>
 80228fa:	f104 0a19 	add.w	sl, r4, #25
 80228fe:	68e3      	ldr	r3, [r4, #12]
 8022900:	6832      	ldr	r2, [r6, #0]
 8022902:	1a9b      	subs	r3, r3, r2
 8022904:	42ab      	cmp	r3, r5
 8022906:	dc26      	bgt.n	8022956 <_printf_common+0x96>
 8022908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802290c:	1e13      	subs	r3, r2, #0
 802290e:	6822      	ldr	r2, [r4, #0]
 8022910:	bf18      	it	ne
 8022912:	2301      	movne	r3, #1
 8022914:	0692      	lsls	r2, r2, #26
 8022916:	d42b      	bmi.n	8022970 <_printf_common+0xb0>
 8022918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802291c:	4649      	mov	r1, r9
 802291e:	4638      	mov	r0, r7
 8022920:	47c0      	blx	r8
 8022922:	3001      	adds	r0, #1
 8022924:	d01e      	beq.n	8022964 <_printf_common+0xa4>
 8022926:	6823      	ldr	r3, [r4, #0]
 8022928:	68e5      	ldr	r5, [r4, #12]
 802292a:	6832      	ldr	r2, [r6, #0]
 802292c:	f003 0306 	and.w	r3, r3, #6
 8022930:	2b04      	cmp	r3, #4
 8022932:	bf08      	it	eq
 8022934:	1aad      	subeq	r5, r5, r2
 8022936:	68a3      	ldr	r3, [r4, #8]
 8022938:	6922      	ldr	r2, [r4, #16]
 802293a:	bf0c      	ite	eq
 802293c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022940:	2500      	movne	r5, #0
 8022942:	4293      	cmp	r3, r2
 8022944:	bfc4      	itt	gt
 8022946:	1a9b      	subgt	r3, r3, r2
 8022948:	18ed      	addgt	r5, r5, r3
 802294a:	2600      	movs	r6, #0
 802294c:	341a      	adds	r4, #26
 802294e:	42b5      	cmp	r5, r6
 8022950:	d11a      	bne.n	8022988 <_printf_common+0xc8>
 8022952:	2000      	movs	r0, #0
 8022954:	e008      	b.n	8022968 <_printf_common+0xa8>
 8022956:	2301      	movs	r3, #1
 8022958:	4652      	mov	r2, sl
 802295a:	4649      	mov	r1, r9
 802295c:	4638      	mov	r0, r7
 802295e:	47c0      	blx	r8
 8022960:	3001      	adds	r0, #1
 8022962:	d103      	bne.n	802296c <_printf_common+0xac>
 8022964:	f04f 30ff 	mov.w	r0, #4294967295
 8022968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802296c:	3501      	adds	r5, #1
 802296e:	e7c6      	b.n	80228fe <_printf_common+0x3e>
 8022970:	18e1      	adds	r1, r4, r3
 8022972:	1c5a      	adds	r2, r3, #1
 8022974:	2030      	movs	r0, #48	; 0x30
 8022976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802297a:	4422      	add	r2, r4
 802297c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022984:	3302      	adds	r3, #2
 8022986:	e7c7      	b.n	8022918 <_printf_common+0x58>
 8022988:	2301      	movs	r3, #1
 802298a:	4622      	mov	r2, r4
 802298c:	4649      	mov	r1, r9
 802298e:	4638      	mov	r0, r7
 8022990:	47c0      	blx	r8
 8022992:	3001      	adds	r0, #1
 8022994:	d0e6      	beq.n	8022964 <_printf_common+0xa4>
 8022996:	3601      	adds	r6, #1
 8022998:	e7d9      	b.n	802294e <_printf_common+0x8e>
	...

0802299c <_printf_i>:
 802299c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80229a0:	460c      	mov	r4, r1
 80229a2:	4691      	mov	r9, r2
 80229a4:	7e27      	ldrb	r7, [r4, #24]
 80229a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80229a8:	2f78      	cmp	r7, #120	; 0x78
 80229aa:	4680      	mov	r8, r0
 80229ac:	469a      	mov	sl, r3
 80229ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80229b2:	d807      	bhi.n	80229c4 <_printf_i+0x28>
 80229b4:	2f62      	cmp	r7, #98	; 0x62
 80229b6:	d80a      	bhi.n	80229ce <_printf_i+0x32>
 80229b8:	2f00      	cmp	r7, #0
 80229ba:	f000 80d8 	beq.w	8022b6e <_printf_i+0x1d2>
 80229be:	2f58      	cmp	r7, #88	; 0x58
 80229c0:	f000 80a3 	beq.w	8022b0a <_printf_i+0x16e>
 80229c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80229c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80229cc:	e03a      	b.n	8022a44 <_printf_i+0xa8>
 80229ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80229d2:	2b15      	cmp	r3, #21
 80229d4:	d8f6      	bhi.n	80229c4 <_printf_i+0x28>
 80229d6:	a001      	add	r0, pc, #4	; (adr r0, 80229dc <_printf_i+0x40>)
 80229d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80229dc:	08022a35 	.word	0x08022a35
 80229e0:	08022a49 	.word	0x08022a49
 80229e4:	080229c5 	.word	0x080229c5
 80229e8:	080229c5 	.word	0x080229c5
 80229ec:	080229c5 	.word	0x080229c5
 80229f0:	080229c5 	.word	0x080229c5
 80229f4:	08022a49 	.word	0x08022a49
 80229f8:	080229c5 	.word	0x080229c5
 80229fc:	080229c5 	.word	0x080229c5
 8022a00:	080229c5 	.word	0x080229c5
 8022a04:	080229c5 	.word	0x080229c5
 8022a08:	08022b55 	.word	0x08022b55
 8022a0c:	08022a79 	.word	0x08022a79
 8022a10:	08022b37 	.word	0x08022b37
 8022a14:	080229c5 	.word	0x080229c5
 8022a18:	080229c5 	.word	0x080229c5
 8022a1c:	08022b77 	.word	0x08022b77
 8022a20:	080229c5 	.word	0x080229c5
 8022a24:	08022a79 	.word	0x08022a79
 8022a28:	080229c5 	.word	0x080229c5
 8022a2c:	080229c5 	.word	0x080229c5
 8022a30:	08022b3f 	.word	0x08022b3f
 8022a34:	680b      	ldr	r3, [r1, #0]
 8022a36:	1d1a      	adds	r2, r3, #4
 8022a38:	681b      	ldr	r3, [r3, #0]
 8022a3a:	600a      	str	r2, [r1, #0]
 8022a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022a44:	2301      	movs	r3, #1
 8022a46:	e0a3      	b.n	8022b90 <_printf_i+0x1f4>
 8022a48:	6825      	ldr	r5, [r4, #0]
 8022a4a:	6808      	ldr	r0, [r1, #0]
 8022a4c:	062e      	lsls	r6, r5, #24
 8022a4e:	f100 0304 	add.w	r3, r0, #4
 8022a52:	d50a      	bpl.n	8022a6a <_printf_i+0xce>
 8022a54:	6805      	ldr	r5, [r0, #0]
 8022a56:	600b      	str	r3, [r1, #0]
 8022a58:	2d00      	cmp	r5, #0
 8022a5a:	da03      	bge.n	8022a64 <_printf_i+0xc8>
 8022a5c:	232d      	movs	r3, #45	; 0x2d
 8022a5e:	426d      	negs	r5, r5
 8022a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022a64:	485e      	ldr	r0, [pc, #376]	; (8022be0 <_printf_i+0x244>)
 8022a66:	230a      	movs	r3, #10
 8022a68:	e019      	b.n	8022a9e <_printf_i+0x102>
 8022a6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022a6e:	6805      	ldr	r5, [r0, #0]
 8022a70:	600b      	str	r3, [r1, #0]
 8022a72:	bf18      	it	ne
 8022a74:	b22d      	sxthne	r5, r5
 8022a76:	e7ef      	b.n	8022a58 <_printf_i+0xbc>
 8022a78:	680b      	ldr	r3, [r1, #0]
 8022a7a:	6825      	ldr	r5, [r4, #0]
 8022a7c:	1d18      	adds	r0, r3, #4
 8022a7e:	6008      	str	r0, [r1, #0]
 8022a80:	0628      	lsls	r0, r5, #24
 8022a82:	d501      	bpl.n	8022a88 <_printf_i+0xec>
 8022a84:	681d      	ldr	r5, [r3, #0]
 8022a86:	e002      	b.n	8022a8e <_printf_i+0xf2>
 8022a88:	0669      	lsls	r1, r5, #25
 8022a8a:	d5fb      	bpl.n	8022a84 <_printf_i+0xe8>
 8022a8c:	881d      	ldrh	r5, [r3, #0]
 8022a8e:	4854      	ldr	r0, [pc, #336]	; (8022be0 <_printf_i+0x244>)
 8022a90:	2f6f      	cmp	r7, #111	; 0x6f
 8022a92:	bf0c      	ite	eq
 8022a94:	2308      	moveq	r3, #8
 8022a96:	230a      	movne	r3, #10
 8022a98:	2100      	movs	r1, #0
 8022a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022a9e:	6866      	ldr	r6, [r4, #4]
 8022aa0:	60a6      	str	r6, [r4, #8]
 8022aa2:	2e00      	cmp	r6, #0
 8022aa4:	bfa2      	ittt	ge
 8022aa6:	6821      	ldrge	r1, [r4, #0]
 8022aa8:	f021 0104 	bicge.w	r1, r1, #4
 8022aac:	6021      	strge	r1, [r4, #0]
 8022aae:	b90d      	cbnz	r5, 8022ab4 <_printf_i+0x118>
 8022ab0:	2e00      	cmp	r6, #0
 8022ab2:	d04d      	beq.n	8022b50 <_printf_i+0x1b4>
 8022ab4:	4616      	mov	r6, r2
 8022ab6:	fbb5 f1f3 	udiv	r1, r5, r3
 8022aba:	fb03 5711 	mls	r7, r3, r1, r5
 8022abe:	5dc7      	ldrb	r7, [r0, r7]
 8022ac0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022ac4:	462f      	mov	r7, r5
 8022ac6:	42bb      	cmp	r3, r7
 8022ac8:	460d      	mov	r5, r1
 8022aca:	d9f4      	bls.n	8022ab6 <_printf_i+0x11a>
 8022acc:	2b08      	cmp	r3, #8
 8022ace:	d10b      	bne.n	8022ae8 <_printf_i+0x14c>
 8022ad0:	6823      	ldr	r3, [r4, #0]
 8022ad2:	07df      	lsls	r7, r3, #31
 8022ad4:	d508      	bpl.n	8022ae8 <_printf_i+0x14c>
 8022ad6:	6923      	ldr	r3, [r4, #16]
 8022ad8:	6861      	ldr	r1, [r4, #4]
 8022ada:	4299      	cmp	r1, r3
 8022adc:	bfde      	ittt	le
 8022ade:	2330      	movle	r3, #48	; 0x30
 8022ae0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022ae4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022ae8:	1b92      	subs	r2, r2, r6
 8022aea:	6122      	str	r2, [r4, #16]
 8022aec:	f8cd a000 	str.w	sl, [sp]
 8022af0:	464b      	mov	r3, r9
 8022af2:	aa03      	add	r2, sp, #12
 8022af4:	4621      	mov	r1, r4
 8022af6:	4640      	mov	r0, r8
 8022af8:	f7ff fee2 	bl	80228c0 <_printf_common>
 8022afc:	3001      	adds	r0, #1
 8022afe:	d14c      	bne.n	8022b9a <_printf_i+0x1fe>
 8022b00:	f04f 30ff 	mov.w	r0, #4294967295
 8022b04:	b004      	add	sp, #16
 8022b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b0a:	4835      	ldr	r0, [pc, #212]	; (8022be0 <_printf_i+0x244>)
 8022b0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022b10:	6823      	ldr	r3, [r4, #0]
 8022b12:	680e      	ldr	r6, [r1, #0]
 8022b14:	061f      	lsls	r7, r3, #24
 8022b16:	f856 5b04 	ldr.w	r5, [r6], #4
 8022b1a:	600e      	str	r6, [r1, #0]
 8022b1c:	d514      	bpl.n	8022b48 <_printf_i+0x1ac>
 8022b1e:	07d9      	lsls	r1, r3, #31
 8022b20:	bf44      	itt	mi
 8022b22:	f043 0320 	orrmi.w	r3, r3, #32
 8022b26:	6023      	strmi	r3, [r4, #0]
 8022b28:	b91d      	cbnz	r5, 8022b32 <_printf_i+0x196>
 8022b2a:	6823      	ldr	r3, [r4, #0]
 8022b2c:	f023 0320 	bic.w	r3, r3, #32
 8022b30:	6023      	str	r3, [r4, #0]
 8022b32:	2310      	movs	r3, #16
 8022b34:	e7b0      	b.n	8022a98 <_printf_i+0xfc>
 8022b36:	6823      	ldr	r3, [r4, #0]
 8022b38:	f043 0320 	orr.w	r3, r3, #32
 8022b3c:	6023      	str	r3, [r4, #0]
 8022b3e:	2378      	movs	r3, #120	; 0x78
 8022b40:	4828      	ldr	r0, [pc, #160]	; (8022be4 <_printf_i+0x248>)
 8022b42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022b46:	e7e3      	b.n	8022b10 <_printf_i+0x174>
 8022b48:	065e      	lsls	r6, r3, #25
 8022b4a:	bf48      	it	mi
 8022b4c:	b2ad      	uxthmi	r5, r5
 8022b4e:	e7e6      	b.n	8022b1e <_printf_i+0x182>
 8022b50:	4616      	mov	r6, r2
 8022b52:	e7bb      	b.n	8022acc <_printf_i+0x130>
 8022b54:	680b      	ldr	r3, [r1, #0]
 8022b56:	6826      	ldr	r6, [r4, #0]
 8022b58:	6960      	ldr	r0, [r4, #20]
 8022b5a:	1d1d      	adds	r5, r3, #4
 8022b5c:	600d      	str	r5, [r1, #0]
 8022b5e:	0635      	lsls	r5, r6, #24
 8022b60:	681b      	ldr	r3, [r3, #0]
 8022b62:	d501      	bpl.n	8022b68 <_printf_i+0x1cc>
 8022b64:	6018      	str	r0, [r3, #0]
 8022b66:	e002      	b.n	8022b6e <_printf_i+0x1d2>
 8022b68:	0671      	lsls	r1, r6, #25
 8022b6a:	d5fb      	bpl.n	8022b64 <_printf_i+0x1c8>
 8022b6c:	8018      	strh	r0, [r3, #0]
 8022b6e:	2300      	movs	r3, #0
 8022b70:	6123      	str	r3, [r4, #16]
 8022b72:	4616      	mov	r6, r2
 8022b74:	e7ba      	b.n	8022aec <_printf_i+0x150>
 8022b76:	680b      	ldr	r3, [r1, #0]
 8022b78:	1d1a      	adds	r2, r3, #4
 8022b7a:	600a      	str	r2, [r1, #0]
 8022b7c:	681e      	ldr	r6, [r3, #0]
 8022b7e:	6862      	ldr	r2, [r4, #4]
 8022b80:	2100      	movs	r1, #0
 8022b82:	4630      	mov	r0, r6
 8022b84:	f7ed fa5c 	bl	8010040 <memchr>
 8022b88:	b108      	cbz	r0, 8022b8e <_printf_i+0x1f2>
 8022b8a:	1b80      	subs	r0, r0, r6
 8022b8c:	6060      	str	r0, [r4, #4]
 8022b8e:	6863      	ldr	r3, [r4, #4]
 8022b90:	6123      	str	r3, [r4, #16]
 8022b92:	2300      	movs	r3, #0
 8022b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022b98:	e7a8      	b.n	8022aec <_printf_i+0x150>
 8022b9a:	6923      	ldr	r3, [r4, #16]
 8022b9c:	4632      	mov	r2, r6
 8022b9e:	4649      	mov	r1, r9
 8022ba0:	4640      	mov	r0, r8
 8022ba2:	47d0      	blx	sl
 8022ba4:	3001      	adds	r0, #1
 8022ba6:	d0ab      	beq.n	8022b00 <_printf_i+0x164>
 8022ba8:	6823      	ldr	r3, [r4, #0]
 8022baa:	079b      	lsls	r3, r3, #30
 8022bac:	d413      	bmi.n	8022bd6 <_printf_i+0x23a>
 8022bae:	68e0      	ldr	r0, [r4, #12]
 8022bb0:	9b03      	ldr	r3, [sp, #12]
 8022bb2:	4298      	cmp	r0, r3
 8022bb4:	bfb8      	it	lt
 8022bb6:	4618      	movlt	r0, r3
 8022bb8:	e7a4      	b.n	8022b04 <_printf_i+0x168>
 8022bba:	2301      	movs	r3, #1
 8022bbc:	4632      	mov	r2, r6
 8022bbe:	4649      	mov	r1, r9
 8022bc0:	4640      	mov	r0, r8
 8022bc2:	47d0      	blx	sl
 8022bc4:	3001      	adds	r0, #1
 8022bc6:	d09b      	beq.n	8022b00 <_printf_i+0x164>
 8022bc8:	3501      	adds	r5, #1
 8022bca:	68e3      	ldr	r3, [r4, #12]
 8022bcc:	9903      	ldr	r1, [sp, #12]
 8022bce:	1a5b      	subs	r3, r3, r1
 8022bd0:	42ab      	cmp	r3, r5
 8022bd2:	dcf2      	bgt.n	8022bba <_printf_i+0x21e>
 8022bd4:	e7eb      	b.n	8022bae <_printf_i+0x212>
 8022bd6:	2500      	movs	r5, #0
 8022bd8:	f104 0619 	add.w	r6, r4, #25
 8022bdc:	e7f5      	b.n	8022bca <_printf_i+0x22e>
 8022bde:	bf00      	nop
 8022be0:	0802a887 	.word	0x0802a887
 8022be4:	0802a898 	.word	0x0802a898

08022be8 <_read_r>:
 8022be8:	b538      	push	{r3, r4, r5, lr}
 8022bea:	4d07      	ldr	r5, [pc, #28]	; (8022c08 <_read_r+0x20>)
 8022bec:	4604      	mov	r4, r0
 8022bee:	4608      	mov	r0, r1
 8022bf0:	4611      	mov	r1, r2
 8022bf2:	2200      	movs	r2, #0
 8022bf4:	602a      	str	r2, [r5, #0]
 8022bf6:	461a      	mov	r2, r3
 8022bf8:	f7ef faa6 	bl	8012148 <_read>
 8022bfc:	1c43      	adds	r3, r0, #1
 8022bfe:	d102      	bne.n	8022c06 <_read_r+0x1e>
 8022c00:	682b      	ldr	r3, [r5, #0]
 8022c02:	b103      	cbz	r3, 8022c06 <_read_r+0x1e>
 8022c04:	6023      	str	r3, [r4, #0]
 8022c06:	bd38      	pop	{r3, r4, r5, pc}
 8022c08:	20004e00 	.word	0x20004e00

08022c0c <abort>:
 8022c0c:	b508      	push	{r3, lr}
 8022c0e:	2006      	movs	r0, #6
 8022c10:	f000 f84e 	bl	8022cb0 <raise>
 8022c14:	2001      	movs	r0, #1
 8022c16:	f7ef fa8d 	bl	8012134 <_exit>
	...

08022c1c <_fstat_r>:
 8022c1c:	b538      	push	{r3, r4, r5, lr}
 8022c1e:	4d07      	ldr	r5, [pc, #28]	; (8022c3c <_fstat_r+0x20>)
 8022c20:	2300      	movs	r3, #0
 8022c22:	4604      	mov	r4, r0
 8022c24:	4608      	mov	r0, r1
 8022c26:	4611      	mov	r1, r2
 8022c28:	602b      	str	r3, [r5, #0]
 8022c2a:	f7ef fad2 	bl	80121d2 <_fstat>
 8022c2e:	1c43      	adds	r3, r0, #1
 8022c30:	d102      	bne.n	8022c38 <_fstat_r+0x1c>
 8022c32:	682b      	ldr	r3, [r5, #0]
 8022c34:	b103      	cbz	r3, 8022c38 <_fstat_r+0x1c>
 8022c36:	6023      	str	r3, [r4, #0]
 8022c38:	bd38      	pop	{r3, r4, r5, pc}
 8022c3a:	bf00      	nop
 8022c3c:	20004e00 	.word	0x20004e00

08022c40 <_isatty_r>:
 8022c40:	b538      	push	{r3, r4, r5, lr}
 8022c42:	4d06      	ldr	r5, [pc, #24]	; (8022c5c <_isatty_r+0x1c>)
 8022c44:	2300      	movs	r3, #0
 8022c46:	4604      	mov	r4, r0
 8022c48:	4608      	mov	r0, r1
 8022c4a:	602b      	str	r3, [r5, #0]
 8022c4c:	f7ef fad1 	bl	80121f2 <_isatty>
 8022c50:	1c43      	adds	r3, r0, #1
 8022c52:	d102      	bne.n	8022c5a <_isatty_r+0x1a>
 8022c54:	682b      	ldr	r3, [r5, #0]
 8022c56:	b103      	cbz	r3, 8022c5a <_isatty_r+0x1a>
 8022c58:	6023      	str	r3, [r4, #0]
 8022c5a:	bd38      	pop	{r3, r4, r5, pc}
 8022c5c:	20004e00 	.word	0x20004e00

08022c60 <_raise_r>:
 8022c60:	291f      	cmp	r1, #31
 8022c62:	b538      	push	{r3, r4, r5, lr}
 8022c64:	4604      	mov	r4, r0
 8022c66:	460d      	mov	r5, r1
 8022c68:	d904      	bls.n	8022c74 <_raise_r+0x14>
 8022c6a:	2316      	movs	r3, #22
 8022c6c:	6003      	str	r3, [r0, #0]
 8022c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8022c72:	bd38      	pop	{r3, r4, r5, pc}
 8022c74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022c76:	b112      	cbz	r2, 8022c7e <_raise_r+0x1e>
 8022c78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022c7c:	b94b      	cbnz	r3, 8022c92 <_raise_r+0x32>
 8022c7e:	4620      	mov	r0, r4
 8022c80:	f000 f830 	bl	8022ce4 <_getpid_r>
 8022c84:	462a      	mov	r2, r5
 8022c86:	4601      	mov	r1, r0
 8022c88:	4620      	mov	r0, r4
 8022c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022c8e:	f000 b817 	b.w	8022cc0 <_kill_r>
 8022c92:	2b01      	cmp	r3, #1
 8022c94:	d00a      	beq.n	8022cac <_raise_r+0x4c>
 8022c96:	1c59      	adds	r1, r3, #1
 8022c98:	d103      	bne.n	8022ca2 <_raise_r+0x42>
 8022c9a:	2316      	movs	r3, #22
 8022c9c:	6003      	str	r3, [r0, #0]
 8022c9e:	2001      	movs	r0, #1
 8022ca0:	e7e7      	b.n	8022c72 <_raise_r+0x12>
 8022ca2:	2400      	movs	r4, #0
 8022ca4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022ca8:	4628      	mov	r0, r5
 8022caa:	4798      	blx	r3
 8022cac:	2000      	movs	r0, #0
 8022cae:	e7e0      	b.n	8022c72 <_raise_r+0x12>

08022cb0 <raise>:
 8022cb0:	4b02      	ldr	r3, [pc, #8]	; (8022cbc <raise+0xc>)
 8022cb2:	4601      	mov	r1, r0
 8022cb4:	6818      	ldr	r0, [r3, #0]
 8022cb6:	f7ff bfd3 	b.w	8022c60 <_raise_r>
 8022cba:	bf00      	nop
 8022cbc:	20000108 	.word	0x20000108

08022cc0 <_kill_r>:
 8022cc0:	b538      	push	{r3, r4, r5, lr}
 8022cc2:	4d07      	ldr	r5, [pc, #28]	; (8022ce0 <_kill_r+0x20>)
 8022cc4:	2300      	movs	r3, #0
 8022cc6:	4604      	mov	r4, r0
 8022cc8:	4608      	mov	r0, r1
 8022cca:	4611      	mov	r1, r2
 8022ccc:	602b      	str	r3, [r5, #0]
 8022cce:	f7ef fa21 	bl	8012114 <_kill>
 8022cd2:	1c43      	adds	r3, r0, #1
 8022cd4:	d102      	bne.n	8022cdc <_kill_r+0x1c>
 8022cd6:	682b      	ldr	r3, [r5, #0]
 8022cd8:	b103      	cbz	r3, 8022cdc <_kill_r+0x1c>
 8022cda:	6023      	str	r3, [r4, #0]
 8022cdc:	bd38      	pop	{r3, r4, r5, pc}
 8022cde:	bf00      	nop
 8022ce0:	20004e00 	.word	0x20004e00

08022ce4 <_getpid_r>:
 8022ce4:	f7ef ba0e 	b.w	8012104 <_getpid>

08022ce8 <_init>:
 8022ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cea:	bf00      	nop
 8022cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022cee:	bc08      	pop	{r3}
 8022cf0:	469e      	mov	lr, r3
 8022cf2:	4770      	bx	lr

08022cf4 <_fini>:
 8022cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cf6:	bf00      	nop
 8022cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022cfa:	bc08      	pop	{r3}
 8022cfc:	469e      	mov	lr, r3
 8022cfe:	4770      	bx	lr
